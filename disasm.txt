
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 07 8c 00 00       	call   c0008c27 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 55 d7 01 00       	call   c001d77a <_init>
c0000025:	c3                   	ret    
c0000026:	bb 16 e2 01 c0       	mov    ebx,0xc001e216
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 20 e2 01 c0    	cmp    ebx,0xc001e220
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 0c 02 c0       	mov    eax,0xc0020cd8
c0000049:	3d d8 0c 02 c0       	cmp    eax,0xc0020cd8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 0c 02 c0       	push   0xc0020cd8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 0c 02 c0       	mov    eax,0xc0020cd8
c0000075:	2d d8 0c 02 c0       	sub    eax,0xc0020cd8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 0c 02 c0       	push   0xc0020cd8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 64 0e 02 c0 00 	cmp    BYTE PTR ds:0xc0020e64,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 28 e2 01 c0       	mov    ebx,0xc001e228
c00000bb:	81 eb 24 e2 01 c0    	sub    ebx,0xc001e224
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 24 e2 01 c0       	mov    esi,0xc001e224
c00000ca:	a1 68 0e 02 c0       	mov    eax,ds:0xc0020e68
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 68 0e 02 c0       	mov    ds:0xc0020e68,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 68 0e 02 c0       	mov    eax,ds:0xc0020e68
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 0c 02 c0       	push   0xc0020cd8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 64 0e 02 c0 01 	mov    BYTE PTR ds:0xc0020e64,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 6c 0e 02 c0       	push   0xc0020e6c
c000012c:	68 d8 0c 02 c0       	push   0xc0020cd8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 64 3d 01 00       	call   c0014034 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 08 b4 00 00       	call   c000b6f0 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 42 3d 01 00       	call   c0014034 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 13 42 01 00       	call   c0014524 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 62 48 01 00       	call   c0014b7c <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 f0 1c 02 c0 	lgdtd  ds:0xc0021cf0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 8e 78 00 00       	jmp    c0007c30 <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 84 0e 02 c0       	mov    ds:0xc0020e84,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 84 0e 02 c0    	mov    DWORD PTR ds:0xc0020e84,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 84 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e84
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 40 e2 01 c0 02 	test   BYTE PTR [edx-0x3ffe1dc0],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 40 e2 01 c0 01 	test   BYTE PTR [edx-0x3ffe1dc0],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 40 e2 01 c0 08 	test   BYTE PTR [edx-0x3ffe1dc0],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 40 e2 01 c0 04 	test   BYTE PTR [ebx-0x3ffe1dc0],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 40 e2 01 c0 01 	test   BYTE PTR [edx-0x3ffe1dc0],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d a0 0e 02 c0    	mov    ecx,DWORD PTR ds:0xc0020ea0
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d a0 0e 02 c0    	mov    DWORD PTR ds:0xc0020ea0,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 a4 0e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdf15c]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 a4 0e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf15c],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d a0 0e 02 c0    	mov    DWORD PTR ds:0xc0020ea0,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 cc 0e 02 c0    	cmp    DWORD PTR ds:0xc0020ecc,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d dc 0e 02 c0    	mov    ecx,DWORD PTR ds:0xc0020edc
c0000d5d:	c7 42 0c d4 0e 02 c0 	mov    DWORD PTR [edx+0xc],0xc0020ed4
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 dc 0e 02 c0    	mov    DWORD PTR ds:0xc0020edc,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 cc 0e 02 c0    	mov    DWORD PTR ds:0xc0020ecc,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 a0 0e 02 c0 02 	test   BYTE PTR ds:0xc0020ea0,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 a0 0e 02 c0       	mov    eax,0xc0020ea0
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 fa 7b 00 00       	call   c0008a38 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 3c 7b 00 00       	call   c0008a38 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 26 7b 00 00       	call   c0008a38 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 02 7b 00 00       	call   c0008a38 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d a0 0e 02 c0    	mov    edi,DWORD PTR ds:0xc0020ea0
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 a0 0e 02 c0       	mov    eax,0xc0020ea0
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 a4 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf15c]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 a4 0e 02 c0 	mov    DWORD PTR [edx*4-0x3ffdf15c],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 d4 0e 02 c0 	lea    edx,[eax*8-0x3ffdf12c]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 a0 0e 02 c0       	mov    eax,0xc0020ea0
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d e0 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ee0
c00010df:	81 fb d4 0e 02 c0    	cmp    ebx,0xc0020ed4
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d d4 0e 02 c0       	cmp    eax,0xc0020ed4
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d d0 0e 02 c0    	cmp    DWORD PTR ds:0xc0020ed0,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 dc 0e 02 c0       	mov    ds:0xc0020edc,eax
c000111b:	a3 e0 0e 02 c0       	mov    ds:0xc0020ee0,eax
c0001120:	a3 d0 0e 02 c0       	mov    ds:0xc0020ed0,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 d4 0e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0020ed4
c000112e:	c7 40 0c d4 0e 02 c0 	mov    DWORD PTR [eax+0xc],0xc0020ed4
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 e0 0e 02 c0       	mov    ds:0xc0020ee0,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 d4 0e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0020ed4
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 98 0e 02 c0 	lea    ebp,[edx*4-0x3ffdf168]
c000117f:	8b 14 95 a0 0e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdf160]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 a0 0e 02 c0 	lea    ecx,[edx*4-0x3ffdf160]
c000119a:	8b 14 95 a0 0e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdf160]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd d4 11 02 c0 	or     DWORD PTR [edi*4-0x3ffdee2c],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 d4 0e 02 c0 	lea    eax,[eax*8-0x3ffdf12c]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d dc 0e 02 c0    	mov    DWORD PTR ds:0xc0020edc,ecx
c0001254:	89 0d e0 0e 02 c0    	mov    DWORD PTR ds:0xc0020ee0,ecx
c000125a:	c7 41 08 d4 0e 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0020ed4
c0001261:	c7 41 0c d4 0e 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0020ed4
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd cc 0e 02 c0 	lea    edx,[ecx*8-0x3ffdf134]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d d4 11 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdee2c]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d d4 11 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdee2c]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 cc 0e 02 c0 	lea    edx,[eax*4-0x3ffdf134]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d d4 11 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdee2c],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d dc 0e 02 c0    	mov    DWORD PTR ds:0xc0020edc,edi
c0001327:	89 3d e0 0e 02 c0    	mov    DWORD PTR ds:0xc0020ee0,edi
c000132d:	c7 47 08 d4 0e 02 c0 	mov    DWORD PTR [edi+0x8],0xc0020ed4
c0001334:	c7 47 0c d4 0e 02 c0 	mov    DWORD PTR [edi+0xc],0xc0020ed4
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d d0 0e 02 c0    	mov    DWORD PTR ds:0xc0020ed0,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 cc 0e 02 c0       	mov    eax,ds:0xc0020ecc
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d cc 0e 02 c0    	mov    DWORD PTR ds:0xc0020ecc,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba a0 0e 02 c0       	mov    edx,0xc0020ea0
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d a0 0e 02 c0 00 	cmp    DWORD PTR ds:0xc0020ea0,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 a0 0e 02 c0       	mov    eax,0xc0020ea0
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d f4 11 02 c0    	mov    ebx,DWORD PTR ds:0xc00211f4
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 f4 11 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00211f4,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d f4 11 02 c0    	mov    DWORD PTR ds:0xc00211f4,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 cc 0e 02 c0    	cmp    DWORD PTR ds:0xc0020ecc,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d cc 0e 02 c0    	mov    DWORD PTR ds:0xc0020ecc,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d a0 0e 02 c0 00 	cmp    DWORD PTR ds:0xc0020ea0,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 a0 0e 02 c0       	mov    eax,0xc0020ea0
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 fc 11 02 c0    	push   DWORD PTR ds:0xc00211fc
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d a0 0e 02 c0 00 	cmp    DWORD PTR ds:0xc0020ea0,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 a0 0e 02 c0       	mov    eax,0xc0020ea0
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 fc 11 02 c0       	mov    eax,ds:0xc00211fc
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 a0 0e 02 c0       	mov    eax,0xc0020ea0
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d cc 0e 02 c0 00 	cmp    DWORD PTR ds:0xc0020ecc,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 a0 0e 02 c0       	mov    eax,0xc0020ea0
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 cc 0e 02 c0       	mov    eax,ds:0xc0020ecc
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 a4 0e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdf15c]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 d4 0e 02 c0       	mov    eax,0xc0020ed4
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d cc 11 02 c0       	cmp    eax,0xc00211cc
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 08 12 02 c0       	mov    eax,ds:0xc0021208
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 f0 11 02 c0    	mov    esi,DWORD PTR ds:0xc00211f0
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 04 12 02 c0    	mov    esi,DWORD PTR ds:0xc0021204
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 14 12 02 c0    	mov    esi,DWORD PTR ds:0xc0021214
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 a0 0e 02 c0       	mov    eax,0xc0020ea0
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 44 e3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1cbc]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 a0 0e 02 c0       	mov    eax,ds:0xc0020ea0
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 a0 0e 02 c0       	mov    ds:0xc0020ea0,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d e4 11 02 c0    	mov    DWORD PTR ds:0xc00211e4,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d e8 11 02 c0    	mov    DWORD PTR ds:0xc00211e8,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d ec 11 02 c0    	mov    DWORD PTR ds:0xc00211ec,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 f4 11 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00211f4,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    
c0001afb:	90                   	nop

c0001afc <isblank>:
c0001afc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b01:	74 09                	je     c0001b0c <isblank+0x10>
c0001b03:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b08:	75 0a                	jne    c0001b14 <isblank+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <iscntrl>:
c0001b1c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b21:	7e 09                	jle    c0001b2c <iscntrl+0x10>
c0001b23:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b28:	75 0a                	jne    c0001b34 <iscntrl+0x18>
c0001b2a:	66 90                	xchg   ax,ax
c0001b2c:	b8 01 00 00 00       	mov    eax,0x1
c0001b31:	c3                   	ret    
c0001b32:	66 90                	xchg   ax,ax
c0001b34:	b8 00 00 00 00       	mov    eax,0x0
c0001b39:	c3                   	ret    
c0001b3a:	66 90                	xchg   ax,ax

c0001b3c <isdigit>:
c0001b3c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b41:	7e 0d                	jle    c0001b50 <isdigit+0x14>
c0001b43:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b48:	7f 06                	jg     c0001b50 <isdigit+0x14>
c0001b4a:	b8 01 00 00 00       	mov    eax,0x1
c0001b4f:	c3                   	ret    
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <islower>:
c0001b58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b5d:	7e 0d                	jle    c0001b6c <islower+0x14>
c0001b5f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b64:	7f 06                	jg     c0001b6c <islower+0x14>
c0001b66:	b8 01 00 00 00       	mov    eax,0x1
c0001b6b:	c3                   	ret    
c0001b6c:	b8 00 00 00 00       	mov    eax,0x0
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax

c0001b74 <isspace>:
c0001b74:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b79:	7c 19                	jl     c0001b94 <isspace+0x20>
c0001b7b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b80:	7e 0a                	jle    c0001b8c <isspace+0x18>
c0001b82:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b87:	75 0b                	jne    c0001b94 <isspace+0x20>
c0001b89:	8d 76 00             	lea    esi,[esi+0x0]
c0001b8c:	b8 01 00 00 00       	mov    eax,0x1
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax
c0001b94:	b8 00 00 00 00       	mov    eax,0x0
c0001b99:	c3                   	ret    
c0001b9a:	66 90                	xchg   ax,ax

c0001b9c <isupper>:
c0001b9c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ba1:	7e 0d                	jle    c0001bb0 <isupper+0x14>
c0001ba3:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001ba8:	7f 06                	jg     c0001bb0 <isupper+0x14>
c0001baa:	b8 01 00 00 00       	mov    eax,0x1
c0001baf:	c3                   	ret    
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalpha>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 db ff ff ff       	call   c0001b9c <isupper>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalpha+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 87 ff ff ff       	call   c0001b58 <islower>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalpha+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <isalnum>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalpha>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 10                	jne    c0001c08 <isalnum+0x20>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 3b ff ff ff       	call   c0001b3c <isdigit>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	74 08                	je     c0001c10 <isalnum+0x28>
c0001c08:	b8 01 00 00 00       	mov    eax,0x1
c0001c0d:	c3                   	ret    
c0001c0e:	66 90                	xchg   ax,ax
c0001c10:	b8 00 00 00 00       	mov    eax,0x0
c0001c15:	c3                   	ret    
c0001c16:	66 90                	xchg   ax,ax

c0001c18 <ispunct>:
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 c7 ff ff ff       	call   c0001be8 <isalnum>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 28                	jne    c0001c50 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 43 ff ff ff       	call   c0001b74 <isspace>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 18                	jne    c0001c50 <ispunct+0x38>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 db fe ff ff       	call   c0001b1c <iscntrl>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 08                	jne    c0001c50 <ispunct+0x38>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isgraph>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 87 ff ff ff       	call   c0001be8 <isalnum>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 10                	jne    c0001c78 <isgraph+0x20>
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 a7 ff ff ff       	call   c0001c18 <ispunct>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	74 08                	je     c0001c80 <isgraph+0x28>
c0001c78:	b8 01 00 00 00       	mov    eax,0x1
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isprint>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 c7 ff ff ff       	call   c0001c58 <isgraph>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 08                	jne    c0001ca0 <isprint+0x18>
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	75 09                	jne    c0001ca8 <isprint+0x20>
c0001c9f:	90                   	nop
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <isxdigit>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 83 fe ff ff       	call   c0001b3c <isdigit>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 20                	jne    c0001ce0 <isxdigit+0x30>
c0001cc0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cc5:	7e 09                	jle    c0001cd0 <isxdigit+0x20>
c0001cc7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ccc:	7e 12                	jle    c0001ce0 <isxdigit+0x30>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cd5:	7e 11                	jle    c0001ce8 <isxdigit+0x38>
c0001cd7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cdc:	7f 0a                	jg     c0001ce8 <isxdigit+0x38>
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    

c0001cee <disk_status>:
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	c3                   	ret    

c0001cf1 <disk_initialize>:
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	c3                   	ret    

c0001cf4 <disk_read>:
c0001cf4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cf9:	0f b6 04 85 00 53 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad00]
c0001d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d05:	e9 9a 60 01 00       	jmp    c0017da4 <fatWrapperReadDisk>

c0001d0a <disk_write>:
c0001d0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0f:	0f b6 04 85 00 53 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad00]
c0001d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1b:	e9 c8 60 01 00       	jmp    c0017de8 <fatWrapperWriteDisk>

c0001d20 <disk_ioctl>:
c0001d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d29:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2e:	0f b6 04 85 00 53 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad00]
c0001d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d3a:	e9 ed 60 01 00       	jmp    c0017e2c <fatWrapperIoctl>

c0001d3f <ld_word>:
c0001d3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d46:	c1 e2 08             	shl    edx,0x8
c0001d49:	09 d0                	or     eax,edx
c0001d4b:	c3                   	ret    

c0001d4c <ld_dword>:
c0001d4c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d50:	89 d1                	mov    ecx,edx
c0001d52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d56:	c1 e1 08             	shl    ecx,0x8
c0001d59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d5c:	09 ca                	or     edx,ecx
c0001d5e:	c1 e2 08             	shl    edx,0x8
c0001d61:	09 d0                	or     eax,edx
c0001d63:	c3                   	ret    

c0001d64 <st_word>:
c0001d64:	66 89 10             	mov    WORD PTR [eax],dx
c0001d67:	c3                   	ret    

c0001d68 <st_dword>:
c0001d68:	89 10                	mov    DWORD PTR [eax],edx
c0001d6a:	c3                   	ret    

c0001d6b <mem_cpy>:
c0001d6b:	85 c9                	test   ecx,ecx
c0001d6d:	74 10                	je     c0001d7f <mem_cpy+0x14>
c0001d6f:	57                   	push   edi
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	56                   	push   esi
c0001d73:	89 c7                	mov    edi,eax
c0001d75:	89 d6                	mov    esi,edx
c0001d77:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d78:	39 f9                	cmp    ecx,edi
c0001d7a:	75 fb                	jne    c0001d77 <mem_cpy+0xc>
c0001d7c:	5e                   	pop    esi
c0001d7d:	5f                   	pop    edi
c0001d7e:	c3                   	ret    
c0001d7f:	c3                   	ret    

c0001d80 <mem_set>:
c0001d80:	01 c1                	add    ecx,eax
c0001d82:	40                   	inc    eax
c0001d83:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d86:	39 c8                	cmp    eax,ecx
c0001d88:	75 f8                	jne    c0001d82 <mem_set+0x2>
c0001d8a:	c3                   	ret    

c0001d8b <mem_cmp>:
c0001d8b:	57                   	push   edi
c0001d8c:	56                   	push   esi
c0001d8d:	89 c6                	mov    esi,eax
c0001d8f:	53                   	push   ebx
c0001d90:	46                   	inc    esi
c0001d91:	42                   	inc    edx
c0001d92:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d96:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d9a:	29 fb                	sub    ebx,edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	29 f7                	sub    edi,esi
c0001da0:	01 c7                	add    edi,eax
c0001da2:	74 04                	je     c0001da8 <mem_cmp+0x1d>
c0001da4:	85 db                	test   ebx,ebx
c0001da6:	74 e8                	je     c0001d90 <mem_cmp+0x5>
c0001da8:	89 d8                	mov    eax,ebx
c0001daa:	5b                   	pop    ebx
c0001dab:	5e                   	pop    esi
c0001dac:	5f                   	pop    edi
c0001dad:	c3                   	ret    

c0001dae <chk_chr>:
c0001dae:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001db1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001db4:	74 07                	je     c0001dbd <chk_chr+0xf>
c0001db6:	39 d1                	cmp    ecx,edx
c0001db8:	74 03                	je     c0001dbd <chk_chr+0xf>
c0001dba:	40                   	inc    eax
c0001dbb:	eb f1                	jmp    c0001dae <chk_chr>
c0001dbd:	89 c8                	mov    eax,ecx
c0001dbf:	c3                   	ret    

c0001dc0 <dbc_1st>:
c0001dc0:	31 c0                	xor    eax,eax
c0001dc2:	c3                   	ret    

c0001dc3 <dbc_2nd>:
c0001dc3:	31 c0                	xor    eax,eax
c0001dc5:	c3                   	ret    

c0001dc6 <tchar2uni>:
c0001dc6:	57                   	push   edi
c0001dc7:	89 c7                	mov    edi,eax
c0001dc9:	56                   	push   esi
c0001dca:	53                   	push   ebx
c0001dcb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dcd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dcf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dd2:	84 c9                	test   cl,cl
c0001dd4:	78 0a                	js     c0001de0 <tchar2uni+0x1a>
c0001dd6:	0f b6 d1             	movzx  edx,cl
c0001dd9:	89 f3                	mov    ebx,esi
c0001ddb:	e9 9f 00 00 00       	jmp    c0001e7f <tchar2uni+0xb9>
c0001de0:	88 ca                	mov    dl,cl
c0001de2:	83 e2 e0             	and    edx,0xffffffe0
c0001de5:	80 fa c0             	cmp    dl,0xc0
c0001de8:	75 0c                	jne    c0001df6 <tchar2uni+0x30>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 01 00 00 00       	mov    ecx,0x1
c0001df1:	83 e2 1f             	and    edx,0x1f
c0001df4:	eb 2e                	jmp    c0001e24 <tchar2uni+0x5e>
c0001df6:	88 ca                	mov    dl,cl
c0001df8:	83 e2 f0             	and    edx,0xfffffff0
c0001dfb:	80 fa e0             	cmp    dl,0xe0
c0001dfe:	75 0c                	jne    c0001e0c <tchar2uni+0x46>
c0001e00:	89 ca                	mov    edx,ecx
c0001e02:	b9 02 00 00 00       	mov    ecx,0x2
c0001e07:	83 e2 0f             	and    edx,0xf
c0001e0a:	eb 18                	jmp    c0001e24 <tchar2uni+0x5e>
c0001e0c:	88 ca                	mov    dl,cl
c0001e0e:	83 e2 f8             	and    edx,0xfffffff8
c0001e11:	88 d0                	mov    al,dl
c0001e13:	83 ca ff             	or     edx,0xffffffff
c0001e16:	3c f0                	cmp    al,0xf0
c0001e18:	75 6c                	jne    c0001e86 <tchar2uni+0xc0>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e21:	83 e2 07             	and    edx,0x7
c0001e24:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e28:	46                   	inc    esi
c0001e29:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e2c:	88 c8                	mov    al,cl
c0001e2e:	83 e0 c0             	and    eax,0xffffffc0
c0001e31:	3c 80                	cmp    al,0x80
c0001e33:	75 4e                	jne    c0001e83 <tchar2uni+0xbd>
c0001e35:	c1 e2 06             	shl    edx,0x6
c0001e38:	83 e1 3f             	and    ecx,0x3f
c0001e3b:	09 ca                	or     edx,ecx
c0001e3d:	39 de                	cmp    esi,ebx
c0001e3f:	75 e7                	jne    c0001e28 <tchar2uni+0x62>
c0001e41:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e44:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e4a:	77 37                	ja     c0001e83 <tchar2uni+0xbd>
c0001e4c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e52:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e58:	76 29                	jbe    c0001e83 <tchar2uni+0xbd>
c0001e5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e60:	76 1d                	jbe    c0001e7f <tchar2uni+0xb9>
c0001e62:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e68:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e6e:	c1 e1 06             	shl    ecx,0x6
c0001e71:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e77:	09 ca                	or     edx,ecx
c0001e79:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e81:	eb 03                	jmp    c0001e86 <tchar2uni+0xc0>
c0001e83:	83 ca ff             	or     edx,0xffffffff
c0001e86:	5b                   	pop    ebx
c0001e87:	89 d0                	mov    eax,edx
c0001e89:	5e                   	pop    esi
c0001e8a:	5f                   	pop    edi
c0001e8b:	c3                   	ret    

c0001e8c <put_utf>:
c0001e8c:	53                   	push   ebx
c0001e8d:	83 f8 7f             	cmp    eax,0x7f
c0001e90:	89 c3                	mov    ebx,eax
c0001e92:	b0 00                	mov    al,0x0
c0001e94:	77 11                	ja     c0001ea7 <put_utf+0x1b>
c0001e96:	85 c9                	test   ecx,ecx
c0001e98:	0f 84 e5 00 00 00    	je     c0001f83 <put_utf+0xf7>
c0001e9e:	88 1a                	mov    BYTE PTR [edx],bl
c0001ea0:	b0 01                	mov    al,0x1
c0001ea2:	e9 dc 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ea7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ead:	77 23                	ja     c0001ed2 <put_utf+0x46>
c0001eaf:	83 f9 01             	cmp    ecx,0x1
c0001eb2:	0f 86 cb 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	83 e3 3f             	and    ebx,0x3f
c0001ebd:	c1 e8 06             	shr    eax,0x6
c0001ec0:	83 cb 80             	or     ebx,0xffffff80
c0001ec3:	83 c8 c0             	or     eax,0xffffffc0
c0001ec6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ec9:	88 02                	mov    BYTE PTR [edx],al
c0001ecb:	b0 02                	mov    al,0x2
c0001ecd:	e9 b1 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ed2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ed8:	77 40                	ja     c0001f1a <put_utf+0x8e>
c0001eda:	83 f9 02             	cmp    ecx,0x2
c0001edd:	0f 86 a0 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ee3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ee9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eef:	0f 86 8e 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ef5:	89 d8                	mov    eax,ebx
c0001ef7:	c1 e8 0c             	shr    eax,0xc
c0001efa:	83 c8 e0             	or     eax,0xffffffe0
c0001efd:	88 02                	mov    BYTE PTR [edx],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f16:	b0 03                	mov    al,0x3
c0001f18:	eb 69                	jmp    c0001f83 <put_utf+0xf7>
c0001f1a:	83 f9 03             	cmp    ecx,0x3
c0001f1d:	76 64                	jbe    c0001f83 <put_utf+0xf7>
c0001f1f:	89 d9                	mov    ecx,ebx
c0001f21:	0f b7 c3             	movzx  eax,bx
c0001f24:	66 31 c9             	xor    cx,cx
c0001f27:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f2d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f33:	c1 e9 06             	shr    ecx,0x6
c0001f36:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f3c:	77 43                	ja     c0001f81 <put_utf+0xf5>
c0001f3e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f44:	77 3b                	ja     c0001f81 <put_utf+0xf5>
c0001f46:	09 cb                	or     ebx,ecx
c0001f48:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f4e:	89 d8                	mov    eax,ebx
c0001f50:	c1 e8 12             	shr    eax,0x12
c0001f53:	83 c8 f0             	or     eax,0xfffffff0
c0001f56:	88 02                	mov    BYTE PTR [edx],al
c0001f58:	89 d8                	mov    eax,ebx
c0001f5a:	c1 e8 0c             	shr    eax,0xc
c0001f5d:	83 e0 3f             	and    eax,0x3f
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f66:	89 d8                	mov    eax,ebx
c0001f68:	83 e3 3f             	and    ebx,0x3f
c0001f6b:	c1 e8 06             	shr    eax,0x6
c0001f6e:	83 cb 80             	or     ebx,0xffffff80
c0001f71:	83 e0 3f             	and    eax,0x3f
c0001f74:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f77:	83 c8 80             	or     eax,0xffffff80
c0001f7a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f7d:	b0 04                	mov    al,0x4
c0001f7f:	eb 02                	jmp    c0001f83 <put_utf+0xf7>
c0001f81:	31 c0                	xor    eax,eax
c0001f83:	5b                   	pop    ebx
c0001f84:	c3                   	ret    

c0001f85 <clst2sect>:
c0001f85:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f8b:	83 ea 02             	sub    edx,0x2
c0001f8e:	39 ca                	cmp    edx,ecx
c0001f90:	76 0d                	jbe    c0001f9f <clst2sect+0x1a>
c0001f92:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f96:	0f af d1             	imul   edx,ecx
c0001f99:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f9c:	89 d0                	mov    eax,edx
c0001f9e:	c3                   	ret    
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <pick_lfn>:
c0001fa2:	55                   	push   ebp
c0001fa3:	57                   	push   edi
c0001fa4:	56                   	push   esi
c0001fa5:	89 d6                	mov    esi,edx
c0001fa7:	53                   	push   ebx
c0001fa8:	89 c3                	mov    ebx,eax
c0001faa:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fad:	e8 8d fd ff ff       	call   c0001d3f <ld_word>
c0001fb2:	66 85 c0             	test   ax,ax
c0001fb5:	74 04                	je     c0001fbb <pick_lfn+0x19>
c0001fb7:	31 c0                	xor    eax,eax
c0001fb9:	eb 5c                	jmp    c0002017 <pick_lfn+0x75>
c0001fbb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fbe:	bd 01 00 00 00       	mov    ebp,0x1
c0001fc3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fc6:	31 ff                	xor    edi,edi
c0001fc8:	49                   	dec    ecx
c0001fc9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fcc:	0f b6 87 a0 e4 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe1b60]
c0001fd3:	01 f0                	add    eax,esi
c0001fd5:	e8 65 fd ff ff       	call   c0001d3f <ld_word>
c0001fda:	66 85 ed             	test   bp,bp
c0001fdd:	74 11                	je     c0001ff0 <pick_lfn+0x4e>
c0001fdf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe5:	77 d0                	ja     c0001fb7 <pick_lfn+0x15>
c0001fe7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001feb:	89 c5                	mov    ebp,eax
c0001fed:	41                   	inc    ecx
c0001fee:	eb 04                	jmp    c0001ff4 <pick_lfn+0x52>
c0001ff0:	66 40                	inc    ax
c0001ff2:	75 c3                	jne    c0001fb7 <pick_lfn+0x15>
c0001ff4:	47                   	inc    edi
c0001ff5:	83 ff 0d             	cmp    edi,0xd
c0001ff8:	75 d2                	jne    c0001fcc <pick_lfn+0x2a>
c0001ffa:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ffd:	74 13                	je     c0002012 <pick_lfn+0x70>
c0001fff:	66 85 ed             	test   bp,bp
c0002002:	74 0e                	je     c0002012 <pick_lfn+0x70>
c0002004:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000200a:	77 ab                	ja     c0001fb7 <pick_lfn+0x15>
c000200c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002012:	b8 01 00 00 00       	mov    eax,0x1
c0002017:	5b                   	pop    ebx
c0002018:	5e                   	pop    esi
c0002019:	5f                   	pop    edi
c000201a:	5d                   	pop    ebp
c000201b:	c3                   	ret    

c000201c <put_lfn>:
c000201c:	55                   	push   ebp
c000201d:	31 ed                	xor    ebp,ebp
c000201f:	57                   	push   edi
c0002020:	89 d7                	mov    edi,edx
c0002022:	56                   	push   esi
c0002023:	31 f6                	xor    esi,esi
c0002025:	53                   	push   ebx
c0002026:	83 ec 08             	sub    esp,0x8
c0002029:	89 04 24             	mov    DWORD PTR [esp],eax
c000202c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002034:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000203a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000203d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002040:	31 d2                	xor    edx,edx
c0002042:	e8 1d fd ff ff       	call   c0001d64 <st_word>
c0002047:	0f b6 d9             	movzx  ebx,cl
c000204a:	4b                   	dec    ebx
c000204b:	6b db 0d             	imul   ebx,ebx,0xd
c000204e:	66 83 fe ff          	cmp    si,0xffff
c0002052:	74 08                	je     c000205c <put_lfn+0x40>
c0002054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002057:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000205b:	43                   	inc    ebx
c000205c:	0f b6 85 a0 e4 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe1b60]
c0002063:	0f b7 d6             	movzx  edx,si
c0002066:	01 f8                	add    eax,edi
c0002068:	e8 f7 fc ff ff       	call   c0001d64 <st_word>
c000206d:	66 85 f6             	test   si,si
c0002070:	75 03                	jne    c0002075 <put_lfn+0x59>
c0002072:	83 ce ff             	or     esi,0xffffffff
c0002075:	45                   	inc    ebp
c0002076:	83 fd 0d             	cmp    ebp,0xd
c0002079:	75 d3                	jne    c000204e <put_lfn+0x32>
c000207b:	66 46                	inc    si
c000207d:	74 0a                	je     c0002089 <put_lfn+0x6d>
c000207f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002082:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002087:	75 09                	jne    c0002092 <put_lfn+0x76>
c0002089:	88 c8                	mov    al,cl
c000208b:	83 c8 40             	or     eax,0x40
c000208e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002092:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002096:	88 07                	mov    BYTE PTR [edi],al
c0002098:	83 c4 08             	add    esp,0x8
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	5f                   	pop    edi
c000209e:	5d                   	pop    ebp
c000209f:	c3                   	ret    

c00020a0 <gen_numname>:
c00020a0:	57                   	push   edi
c00020a1:	89 cf                	mov    edi,ecx
c00020a3:	56                   	push   esi
c00020a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00020a9:	53                   	push   ebx
c00020aa:	89 c6                	mov    esi,eax
c00020ac:	83 ec 10             	sub    esp,0x10
c00020af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020b3:	e8 b3 fc ff ff       	call   c0001d6b <mem_cpy>
c00020b8:	83 fb 05             	cmp    ebx,0x5
c00020bb:	76 2d                	jbe    c00020ea <gen_numname+0x4a>
c00020bd:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020c0:	66 85 c0             	test   ax,ax
c00020c3:	74 25                	je     c00020ea <gen_numname+0x4a>
c00020c5:	83 c7 02             	add    edi,0x2
c00020c8:	ba 10 00 00 00       	mov    edx,0x10
c00020cd:	01 db                	add    ebx,ebx
c00020cf:	89 c1                	mov    ecx,eax
c00020d1:	66 d1 e8             	shr    ax,1
c00020d4:	83 e1 01             	and    ecx,0x1
c00020d7:	01 cb                	add    ebx,ecx
c00020d9:	0f ba e3 10          	bt     ebx,0x10
c00020dd:	73 06                	jae    c00020e5 <gen_numname+0x45>
c00020df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020e5:	4a                   	dec    edx
c00020e6:	75 e5                	jne    c00020cd <gen_numname+0x2d>
c00020e8:	eb d3                	jmp    c00020bd <gen_numname+0x1d>
c00020ea:	b8 07 00 00 00       	mov    eax,0x7
c00020ef:	88 d9                	mov    cl,bl
c00020f1:	83 e1 0f             	and    ecx,0xf
c00020f4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020f7:	80 fa 39             	cmp    dl,0x39
c00020fa:	76 03                	jbe    c00020ff <gen_numname+0x5f>
c00020fc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002102:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002106:	89 da                	mov    edx,ebx
c0002108:	c1 ea 04             	shr    edx,0x4
c000210b:	83 fb 0f             	cmp    ebx,0xf
c000210e:	76 06                	jbe    c0002116 <gen_numname+0x76>
c0002110:	89 c8                	mov    eax,ecx
c0002112:	89 d3                	mov    ebx,edx
c0002114:	eb d9                	jmp    c00020ef <gen_numname+0x4f>
c0002116:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000211b:	31 d2                	xor    edx,edx
c000211d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002120:	8d 04 16             	lea    eax,[esi+edx*1]
c0002123:	39 ca                	cmp    edx,ecx
c0002125:	73 18                	jae    c000213f <gen_numname+0x9f>
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	3c 20                	cmp    al,0x20
c000212c:	74 11                	je     c000213f <gen_numname+0x9f>
c000212e:	e8 8d fc ff ff       	call   c0001dc0 <dbc_1st>
c0002133:	85 c0                	test   eax,eax
c0002135:	74 05                	je     c000213c <gen_numname+0x9c>
c0002137:	39 d3                	cmp    ebx,edx
c0002139:	74 04                	je     c000213f <gen_numname+0x9f>
c000213b:	42                   	inc    edx
c000213c:	42                   	inc    edx
c000213d:	eb e1                	jmp    c0002120 <gen_numname+0x80>
c000213f:	b0 20                	mov    al,0x20
c0002141:	83 f9 07             	cmp    ecx,0x7
c0002144:	77 05                	ja     c000214b <gen_numname+0xab>
c0002146:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000214a:	41                   	inc    ecx
c000214b:	42                   	inc    edx
c000214c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002150:	83 fa 07             	cmp    edx,0x7
c0002153:	76 ea                	jbe    c000213f <gen_numname+0x9f>
c0002155:	83 c4 10             	add    esp,0x10
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	5f                   	pop    edi
c000215b:	c3                   	ret    

c000215c <sum_sfn>:
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	31 d2                	xor    edx,edx
c0002160:	d0 ca                	ror    dl,1
c0002162:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002165:	41                   	inc    ecx
c0002166:	83 f9 0b             	cmp    ecx,0xb
c0002169:	75 f5                	jne    c0002160 <sum_sfn+0x4>
c000216b:	88 d0                	mov    al,dl
c000216d:	c3                   	ret    

c000216e <get_ldnumber>:
c000216e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002170:	85 d2                	test   edx,edx
c0002172:	74 14                	je     c0002188 <get_ldnumber+0x1a>
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	89 d3                	mov    ebx,edx
c0002178:	43                   	inc    ebx
c0002179:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000217c:	80 f9 1f             	cmp    cl,0x1f
c000217f:	76 0d                	jbe    c000218e <get_ldnumber+0x20>
c0002181:	80 f9 3a             	cmp    cl,0x3a
c0002184:	75 f2                	jne    c0002178 <get_ldnumber+0xa>
c0002186:	eb 0a                	jmp    c0002192 <get_ldnumber+0x24>
c0002188:	83 c9 ff             	or     ecx,0xffffffff
c000218b:	89 c8                	mov    eax,ecx
c000218d:	c3                   	ret    
c000218e:	31 c9                	xor    ecx,ecx
c0002190:	eb 24                	jmp    c00021b6 <get_ldnumber+0x48>
c0002192:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002195:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002198:	80 f9 09             	cmp    cl,0x9
c000219b:	77 16                	ja     c00021b3 <get_ldnumber+0x45>
c000219d:	83 c2 02             	add    edx,0x2
c00021a0:	83 c9 ff             	or     ecx,0xffffffff
c00021a3:	39 d3                	cmp    ebx,edx
c00021a5:	75 0f                	jne    c00021b6 <get_ldnumber+0x48>
c00021a7:	89 f2                	mov    edx,esi
c00021a9:	89 18                	mov    DWORD PTR [eax],ebx
c00021ab:	0f be ca             	movsx  ecx,dl
c00021ae:	83 e9 30             	sub    ecx,0x30
c00021b1:	eb 03                	jmp    c00021b6 <get_ldnumber+0x48>
c00021b3:	83 c9 ff             	or     ecx,0xffffffff
c00021b6:	89 c8                	mov    eax,ecx
c00021b8:	5b                   	pop    ebx
c00021b9:	5e                   	pop    esi
c00021ba:	c3                   	ret    

c00021bb <validate>:
c00021bb:	56                   	push   esi
c00021bc:	53                   	push   ebx
c00021bd:	89 d6                	mov    esi,edx
c00021bf:	51                   	push   ecx
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 09                	jne    c00021cd <validate+0x12>
c00021c4:	b8 09 00 00 00       	mov    eax,0x9
c00021c9:	31 c9                	xor    ecx,ecx
c00021cb:	eb 2f                	jmp    c00021fc <validate+0x41>
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021d1:	85 c0                	test   eax,eax
c00021d3:	74 ef                	je     c00021c4 <validate+0x9>
c00021d5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021d8:	74 ea                	je     c00021c4 <validate+0x9>
c00021da:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021de:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021e2:	75 e0                	jne    c00021c4 <validate+0x9>
c00021e4:	83 ec 0c             	sub    esp,0xc
c00021e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021eb:	50                   	push   eax
c00021ec:	e8 fd fa ff ff       	call   c0001cee <disk_status>
c00021f1:	83 c4 10             	add    esp,0x10
c00021f4:	a8 01                	test   al,0x1
c00021f6:	75 cc                	jne    c00021c4 <validate+0x9>
c00021f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021fa:	31 c0                	xor    eax,eax
c00021fc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021fe:	5a                   	pop    edx
c00021ff:	5b                   	pop    ebx
c0002200:	5e                   	pop    esi
c0002201:	c3                   	ret    

c0002202 <sync_window>:
c0002202:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002206:	74 58                	je     c0002260 <sync_window+0x5e>
c0002208:	56                   	push   esi
c0002209:	53                   	push   ebx
c000220a:	8d 70 34             	lea    esi,[eax+0x34]
c000220d:	51                   	push   ecx
c000220e:	89 c3                	mov    ebx,eax
c0002210:	6a 01                	push   0x1
c0002212:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002215:	56                   	push   esi
c0002216:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 ea fa ff ff       	call   c0001d0a <disk_write>
c0002220:	83 c4 10             	add    esp,0x10
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	75 2e                	jne    c000225a <sync_window+0x58>
c000222c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000222f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002232:	89 c1                	mov    ecx,eax
c0002234:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002238:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000223b:	39 d1                	cmp    ecx,edx
c000223d:	73 19                	jae    c0002258 <sync_window+0x56>
c000223f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002243:	75 13                	jne    c0002258 <sync_window+0x56>
c0002245:	6a 01                	push   0x1
c0002247:	01 d0                	add    eax,edx
c0002249:	50                   	push   eax
c000224a:	56                   	push   esi
c000224b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000224f:	50                   	push   eax
c0002250:	e8 b5 fa ff ff       	call   c0001d0a <disk_write>
c0002255:	83 c4 10             	add    esp,0x10
c0002258:	31 d2                	xor    edx,edx
c000225a:	89 d0                	mov    eax,edx
c000225c:	5a                   	pop    edx
c000225d:	5b                   	pop    ebx
c000225e:	5e                   	pop    esi
c000225f:	c3                   	ret    
c0002260:	31 d2                	xor    edx,edx
c0002262:	89 d0                	mov    eax,edx
c0002264:	c3                   	ret    

c0002265 <move_window>:
c0002265:	57                   	push   edi
c0002266:	56                   	push   esi
c0002267:	31 f6                	xor    esi,esi
c0002269:	53                   	push   ebx
c000226a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000226d:	74 32                	je     c00022a1 <move_window+0x3c>
c000226f:	89 c3                	mov    ebx,eax
c0002271:	89 d7                	mov    edi,edx
c0002273:	e8 8a ff ff ff       	call   c0002202 <sync_window>
c0002278:	89 c6                	mov    esi,eax
c000227a:	85 c0                	test   eax,eax
c000227c:	75 23                	jne    c00022a1 <move_window+0x3c>
c000227e:	6a 01                	push   0x1
c0002280:	8d 43 34             	lea    eax,[ebx+0x34]
c0002283:	57                   	push   edi
c0002284:	50                   	push   eax
c0002285:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002289:	50                   	push   eax
c000228a:	e8 65 fa ff ff       	call   c0001cf4 <disk_read>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	85 c0                	test   eax,eax
c0002294:	74 08                	je     c000229e <move_window+0x39>
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	83 cf ff             	or     edi,0xffffffff
c000229e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00022a1:	89 f0                	mov    eax,esi
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	5f                   	pop    edi
c00022a6:	c3                   	ret    

c00022a7 <check_fs>:
c00022a7:	53                   	push   ebx
c00022a8:	89 c3                	mov    ebx,eax
c00022aa:	83 ec 08             	sub    esp,0x8
c00022ad:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022b8:	e8 a8 ff ff ff       	call   c0002265 <move_window>
c00022bd:	ba 04 00 00 00       	mov    edx,0x4
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 68                	jne    c000232e <check_fs+0x87>
c00022c6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022cc:	e8 6e fa ff ff       	call   c0001d3f <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 52                	jne    c000232e <check_fs+0x87>
c00022dc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022df:	8d 50 18             	lea    edx,[eax+0x18]
c00022e2:	80 fa 01             	cmp    dl,0x1
c00022e5:	76 09                	jbe    c00022f0 <check_fs+0x49>
c00022e7:	ba 02 00 00 00       	mov    edx,0x2
c00022ec:	3c eb                	cmp    al,0xeb
c00022ee:	75 3e                	jne    c000232e <check_fs+0x87>
c00022f0:	ba a8 02 02 c0       	mov    edx,0xc00202a8
c00022f5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022f8:	b9 03 00 00 00       	mov    ecx,0x3
c00022fd:	e8 89 fa ff ff       	call   c0001d8b <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 26                	je     c000232e <check_fs+0x87>
c0002308:	ba 5c e3 01 c0       	mov    edx,0xc001e35c
c000230d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002313:	b9 05 00 00 00       	mov    ecx,0x5
c0002318:	e8 6e fa ff ff       	call   c0001d8b <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 0b                	je     c000232e <check_fs+0x87>
c0002323:	31 d2                	xor    edx,edx
c0002325:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002329:	0f 95 c2             	setne  dl
c000232c:	01 d2                	add    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	83 c4 08             	add    esp,0x8
c0002333:	5b                   	pop    ebx
c0002334:	c3                   	ret    

c0002335 <find_volume>:
c0002335:	55                   	push   ebp
c0002336:	57                   	push   edi
c0002337:	56                   	push   esi
c0002338:	89 c6                	mov    esi,eax
c000233a:	53                   	push   ebx
c000233b:	89 d3                	mov    ebx,edx
c000233d:	83 ec 2c             	sub    esp,0x2c
c0002340:	31 d2                	xor    edx,edx
c0002342:	e8 60 ff ff ff       	call   c00022a7 <check_fs>
c0002347:	83 f8 02             	cmp    eax,0x2
c000234a:	74 06                	je     c0002352 <find_volume+0x1d>
c000234c:	77 62                	ja     c00023b0 <find_volume+0x7b>
c000234e:	85 db                	test   ebx,ebx
c0002350:	74 5e                	je     c00023b0 <find_volume+0x7b>
c0002352:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002356:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000235c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	89 cf                	mov    edi,ecx
c0002368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000236c:	89 e8                	mov    eax,ebp
c000236e:	83 c5 10             	add    ebp,0x10
c0002371:	e8 d6 f9 ff ff       	call   c0001d4c <ld_dword>
c0002376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000237a:	89 01                	mov    DWORD PTR [ecx],eax
c000237c:	83 c1 04             	add    ecx,0x4
c000237f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002383:	75 e3                	jne    c0002368 <find_volume+0x33>
c0002385:	31 ed                	xor    ebp,ebp
c0002387:	85 db                	test   ebx,ebx
c0002389:	74 03                	je     c000238e <find_volume+0x59>
c000238b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000238e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002391:	b8 03 00 00 00       	mov    eax,0x3
c0002396:	85 d2                	test   edx,edx
c0002398:	74 0c                	je     c00023a6 <find_volume+0x71>
c000239a:	89 f0                	mov    eax,esi
c000239c:	e8 06 ff ff ff       	call   c00022a7 <check_fs>
c00023a1:	83 f8 01             	cmp    eax,0x1
c00023a4:	76 0a                	jbe    c00023b0 <find_volume+0x7b>
c00023a6:	85 db                	test   ebx,ebx
c00023a8:	75 06                	jne    c00023b0 <find_volume+0x7b>
c00023aa:	45                   	inc    ebp
c00023ab:	83 fd 03             	cmp    ebp,0x3
c00023ae:	76 de                	jbe    c000238e <find_volume+0x59>
c00023b0:	83 c4 2c             	add    esp,0x2c
c00023b3:	5b                   	pop    ebx
c00023b4:	5e                   	pop    esi
c00023b5:	5f                   	pop    edi
c00023b6:	5d                   	pop    ebp
c00023b7:	c3                   	ret    

c00023b8 <mount_volume>:
c00023b8:	55                   	push   ebp
c00023b9:	89 d5                	mov    ebp,edx
c00023bb:	57                   	push   edi
c00023bc:	89 cf                	mov    edi,ecx
c00023be:	56                   	push   esi
c00023bf:	53                   	push   ebx
c00023c0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023c5:	83 ec 2c             	sub    esp,0x2c
c00023c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ce:	e8 9b fd ff ff       	call   c000216e <get_ldnumber>
c00023d3:	85 c0                	test   eax,eax
c00023d5:	0f 88 d6 02 00 00    	js     c00026b1 <mount_volume+0x2f9>
c00023db:	8b 34 85 40 12 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdedc0]
c00023e2:	89 c2                	mov    edx,eax
c00023e4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023e9:	85 f6                	test   esi,esi
c00023eb:	0f 84 c0 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c00023f1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023f4:	83 e7 fe             	and    edi,0xfffffffe
c00023f7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023fa:	74 3a                	je     c0002436 <mount_volume+0x7e>
c00023fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002400:	83 ec 0c             	sub    esp,0xc
c0002403:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 e1 f8 ff ff       	call   c0001cee <disk_status>
c000240d:	83 c4 10             	add    esp,0x10
c0002410:	a8 01                	test   al,0x1
c0002412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002416:	75 1e                	jne    c0002436 <mount_volume+0x7e>
c0002418:	31 db                	xor    ebx,ebx
c000241a:	89 f9                	mov    ecx,edi
c000241c:	84 c9                	test   cl,cl
c000241e:	0f 84 8d 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002424:	a8 04                	test   al,0x4
c0002426:	0f 84 85 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c000242c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002431:	e9 7b 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002436:	83 ec 0c             	sub    esp,0xc
c0002439:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000243c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000243f:	0f b6 c2             	movzx  eax,dl
c0002442:	bb 03 00 00 00       	mov    ebx,0x3
c0002447:	50                   	push   eax
c0002448:	e8 a4 f8 ff ff       	call   c0001cf1 <disk_initialize>
c000244d:	83 c4 10             	add    esp,0x10
c0002450:	a8 01                	test   al,0x1
c0002452:	0f 85 59 02 00 00    	jne    c00026b1 <mount_volume+0x2f9>
c0002458:	89 f9                	mov    ecx,edi
c000245a:	84 c9                	test   cl,cl
c000245c:	74 04                	je     c0002462 <mount_volume+0xaa>
c000245e:	a8 04                	test   al,0x4
c0002460:	75 ca                	jne    c000242c <mount_volume+0x74>
c0002462:	31 d2                	xor    edx,edx
c0002464:	89 f0                	mov    eax,esi
c0002466:	bb 01 00 00 00       	mov    ebx,0x1
c000246b:	e8 c5 fe ff ff       	call   c0002335 <find_volume>
c0002470:	83 f8 04             	cmp    eax,0x4
c0002473:	0f 84 38 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002479:	83 f8 01             	cmp    eax,0x1
c000247c:	76 0a                	jbe    c0002488 <mount_volume+0xd0>
c000247e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002483:	e9 29 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002488:	8d 46 3f             	lea    eax,[esi+0x3f]
c000248b:	e8 af f8 ff ff       	call   c0001d3f <ld_word>
c0002490:	66 3d 00 02          	cmp    ax,0x200
c0002494:	75 e8                	jne    c000247e <mount_volume+0xc6>
c0002496:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002499:	e8 a1 f8 ff ff       	call   c0001d3f <ld_word>
c000249e:	0f b7 c0             	movzx  eax,ax
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	85 c0                	test   eax,eax
c00024a7:	75 0c                	jne    c00024b5 <mount_volume+0xfd>
c00024a9:	8d 46 58             	lea    eax,[esi+0x58]
c00024ac:	e8 9b f8 ff ff       	call   c0001d4c <ld_dword>
c00024b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024b8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024c6:	89 e8                	mov    eax,ebp
c00024c8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024cb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ce:	3c 01                	cmp    al,0x1
c00024d0:	77 ac                	ja     c000247e <mount_volume+0xc6>
c00024d2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024d6:	89 c3                	mov    ebx,eax
c00024d8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024dc:	66 85 c0             	test   ax,ax
c00024df:	74 9d                	je     c000247e <mount_volume+0xc6>
c00024e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024e4:	85 d8                	test   eax,ebx
c00024e6:	75 96                	jne    c000247e <mount_volume+0xc6>
c00024e8:	8d 46 45             	lea    eax,[esi+0x45]
c00024eb:	e8 4f f8 ff ff       	call   c0001d3f <ld_word>
c00024f0:	89 c7                	mov    edi,eax
c00024f2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024f6:	a8 0f                	test   al,0xf
c00024f8:	75 84                	jne    c000247e <mount_volume+0xc6>
c00024fa:	8d 46 47             	lea    eax,[esi+0x47]
c00024fd:	e8 3d f8 ff ff       	call   c0001d3f <ld_word>
c0002502:	0f b7 d0             	movzx  edx,ax
c0002505:	85 d2                	test   edx,edx
c0002507:	75 0a                	jne    c0002513 <mount_volume+0x15b>
c0002509:	8d 46 54             	lea    eax,[esi+0x54]
c000250c:	e8 3b f8 ff ff       	call   c0001d4c <ld_dword>
c0002511:	89 c2                	mov    edx,eax
c0002513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002517:	8d 46 42             	lea    eax,[esi+0x42]
c000251a:	e8 20 f8 ff ff       	call   c0001d3f <ld_word>
c000251f:	66 85 c0             	test   ax,ax
c0002522:	0f 84 56 ff ff ff    	je     c000247e <mount_volume+0xc6>
c0002528:	89 e9                	mov    ecx,ebp
c000252a:	0f b7 c0             	movzx  eax,ax
c000252d:	0f b6 e9             	movzx  ebp,cl
c0002530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002538:	89 f8                	mov    eax,edi
c000253a:	0f af cd             	imul   ecx,ebp
c000253d:	66 c1 e8 04          	shr    ax,0x4
c0002541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002545:	0f b7 c0             	movzx  eax,ax
c0002548:	01 c8                	add    eax,ecx
c000254a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000254e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002552:	39 c2                	cmp    edx,eax
c0002554:	0f 82 24 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000255a:	29 c2                	sub    edx,eax
c000255c:	89 d5                	mov    ebp,edx
c000255e:	89 d0                	mov    eax,edx
c0002560:	31 d2                	xor    edx,edx
c0002562:	f7 f3                	div    ebx
c0002564:	39 dd                	cmp    ebp,ebx
c0002566:	0f 82 12 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000256c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002571:	0f 87 07 ff ff ff    	ja     c000247e <mount_volume+0xc6>
c0002577:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000257c:	0f 86 1f 01 00 00    	jbe    c00026a1 <mount_volume+0x2e9>
c0002582:	bb 03 00 00 00       	mov    ebx,0x3
c0002587:	8d 68 02             	lea    ebp,[eax+0x2]
c000258a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002592:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002596:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002599:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00025a0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00025a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025a7:	83 fb 03             	cmp    ebx,0x3
c00025aa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00025ad:	75 21                	jne    c00025d0 <mount_volume+0x218>
c00025af:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025b2:	e8 88 f7 ff ff       	call   c0001d3f <ld_word>
c00025b7:	66 09 c7             	or     di,ax
c00025ba:	0f 85 be fe ff ff    	jne    c000247e <mount_volume+0xc6>
c00025c0:	8d 46 60             	lea    eax,[esi+0x60]
c00025c3:	c1 e5 02             	shl    ebp,0x2
c00025c6:	e8 81 f7 ff ff       	call   c0001d4c <ld_dword>
c00025cb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ce:	eb 22                	jmp    c00025f2 <mount_volume+0x23a>
c00025d0:	66 85 ff             	test   di,di
c00025d3:	0f 84 a5 fe ff ff    	je     c000247e <mount_volume+0xc6>
c00025d9:	01 c8                	add    eax,ecx
c00025db:	83 fb 02             	cmp    ebx,0x2
c00025de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025e1:	75 04                	jne    c00025e7 <mount_volume+0x22f>
c00025e3:	01 ed                	add    ebp,ebp
c00025e5:	eb 0b                	jmp    c00025f2 <mount_volume+0x23a>
c00025e7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025eb:	83 e5 01             	and    ebp,0x1
c00025ee:	d1 e8                	shr    eax,1
c00025f0:	01 c5                	add    ebp,eax
c00025f2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025f8:	c1 ed 09             	shr    ebp,0x9
c00025fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ff:	0f 87 79 fe ff ff    	ja     c000247e <mount_volume+0xc6>
c0002605:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000260c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002613:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002617:	83 fb 03             	cmp    ebx,0x3
c000261a:	75 6e                	jne    c000268a <mount_volume+0x2d2>
c000261c:	8d 46 64             	lea    eax,[esi+0x64]
c000261f:	e8 1b f7 ff ff       	call   c0001d3f <ld_word>
c0002624:	66 48                	dec    ax
c0002626:	75 62                	jne    c000268a <mount_volume+0x2d2>
c0002628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000262c:	89 f0                	mov    eax,esi
c000262e:	42                   	inc    edx
c000262f:	e8 31 fc ff ff       	call   c0002265 <move_window>
c0002634:	85 c0                	test   eax,eax
c0002636:	75 52                	jne    c000268a <mount_volume+0x2d2>
c0002638:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000263c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002642:	e8 f8 f6 ff ff       	call   c0001d3f <ld_word>
c0002647:	66 3d 55 aa          	cmp    ax,0xaa55
c000264b:	75 3d                	jne    c000268a <mount_volume+0x2d2>
c000264d:	8d 46 34             	lea    eax,[esi+0x34]
c0002650:	e8 f7 f6 ff ff       	call   c0001d4c <ld_dword>
c0002655:	3d 52 52 61 41       	cmp    eax,0x41615252
c000265a:	75 2e                	jne    c000268a <mount_volume+0x2d2>
c000265c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002662:	e8 e5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002667:	3d 72 72 41 61       	cmp    eax,0x61417272
c000266c:	75 1c                	jne    c000268a <mount_volume+0x2d2>
c000266e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002674:	e8 d3 f6 ff ff       	call   c0001d4c <ld_dword>
c0002679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000267c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002682:	e8 c5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002687:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000268a:	66 a1 20 12 02 c0    	mov    ax,ds:0xc0021220
c0002690:	88 1e                	mov    BYTE PTR [esi],bl
c0002692:	40                   	inc    eax
c0002693:	31 db                	xor    ebx,ebx
c0002695:	66 a3 20 12 02 c0    	mov    ds:0xc0021220,ax
c000269b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000269f:	eb 10                	jmp    c00026b1 <mount_volume+0x2f9>
c00026a1:	31 db                	xor    ebx,ebx
c00026a3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00026a8:	0f 97 c3             	seta   bl
c00026ab:	43                   	inc    ebx
c00026ac:	e9 d6 fe ff ff       	jmp    c0002587 <mount_volume+0x1cf>
c00026b1:	83 c4 2c             	add    esp,0x2c
c00026b4:	89 d8                	mov    eax,ebx
c00026b6:	5b                   	pop    ebx
c00026b7:	5e                   	pop    esi
c00026b8:	5f                   	pop    edi
c00026b9:	5d                   	pop    ebp
c00026ba:	c3                   	ret    

c00026bb <put_fat>:
c00026bb:	55                   	push   ebp
c00026bc:	bd 02 00 00 00       	mov    ebp,0x2
c00026c1:	57                   	push   edi
c00026c2:	56                   	push   esi
c00026c3:	53                   	push   ebx
c00026c4:	83 ec 1c             	sub    esp,0x1c
c00026c7:	83 fa 01             	cmp    edx,0x1
c00026ca:	0f 86 31 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026d3:	0f 86 28 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d9:	89 c6                	mov    esi,eax
c00026db:	89 cf                	mov    edi,ecx
c00026dd:	8a 00                	mov    al,BYTE PTR [eax]
c00026df:	89 d3                	mov    ebx,edx
c00026e1:	3c 02                	cmp    al,0x2
c00026e3:	0f 84 ac 00 00 00    	je     c0002795 <put_fat+0xda>
c00026e9:	3c 03                	cmp    al,0x3
c00026eb:	0f 84 d1 00 00 00    	je     c00027c2 <put_fat+0x107>
c00026f1:	fe c8                	dec    al
c00026f3:	0f 85 08 01 00 00    	jne    c0002801 <put_fat+0x146>
c00026f9:	89 d1                	mov    ecx,edx
c00026fb:	89 f0                	mov    eax,esi
c00026fd:	d1 e9                	shr    ecx,1
c00026ff:	01 d1                	add    ecx,edx
c0002701:	89 ca                	mov    edx,ecx
c0002703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002707:	c1 ea 09             	shr    edx,0x9
c000270a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000270d:	e8 53 fb ff ff       	call   c0002265 <move_window>
c0002712:	89 c5                	mov    ebp,eax
c0002714:	85 c0                	test   eax,eax
c0002716:	0f 85 e5 00 00 00    	jne    c0002801 <put_fat+0x146>
c000271c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002720:	8d 46 34             	lea    eax,[esi+0x34]
c0002723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002727:	8d 41 01             	lea    eax,[ecx+0x1]
c000272a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002734:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002738:	89 f8                	mov    eax,edi
c000273a:	83 e3 01             	and    ebx,0x1
c000273d:	74 0c                	je     c000274b <put_fat+0x90>
c000273f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002741:	89 f8                	mov    eax,edi
c0002743:	83 e2 0f             	and    edx,0xf
c0002746:	c1 e0 04             	shl    eax,0x4
c0002749:	09 d0                	or     eax,edx
c000274b:	88 01                	mov    BYTE PTR [ecx],al
c000274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002751:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002755:	c1 ea 09             	shr    edx,0x9
c0002758:	89 f0                	mov    eax,esi
c000275a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000275d:	e8 03 fb ff ff       	call   c0002265 <move_window>
c0002762:	89 c5                	mov    ebp,eax
c0002764:	85 c0                	test   eax,eax
c0002766:	0f 85 95 00 00 00    	jne    c0002801 <put_fat+0x146>
c000276c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002770:	25 ff 01 00 00       	and    eax,0x1ff
c0002775:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002779:	85 db                	test   ebx,ebx
c000277b:	74 07                	je     c0002784 <put_fat+0xc9>
c000277d:	c1 ef 04             	shr    edi,0x4
c0002780:	89 f9                	mov    ecx,edi
c0002782:	eb 0d                	jmp    c0002791 <put_fat+0xd6>
c0002784:	8a 08                	mov    cl,BYTE PTR [eax]
c0002786:	c1 ef 08             	shr    edi,0x8
c0002789:	83 e1 f0             	and    ecx,0xfffffff0
c000278c:	83 e7 0f             	and    edi,0xf
c000278f:	09 f9                	or     ecx,edi
c0002791:	88 08                	mov    BYTE PTR [eax],cl
c0002793:	eb 27                	jmp    c00027bc <put_fat+0x101>
c0002795:	c1 ea 08             	shr    edx,0x8
c0002798:	89 f0                	mov    eax,esi
c000279a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279d:	e8 c3 fa ff ff       	call   c0002265 <move_window>
c00027a2:	89 c5                	mov    ebp,eax
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 59                	jne    c0002801 <put_fat+0x146>
c00027a8:	01 db                	add    ebx,ebx
c00027aa:	0f b7 d7             	movzx  edx,di
c00027ad:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027b3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027b7:	e8 a8 f5 ff ff       	call   c0001d64 <st_word>
c00027bc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027c0:	eb 3f                	jmp    c0002801 <put_fat+0x146>
c00027c2:	c1 ea 07             	shr    edx,0x7
c00027c5:	89 f0                	mov    eax,esi
c00027c7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ca:	e8 96 fa ff ff       	call   c0002265 <move_window>
c00027cf:	89 c5                	mov    ebp,eax
c00027d1:	85 c0                	test   eax,eax
c00027d3:	75 2c                	jne    c0002801 <put_fat+0x146>
c00027d5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027db:	c1 e3 02             	shl    ebx,0x2
c00027de:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027e4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 5d f5 ff ff       	call   c0001d4c <ld_dword>
c00027ef:	25 00 00 00 f0       	and    eax,0xf0000000
c00027f4:	09 f8                	or     eax,edi
c00027f6:	89 c2                	mov    edx,eax
c00027f8:	89 d8                	mov    eax,ebx
c00027fa:	e8 69 f5 ff ff       	call   c0001d68 <st_dword>
c00027ff:	eb bb                	jmp    c00027bc <put_fat+0x101>
c0002801:	83 c4 1c             	add    esp,0x1c
c0002804:	89 e8                	mov    eax,ebp
c0002806:	5b                   	pop    ebx
c0002807:	5e                   	pop    esi
c0002808:	5f                   	pop    edi
c0002809:	5d                   	pop    ebp
c000280a:	c3                   	ret    

c000280b <dir_clear>:
c000280b:	55                   	push   ebp
c000280c:	57                   	push   edi
c000280d:	56                   	push   esi
c000280e:	89 c6                	mov    esi,eax
c0002810:	53                   	push   ebx
c0002811:	83 ec 1c             	sub    esp,0x1c
c0002814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002818:	e8 e5 f9 ff ff       	call   c0002202 <sync_window>
c000281d:	85 c0                	test   eax,eax
c000281f:	0f 85 c0 00 00 00    	jne    c00028e5 <dir_clear+0xda>
c0002825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 55 f7 ff ff       	call   c0001f85 <clst2sect>
c0002830:	31 d2                	xor    edx,edx
c0002832:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002835:	89 c5                	mov    ebp,eax
c0002837:	b9 00 02 00 00       	mov    ecx,0x200
c000283c:	8d 46 34             	lea    eax,[esi+0x34]
c000283f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002843:	e8 38 f5 ff ff       	call   c0001d80 <mem_set>
c0002848:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000284c:	c1 e3 09             	shl    ebx,0x9
c000284f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002855:	76 1b                	jbe    c0002872 <dir_clear+0x67>
c0002857:	bb 00 80 00 00       	mov    ebx,0x8000
c000285c:	eb 14                	jmp    c0002872 <dir_clear+0x67>
c000285e:	83 ec 0c             	sub    esp,0xc
c0002861:	53                   	push   ebx
c0002862:	e8 25 32 00 00       	call   c0005a8c <ff_memalloc>
c0002867:	83 c4 10             	add    esp,0x10
c000286a:	89 c7                	mov    edi,eax
c000286c:	85 c0                	test   eax,eax
c000286e:	75 7c                	jne    c00028ec <dir_clear+0xe1>
c0002870:	d1 eb                	shr    ebx,1
c0002872:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002878:	77 e4                	ja     c000285e <dir_clear+0x53>
c000287a:	31 db                	xor    ebx,ebx
c000287c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002880:	39 d8                	cmp    eax,ebx
c0002882:	76 53                	jbe    c00028d7 <dir_clear+0xcc>
c0002884:	6a 01                	push   0x1
c0002886:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002889:	50                   	push   eax
c000288a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002892:	50                   	push   eax
c0002893:	e8 72 f4 ff ff       	call   c0001d0a <disk_write>
c0002898:	83 c4 10             	add    esp,0x10
c000289b:	85 c0                	test   eax,eax
c000289d:	75 38                	jne    c00028d7 <dir_clear+0xcc>
c000289f:	43                   	inc    ebx
c00028a0:	eb da                	jmp    c000287c <dir_clear+0x71>
c00028a2:	52                   	push   edx
c00028a3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028aa:	50                   	push   eax
c00028ab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028af:	57                   	push   edi
c00028b0:	50                   	push   eax
c00028b1:	e8 54 f4 ff ff       	call   c0001d0a <disk_write>
c00028b6:	83 c4 10             	add    esp,0x10
c00028b9:	85 c0                	test   eax,eax
c00028bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bf:	75 0a                	jne    c00028cb <dir_clear+0xc0>
c00028c1:	01 d3                	add    ebx,edx
c00028c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c7:	39 d8                	cmp    eax,ebx
c00028c9:	77 d7                	ja     c00028a2 <dir_clear+0x97>
c00028cb:	83 ec 0c             	sub    esp,0xc
c00028ce:	57                   	push   edi
c00028cf:	e8 d0 31 00 00       	call   c0005aa4 <ff_memfree>
c00028d4:	83 c4 10             	add    esp,0x10
c00028d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028db:	39 d8                	cmp    eax,ebx
c00028dd:	0f 95 c0             	setne  al
c00028e0:	0f b6 c0             	movzx  eax,al
c00028e3:	eb 19                	jmp    c00028fe <dir_clear+0xf3>
c00028e5:	b8 01 00 00 00       	mov    eax,0x1
c00028ea:	eb 12                	jmp    c00028fe <dir_clear+0xf3>
c00028ec:	89 d9                	mov    ecx,ebx
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	e8 8b f4 ff ff       	call   c0001d80 <mem_set>
c00028f5:	89 da                	mov    edx,ebx
c00028f7:	31 db                	xor    ebx,ebx
c00028f9:	c1 ea 09             	shr    edx,0x9
c00028fc:	eb c5                	jmp    c00028c3 <dir_clear+0xb8>
c00028fe:	83 c4 1c             	add    esp,0x1c
c0002901:	5b                   	pop    ebx
c0002902:	5e                   	pop    esi
c0002903:	5f                   	pop    edi
c0002904:	5d                   	pop    ebp
c0002905:	c3                   	ret    

c0002906 <create_name>:
c0002906:	55                   	push   ebp
c0002907:	89 d5                	mov    ebp,edx
c0002909:	57                   	push   edi
c000290a:	89 c7                	mov    edi,eax
c000290c:	56                   	push   esi
c000290d:	31 f6                	xor    esi,esi
c000290f:	53                   	push   ebx
c0002910:	83 ec 3c             	sub    esp,0x3c
c0002913:	8b 02                	mov    eax,DWORD PTR [edx]
c0002915:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002919:	8b 07                	mov    eax,DWORD PTR [edi]
c000291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000291e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002922:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002926:	e8 9b f4 ff ff       	call   c0001dc6 <tchar2uni>
c000292b:	89 c3                	mov    ebx,eax
c000292d:	83 f8 ff             	cmp    eax,0xffffffff
c0002930:	75 0a                	jne    c000293c <create_name+0x36>
c0002932:	b8 06 00 00 00       	mov    eax,0x6
c0002937:	e9 9e 02 00 00       	jmp    c0002bda <create_name+0x2d4>
c000293c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002941:	76 0c                	jbe    c000294f <create_name+0x49>
c0002943:	c1 e8 10             	shr    eax,0x10
c0002946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000294a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000294e:	46                   	inc    esi
c000294f:	66 83 fb 1f          	cmp    bx,0x1f
c0002953:	76 4f                	jbe    c00029a4 <create_name+0x9e>
c0002955:	66 83 fb 5c          	cmp    bx,0x5c
c0002959:	74 35                	je     c0002990 <create_name+0x8a>
c000295b:	66 83 fb 2f          	cmp    bx,0x2f
c000295f:	74 2f                	je     c0002990 <create_name+0x8a>
c0002961:	66 83 fb 7f          	cmp    bx,0x7f
c0002965:	77 11                	ja     c0002978 <create_name+0x72>
c0002967:	0f b7 d3             	movzx  edx,bx
c000296a:	b8 62 e3 01 c0       	mov    eax,0xc001e362
c000296f:	e8 3a f4 ff ff       	call   c0001dae <chk_chr>
c0002974:	85 c0                	test   eax,eax
c0002976:	75 ba                	jne    c0002932 <create_name+0x2c>
c0002978:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000297e:	77 b2                	ja     c0002932 <create_name+0x2c>
c0002980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002984:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002988:	46                   	inc    esi
c0002989:	eb 97                	jmp    c0002922 <create_name+0x1c>
c000298b:	40                   	inc    eax
c000298c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002994:	8a 10                	mov    dl,BYTE PTR [eax]
c0002996:	80 fa 2f             	cmp    dl,0x2f
c0002999:	74 f0                	je     c000298b <create_name+0x85>
c000299b:	80 fa 5c             	cmp    dl,0x5c
c000299e:	74 eb                	je     c000298b <create_name+0x85>
c00029a0:	31 db                	xor    ebx,ebx
c00029a2:	eb 02                	jmp    c00029a6 <create_name+0xa0>
c00029a4:	b3 04                	mov    bl,0x4
c00029a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00029ad:	85 f6                	test   esi,esi
c00029af:	74 18                	je     c00029c9 <create_name+0xc3>
c00029b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029ba:	66 83 f8 20          	cmp    ax,0x20
c00029be:	74 06                	je     c00029c6 <create_name+0xc0>
c00029c0:	66 83 f8 2e          	cmp    ax,0x2e
c00029c4:	75 03                	jne    c00029c9 <create_name+0xc3>
c00029c6:	4e                   	dec    esi
c00029c7:	eb e4                	jmp    c00029ad <create_name+0xa7>
c00029c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029cd:	31 ed                	xor    ebp,ebp
c00029cf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029d5:	85 f6                	test   esi,esi
c00029d7:	0f 84 55 ff ff ff    	je     c0002932 <create_name+0x2c>
c00029dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029e4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029e8:	66 83 f8 20          	cmp    ax,0x20
c00029ec:	75 04                	jne    c00029f2 <create_name+0xec>
c00029ee:	89 d5                	mov    ebp,edx
c00029f0:	eb eb                	jmp    c00029dd <create_name+0xd7>
c00029f2:	85 ed                	test   ebp,ebp
c00029f4:	75 06                	jne    c00029fc <create_name+0xf6>
c00029f6:	66 83 f8 2e          	cmp    ax,0x2e
c00029fa:	75 08                	jne    c0002a04 <create_name+0xfe>
c00029fc:	83 cb 03             	or     ebx,0x3
c00029ff:	eb 03                	jmp    c0002a04 <create_name+0xfe>
c0002a01:	4e                   	dec    esi
c0002a02:	74 0c                	je     c0002a10 <create_name+0x10a>
c0002a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a08:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a0e:	75 f1                	jne    c0002a01 <create_name+0xfb>
c0002a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a15:	8d 47 20             	lea    eax,[edi+0x20]
c0002a18:	ba 20 00 00 00       	mov    edx,0x20
c0002a1d:	e8 5e f3 ff ff       	call   c0001d80 <mem_set>
c0002a22:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a2a:	31 c9                	xor    ecx,ecx
c0002a2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a31:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a3c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a40:	66 85 ed             	test   bp,bp
c0002a43:	0f 84 30 01 00 00    	je     c0002b79 <create_name+0x273>
c0002a49:	66 83 fd 20          	cmp    bp,0x20
c0002a4d:	74 10                	je     c0002a5f <create_name+0x159>
c0002a4f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a53:	75 13                	jne    c0002a68 <create_name+0x162>
c0002a55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a59:	0f 84 6b 01 00 00    	je     c0002bca <create_name+0x2c4>
c0002a5f:	83 cb 03             	or     ebx,0x3
c0002a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a66:	eb c9                	jmp    c0002a31 <create_name+0x12b>
c0002a68:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a6c:	73 0b                	jae    c0002a79 <create_name+0x173>
c0002a6e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a72:	75 47                	jne    c0002abb <create_name+0x1b5>
c0002a74:	e9 51 01 00 00       	jmp    c0002bca <create_name+0x2c4>
c0002a79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a7e:	75 10                	jne    c0002a90 <create_name+0x18a>
c0002a80:	83 cb 03             	or     ebx,0x3
c0002a83:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a8b:	e9 e9 00 00 00       	jmp    c0002b79 <create_name+0x273>
c0002a90:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a94:	74 0d                	je     c0002aa3 <create_name+0x19d>
c0002a96:	83 cb 03             	or     ebx,0x3
c0002a99:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a9d:	0f 87 d6 00 00 00    	ja     c0002b79 <create_name+0x273>
c0002aa3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002aa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002aac:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002ab4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ab9:	eb a7                	jmp    c0002a62 <create_name+0x15c>
c0002abb:	66 83 fd 7f          	cmp    bp,0x7f
c0002abf:	76 68                	jbe    c0002b29 <create_name+0x223>
c0002ac1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ac5:	88 da                	mov    dl,bl
c0002ac7:	83 ca 02             	or     edx,0x2
c0002aca:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002ace:	50                   	push   eax
c0002acf:	50                   	push   eax
c0002ad0:	68 b5 01 00 00       	push   0x1b5
c0002ad5:	55                   	push   ebp
c0002ad6:	e8 e1 2f 00 00       	call   c0005abc <ff_uni2oem>
c0002adb:	83 c4 10             	add    esp,0x10
c0002ade:	89 c5                	mov    ebp,eax
c0002ae0:	a8 80                	test   al,0x80
c0002ae2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aea:	74 0c                	je     c0002af8 <create_name+0x1f2>
c0002aec:	83 e5 7f             	and    ebp,0x7f
c0002aef:	0f b6 ad 20 e4 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe1be0]
c0002af6:	eb 2a                	jmp    c0002b22 <create_name+0x21c>
c0002af8:	66 3d ff 00          	cmp    ax,0xff
c0002afc:	76 24                	jbe    c0002b22 <create_name+0x21c>
c0002afe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b02:	48                   	dec    eax
c0002b03:	39 c8                	cmp    eax,ecx
c0002b05:	77 0c                	ja     c0002b13 <create_name+0x20d>
c0002b07:	83 cb 03             	or     ebx,0x3
c0002b0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b0e:	e9 4f ff ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b13:	89 e8                	mov    eax,ebp
c0002b15:	88 d3                	mov    bl,dl
c0002b17:	66 c1 e8 08          	shr    ax,0x8
c0002b1b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b1f:	41                   	inc    ecx
c0002b20:	eb 4b                	jmp    c0002b6d <create_name+0x267>
c0002b22:	88 d3                	mov    bl,dl
c0002b24:	66 85 ed             	test   bp,bp
c0002b27:	74 19                	je     c0002b42 <create_name+0x23c>
c0002b29:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b2d:	0f b7 d5             	movzx  edx,bp
c0002b30:	b8 6b e3 01 c0       	mov    eax,0xc001e36b
c0002b35:	e8 74 f2 ff ff       	call   c0001dae <chk_chr>
c0002b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	74 0a                	je     c0002b4c <create_name+0x246>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b4a:	eb 21                	jmp    c0002b6d <create_name+0x267>
c0002b4c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 07                	ja     c0002b5c <create_name+0x256>
c0002b55:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b5a:	eb 11                	jmp    c0002b6d <create_name+0x267>
c0002b5c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b5f:	66 83 f8 19          	cmp    ax,0x19
c0002b63:	77 08                	ja     c0002b6d <create_name+0x267>
c0002b65:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b6a:	83 ed 20             	sub    ebp,0x20
c0002b6d:	89 e8                	mov    eax,ebp
c0002b6f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b73:	41                   	inc    ecx
c0002b74:	e9 e9 fe ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b79:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b7d:	75 04                	jne    c0002b83 <create_name+0x27d>
c0002b7f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b83:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b88:	75 05                	jne    c0002b8f <create_name+0x289>
c0002b8a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b93:	83 e0 0c             	and    eax,0xc
c0002b96:	3c 0c                	cmp    al,0xc
c0002b98:	74 0b                	je     c0002ba5 <create_name+0x29f>
c0002b9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b9e:	83 e0 03             	and    eax,0x3
c0002ba1:	3c 03                	cmp    al,0x3
c0002ba3:	75 05                	jne    c0002baa <create_name+0x2a4>
c0002ba5:	83 cb 02             	or     ebx,0x2
c0002ba8:	eb 19                	jmp    c0002bc3 <create_name+0x2bd>
c0002baa:	f6 c3 02             	test   bl,0x2
c0002bad:	75 14                	jne    c0002bc3 <create_name+0x2bd>
c0002baf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002bb4:	74 03                	je     c0002bb9 <create_name+0x2b3>
c0002bb6:	83 cb 10             	or     ebx,0x10
c0002bb9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bbe:	74 03                	je     c0002bc3 <create_name+0x2bd>
c0002bc0:	83 cb 08             	or     ebx,0x8
c0002bc3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bc6:	31 c0                	xor    eax,eax
c0002bc8:	eb 10                	jmp    c0002bda <create_name+0x2d4>
c0002bca:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bcf:	0f 85 ce fe ff ff    	jne    c0002aa3 <create_name+0x19d>
c0002bd5:	e9 a6 fe ff ff       	jmp    c0002a80 <create_name+0x17a>
c0002bda:	83 c4 3c             	add    esp,0x3c
c0002bdd:	5b                   	pop    ebx
c0002bde:	5e                   	pop    esi
c0002bdf:	5f                   	pop    edi
c0002be0:	5d                   	pop    ebp
c0002be1:	c3                   	ret    

c0002be2 <cmp_lfn>:
c0002be2:	55                   	push   ebp
c0002be3:	57                   	push   edi
c0002be4:	89 d7                	mov    edi,edx
c0002be6:	56                   	push   esi
c0002be7:	53                   	push   ebx
c0002be8:	83 ec 1c             	sub    esp,0x1c
c0002beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bef:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bf2:	e8 48 f1 ff ff       	call   c0001d3f <ld_word>
c0002bf7:	66 85 c0             	test   ax,ax
c0002bfa:	74 07                	je     c0002c03 <cmp_lfn+0x21>
c0002bfc:	31 c0                	xor    eax,eax
c0002bfe:	e9 9a 00 00 00       	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c03:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c05:	bd 01 00 00 00       	mov    ebp,0x1
c0002c0a:	83 e3 3f             	and    ebx,0x3f
c0002c0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c15:	4b                   	dec    ebx
c0002c16:	6b db 0d             	imul   ebx,ebx,0xd
c0002c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c1d:	0f b6 80 a0 e4 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe1b60]
c0002c24:	01 f8                	add    eax,edi
c0002c26:	e8 14 f1 ff ff       	call   c0001d3f <ld_word>
c0002c2b:	66 85 ed             	test   bp,bp
c0002c2e:	89 c6                	mov    esi,eax
c0002c30:	74 3c                	je     c0002c6e <cmp_lfn+0x8c>
c0002c32:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c38:	77 c2                	ja     c0002bfc <cmp_lfn+0x1a>
c0002c3a:	83 ec 0c             	sub    esp,0xc
c0002c3d:	0f b7 c0             	movzx  eax,ax
c0002c40:	50                   	push   eax
c0002c41:	e8 8e 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c46:	89 c5                	mov    ebp,eax
c0002c48:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c53:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c5a:	e8 75 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c5f:	83 c4 10             	add    esp,0x10
c0002c62:	39 c5                	cmp    ebp,eax
c0002c64:	75 96                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c66:	89 f5                	mov    ebp,esi
c0002c68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c6c:	eb 04                	jmp    c0002c72 <cmp_lfn+0x90>
c0002c6e:	66 46                	inc    si
c0002c70:	75 8a                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c72:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c76:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c7b:	75 9c                	jne    c0002c19 <cmp_lfn+0x37>
c0002c7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c80:	74 16                	je     c0002c98 <cmp_lfn+0xb6>
c0002c82:	66 85 ed             	test   bp,bp
c0002c85:	74 11                	je     c0002c98 <cmp_lfn+0xb6>
c0002c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c90:	0f 94 c0             	sete   al
c0002c93:	0f b6 c0             	movzx  eax,al
c0002c96:	eb 05                	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c98:	b8 01 00 00 00       	mov    eax,0x1
c0002c9d:	83 c4 1c             	add    esp,0x1c
c0002ca0:	5b                   	pop    ebx
c0002ca1:	5e                   	pop    esi
c0002ca2:	5f                   	pop    edi
c0002ca3:	5d                   	pop    ebp
c0002ca4:	c3                   	ret    

c0002ca5 <sync_fs>:
c0002ca5:	56                   	push   esi
c0002ca6:	53                   	push   ebx
c0002ca7:	53                   	push   ebx
c0002ca8:	89 c3                	mov    ebx,eax
c0002caa:	e8 53 f5 ff ff       	call   c0002202 <sync_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	0f 85 9a 00 00 00    	jne    c0002d51 <sync_fs+0xac>
c0002cb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cba:	75 7b                	jne    c0002d37 <sync_fs+0x92>
c0002cbc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cc0:	75 75                	jne    c0002d37 <sync_fs+0x92>
c0002cc2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cc7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cca:	31 d2                	xor    edx,edx
c0002ccc:	89 f0                	mov    eax,esi
c0002cce:	e8 ad f0 ff ff       	call   c0001d80 <mem_set>
c0002cd3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cd9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cde:	e8 81 f0 ff ff       	call   c0001d64 <st_word>
c0002ce3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ce8:	89 f0                	mov    eax,esi
c0002cea:	e8 79 f0 ff ff       	call   c0001d68 <st_dword>
c0002cef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cf5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cfa:	e8 69 f0 ff ff       	call   c0001d68 <st_dword>
c0002cff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d08:	e8 5b f0 ff ff       	call   c0001d68 <st_dword>
c0002d0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d16:	e8 4d f0 ff ff       	call   c0001d68 <st_dword>
c0002d1b:	6a 01                	push   0x1
c0002d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d20:	40                   	inc    eax
c0002d21:	50                   	push   eax
c0002d22:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d25:	56                   	push   esi
c0002d26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2a:	50                   	push   eax
c0002d2b:	e8 da ef ff ff       	call   c0001d0a <disk_write>
c0002d30:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d3b:	51                   	push   ecx
c0002d3c:	6a 00                	push   0x0
c0002d3e:	6a 00                	push   0x0
c0002d40:	50                   	push   eax
c0002d41:	e8 da ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d46:	83 c4 10             	add    esp,0x10
c0002d49:	85 c0                	test   eax,eax
c0002d4b:	0f 95 c0             	setne  al
c0002d4e:	0f b6 c0             	movzx  eax,al
c0002d51:	5a                   	pop    edx
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	c3                   	ret    

c0002d55 <create_partition>:
c0002d55:	55                   	push   ebp
c0002d56:	0f b6 c0             	movzx  eax,al
c0002d59:	57                   	push   edi
c0002d5a:	56                   	push   esi
c0002d5b:	53                   	push   ebx
c0002d5c:	83 ec 40             	sub    esp,0x40
c0002d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d6f:	50                   	push   eax
c0002d70:	6a 01                	push   0x1
c0002d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d76:	e8 a5 ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d7b:	83 c4 10             	add    esp,0x10
c0002d7e:	85 c0                	test   eax,eax
c0002d80:	0f 85 69 01 00 00    	jne    c0002eef <create_partition+0x19a>
c0002d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d93:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d98:	31 d2                	xor    edx,edx
c0002d9a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da3:	f7 f3                	div    ebx
c0002da5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002daa:	76 0c                	jbe    c0002db8 <create_partition+0x63>
c0002dac:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002db0:	49                   	dec    ecx
c0002db1:	75 e5                	jne    c0002d98 <create_partition+0x43>
c0002db3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002db8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dbd:	31 d2                	xor    edx,edx
c0002dbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc3:	e8 b8 ef ff ff       	call   c0001d80 <mem_set>
c0002dc8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dd1:	31 d2                	xor    edx,edx
c0002dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002ddb:	f7 f1                	div    ecx
c0002ddd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dea:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002df0:	85 c9                	test   ecx,ecx
c0002df2:	75 34                	jne    c0002e28 <create_partition+0xd3>
c0002df4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002df8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dfd:	05 fe 01 00 00       	add    eax,0x1fe
c0002e02:	e8 5d ef ff ff       	call   c0001d64 <st_word>
c0002e07:	6a 01                	push   0x1
c0002e09:	6a 00                	push   0x0
c0002e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e13:	e8 f2 ee ff ff       	call   c0001d0a <disk_write>
c0002e18:	83 c4 10             	add    esp,0x10
c0002e1b:	85 c0                	test   eax,eax
c0002e1d:	0f 95 c0             	setne  al
c0002e20:	0f b6 c0             	movzx  eax,al
c0002e23:	e9 cc 00 00 00       	jmp    c0002ef4 <create_partition+0x19f>
c0002e28:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e2c:	76 c6                	jbe    c0002df4 <create_partition+0x9f>
c0002e2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e32:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e36:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e39:	83 fe 64             	cmp    esi,0x64
c0002e3c:	77 0d                	ja     c0002e4b <create_partition+0xf6>
c0002e3e:	74 07                	je     c0002e47 <create_partition+0xf2>
c0002e40:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e45:	eb 04                	jmp    c0002e4b <create_partition+0xf6>
c0002e47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e4b:	31 c0                	xor    eax,eax
c0002e4d:	89 f2                	mov    edx,esi
c0002e4f:	01 ca                	add    edx,ecx
c0002e51:	0f 92 c0             	setb   al
c0002e54:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e58:	77 04                	ja     c0002e5e <create_partition+0x109>
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	74 08                	je     c0002e66 <create_partition+0x111>
c0002e5e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e62:	29 ce                	sub    esi,ecx
c0002e64:	eb 04                	jmp    c0002e6a <create_partition+0x115>
c0002e66:	85 f6                	test   esi,esi
c0002e68:	74 8a                	je     c0002df4 <create_partition+0x9f>
c0002e6a:	89 ca                	mov    edx,ecx
c0002e6c:	89 d8                	mov    eax,ebx
c0002e6e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e73:	e8 f0 ee ff ff       	call   c0001d68 <st_dword>
c0002e78:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e7b:	89 f2                	mov    edx,esi
c0002e7d:	83 c3 10             	add    ebx,0x10
c0002e80:	e8 e3 ee ff ff       	call   c0001d68 <st_dword>
c0002e85:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e8e:	31 d2                	xor    edx,edx
c0002e90:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e93:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e97:	89 c8                	mov    eax,ecx
c0002e99:	01 f1                	add    ecx,esi
c0002e9b:	f7 f5                	div    ebp
c0002e9d:	89 d5                	mov    ebp,edx
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	45                   	inc    ebp
c0002ea2:	f7 f7                	div    edi
c0002ea4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002ea7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eaa:	89 c2                	mov    edx,eax
c0002eac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eaf:	c1 ea 02             	shr    edx,0x2
c0002eb2:	83 e2 c0             	and    edx,0xffffffc0
c0002eb5:	09 ea                	or     edx,ebp
c0002eb7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002ebc:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ebf:	31 d2                	xor    edx,edx
c0002ec1:	f7 f5                	div    ebp
c0002ec3:	89 d6                	mov    esi,edx
c0002ec5:	31 d2                	xor    edx,edx
c0002ec7:	46                   	inc    esi
c0002ec8:	f7 f7                	div    edi
c0002eca:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ecd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed0:	89 c7                	mov    edi,eax
c0002ed2:	c1 ef 02             	shr    edi,0x2
c0002ed5:	83 e7 c0             	and    edi,0xffffffc0
c0002ed8:	09 fe                	or     esi,edi
c0002eda:	89 f2                	mov    edx,esi
c0002edc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002edf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ee4:	0f 85 06 ff ff ff    	jne    c0002df0 <create_partition+0x9b>
c0002eea:	e9 05 ff ff ff       	jmp    c0002df4 <create_partition+0x9f>
c0002eef:	b8 01 00 00 00       	mov    eax,0x1
c0002ef4:	83 c4 3c             	add    esp,0x3c
c0002ef7:	5b                   	pop    ebx
c0002ef8:	5e                   	pop    esi
c0002ef9:	5f                   	pop    edi
c0002efa:	5d                   	pop    ebp
c0002efb:	c3                   	ret    

c0002efc <get_fileinfo>:
c0002efc:	55                   	push   ebp
c0002efd:	57                   	push   edi
c0002efe:	56                   	push   esi
c0002eff:	53                   	push   ebx
c0002f00:	83 ec 1c             	sub    esp,0x1c
c0002f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f05:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f0d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f11:	0f 84 c1 01 00 00    	je     c00030d8 <get_fileinfo+0x1dc>
c0002f17:	89 d3                	mov    ebx,edx
c0002f19:	89 c6                	mov    esi,eax
c0002f1b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f1f:	74 6a                	je     c0002f8b <get_fileinfo+0x8f>
c0002f21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f29:	31 ed                	xor    ebp,ebp
c0002f2b:	31 ff                	xor    edi,edi
c0002f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f3c:	66 85 d2             	test   dx,dx
c0002f3f:	74 3e                	je     c0002f7f <get_fileinfo+0x83>
c0002f41:	66 85 ed             	test   bp,bp
c0002f44:	75 0c                	jne    c0002f52 <get_fileinfo+0x56>
c0002f46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f4c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f50:	76 22                	jbe    c0002f74 <get_fileinfo+0x78>
c0002f52:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f57:	89 e8                	mov    eax,ebp
c0002f59:	29 f9                	sub    ecx,edi
c0002f5b:	c1 e0 10             	shl    eax,0x10
c0002f5e:	09 d0                	or     eax,edx
c0002f60:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f64:	e8 23 ef ff ff       	call   c0001e8c <put_utf>
c0002f69:	84 c0                	test   al,al
c0002f6b:	74 10                	je     c0002f7d <get_fileinfo+0x81>
c0002f6d:	0f b6 c0             	movzx  eax,al
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	01 c7                	add    edi,eax
c0002f74:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f79:	89 d5                	mov    ebp,edx
c0002f7b:	eb b0                	jmp    c0002f2d <get_fileinfo+0x31>
c0002f7d:	31 ff                	xor    edi,edi
c0002f7f:	66 85 ed             	test   bp,bp
c0002f82:	74 02                	je     c0002f86 <get_fileinfo+0x8a>
c0002f84:	31 ff                	xor    edi,edi
c0002f86:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f8b:	31 ff                	xor    edi,edi
c0002f8d:	31 c9                	xor    ecx,ecx
c0002f8f:	83 f9 0a             	cmp    ecx,0xa
c0002f92:	0f 87 ad 00 00 00    	ja     c0003045 <get_fileinfo+0x149>
c0002f98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fa2:	66 83 fa 20          	cmp    dx,0x20
c0002fa6:	0f 84 92 00 00 00    	je     c000303e <get_fileinfo+0x142>
c0002fac:	66 83 fa 05          	cmp    dx,0x5
c0002fb0:	75 05                	jne    c0002fb7 <get_fileinfo+0xbb>
c0002fb2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fb7:	83 ff 0b             	cmp    edi,0xb
c0002fba:	77 0b                	ja     c0002fc7 <get_fileinfo+0xcb>
c0002fbc:	83 fd 09             	cmp    ebp,0x9
c0002fbf:	75 06                	jne    c0002fc7 <get_fileinfo+0xcb>
c0002fc1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fc6:	47                   	inc    edi
c0002fc7:	0f b7 c2             	movzx  eax,dx
c0002fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fce:	e8 ed ed ff ff       	call   c0001dc0 <dbc_1st>
c0002fd3:	85 c0                	test   eax,eax
c0002fd5:	74 2f                	je     c0003006 <get_fileinfo+0x10a>
c0002fd7:	83 fd 08             	cmp    ebp,0x8
c0002fda:	74 2a                	je     c0003006 <get_fileinfo+0x10a>
c0002fdc:	83 fd 0b             	cmp    ebp,0xb
c0002fdf:	74 25                	je     c0003006 <get_fileinfo+0x10a>
c0002fe1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fe4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fe8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fec:	e8 d2 ed ff ff       	call   c0001dc3 <dbc_2nd>
c0002ff1:	85 c0                	test   eax,eax
c0002ff3:	74 11                	je     c0003006 <get_fileinfo+0x10a>
c0002ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002ffe:	c1 e2 08             	shl    edx,0x8
c0003001:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003004:	09 c2                	or     edx,eax
c0003006:	0f b7 d2             	movzx  edx,dx
c0003009:	50                   	push   eax
c000300a:	50                   	push   eax
c000300b:	68 b5 01 00 00       	push   0x1b5
c0003010:	52                   	push   edx
c0003011:	e8 46 2b 00 00       	call   c0005b5c <ff_oem2uni>
c0003016:	83 c4 10             	add    esp,0x10
c0003019:	66 85 c0             	test   ax,ax
c000301c:	75 04                	jne    c0003022 <get_fileinfo+0x126>
c000301e:	31 ff                	xor    edi,edi
c0003020:	eb 23                	jmp    c0003045 <get_fileinfo+0x149>
c0003022:	b9 0c 00 00 00       	mov    ecx,0xc
c0003027:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000302b:	29 f9                	sub    ecx,edi
c000302d:	0f b7 c0             	movzx  eax,ax
c0003030:	e8 57 ee ff ff       	call   c0001e8c <put_utf>
c0003035:	84 c0                	test   al,al
c0003037:	74 e5                	je     c000301e <get_fileinfo+0x122>
c0003039:	0f b6 c0             	movzx  eax,al
c000303c:	01 c7                	add    edi,eax
c000303e:	89 e9                	mov    ecx,ebp
c0003040:	e9 4a ff ff ff       	jmp    c0002f8f <get_fileinfo+0x93>
c0003045:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000304a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000304e:	75 54                	jne    c00030a4 <get_fileinfo+0x1a8>
c0003050:	85 ff                	test   edi,edi
c0003052:	75 0b                	jne    c000305f <get_fileinfo+0x163>
c0003054:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003058:	ba 01 00 00 00       	mov    edx,0x1
c000305d:	eb 33                	jmp    c0003092 <get_fileinfo+0x196>
c000305f:	b1 08                	mov    cl,0x8
c0003061:	31 d2                	xor    edx,edx
c0003063:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003069:	84 c0                	test   al,al
c000306b:	74 25                	je     c0003092 <get_fileinfo+0x196>
c000306d:	66 83 f8 2e          	cmp    ax,0x2e
c0003071:	74 16                	je     c0003089 <get_fileinfo+0x18d>
c0003073:	8d 78 bf             	lea    edi,[eax-0x41]
c0003076:	66 83 ff 19          	cmp    di,0x19
c000307a:	77 0f                	ja     c000308b <get_fileinfo+0x18f>
c000307c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000307f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003082:	74 07                	je     c000308b <get_fileinfo+0x18f>
c0003084:	83 c0 20             	add    eax,0x20
c0003087:	eb 02                	jmp    c000308b <get_fileinfo+0x18f>
c0003089:	b1 10                	mov    cl,0x10
c000308b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000308f:	42                   	inc    edx
c0003090:	eb d1                	jmp    c0003063 <get_fileinfo+0x167>
c0003092:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003097:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000309e:	75 04                	jne    c00030a4 <get_fileinfo+0x1a8>
c00030a0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030aa:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030ad:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b0:	83 c0 1c             	add    eax,0x1c
c00030b3:	e8 94 ec ff ff       	call   c0001d4c <ld_dword>
c00030b8:	89 03                	mov    DWORD PTR [ebx],eax
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	83 c0 16             	add    eax,0x16
c00030c0:	e8 7a ec ff ff       	call   c0001d3f <ld_word>
c00030c5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	83 c0 18             	add    eax,0x18
c00030cf:	e8 6b ec ff ff       	call   c0001d3f <ld_word>
c00030d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030d8:	83 c4 1c             	add    esp,0x1c
c00030db:	5b                   	pop    ebx
c00030dc:	5e                   	pop    esi
c00030dd:	5f                   	pop    edi
c00030de:	5d                   	pop    ebp
c00030df:	c3                   	ret    

c00030e0 <ld_clust.isra.0>:
c00030e0:	56                   	push   esi
c00030e1:	89 c6                	mov    esi,eax
c00030e3:	53                   	push   ebx
c00030e4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030e7:	89 d3                	mov    ebx,edx
c00030e9:	e8 51 ec ff ff       	call   c0001d3f <ld_word>
c00030ee:	0f b7 c8             	movzx  ecx,ax
c00030f1:	89 f0                	mov    eax,esi
c00030f3:	3c 03                	cmp    al,0x3
c00030f5:	75 0d                	jne    c0003104 <ld_clust.isra.0+0x24>
c00030f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030fa:	e8 40 ec ff ff       	call   c0001d3f <ld_word>
c00030ff:	c1 e0 10             	shl    eax,0x10
c0003102:	09 c1                	or     ecx,eax
c0003104:	89 c8                	mov    eax,ecx
c0003106:	5b                   	pop    ebx
c0003107:	5e                   	pop    esi
c0003108:	c3                   	ret    

c0003109 <st_clust.isra.1>:
c0003109:	56                   	push   esi
c000310a:	89 c6                	mov    esi,eax
c000310c:	53                   	push   ebx
c000310d:	89 d3                	mov    ebx,edx
c000310f:	0f b7 d1             	movzx  edx,cx
c0003112:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003115:	e8 4a ec ff ff       	call   c0001d64 <st_word>
c000311a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000311d:	75 0f                	jne    c000312e <st_clust.isra.1+0x25>
c000311f:	c1 e9 10             	shr    ecx,0x10
c0003122:	8d 43 14             	lea    eax,[ebx+0x14]
c0003125:	89 ca                	mov    edx,ecx
c0003127:	5b                   	pop    ebx
c0003128:	5e                   	pop    esi
c0003129:	e9 36 ec ff ff       	jmp    c0001d64 <st_word>
c000312e:	5b                   	pop    ebx
c000312f:	5e                   	pop    esi
c0003130:	c3                   	ret    

c0003131 <get_fat.isra.2>:
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	83 fa 01             	cmp    edx,0x1
c0003139:	0f 86 f1 00 00 00    	jbe    c0003230 <get_fat.isra.2+0xff>
c000313f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003142:	0f 83 e8 00 00 00    	jae    c0003230 <get_fat.isra.2+0xff>
c0003148:	55                   	push   ebp
c0003149:	57                   	push   edi
c000314a:	89 c7                	mov    edi,eax
c000314c:	56                   	push   esi
c000314d:	89 d6                	mov    esi,edx
c000314f:	53                   	push   ebx
c0003150:	83 ec 0c             	sub    esp,0xc
c0003153:	8a 00                	mov    al,BYTE PTR [eax]
c0003155:	3c 02                	cmp    al,0x2
c0003157:	74 78                	je     c00031d1 <get_fat.isra.2+0xa0>
c0003159:	3c 03                	cmp    al,0x3
c000315b:	0f 84 97 00 00 00    	je     c00031f8 <get_fat.isra.2+0xc7>
c0003161:	fe c8                	dec    al
c0003163:	0f 85 bd 00 00 00    	jne    c0003226 <get_fat.isra.2+0xf5>
c0003169:	89 d3                	mov    ebx,edx
c000316b:	89 f8                	mov    eax,edi
c000316d:	d1 eb                	shr    ebx,1
c000316f:	01 d3                	add    ebx,edx
c0003171:	89 da                	mov    edx,ebx
c0003173:	c1 ea 09             	shr    edx,0x9
c0003176:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003179:	e8 e7 f0 ff ff       	call   c0002265 <move_window>
c000317e:	85 c0                	test   eax,eax
c0003180:	74 08                	je     c000318a <get_fat.isra.2+0x59>
c0003182:	83 c9 ff             	or     ecx,0xffffffff
c0003185:	e9 9c 00 00 00       	jmp    c0003226 <get_fat.isra.2+0xf5>
c000318a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000318d:	89 f8                	mov    eax,edi
c000318f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003195:	89 ea                	mov    edx,ebp
c0003197:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000319b:	c1 ea 09             	shr    edx,0x9
c000319e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a1:	e8 bf f0 ff ff       	call   c0002265 <move_window>
c00031a6:	85 c0                	test   eax,eax
c00031a8:	75 d8                	jne    c0003182 <get_fat.isra.2+0x51>
c00031aa:	0f b6 c3             	movzx  eax,bl
c00031ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031b3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031b8:	c1 e3 08             	shl    ebx,0x8
c00031bb:	09 c3                	or     ebx,eax
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031c5:	83 e6 01             	and    esi,0x1
c00031c8:	74 5c                	je     c0003226 <get_fat.isra.2+0xf5>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	c1 e9 04             	shr    ecx,0x4
c00031cf:	eb 55                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031d1:	c1 ea 08             	shr    edx,0x8
c00031d4:	89 f8                	mov    eax,edi
c00031d6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d9:	e8 87 f0 ff ff       	call   c0002265 <move_window>
c00031de:	85 c0                	test   eax,eax
c00031e0:	75 a0                	jne    c0003182 <get_fat.isra.2+0x51>
c00031e2:	01 f6                	add    esi,esi
c00031e4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ea:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ee:	e8 4c eb ff ff       	call   c0001d3f <ld_word>
c00031f3:	0f b7 c8             	movzx  ecx,ax
c00031f6:	eb 2e                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031f8:	c1 ea 07             	shr    edx,0x7
c00031fb:	89 f8                	mov    eax,edi
c00031fd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003200:	e8 60 f0 ff ff       	call   c0002265 <move_window>
c0003205:	85 c0                	test   eax,eax
c0003207:	0f 85 75 ff ff ff    	jne    c0003182 <get_fat.isra.2+0x51>
c000320d:	c1 e6 02             	shl    esi,0x2
c0003210:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003216:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000321a:	e8 2d eb ff ff       	call   c0001d4c <ld_dword>
c000321f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003224:	89 c1                	mov    ecx,eax
c0003226:	83 c4 0c             	add    esp,0xc
c0003229:	89 c8                	mov    eax,ecx
c000322b:	5b                   	pop    ebx
c000322c:	5e                   	pop    esi
c000322d:	5f                   	pop    edi
c000322e:	5d                   	pop    ebp
c000322f:	c3                   	ret    
c0003230:	89 c8                	mov    eax,ecx
c0003232:	c3                   	ret    

c0003233 <dir_sdi>:
c0003233:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003239:	0f 87 b6 00 00 00    	ja     c00032f5 <dir_sdi+0xc2>
c000323f:	55                   	push   ebp
c0003240:	57                   	push   edi
c0003241:	56                   	push   esi
c0003242:	53                   	push   ebx
c0003243:	89 d3                	mov    ebx,edx
c0003245:	83 ec 1c             	sub    esp,0x1c
c0003248:	f6 c2 1f             	test   dl,0x1f
c000324b:	74 0a                	je     c0003257 <dir_sdi+0x24>
c000324d:	b8 02 00 00 00       	mov    eax,0x2
c0003252:	e9 96 00 00 00       	jmp    c00032ed <dir_sdi+0xba>
c0003257:	89 c6                	mov    esi,eax
c0003259:	8b 38                	mov    edi,DWORD PTR [eax]
c000325b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000325e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003261:	85 c9                	test   ecx,ecx
c0003263:	75 23                	jne    c0003288 <dir_sdi+0x55>
c0003265:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003268:	76 07                	jbe    c0003271 <dir_sdi+0x3e>
c000326a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000326d:	85 c0                	test   eax,eax
c000326f:	75 15                	jne    c0003286 <dir_sdi+0x53>
c0003271:	89 da                	mov    edx,ebx
c0003273:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003277:	c1 ea 05             	shr    edx,0x5
c000327a:	39 c2                	cmp    edx,eax
c000327c:	73 cf                	jae    c000324d <dir_sdi+0x1a>
c000327e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003281:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003284:	eb 3d                	jmp    c00032c3 <dir_sdi+0x90>
c0003286:	89 c1                	mov    ecx,eax
c0003288:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000328c:	c1 e5 09             	shl    ebp,0x9
c000328f:	89 ca                	mov    edx,ecx
c0003291:	39 eb                	cmp    ebx,ebp
c0003293:	72 1c                	jb     c00032b1 <dir_sdi+0x7e>
c0003295:	8b 06                	mov    eax,DWORD PTR [esi]
c0003297:	e8 95 fe ff ff       	call   c0003131 <get_fat.isra.2>
c000329c:	89 c1                	mov    ecx,eax
c000329e:	83 f8 ff             	cmp    eax,0xffffffff
c00032a1:	74 45                	je     c00032e8 <dir_sdi+0xb5>
c00032a3:	83 f8 01             	cmp    eax,0x1
c00032a6:	76 a5                	jbe    c000324d <dir_sdi+0x1a>
c00032a8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00032ab:	76 a0                	jbe    c000324d <dir_sdi+0x1a>
c00032ad:	29 eb                	sub    ebx,ebp
c00032af:	eb de                	jmp    c000328f <dir_sdi+0x5c>
c00032b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032b5:	89 f8                	mov    eax,edi
c00032b7:	e8 c9 ec ff ff       	call   c0001f85 <clst2sect>
c00032bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032c0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032c3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032c6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032c9:	85 d2                	test   edx,edx
c00032cb:	74 80                	je     c000324d <dir_sdi+0x1a>
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032d5:	c1 e8 09             	shr    eax,0x9
c00032d8:	01 d0                	add    eax,edx
c00032da:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032dd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032e1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032e4:	31 c0                	xor    eax,eax
c00032e6:	eb 05                	jmp    c00032ed <dir_sdi+0xba>
c00032e8:	b8 01 00 00 00       	mov    eax,0x1
c00032ed:	83 c4 1c             	add    esp,0x1c
c00032f0:	5b                   	pop    ebx
c00032f1:	5e                   	pop    esi
c00032f2:	5f                   	pop    edi
c00032f3:	5d                   	pop    ebp
c00032f4:	c3                   	ret    
c00032f5:	b8 02 00 00 00       	mov    eax,0x2
c00032fa:	c3                   	ret    

c00032fb <create_chain>:
c00032fb:	55                   	push   ebp
c00032fc:	89 c5                	mov    ebp,eax
c00032fe:	57                   	push   edi
c00032ff:	89 d7                	mov    edi,edx
c0003301:	56                   	push   esi
c0003302:	53                   	push   ebx
c0003303:	83 ec 1c             	sub    esp,0x1c
c0003306:	85 d2                	test   edx,edx
c0003308:	8b 30                	mov    esi,DWORD PTR [eax]
c000330a:	75 0e                	jne    c000331a <create_chain+0x1f>
c000330c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000330f:	85 c9                	test   ecx,ecx
c0003311:	74 34                	je     c0003347 <create_chain+0x4c>
c0003313:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003316:	77 34                	ja     c000334c <create_chain+0x51>
c0003318:	eb 2d                	jmp    c0003347 <create_chain+0x4c>
c000331a:	89 f0                	mov    eax,esi
c000331c:	e8 10 fe ff ff       	call   c0003131 <get_fat.isra.2>
c0003321:	89 c3                	mov    ebx,eax
c0003323:	83 f8 01             	cmp    eax,0x1
c0003326:	77 0a                	ja     c0003332 <create_chain+0x37>
c0003328:	bb 01 00 00 00       	mov    ebx,0x1
c000332d:	e9 f9 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003332:	83 f8 ff             	cmp    eax,0xffffffff
c0003335:	0f 84 ed 00 00 00    	je     c0003428 <create_chain+0x12d>
c000333b:	89 f9                	mov    ecx,edi
c000333d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003340:	76 0a                	jbe    c000334c <create_chain+0x51>
c0003342:	e9 e4 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003347:	b9 01 00 00 00       	mov    ecx,0x1
c000334c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003350:	75 07                	jne    c0003359 <create_chain+0x5e>
c0003352:	31 db                	xor    ebx,ebx
c0003354:	e9 d2 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003359:	39 f9                	cmp    ecx,edi
c000335b:	75 46                	jne    c00033a3 <create_chain+0xa8>
c000335d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003360:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003363:	77 05                	ja     c000336a <create_chain+0x6f>
c0003365:	bb 02 00 00 00       	mov    ebx,0x2
c000336a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000336e:	89 da                	mov    edx,ebx
c0003370:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003373:	e8 b9 fd ff ff       	call   c0003131 <get_fat.isra.2>
c0003378:	83 f8 01             	cmp    eax,0x1
c000337b:	74 ab                	je     c0003328 <create_chain+0x2d>
c000337d:	83 f8 ff             	cmp    eax,0xffffffff
c0003380:	0f 84 a2 00 00 00    	je     c0003428 <create_chain+0x12d>
c0003386:	85 c0                	test   eax,eax
c0003388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000338c:	74 11                	je     c000339f <create_chain+0xa4>
c000338e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	76 0d                	jbe    c00033a3 <create_chain+0xa8>
c0003396:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003399:	73 08                	jae    c00033a3 <create_chain+0xa8>
c000339b:	89 c1                	mov    ecx,eax
c000339d:	eb 04                	jmp    c00033a3 <create_chain+0xa8>
c000339f:	85 db                	test   ebx,ebx
c00033a1:	75 3d                	jne    c00033e0 <create_chain+0xe5>
c00033a3:	89 cb                	mov    ebx,ecx
c00033a5:	43                   	inc    ebx
c00033a6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00033a9:	77 0a                	ja     c00033b5 <create_chain+0xba>
c00033ab:	83 f9 01             	cmp    ecx,0x1
c00033ae:	76 a2                	jbe    c0003352 <create_chain+0x57>
c00033b0:	bb 02 00 00 00       	mov    ebx,0x2
c00033b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b9:	89 da                	mov    edx,ebx
c00033bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033be:	e8 6e fd ff ff       	call   c0003131 <get_fat.isra.2>
c00033c3:	85 c0                	test   eax,eax
c00033c5:	74 19                	je     c00033e0 <create_chain+0xe5>
c00033c7:	83 f8 01             	cmp    eax,0x1
c00033ca:	0f 84 58 ff ff ff    	je     c0003328 <create_chain+0x2d>
c00033d0:	40                   	inc    eax
c00033d1:	74 55                	je     c0003428 <create_chain+0x12d>
c00033d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d7:	39 cb                	cmp    ebx,ecx
c00033d9:	75 ca                	jne    c00033a5 <create_chain+0xaa>
c00033db:	e9 72 ff ff ff       	jmp    c0003352 <create_chain+0x57>
c00033e0:	83 c9 ff             	or     ecx,0xffffffff
c00033e3:	89 da                	mov    edx,ebx
c00033e5:	89 f0                	mov    eax,esi
c00033e7:	e8 cf f2 ff ff       	call   c00026bb <put_fat>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	75 31                	jne    c0003421 <create_chain+0x126>
c00033f0:	85 ff                	test   edi,edi
c00033f2:	75 16                	jne    c000340a <create_chain+0x10f>
c00033f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033f7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033fa:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033fd:	8d 57 fe             	lea    edx,[edi-0x2]
c0003400:	39 d0                	cmp    eax,edx
c0003402:	77 17                	ja     c000341b <create_chain+0x120>
c0003404:	48                   	dec    eax
c0003405:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003408:	eb 11                	jmp    c000341b <create_chain+0x120>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	89 fa                	mov    edx,edi
c000340e:	89 f0                	mov    eax,esi
c0003410:	e8 a6 f2 ff ff       	call   c00026bb <put_fat>
c0003415:	85 c0                	test   eax,eax
c0003417:	74 db                	je     c00033f4 <create_chain+0xf9>
c0003419:	eb 06                	jmp    c0003421 <create_chain+0x126>
c000341b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000341f:	eb 0a                	jmp    c000342b <create_chain+0x130>
c0003421:	48                   	dec    eax
c0003422:	0f 85 00 ff ff ff    	jne    c0003328 <create_chain+0x2d>
c0003428:	83 cb ff             	or     ebx,0xffffffff
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	89 d8                	mov    eax,ebx
c0003430:	5b                   	pop    ebx
c0003431:	5e                   	pop    esi
c0003432:	5f                   	pop    edi
c0003433:	5d                   	pop    ebp
c0003434:	c3                   	ret    

c0003435 <remove_chain>:
c0003435:	55                   	push   ebp
c0003436:	57                   	push   edi
c0003437:	56                   	push   esi
c0003438:	89 d6                	mov    esi,edx
c000343a:	53                   	push   ebx
c000343b:	83 ec 0c             	sub    esp,0xc
c000343e:	83 fa 01             	cmp    edx,0x1
c0003441:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003443:	76 65                	jbe    c00034aa <remove_chain+0x75>
c0003445:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003448:	76 60                	jbe    c00034aa <remove_chain+0x75>
c000344a:	89 c5                	mov    ebp,eax
c000344c:	89 ca                	mov    edx,ecx
c000344e:	85 c9                	test   ecx,ecx
c0003450:	74 0e                	je     c0003460 <remove_chain+0x2b>
c0003452:	83 c9 ff             	or     ecx,0xffffffff
c0003455:	89 d8                	mov    eax,ebx
c0003457:	e8 5f f2 ff ff       	call   c00026bb <put_fat>
c000345c:	85 c0                	test   eax,eax
c000345e:	75 56                	jne    c00034b6 <remove_chain+0x81>
c0003460:	89 f2                	mov    edx,esi
c0003462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003465:	e8 c7 fc ff ff       	call   c0003131 <get_fat.isra.2>
c000346a:	89 c7                	mov    edi,eax
c000346c:	85 c0                	test   eax,eax
c000346e:	75 04                	jne    c0003474 <remove_chain+0x3f>
c0003470:	31 c0                	xor    eax,eax
c0003472:	eb 42                	jmp    c00034b6 <remove_chain+0x81>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	74 31                	je     c00034aa <remove_chain+0x75>
c0003479:	83 f8 ff             	cmp    eax,0xffffffff
c000347c:	74 33                	je     c00034b1 <remove_chain+0x7c>
c000347e:	31 c9                	xor    ecx,ecx
c0003480:	89 f2                	mov    edx,esi
c0003482:	89 d8                	mov    eax,ebx
c0003484:	e8 32 f2 ff ff       	call   c00026bb <put_fat>
c0003489:	85 c0                	test   eax,eax
c000348b:	75 29                	jne    c00034b6 <remove_chain+0x81>
c000348d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003490:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003493:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003496:	39 c8                	cmp    eax,ecx
c0003498:	73 08                	jae    c00034a2 <remove_chain+0x6d>
c000349a:	40                   	inc    eax
c000349b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000349f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a2:	89 fe                	mov    esi,edi
c00034a4:	39 fa                	cmp    edx,edi
c00034a6:	77 b8                	ja     c0003460 <remove_chain+0x2b>
c00034a8:	eb c6                	jmp    c0003470 <remove_chain+0x3b>
c00034aa:	b8 02 00 00 00       	mov    eax,0x2
c00034af:	eb 05                	jmp    c00034b6 <remove_chain+0x81>
c00034b1:	b8 01 00 00 00       	mov    eax,0x1
c00034b6:	83 c4 0c             	add    esp,0xc
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <dir_next>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034c8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ca:	83 c7 20             	add    edi,0x20
c00034cd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034d3:	76 07                	jbe    c00034dc <dir_next+0x1e>
c00034d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034dc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034df:	b9 04 00 00 00       	mov    ecx,0x4
c00034e4:	85 f6                	test   esi,esi
c00034e6:	0f 84 cd 00 00 00    	je     c00035b9 <dir_next+0xfb>
c00034ec:	89 c3                	mov    ebx,eax
c00034ee:	89 d1                	mov    ecx,edx
c00034f0:	89 f8                	mov    eax,edi
c00034f2:	25 ff 01 00 00       	and    eax,0x1ff
c00034f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034fb:	0f 85 a8 00 00 00    	jne    c00035a9 <dir_next+0xeb>
c0003501:	46                   	inc    esi
c0003502:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003505:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003508:	85 d2                	test   edx,edx
c000350a:	75 22                	jne    c000352e <dir_next+0x70>
c000350c:	89 fa                	mov    edx,edi
c000350e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003512:	c1 ea 05             	shr    edx,0x5
c0003515:	39 c2                	cmp    edx,eax
c0003517:	0f 82 8c 00 00 00    	jb     c00035a9 <dir_next+0xeb>
c000351d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003524:	b9 04 00 00 00       	mov    ecx,0x4
c0003529:	e9 8b 00 00 00       	jmp    c00035b9 <dir_next+0xfb>
c000352e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003532:	89 fe                	mov    esi,edi
c0003534:	48                   	dec    eax
c0003535:	c1 ee 09             	shr    esi,0x9
c0003538:	85 f0                	test   eax,esi
c000353a:	75 6d                	jne    c00035a9 <dir_next+0xeb>
c000353c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 ea fb ff ff       	call   c0003131 <get_fat.isra.2>
c0003547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000354b:	89 c6                	mov    esi,eax
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	77 07                	ja     c0003559 <dir_next+0x9b>
c0003552:	b9 02 00 00 00       	mov    ecx,0x2
c0003557:	eb 60                	jmp    c00035b9 <dir_next+0xfb>
c0003559:	83 f8 ff             	cmp    eax,0xffffffff
c000355c:	75 07                	jne    c0003565 <dir_next+0xa7>
c000355e:	b9 01 00 00 00       	mov    ecx,0x1
c0003563:	eb 54                	jmp    c00035b9 <dir_next+0xfb>
c0003565:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003568:	77 30                	ja     c000359a <dir_next+0xdc>
c000356a:	85 c9                	test   ecx,ecx
c000356c:	74 af                	je     c000351d <dir_next+0x5f>
c000356e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003571:	89 d8                	mov    eax,ebx
c0003573:	e8 83 fd ff ff       	call   c00032fb <create_chain>
c0003578:	b9 07 00 00 00       	mov    ecx,0x7
c000357d:	89 c6                	mov    esi,eax
c000357f:	85 c0                	test   eax,eax
c0003581:	74 36                	je     c00035b9 <dir_next+0xfb>
c0003583:	83 f8 01             	cmp    eax,0x1
c0003586:	74 ca                	je     c0003552 <dir_next+0x94>
c0003588:	83 f8 ff             	cmp    eax,0xffffffff
c000358b:	74 d1                	je     c000355e <dir_next+0xa0>
c000358d:	89 c2                	mov    edx,eax
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 75 f2 ff ff       	call   c000280b <dir_clear>
c0003596:	85 c0                	test   eax,eax
c0003598:	75 c4                	jne    c000355e <dir_next+0xa0>
c000359a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000359d:	89 f2                	mov    edx,esi
c000359f:	89 e8                	mov    eax,ebp
c00035a1:	e8 df e9 ff ff       	call   c0001f85 <clst2sect>
c00035a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035ad:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035b0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035b4:	31 c9                	xor    ecx,ecx
c00035b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035b9:	83 c4 1c             	add    esp,0x1c
c00035bc:	89 c8                	mov    eax,ecx
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    

c00035c3 <dir_alloc>:
c00035c3:	55                   	push   ebp
c00035c4:	89 c5                	mov    ebp,eax
c00035c6:	57                   	push   edi
c00035c7:	89 d7                	mov    edi,edx
c00035c9:	56                   	push   esi
c00035ca:	31 d2                	xor    edx,edx
c00035cc:	53                   	push   ebx
c00035cd:	83 ec 0c             	sub    esp,0xc
c00035d0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d2:	e8 5c fc ff ff       	call   c0003233 <dir_sdi>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 37                	jne    c0003612 <dir_alloc+0x4f>
c00035db:	31 db                	xor    ebx,ebx
c00035dd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	e8 7e ec ff ff       	call   c0002265 <move_window>
c00035e7:	85 c0                	test   eax,eax
c00035e9:	75 27                	jne    c0003612 <dir_alloc+0x4f>
c00035eb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ee:	8a 12                	mov    dl,BYTE PTR [edx]
c00035f0:	84 d2                	test   dl,dl
c00035f2:	74 05                	je     c00035f9 <dir_alloc+0x36>
c00035f4:	80 fa e5             	cmp    dl,0xe5
c00035f7:	75 07                	jne    c0003600 <dir_alloc+0x3d>
c00035f9:	43                   	inc    ebx
c00035fa:	39 fb                	cmp    ebx,edi
c00035fc:	75 04                	jne    c0003602 <dir_alloc+0x3f>
c00035fe:	eb 1c                	jmp    c000361c <dir_alloc+0x59>
c0003600:	31 db                	xor    ebx,ebx
c0003602:	ba 01 00 00 00       	mov    edx,0x1
c0003607:	89 e8                	mov    eax,ebp
c0003609:	e8 b0 fe ff ff       	call   c00034be <dir_next>
c000360e:	85 c0                	test   eax,eax
c0003610:	74 cb                	je     c00035dd <dir_alloc+0x1a>
c0003612:	83 f8 04             	cmp    eax,0x4
c0003615:	75 05                	jne    c000361c <dir_alloc+0x59>
c0003617:	b8 07 00 00 00       	mov    eax,0x7
c000361c:	83 c4 0c             	add    esp,0xc
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <dir_read>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	bf ff ff ff ff       	mov    edi,0xffffffff
c000362b:	56                   	push   esi
c000362c:	be 04 00 00 00       	mov    esi,0x4
c0003631:	53                   	push   ebx
c0003632:	89 c3                	mov    ebx,eax
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000363d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003642:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003645:	85 d2                	test   edx,edx
c0003647:	0f 84 d8 00 00 00    	je     c0003725 <dir_read+0x101>
c000364d:	89 e8                	mov    eax,ebp
c000364f:	e8 11 ec ff ff       	call   c0002265 <move_window>
c0003654:	89 c6                	mov    esi,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	0f 85 d2 00 00 00    	jne    c0003730 <dir_read+0x10c>
c000365e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003661:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003663:	84 c9                	test   cl,cl
c0003665:	0f 84 c0 00 00 00    	je     c000372b <dir_read+0x107>
c000366b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000366e:	83 e0 3f             	and    eax,0x3f
c0003671:	80 f9 2e             	cmp    cl,0x2e
c0003674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003678:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000367b:	0f 84 8a 00 00 00    	je     c000370b <dir_read+0xe7>
c0003681:	80 f9 e5             	cmp    cl,0xe5
c0003684:	0f 84 81 00 00 00    	je     c000370b <dir_read+0xe7>
c000368a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368e:	83 e0 1f             	and    eax,0x1f
c0003691:	83 f8 08             	cmp    eax,0x8
c0003694:	0f 94 c0             	sete   al
c0003697:	0f b6 c0             	movzx  eax,al
c000369a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369e:	75 6b                	jne    c000370b <dir_read+0xe7>
c00036a0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036a5:	75 44                	jne    c00036eb <dir_read+0xc7>
c00036a7:	f6 c1 40             	test   cl,0x40
c00036aa:	74 12                	je     c00036be <dir_read+0x9a>
c00036ac:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00036af:	83 e1 bf             	and    ecx,0xffffffbf
c00036b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036bc:	eb 06                	jmp    c00036c4 <dir_read+0xa0>
c00036be:	89 f8                	mov    eax,edi
c00036c0:	38 c8                	cmp    al,cl
c00036c2:	75 47                	jne    c000370b <dir_read+0xe7>
c00036c4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036cd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036d0:	75 3e                	jne    c0003710 <dir_read+0xec>
c00036d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036d9:	e8 c4 e8 ff ff       	call   c0001fa2 <pick_lfn>
c00036de:	85 c0                	test   eax,eax
c00036e0:	74 2e                	je     c0003710 <dir_read+0xec>
c00036e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036e9:	eb 25                	jmp    c0003710 <dir_read+0xec>
c00036eb:	89 f8                	mov    eax,edi
c00036ed:	84 c0                	test   al,al
c00036ef:	75 11                	jne    c0003702 <dir_read+0xde>
c00036f1:	89 d0                	mov    eax,edx
c00036f3:	e8 64 ea ff ff       	call   c000215c <sum_sfn>
c00036f8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036fc:	75 04                	jne    c0003702 <dir_read+0xde>
c00036fe:	31 f6                	xor    esi,esi
c0003700:	eb 35                	jmp    c0003737 <dir_read+0x113>
c0003702:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003709:	eb 2c                	jmp    c0003737 <dir_read+0x113>
c000370b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003710:	31 d2                	xor    edx,edx
c0003712:	89 d8                	mov    eax,ebx
c0003714:	e8 a5 fd ff ff       	call   c00034be <dir_next>
c0003719:	89 c6                	mov    esi,eax
c000371b:	85 c0                	test   eax,eax
c000371d:	0f 84 1f ff ff ff    	je     c0003642 <dir_read+0x1e>
c0003723:	eb 0b                	jmp    c0003730 <dir_read+0x10c>
c0003725:	85 f6                	test   esi,esi
c0003727:	74 d5                	je     c00036fe <dir_read+0xda>
c0003729:	eb 05                	jmp    c0003730 <dir_read+0x10c>
c000372b:	be 04 00 00 00       	mov    esi,0x4
c0003730:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003737:	83 c4 1c             	add    esp,0x1c
c000373a:	89 f0                	mov    eax,esi
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <dir_remove>:
c0003741:	57                   	push   edi
c0003742:	56                   	push   esi
c0003743:	53                   	push   ebx
c0003744:	89 c3                	mov    ebx,eax
c0003746:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003749:	8b 30                	mov    esi,DWORD PTR [eax]
c000374b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374e:	83 fa ff             	cmp    edx,0xffffffff
c0003751:	74 09                	je     c000375c <dir_remove+0x1b>
c0003753:	e8 db fa ff ff       	call   c0003233 <dir_sdi>
c0003758:	85 c0                	test   eax,eax
c000375a:	75 34                	jne    c0003790 <dir_remove+0x4f>
c000375c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000375f:	89 f0                	mov    eax,esi
c0003761:	e8 ff ea ff ff       	call   c0002265 <move_window>
c0003766:	85 c0                	test   eax,eax
c0003768:	75 1c                	jne    c0003786 <dir_remove+0x45>
c000376a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000376d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003770:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003774:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003777:	73 17                	jae    c0003790 <dir_remove+0x4f>
c0003779:	31 d2                	xor    edx,edx
c000377b:	89 d8                	mov    eax,ebx
c000377d:	e8 3c fd ff ff       	call   c00034be <dir_next>
c0003782:	85 c0                	test   eax,eax
c0003784:	74 d6                	je     c000375c <dir_remove+0x1b>
c0003786:	83 f8 04             	cmp    eax,0x4
c0003789:	75 05                	jne    c0003790 <dir_remove+0x4f>
c000378b:	b8 02 00 00 00       	mov    eax,0x2
c0003790:	5b                   	pop    ebx
c0003791:	5e                   	pop    esi
c0003792:	5f                   	pop    edi
c0003793:	c3                   	ret    

c0003794 <dir_find>:
c0003794:	55                   	push   ebp
c0003795:	31 d2                	xor    edx,edx
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	8b 00                	mov    eax,DWORD PTR [eax]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 d8                	mov    eax,ebx
c00037a7:	e8 87 fa ff ff       	call   c0003233 <dir_sdi>
c00037ac:	89 c6                	mov    esi,eax
c00037ae:	85 c0                	test   eax,eax
c00037b0:	0f 85 02 01 00 00    	jne    c00038b8 <dir_find+0x124>
c00037b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037bd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ce:	e8 92 ea ff ff       	call   c0002265 <move_window>
c00037d3:	89 c6                	mov    esi,eax
c00037d5:	85 c0                	test   eax,eax
c00037d7:	0f 85 db 00 00 00    	jne    c00038b8 <dir_find+0x124>
c00037dd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037e3:	84 c9                	test   cl,cl
c00037e5:	0f 84 c8 00 00 00    	je     c00038b3 <dir_find+0x11f>
c00037eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ee:	88 d0                	mov    al,dl
c00037f0:	83 e0 3f             	and    eax,0x3f
c00037f3:	80 f9 e5             	cmp    cl,0xe5
c00037f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f9:	0f 84 93 00 00 00    	je     c0003892 <dir_find+0xfe>
c00037ff:	80 e2 08             	and    dl,0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x7a>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 86 00 00 00    	jne    c0003892 <dir_find+0xfe>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x7e>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 54                	jne    c0003866 <dir_find+0xd2>
c0003812:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003816:	0f 85 82 00 00 00    	jne    c000389e <dir_find+0x10a>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 12                	je     c0003833 <dir_find+0x9f>
c0003821:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000382b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000382e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003831:	eb 06                	jmp    c0003839 <dir_find+0xa5>
c0003833:	89 f8                	mov    eax,edi
c0003835:	38 c8                	cmp    al,cl
c0003837:	75 60                	jne    c0003899 <dir_find+0x105>
c0003839:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000383d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003842:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003845:	75 57                	jne    c000389e <dir_find+0x10a>
c0003847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000384b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000384f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003852:	89 ea                	mov    edx,ebp
c0003854:	e8 89 f3 ff ff       	call   c0002be2 <cmp_lfn>
c0003859:	85 c0                	test   eax,eax
c000385b:	74 41                	je     c000389e <dir_find+0x10a>
c000385d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003861:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003864:	eb 38                	jmp    c000389e <dir_find+0x10a>
c0003866:	89 f8                	mov    eax,edi
c0003868:	84 c0                	test   al,al
c000386a:	75 0d                	jne    c0003879 <dir_find+0xe5>
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 e9 e8 ff ff       	call   c000215c <sum_sfn>
c0003873:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003877:	74 3f                	je     c00038b8 <dir_find+0x124>
c0003879:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000387d:	75 13                	jne    c0003892 <dir_find+0xfe>
c000387f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003882:	b9 0b 00 00 00       	mov    ecx,0xb
c0003887:	89 e8                	mov    eax,ebp
c0003889:	e8 fd e4 ff ff       	call   c0001d8b <mem_cmp>
c000388e:	85 c0                	test   eax,eax
c0003890:	74 26                	je     c00038b8 <dir_find+0x124>
c0003892:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003899:	bf ff ff ff ff       	mov    edi,0xffffffff
c000389e:	31 d2                	xor    edx,edx
c00038a0:	89 d8                	mov    eax,ebx
c00038a2:	e8 17 fc ff ff       	call   c00034be <dir_next>
c00038a7:	89 c6                	mov    esi,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 84 16 ff ff ff    	je     c00037c7 <dir_find+0x33>
c00038b1:	eb 05                	jmp    c00038b8 <dir_find+0x124>
c00038b3:	be 04 00 00 00       	mov    esi,0x4
c00038b8:	83 c4 1c             	add    esp,0x1c
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	5b                   	pop    ebx
c00038be:	5e                   	pop    esi
c00038bf:	5f                   	pop    edi
c00038c0:	5d                   	pop    ebp
c00038c1:	c3                   	ret    

c00038c2 <follow_path>:
c00038c2:	56                   	push   esi
c00038c3:	53                   	push   ebx
c00038c4:	89 c3                	mov    ebx,eax
c00038c6:	83 ec 14             	sub    esp,0x14
c00038c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038cd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038d5:	80 fa 5c             	cmp    dl,0x5c
c00038d8:	75 07                	jne    c00038e1 <follow_path+0x1f>
c00038da:	40                   	inc    eax
c00038db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038df:	eb ee                	jmp    c00038cf <follow_path+0xd>
c00038e1:	80 fa 2f             	cmp    dl,0x2f
c00038e4:	74 f4                	je     c00038da <follow_path+0x18>
c00038e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038ed:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038f0:	77 3e                	ja     c0003930 <follow_path+0x6e>
c00038f2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038f6:	31 d2                	xor    edx,edx
c00038f8:	89 d8                	mov    eax,ebx
c00038fa:	e8 34 f9 ff ff       	call   c0003233 <dir_sdi>
c00038ff:	eb 4f                	jmp    c0003950 <follow_path+0x8e>
c0003901:	89 d8                	mov    eax,ebx
c0003903:	e8 8c fe ff ff       	call   c0003794 <dir_find>
c0003908:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000390b:	85 c0                	test   eax,eax
c000390d:	75 32                	jne    c0003941 <follow_path+0x7f>
c000390f:	80 e2 04             	and    dl,0x4
c0003912:	75 3c                	jne    c0003950 <follow_path+0x8e>
c0003914:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003918:	74 31                	je     c000394b <follow_path+0x89>
c000391a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000391d:	25 ff 01 00 00       	and    eax,0x1ff
c0003922:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003926:	8a 06                	mov    al,BYTE PTR [esi]
c0003928:	e8 b3 f7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000392d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003930:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003934:	89 d8                	mov    eax,ebx
c0003936:	e8 cb ef ff ff       	call   c0002906 <create_name>
c000393b:	85 c0                	test   eax,eax
c000393d:	74 c2                	je     c0003901 <follow_path+0x3f>
c000393f:	eb 0f                	jmp    c0003950 <follow_path+0x8e>
c0003941:	83 f8 04             	cmp    eax,0x4
c0003944:	75 0a                	jne    c0003950 <follow_path+0x8e>
c0003946:	80 e2 04             	and    dl,0x4
c0003949:	75 05                	jne    c0003950 <follow_path+0x8e>
c000394b:	b8 05 00 00 00       	mov    eax,0x5
c0003950:	83 c4 14             	add    esp,0x14
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	c3                   	ret    

c0003956 <dir_register>:
c0003956:	55                   	push   ebp
c0003957:	57                   	push   edi
c0003958:	56                   	push   esi
c0003959:	be 06 00 00 00       	mov    esi,0x6
c000395e:	53                   	push   ebx
c000395f:	83 ec 2c             	sub    esp,0x2c
c0003962:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003966:	0f 85 65 01 00 00    	jne    c0003ad1 <dir_register+0x17b>
c000396c:	8b 38                	mov    edi,DWORD PTR [eax]
c000396e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003976:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000397d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003982:	74 06                	je     c000398a <dir_register+0x34>
c0003984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003988:	eb ef                	jmp    c0003979 <dir_register+0x23>
c000398a:	89 c3                	mov    ebx,eax
c000398c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003991:	8d 40 20             	lea    eax,[eax+0x20]
c0003994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003998:	89 c2                	mov    edx,eax
c000399a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000399e:	e8 c8 e3 ff ff       	call   c0001d6b <mem_cpy>
c00039a3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039a8:	74 48                	je     c00039f2 <dir_register+0x9c>
c00039aa:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039ae:	bd 01 00 00 00       	mov    ebp,0x1
c00039b3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039b6:	55                   	push   ebp
c00039b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039bf:	e8 dc e6 ff ff       	call   c00020a0 <gen_numname>
c00039c4:	58                   	pop    eax
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 c8 fd ff ff       	call   c0003794 <dir_find>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 c0                	test   eax,eax
c00039d0:	75 10                	jne    c00039e2 <dir_register+0x8c>
c00039d2:	45                   	inc    ebp
c00039d3:	83 fd 64             	cmp    ebp,0x64
c00039d6:	75 db                	jne    c00039b3 <dir_register+0x5d>
c00039d8:	be 07 00 00 00       	mov    esi,0x7
c00039dd:	e9 ef 00 00 00       	jmp    c0003ad1 <dir_register+0x17b>
c00039e2:	83 f8 04             	cmp    eax,0x4
c00039e5:	0f 85 e6 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c00039eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039ef:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039f2:	bd 01 00 00 00       	mov    ebp,0x1
c00039f7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039fc:	74 13                	je     c0003a11 <dir_register+0xbb>
c00039fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a02:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a07:	83 c0 0c             	add    eax,0xc
c0003a0a:	31 d2                	xor    edx,edx
c0003a0c:	f7 f1                	div    ecx
c0003a0e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a11:	89 ea                	mov    edx,ebp
c0003a13:	89 d8                	mov    eax,ebx
c0003a15:	e8 a9 fb ff ff       	call   c00035c3 <dir_alloc>
c0003a1a:	89 c6                	mov    esi,eax
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	0f 85 ad 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a24:	4d                   	dec    ebp
c0003a25:	74 6a                	je     c0003a91 <dir_register+0x13b>
c0003a27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a2a:	89 e8                	mov    eax,ebp
c0003a2c:	c1 e0 05             	shl    eax,0x5
c0003a2f:	29 c2                	sub    edx,eax
c0003a31:	89 d8                	mov    eax,ebx
c0003a33:	e8 fb f7 ff ff       	call   c0003233 <dir_sdi>
c0003a38:	89 c6                	mov    esi,eax
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	0f 85 8f 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a46:	e8 11 e7 ff ff       	call   c000215c <sum_sfn>
c0003a4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a4f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a52:	89 f8                	mov    eax,edi
c0003a54:	e8 0c e8 ff ff       	call   c0002265 <move_window>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	75 72                	jne    c0003ad1 <dir_register+0x17b>
c0003a5f:	83 ec 0c             	sub    esp,0xc
c0003a62:	89 e8                	mov    eax,ebp
c0003a64:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a69:	0f b6 c8             	movzx  ecx,al
c0003a6c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a6f:	52                   	push   edx
c0003a70:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a73:	e8 a4 e5 ff ff       	call   c000201c <put_lfn>
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 39 fa ff ff       	call   c00034be <dir_next>
c0003a85:	83 c4 10             	add    esp,0x10
c0003a88:	89 c6                	mov    esi,eax
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	75 43                	jne    c0003ad1 <dir_register+0x17b>
c0003a8e:	4d                   	dec    ebp
c0003a8f:	75 be                	jne    c0003a4f <dir_register+0xf9>
c0003a91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a94:	89 f8                	mov    eax,edi
c0003a96:	e8 ca e7 ff ff       	call   c0002265 <move_window>
c0003a9b:	89 c6                	mov    esi,eax
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	75 30                	jne    c0003ad1 <dir_register+0x17b>
c0003aa1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa4:	b9 20 00 00 00       	mov    ecx,0x20
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	e8 d0 e2 ff ff       	call   c0001d80 <mem_set>
c0003ab0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ab7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003abc:	e8 aa e2 ff ff       	call   c0001d6b <mem_cpy>
c0003ac1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ac4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ac7:	83 e0 18             	and    eax,0x18
c0003aca:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003acd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ad1:	83 c4 2c             	add    esp,0x2c
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	5b                   	pop    ebx
c0003ad7:	5e                   	pop    esi
c0003ad8:	5f                   	pop    edi
c0003ad9:	5d                   	pop    ebp
c0003ada:	c3                   	ret    

c0003adb <f_mount>:
c0003adb:	53                   	push   ebx
c0003adc:	83 ec 18             	sub    esp,0x18
c0003adf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ae3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003aef:	e8 7a e6 ff ff       	call   c000216e <get_ldnumber>
c0003af4:	89 c2                	mov    edx,eax
c0003af6:	b8 0b 00 00 00       	mov    eax,0xb
c0003afb:	85 d2                	test   edx,edx
c0003afd:	78 39                	js     c0003b38 <f_mount+0x5d>
c0003aff:	8b 04 95 40 12 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdedc0]
c0003b06:	85 c0                	test   eax,eax
c0003b08:	74 03                	je     c0003b0d <f_mount+0x32>
c0003b0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b11:	85 c0                	test   eax,eax
c0003b13:	74 03                	je     c0003b18 <f_mount+0x3d>
c0003b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b1c:	89 04 95 40 12 02 c0 	mov    DWORD PTR [edx*4-0x3ffdedc0],eax
c0003b23:	31 c0                	xor    eax,eax
c0003b25:	84 db                	test   bl,bl
c0003b27:	74 0f                	je     c0003b38 <f_mount+0x5d>
c0003b29:	31 c9                	xor    ecx,ecx
c0003b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b33:	e8 80 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b38:	83 c4 18             	add    esp,0x18
c0003b3b:	5b                   	pop    ebx
c0003b3c:	c3                   	ret    

c0003b3d <f_open>:
c0003b3d:	55                   	push   ebp
c0003b3e:	b8 09 00 00 00       	mov    eax,0x9
c0003b43:	57                   	push   edi
c0003b44:	56                   	push   esi
c0003b45:	53                   	push   ebx
c0003b46:	83 ec 5c             	sub    esp,0x5c
c0003b49:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b4d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b51:	85 db                	test   ebx,ebx
c0003b53:	0f 84 a7 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b59:	89 fe                	mov    esi,edi
c0003b5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b5f:	83 e6 3f             	and    esi,0x3f
c0003b62:	89 f0                	mov    eax,esi
c0003b64:	0f b6 c8             	movzx  ecx,al
c0003b67:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b6b:	e8 48 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b70:	85 c0                	test   eax,eax
c0003b72:	0f 85 82 02 00 00    	jne    c0003dfa <f_open+0x2bd>
c0003b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b7c:	83 ec 0c             	sub    esp,0xc
c0003b7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b83:	68 00 02 00 00       	push   0x200
c0003b88:	e8 ff 1e 00 00       	call   c0005a8c <ff_memalloc>
c0003b8d:	83 c4 10             	add    esp,0x10
c0003b90:	89 c5                	mov    ebp,eax
c0003b92:	b8 11 00 00 00       	mov    eax,0x11
c0003b97:	85 ed                	test   ebp,ebp
c0003b99:	0f 84 61 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ba7:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bae:	e8 0f fd ff ff       	call   c00038c2 <follow_path>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	75 0c                	jne    c0003bc3 <f_open+0x86>
c0003bb7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bbc:	79 05                	jns    c0003bc3 <f_open+0x86>
c0003bbe:	b8 06 00 00 00       	mov    eax,0x6
c0003bc3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bc9:	0f 84 de 00 00 00    	je     c0003cad <f_open+0x170>
c0003bcf:	85 c0                	test   eax,eax
c0003bd1:	74 1e                	je     c0003bf1 <f_open+0xb4>
c0003bd3:	83 f8 04             	cmp    eax,0x4
c0003bd6:	0f 85 06 02 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003bdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003be0:	83 ce 08             	or     esi,0x8
c0003be3:	e8 6e fd ff ff       	call   c0003956 <dir_register>
c0003be8:	85 c0                	test   eax,eax
c0003bea:	74 2f                	je     c0003c1b <f_open+0xde>
c0003bec:	e9 f1 01 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003bf1:	b8 07 00 00 00       	mov    eax,0x7
c0003bf6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bfb:	0f 85 e1 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c01:	b8 08 00 00 00       	mov    eax,0x8
c0003c06:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c0c:	0f 85 d0 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c12:	83 e7 08             	and    edi,0x8
c0003c15:	0f 84 bf 00 00 00    	je     c0003cda <f_open+0x19d>
c0003c1b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c23:	89 ca                	mov    edx,ecx
c0003c25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c29:	8a 00                	mov    al,BYTE PTR [eax]
c0003c2b:	e8 b0 f4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c34:	89 c7                	mov    edi,eax
c0003c36:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c3b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c3e:	e8 25 e1 ff ff       	call   c0001d68 <st_dword>
c0003c43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c51:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c55:	e8 af f4 ff ff       	call   c0003109 <st_clust.isra.1>
c0003c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c5e:	31 d2                	xor    edx,edx
c0003c60:	83 c0 1c             	add    eax,0x1c
c0003c63:	e8 00 e1 ff ff       	call   c0001d68 <st_dword>
c0003c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6c:	85 ff                	test   edi,edi
c0003c6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c72:	74 66                	je     c0003cda <f_open+0x19d>
c0003c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c78:	31 c9                	xor    ecx,ecx
c0003c7a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c7d:	89 fa                	mov    edx,edi
c0003c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c83:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c87:	e8 a9 f7 ff ff       	call   c0003435 <remove_chain>
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	0f 85 4e 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c98:	4f                   	dec    edi
c0003c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9d:	e8 c3 e5 ff ff       	call   c0002265 <move_window>
c0003ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ca6:	85 c0                	test   eax,eax
c0003ca8:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cab:	eb 27                	jmp    c0003cd4 <f_open+0x197>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 2d 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cb5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003cb9:	b8 04 00 00 00       	mov    eax,0x4
c0003cbe:	f6 c2 10             	test   dl,0x10
c0003cc1:	0f 85 1b 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cc7:	83 e7 02             	and    edi,0x2
c0003cca:	74 0e                	je     c0003cda <f_open+0x19d>
c0003ccc:	b8 07 00 00 00       	mov    eax,0x7
c0003cd1:	80 e2 01             	and    dl,0x1
c0003cd4:	0f 85 08 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cda:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ce0:	74 03                	je     c0003ce5 <f_open+0x1a8>
c0003ce2:	83 ce 40             	or     esi,0x40
c0003ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ce9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ced:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cf0:	89 fa                	mov    edx,edi
c0003cf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cf6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cf9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cfc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cfe:	e8 dd f3 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d06:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d09:	e8 3e e0 ff ff       	call   c0001d4c <ld_dword>
c0003d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d15:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d17:	31 d2                	xor    edx,edx
c0003d19:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d1d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d21:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d2c:	89 f0                	mov    eax,esi
c0003d2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d35:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d38:	b9 00 02 00 00       	mov    ecx,0x200
c0003d3d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d44:	e8 37 e0 ff ff       	call   c0001d80 <mem_set>
c0003d49:	83 e6 20             	and    esi,0x20
c0003d4c:	75 07                	jne    c0003d55 <f_open+0x218>
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	e9 8d 00 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003d55:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d58:	85 ff                	test   edi,edi
c0003d5a:	74 f2                	je     c0003d4e <f_open+0x211>
c0003d5c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d63:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d66:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d6a:	c1 e6 09             	shl    esi,0x9
c0003d6d:	39 fe                	cmp    esi,edi
c0003d6f:	73 1c                	jae    c0003d8d <f_open+0x250>
c0003d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d73:	29 f7                	sub    edi,esi
c0003d75:	e8 b7 f3 ff ff       	call   c0003131 <get_fat.isra.2>
c0003d7a:	89 c2                	mov    edx,eax
c0003d7c:	83 f8 01             	cmp    eax,0x1
c0003d7f:	76 10                	jbe    c0003d91 <f_open+0x254>
c0003d81:	83 f8 ff             	cmp    eax,0xffffffff
c0003d84:	75 e7                	jne    c0003d6d <f_open+0x230>
c0003d86:	b8 01 00 00 00       	mov    eax,0x1
c0003d8b:	eb 09                	jmp    c0003d96 <f_open+0x259>
c0003d8d:	31 c0                	xor    eax,eax
c0003d8f:	eb 05                	jmp    c0003d96 <f_open+0x259>
c0003d91:	b8 02 00 00 00       	mov    eax,0x2
c0003d96:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 45                	jne    c0003de2 <f_open+0x2a5>
c0003d9d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003da3:	74 a9                	je     c0003d4e <f_open+0x211>
c0003da5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003da9:	89 f0                	mov    eax,esi
c0003dab:	e8 d5 e1 ff ff       	call   c0001f85 <clst2sect>
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	85 d2                	test   edx,edx
c0003db9:	74 27                	je     c0003de2 <f_open+0x2a5>
c0003dbb:	89 f9                	mov    ecx,edi
c0003dbd:	c1 e9 09             	shr    ecx,0x9
c0003dc0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003dc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dc6:	6a 01                	push   0x1
c0003dc8:	50                   	push   eax
c0003dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dd1:	50                   	push   eax
c0003dd2:	e8 1d df ff ff       	call   c0001cf4 <disk_read>
c0003dd7:	83 c4 10             	add    esp,0x10
c0003dda:	85 c0                	test   eax,eax
c0003ddc:	0f 95 c0             	setne  al
c0003ddf:	0f b6 c0             	movzx  eax,al
c0003de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003de6:	83 ec 0c             	sub    esp,0xc
c0003de9:	55                   	push   ebp
c0003dea:	e8 b5 1c 00 00       	call   c0005aa4 <ff_memfree>
c0003def:	83 c4 10             	add    esp,0x10
c0003df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003df6:	85 c0                	test   eax,eax
c0003df8:	74 06                	je     c0003e00 <f_open+0x2c3>
c0003dfa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e00:	83 c4 5c             	add    esp,0x5c
c0003e03:	5b                   	pop    ebx
c0003e04:	5e                   	pop    esi
c0003e05:	5f                   	pop    edi
c0003e06:	5d                   	pop    ebp
c0003e07:	c3                   	ret    

c0003e08 <f_read>:
c0003e08:	55                   	push   ebp
c0003e09:	57                   	push   edi
c0003e0a:	56                   	push   esi
c0003e0b:	53                   	push   ebx
c0003e0c:	83 ec 2c             	sub    esp,0x2c
c0003e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e1d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e21:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e25:	89 d8                	mov    eax,ebx
c0003e27:	e8 8f e3 ff ff       	call   c00021bb <validate>
c0003e2c:	89 c5                	mov    ebp,eax
c0003e2e:	85 c0                	test   eax,eax
c0003e30:	0f 85 c7 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e36:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e3a:	85 ed                	test   ebp,ebp
c0003e3c:	0f 85 bb 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e42:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e46:	0f 84 ac 01 00 00    	je     c0003ff8 <f_read+0x1f0>
c0003e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e4f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e52:	89 c7                	mov    edi,eax
c0003e54:	39 f0                	cmp    eax,esi
c0003e56:	0f 86 ad 00 00 00    	jbe    c0003f09 <f_read+0x101>
c0003e5c:	89 f7                	mov    edi,esi
c0003e5e:	e9 a6 00 00 00       	jmp    c0003f09 <f_read+0x101>
c0003e63:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e66:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e6c:	0f 85 5b 01 00 00    	jne    c0003fcd <f_read+0x1c5>
c0003e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e76:	89 d1                	mov    ecx,edx
c0003e78:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e7c:	c1 e9 09             	shr    ecx,0x9
c0003e7f:	48                   	dec    eax
c0003e80:	21 c8                	and    eax,ecx
c0003e82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e86:	0f 84 8a 00 00 00    	je     c0003f16 <f_read+0x10e>
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e93:	89 c8                	mov    eax,ecx
c0003e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e99:	e8 e7 e0 ff ff       	call   c0001f85 <clst2sect>
c0003e9e:	85 c0                	test   eax,eax
c0003ea0:	0f 84 88 00 00 00    	je     c0003f2e <f_read+0x126>
c0003ea6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003eb2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003eb8:	0f 86 bd 00 00 00    	jbe    c0003f7b <f_read+0x173>
c0003ebe:	89 fe                	mov    esi,edi
c0003ec0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ec4:	c1 ee 09             	shr    esi,0x9
c0003ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ecb:	01 f2                	add    edx,esi
c0003ecd:	39 c2                	cmp    edx,eax
c0003ecf:	76 06                	jbe    c0003ed7 <f_read+0xcf>
c0003ed1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ed5:	89 c6                	mov    esi,eax
c0003ed7:	56                   	push   esi
c0003ed8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ee4:	50                   	push   eax
c0003ee5:	e8 0a de ff ff       	call   c0001cf4 <disk_read>
c0003eea:	83 c4 10             	add    esp,0x10
c0003eed:	85 c0                	test   eax,eax
c0003eef:	75 50                	jne    c0003f41 <f_read+0x139>
c0003ef1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ef5:	78 60                	js     c0003f57 <f_read+0x14f>
c0003ef7:	c1 e6 09             	shl    esi,0x9
c0003efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003efe:	29 f7                	sub    edi,esi
c0003f00:	01 30                	add    DWORD PTR [eax],esi
c0003f02:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f06:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003f09:	85 ff                	test   edi,edi
c0003f0b:	0f 85 52 ff ff ff    	jne    c0003e63 <f_read+0x5b>
c0003f11:	e9 e7 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f16:	85 d2                	test   edx,edx
c0003f18:	75 05                	jne    c0003f1f <f_read+0x117>
c0003f1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f1d:	eb 0a                	jmp    c0003f29 <f_read+0x121>
c0003f1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f24:	e8 08 f2 ff ff       	call   c0003131 <get_fat.isra.2>
c0003f29:	83 f8 01             	cmp    eax,0x1
c0003f2c:	77 0e                	ja     c0003f3c <f_read+0x134>
c0003f2e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f32:	bd 02 00 00 00       	mov    ebp,0x2
c0003f37:	e9 c1 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f3c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f3f:	75 0e                	jne    c0003f4f <f_read+0x147>
c0003f41:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f45:	bd 01 00 00 00       	mov    ebp,0x1
c0003f4a:	e9 ae 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f52:	e9 35 ff ff ff       	jmp    c0003e8c <f_read+0x84>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f5e:	39 f0                	cmp    eax,esi
c0003f60:	73 95                	jae    c0003ef7 <f_read+0xef>
c0003f62:	c1 e0 09             	shl    eax,0x9
c0003f65:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f71:	e8 f5 dd ff ff       	call   c0001d6b <mem_cpy>
c0003f76:	e9 7c ff ff ff       	jmp    c0003ef7 <f_read+0xef>
c0003f7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f7e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f82:	74 42                	je     c0003fc6 <f_read+0x1be>
c0003f84:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f87:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8b:	79 19                	jns    c0003fa6 <f_read+0x19e>
c0003f8d:	6a 01                	push   0x1
c0003f8f:	50                   	push   eax
c0003f90:	56                   	push   esi
c0003f91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 6f dd ff ff       	call   c0001d0a <disk_write>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	75 9f                	jne    c0003f41 <f_read+0x139>
c0003fa2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fa6:	6a 01                	push   0x1
c0003fa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003fac:	56                   	push   esi
c0003fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fb5:	50                   	push   eax
c0003fb6:	e8 39 dd ff ff       	call   c0001cf4 <disk_read>
c0003fbb:	83 c4 10             	add    esp,0x10
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	0f 85 7b ff ff ff    	jne    c0003f41 <f_read+0x139>
c0003fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd0:	ba 00 02 00 00       	mov    edx,0x200
c0003fd5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fda:	89 fe                	mov    esi,edi
c0003fdc:	29 c2                	sub    edx,eax
c0003fde:	39 d7                	cmp    edi,edx
c0003fe0:	76 02                	jbe    c0003fe4 <f_read+0x1dc>
c0003fe2:	89 d6                	mov    esi,edx
c0003fe4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe8:	89 f1                	mov    ecx,esi
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	e8 78 dd ff ff       	call   c0001d6b <mem_cpy>
c0003ff3:	e9 02 ff ff ff       	jmp    c0003efa <f_read+0xf2>
c0003ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0003ffd:	83 c4 2c             	add    esp,0x2c
c0004000:	89 e8                	mov    eax,ebp
c0004002:	5b                   	pop    ebx
c0004003:	5e                   	pop    esi
c0004004:	5f                   	pop    edi
c0004005:	5d                   	pop    ebp
c0004006:	c3                   	ret    

c0004007 <f_write>:
c0004007:	55                   	push   ebp
c0004008:	57                   	push   edi
c0004009:	56                   	push   esi
c000400a:	53                   	push   ebx
c000400b:	83 ec 2c             	sub    esp,0x2c
c000400e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000401c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004020:	89 d8                	mov    eax,ebx
c0004022:	e8 94 e1 ff ff       	call   c00021bb <validate>
c0004027:	89 c5                	mov    ebp,eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 00 02 00 00    	jne    c0004231 <f_write+0x22a>
c0004031:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004035:	85 ed                	test   ebp,ebp
c0004037:	0f 85 f4 01 00 00    	jne    c0004231 <f_write+0x22a>
c000403d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004041:	0f 84 e5 01 00 00    	je     c000422c <f_write+0x225>
c0004047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000404a:	89 c7                	mov    edi,eax
c000404c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004050:	0f 83 ea 00 00 00    	jae    c0004140 <f_write+0x139>
c0004056:	f7 d0                	not    eax
c0004058:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000405c:	e9 df 00 00 00       	jmp    c0004140 <f_write+0x139>
c0004061:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004064:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000406a:	0f 85 8b 01 00 00    	jne    c00041fb <f_write+0x1f4>
c0004070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004074:	89 d1                	mov    ecx,edx
c0004076:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000407a:	c1 e9 09             	shr    ecx,0x9
c000407d:	48                   	dec    eax
c000407e:	21 c8                	and    eax,ecx
c0004080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004084:	0f 84 c3 00 00 00    	je     c000414d <f_write+0x146>
c000408a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000408e:	0f 88 18 01 00 00    	js     c00041ac <f_write+0x1a5>
c0004094:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004098:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000409b:	89 c8                	mov    eax,ecx
c000409d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a1:	e8 df de ff ff       	call   c0001f85 <clst2sect>
c00040a6:	85 c0                	test   eax,eax
c00040a8:	0f 84 c8 00 00 00    	je     c0004176 <f_write+0x16f>
c00040ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040b6:	01 c7                	add    edi,eax
c00040b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040c0:	0f 86 0d 01 00 00    	jbe    c00041d3 <f_write+0x1cc>
c00040c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ca:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ce:	c1 ee 09             	shr    esi,0x9
c00040d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040d5:	01 f2                	add    edx,esi
c00040d7:	39 c2                	cmp    edx,eax
c00040d9:	76 06                	jbe    c00040e1 <f_write+0xda>
c00040db:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040df:	89 c6                	mov    esi,eax
c00040e1:	56                   	push   esi
c00040e2:	57                   	push   edi
c00040e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040eb:	50                   	push   eax
c00040ec:	e8 19 dc ff ff       	call   c0001d0a <disk_write>
c00040f1:	83 c4 10             	add    esp,0x10
c00040f4:	85 c0                	test   eax,eax
c00040f6:	0f 85 8d 00 00 00    	jne    c0004189 <f_write+0x182>
c00040fc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ff:	29 fa                	sub    edx,edi
c0004101:	39 f2                	cmp    edx,esi
c0004103:	73 18                	jae    c000411d <f_write+0x116>
c0004105:	c1 e2 09             	shl    edx,0x9
c0004108:	8d 43 28             	lea    eax,[ebx+0x28]
c000410b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000410f:	b9 00 02 00 00       	mov    ecx,0x200
c0004114:	e8 52 dc ff ff       	call   c0001d6b <mem_cpy>
c0004119:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000411d:	c1 e6 09             	shl    esi,0x9
c0004120:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004128:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000412c:	01 30                	add    DWORD PTR [eax],esi
c000412e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004131:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004137:	39 f0                	cmp    eax,esi
c0004139:	73 02                	jae    c000413d <f_write+0x136>
c000413b:	89 f0                	mov    eax,esi
c000413d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004140:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004145:	0f 85 16 ff ff ff    	jne    c0004061 <f_write+0x5a>
c000414b:	eb 1b                	jmp    c0004168 <f_write+0x161>
c000414d:	85 d2                	test   edx,edx
c000414f:	75 09                	jne    c000415a <f_write+0x153>
c0004151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004154:	85 c0                	test   eax,eax
c0004156:	75 19                	jne    c0004171 <f_write+0x16a>
c0004158:	eb 03                	jmp    c000415d <f_write+0x156>
c000415a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 97 f1 ff ff       	call   c00032fb <create_chain>
c0004164:	85 c0                	test   eax,eax
c0004166:	75 09                	jne    c0004171 <f_write+0x16a>
c0004168:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000416c:	e9 c0 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004171:	83 f8 01             	cmp    eax,0x1
c0004174:	75 0e                	jne    c0004184 <f_write+0x17d>
c0004176:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000417a:	bd 02 00 00 00       	mov    ebp,0x2
c000417f:	e9 ad 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004184:	83 f8 ff             	cmp    eax,0xffffffff
c0004187:	75 0e                	jne    c0004197 <f_write+0x190>
c0004189:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000418d:	bd 01 00 00 00       	mov    ebp,0x1
c0004192:	e9 9a 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004197:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000419a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419e:	0f 85 e6 fe ff ff    	jne    c000408a <f_write+0x83>
c00041a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a7:	e9 de fe ff ff       	jmp    c000408a <f_write+0x83>
c00041ac:	6a 01                	push   0x1
c00041ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041b4:	50                   	push   eax
c00041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041bd:	50                   	push   eax
c00041be:	e8 47 db ff ff       	call   c0001d0a <disk_write>
c00041c3:	83 c4 10             	add    esp,0x10
c00041c6:	85 c0                	test   eax,eax
c00041c8:	75 bf                	jne    c0004189 <f_write+0x182>
c00041ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ce:	e9 c1 fe ff ff       	jmp    c0004094 <f_write+0x8d>
c00041d3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041d6:	74 20                	je     c00041f8 <f_write+0x1f1>
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041de:	76 18                	jbe    c00041f8 <f_write+0x1f1>
c00041e0:	6a 01                	push   0x1
c00041e2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041e5:	57                   	push   edi
c00041e6:	50                   	push   eax
c00041e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041eb:	50                   	push   eax
c00041ec:	e8 03 db ff ff       	call   c0001cf4 <disk_read>
c00041f1:	83 c4 10             	add    esp,0x10
c00041f4:	85 c0                	test   eax,eax
c00041f6:	75 91                	jne    c0004189 <f_write+0x182>
c00041f8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041fe:	ba 00 02 00 00       	mov    edx,0x200
c0004203:	25 ff 01 00 00       	and    eax,0x1ff
c0004208:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000420c:	29 c2                	sub    edx,eax
c000420e:	39 d6                	cmp    esi,edx
c0004210:	76 02                	jbe    c0004214 <f_write+0x20d>
c0004212:	89 d6                	mov    esi,edx
c0004214:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004218:	89 f1                	mov    ecx,esi
c000421a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000421e:	e8 48 db ff ff       	call   c0001d6b <mem_cpy>
c0004223:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004227:	e9 f4 fe ff ff       	jmp    c0004120 <f_write+0x119>
c000422c:	bd 07 00 00 00       	mov    ebp,0x7
c0004231:	83 c4 2c             	add    esp,0x2c
c0004234:	89 e8                	mov    eax,ebp
c0004236:	5b                   	pop    ebx
c0004237:	5e                   	pop    esi
c0004238:	5f                   	pop    edi
c0004239:	5d                   	pop    ebp
c000423a:	c3                   	ret    

c000423b <f_sync>:
c000423b:	56                   	push   esi
c000423c:	53                   	push   ebx
c000423d:	83 ec 14             	sub    esp,0x14
c0004240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 6c df ff ff       	call   c00021bb <validate>
c000424f:	85 c0                	test   eax,eax
c0004251:	0f 85 93 00 00 00    	jne    c00042ea <f_sync+0xaf>
c0004257:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000425a:	f6 c2 40             	test   dl,0x40
c000425d:	0f 84 87 00 00 00    	je     c00042ea <f_sync+0xaf>
c0004263:	84 d2                	test   dl,dl
c0004265:	79 29                	jns    c0004290 <f_sync+0x55>
c0004267:	6a 01                	push   0x1
c0004269:	8d 43 28             	lea    eax,[ebx+0x28]
c000426c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426f:	50                   	push   eax
c0004270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004278:	50                   	push   eax
c0004279:	e8 8c da ff ff       	call   c0001d0a <disk_write>
c000427e:	83 c4 10             	add    esp,0x10
c0004281:	89 c2                	mov    edx,eax
c0004283:	b8 01 00 00 00       	mov    eax,0x1
c0004288:	85 d2                	test   edx,edx
c000428a:	75 5e                	jne    c00042ea <f_sync+0xaf>
c000428c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004290:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004297:	e8 c9 df ff ff       	call   c0002265 <move_window>
c000429c:	85 c0                	test   eax,eax
c000429e:	75 4a                	jne    c00042ea <f_sync+0xaf>
c00042a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042a3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042a7:	89 f2                	mov    edx,esi
c00042a9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042ae:	e8 56 ee ff ff       	call   c0003109 <st_clust.isra.1>
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042b9:	e8 aa da ff ff       	call   c0001d68 <st_dword>
c00042be:	8d 46 16             	lea    eax,[esi+0x16]
c00042c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042c6:	e8 9d da ff ff       	call   c0001d68 <st_dword>
c00042cb:	8d 46 12             	lea    eax,[esi+0x12]
c00042ce:	31 d2                	xor    edx,edx
c00042d0:	e8 8f da ff ff       	call   c0001d64 <st_word>
c00042d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042e1:	e8 bf e9 ff ff       	call   c0002ca5 <sync_fs>
c00042e6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ea:	83 c4 14             	add    esp,0x14
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	c3                   	ret    

c00042f0 <f_close>:
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 24             	sub    esp,0x24
c00042f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042f8:	53                   	push   ebx
c00042f9:	e8 3d ff ff ff       	call   c000423b <f_sync>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	75 15                	jne    c000431a <f_close+0x2a>
c0004305:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004309:	89 d8                	mov    eax,ebx
c000430b:	e8 ab de ff ff       	call   c00021bb <validate>
c0004310:	85 c0                	test   eax,eax
c0004312:	75 06                	jne    c000431a <f_close+0x2a>
c0004314:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000431a:	83 c4 18             	add    esp,0x18
c000431d:	5b                   	pop    ebx
c000431e:	c3                   	ret    

c000431f <f_lseek>:
c000431f:	55                   	push   ebp
c0004320:	57                   	push   edi
c0004321:	56                   	push   esi
c0004322:	53                   	push   ebx
c0004323:	83 ec 2c             	sub    esp,0x2c
c0004326:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000432a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000432e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004332:	89 d8                	mov    eax,ebx
c0004334:	e8 82 de ff ff       	call   c00021bb <validate>
c0004339:	89 c5                	mov    ebp,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 79 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c0004343:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004347:	85 ed                	test   ebp,ebp
c0004349:	0f 85 6d 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	39 f0                	cmp    eax,esi
c0004354:	73 08                	jae    c000435e <f_lseek+0x3f>
c0004356:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435a:	75 02                	jne    c000435e <f_lseek+0x3f>
c000435c:	89 c6                	mov    esi,eax
c000435e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004361:	85 f6                	test   esi,esi
c0004363:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000436a:	75 07                	jne    c0004373 <f_lseek+0x54>
c000436c:	31 f6                	xor    esi,esi
c000436e:	e9 e2 00 00 00       	jmp    c0004455 <f_lseek+0x136>
c0004373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004377:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000437b:	c1 e7 09             	shl    edi,0x9
c000437e:	85 c9                	test   ecx,ecx
c0004380:	74 28                	je     c00043aa <f_lseek+0x8b>
c0004382:	49                   	dec    ecx
c0004383:	31 d2                	xor    edx,edx
c0004385:	8d 46 ff             	lea    eax,[esi-0x1]
c0004388:	f7 f7                	div    edi
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004390:	89 c8                	mov    eax,ecx
c0004392:	f7 f7                	div    edi
c0004394:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004398:	72 10                	jb     c00043aa <f_lseek+0x8b>
c000439a:	89 f8                	mov    eax,edi
c000439c:	f7 d8                	neg    eax
c000439e:	21 c1                	and    ecx,eax
c00043a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043a3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043a6:	29 ce                	sub    esi,ecx
c00043a8:	eb 3c                	jmp    c00043e6 <f_lseek+0xc7>
c00043aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043ad:	85 c0                	test   eax,eax
c00043af:	75 32                	jne    c00043e3 <f_lseek+0xc4>
c00043b1:	31 d2                	xor    edx,edx
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 41 ef ff ff       	call   c00032fb <create_chain>
c00043ba:	83 f8 01             	cmp    eax,0x1
c00043bd:	75 0e                	jne    c00043cd <f_lseek+0xae>
c00043bf:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c3:	bd 02 00 00 00       	mov    ebp,0x2
c00043c8:	e9 ef 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043cd:	83 f8 ff             	cmp    eax,0xffffffff
c00043d0:	75 0e                	jne    c00043e0 <f_lseek+0xc1>
c00043d2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d6:	bd 01 00 00 00       	mov    ebp,0x1
c00043db:	e9 dc 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 82                	je     c000436c <f_lseek+0x4d>
c00043ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ed:	39 fe                	cmp    esi,edi
c00043ef:	76 3d                	jbe    c000442e <f_lseek+0x10f>
c00043f1:	01 fa                	add    edx,edi
c00043f3:	29 fe                	sub    esi,edi
c00043f5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043fc:	89 c2                	mov    edx,eax
c00043fe:	74 0d                	je     c000440d <f_lseek+0xee>
c0004400:	89 d8                	mov    eax,ebx
c0004402:	e8 f4 ee ff ff       	call   c00032fb <create_chain>
c0004407:	85 c0                	test   eax,eax
c0004409:	75 09                	jne    c0004414 <f_lseek+0xf5>
c000440b:	eb 1f                	jmp    c000442c <f_lseek+0x10d>
c000440d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000440f:	e8 1d ed ff ff       	call   c0003131 <get_fat.isra.2>
c0004414:	83 f8 ff             	cmp    eax,0xffffffff
c0004417:	74 b9                	je     c00043d2 <f_lseek+0xb3>
c0004419:	83 f8 01             	cmp    eax,0x1
c000441c:	76 a1                	jbe    c00043bf <f_lseek+0xa0>
c000441e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004422:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004425:	76 98                	jbe    c00043bf <f_lseek+0xa0>
c0004427:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000442a:	eb be                	jmp    c00043ea <f_lseek+0xcb>
c000442c:	31 f6                	xor    esi,esi
c000442e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004431:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004437:	0f 84 2f ff ff ff    	je     c000436c <f_lseek+0x4d>
c000443d:	89 c2                	mov    edx,eax
c000443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004443:	e8 3d db ff ff       	call   c0001f85 <clst2sect>
c0004448:	85 c0                	test   eax,eax
c000444a:	0f 84 6f ff ff ff    	je     c00043bf <f_lseek+0xa0>
c0004450:	c1 ee 09             	shr    esi,0x9
c0004453:	01 c6                	add    esi,eax
c0004455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004458:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000445b:	76 07                	jbe    c0004464 <f_lseek+0x145>
c000445d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004460:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004464:	a9 ff 01 00 00       	test   eax,0x1ff
c0004469:	74 51                	je     c00044bc <f_lseek+0x19d>
c000446b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000446e:	39 f0                	cmp    eax,esi
c0004470:	74 4a                	je     c00044bc <f_lseek+0x19d>
c0004472:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004475:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004479:	79 21                	jns    c000449c <f_lseek+0x17d>
c000447b:	6a 01                	push   0x1
c000447d:	50                   	push   eax
c000447e:	57                   	push   edi
c000447f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004487:	50                   	push   eax
c0004488:	e8 7d d8 ff ff       	call   c0001d0a <disk_write>
c000448d:	83 c4 10             	add    esp,0x10
c0004490:	85 c0                	test   eax,eax
c0004492:	0f 85 3a ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c0004498:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000449c:	6a 01                	push   0x1
c000449e:	56                   	push   esi
c000449f:	57                   	push   edi
c00044a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a8:	50                   	push   eax
c00044a9:	e8 46 d8 ff ff       	call   c0001cf4 <disk_read>
c00044ae:	83 c4 10             	add    esp,0x10
c00044b1:	85 c0                	test   eax,eax
c00044b3:	0f 85 19 ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c00044b9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044bc:	83 c4 2c             	add    esp,0x2c
c00044bf:	89 e8                	mov    eax,ebp
c00044c1:	5b                   	pop    ebx
c00044c2:	5e                   	pop    esi
c00044c3:	5f                   	pop    edi
c00044c4:	5d                   	pop    ebp
c00044c5:	c3                   	ret    

c00044c6 <f_opendir>:
c00044c6:	56                   	push   esi
c00044c7:	b8 09 00 00 00       	mov    eax,0x9
c00044cc:	53                   	push   ebx
c00044cd:	83 ec 24             	sub    esp,0x24
c00044d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044d4:	85 db                	test   ebx,ebx
c00044d6:	0f 84 af 00 00 00    	je     c000458b <f_opendir+0xc5>
c00044dc:	31 c9                	xor    ecx,ecx
c00044de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044e2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044e6:	e8 cd de ff ff       	call   c00023b8 <mount_volume>
c00044eb:	85 c0                	test   eax,eax
c00044ed:	0f 85 92 00 00 00    	jne    c0004585 <f_opendir+0xbf>
c00044f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f7:	83 ec 0c             	sub    esp,0xc
c00044fa:	89 03                	mov    DWORD PTR [ebx],eax
c00044fc:	68 00 02 00 00       	push   0x200
c0004501:	e8 86 15 00 00       	call   c0005a8c <ff_memalloc>
c0004506:	83 c4 10             	add    esp,0x10
c0004509:	89 c6                	mov    esi,eax
c000450b:	b8 11 00 00 00       	mov    eax,0x11
c0004510:	85 f6                	test   esi,esi
c0004512:	74 77                	je     c000458b <f_opendir+0xc5>
c0004514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004518:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000451c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000451f:	89 d8                	mov    eax,ebx
c0004521:	e8 9c f3 ff ff       	call   c00038c2 <follow_path>
c0004526:	85 c0                	test   eax,eax
c0004528:	75 37                	jne    c0004561 <f_opendir+0x9b>
c000452a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000452e:	78 1c                	js     c000454c <f_opendir+0x86>
c0004530:	b8 05 00 00 00       	mov    eax,0x5
c0004535:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004539:	74 26                	je     c0004561 <f_opendir+0x9b>
c000453b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000453e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004542:	8a 00                	mov    al,BYTE PTR [eax]
c0004544:	e8 97 eb ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004549:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000454c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004550:	31 d2                	xor    edx,edx
c0004552:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004556:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 d2 ec ff ff       	call   c0003233 <dir_sdi>
c0004561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004565:	83 ec 0c             	sub    esp,0xc
c0004568:	56                   	push   esi
c0004569:	e8 36 15 00 00       	call   c0005aa4 <ff_memfree>
c000456e:	83 c4 10             	add    esp,0x10
c0004571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004575:	83 f8 04             	cmp    eax,0x4
c0004578:	74 06                	je     c0004580 <f_opendir+0xba>
c000457a:	85 c0                	test   eax,eax
c000457c:	74 0d                	je     c000458b <f_opendir+0xc5>
c000457e:	eb 05                	jmp    c0004585 <f_opendir+0xbf>
c0004580:	b8 05 00 00 00       	mov    eax,0x5
c0004585:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458b:	83 c4 24             	add    esp,0x24
c000458e:	5b                   	pop    ebx
c000458f:	5e                   	pop    esi
c0004590:	c3                   	ret    

c0004591 <f_closedir>:
c0004591:	53                   	push   ebx
c0004592:	83 ec 18             	sub    esp,0x18
c0004595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000459d:	89 d8                	mov    eax,ebx
c000459f:	e8 17 dc ff ff       	call   c00021bb <validate>
c00045a4:	85 c0                	test   eax,eax
c00045a6:	75 06                	jne    c00045ae <f_closedir+0x1d>
c00045a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045ae:	83 c4 18             	add    esp,0x18
c00045b1:	5b                   	pop    ebx
c00045b2:	c3                   	ret    

c00045b3 <f_readdir>:
c00045b3:	57                   	push   edi
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	83 ec 20             	sub    esp,0x20
c00045b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	89 d8                	mov    eax,ebx
c00045c7:	e8 ef db ff ff       	call   c00021bb <validate>
c00045cc:	85 c0                	test   eax,eax
c00045ce:	75 6e                	jne    c000463e <f_readdir+0x8b>
c00045d0:	85 ff                	test   edi,edi
c00045d2:	75 0b                	jne    c00045df <f_readdir+0x2c>
c00045d4:	31 d2                	xor    edx,edx
c00045d6:	89 d8                	mov    eax,ebx
c00045d8:	e8 56 ec ff ff       	call   c0003233 <dir_sdi>
c00045dd:	eb 5f                	jmp    c000463e <f_readdir+0x8b>
c00045df:	83 ec 0c             	sub    esp,0xc
c00045e2:	68 00 02 00 00       	push   0x200
c00045e7:	e8 a0 14 00 00       	call   c0005a8c <ff_memalloc>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	89 c6                	mov    esi,eax
c00045f1:	b8 11 00 00 00       	mov    eax,0x11
c00045f6:	85 f6                	test   esi,esi
c00045f8:	74 44                	je     c000463e <f_readdir+0x8b>
c00045fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fe:	31 d2                	xor    edx,edx
c0004600:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 1a f0 ff ff       	call   c0003624 <dir_read>
c000460a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000460f:	75 19                	jne    c000462a <f_readdir+0x77>
c0004611:	89 fa                	mov    edx,edi
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 e2 e8 ff ff       	call   c0002efc <get_fileinfo>
c000461a:	31 d2                	xor    edx,edx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 9b ee ff ff       	call   c00034be <dir_next>
c0004623:	83 f8 04             	cmp    eax,0x4
c0004626:	75 02                	jne    c000462a <f_readdir+0x77>
c0004628:	31 c0                	xor    eax,eax
c000462a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	56                   	push   esi
c0004632:	e8 6d 14 00 00       	call   c0005aa4 <ff_memfree>
c0004637:	83 c4 10             	add    esp,0x10
c000463a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000463e:	83 c4 20             	add    esp,0x20
c0004641:	5b                   	pop    ebx
c0004642:	5e                   	pop    esi
c0004643:	5f                   	pop    edi
c0004644:	c3                   	ret    

c0004645 <f_stat>:
c0004645:	57                   	push   edi
c0004646:	31 c9                	xor    ecx,ecx
c0004648:	56                   	push   esi
c0004649:	53                   	push   ebx
c000464a:	83 ec 30             	sub    esp,0x30
c000464d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004651:	89 e2                	mov    edx,esp
c0004653:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004657:	e8 5c dd ff ff       	call   c00023b8 <mount_volume>
c000465c:	89 c3                	mov    ebx,eax
c000465e:	85 c0                	test   eax,eax
c0004660:	75 59                	jne    c00046bb <f_stat+0x76>
c0004662:	83 ec 0c             	sub    esp,0xc
c0004665:	bb 11 00 00 00       	mov    ebx,0x11
c000466a:	68 00 02 00 00       	push   0x200
c000466f:	e8 18 14 00 00       	call   c0005a8c <ff_memalloc>
c0004674:	83 c4 10             	add    esp,0x10
c0004677:	89 c6                	mov    esi,eax
c0004679:	85 c0                	test   eax,eax
c000467b:	74 3e                	je     c00046bb <f_stat+0x76>
c000467d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004680:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004684:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004687:	89 e0                	mov    eax,esp
c0004689:	e8 34 f2 ff ff       	call   c00038c2 <follow_path>
c000468e:	89 c3                	mov    ebx,eax
c0004690:	85 c0                	test   eax,eax
c0004692:	75 1b                	jne    c00046af <f_stat+0x6a>
c0004694:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004699:	78 0f                	js     c00046aa <f_stat+0x65>
c000469b:	85 ff                	test   edi,edi
c000469d:	74 10                	je     c00046af <f_stat+0x6a>
c000469f:	89 fa                	mov    edx,edi
c00046a1:	89 e0                	mov    eax,esp
c00046a3:	e8 54 e8 ff ff       	call   c0002efc <get_fileinfo>
c00046a8:	eb 05                	jmp    c00046af <f_stat+0x6a>
c00046aa:	bb 06 00 00 00       	mov    ebx,0x6
c00046af:	83 ec 0c             	sub    esp,0xc
c00046b2:	56                   	push   esi
c00046b3:	e8 ec 13 00 00       	call   c0005aa4 <ff_memfree>
c00046b8:	83 c4 10             	add    esp,0x10
c00046bb:	83 c4 30             	add    esp,0x30
c00046be:	89 d8                	mov    eax,ebx
c00046c0:	5b                   	pop    ebx
c00046c1:	5e                   	pop    esi
c00046c2:	5f                   	pop    edi
c00046c3:	c3                   	ret    

c00046c4 <f_getfree>:
c00046c4:	55                   	push   ebp
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	57                   	push   edi
c00046c8:	56                   	push   esi
c00046c9:	53                   	push   ebx
c00046ca:	83 ec 2c             	sub    esp,0x2c
c00046cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046d5:	e8 de dc ff ff       	call   c00023b8 <mount_volume>
c00046da:	89 c7                	mov    edi,eax
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 d8 00 00 00    	jne    c00047bc <f_getfree+0xf8>
c00046e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ec:	89 30                	mov    DWORD PTR [eax],esi
c00046ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046f1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046f4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046f7:	39 d0                	cmp    eax,edx
c00046f9:	77 0b                	ja     c0004706 <f_getfree+0x42>
c00046fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ff:	89 01                	mov    DWORD PTR [ecx],eax
c0004701:	e9 b6 00 00 00       	jmp    c00047bc <f_getfree+0xf8>
c0004706:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004709:	75 29                	jne    c0004734 <f_getfree+0x70>
c000470b:	bd 02 00 00 00       	mov    ebp,0x2
c0004710:	31 db                	xor    ebx,ebx
c0004712:	89 ea                	mov    edx,ebp
c0004714:	89 f0                	mov    eax,esi
c0004716:	e8 16 ea ff ff       	call   c0003131 <get_fat.isra.2>
c000471b:	83 f8 ff             	cmp    eax,0xffffffff
c000471e:	74 7b                	je     c000479b <f_getfree+0xd7>
c0004720:	83 f8 01             	cmp    eax,0x1
c0004723:	74 7d                	je     c00047a2 <f_getfree+0xde>
c0004725:	83 d3 00             	adc    ebx,0x0
c0004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472c:	45                   	inc    ebp
c000472d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004730:	77 e0                	ja     c0004712 <f_getfree+0x4e>
c0004732:	eb 77                	jmp    c00047ab <f_getfree+0xe7>
c0004734:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004737:	31 db                	xor    ebx,ebx
c0004739:	31 f6                	xor    esi,esi
c000473b:	85 f6                	test   esi,esi
c000473d:	75 18                	jne    c0004757 <f_getfree+0x93>
c000473f:	8d 42 01             	lea    eax,[edx+0x1]
c0004742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	e8 16 db ff ff       	call   c0002265 <move_window>
c000474f:	85 c0                	test   eax,eax
c0004751:	75 56                	jne    c00047a9 <f_getfree+0xe5>
c0004753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000475b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000475f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004763:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004766:	75 11                	jne    c0004779 <f_getfree+0xb5>
c0004768:	e8 d2 d5 ff ff       	call   c0001d3f <ld_word>
c000476d:	66 83 f8 01          	cmp    ax,0x1
c0004771:	83 d3 00             	adc    ebx,0x0
c0004774:	83 c6 02             	add    esi,0x2
c0004777:	eb 13                	jmp    c000478c <f_getfree+0xc8>
c0004779:	e8 ce d5 ff ff       	call   c0001d4c <ld_dword>
c000477e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004783:	83 f8 01             	cmp    eax,0x1
c0004786:	83 d3 00             	adc    ebx,0x0
c0004789:	83 c6 04             	add    esi,0x4
c000478c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004796:	4d                   	dec    ebp
c0004797:	75 a2                	jne    c000473b <f_getfree+0x77>
c0004799:	eb 10                	jmp    c00047ab <f_getfree+0xe7>
c000479b:	bf 01 00 00 00       	mov    edi,0x1
c00047a0:	eb 09                	jmp    c00047ab <f_getfree+0xe7>
c00047a2:	bf 02 00 00 00       	mov    edi,0x2
c00047a7:	eb 02                	jmp    c00047ab <f_getfree+0xe7>
c00047a9:	89 c7                	mov    edi,eax
c00047ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047af:	89 18                	mov    DWORD PTR [eax],ebx
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047b8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047bc:	83 c4 2c             	add    esp,0x2c
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	5b                   	pop    ebx
c00047c2:	5e                   	pop    esi
c00047c3:	5f                   	pop    edi
c00047c4:	5d                   	pop    ebp
c00047c5:	c3                   	ret    

c00047c6 <f_truncate>:
c00047c6:	56                   	push   esi
c00047c7:	53                   	push   ebx
c00047c8:	83 ec 14             	sub    esp,0x14
c00047cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d3:	89 d8                	mov    eax,ebx
c00047d5:	e8 e1 d9 ff ff       	call   c00021bb <validate>
c00047da:	89 c6                	mov    esi,eax
c00047dc:	85 c0                	test   eax,eax
c00047de:	0f 85 be 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047e4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047e8:	85 f6                	test   esi,esi
c00047ea:	0f 85 b2 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047f0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047f4:	0f 84 a3 00 00 00    	je     c000489d <f_truncate+0xd7>
c00047fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004800:	0f 83 9c 00 00 00    	jae    c00048a2 <f_truncate+0xdc>
c0004806:	85 c0                	test   eax,eax
c0004808:	75 15                	jne    c000481f <f_truncate+0x59>
c000480a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000480d:	31 c9                	xor    ecx,ecx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 1f ec ff ff       	call   c0003435 <remove_chain>
c0004816:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000481d:	eb 35                	jmp    c0004854 <f_truncate+0x8e>
c000481f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004824:	e8 08 e9 ff ff       	call   c0003131 <get_fat.isra.2>
c0004829:	89 c2                	mov    edx,eax
c000482b:	b8 01 00 00 00       	mov    eax,0x1
c0004830:	83 fa ff             	cmp    edx,0xffffffff
c0004833:	74 1f                	je     c0004854 <f_truncate+0x8e>
c0004835:	b8 02 00 00 00       	mov    eax,0x2
c000483a:	83 fa 01             	cmp    edx,0x1
c000483d:	74 15                	je     c0004854 <f_truncate+0x8e>
c000483f:	31 c0                	xor    eax,eax
c0004841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004845:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004848:	76 0a                	jbe    c0004854 <f_truncate+0x8e>
c000484a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000484d:	89 d8                	mov    eax,ebx
c000484f:	e8 e1 eb ff ff       	call   c0003435 <remove_chain>
c0004854:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004857:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000485a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000485d:	83 ca 40             	or     edx,0x40
c0004860:	85 c0                	test   eax,eax
c0004862:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004865:	75 2f                	jne    c0004896 <f_truncate+0xd0>
c0004867:	84 d2                	test   dl,dl
c0004869:	79 37                	jns    c00048a2 <f_truncate+0xdc>
c000486b:	6a 01                	push   0x1
c000486d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004870:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004873:	50                   	push   eax
c0004874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004878:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000487c:	50                   	push   eax
c000487d:	e8 88 d4 ff ff       	call   c0001d0a <disk_write>
c0004882:	83 c4 10             	add    esp,0x10
c0004885:	85 c0                	test   eax,eax
c0004887:	75 08                	jne    c0004891 <f_truncate+0xcb>
c0004889:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000488d:	31 f6                	xor    esi,esi
c000488f:	eb 11                	jmp    c00048a2 <f_truncate+0xdc>
c0004891:	b8 01 00 00 00       	mov    eax,0x1
c0004896:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004899:	89 c6                	mov    esi,eax
c000489b:	eb 05                	jmp    c00048a2 <f_truncate+0xdc>
c000489d:	be 07 00 00 00       	mov    esi,0x7
c00048a2:	89 f0                	mov    eax,esi
c00048a4:	83 c4 14             	add    esp,0x14
c00048a7:	5b                   	pop    ebx
c00048a8:	5e                   	pop    esi
c00048a9:	c3                   	ret    

c00048aa <f_unlink>:
c00048aa:	55                   	push   ebp
c00048ab:	b9 02 00 00 00       	mov    ecx,0x2
c00048b0:	57                   	push   edi
c00048b1:	56                   	push   esi
c00048b2:	53                   	push   ebx
c00048b3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048c4:	e8 ef da ff ff       	call   c00023b8 <mount_volume>
c00048c9:	85 c0                	test   eax,eax
c00048cb:	0f 85 f0 00 00 00    	jne    c00049c1 <f_unlink+0x117>
c00048d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048dc:	68 00 02 00 00       	push   0x200
c00048e1:	e8 a6 11 00 00       	call   c0005a8c <ff_memalloc>
c00048e6:	83 c4 10             	add    esp,0x10
c00048e9:	89 c3                	mov    ebx,eax
c00048eb:	b8 11 00 00 00       	mov    eax,0x11
c00048f0:	85 db                	test   ebx,ebx
c00048f2:	0f 84 c9 00 00 00    	je     c00049c1 <f_unlink+0x117>
c00048f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004903:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004906:	8d 44 24 20          	lea    eax,[esp+0x20]
c000490a:	e8 b3 ef ff ff       	call   c00038c2 <follow_path>
c000490f:	85 c0                	test   eax,eax
c0004911:	0f 85 96 00 00 00    	jne    c00049ad <f_unlink+0x103>
c0004917:	b8 06 00 00 00       	mov    eax,0x6
c000491c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004921:	0f 88 86 00 00 00    	js     c00049ad <f_unlink+0x103>
c0004927:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000492c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004932:	74 07                	je     c000493b <f_unlink+0x91>
c0004934:	b8 07 00 00 00       	mov    eax,0x7
c0004939:	eb 72                	jmp    c00049ad <f_unlink+0x103>
c000493b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000493f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004943:	8a 07                	mov    al,BYTE PTR [edi]
c0004945:	e8 96 e7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000494a:	83 e5 10             	and    ebp,0x10
c000494d:	89 c6                	mov    esi,eax
c000494f:	75 0f                	jne    c0004960 <f_unlink+0xb6>
c0004951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004955:	e8 e7 ed ff ff       	call   c0003741 <dir_remove>
c000495a:	85 c0                	test   eax,eax
c000495c:	74 2f                	je     c000498d <f_unlink+0xe3>
c000495e:	eb 4d                	jmp    c00049ad <f_unlink+0x103>
c0004960:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000496a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496e:	e8 c0 e8 ff ff       	call   c0003233 <dir_sdi>
c0004973:	85 c0                	test   eax,eax
c0004975:	75 36                	jne    c00049ad <f_unlink+0x103>
c0004977:	31 d2                	xor    edx,edx
c0004979:	8d 44 24 50          	lea    eax,[esp+0x50]
c000497d:	e8 a2 ec ff ff       	call   c0003624 <dir_read>
c0004982:	85 c0                	test   eax,eax
c0004984:	74 ae                	je     c0004934 <f_unlink+0x8a>
c0004986:	83 f8 04             	cmp    eax,0x4
c0004989:	75 22                	jne    c00049ad <f_unlink+0x103>
c000498b:	eb c4                	jmp    c0004951 <f_unlink+0xa7>
c000498d:	85 f6                	test   esi,esi
c000498f:	75 0b                	jne    c000499c <f_unlink+0xf2>
c0004991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004995:	e8 0b e3 ff ff       	call   c0002ca5 <sync_fs>
c000499a:	eb 11                	jmp    c00049ad <f_unlink+0x103>
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	89 f2                	mov    edx,esi
c00049a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049a4:	e8 8c ea ff ff       	call   c0003435 <remove_chain>
c00049a9:	85 c0                	test   eax,eax
c00049ab:	74 e4                	je     c0004991 <f_unlink+0xe7>
c00049ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b1:	83 ec 0c             	sub    esp,0xc
c00049b4:	53                   	push   ebx
c00049b5:	e8 ea 10 00 00       	call   c0005aa4 <ff_memfree>
c00049ba:	83 c4 10             	add    esp,0x10
c00049bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <f_mkdir>:
c00049cc:	57                   	push   edi
c00049cd:	b9 02 00 00 00       	mov    ecx,0x2
c00049d2:	56                   	push   esi
c00049d3:	53                   	push   ebx
c00049d4:	83 ec 50             	sub    esp,0x50
c00049d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049df:	e8 d4 d9 ff ff       	call   c00023b8 <mount_volume>
c00049e4:	89 c3                	mov    ebx,eax
c00049e6:	85 c0                	test   eax,eax
c00049e8:	0f 85 70 01 00 00    	jne    c0004b5e <f_mkdir+0x192>
c00049ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f2:	bb 11 00 00 00       	mov    ebx,0x11
c00049f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049fb:	83 ec 0c             	sub    esp,0xc
c00049fe:	68 00 02 00 00       	push   0x200
c0004a03:	e8 84 10 00 00       	call   c0005a8c <ff_memalloc>
c0004a08:	83 c4 10             	add    esp,0x10
c0004a0b:	89 c7                	mov    edi,eax
c0004a0d:	85 c0                	test   eax,eax
c0004a0f:	0f 84 49 01 00 00    	je     c0004b5e <f_mkdir+0x192>
c0004a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a24:	e8 99 ee ff ff       	call   c00038c2 <follow_path>
c0004a29:	89 c3                	mov    ebx,eax
c0004a2b:	85 c0                	test   eax,eax
c0004a2d:	74 3e                	je     c0004a6d <f_mkdir+0xa1>
c0004a2f:	83 f8 04             	cmp    eax,0x4
c0004a32:	75 3e                	jne    c0004a72 <f_mkdir+0xa6>
c0004a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a42:	e8 b4 e8 ff ff       	call   c00032fb <create_chain>
c0004a47:	89 c6                	mov    esi,eax
c0004a49:	85 c0                	test   eax,eax
c0004a4b:	74 0c                	je     c0004a59 <f_mkdir+0x8d>
c0004a4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a52:	83 f8 01             	cmp    eax,0x1
c0004a55:	74 07                	je     c0004a5e <f_mkdir+0x92>
c0004a57:	eb 2a                	jmp    c0004a83 <f_mkdir+0xb7>
c0004a59:	bb 07 00 00 00       	mov    ebx,0x7
c0004a5e:	31 c9                	xor    ecx,ecx
c0004a60:	89 f2                	mov    edx,esi
c0004a62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a66:	e8 ca e9 ff ff       	call   c0003435 <remove_chain>
c0004a6b:	eb 05                	jmp    c0004a72 <f_mkdir+0xa6>
c0004a6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a72:	83 ec 0c             	sub    esp,0xc
c0004a75:	57                   	push   edi
c0004a76:	e8 29 10 00 00       	call   c0005aa4 <ff_memfree>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	e9 db 00 00 00       	jmp    c0004b5e <f_mkdir+0x192>
c0004a83:	bb 01 00 00 00       	mov    ebx,0x1
c0004a88:	83 f8 ff             	cmp    eax,0xffffffff
c0004a8b:	74 d1                	je     c0004a5e <f_mkdir+0x92>
c0004a8d:	89 f2                	mov    edx,esi
c0004a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a93:	e8 73 dd ff ff       	call   c000280b <dir_clear>
c0004a98:	89 c3                	mov    ebx,eax
c0004a9a:	85 c0                	test   eax,eax
c0004a9c:	75 c0                	jne    c0004a5e <f_mkdir+0x92>
c0004a9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa7:	ba 20 00 00 00       	mov    edx,0x20
c0004aac:	83 c0 34             	add    eax,0x34
c0004aaf:	e8 cc d2 ff ff       	call   c0001d80 <mem_set>
c0004ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004abd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ac1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ac5:	83 c0 4a             	add    eax,0x4a
c0004ac8:	e8 9b d2 ff ff       	call   c0001d68 <st_dword>
c0004acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad1:	89 f1                	mov    ecx,esi
c0004ad3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad6:	e8 2e e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae7:	83 c0 54             	add    eax,0x54
c0004aea:	e8 7c d2 ff ff       	call   c0001d6b <mem_cpy>
c0004aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004af7:	8d 50 54             	lea    edx,[eax+0x54]
c0004afa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004afe:	e8 06 e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0f:	e8 42 ee ff ff       	call   c0003956 <dir_register>
c0004b14:	89 c3                	mov    ebx,eax
c0004b16:	85 c0                	test   eax,eax
c0004b18:	0f 85 40 ff ff ff    	jne    c0004a5e <f_mkdir+0x92>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b27:	83 c0 16             	add    eax,0x16
c0004b2a:	e8 39 d2 ff ff       	call   c0001d68 <st_dword>
c0004b2f:	89 f1                	mov    ecx,esi
c0004b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b39:	e8 cb e5 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b52:	e8 4e e1 ff ff       	call   c0002ca5 <sync_fs>
c0004b57:	89 c3                	mov    ebx,eax
c0004b59:	e9 14 ff ff ff       	jmp    c0004a72 <f_mkdir+0xa6>
c0004b5e:	83 c4 50             	add    esp,0x50
c0004b61:	89 d8                	mov    eax,ebx
c0004b63:	5b                   	pop    ebx
c0004b64:	5e                   	pop    esi
c0004b65:	5f                   	pop    edi
c0004b66:	c3                   	ret    

c0004b67 <f_rename>:
c0004b67:	57                   	push   edi
c0004b68:	56                   	push   esi
c0004b69:	53                   	push   ebx
c0004b6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b77:	e8 f2 d5 ff ff       	call   c000216e <get_ldnumber>
c0004b7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b8c:	e8 27 d8 ff ff       	call   c00023b8 <mount_volume>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	0f 85 7a 01 00 00    	jne    c0004d13 <f_rename+0x1ac>
c0004b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b9d:	83 ec 0c             	sub    esp,0xc
c0004ba0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ba4:	68 00 02 00 00       	push   0x200
c0004ba9:	e8 de 0e 00 00       	call   c0005a8c <ff_memalloc>
c0004bae:	83 c4 10             	add    esp,0x10
c0004bb1:	89 c6                	mov    esi,eax
c0004bb3:	b8 11 00 00 00       	mov    eax,0x11
c0004bb8:	85 f6                	test   esi,esi
c0004bba:	0f 84 53 01 00 00    	je     c0004d13 <f_rename+0x1ac>
c0004bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bd2:	e8 eb ec ff ff       	call   c00038c2 <follow_path>
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	0f 85 20 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bdf:	b8 06 00 00 00       	mov    eax,0x6
c0004be4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004be9:	0f 85 10 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bef:	b9 20 00 00 00       	mov    ecx,0x20
c0004bf4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bfc:	e8 6a d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c01:	b9 30 00 00 00       	mov    ecx,0x30
c0004c06:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 58 d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c13:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c1a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1e:	e8 9f ec ff ff       	call   c00038c2 <follow_path>
c0004c23:	85 c0                	test   eax,eax
c0004c25:	75 20                	jne    c0004c47 <f_rename+0xe0>
c0004c27:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c2b:	b8 08 00 00 00       	mov    eax,0x8
c0004c30:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c34:	0f 85 c5 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c3e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c45:	eb 03                	jmp    c0004c4a <f_rename+0xe3>
c0004c47:	83 f8 04             	cmp    eax,0x4
c0004c4a:	0f 85 af 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c50:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c54:	e8 fd ec ff ff       	call   c0003956 <dir_register>
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	0f 85 9e 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c61:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c68:	b9 13 00 00 00       	mov    ecx,0x13
c0004c6d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c70:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c74:	e8 f2 d0 ff ff       	call   c0001d6b <mem_cpy>
c0004c79:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c7d:	a8 10                	test   al,0x10
c0004c7f:	75 03                	jne    c0004c84 <f_rename+0x11d>
c0004c81:	83 c8 20             	or     eax,0x20
c0004c84:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c8f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c93:	74 54                	je     c0004ce9 <f_rename+0x182>
c0004c95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c99:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c9d:	74 4a                	je     c0004ce9 <f_rename+0x182>
c0004c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ca3:	89 da                	mov    edx,ebx
c0004ca5:	8a 07                	mov    al,BYTE PTR [edi]
c0004ca7:	e8 34 e4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004cac:	89 c2                	mov    edx,eax
c0004cae:	89 f8                	mov    eax,edi
c0004cb0:	e8 d0 d2 ff ff       	call   c0001f85 <clst2sect>
c0004cb5:	89 c2                	mov    edx,eax
c0004cb7:	b8 02 00 00 00       	mov    eax,0x2
c0004cbc:	85 d2                	test   edx,edx
c0004cbe:	74 3f                	je     c0004cff <f_rename+0x198>
c0004cc0:	89 f8                	mov    eax,edi
c0004cc2:	e8 9e d5 ff ff       	call   c0002265 <move_window>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	75 34                	jne    c0004cff <f_rename+0x198>
c0004ccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ccf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cd3:	75 14                	jne    c0004ce9 <f_rename+0x182>
c0004cd5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cd8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cdc:	e8 28 e4 ff ff       	call   c0003109 <st_clust.isra.1>
c0004ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ce9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ced:	e8 4f ea ff ff       	call   c0003741 <dir_remove>
c0004cf2:	85 c0                	test   eax,eax
c0004cf4:	75 09                	jne    c0004cff <f_rename+0x198>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	e8 a6 df ff ff       	call   c0002ca5 <sync_fs>
c0004cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d03:	83 ec 0c             	sub    esp,0xc
c0004d06:	56                   	push   esi
c0004d07:	e8 98 0d 00 00       	call   c0005aa4 <ff_memfree>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d13:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d19:	5b                   	pop    ebx
c0004d1a:	5e                   	pop    esi
c0004d1b:	5f                   	pop    edi
c0004d1c:	c3                   	ret    

c0004d1d <f_chmod>:
c0004d1d:	57                   	push   edi
c0004d1e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d23:	56                   	push   esi
c0004d24:	53                   	push   ebx
c0004d25:	83 ec 50             	sub    esp,0x50
c0004d28:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d2c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d38:	e8 7b d6 ff ff       	call   c00023b8 <mount_volume>
c0004d3d:	85 c0                	test   eax,eax
c0004d3f:	75 7e                	jne    c0004dbf <f_chmod+0xa2>
c0004d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d45:	83 ec 0c             	sub    esp,0xc
c0004d48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d4c:	68 00 02 00 00       	push   0x200
c0004d51:	e8 36 0d 00 00       	call   c0005a8c <ff_memalloc>
c0004d56:	83 c4 10             	add    esp,0x10
c0004d59:	89 c6                	mov    esi,eax
c0004d5b:	b8 11 00 00 00       	mov    eax,0x11
c0004d60:	85 f6                	test   esi,esi
c0004d62:	74 5b                	je     c0004dbf <f_chmod+0xa2>
c0004d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d73:	e8 4a eb ff ff       	call   c00038c2 <follow_path>
c0004d78:	85 c0                	test   eax,eax
c0004d7a:	75 2f                	jne    c0004dab <f_chmod+0x8e>
c0004d7c:	b8 06 00 00 00       	mov    eax,0x6
c0004d81:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d86:	75 23                	jne    c0004dab <f_chmod+0x8e>
c0004d88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d8f:	21 fb                	and    ebx,edi
c0004d91:	83 e3 27             	and    ebx,0x27
c0004d94:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d97:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da6:	e8 fa de ff ff       	call   c0002ca5 <sync_fs>
c0004dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004daf:	83 ec 0c             	sub    esp,0xc
c0004db2:	56                   	push   esi
c0004db3:	e8 ec 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004db8:	83 c4 10             	add    esp,0x10
c0004dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbf:	83 c4 50             	add    esp,0x50
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	c3                   	ret    

c0004dc6 <f_utime>:
c0004dc6:	56                   	push   esi
c0004dc7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dcc:	53                   	push   ebx
c0004dcd:	83 ec 54             	sub    esp,0x54
c0004dd0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ddc:	e8 d7 d5 ff ff       	call   c00023b8 <mount_volume>
c0004de1:	85 c0                	test   eax,eax
c0004de3:	0f 85 85 00 00 00    	jne    c0004e6e <f_utime+0xa8>
c0004de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ded:	83 ec 0c             	sub    esp,0xc
c0004df0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004df4:	68 00 02 00 00       	push   0x200
c0004df9:	e8 8e 0c 00 00       	call   c0005a8c <ff_memalloc>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	89 c3                	mov    ebx,eax
c0004e03:	b8 11 00 00 00       	mov    eax,0x11
c0004e08:	85 db                	test   ebx,ebx
c0004e0a:	74 62                	je     c0004e6e <f_utime+0xa8>
c0004e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e14:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e1b:	e8 a2 ea ff ff       	call   c00038c2 <follow_path>
c0004e20:	85 c0                	test   eax,eax
c0004e22:	75 36                	jne    c0004e5a <f_utime+0x94>
c0004e24:	b8 06 00 00 00       	mov    eax,0x6
c0004e29:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e2e:	75 2a                	jne    c0004e5a <f_utime+0x94>
c0004e30:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e34:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e38:	c1 e2 10             	shl    edx,0x10
c0004e3b:	09 c2                	or     edx,eax
c0004e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e41:	83 c0 16             	add    eax,0x16
c0004e44:	e8 1f cf ff ff       	call   c0001d68 <st_dword>
c0004e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 4b de ff ff       	call   c0002ca5 <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	53                   	push   ebx
c0004e62:	e8 3d 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	83 c4 54             	add    esp,0x54
c0004e71:	5b                   	pop    ebx
c0004e72:	5e                   	pop    esi
c0004e73:	c3                   	ret    

c0004e74 <f_getlabel>:
c0004e74:	55                   	push   ebp
c0004e75:	31 c9                	xor    ecx,ecx
c0004e77:	57                   	push   edi
c0004e78:	56                   	push   esi
c0004e79:	53                   	push   ebx
c0004e7a:	83 ec 5c             	sub    esp,0x5c
c0004e7d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e85:	e8 2e d5 ff ff       	call   c00023b8 <mount_volume>
c0004e8a:	89 c6                	mov    esi,eax
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 27 01 00 00    	jne    c0004fbb <f_getlabel+0x147>
c0004e94:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e99:	0f 84 d1 00 00 00    	je     c0004f70 <f_getlabel+0xfc>
c0004e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ea9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004eb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb5:	e8 79 e3 ff ff       	call   c0003233 <dir_sdi>
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 a2 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ec2:	ba 01 00 00 00       	mov    edx,0x1
c0004ec7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ecb:	e8 54 e7 ff ff       	call   c0003624 <dir_read>
c0004ed0:	85 c0                	test   eax,eax
c0004ed2:	0f 85 8c 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ed8:	31 db                	xor    ebx,ebx
c0004eda:	31 c9                	xor    ecx,ecx
c0004edc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ee0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ee3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ee8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ef1:	e8 ca ce ff ff       	call   c0001dc0 <dbc_1st>
c0004ef6:	85 c0                	test   eax,eax
c0004ef8:	74 16                	je     c0004f10 <f_getlabel+0x9c>
c0004efa:	83 ff 0b             	cmp    edi,0xb
c0004efd:	74 11                	je     c0004f10 <f_getlabel+0x9c>
c0004eff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f08:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f0b:	c1 e0 08             	shl    eax,0x8
c0004f0e:	09 c2                	or     edx,eax
c0004f10:	0f b7 d2             	movzx  edx,dx
c0004f13:	50                   	push   eax
c0004f14:	50                   	push   eax
c0004f15:	68 b5 01 00 00       	push   0x1b5
c0004f1a:	52                   	push   edx
c0004f1b:	e8 3c 0c 00 00       	call   c0005b5c <ff_oem2uni>
c0004f20:	83 c4 10             	add    esp,0x10
c0004f23:	66 85 c0             	test   ax,ax
c0004f26:	74 25                	je     c0004f4d <f_getlabel+0xd9>
c0004f28:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f2c:	0f b7 c0             	movzx  eax,ax
c0004f2f:	01 da                	add    edx,ebx
c0004f31:	b9 04 00 00 00       	mov    ecx,0x4
c0004f36:	e8 51 cf ff ff       	call   c0001e8c <put_utf>
c0004f3b:	84 c0                	test   al,al
c0004f3d:	74 0e                	je     c0004f4d <f_getlabel+0xd9>
c0004f3f:	0f b6 c0             	movzx  eax,al
c0004f42:	01 c3                	add    ebx,eax
c0004f44:	83 ff 0b             	cmp    edi,0xb
c0004f47:	74 06                	je     c0004f4f <f_getlabel+0xdb>
c0004f49:	89 f9                	mov    ecx,edi
c0004f4b:	eb 8f                	jmp    c0004edc <f_getlabel+0x68>
c0004f4d:	31 db                	xor    ebx,ebx
c0004f4f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f56:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f5a:	74 14                	je     c0004f70 <f_getlabel+0xfc>
c0004f5c:	4b                   	dec    ebx
c0004f5d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f60:	74 f1                	je     c0004f53 <f_getlabel+0xdf>
c0004f62:	eb 0c                	jmp    c0004f70 <f_getlabel+0xfc>
c0004f64:	83 f8 04             	cmp    eax,0x4
c0004f67:	75 50                	jne    c0004fb9 <f_getlabel+0x145>
c0004f69:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f70:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f75:	74 44                	je     c0004fbb <f_getlabel+0x147>
c0004f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f7e:	e8 e2 d2 ff ff       	call   c0002265 <move_window>
c0004f83:	89 c6                	mov    esi,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	75 32                	jne    c0004fbb <f_getlabel+0x147>
c0004f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f8d:	b8 43 00 00 00       	mov    eax,0x43
c0004f92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f94:	80 f9 03             	cmp    cl,0x3
c0004f97:	74 0f                	je     c0004fa8 <f_getlabel+0x134>
c0004f99:	31 c0                	xor    eax,eax
c0004f9b:	80 f9 04             	cmp    cl,0x4
c0004f9e:	0f 94 c0             	sete   al
c0004fa1:	48                   	dec    eax
c0004fa2:	83 e0 c3             	and    eax,0xffffffc3
c0004fa5:	83 c0 64             	add    eax,0x64
c0004fa8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fac:	e8 9b cd ff ff       	call   c0001d4c <ld_dword>
c0004fb1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fb5:	89 07                	mov    DWORD PTR [edi],eax
c0004fb7:	eb 02                	jmp    c0004fbb <f_getlabel+0x147>
c0004fb9:	89 c6                	mov    esi,eax
c0004fbb:	83 c4 5c             	add    esp,0x5c
c0004fbe:	89 f0                	mov    eax,esi
c0004fc0:	5b                   	pop    ebx
c0004fc1:	5e                   	pop    esi
c0004fc2:	5f                   	pop    edi
c0004fc3:	5d                   	pop    ebp
c0004fc4:	c3                   	ret    

c0004fc5 <f_setlabel>:
c0004fc5:	56                   	push   esi
c0004fc6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fcb:	53                   	push   ebx
c0004fcc:	83 ec 54             	sub    esp,0x54
c0004fcf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fd3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd7:	e8 dc d3 ff ff       	call   c00023b8 <mount_volume>
c0004fdc:	89 c6                	mov    esi,eax
c0004fde:	85 c0                	test   eax,eax
c0004fe0:	0f 85 67 01 00 00    	jne    c000514d <f_setlabel+0x188>
c0004fe6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004feb:	ba 20 00 00 00       	mov    edx,0x20
c0004ff0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004ff4:	31 db                	xor    ebx,ebx
c0004ff6:	e8 85 cd ff ff       	call   c0001d80 <mem_set>
c0004ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005002:	76 5b                	jbe    c000505f <f_setlabel+0x9a>
c0005004:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005008:	e8 b9 cd ff ff       	call   c0001dc6 <tchar2uni>
c000500d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005012:	76 0a                	jbe    c000501e <f_setlabel+0x59>
c0005014:	be 06 00 00 00       	mov    esi,0x6
c0005019:	e9 2f 01 00 00       	jmp    c000514d <f_setlabel+0x188>
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	50                   	push   eax
c0005022:	e8 ad 0b 00 00       	call   c0005bd4 <ff_wtoupper>
c0005027:	5a                   	pop    edx
c0005028:	59                   	pop    ecx
c0005029:	68 b5 01 00 00       	push   0x1b5
c000502e:	50                   	push   eax
c000502f:	e8 88 0a 00 00       	call   c0005abc <ff_uni2oem>
c0005034:	83 c4 10             	add    esp,0x10
c0005037:	89 c6                	mov    esi,eax
c0005039:	66 85 c0             	test   ax,ax
c000503c:	74 d6                	je     c0005014 <f_setlabel+0x4f>
c000503e:	0f b7 d0             	movzx  edx,ax
c0005041:	b8 f0 e3 01 c0       	mov    eax,0xc001e3f0
c0005046:	e8 63 cd ff ff       	call   c0001dae <chk_chr>
c000504b:	85 c0                	test   eax,eax
c000504d:	75 c5                	jne    c0005014 <f_setlabel+0x4f>
c000504f:	66 81 fe ff 00       	cmp    si,0xff
c0005054:	0f 87 c9 00 00 00    	ja     c0005123 <f_setlabel+0x15e>
c000505a:	e9 e4 00 00 00       	jmp    c0005143 <f_setlabel+0x17e>
c000505f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005064:	74 ae                	je     c0005014 <f_setlabel+0x4f>
c0005066:	85 db                	test   ebx,ebx
c0005068:	74 0e                	je     c0005078 <f_setlabel+0xb3>
c000506a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000506d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005072:	75 04                	jne    c0005078 <f_setlabel+0xb3>
c0005074:	89 c3                	mov    ebx,eax
c0005076:	eb ee                	jmp    c0005066 <f_setlabel+0xa1>
c0005078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000507c:	31 d2                	xor    edx,edx
c000507e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005082:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000508a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000508e:	e8 a0 e1 ff ff       	call   c0003233 <dir_sdi>
c0005093:	89 c6                	mov    esi,eax
c0005095:	85 c0                	test   eax,eax
c0005097:	0f 85 b0 00 00 00    	jne    c000514d <f_setlabel+0x188>
c000509d:	ba 01 00 00 00       	mov    edx,0x1
c00050a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a6:	e8 79 e5 ff ff       	call   c0003624 <dir_read>
c00050ab:	85 c0                	test   eax,eax
c00050ad:	75 18                	jne    c00050c7 <f_setlabel+0x102>
c00050af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050b3:	85 db                	test   ebx,ebx
c00050b5:	74 0b                	je     c00050c2 <f_setlabel+0xfd>
c00050b7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050bc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050c0:	eb 47                	jmp    c0005109 <f_setlabel+0x144>
c00050c2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050c5:	eb 47                	jmp    c000510e <f_setlabel+0x149>
c00050c7:	83 f8 04             	cmp    eax,0x4
c00050ca:	75 53                	jne    c000511f <f_setlabel+0x15a>
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 7d                	je     c000514d <f_setlabel+0x188>
c00050d0:	ba 01 00 00 00       	mov    edx,0x1
c00050d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d9:	e8 e5 e4 ff ff       	call   c00035c3 <dir_alloc>
c00050de:	89 c6                	mov    esi,eax
c00050e0:	85 c0                	test   eax,eax
c00050e2:	75 69                	jne    c000514d <f_setlabel+0x188>
c00050e4:	b9 20 00 00 00       	mov    ecx,0x20
c00050e9:	31 d2                	xor    edx,edx
c00050eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050ef:	e8 8c cc ff ff       	call   c0001d80 <mem_set>
c00050f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050fd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005101:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005109:	e8 5d cc ff ff       	call   c0001d6b <mem_cpy>
c000510e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005112:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000511a:	e8 86 db ff ff       	call   c0002ca5 <sync_fs>
c000511f:	89 c6                	mov    esi,eax
c0005121:	eb 2a                	jmp    c000514d <f_setlabel+0x188>
c0005123:	83 fb 09             	cmp    ebx,0x9
c0005126:	0f 87 e8 fe ff ff    	ja     c0005014 <f_setlabel+0x4f>
c000512c:	89 f0                	mov    eax,esi
c000512e:	66 c1 e8 08          	shr    ax,0x8
c0005132:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005136:	43                   	inc    ebx
c0005137:	89 f0                	mov    eax,esi
c0005139:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000513d:	43                   	inc    ebx
c000513e:	e9 b8 fe ff ff       	jmp    c0004ffb <f_setlabel+0x36>
c0005143:	83 fb 0a             	cmp    ebx,0xa
c0005146:	76 ef                	jbe    c0005137 <f_setlabel+0x172>
c0005148:	e9 c7 fe ff ff       	jmp    c0005014 <f_setlabel+0x4f>
c000514d:	89 f0                	mov    eax,esi
c000514f:	83 c4 54             	add    esp,0x54
c0005152:	5b                   	pop    ebx
c0005153:	5e                   	pop    esi
c0005154:	c3                   	ret    

c0005155 <f_expand>:
c0005155:	55                   	push   ebp
c0005156:	57                   	push   edi
c0005157:	56                   	push   esi
c0005158:	53                   	push   ebx
c0005159:	83 ec 2c             	sub    esp,0x2c
c000515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005160:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000516c:	89 d8                	mov    eax,ebx
c000516e:	e8 48 d0 ff ff       	call   c00021bb <validate>
c0005173:	89 c6                	mov    esi,eax
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 85 2e 01 00 00    	jne    c00052ab <f_expand+0x156>
c000517d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005181:	85 f6                	test   esi,esi
c0005183:	0f 85 22 01 00 00    	jne    c00052ab <f_expand+0x156>
c0005189:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000518e:	75 0a                	jne    c000519a <f_expand+0x45>
c0005190:	be 07 00 00 00       	mov    esi,0x7
c0005195:	e9 11 01 00 00       	jmp    c00052ab <f_expand+0x156>
c000519a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000519e:	75 f0                	jne    c0005190 <f_expand+0x3b>
c00051a0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051a4:	74 ea                	je     c0005190 <f_expand+0x3b>
c00051a6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00051aa:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00051ae:	c1 e1 09             	shl    ecx,0x9
c00051b1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051b4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051b8:	0f 95 c0             	setne  al
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	89 c7                	mov    edi,eax
c00051c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051c6:	f7 f1                	div    ecx
c00051c8:	01 f8                	add    eax,edi
c00051ca:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051d1:	83 ff 01             	cmp    edi,0x1
c00051d4:	76 05                	jbe    c00051db <f_expand+0x86>
c00051d6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051d9:	77 05                	ja     c00051e0 <f_expand+0x8b>
c00051db:	bf 02 00 00 00       	mov    edi,0x2
c00051e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051e3:	89 fd                	mov    ebp,edi
c00051e5:	31 c9                	xor    ecx,ecx
c00051e7:	89 ea                	mov    edx,ebp
c00051e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051ef:	45                   	inc    ebp
c00051f0:	e8 3c df ff ff       	call   c0003131 <get_fat.isra.2>
c00051f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005200:	77 05                	ja     c0005207 <f_expand+0xb2>
c0005202:	bd 02 00 00 00       	mov    ebp,0x2
c0005207:	83 f8 01             	cmp    eax,0x1
c000520a:	74 20                	je     c000522c <f_expand+0xd7>
c000520c:	83 f8 ff             	cmp    eax,0xffffffff
c000520f:	74 22                	je     c0005233 <f_expand+0xde>
c0005211:	85 c0                	test   eax,eax
c0005213:	75 09                	jne    c000521e <f_expand+0xc9>
c0005215:	41                   	inc    ecx
c0005216:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000521a:	75 07                	jne    c0005223 <f_expand+0xce>
c000521c:	eb 1c                	jmp    c000523a <f_expand+0xe5>
c000521e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005221:	31 c9                	xor    ecx,ecx
c0005223:	39 fd                	cmp    ebp,edi
c0005225:	75 c0                	jne    c00051e7 <f_expand+0x92>
c0005227:	e9 64 ff ff ff       	jmp    c0005190 <f_expand+0x3b>
c000522c:	be 02 00 00 00       	mov    esi,0x2
c0005231:	eb 78                	jmp    c00052ab <f_expand+0x156>
c0005233:	be 01 00 00 00       	mov    esi,0x1
c0005238:	eb 71                	jmp    c00052ab <f_expand+0x156>
c000523a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000523f:	74 2b                	je     c000526c <f_expand+0x117>
c0005241:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005244:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005248:	85 ed                	test   ebp,ebp
c000524a:	74 24                	je     c0005270 <f_expand+0x11b>
c000524c:	83 c9 ff             	or     ecx,0xffffffff
c000524f:	83 fd 01             	cmp    ebp,0x1
c0005252:	74 03                	je     c0005257 <f_expand+0x102>
c0005254:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005257:	89 fa                	mov    edx,edi
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	e8 59 d4 ff ff       	call   c00026bb <put_fat>
c0005262:	85 c0                	test   eax,eax
c0005264:	75 43                	jne    c00052a9 <f_expand+0x154>
c0005266:	89 f8                	mov    eax,edi
c0005268:	4d                   	dec    ebp
c0005269:	47                   	inc    edi
c000526a:	eb dc                	jmp    c0005248 <f_expand+0xf3>
c000526c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000526f:	48                   	dec    eax
c0005270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005274:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005279:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000527c:	74 2d                	je     c00052ab <f_expand+0x156>
c000527e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005285:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005292:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005298:	39 c8                	cmp    eax,ecx
c000529a:	77 0f                	ja     c00052ab <f_expand+0x156>
c000529c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052a0:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052a7:	eb 02                	jmp    c00052ab <f_expand+0x156>
c00052a9:	89 c6                	mov    esi,eax
c00052ab:	83 c4 2c             	add    esp,0x2c
c00052ae:	89 f0                	mov    eax,esi
c00052b0:	5b                   	pop    ebx
c00052b1:	5e                   	pop    esi
c00052b2:	5f                   	pop    edi
c00052b3:	5d                   	pop    ebp
c00052b4:	c3                   	ret    

c00052b5 <f_mkfs>:
c00052b5:	55                   	push   ebp
c00052b6:	57                   	push   edi
c00052b7:	bf 0b 00 00 00       	mov    edi,0xb
c00052bc:	56                   	push   esi
c00052bd:	53                   	push   ebx
c00052be:	83 ec 4c             	sub    esp,0x4c
c00052c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052c5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052cd:	e8 9c ce ff ff       	call   c000216e <get_ldnumber>
c00052d2:	85 c0                	test   eax,eax
c00052d4:	0f 88 a6 07 00 00    	js     c0005a80 <f_mkfs+0x7cb>
c00052da:	8b 14 85 40 12 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdedc0]
c00052e1:	85 d2                	test   edx,edx
c00052e3:	74 03                	je     c00052e8 <f_mkfs+0x33>
c00052e5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	75 05                	jne    c00052f1 <f_mkfs+0x3c>
c00052ec:	bb e0 e3 01 c0       	mov    ebx,0xc001e3e0
c00052f1:	83 ec 0c             	sub    esp,0xc
c00052f4:	0f b6 c0             	movzx  eax,al
c00052f7:	bf 03 00 00 00       	mov    edi,0x3
c00052fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005304:	e8 e8 c9 ff ff       	call   c0001cf1 <disk_initialize>
c0005309:	83 c4 10             	add    esp,0x10
c000530c:	a8 01                	test   al,0x1
c000530e:	0f 85 6c 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005314:	bf 0a 00 00 00       	mov    edi,0xa
c0005319:	a8 04                	test   al,0x4
c000531b:	0f 85 5f 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005321:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005328:	85 c0                	test   eax,eax
c000532a:	75 20                	jne    c000534c <f_mkfs+0x97>
c000532c:	51                   	push   ecx
c000532d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005331:	50                   	push   eax
c0005332:	6a 03                	push   0x3
c0005334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005338:	e8 e3 c9 ff ff       	call   c0001d20 <disk_ioctl>
c000533d:	83 c4 10             	add    esp,0x10
c0005340:	85 c0                	test   eax,eax
c0005342:	74 08                	je     c000534c <f_mkfs+0x97>
c0005344:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000534c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005350:	8d 42 ff             	lea    eax,[edx-0x1]
c0005353:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005358:	77 04                	ja     c000535e <f_mkfs+0xa9>
c000535a:	85 c2                	test   edx,eax
c000535c:	74 08                	je     c0005366 <f_mkfs+0xb1>
c000535e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005366:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005369:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000536d:	48                   	dec    eax
c000536e:	3c 01                	cmp    al,0x1
c0005370:	76 05                	jbe    c0005377 <f_mkfs+0xc2>
c0005372:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005377:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	48                   	dec    eax
c000537f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005384:	77 07                	ja     c000538d <f_mkfs+0xd8>
c0005386:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000538b:	74 08                	je     c0005395 <f_mkfs+0xe0>
c000538d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005395:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005398:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000539e:	77 07                	ja     c00053a7 <f_mkfs+0xf2>
c00053a0:	8d 47 ff             	lea    eax,[edi-0x1]
c00053a3:	85 f8                	test   eax,edi
c00053a5:	74 02                	je     c00053a9 <f_mkfs+0xf4>
c00053a7:	31 ff                	xor    edi,edi
c00053a9:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053b1:	77 0a                	ja     c00053bd <f_mkfs+0x108>
c00053b3:	bf 11 00 00 00       	mov    edi,0x11
c00053b8:	e9 c3 06 00 00       	jmp    c0005a80 <f_mkfs+0x7cb>
c00053bd:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053bf:	89 ee                	mov    esi,ebp
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	75 1b                	jne    c00053e0 <f_mkfs+0x12b>
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053cc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053d1:	50                   	push   eax
c00053d2:	e8 b5 06 00 00       	call   c0005a8c <ff_memalloc>
c00053d7:	83 c4 10             	add    esp,0x10
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	74 d3                	je     c00053b3 <f_mkfs+0xfe>
c00053e0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053e8:	52                   	push   edx
c00053e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053ed:	50                   	push   eax
c00053ee:	6a 01                	push   0x1
c00053f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053f4:	e8 27 c9 ff ff       	call   c0001d20 <disk_ioctl>
c00053f9:	83 c4 10             	add    esp,0x10
c00053fc:	85 c0                	test   eax,eax
c00053fe:	0f 85 25 06 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005404:	88 d8                	mov    al,bl
c0005406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000540e:	24 08                	and    al,0x8
c0005410:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005414:	75 18                	jne    c000542e <f_mkfs+0x179>
c0005416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000541a:	83 f8 3f             	cmp    eax,0x3f
c000541d:	76 0f                	jbe    c000542e <f_mkfs+0x179>
c000541f:	83 e8 3f             	sub    eax,0x3f
c0005422:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000542a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000542e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005436:	83 f8 7f             	cmp    eax,0x7f
c0005439:	0f 86 52 02 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c000543f:	b9 80 00 00 00       	mov    ecx,0x80
c0005444:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000544a:	77 05                	ja     c0005451 <f_mkfs+0x19c>
c000544c:	89 f9                	mov    ecx,edi
c000544e:	c1 e9 09             	shr    ecx,0x9
c0005451:	88 d8                	mov    al,bl
c0005453:	83 e0 01             	and    eax,0x1
c0005456:	80 e3 02             	and    bl,0x2
c0005459:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000545d:	74 0a                	je     c0005469 <f_mkfs+0x1b4>
c000545f:	84 c0                	test   al,al
c0005461:	0f 84 4c 01 00 00    	je     c00055b3 <f_mkfs+0x2fe>
c0005467:	eb 38                	jmp    c00054a1 <f_mkfs+0x1ec>
c0005469:	bf 13 00 00 00       	mov    edi,0x13
c000546e:	84 c0                	test   al,al
c0005470:	75 2f                	jne    c00054a1 <f_mkfs+0x1ec>
c0005472:	e9 c9 05 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c0005477:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000547c:	0f 85 08 02 00 00    	jne    c000568a <f_mkfs+0x3d5>
c0005482:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005487:	0f 86 e1 01 00 00    	jbe    c000566e <f_mkfs+0x3b9>
c000548d:	85 c9                	test   ecx,ecx
c000548f:	0f 85 bd 05 00 00    	jne    c0005a52 <f_mkfs+0x79d>
c0005495:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005498:	83 f9 40             	cmp    ecx,0x40
c000549b:	0f 87 c1 05 00 00    	ja     c0005a62 <f_mkfs+0x7ad>
c00054a1:	89 cf                	mov    edi,ecx
c00054a3:	85 c9                	test   ecx,ecx
c00054a5:	75 1d                	jne    c00054c4 <f_mkfs+0x20f>
c00054a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00054ab:	ba c0 e3 01 c0       	mov    edx,0xc001e3c0
c00054b0:	c1 eb 0c             	shr    ebx,0xc
c00054b3:	bf 01 00 00 00       	mov    edi,0x1
c00054b8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054bb:	66 85 c0             	test   ax,ax
c00054be:	0f 85 5f 01 00 00    	jne    c0005623 <f_mkfs+0x36e>
c00054c4:	31 d2                	xor    edx,edx
c00054c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ca:	f7 f7                	div    edi
c00054cc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054d1:	0f 86 5e 01 00 00    	jbe    c0005635 <f_mkfs+0x380>
c00054d7:	83 c0 02             	add    eax,0x2
c00054da:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054df:	01 c0                	add    eax,eax
c00054e1:	05 ff 01 00 00       	add    eax,0x1ff
c00054e6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ee:	c1 e8 09             	shr    eax,0x9
c00054f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054f9:	c1 e0 05             	shl    eax,0x5
c00054fc:	c1 e8 09             	shr    eax,0x9
c00054ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005503:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005508:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000550c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005510:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000551c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005521:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005525:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000552d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005531:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005535:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005539:	f7 d8                	neg    eax
c000553b:	21 c3                	and    ebx,eax
c000553d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005541:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005546:	0f 85 fc 00 00 00    	jne    c0005648 <f_mkfs+0x393>
c000554c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005550:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005554:	89 f8                	mov    eax,edi
c0005556:	c1 e0 04             	shl    eax,0x4
c0005559:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000555d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005561:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005565:	0f 82 26 01 00 00    	jb     c0005691 <f_mkfs+0x3dc>
c000556b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000556f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005573:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005577:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000557c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005580:	29 d0                	sub    eax,edx
c0005582:	31 d2                	xor    edx,edx
c0005584:	f7 f7                	div    edi
c0005586:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000558b:	89 c3                	mov    ebx,eax
c000558d:	0f 85 e4 fe ff ff    	jne    c0005477 <f_mkfs+0x1c2>
c0005593:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005598:	0f 87 02 01 00 00    	ja     c00056a0 <f_mkfs+0x3eb>
c000559e:	85 c9                	test   ecx,ecx
c00055a0:	0f 85 eb 00 00 00    	jne    c0005691 <f_mkfs+0x3dc>
c00055a6:	83 ff 01             	cmp    edi,0x1
c00055a9:	0f 86 e2 00 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c00055af:	89 f9                	mov    ecx,edi
c00055b1:	d1 e9                	shr    ecx,1
c00055b3:	89 cb                	mov    ebx,ecx
c00055b5:	85 c9                	test   ecx,ecx
c00055b7:	75 26                	jne    c00055df <f_mkfs+0x32a>
c00055b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055bd:	ba d0 e3 01 c0       	mov    edx,0xc001e3d0
c00055c2:	c1 eb 11             	shr    ebx,0x11
c00055c5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ca:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055cd:	66 85 c0             	test   ax,ax
c00055d0:	74 0b                	je     c00055dd <f_mkfs+0x328>
c00055d2:	83 c2 02             	add    edx,0x2
c00055d5:	39 d8                	cmp    eax,ebx
c00055d7:	77 04                	ja     c00055dd <f_mkfs+0x328>
c00055d9:	01 c9                	add    ecx,ecx
c00055db:	eb ed                	jmp    c00055ca <f_mkfs+0x315>
c00055dd:	31 db                	xor    ebx,ebx
c00055df:	31 d2                	xor    edx,edx
c00055e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055e5:	f7 f1                	div    ecx
c00055e7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ee:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055f3:	c1 ea 09             	shr    edx,0x9
c00055f6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ff:	0f 87 8c 00 00 00    	ja     c0005691 <f_mkfs+0x3dc>
c0005605:	89 cf                	mov    edi,ecx
c0005607:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000560f:	89 d9                	mov    ecx,ebx
c0005611:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005619:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000561e:	e9 e0 fe ff ff       	jmp    c0005503 <f_mkfs+0x24e>
c0005623:	83 c2 02             	add    edx,0x2
c0005626:	39 d8                	cmp    eax,ebx
c0005628:	0f 87 96 fe ff ff    	ja     c00054c4 <f_mkfs+0x20f>
c000562e:	01 ff                	add    edi,edi
c0005630:	e9 83 fe ff ff       	jmp    c00054b8 <f_mkfs+0x203>
c0005635:	8d 04 40             	lea    eax,[eax+eax*2]
c0005638:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000563d:	40                   	inc    eax
c000563e:	d1 e8                	shr    eax,1
c0005640:	83 c0 03             	add    eax,0x3
c0005643:	e9 99 fe ff ff       	jmp    c00054e1 <f_mkfs+0x22c>
c0005648:	31 d2                	xor    edx,edx
c000564a:	89 d8                	mov    eax,ebx
c000564c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005650:	85 d2                	test   edx,edx
c0005652:	74 09                	je     c000565d <f_mkfs+0x3a8>
c0005654:	4b                   	dec    ebx
c0005655:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005659:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000565d:	89 d8                	mov    eax,ebx
c000565f:	31 d2                	xor    edx,edx
c0005661:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005665:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005669:	e9 e6 fe ff ff       	jmp    c0005554 <f_mkfs+0x29f>
c000566e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005673:	77 2b                	ja     c00056a0 <f_mkfs+0x3eb>
c0005675:	85 c9                	test   ecx,ecx
c0005677:	75 18                	jne    c0005691 <f_mkfs+0x3dc>
c0005679:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000567c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005682:	0f 86 19 fe ff ff    	jbe    c00054a1 <f_mkfs+0x1ec>
c0005688:	eb 07                	jmp    c0005691 <f_mkfs+0x3dc>
c000568a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000568f:	76 0a                	jbe    c000569b <f_mkfs+0x3e6>
c0005691:	bf 0e 00 00 00       	mov    edi,0xe
c0005696:	e9 a5 03 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c000569b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056a0:	31 d2                	xor    edx,edx
c00056a2:	b9 00 02 00 00       	mov    ecx,0x200
c00056a7:	89 f0                	mov    eax,esi
c00056a9:	e8 d2 c6 ff ff       	call   c0001d80 <mem_set>
c00056ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00056b3:	ba 72 e3 01 c0       	mov    edx,0xc001e372
c00056b8:	89 f0                	mov    eax,esi
c00056ba:	e8 ac c6 ff ff       	call   c0001d6b <mem_cpy>
c00056bf:	8d 46 0b             	lea    eax,[esi+0xb]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	e8 98 c6 ff ff       	call   c0001d64 <st_word>
c00056cc:	89 f8                	mov    eax,edi
c00056ce:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056d3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056d6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056d9:	e8 86 c6 ff ff       	call   c0001d64 <st_word>
c00056de:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056e2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056e7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ea:	75 08                	jne    c00056f4 <f_mkfs+0x43f>
c00056ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f8:	8d 46 11             	lea    eax,[esi+0x11]
c00056fb:	e8 64 c6 ff ff       	call   c0001d64 <st_word>
c0005700:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005704:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000570a:	77 0a                	ja     c0005716 <f_mkfs+0x461>
c000570c:	8d 46 13             	lea    eax,[esi+0x13]
c000570f:	e8 50 c6 ff ff       	call   c0001d64 <st_word>
c0005714:	eb 08                	jmp    c000571e <f_mkfs+0x469>
c0005716:	8d 46 20             	lea    eax,[esi+0x20]
c0005719:	e8 4a c6 ff ff       	call   c0001d68 <st_dword>
c000571e:	8d 46 18             	lea    eax,[esi+0x18]
c0005721:	ba 3f 00 00 00       	mov    edx,0x3f
c0005726:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000572a:	e8 35 c6 ff ff       	call   c0001d64 <st_word>
c000572f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005732:	ba ff 00 00 00       	mov    edx,0xff
c0005737:	e8 28 c6 ff ff       	call   c0001d64 <st_word>
c000573c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005743:	e8 20 c6 ff ff       	call   c0001d68 <st_dword>
c0005748:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000574d:	75 57                	jne    c00057a6 <f_mkfs+0x4f1>
c000574f:	8d 46 43             	lea    eax,[esi+0x43]
c0005752:	ba 00 00 21 50       	mov    edx,0x50210000
c0005757:	e8 0c c6 ff ff       	call   c0001d68 <st_dword>
c000575c:	8d 46 24             	lea    eax,[esi+0x24]
c000575f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005763:	e8 00 c6 ff ff       	call   c0001d68 <st_dword>
c0005768:	8d 46 2c             	lea    eax,[esi+0x2c]
c000576b:	ba 02 00 00 00       	mov    edx,0x2
c0005770:	e8 f3 c5 ff ff       	call   c0001d68 <st_dword>
c0005775:	8d 46 30             	lea    eax,[esi+0x30]
c0005778:	ba 01 00 00 00       	mov    edx,0x1
c000577d:	e8 e2 c5 ff ff       	call   c0001d64 <st_word>
c0005782:	8d 46 32             	lea    eax,[esi+0x32]
c0005785:	ba 06 00 00 00       	mov    edx,0x6
c000578a:	e8 d5 c5 ff ff       	call   c0001d64 <st_word>
c000578f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005793:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005797:	8d 46 47             	lea    eax,[esi+0x47]
c000579a:	b9 13 00 00 00       	mov    ecx,0x13
c000579f:	ba 7e e3 01 c0       	mov    edx,0xc001e37e
c00057a4:	eb 2f                	jmp    c00057d5 <f_mkfs+0x520>
c00057a6:	8d 46 27             	lea    eax,[esi+0x27]
c00057a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00057ae:	e8 b5 c5 ff ff       	call   c0001d68 <st_dword>
c00057b3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057b8:	8d 46 16             	lea    eax,[esi+0x16]
c00057bb:	e8 a4 c5 ff ff       	call   c0001d64 <st_word>
c00057c0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057c4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057c8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057cb:	b9 13 00 00 00       	mov    ecx,0x13
c00057d0:	ba 92 e3 01 c0       	mov    edx,0xc001e392
c00057d5:	e8 91 c5 ff ff       	call   c0001d6b <mem_cpy>
c00057da:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	e8 76 c5 ff ff       	call   c0001d64 <st_word>
c00057ee:	6a 01                	push   0x1
c00057f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057f4:	56                   	push   esi
c00057f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f9:	e8 0c c5 ff ff       	call   c0001d0a <disk_write>
c00057fe:	83 c4 10             	add    esp,0x10
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 20 02 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005809:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000580e:	0f 85 98 00 00 00    	jne    c00058ac <f_mkfs+0x5f7>
c0005814:	6a 01                	push   0x1
c0005816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000581a:	83 c0 06             	add    eax,0x6
c000581d:	50                   	push   eax
c000581e:	56                   	push   esi
c000581f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005823:	e8 e2 c4 ff ff       	call   c0001d0a <disk_write>
c0005828:	b9 00 02 00 00       	mov    ecx,0x200
c000582d:	31 d2                	xor    edx,edx
c000582f:	89 f0                	mov    eax,esi
c0005831:	e8 4a c5 ff ff       	call   c0001d80 <mem_set>
c0005836:	ba 52 52 61 41       	mov    edx,0x41615252
c000583b:	89 f0                	mov    eax,esi
c000583d:	e8 26 c5 ff ff       	call   c0001d68 <st_dword>
c0005842:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005848:	ba 72 72 41 61       	mov    edx,0x61417272
c000584d:	e8 16 c5 ff ff       	call   c0001d68 <st_dword>
c0005852:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005855:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000585b:	e8 08 c5 ff ff       	call   c0001d68 <st_dword>
c0005860:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005866:	ba 02 00 00 00       	mov    edx,0x2
c000586b:	e8 f8 c4 ff ff       	call   c0001d68 <st_dword>
c0005870:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005875:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000587b:	e8 e4 c4 ff ff       	call   c0001d64 <st_word>
c0005880:	6a 01                	push   0x1
c0005882:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005886:	83 c0 07             	add    eax,0x7
c0005889:	50                   	push   eax
c000588a:	56                   	push   esi
c000588b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000588f:	e8 76 c4 ff ff       	call   c0001d0a <disk_write>
c0005894:	83 c4 20             	add    esp,0x20
c0005897:	6a 01                	push   0x1
c0005899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000589d:	40                   	inc    eax
c000589e:	50                   	push   eax
c000589f:	56                   	push   esi
c00058a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058a4:	e8 61 c4 ff ff       	call   c0001d0a <disk_write>
c00058a9:	83 c4 10             	add    esp,0x10
c00058ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058b4:	c1 e8 09             	shr    eax,0x9
c00058b7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c1:	31 d2                	xor    edx,edx
c00058c3:	31 db                	xor    ebx,ebx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 b4 c4 ff ff       	call   c0001d80 <mem_set>
c00058cc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058d9:	0f 94 c3             	sete   bl
c00058dc:	4b                   	dec    ebx
c00058dd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058e3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ee:	75 21                	jne    c0005911 <f_mkfs+0x65c>
c00058f0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058f5:	89 f0                	mov    eax,esi
c00058f7:	e8 6c c4 ff ff       	call   c0001d68 <st_dword>
c00058fc:	8d 46 04             	lea    eax,[esi+0x4]
c00058ff:	83 ca ff             	or     edx,0xffffffff
c0005902:	e8 61 c4 ff ff       	call   c0001d68 <st_dword>
c0005907:	8d 46 08             	lea    eax,[esi+0x8]
c000590a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000590f:	eb 04                	jmp    c0005915 <f_mkfs+0x660>
c0005911:	89 da                	mov    edx,ebx
c0005913:	89 f0                	mov    eax,esi
c0005915:	e8 4e c4 ff ff       	call   c0001d68 <st_dword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000592e:	76 08                	jbe    c0005938 <f_mkfs+0x683>
c0005930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005940:	56                   	push   esi
c0005941:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005945:	e8 c0 c3 ff ff       	call   c0001d0a <disk_write>
c000594a:	83 c4 10             	add    esp,0x10
c000594d:	85 c0                	test   eax,eax
c000594f:	0f 85 d4 00 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005955:	b9 00 02 00 00       	mov    ecx,0x200
c000595a:	31 d2                	xor    edx,edx
c000595c:	89 f0                	mov    eax,esi
c000595e:	e8 1d c4 ff ff       	call   c0001d80 <mem_set>
c0005963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005967:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000596b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000596f:	75 b1                	jne    c0005922 <f_mkfs+0x66d>
c0005971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005975:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000597d:	40                   	inc    eax
c000597e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005982:	0f 87 61 ff ff ff    	ja     c00058e9 <f_mkfs+0x634>
c0005988:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000598d:	74 04                	je     c0005993 <f_mkfs+0x6de>
c000598f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005993:	89 fb                	mov    ebx,edi
c0005995:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005999:	76 04                	jbe    c000599f <f_mkfs+0x6ea>
c000599b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000599f:	53                   	push   ebx
c00059a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059a4:	56                   	push   esi
c00059a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059a9:	e8 5c c3 ff ff       	call   c0001d0a <disk_write>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	85 c0                	test   eax,eax
c00059b3:	75 74                	jne    c0005a29 <f_mkfs+0x774>
c00059b5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059b9:	29 df                	sub    edi,ebx
c00059bb:	75 d6                	jne    c0005993 <f_mkfs+0x6de>
c00059bd:	b1 0c                	mov    cl,0xc
c00059bf:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059c4:	74 18                	je     c00059de <f_mkfs+0x729>
c00059c6:	b1 06                	mov    cl,0x6
c00059c8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059d0:	77 0c                	ja     c00059de <f_mkfs+0x729>
c00059d2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059d7:	0f 94 c1             	sete   cl
c00059da:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059de:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059e3:	75 2d                	jne    c0005a12 <f_mkfs+0x75d>
c00059e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059f5:	0f b6 c9             	movzx  ecx,cl
c00059f8:	83 ec 0c             	sub    esp,0xc
c00059fb:	56                   	push   esi
c00059fc:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	e8 4c d3 ff ff       	call   c0002d55 <create_partition>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	89 c7                	mov    edi,eax
c0005a0e:	85 c0                	test   eax,eax
c0005a10:	75 2e                	jne    c0005a40 <f_mkfs+0x78b>
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	50                   	push   eax
c0005a15:	6a 00                	push   0x0
c0005a17:	6a 00                	push   0x0
c0005a19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a1d:	e8 fe c2 ff ff       	call   c0001d20 <disk_ioctl>
c0005a22:	83 c4 10             	add    esp,0x10
c0005a25:	85 c0                	test   eax,eax
c0005a27:	74 17                	je     c0005a40 <f_mkfs+0x78b>
c0005a29:	85 ed                	test   ebp,ebp
c0005a2b:	75 0c                	jne    c0005a39 <f_mkfs+0x784>
c0005a2d:	83 ec 0c             	sub    esp,0xc
c0005a30:	56                   	push   esi
c0005a31:	e8 6e 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a36:	83 c4 10             	add    esp,0x10
c0005a39:	bf 01 00 00 00       	mov    edi,0x1
c0005a3e:	eb 40                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a40:	85 ed                	test   ebp,ebp
c0005a42:	75 3c                	jne    c0005a80 <f_mkfs+0x7cb>
c0005a44:	83 ec 0c             	sub    esp,0xc
c0005a47:	56                   	push   esi
c0005a48:	e8 57 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a4d:	83 c4 10             	add    esp,0x10
c0005a50:	eb 2e                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 56 fb ff ff    	jne    c00055b3 <f_mkfs+0x2fe>
c0005a5d:	e9 2f fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a62:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a67:	0f 85 4c fb ff ff    	jne    c00055b9 <f_mkfs+0x304>
c0005a6d:	89 cf                	mov    edi,ecx
c0005a6f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a75:	0f 86 49 fa ff ff    	jbe    c00054c4 <f_mkfs+0x20f>
c0005a7b:	e9 11 fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a80:	83 c4 4c             	add    esp,0x4c
c0005a83:	89 f8                	mov    eax,edi
c0005a85:	5b                   	pop    ebx
c0005a86:	5e                   	pop    esi
c0005a87:	5f                   	pop    edi
c0005a88:	5d                   	pop    ebp
c0005a89:	c3                   	ret    
c0005a8a:	66 90                	xchg   ax,ax

c0005a8c <ff_memalloc>:
c0005a8c:	83 ec 0c             	sub    esp,0xc
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a96:	e8 c6 30 00 00       	call   c0008b61 <malloc>
c0005a9b:	83 c4 10             	add    esp,0x10
c0005a9e:	83 c4 0c             	add    esp,0xc
c0005aa1:	c3                   	ret    
c0005aa2:	66 90                	xchg   ax,ax

c0005aa4 <ff_memfree>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 be 30 00 00       	call   c0008b71 <free>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	90                   	nop
c0005ab7:	83 c4 0c             	add    esp,0xc
c0005aba:	c3                   	ret    
c0005abb:	90                   	nop

c0005abc <ff_uni2oem>:
c0005abc:	83 ec 14             	sub    esp,0x14
c0005abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ac7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ace:	c7 44 24 0c c0 e7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e7c0
c0005ad6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005adb:	77 0b                	ja     c0005ae8 <ff_uni2oem+0x2c>
c0005add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae6:	eb 68                	jmp    c0005b50 <ff_uni2oem+0x94>
c0005ae8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005af0:	77 5e                	ja     c0005b50 <ff_uni2oem+0x94>
c0005af2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005af8:	75 56                	jne    c0005b50 <ff_uni2oem+0x94>
c0005afa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b01:	eb 0d                	jmp    c0005b10 <ff_uni2oem+0x54>
c0005b03:	90                   	nop
c0005b04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b09:	40                   	inc    eax
c0005b0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b0f:	90                   	nop
c0005b10:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b16:	77 24                	ja     c0005b3c <ff_uni2oem+0x80>
c0005b18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b1d:	25 ff ff 00 00       	and    eax,0xffff
c0005b22:	01 c0                	add    eax,eax
c0005b24:	89 c2                	mov    edx,eax
c0005b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b2a:	01 d0                	add    eax,edx
c0005b2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b2f:	25 ff ff 00 00       	and    eax,0xffff
c0005b34:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b38:	75 ca                	jne    c0005b04 <ff_uni2oem+0x48>
c0005b3a:	66 90                	xchg   ax,ax
c0005b3c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b41:	83 e8 80             	sub    eax,0xffffff80
c0005b44:	25 ff 00 00 00       	and    eax,0xff
c0005b49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b4e:	66 90                	xchg   ax,ax
c0005b50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b55:	83 c4 14             	add    esp,0x14
c0005b58:	c3                   	ret    
c0005b59:	8d 76 00             	lea    esi,[esi+0x0]

c0005b5c <ff_oem2uni>:
c0005b5c:	83 ec 18             	sub    esp,0x18
c0005b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b67:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b6c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b70:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b77:	c7 44 24 10 c0 e7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e7c0
c0005b7f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b85:	77 0d                	ja     c0005b94 <ff_oem2uni+0x38>
c0005b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b8b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b90:	eb 36                	jmp    c0005bc8 <ff_oem2uni+0x6c>
c0005b92:	66 90                	xchg   ax,ax
c0005b94:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b9a:	75 2c                	jne    c0005bc8 <ff_oem2uni+0x6c>
c0005b9c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005ba3:	77 23                	ja     c0005bc8 <ff_oem2uni+0x6c>
c0005ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ba9:	25 ff ff 00 00       	and    eax,0xffff
c0005bae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bb3:	01 c0                	add    eax,eax
c0005bb5:	89 c2                	mov    edx,eax
c0005bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bbb:	01 d0                	add    eax,edx
c0005bbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bc0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bc8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bcd:	83 c4 18             	add    esp,0x18
c0005bd0:	c3                   	ret    
c0005bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bd4 <ff_wtoupper>:
c0005bd4:	83 ec 10             	sub    esp,0x10
c0005bd7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bdf:	0f 87 77 01 00 00    	ja     c0005d5c <ff_wtoupper+0x188>
c0005be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005be9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bee:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bf5:	77 09                	ja     c0005c00 <ff_wtoupper+0x2c>
c0005bf7:	b8 c0 e5 01 c0       	mov    eax,0xc001e5c0
c0005bfc:	eb 0a                	jmp    c0005c08 <ff_wtoupper+0x34>
c0005bfe:	66 90                	xchg   ax,ax
c0005c00:	b8 00 e5 01 c0       	mov    eax,0xc001e500
c0005c05:	8d 76 00             	lea    esi,[esi+0x0]
c0005c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c10:	8d 50 02             	lea    edx,[eax+0x2]
c0005c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c1a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c1f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c25:	0f 84 21 01 00 00    	je     c0005d4c <ff_wtoupper+0x178>
c0005c2b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c30:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c35:	0f 82 11 01 00 00    	jb     c0005d4c <ff_wtoupper+0x178>
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c46:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c4e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c53:	66 c1 e8 08          	shr    ax,0x8
c0005c57:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c5c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c63:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c68:	31 d2                	xor    edx,edx
c0005c6a:	66 89 c2             	mov    dx,ax
c0005c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c71:	31 c9                	xor    ecx,ecx
c0005c73:	66 89 c1             	mov    cx,ax
c0005c76:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c7b:	25 ff ff 00 00       	and    eax,0xffff
c0005c80:	01 c8                	add    eax,ecx
c0005c82:	39 c2                	cmp    edx,eax
c0005c84:	0f 8d 9a 00 00 00    	jge    c0005d24 <ff_wtoupper+0x150>
c0005c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c8e:	25 ff ff 00 00       	and    eax,0xffff
c0005c93:	83 f8 08             	cmp    eax,0x8
c0005c96:	0f 87 ac 00 00 00    	ja     c0005d48 <ff_wtoupper+0x174>
c0005c9c:	8b 04 85 c0 e4 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe1b40]
c0005ca3:	ff e0                	jmp    eax
c0005ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cad:	31 d2                	xor    edx,edx
c0005caf:	66 89 c2             	mov    dx,ax
c0005cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb6:	25 ff ff 00 00       	and    eax,0xffff
c0005cbb:	29 c2                	sub    edx,eax
c0005cbd:	89 d0                	mov    eax,edx
c0005cbf:	01 c0                	add    eax,eax
c0005cc1:	89 c2                	mov    edx,eax
c0005cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc7:	01 d0                	add    eax,edx
c0005cc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cd1:	eb 4d                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cd3:	90                   	nop
c0005cd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cd9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cdd:	83 e0 01             	and    eax,0x1
c0005ce0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005ce5:	eb 39                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005ce7:	90                   	nop
c0005ce8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cee:	eb 30                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cf6:	eb 28                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cfe:	eb 20                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005d06:	eb 18                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d08:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005d0e:	eb 10                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d10:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d16:	eb 08                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d18:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d1f:	90                   	nop
c0005d20:	eb 26                	jmp    c0005d48 <ff_wtoupper+0x174>
c0005d22:	66 90                	xchg   ax,ax
c0005d24:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d2a:	0f 85 dc fe ff ff    	jne    c0005c0c <ff_wtoupper+0x38>
c0005d30:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d35:	25 ff ff 00 00       	and    eax,0xffff
c0005d3a:	01 c0                	add    eax,eax
c0005d3c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d40:	e9 c7 fe ff ff       	jmp    c0005c0c <ff_wtoupper+0x38>
c0005d45:	8d 76 00             	lea    esi,[esi+0x0]
c0005d48:	90                   	nop
c0005d49:	8d 76 00             	lea    esi,[esi+0x0]
c0005d4c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d51:	25 ff ff 00 00       	and    eax,0xffff
c0005d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d5a:	66 90                	xchg   ax,ax
c0005d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d60:	83 c4 10             	add    esp,0x10
c0005d63:	c3                   	ret    

c0005d64 <isoReadDiscSector>:
c0005d64:	83 ec 0c             	sub    esp,0xc
c0005d67:	a0 60 0e 02 c0       	mov    al,ds:0xc0020e60
c0005d6c:	0f be c0             	movsx  eax,al
c0005d6f:	50                   	push   eax
c0005d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d7c:	e8 ff 28 01 00       	call   c0018680 <isoReadDiscSectorHelper>
c0005d81:	83 c4 10             	add    esp,0x10
c0005d84:	83 c4 0c             	add    esp,0xc
c0005d87:	c3                   	ret    

c0005d88 <strnicmp>:
c0005d88:	53                   	push   ebx
c0005d89:	83 ec 18             	sub    esp,0x18
c0005d8c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005d94:	eb 4e                	jmp    c0005de4 <strnicmp+0x5c>
c0005d96:	66 90                	xchg   ax,ax
c0005d98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d9c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005d9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005da2:	8a 00                	mov    al,BYTE PTR [eax]
c0005da4:	38 c2                	cmp    dl,al
c0005da6:	74 34                	je     c0005ddc <strnicmp+0x54>
c0005da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005dac:	8a 00                	mov    al,BYTE PTR [eax]
c0005dae:	0f be c0             	movsx  eax,al
c0005db1:	83 ec 0c             	sub    esp,0xc
c0005db4:	50                   	push   eax
c0005db5:	e8 36 ab ff ff       	call   c00008f0 <tolower>
c0005dba:	83 c4 10             	add    esp,0x10
c0005dbd:	89 c3                	mov    ebx,eax
c0005dbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005dc3:	8a 00                	mov    al,BYTE PTR [eax]
c0005dc5:	0f be c0             	movsx  eax,al
c0005dc8:	83 ec 0c             	sub    esp,0xc
c0005dcb:	50                   	push   eax
c0005dcc:	e8 1f ab ff ff       	call   c00008f0 <tolower>
c0005dd1:	83 c4 10             	add    esp,0x10
c0005dd4:	29 c3                	sub    ebx,eax
c0005dd6:	89 d8                	mov    eax,ebx
c0005dd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005ddc:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005de0:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005de4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0005de9:	75 25                	jne    c0005e10 <strnicmp+0x88>
c0005deb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005def:	8d 50 ff             	lea    edx,[eax-0x1]
c0005df2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0005df6:	85 c0                	test   eax,eax
c0005df8:	74 16                	je     c0005e10 <strnicmp+0x88>
c0005dfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005dfe:	8a 00                	mov    al,BYTE PTR [eax]
c0005e00:	84 c0                	test   al,al
c0005e02:	74 0c                	je     c0005e10 <strnicmp+0x88>
c0005e04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005e08:	8a 00                	mov    al,BYTE PTR [eax]
c0005e0a:	84 c0                	test   al,al
c0005e0c:	75 8a                	jne    c0005d98 <strnicmp+0x10>
c0005e0e:	66 90                	xchg   ax,ax
c0005e10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e14:	83 c4 18             	add    esp,0x18
c0005e17:	5b                   	pop    ebx
c0005e18:	c3                   	ret    
c0005e19:	8d 76 00             	lea    esi,[esi+0x0]

c0005e1c <stricmp>:
c0005e1c:	83 ec 1c             	sub    esp,0x1c
c0005e1f:	90                   	nop
c0005e20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005e24:	8d 50 01             	lea    edx,[eax+0x1]
c0005e27:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0005e2b:	8a 00                	mov    al,BYTE PTR [eax]
c0005e2d:	25 ff 00 00 00       	and    eax,0xff
c0005e32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e36:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005e3a:	8d 50 01             	lea    edx,[eax+0x1]
c0005e3d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005e41:	8a 00                	mov    al,BYTE PTR [eax]
c0005e43:	25 ff 00 00 00       	and    eax,0xff
c0005e48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005e53:	e8 78 aa ff ff       	call   c00008d0 <toupper>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	83 ec 0c             	sub    esp,0xc
c0005e5e:	50                   	push   eax
c0005e5f:	e8 8c aa ff ff       	call   c00008f0 <tolower>
c0005e64:	83 c4 10             	add    esp,0x10
c0005e67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e6b:	83 ec 0c             	sub    esp,0xc
c0005e6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005e72:	e8 59 aa ff ff       	call   c00008d0 <toupper>
c0005e77:	83 c4 10             	add    esp,0x10
c0005e7a:	83 ec 0c             	sub    esp,0xc
c0005e7d:	50                   	push   eax
c0005e7e:	e8 6d aa ff ff       	call   c00008f0 <tolower>
c0005e83:	83 c4 10             	add    esp,0x10
c0005e86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e8e:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005e92:	75 08                	jne    c0005e9c <stricmp+0x80>
c0005e94:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0005e99:	75 85                	jne    c0005e20 <stricmp+0x4>
c0005e9b:	90                   	nop
c0005e9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ea0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005ea4:	83 c4 1c             	add    esp,0x1c
c0005ea7:	c3                   	ret    

c0005ea8 <utf2ucs>:
c0005ea8:	83 ec 10             	sub    esp,0x10
c0005eab:	90                   	nop
c0005eac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005eb0:	8d 50 01             	lea    edx,[eax+0x1]
c0005eb3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005eb7:	8a 00                	mov    al,BYTE PTR [eax]
c0005eb9:	0f be c0             	movsx  eax,al
c0005ebc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005ec0:	83 7c 24 0c 7f       	cmp    DWORD PTR [esp+0xc],0x7f
c0005ec5:	7e 79                	jle    c0005f40 <utf2ucs+0x98>
c0005ec7:	81 7c 24 0c bf 00 00 00 	cmp    DWORD PTR [esp+0xc],0xbf
c0005ecf:	7f 2b                	jg     c0005efc <utf2ucs+0x54>
c0005ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed5:	c1 e0 06             	shl    eax,0x6
c0005ed8:	25 c0 07 00 00       	and    eax,0x7c0
c0005edd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005ee1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ee5:	8d 50 01             	lea    edx,[eax+0x1]
c0005ee8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005eec:	8a 00                	mov    al,BYTE PTR [eax]
c0005eee:	0f be c0             	movsx  eax,al
c0005ef1:	83 e0 3f             	and    eax,0x3f
c0005ef4:	09 44 24 0c          	or     DWORD PTR [esp+0xc],eax
c0005ef8:	eb 46                	jmp    c0005f40 <utf2ucs+0x98>
c0005efa:	66 90                	xchg   ax,ax
c0005efc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f00:	c1 e0 0c             	shl    eax,0xc
c0005f03:	25 ff ff 00 00       	and    eax,0xffff
c0005f08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f10:	8d 50 01             	lea    edx,[eax+0x1]
c0005f13:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005f17:	8a 00                	mov    al,BYTE PTR [eax]
c0005f19:	0f be c0             	movsx  eax,al
c0005f1c:	c1 e0 06             	shl    eax,0x6
c0005f1f:	25 c0 0f 00 00       	and    eax,0xfc0
c0005f24:	09 44 24 0c          	or     DWORD PTR [esp+0xc],eax
c0005f28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f2c:	8d 50 01             	lea    edx,[eax+0x1]
c0005f2f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005f33:	8a 00                	mov    al,BYTE PTR [eax]
c0005f35:	0f be c0             	movsx  eax,al
c0005f38:	83 e0 3f             	and    eax,0x3f
c0005f3b:	09 44 24 0c          	or     DWORD PTR [esp+0xc],eax
c0005f3f:	90                   	nop
c0005f40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f44:	c1 f8 08             	sar    eax,0x8
c0005f47:	89 c1                	mov    ecx,eax
c0005f49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f4d:	8d 50 01             	lea    edx,[eax+0x1]
c0005f50:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005f54:	88 ca                	mov    dl,cl
c0005f56:	88 10                	mov    BYTE PTR [eax],dl
c0005f58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f5c:	8d 50 01             	lea    edx,[eax+0x1]
c0005f5f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005f63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f67:	88 10                	mov    BYTE PTR [eax],dl
c0005f69:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0005f6e:	0f 85 38 ff ff ff    	jne    c0005eac <utf2ucs+0x4>
c0005f74:	90                   	nop
c0005f75:	83 c4 10             	add    esp,0x10
c0005f78:	c3                   	ret    
c0005f79:	8d 76 00             	lea    esi,[esi+0x0]

c0005f7c <ucs2utfn>:
c0005f7c:	83 ec 10             	sub    esp,0x10
c0005f7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f83:	d1 e8                	shr    eax,1
c0005f85:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005f89:	e9 f2 00 00 00       	jmp    c0006080 <ucs2utfn+0x104>
c0005f8e:	66 90                	xchg   ax,ax
c0005f90:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
c0005f94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f98:	8d 50 01             	lea    edx,[eax+0x1]
c0005f9b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005f9f:	8a 00                	mov    al,BYTE PTR [eax]
c0005fa1:	0f be c0             	movsx  eax,al
c0005fa4:	c1 e0 08             	shl    eax,0x8
c0005fa7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005faf:	8d 50 01             	lea    edx,[eax+0x1]
c0005fb2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005fb6:	8a 00                	mov    al,BYTE PTR [eax]
c0005fb8:	0f be c0             	movsx  eax,al
c0005fbb:	09 44 24 0c          	or     DWORD PTR [esp+0xc],eax
c0005fbf:	83 7c 24 0c 3b       	cmp    DWORD PTR [esp+0xc],0x3b
c0005fc4:	0f 84 c6 00 00 00    	je     c0006090 <ucs2utfn+0x114>
c0005fca:	83 7c 24 0c 7f       	cmp    DWORD PTR [esp+0xc],0x7f
c0005fcf:	7f 17                	jg     c0005fe8 <ucs2utfn+0x6c>
c0005fd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005fd5:	8d 50 01             	lea    edx,[eax+0x1]
c0005fd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005fe0:	88 10                	mov    BYTE PTR [eax],dl
c0005fe2:	e9 99 00 00 00       	jmp    c0006080 <ucs2utfn+0x104>
c0005fe7:	90                   	nop
c0005fe8:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c0005ff0:	7f 3a                	jg     c000602c <ucs2utfn+0xb0>
c0005ff2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ff6:	c1 f8 06             	sar    eax,0x6
c0005ff9:	88 c1                	mov    cl,al
c0005ffb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005fff:	8d 50 01             	lea    edx,[eax+0x1]
c0006002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006006:	83 c9 c0             	or     ecx,0xffffffc0
c0006009:	88 ca                	mov    dl,cl
c000600b:	88 10                	mov    BYTE PTR [eax],dl
c000600d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006011:	83 e0 3f             	and    eax,0x3f
c0006014:	88 c1                	mov    cl,al
c0006016:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000601a:	8d 50 01             	lea    edx,[eax+0x1]
c000601d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006021:	83 c9 80             	or     ecx,0xffffff80
c0006024:	88 ca                	mov    dl,cl
c0006026:	88 10                	mov    BYTE PTR [eax],dl
c0006028:	eb 56                	jmp    c0006080 <ucs2utfn+0x104>
c000602a:	66 90                	xchg   ax,ax
c000602c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006030:	c1 f8 0c             	sar    eax,0xc
c0006033:	88 c1                	mov    cl,al
c0006035:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006039:	8d 50 01             	lea    edx,[eax+0x1]
c000603c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006040:	83 c9 e0             	or     ecx,0xffffffe0
c0006043:	88 ca                	mov    dl,cl
c0006045:	88 10                	mov    BYTE PTR [eax],dl
c0006047:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000604b:	c1 f8 06             	sar    eax,0x6
c000604e:	83 e0 3f             	and    eax,0x3f
c0006051:	88 c1                	mov    cl,al
c0006053:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006057:	8d 50 01             	lea    edx,[eax+0x1]
c000605a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000605e:	83 c9 80             	or     ecx,0xffffff80
c0006061:	88 ca                	mov    dl,cl
c0006063:	88 10                	mov    BYTE PTR [eax],dl
c0006065:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006069:	83 e0 3f             	and    eax,0x3f
c000606c:	88 c1                	mov    cl,al
c000606e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006072:	8d 50 01             	lea    edx,[eax+0x1]
c0006075:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006079:	83 c9 80             	or     ecx,0xffffff80
c000607c:	88 ca                	mov    dl,cl
c000607e:	88 10                	mov    BYTE PTR [eax],dl
c0006080:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0006085:	0f 85 05 ff ff ff    	jne    c0005f90 <ucs2utfn+0x14>
c000608b:	eb 07                	jmp    c0006094 <ucs2utfn+0x118>
c000608d:	8d 76 00             	lea    esi,[esi+0x0]
c0006090:	90                   	nop
c0006091:	8d 76 00             	lea    esi,[esi+0x0]
c0006094:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006098:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000609b:	90                   	nop
c000609c:	83 c4 10             	add    esp,0x10
c000609f:	c3                   	ret    

c00060a0 <ucscompare>:
c00060a0:	53                   	push   ebx
c00060a1:	83 ec 18             	sub    esp,0x18
c00060a4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060ac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060b4:	e9 97 00 00 00       	jmp    c0006150 <ucscompare+0xb0>
c00060b9:	8d 76 00             	lea    esi,[esi+0x0]
c00060bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00060c4:	01 d0                	add    eax,edx
c00060c6:	8a 00                	mov    al,BYTE PTR [eax]
c00060c8:	0f be c0             	movsx  eax,al
c00060cb:	c1 e0 08             	shl    eax,0x8
c00060ce:	89 c2                	mov    edx,eax
c00060d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060d4:	8d 48 01             	lea    ecx,[eax+0x1]
c00060d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00060db:	01 c8                	add    eax,ecx
c00060dd:	8a 00                	mov    al,BYTE PTR [eax]
c00060df:	0f be c0             	movsx  eax,al
c00060e2:	09 d0                	or     eax,edx
c00060e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00060e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060f0:	01 d0                	add    eax,edx
c00060f2:	8a 00                	mov    al,BYTE PTR [eax]
c00060f4:	0f be c0             	movsx  eax,al
c00060f7:	c1 e0 08             	shl    eax,0x8
c00060fa:	89 c2                	mov    edx,eax
c00060fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006100:	8d 48 01             	lea    ecx,[eax+0x1]
c0006103:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006107:	01 c8                	add    eax,ecx
c0006109:	8a 00                	mov    al,BYTE PTR [eax]
c000610b:	0f be c0             	movsx  eax,al
c000610e:	09 d0                	or     eax,edx
c0006110:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006114:	83 7c 24 04 3b       	cmp    DWORD PTR [esp+0x4],0x3b
c0006119:	74 45                	je     c0006160 <ucscompare+0xc0>
c000611b:	83 ec 0c             	sub    esp,0xc
c000611e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0006122:	e8 c9 a7 ff ff       	call   c00008f0 <tolower>
c0006127:	83 c4 10             	add    esp,0x10
c000612a:	89 c3                	mov    ebx,eax
c000612c:	83 ec 0c             	sub    esp,0xc
c000612f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006133:	e8 b8 a7 ff ff       	call   c00008f0 <tolower>
c0006138:	83 c4 10             	add    esp,0x10
c000613b:	39 c3                	cmp    ebx,eax
c000613d:	74 09                	je     c0006148 <ucscompare+0xa8>
c000613f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006144:	eb 6a                	jmp    c00061b0 <ucscompare+0x110>
c0006146:	66 90                	xchg   ax,ax
c0006148:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000614d:	8d 76 00             	lea    esi,[esi+0x0]
c0006150:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006154:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0006158:	0f 8c 5e ff ff ff    	jl     c00060bc <ucscompare+0x1c>
c000615e:	eb 04                	jmp    c0006164 <ucscompare+0xc4>
c0006160:	90                   	nop
c0006161:	8d 76 00             	lea    esi,[esi+0x0]
c0006164:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006168:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000616c:	01 d0                	add    eax,edx
c000616e:	8a 00                	mov    al,BYTE PTR [eax]
c0006170:	0f be c0             	movsx  eax,al
c0006173:	c1 e0 08             	shl    eax,0x8
c0006176:	89 c2                	mov    edx,eax
c0006178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000617c:	8d 48 01             	lea    ecx,[eax+0x1]
c000617f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006183:	01 c8                	add    eax,ecx
c0006185:	8a 00                	mov    al,BYTE PTR [eax]
c0006187:	0f be c0             	movsx  eax,al
c000618a:	09 d0                	or     eax,edx
c000618c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006190:	83 7c 24 08 2f       	cmp    DWORD PTR [esp+0x8],0x2f
c0006195:	74 11                	je     c00061a8 <ucscompare+0x108>
c0006197:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000619c:	74 0a                	je     c00061a8 <ucscompare+0x108>
c000619e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00061a3:	eb 0b                	jmp    c00061b0 <ucscompare+0x110>
c00061a5:	8d 76 00             	lea    esi,[esi+0x0]
c00061a8:	b8 00 00 00 00       	mov    eax,0x0
c00061ad:	8d 76 00             	lea    esi,[esi+0x0]
c00061b0:	83 c4 18             	add    esp,0x18
c00061b3:	5b                   	pop    ebx
c00061b4:	c3                   	ret    
c00061b5:	8d 76 00             	lea    esi,[esi+0x0]

c00061b8 <isjoliet>:
c00061b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061bc:	8a 00                	mov    al,BYTE PTR [eax]
c00061be:	3c 25                	cmp    al,0x25
c00061c0:	75 3e                	jne    c0006200 <isjoliet+0x48>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	40                   	inc    eax
c00061c7:	8a 00                	mov    al,BYTE PTR [eax]
c00061c9:	3c 2f                	cmp    al,0x2f
c00061cb:	75 33                	jne    c0006200 <isjoliet+0x48>
c00061cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061d1:	83 c0 02             	add    eax,0x2
c00061d4:	8a 00                	mov    al,BYTE PTR [eax]
c00061d6:	0f be c0             	movsx  eax,al
c00061d9:	83 f8 43             	cmp    eax,0x43
c00061dc:	74 12                	je     c00061f0 <isjoliet+0x38>
c00061de:	83 f8 45             	cmp    eax,0x45
c00061e1:	74 15                	je     c00061f8 <isjoliet+0x40>
c00061e3:	83 f8 40             	cmp    eax,0x40
c00061e6:	75 18                	jne    c0006200 <isjoliet+0x48>
c00061e8:	b8 01 00 00 00       	mov    eax,0x1
c00061ed:	c3                   	ret    
c00061ee:	66 90                	xchg   ax,ax
c00061f0:	b8 02 00 00 00       	mov    eax,0x2
c00061f5:	c3                   	ret    
c00061f6:	66 90                	xchg   ax,ax
c00061f8:	b8 03 00 00 00       	mov    eax,0x3
c00061fd:	c3                   	ret    
c00061fe:	66 90                	xchg   ax,ax
c0006200:	b8 00 00 00 00       	mov    eax,0x0
c0006205:	c3                   	ret    
c0006206:	66 90                	xchg   ax,ax

c0006208 <htohl_32>:
c0006208:	83 ec 10             	sub    esp,0x10
c000620b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000620f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006213:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006217:	8a 00                	mov    al,BYTE PTR [eax]
c0006219:	31 d2                	xor    edx,edx
c000621b:	88 c2                	mov    dl,al
c000621d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006221:	40                   	inc    eax
c0006222:	8a 00                	mov    al,BYTE PTR [eax]
c0006224:	25 ff 00 00 00       	and    eax,0xff
c0006229:	c1 e0 08             	shl    eax,0x8
c000622c:	09 c2                	or     edx,eax
c000622e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006232:	83 c0 02             	add    eax,0x2
c0006235:	8a 00                	mov    al,BYTE PTR [eax]
c0006237:	25 ff 00 00 00       	and    eax,0xff
c000623c:	c1 e0 10             	shl    eax,0x10
c000623f:	09 c2                	or     edx,eax
c0006241:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006245:	83 c0 03             	add    eax,0x3
c0006248:	8a 00                	mov    al,BYTE PTR [eax]
c000624a:	25 ff 00 00 00       	and    eax,0xff
c000624f:	c1 e0 18             	shl    eax,0x18
c0006252:	09 d0                	or     eax,edx
c0006254:	83 c4 10             	add    esp,0x10
c0006257:	c3                   	ret    

c0006258 <iso_733>:
c0006258:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000625c:	e8 a7 ff ff ff       	call   c0006208 <htohl_32>
c0006261:	83 c4 04             	add    esp,0x4
c0006264:	c3                   	ret    
c0006265:	8d 76 00             	lea    esi,[esi+0x0]

c0006268 <bclear_cache>:
c0006268:	83 ec 10             	sub    esp,0x10
c000626b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0006273:	eb 23                	jmp    c0006298 <bclear_cache+0x30>
c0006275:	8d 76 00             	lea    esi,[esi+0x0]
c0006278:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000627c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0006283:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006287:	01 d0                	add    eax,edx
c0006289:	8b 00                	mov    eax,DWORD PTR [eax]
c000628b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006291:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0006295:	8d 76 00             	lea    esi,[esi+0x0]
c0006298:	83 7c 24 0c 0f       	cmp    DWORD PTR [esp+0xc],0xf
c000629d:	7e d9                	jle    c0006278 <bclear_cache+0x10>
c000629f:	90                   	nop
c00062a0:	83 c4 10             	add    esp,0x10
c00062a3:	c3                   	ret    

c00062a4 <bgrad_cache>:
c00062a4:	83 ec 10             	sub    esp,0x10
c00062a7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00062ac:	78 6e                	js     c000631c <bgrad_cache+0x78>
c00062ae:	83 7c 24 18 0e       	cmp    DWORD PTR [esp+0x18],0xe
c00062b3:	7f 67                	jg     c000631c <bgrad_cache+0x78>
c00062b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00062c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062c4:	01 d0                	add    eax,edx
c00062c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00062c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d4:	eb 2e                	jmp    c0006304 <bgrad_cache+0x60>
c00062d6:	66 90                	xchg   ax,ax
c00062d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062dc:	40                   	inc    eax
c00062dd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00062e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e8:	01 d0                	add    eax,edx
c00062ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062ee:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00062f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062f9:	01 ca                	add    edx,ecx
c00062fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00062fd:	89 02                	mov    DWORD PTR [edx],eax
c00062ff:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0006303:	90                   	nop
c0006304:	83 7c 24 0c 0e       	cmp    DWORD PTR [esp+0xc],0xe
c0006309:	7e cd                	jle    c00062d8 <bgrad_cache+0x34>
c000630b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000630f:	8d 50 3c             	lea    edx,[eax+0x3c]
c0006312:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006316:	89 02                	mov    DWORD PTR [edx],eax
c0006318:	eb 06                	jmp    c0006320 <bgrad_cache+0x7c>
c000631a:	66 90                	xchg   ax,ax
c000631c:	90                   	nop
c000631d:	8d 76 00             	lea    esi,[esi+0x0]
c0006320:	83 c4 10             	add    esp,0x10
c0006323:	c3                   	ret    

c0006324 <bclear>:
c0006324:	68 60 1c 02 c0       	push   0xc0021c60
c0006329:	e8 3a ff ff ff       	call   c0006268 <bclear_cache>
c000632e:	83 c4 04             	add    esp,0x4
c0006331:	68 a0 1c 02 c0       	push   0xc0021ca0
c0006336:	e8 2d ff ff ff       	call   c0006268 <bclear_cache>
c000633b:	83 c4 04             	add    esp,0x4
c000633e:	90                   	nop
c000633f:	c3                   	ret    

c0006340 <fncompare>:
c0006340:	53                   	push   ebx
c0006341:	83 ec 18             	sub    esp,0x18
c0006344:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000634c:	e9 8f 00 00 00       	jmp    c00063e0 <fncompare+0xa0>
c0006351:	8d 76 00             	lea    esi,[esi+0x0]
c0006354:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006358:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000635c:	01 d0                	add    eax,edx
c000635e:	8a 00                	mov    al,BYTE PTR [eax]
c0006360:	3c 3b                	cmp    al,0x3b
c0006362:	0f 84 88 00 00 00    	je     c00063f0 <fncompare+0xb0>
c0006368:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000636c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006370:	01 d0                	add    eax,edx
c0006372:	8a 00                	mov    al,BYTE PTR [eax]
c0006374:	3c 2e                	cmp    al,0x2e
c0006376:	75 20                	jne    c0006398 <fncompare+0x58>
c0006378:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000637c:	48                   	dec    eax
c000637d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006381:	74 71                	je     c00063f4 <fncompare+0xb4>
c0006383:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006387:	8d 50 01             	lea    edx,[eax+0x1]
c000638a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000638e:	01 d0                	add    eax,edx
c0006390:	8a 00                	mov    al,BYTE PTR [eax]
c0006392:	3c 3b                	cmp    al,0x3b
c0006394:	74 5e                	je     c00063f4 <fncompare+0xb4>
c0006396:	66 90                	xchg   ax,ax
c0006398:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000639c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00063a0:	01 d0                	add    eax,edx
c00063a2:	8a 00                	mov    al,BYTE PTR [eax]
c00063a4:	0f be c0             	movsx  eax,al
c00063a7:	83 ec 0c             	sub    esp,0xc
c00063aa:	50                   	push   eax
c00063ab:	e8 40 a5 ff ff       	call   c00008f0 <tolower>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	89 c3                	mov    ebx,eax
c00063b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00063b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063bd:	01 d0                	add    eax,edx
c00063bf:	8a 00                	mov    al,BYTE PTR [eax]
c00063c1:	0f be c0             	movsx  eax,al
c00063c4:	83 ec 0c             	sub    esp,0xc
c00063c7:	50                   	push   eax
c00063c8:	e8 23 a5 ff ff       	call   c00008f0 <tolower>
c00063cd:	83 c4 10             	add    esp,0x10
c00063d0:	39 c3                	cmp    ebx,eax
c00063d2:	74 08                	je     c00063dc <fncompare+0x9c>
c00063d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00063d9:	eb 49                	jmp    c0006424 <fncompare+0xe4>
c00063db:	90                   	nop
c00063dc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00063e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e4:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00063e8:	0f 8c 66 ff ff ff    	jl     c0006354 <fncompare+0x14>
c00063ee:	eb 04                	jmp    c00063f4 <fncompare+0xb4>
c00063f0:	90                   	nop
c00063f1:	8d 76 00             	lea    esi,[esi+0x0]
c00063f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00063f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063fc:	01 d0                	add    eax,edx
c00063fe:	8a 00                	mov    al,BYTE PTR [eax]
c0006400:	3c 2f                	cmp    al,0x2f
c0006402:	74 18                	je     c000641c <fncompare+0xdc>
c0006404:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006408:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000640c:	01 d0                	add    eax,edx
c000640e:	8a 00                	mov    al,BYTE PTR [eax]
c0006410:	84 c0                	test   al,al
c0006412:	74 08                	je     c000641c <fncompare+0xdc>
c0006414:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006419:	eb 09                	jmp    c0006424 <fncompare+0xe4>
c000641b:	90                   	nop
c000641c:	b8 00 00 00 00       	mov    eax,0x0
c0006421:	8d 76 00             	lea    esi,[esi+0x0]
c0006424:	83 c4 18             	add    esp,0x18
c0006427:	5b                   	pop    ebx
c0006428:	c3                   	ret    
c0006429:	8d 76 00             	lea    esi,[esi+0x0]

c000642c <iso_break_all>:
c000642c:	83 ec 10             	sub    esp,0x10
c000642f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0006437:	eb 27                	jmp    c0006460 <iso_break_all+0x34>
c0006439:	8d 76 00             	lea    esi,[esi+0x0]
c000643c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006440:	89 d0                	mov    eax,edx
c0006442:	c1 e0 03             	shl    eax,0x3
c0006445:	01 d0                	add    eax,edx
c0006447:	c1 e0 02             	shl    eax,0x2
c000644a:	01 d0                	add    eax,edx
c000644c:	c1 e0 02             	shl    eax,0x2
c000644f:	05 70 13 02 c0       	add    eax,0xc0021370
c0006454:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c000645a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000645e:	66 90                	xchg   ax,ax
c0006460:	83 7c 24 0c 0f       	cmp    DWORD PTR [esp+0xc],0xf
c0006465:	7e d5                	jle    c000643c <iso_break_all+0x10>
c0006467:	90                   	nop
c0006468:	83 c4 10             	add    esp,0x10
c000646b:	c3                   	ret    

c000646c <iso_close>:
c000646c:	83 7c 24 04 0f       	cmp    DWORD PTR [esp+0x4],0xf
c0006471:	7f 21                	jg     c0006494 <iso_close+0x28>
c0006473:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006477:	89 d0                	mov    eax,edx
c0006479:	c1 e0 03             	shl    eax,0x3
c000647c:	01 d0                	add    eax,edx
c000647e:	c1 e0 02             	shl    eax,0x2
c0006481:	01 d0                	add    eax,edx
c0006483:	c1 e0 02             	shl    eax,0x2
c0006486:	05 e0 12 02 c0       	add    eax,0xc00212e0
c000648b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006491:	8d 76 00             	lea    esi,[esi+0x0]
c0006494:	90                   	nop
c0006495:	c3                   	ret    
c0006496:	66 90                	xchg   ax,ax

c0006498 <iso_seek>:
c0006498:	83 ec 0c             	sub    esp,0xc
c000649b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000649f:	89 04 24             	mov    DWORD PTR [esp],eax
c00064a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00064a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00064aa:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c00064af:	7f 3f                	jg     c00064f0 <iso_seek+0x58>
c00064b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00064b5:	89 d0                	mov    eax,edx
c00064b7:	c1 e0 03             	shl    eax,0x3
c00064ba:	01 d0                	add    eax,edx
c00064bc:	c1 e0 02             	shl    eax,0x2
c00064bf:	01 d0                	add    eax,edx
c00064c1:	c1 e0 02             	shl    eax,0x2
c00064c4:	05 e0 12 02 c0       	add    eax,0xc00212e0
c00064c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00064cb:	85 c0                	test   eax,eax
c00064cd:	74 21                	je     c00064f0 <iso_seek+0x58>
c00064cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00064d3:	89 d0                	mov    eax,edx
c00064d5:	c1 e0 03             	shl    eax,0x3
c00064d8:	01 d0                	add    eax,edx
c00064da:	c1 e0 02             	shl    eax,0x2
c00064dd:	01 d0                	add    eax,edx
c00064df:	c1 e0 02             	shl    eax,0x2
c00064e2:	05 70 13 02 c0       	add    eax,0xc0021370
c00064e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00064e9:	85 c0                	test   eax,eax
c00064eb:	74 13                	je     c0006500 <iso_seek+0x68>
c00064ed:	8d 76 00             	lea    esi,[esi+0x0]
c00064f0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00064f5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00064fa:	e9 51 01 00 00       	jmp    c0006650 <iso_seek+0x1b8>
c00064ff:	90                   	nop
c0006500:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0006505:	74 35                	je     c000653c <iso_seek+0xa4>
c0006507:	83 7c 24 1c 02       	cmp    DWORD PTR [esp+0x1c],0x2
c000650c:	74 6a                	je     c0006578 <iso_seek+0xe0>
c000650e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0006513:	0f 85 9b 00 00 00    	jne    c00065b4 <iso_seek+0x11c>
c0006519:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000651c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006520:	89 d0                	mov    eax,edx
c0006522:	c1 e0 03             	shl    eax,0x3
c0006525:	01 d0                	add    eax,edx
c0006527:	c1 e0 02             	shl    eax,0x2
c000652a:	01 d0                	add    eax,edx
c000652c:	c1 e0 02             	shl    eax,0x2
c000652f:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0006534:	89 08                	mov    DWORD PTR [eax],ecx
c0006536:	e9 89 00 00 00       	jmp    c00065c4 <iso_seek+0x12c>
c000653b:	90                   	nop
c000653c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006540:	89 d0                	mov    eax,edx
c0006542:	c1 e0 03             	shl    eax,0x3
c0006545:	01 d0                	add    eax,edx
c0006547:	c1 e0 02             	shl    eax,0x2
c000654a:	01 d0                	add    eax,edx
c000654c:	c1 e0 02             	shl    eax,0x2
c000654f:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0006554:	8b 10                	mov    edx,DWORD PTR [eax]
c0006556:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0006559:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000655c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006560:	89 d0                	mov    eax,edx
c0006562:	c1 e0 03             	shl    eax,0x3
c0006565:	01 d0                	add    eax,edx
c0006567:	c1 e0 02             	shl    eax,0x2
c000656a:	01 d0                	add    eax,edx
c000656c:	c1 e0 02             	shl    eax,0x2
c000656f:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0006574:	89 08                	mov    DWORD PTR [eax],ecx
c0006576:	eb 4c                	jmp    c00065c4 <iso_seek+0x12c>
c0006578:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000657c:	89 d0                	mov    eax,edx
c000657e:	c1 e0 03             	shl    eax,0x3
c0006581:	01 d0                	add    eax,edx
c0006583:	c1 e0 02             	shl    eax,0x2
c0006586:	01 d0                	add    eax,edx
c0006588:	c1 e0 02             	shl    eax,0x2
c000658b:	05 ec 12 02 c0       	add    eax,0xc00212ec
c0006590:	8b 10                	mov    edx,DWORD PTR [eax]
c0006592:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0006595:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0006598:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000659c:	89 d0                	mov    eax,edx
c000659e:	c1 e0 03             	shl    eax,0x3
c00065a1:	01 d0                	add    eax,edx
c00065a3:	c1 e0 02             	shl    eax,0x2
c00065a6:	01 d0                	add    eax,edx
c00065a8:	c1 e0 02             	shl    eax,0x2
c00065ab:	05 e8 12 02 c0       	add    eax,0xc00212e8
c00065b0:	89 08                	mov    DWORD PTR [eax],ecx
c00065b2:	eb 10                	jmp    c00065c4 <iso_seek+0x12c>
c00065b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00065b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00065be:	e9 8d 00 00 00       	jmp    c0006650 <iso_seek+0x1b8>
c00065c3:	90                   	nop
c00065c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00065c8:	89 d0                	mov    eax,edx
c00065ca:	c1 e0 03             	shl    eax,0x3
c00065cd:	01 d0                	add    eax,edx
c00065cf:	c1 e0 02             	shl    eax,0x2
c00065d2:	01 d0                	add    eax,edx
c00065d4:	c1 e0 02             	shl    eax,0x2
c00065d7:	05 e8 12 02 c0       	add    eax,0xc00212e8
c00065dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00065de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00065e2:	89 d0                	mov    eax,edx
c00065e4:	c1 e0 03             	shl    eax,0x3
c00065e7:	01 d0                	add    eax,edx
c00065e9:	c1 e0 02             	shl    eax,0x2
c00065ec:	01 d0                	add    eax,edx
c00065ee:	c1 e0 02             	shl    eax,0x2
c00065f1:	05 ec 12 02 c0       	add    eax,0xc00212ec
c00065f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00065f8:	39 c1                	cmp    ecx,eax
c00065fa:	76 34                	jbe    c0006630 <iso_seek+0x198>
c00065fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006600:	89 d0                	mov    eax,edx
c0006602:	c1 e0 03             	shl    eax,0x3
c0006605:	01 d0                	add    eax,edx
c0006607:	c1 e0 02             	shl    eax,0x2
c000660a:	01 d0                	add    eax,edx
c000660c:	c1 e0 02             	shl    eax,0x2
c000660f:	05 ec 12 02 c0       	add    eax,0xc00212ec
c0006614:	8b 08                	mov    ecx,DWORD PTR [eax]
c0006616:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000661a:	89 d0                	mov    eax,edx
c000661c:	c1 e0 03             	shl    eax,0x3
c000661f:	01 d0                	add    eax,edx
c0006621:	c1 e0 02             	shl    eax,0x2
c0006624:	01 d0                	add    eax,edx
c0006626:	c1 e0 02             	shl    eax,0x2
c0006629:	05 e8 12 02 c0       	add    eax,0xc00212e8
c000662e:	89 08                	mov    DWORD PTR [eax],ecx
c0006630:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006634:	89 d0                	mov    eax,edx
c0006636:	c1 e0 03             	shl    eax,0x3
c0006639:	01 d0                	add    eax,edx
c000663b:	c1 e0 02             	shl    eax,0x2
c000663e:	01 d0                	add    eax,edx
c0006640:	c1 e0 02             	shl    eax,0x2
c0006643:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0006648:	8b 00                	mov    eax,DWORD PTR [eax]
c000664a:	ba 00 00 00 00       	mov    edx,0x0
c000664f:	90                   	nop
c0006650:	83 c4 0c             	add    esp,0xc
c0006653:	c3                   	ret    

c0006654 <iso_tell>:
c0006654:	83 7c 24 04 0f       	cmp    DWORD PTR [esp+0x4],0xf
c0006659:	7f 3d                	jg     c0006698 <iso_tell+0x44>
c000665b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000665f:	89 d0                	mov    eax,edx
c0006661:	c1 e0 03             	shl    eax,0x3
c0006664:	01 d0                	add    eax,edx
c0006666:	c1 e0 02             	shl    eax,0x2
c0006669:	01 d0                	add    eax,edx
c000666b:	c1 e0 02             	shl    eax,0x2
c000666e:	05 e0 12 02 c0       	add    eax,0xc00212e0
c0006673:	8b 00                	mov    eax,DWORD PTR [eax]
c0006675:	85 c0                	test   eax,eax
c0006677:	74 1f                	je     c0006698 <iso_tell+0x44>
c0006679:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000667d:	89 d0                	mov    eax,edx
c000667f:	c1 e0 03             	shl    eax,0x3
c0006682:	01 d0                	add    eax,edx
c0006684:	c1 e0 02             	shl    eax,0x2
c0006687:	01 d0                	add    eax,edx
c0006689:	c1 e0 02             	shl    eax,0x2
c000668c:	05 70 13 02 c0       	add    eax,0xc0021370
c0006691:	8b 00                	mov    eax,DWORD PTR [eax]
c0006693:	85 c0                	test   eax,eax
c0006695:	74 0d                	je     c00066a4 <iso_tell+0x50>
c0006697:	90                   	nop
c0006698:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000669d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00066a2:	c3                   	ret    
c00066a3:	90                   	nop
c00066a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00066a8:	89 d0                	mov    eax,edx
c00066aa:	c1 e0 03             	shl    eax,0x3
c00066ad:	01 d0                	add    eax,edx
c00066af:	c1 e0 02             	shl    eax,0x2
c00066b2:	01 d0                	add    eax,edx
c00066b4:	c1 e0 02             	shl    eax,0x2
c00066b7:	05 e8 12 02 c0       	add    eax,0xc00212e8
c00066bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00066be:	ba 00 00 00 00       	mov    edx,0x0
c00066c3:	c3                   	ret    

c00066c4 <iso_total>:
c00066c4:	83 7c 24 04 0f       	cmp    DWORD PTR [esp+0x4],0xf
c00066c9:	7f 3d                	jg     c0006708 <iso_total+0x44>
c00066cb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00066cf:	89 d0                	mov    eax,edx
c00066d1:	c1 e0 03             	shl    eax,0x3
c00066d4:	01 d0                	add    eax,edx
c00066d6:	c1 e0 02             	shl    eax,0x2
c00066d9:	01 d0                	add    eax,edx
c00066db:	c1 e0 02             	shl    eax,0x2
c00066de:	05 e0 12 02 c0       	add    eax,0xc00212e0
c00066e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00066e5:	85 c0                	test   eax,eax
c00066e7:	74 1f                	je     c0006708 <iso_total+0x44>
c00066e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00066ed:	89 d0                	mov    eax,edx
c00066ef:	c1 e0 03             	shl    eax,0x3
c00066f2:	01 d0                	add    eax,edx
c00066f4:	c1 e0 02             	shl    eax,0x2
c00066f7:	01 d0                	add    eax,edx
c00066f9:	c1 e0 02             	shl    eax,0x2
c00066fc:	05 70 13 02 c0       	add    eax,0xc0021370
c0006701:	8b 00                	mov    eax,DWORD PTR [eax]
c0006703:	85 c0                	test   eax,eax
c0006705:	74 09                	je     c0006710 <iso_total+0x4c>
c0006707:	90                   	nop
c0006708:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000670d:	c3                   	ret    
c000670e:	66 90                	xchg   ax,ax
c0006710:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006714:	89 d0                	mov    eax,edx
c0006716:	c1 e0 03             	shl    eax,0x3
c0006719:	01 d0                	add    eax,edx
c000671b:	c1 e0 02             	shl    eax,0x2
c000671e:	01 d0                	add    eax,edx
c0006720:	c1 e0 02             	shl    eax,0x2
c0006723:	05 ec 12 02 c0       	add    eax,0xc00212ec
c0006728:	8b 00                	mov    eax,DWORD PTR [eax]
c000672a:	c3                   	ret    
c000672b:	90                   	nop

c000672c <fn_postprocess>:
c000672c:	83 ec 1c             	sub    esp,0x1c
c000672f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006733:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006737:	eb 27                	jmp    c0006760 <fn_postprocess+0x34>
c0006739:	8d 76 00             	lea    esi,[esi+0x0]
c000673c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006740:	8a 00                	mov    al,BYTE PTR [eax]
c0006742:	0f be c0             	movsx  eax,al
c0006745:	83 ec 0c             	sub    esp,0xc
c0006748:	50                   	push   eax
c0006749:	e8 a2 a1 ff ff       	call   c00008f0 <tolower>
c000674e:	83 c4 10             	add    esp,0x10
c0006751:	88 c2                	mov    dl,al
c0006753:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006757:	88 10                	mov    BYTE PTR [eax],dl
c0006759:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000675d:	8d 76 00             	lea    esi,[esi+0x0]
c0006760:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006764:	8a 00                	mov    al,BYTE PTR [eax]
c0006766:	84 c0                	test   al,al
c0006768:	74 0a                	je     c0006774 <fn_postprocess+0x48>
c000676a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000676e:	8a 00                	mov    al,BYTE PTR [eax]
c0006770:	3c 3b                	cmp    al,0x3b
c0006772:	75 c8                	jne    c000673c <fn_postprocess+0x10>
c0006774:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006778:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000677b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000677f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0006783:	76 13                	jbe    c0006798 <fn_postprocess+0x6c>
c0006785:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006789:	48                   	dec    eax
c000678a:	8a 00                	mov    al,BYTE PTR [eax]
c000678c:	3c 2e                	cmp    al,0x2e
c000678e:	75 08                	jne    c0006798 <fn_postprocess+0x6c>
c0006790:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006794:	48                   	dec    eax
c0006795:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006798:	90                   	nop
c0006799:	83 c4 1c             	add    esp,0x1c
c000679c:	c3                   	ret    
c000679d:	8d 76 00             	lea    esi,[esi+0x0]

c00067a0 <iso_reset>:
c00067a0:	e8 87 fc ff ff       	call   c000642c <iso_break_all>
c00067a5:	e8 7a fb ff ff       	call   c0006324 <bclear>
c00067aa:	c7 05 e4 1c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ce4,0x0
c00067b4:	b8 00 00 00 00       	mov    eax,0x0
c00067b9:	c3                   	ret    
c00067ba:	66 90                	xchg   ax,ax

c00067bc <init_percd>:
c00067bc:	57                   	push   edi
c00067bd:	56                   	push   esi
c00067be:	53                   	push   ebx
c00067bf:	83 ec 30             	sub    esp,0x30
c00067c2:	e8 d9 ff ff ff       	call   c00067a0 <iso_reset>
c00067c7:	c7 05 e0 1c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ce0,0x0
c00067d1:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c00067d9:	e9 86 00 00 00       	jmp    c0006864 <init_percd+0xa8>
c00067de:	66 90                	xchg   ax,ax
c00067e0:	8b 15 4c 1c 02 c0    	mov    edx,DWORD PTR ds:0xc0021c4c
c00067e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00067ea:	01 d0                	add    eax,edx
c00067ec:	83 c0 10             	add    eax,0x10
c00067ef:	83 ec 0c             	sub    esp,0xc
c00067f2:	50                   	push   eax
c00067f3:	e8 b4 05 00 00       	call   c0006dac <biread>
c00067f8:	83 c4 10             	add    esp,0x10
c00067fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00067ff:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0006804:	79 0a                	jns    c0006810 <init_percd+0x54>
c0006806:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000680a:	e9 51 01 00 00       	jmp    c0006960 <init_percd+0x1a4>
c000680f:	90                   	nop
c0006810:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006814:	8b 04 85 a0 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde360]
c000681b:	83 c0 04             	add    eax,0x4
c000681e:	83 ec 04             	sub    esp,0x4
c0006821:	6a 06                	push   0x6
c0006823:	68 c0 e8 01 c0       	push   0xc001e8c0
c0006828:	50                   	push   eax
c0006829:	e8 82 9b ff ff       	call   c00003b0 <memcmp>
c000682e:	83 c4 10             	add    esp,0x10
c0006831:	85 c0                	test   eax,eax
c0006833:	75 2b                	jne    c0006860 <init_percd+0xa4>
c0006835:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006839:	8b 04 85 a0 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde360]
c0006840:	83 c0 04             	add    eax,0x4
c0006843:	83 c0 58             	add    eax,0x58
c0006846:	83 ec 0c             	sub    esp,0xc
c0006849:	50                   	push   eax
c000684a:	e8 69 f9 ff ff       	call   c00061b8 <isjoliet>
c000684f:	83 c4 10             	add    esp,0x10
c0006852:	a3 e0 1c 02 c0       	mov    ds:0xc0021ce0,eax
c0006857:	a1 e0 1c 02 c0       	mov    eax,ds:0xc0021ce0
c000685c:	85 c0                	test   eax,eax
c000685e:	75 14                	jne    c0006874 <init_percd+0xb8>
c0006860:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0006864:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0006869:	0f 8e 71 ff ff ff    	jle    c00067e0 <init_percd+0x24>
c000686f:	eb 07                	jmp    c0006878 <init_percd+0xbc>
c0006871:	8d 76 00             	lea    esi,[esi+0x0]
c0006874:	90                   	nop
c0006875:	8d 76 00             	lea    esi,[esi+0x0]
c0006878:	a1 e0 1c 02 c0       	mov    eax,ds:0xc0021ce0
c000687d:	85 c0                	test   eax,eax
c000687f:	75 5b                	jne    c00068dc <init_percd+0x120>
c0006881:	a1 4c 1c 02 c0       	mov    eax,ds:0xc0021c4c
c0006886:	83 c0 10             	add    eax,0x10
c0006889:	83 ec 0c             	sub    esp,0xc
c000688c:	50                   	push   eax
c000688d:	e8 1a 05 00 00       	call   c0006dac <biread>
c0006892:	83 c4 10             	add    esp,0x10
c0006895:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006899:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000689e:	79 0c                	jns    c00068ac <init_percd+0xf0>
c00068a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00068a4:	e9 b7 00 00 00       	jmp    c0006960 <init_percd+0x1a4>
c00068a9:	8d 76 00             	lea    esi,[esi+0x0]
c00068ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00068b0:	8b 04 85 a0 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde360]
c00068b7:	83 c0 04             	add    eax,0x4
c00068ba:	83 ec 04             	sub    esp,0x4
c00068bd:	6a 06                	push   0x6
c00068bf:	68 c7 e8 01 c0       	push   0xc001e8c7
c00068c4:	50                   	push   eax
c00068c5:	e8 e6 9a ff ff       	call   c00003b0 <memcmp>
c00068ca:	83 c4 10             	add    esp,0x10
c00068cd:	85 c0                	test   eax,eax
c00068cf:	74 0b                	je     c00068dc <init_percd+0x120>
c00068d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068d6:	e9 85 00 00 00       	jmp    c0006960 <init_percd+0x1a4>
c00068db:	90                   	nop
c00068dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00068e0:	8b 04 85 a0 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde360]
c00068e7:	83 c0 04             	add    eax,0x4
c00068ea:	05 9c 00 00 00       	add    eax,0x9c
c00068ef:	c7 44 24 24 20 1c 02 c0 	mov    DWORD PTR [esp+0x24],0xc0021c20
c00068f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068fb:	c7 44 24 1c 22 00 00 00 	mov    DWORD PTR [esp+0x1c],0x22
c0006903:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006907:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000690b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000690f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0006913:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006917:	89 c6                	mov    esi,eax
c0006919:	89 d7                	mov    edi,edx
c000691b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000691d:	89 c8                	mov    eax,ecx
c000691f:	89 fa                	mov    edx,edi
c0006921:	89 f3                	mov    ebx,esi
c0006923:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0006927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000692b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000692f:	83 ec 0c             	sub    esp,0xc
c0006932:	68 22 1c 02 c0       	push   0xc0021c22
c0006937:	e8 1c f9 ff ff       	call   c0006258 <iso_733>
c000693c:	83 c4 10             	add    esp,0x10
c000693f:	a3 48 1c 02 c0       	mov    ds:0xc0021c48,eax
c0006944:	83 ec 0c             	sub    esp,0xc
c0006947:	68 2a 1c 02 c0       	push   0xc0021c2a
c000694c:	e8 07 f9 ff ff       	call   c0006258 <iso_733>
c0006951:	83 c4 10             	add    esp,0x10
c0006954:	a3 44 1c 02 c0       	mov    ds:0xc0021c44,eax
c0006959:	b8 00 00 00 00       	mov    eax,0x0
c000695e:	66 90                	xchg   ax,ax
c0006960:	83 c4 30             	add    esp,0x30
c0006963:	5b                   	pop    ebx
c0006964:	5e                   	pop    esi
c0006965:	5f                   	pop    edi
c0006966:	c3                   	ret    
c0006967:	90                   	nop

c0006968 <bread_cache>:
c0006968:	83 ec 1c             	sub    esp,0x1c
c000696b:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0006973:	c7 44 24 0c 0f 00 00 00 	mov    DWORD PTR [esp+0xc],0xf
c000697b:	eb 3f                	jmp    c00069bc <bread_cache+0x54>
c000697d:	8d 76 00             	lea    esi,[esi+0x0]
c0006980:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006984:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000698b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000698f:	01 d0                	add    eax,edx
c0006991:	8b 00                	mov    eax,DWORD PTR [eax]
c0006993:	8b 00                	mov    eax,DWORD PTR [eax]
c0006995:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0006999:	75 1d                	jne    c00069b8 <bread_cache+0x50>
c000699b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000699f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00069a3:	e8 fc f8 ff ff       	call   c00062a4 <bgrad_cache>
c00069a8:	83 c4 08             	add    esp,0x8
c00069ab:	c7 44 24 08 0f 00 00 00 	mov    DWORD PTR [esp+0x8],0xf
c00069b3:	e9 d0 00 00 00       	jmp    c0006a88 <bread_cache+0x120>
c00069b8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00069bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00069c1:	79 bd                	jns    c0006980 <bread_cache+0x18>
c00069c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00069cb:	eb 23                	jmp    c00069f0 <bread_cache+0x88>
c00069cd:	8d 76 00             	lea    esi,[esi+0x0]
c00069d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069d4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00069db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00069df:	01 d0                	add    eax,edx
c00069e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00069e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00069e5:	83 f8 ff             	cmp    eax,0xffffffff
c00069e8:	74 12                	je     c00069fc <bread_cache+0x94>
c00069ea:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00069ee:	66 90                	xchg   ax,ax
c00069f0:	83 7c 24 0c 0f       	cmp    DWORD PTR [esp+0xc],0xf
c00069f5:	7e d9                	jle    c00069d0 <bread_cache+0x68>
c00069f7:	eb 07                	jmp    c0006a00 <bread_cache+0x98>
c00069f9:	8d 76 00             	lea    esi,[esi+0x0]
c00069fc:	90                   	nop
c00069fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006a00:	83 7c 24 0c 0f       	cmp    DWORD PTR [esp+0xc],0xf
c0006a05:	7e 09                	jle    c0006a10 <bread_cache+0xa8>
c0006a07:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0006a0f:	90                   	nop
c0006a10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a14:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0006a1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006a1f:	01 d0                	add    eax,edx
c0006a21:	8b 00                	mov    eax,DWORD PTR [eax]
c0006a23:	83 c0 04             	add    eax,0x4
c0006a26:	83 ec 04             	sub    esp,0x4
c0006a29:	6a 01                	push   0x1
c0006a2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0006a2f:	50                   	push   eax
c0006a30:	e8 2f f3 ff ff       	call   c0005d64 <isoReadDiscSector>
c0006a35:	83 c4 10             	add    esp,0x10
c0006a38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006a3c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0006a41:	79 11                	jns    c0006a54 <bread_cache+0xec>
c0006a43:	e8 74 fd ff ff       	call   c00067bc <init_percd>
c0006a48:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0006a50:	eb 36                	jmp    c0006a88 <bread_cache+0x120>
c0006a52:	66 90                	xchg   ax,ax
c0006a54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a58:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0006a5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006a63:	01 d0                	add    eax,edx
c0006a65:	8b 00                	mov    eax,DWORD PTR [eax]
c0006a67:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0006a6b:	89 10                	mov    DWORD PTR [eax],edx
c0006a6d:	83 ec 08             	sub    esp,0x8
c0006a70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006a74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0006a78:	e8 27 f8 ff ff       	call   c00062a4 <bgrad_cache>
c0006a7d:	83 c4 10             	add    esp,0x10
c0006a80:	c7 44 24 08 0f 00 00 00 	mov    DWORD PTR [esp+0x8],0xf
c0006a88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a8c:	83 c4 1c             	add    esp,0x1c
c0006a8f:	c3                   	ret    

c0006a90 <bdread>:
c0006a90:	83 ec 0c             	sub    esp,0xc
c0006a93:	83 ec 08             	sub    esp,0x8
c0006a96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006a9a:	68 60 1c 02 c0       	push   0xc0021c60
c0006a9f:	e8 c4 fe ff ff       	call   c0006968 <bread_cache>
c0006aa4:	83 c4 10             	add    esp,0x10
c0006aa7:	83 c4 0c             	add    esp,0xc
c0006aaa:	c3                   	ret    
c0006aab:	90                   	nop

c0006aac <iso_read>:
c0006aac:	57                   	push   edi
c0006aad:	56                   	push   esi
c0006aae:	53                   	push   ebx
c0006aaf:	83 ec 30             	sub    esp,0x30
c0006ab2:	83 7c 24 40 0f       	cmp    DWORD PTR [esp+0x40],0xf
c0006ab7:	7f 3f                	jg     c0006af8 <iso_read+0x4c>
c0006ab9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0006abd:	89 d0                	mov    eax,edx
c0006abf:	c1 e0 03             	shl    eax,0x3
c0006ac2:	01 d0                	add    eax,edx
c0006ac4:	c1 e0 02             	shl    eax,0x2
c0006ac7:	01 d0                	add    eax,edx
c0006ac9:	c1 e0 02             	shl    eax,0x2
c0006acc:	05 e0 12 02 c0       	add    eax,0xc00212e0
c0006ad1:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ad3:	85 c0                	test   eax,eax
c0006ad5:	74 21                	je     c0006af8 <iso_read+0x4c>
c0006ad7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0006adb:	89 d0                	mov    eax,edx
c0006add:	c1 e0 03             	shl    eax,0x3
c0006ae0:	01 d0                	add    eax,edx
c0006ae2:	c1 e0 02             	shl    eax,0x2
c0006ae5:	01 d0                	add    eax,edx
c0006ae7:	c1 e0 02             	shl    eax,0x2
c0006aea:	05 70 13 02 c0       	add    eax,0xc0021370
c0006aef:	8b 00                	mov    eax,DWORD PTR [eax]
c0006af1:	85 c0                	test   eax,eax
c0006af3:	74 13                	je     c0006b08 <iso_read+0x5c>
c0006af5:	8d 76 00             	lea    esi,[esi+0x0]
c0006af8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006afd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006b02:	e9 9d 02 00 00       	jmp    c0006da4 <iso_read+0x2f8>
c0006b07:	90                   	nop
c0006b08:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006b10:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0006b14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b18:	e9 6b 02 00 00       	jmp    c0006d88 <iso_read+0x2dc>
c0006b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0006b20:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0006b24:	89 d0                	mov    eax,edx
c0006b26:	c1 e0 03             	shl    eax,0x3
c0006b29:	01 d0                	add    eax,edx
c0006b2b:	c1 e0 02             	shl    eax,0x2
c0006b2e:	01 d0                	add    eax,edx
c0006b30:	c1 e0 02             	shl    eax,0x2
c0006b33:	05 ec 12 02 c0       	add    eax,0xc00212ec
c0006b38:	8b 08                	mov    ecx,DWORD PTR [eax]
c0006b3a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0006b3e:	89 d0                	mov    eax,edx
c0006b40:	c1 e0 03             	shl    eax,0x3
c0006b43:	01 d0                	add    eax,edx
c0006b45:	c1 e0 02             	shl    eax,0x2
c0006b48:	01 d0                	add    eax,edx
c0006b4a:	c1 e0 02             	shl    eax,0x2
c0006b4d:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0006b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0006b54:	29 c1                	sub    ecx,eax
c0006b56:	89 ca                	mov    edx,ecx
c0006b58:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0006b5c:	39 d0                	cmp    eax,edx
c0006b5e:	76 04                	jbe    c0006b64 <iso_read+0xb8>
c0006b60:	89 d0                	mov    eax,edx
c0006b62:	66 90                	xchg   ax,ax
c0006b64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006b68:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0006b6d:	0f 84 25 02 00 00    	je     c0006d98 <iso_read+0x2ec>
c0006b73:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0006b77:	89 d0                	mov    eax,edx
c0006b79:	c1 e0 03             	shl    eax,0x3
c0006b7c:	01 d0                	add    eax,edx
c0006b7e:	c1 e0 02             	shl    eax,0x2
c0006b81:	01 d0                	add    eax,edx
c0006b83:	c1 e0 02             	shl    eax,0x2
c0006b86:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0006b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0006b8d:	25 ff 07 00 00       	and    eax,0x7ff
c0006b92:	ba 00 08 00 00       	mov    edx,0x800
c0006b97:	29 c2                	sub    edx,eax
c0006b99:	89 d0                	mov    eax,edx
c0006b9b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006b9f:	81 7c 24 24 00 08 00 00 	cmp    DWORD PTR [esp+0x24],0x800
c0006ba7:	0f 85 a3 00 00 00    	jne    c0006c50 <iso_read+0x1a4>
c0006bad:	81 7c 24 28 ff 07 00 00 	cmp    DWORD PTR [esp+0x28],0x7ff
c0006bb5:	0f 8e 95 00 00 00    	jle    c0006c50 <iso_read+0x1a4>
c0006bbb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006bbf:	85 c0                	test   eax,eax
c0006bc1:	79 05                	jns    c0006bc8 <iso_read+0x11c>
c0006bc3:	05 ff 07 00 00       	add    eax,0x7ff
c0006bc8:	c1 f8 0b             	sar    eax,0xb
c0006bcb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006bcf:	83 7c 24 24 20       	cmp    DWORD PTR [esp+0x24],0x20
c0006bd4:	7e 0a                	jle    c0006be0 <iso_read+0x134>
c0006bd6:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0006bde:	66 90                	xchg   ax,ax
c0006be0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006be4:	c1 e0 0b             	shl    eax,0xb
c0006be7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006beb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0006bef:	89 d0                	mov    eax,edx
c0006bf1:	c1 e0 03             	shl    eax,0x3
c0006bf4:	01 d0                	add    eax,edx
c0006bf6:	c1 e0 02             	shl    eax,0x2
c0006bf9:	01 d0                	add    eax,edx
c0006bfb:	c1 e0 02             	shl    eax,0x2
c0006bfe:	05 e0 12 02 c0       	add    eax,0xc00212e0
c0006c03:	8b 08                	mov    ecx,DWORD PTR [eax]
c0006c05:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0006c09:	89 d0                	mov    eax,edx
c0006c0b:	c1 e0 03             	shl    eax,0x3
c0006c0e:	01 d0                	add    eax,edx
c0006c10:	c1 e0 02             	shl    eax,0x2
c0006c13:	01 d0                	add    eax,edx
c0006c15:	c1 e0 02             	shl    eax,0x2
c0006c18:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0006c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0006c1f:	c1 e8 0b             	shr    eax,0xb
c0006c22:	01 c8                	add    eax,ecx
c0006c24:	83 ec 04             	sub    esp,0x4
c0006c27:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0006c2b:	50                   	push   eax
c0006c2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0006c30:	e8 2f f1 ff ff       	call   c0005d64 <isoReadDiscSector>
c0006c35:	83 c4 10             	add    esp,0x10
c0006c38:	85 c0                	test   eax,eax
c0006c3a:	0f 8f f4 00 00 00    	jg     c0006d34 <iso_read+0x288>
c0006c40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006c45:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006c4a:	e9 55 01 00 00       	jmp    c0006da4 <iso_read+0x2f8>
c0006c4f:	90                   	nop
c0006c50:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0006c54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006c58:	39 d0                	cmp    eax,edx
c0006c5a:	7e 04                	jle    c0006c60 <iso_read+0x1b4>
c0006c5c:	89 d0                	mov    eax,edx
c0006c5e:	66 90                	xchg   ax,ax
c0006c60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006c64:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0006c68:	89 d0                	mov    eax,edx
c0006c6a:	c1 e0 03             	shl    eax,0x3
c0006c6d:	01 d0                	add    eax,edx
c0006c6f:	c1 e0 02             	shl    eax,0x2
c0006c72:	01 d0                	add    eax,edx
c0006c74:	c1 e0 02             	shl    eax,0x2
c0006c77:	05 e0 12 02 c0       	add    eax,0xc00212e0
c0006c7c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0006c7e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0006c82:	89 d0                	mov    eax,edx
c0006c84:	c1 e0 03             	shl    eax,0x3
c0006c87:	01 d0                	add    eax,edx
c0006c89:	c1 e0 02             	shl    eax,0x2
c0006c8c:	01 d0                	add    eax,edx
c0006c8e:	c1 e0 02             	shl    eax,0x2
c0006c91:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0006c96:	8b 00                	mov    eax,DWORD PTR [eax]
c0006c98:	c1 e8 0b             	shr    eax,0xb
c0006c9b:	01 c8                	add    eax,ecx
c0006c9d:	83 ec 0c             	sub    esp,0xc
c0006ca0:	50                   	push   eax
c0006ca1:	e8 ea fd ff ff       	call   c0006a90 <bdread>
c0006ca6:	83 c4 10             	add    esp,0x10
c0006ca9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0006cad:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0006cb2:	79 10                	jns    c0006cc4 <iso_read+0x218>
c0006cb4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006cb9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006cbe:	e9 e1 00 00 00       	jmp    c0006da4 <iso_read+0x2f8>
c0006cc3:	90                   	nop
c0006cc4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0006cc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006ccc:	8b 04 85 60 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde3a0]
c0006cd3:	8d 58 04             	lea    ebx,[eax+0x4]
c0006cd6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0006cda:	89 d0                	mov    eax,edx
c0006cdc:	c1 e0 03             	shl    eax,0x3
c0006cdf:	01 d0                	add    eax,edx
c0006ce1:	c1 e0 02             	shl    eax,0x2
c0006ce4:	01 d0                	add    eax,edx
c0006ce6:	c1 e0 02             	shl    eax,0x2
c0006ce9:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0006cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0006cf0:	25 ff 07 00 00       	and    eax,0x7ff
c0006cf5:	8d 14 03             	lea    edx,[ebx+eax*1]
c0006cf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006cfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006d00:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006d04:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006d08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006d0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006d14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006d18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006d1c:	89 c6                	mov    esi,eax
c0006d1e:	89 d7                	mov    edi,edx
c0006d20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d22:	89 c8                	mov    eax,ecx
c0006d24:	89 fa                	mov    edx,edi
c0006d26:	89 f3                	mov    ebx,esi
c0006d28:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006d2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0006d30:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d33:	90                   	nop
c0006d34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006d38:	01 44 24 20          	add    DWORD PTR [esp+0x20],eax
c0006d3c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0006d40:	89 d0                	mov    eax,edx
c0006d42:	c1 e0 03             	shl    eax,0x3
c0006d45:	01 d0                	add    eax,edx
c0006d47:	c1 e0 02             	shl    eax,0x2
c0006d4a:	01 d0                	add    eax,edx
c0006d4c:	c1 e0 02             	shl    eax,0x2
c0006d4f:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0006d54:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006d5a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0006d5d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0006d61:	89 d0                	mov    eax,edx
c0006d63:	c1 e0 03             	shl    eax,0x3
c0006d66:	01 d0                	add    eax,edx
c0006d68:	c1 e0 02             	shl    eax,0x2
c0006d6b:	01 d0                	add    eax,edx
c0006d6d:	c1 e0 02             	shl    eax,0x2
c0006d70:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0006d75:	89 08                	mov    DWORD PTR [eax],ecx
c0006d77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006d7b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006d7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006d83:	01 44 24 2c          	add    DWORD PTR [esp+0x2c],eax
c0006d87:	90                   	nop
c0006d88:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006d8d:	0f 85 8d fd ff ff    	jne    c0006b20 <iso_read+0x74>
c0006d93:	eb 07                	jmp    c0006d9c <iso_read+0x2f0>
c0006d95:	8d 76 00             	lea    esi,[esi+0x0]
c0006d98:	90                   	nop
c0006d99:	8d 76 00             	lea    esi,[esi+0x0]
c0006d9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006da0:	99                   	cdq    
c0006da1:	8d 76 00             	lea    esi,[esi+0x0]
c0006da4:	83 c4 30             	add    esp,0x30
c0006da7:	5b                   	pop    ebx
c0006da8:	5e                   	pop    esi
c0006da9:	5f                   	pop    edi
c0006daa:	c3                   	ret    
c0006dab:	90                   	nop

c0006dac <biread>:
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	83 ec 08             	sub    esp,0x8
c0006db2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006db6:	68 a0 1c 02 c0       	push   0xc0021ca0
c0006dbb:	e8 a8 fb ff ff       	call   c0006968 <bread_cache>
c0006dc0:	83 c4 10             	add    esp,0x10
c0006dc3:	83 c4 0c             	add    esp,0xc
c0006dc6:	c3                   	ret    
c0006dc7:	90                   	nop

c0006dc8 <find_object>:
c0006dc8:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0006dce:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0006dd5:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c0006ddc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006de0:	89 84 24 14 01 00 00 	mov    DWORD PTR [esp+0x114],eax
c0006de7:	a1 e0 1c 02 c0       	mov    eax,ds:0xc0021ce0
c0006dec:	85 c0                	test   eax,eax
c0006dee:	0f 84 b4 03 00 00    	je     c00071a8 <find_object+0x3e0>
c0006df4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0006dfb:	ff b4 24 18 01 00 00 	push   DWORD PTR [esp+0x118]
c0006e02:	e8 a1 f0 ff ff       	call   c0005ea8 <utf2ucs>
c0006e07:	83 c4 08             	add    esp,0x8
c0006e0a:	e9 99 03 00 00       	jmp    c00071a8 <find_object+0x3e0>
c0006e0f:	90                   	nop
c0006e10:	83 ec 0c             	sub    esp,0xc
c0006e13:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0006e1a:	e8 8d ff ff ff       	call   c0006dac <biread>
c0006e1f:	83 c4 10             	add    esp,0x10
c0006e22:	89 84 24 10 01 00 00 	mov    DWORD PTR [esp+0x110],eax
c0006e29:	83 bc 24 10 01 00 00 00 	cmp    DWORD PTR [esp+0x110],0x0
c0006e31:	79 0d                	jns    c0006e40 <find_object+0x78>
c0006e33:	b8 00 00 00 00       	mov    eax,0x0
c0006e38:	e9 7f 03 00 00       	jmp    c00071bc <find_object+0x3f4>
c0006e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0006e40:	c7 84 24 2c 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x12c],0x0
c0006e4b:	e9 1c 03 00 00       	jmp    c000716c <find_object+0x3a4>
c0006e50:	8b 84 24 10 01 00 00 	mov    eax,DWORD PTR [esp+0x110]
c0006e57:	8b 04 85 a0 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde360]
c0006e5e:	8d 50 04             	lea    edx,[eax+0x4]
c0006e61:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0006e68:	01 d0                	add    eax,edx
c0006e6a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0006e71:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0006e78:	8a 00                	mov    al,BYTE PTR [eax]
c0006e7a:	84 c0                	test   al,al
c0006e7c:	0f 84 0e 03 00 00    	je     c0007190 <find_object+0x3c8>
c0006e82:	a1 e0 1c 02 c0       	mov    eax,ds:0xc0021ce0
c0006e87:	85 c0                	test   eax,eax
c0006e89:	74 65                	je     c0006ef0 <find_object+0x128>
c0006e8b:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0006e92:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0006e95:	25 ff 00 00 00       	and    eax,0xff
c0006e9a:	8b 94 24 0c 01 00 00 	mov    edx,DWORD PTR [esp+0x10c]
c0006ea1:	83 c2 21             	add    edx,0x21
c0006ea4:	83 ec 04             	sub    esp,0x4
c0006ea7:	50                   	push   eax
c0006ea8:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0006eaf:	52                   	push   edx
c0006eb0:	e8 eb f1 ff ff       	call   c00060a0 <ucscompare>
c0006eb5:	83 c4 10             	add    esp,0x10
c0006eb8:	85 c0                	test   eax,eax
c0006eba:	0f 85 94 02 00 00    	jne    c0007154 <find_object+0x38c>
c0006ec0:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0006ec7:	01 c0                	add    eax,eax
c0006ec9:	89 c2                	mov    edx,eax
c0006ecb:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0006ed2:	8a 40 19             	mov    al,BYTE PTR [eax+0x19]
c0006ed5:	25 ff 00 00 00       	and    eax,0xff
c0006eda:	39 c2                	cmp    edx,eax
c0006edc:	0f 85 72 02 00 00    	jne    c0007154 <find_object+0x38c>
c0006ee2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0006ee9:	e9 ce 02 00 00       	jmp    c00071bc <find_object+0x3f4>
c0006eee:	66 90                	xchg   ax,ax
c0006ef0:	c7 84 24 20 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x120],0x0
c0006efb:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0006f02:	8a 00                	mov    al,BYTE PTR [eax]
c0006f04:	31 d2                	xor    edx,edx
c0006f06:	88 c2                	mov    dl,al
c0006f08:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0006f0f:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0006f12:	25 ff 00 00 00       	and    eax,0xff
c0006f17:	29 c2                	sub    edx,eax
c0006f19:	89 d0                	mov    eax,edx
c0006f1b:	83 e8 21             	sub    eax,0x21
c0006f1e:	89 84 24 28 01 00 00 	mov    DWORD PTR [esp+0x128],eax
c0006f25:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0006f2c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0006f2f:	25 ff 00 00 00       	and    eax,0xff
c0006f34:	8d 50 21             	lea    edx,[eax+0x21]
c0006f37:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0006f3e:	01 d0                	add    eax,edx
c0006f40:	89 84 24 24 01 00 00 	mov    DWORD PTR [esp+0x124],eax
c0006f47:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0006f4e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0006f51:	25 ff 00 00 00       	and    eax,0xff
c0006f56:	83 e0 01             	and    eax,0x1
c0006f59:	0f 85 ad 00 00 00    	jne    c000700c <find_object+0x244>
c0006f5f:	ff 84 24 24 01 00 00 	inc    DWORD PTR [esp+0x124]
c0006f66:	ff 8c 24 28 01 00 00 	dec    DWORD PTR [esp+0x128]
c0006f6d:	e9 9a 00 00 00       	jmp    c000700c <find_object+0x244>
c0006f72:	66 90                	xchg   ax,ax
c0006f74:	83 ec 04             	sub    esp,0x4
c0006f77:	6a 02                	push   0x2
c0006f79:	68 ce e8 01 c0       	push   0xc001e8ce
c0006f7e:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0006f85:	e8 f6 97 ff ff       	call   c0000780 <strncmp>
c0006f8a:	83 c4 10             	add    esp,0x10
c0006f8d:	85 c0                	test   eax,eax
c0006f8f:	75 4f                	jne    c0006fe0 <find_object+0x218>
c0006f91:	8b 84 24 24 01 00 00 	mov    eax,DWORD PTR [esp+0x124]
c0006f98:	83 c0 02             	add    eax,0x2
c0006f9b:	8a 00                	mov    al,BYTE PTR [eax]
c0006f9d:	0f be c0             	movsx  eax,al
c0006fa0:	83 e8 05             	sub    eax,0x5
c0006fa3:	89 84 24 20 01 00 00 	mov    DWORD PTR [esp+0x120],eax
c0006faa:	8b 84 24 20 01 00 00 	mov    eax,DWORD PTR [esp+0x120]
c0006fb1:	8b 94 24 24 01 00 00 	mov    edx,DWORD PTR [esp+0x124]
c0006fb8:	83 c2 05             	add    edx,0x5
c0006fbb:	83 ec 04             	sub    esp,0x4
c0006fbe:	50                   	push   eax
c0006fbf:	52                   	push   edx
c0006fc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006fc4:	50                   	push   eax
c0006fc5:	e8 86 96 ff ff       	call   c0000650 <strncpy>
c0006fca:	83 c4 10             	add    esp,0x10
c0006fcd:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006fd1:	8b 84 24 20 01 00 00 	mov    eax,DWORD PTR [esp+0x120]
c0006fd8:	01 d0                	add    eax,edx
c0006fda:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0006fe0:	8b 84 24 24 01 00 00 	mov    eax,DWORD PTR [esp+0x124]
c0006fe7:	83 c0 02             	add    eax,0x2
c0006fea:	8a 00                	mov    al,BYTE PTR [eax]
c0006fec:	0f be c0             	movsx  eax,al
c0006fef:	29 84 24 28 01 00 00 	sub    DWORD PTR [esp+0x128],eax
c0006ff6:	8b 84 24 24 01 00 00 	mov    eax,DWORD PTR [esp+0x124]
c0006ffd:	83 c0 02             	add    eax,0x2
c0007000:	8a 00                	mov    al,BYTE PTR [eax]
c0007002:	0f be c0             	movsx  eax,al
c0007005:	01 84 24 24 01 00 00 	add    DWORD PTR [esp+0x124],eax
c000700c:	83 bc 24 28 01 00 00 03 	cmp    DWORD PTR [esp+0x128],0x3
c0007014:	7e 2a                	jle    c0007040 <find_object+0x278>
c0007016:	8b 84 24 24 01 00 00 	mov    eax,DWORD PTR [esp+0x124]
c000701d:	83 c0 03             	add    eax,0x3
c0007020:	8a 00                	mov    al,BYTE PTR [eax]
c0007022:	3c 01                	cmp    al,0x1
c0007024:	0f 84 4a ff ff ff    	je     c0006f74 <find_object+0x1ac>
c000702a:	8b 84 24 24 01 00 00 	mov    eax,DWORD PTR [esp+0x124]
c0007031:	83 c0 03             	add    eax,0x3
c0007034:	8a 00                	mov    al,BYTE PTR [eax]
c0007036:	3c 02                	cmp    al,0x2
c0007038:	0f 84 36 ff ff ff    	je     c0006f74 <find_object+0x1ac>
c000703e:	66 90                	xchg   ax,ax
c0007040:	83 bc 24 20 01 00 00 00 	cmp    DWORD PTR [esp+0x120],0x0
c0007048:	0f 8e ae 00 00 00    	jle    c00070fc <find_object+0x334>
c000704e:	83 ec 08             	sub    esp,0x8
c0007051:	6a 2f                	push   0x2f
c0007053:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000705a:	e8 f1 96 ff ff       	call   c0000750 <strchr>
c000705f:	83 c4 10             	add    esp,0x10
c0007062:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0007069:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0007071:	74 19                	je     c000708c <find_object+0x2c4>
c0007073:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c000707a:	2b 84 24 40 01 00 00 	sub    eax,DWORD PTR [esp+0x140]
c0007081:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0007088:	eb 1e                	jmp    c00070a8 <find_object+0x2e0>
c000708a:	66 90                	xchg   ax,ax
c000708c:	83 ec 0c             	sub    esp,0xc
c000708f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0007096:	e8 c5 94 ff ff       	call   c0000560 <strlen>
c000709b:	83 c4 10             	add    esp,0x10
c000709e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00070a5:	8d 76 00             	lea    esi,[esi+0x0]
c00070a8:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00070af:	83 ec 04             	sub    esp,0x4
c00070b2:	50                   	push   eax
c00070b3:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00070ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00070be:	50                   	push   eax
c00070bf:	e8 c4 ec ff ff       	call   c0005d88 <strnicmp>
c00070c4:	83 c4 10             	add    esp,0x10
c00070c7:	85 c0                	test   eax,eax
c00070c9:	0f 85 85 00 00 00    	jne    c0007154 <find_object+0x38c>
c00070cf:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00070d6:	01 c0                	add    eax,eax
c00070d8:	89 c2                	mov    edx,eax
c00070da:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00070e1:	8a 40 19             	mov    al,BYTE PTR [eax+0x19]
c00070e4:	25 ff 00 00 00       	and    eax,0xff
c00070e9:	39 c2                	cmp    edx,eax
c00070eb:	75 67                	jne    c0007154 <find_object+0x38c>
c00070ed:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00070f4:	e9 c3 00 00 00       	jmp    c00071bc <find_object+0x3f4>
c00070f9:	8d 76 00             	lea    esi,[esi+0x0]
c00070fc:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0007103:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0007106:	25 ff 00 00 00       	and    eax,0xff
c000710b:	8b 94 24 0c 01 00 00 	mov    edx,DWORD PTR [esp+0x10c]
c0007112:	83 c2 21             	add    edx,0x21
c0007115:	83 ec 04             	sub    esp,0x4
c0007118:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000711f:	50                   	push   eax
c0007120:	52                   	push   edx
c0007121:	e8 1a f2 ff ff       	call   c0006340 <fncompare>
c0007126:	83 c4 10             	add    esp,0x10
c0007129:	85 c0                	test   eax,eax
c000712b:	75 27                	jne    c0007154 <find_object+0x38c>
c000712d:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0007134:	01 c0                	add    eax,eax
c0007136:	89 c2                	mov    edx,eax
c0007138:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c000713f:	8a 40 19             	mov    al,BYTE PTR [eax+0x19]
c0007142:	25 ff 00 00 00       	and    eax,0xff
c0007147:	39 c2                	cmp    edx,eax
c0007149:	75 09                	jne    c0007154 <find_object+0x38c>
c000714b:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0007152:	eb 68                	jmp    c00071bc <find_object+0x3f4>
c0007154:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c000715b:	8a 00                	mov    al,BYTE PTR [eax]
c000715d:	25 ff 00 00 00       	and    eax,0xff
c0007162:	01 84 24 2c 01 00 00 	add    DWORD PTR [esp+0x12c],eax
c0007169:	8d 76 00             	lea    esi,[esi+0x0]
c000716c:	81 bc 24 2c 01 00 00 ff 07 00 00 	cmp    DWORD PTR [esp+0x12c],0x7ff
c0007177:	7f 1b                	jg     c0007194 <find_object+0x3cc>
c0007179:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0007180:	3b 84 24 1c 01 00 00 	cmp    eax,DWORD PTR [esp+0x11c]
c0007187:	0f 8c c3 fc ff ff    	jl     c0006e50 <find_object+0x88>
c000718d:	eb 05                	jmp    c0007194 <find_object+0x3cc>
c000718f:	90                   	nop
c0007190:	90                   	nop
c0007191:	8d 76 00             	lea    esi,[esi+0x0]
c0007194:	ff 84 24 48 01 00 00 	inc    DWORD PTR [esp+0x148]
c000719b:	81 ac 24 1c 01 00 00 00 08 00 00 	sub    DWORD PTR [esp+0x11c],0x800
c00071a6:	66 90                	xchg   ax,ax
c00071a8:	83 bc 24 1c 01 00 00 00 	cmp    DWORD PTR [esp+0x11c],0x0
c00071b0:	0f 8f 5a fc ff ff    	jg     c0006e10 <find_object+0x48>
c00071b6:	b8 00 00 00 00       	mov    eax,0x0
c00071bb:	90                   	nop
c00071bc:	81 c4 3c 01 00 00    	add    esp,0x13c
c00071c2:	c3                   	ret    
c00071c3:	90                   	nop

c00071c4 <find_object_path>:
c00071c4:	53                   	push   ebx
c00071c5:	83 ec 18             	sub    esp,0x18
c00071c8:	eb 62                	jmp    c000722c <find_object_path+0x68>
c00071ca:	66 90                	xchg   ax,ax
c00071cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071d0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00071d4:	74 4a                	je     c0007220 <find_object_path+0x5c>
c00071d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00071da:	83 c0 0a             	add    eax,0xa
c00071dd:	50                   	push   eax
c00071de:	e8 75 f0 ff ff       	call   c0006258 <iso_733>
c00071e3:	83 c4 04             	add    esp,0x4
c00071e6:	89 c3                	mov    ebx,eax
c00071e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00071ec:	83 c0 02             	add    eax,0x2
c00071ef:	50                   	push   eax
c00071f0:	e8 63 f0 ff ff       	call   c0006258 <iso_733>
c00071f5:	83 c4 04             	add    esp,0x4
c00071f8:	53                   	push   ebx
c00071f9:	50                   	push   eax
c00071fa:	6a 01                	push   0x1
c00071fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007200:	e8 c3 fb ff ff       	call   c0006dc8 <find_object>
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000720c:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0007211:	75 0d                	jne    c0007220 <find_object_path+0x5c>
c0007213:	b8 00 00 00 00       	mov    eax,0x0
c0007218:	e9 8f 00 00 00       	jmp    c00072ac <find_object_path+0xe8>
c000721d:	8d 76 00             	lea    esi,[esi+0x0]
c0007220:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007224:	40                   	inc    eax
c0007225:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007229:	8d 76 00             	lea    esi,[esi+0x0]
c000722c:	83 ec 08             	sub    esp,0x8
c000722f:	6a 2f                	push   0x2f
c0007231:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007235:	e8 16 95 ff ff       	call   c0000750 <strchr>
c000723a:	83 c4 10             	add    esp,0x10
c000723d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007241:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007246:	75 84                	jne    c00071cc <find_object_path+0x8>
c0007248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000724c:	8a 00                	mov    al,BYTE PTR [eax]
c000724e:	84 c0                	test   al,al
c0007250:	74 46                	je     c0007298 <find_object_path+0xd4>
c0007252:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007256:	83 c0 0a             	add    eax,0xa
c0007259:	83 ec 0c             	sub    esp,0xc
c000725c:	50                   	push   eax
c000725d:	e8 f6 ef ff ff       	call   c0006258 <iso_733>
c0007262:	83 c4 10             	add    esp,0x10
c0007265:	89 c3                	mov    ebx,eax
c0007267:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000726b:	83 c0 02             	add    eax,0x2
c000726e:	83 ec 0c             	sub    esp,0xc
c0007271:	50                   	push   eax
c0007272:	e8 e1 ef ff ff       	call   c0006258 <iso_733>
c0007277:	83 c4 10             	add    esp,0x10
c000727a:	53                   	push   ebx
c000727b:	50                   	push   eax
c000727c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007280:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007284:	e8 3f fb ff ff       	call   c0006dc8 <find_object>
c0007289:	83 c4 10             	add    esp,0x10
c000728c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007290:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007294:	eb 16                	jmp    c00072ac <find_object_path+0xe8>
c0007296:	66 90                	xchg   ax,ax
c0007298:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000729d:	75 09                	jne    c00072a8 <find_object_path+0xe4>
c000729f:	b8 00 00 00 00       	mov    eax,0x0
c00072a4:	eb 06                	jmp    c00072ac <find_object_path+0xe8>
c00072a6:	66 90                	xchg   ax,ax
c00072a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00072ac:	83 c4 18             	add    esp,0x18
c00072af:	5b                   	pop    ebx
c00072b0:	c3                   	ret    
c00072b1:	8d 76 00             	lea    esi,[esi+0x0]

c00072b4 <iso_readdir>:
c00072b4:	53                   	push   ebx
c00072b5:	83 ec 18             	sub    esp,0x18
c00072b8:	83 7c 24 20 0f       	cmp    DWORD PTR [esp+0x20],0xf
c00072bd:	7f 5d                	jg     c000731c <iso_readdir+0x68>
c00072bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00072c3:	89 d0                	mov    eax,edx
c00072c5:	c1 e0 03             	shl    eax,0x3
c00072c8:	01 d0                	add    eax,edx
c00072ca:	c1 e0 02             	shl    eax,0x2
c00072cd:	01 d0                	add    eax,edx
c00072cf:	c1 e0 02             	shl    eax,0x2
c00072d2:	05 e0 12 02 c0       	add    eax,0xc00212e0
c00072d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00072d9:	85 c0                	test   eax,eax
c00072db:	74 3f                	je     c000731c <iso_readdir+0x68>
c00072dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00072e1:	89 d0                	mov    eax,edx
c00072e3:	c1 e0 03             	shl    eax,0x3
c00072e6:	01 d0                	add    eax,edx
c00072e8:	c1 e0 02             	shl    eax,0x2
c00072eb:	01 d0                	add    eax,edx
c00072ed:	c1 e0 02             	shl    eax,0x2
c00072f0:	05 e4 12 02 c0       	add    eax,0xc00212e4
c00072f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00072f7:	85 c0                	test   eax,eax
c00072f9:	74 21                	je     c000731c <iso_readdir+0x68>
c00072fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00072ff:	89 d0                	mov    eax,edx
c0007301:	c1 e0 03             	shl    eax,0x3
c0007304:	01 d0                	add    eax,edx
c0007306:	c1 e0 02             	shl    eax,0x2
c0007309:	01 d0                	add    eax,edx
c000730b:	c1 e0 02             	shl    eax,0x2
c000730e:	05 70 13 02 c0       	add    eax,0xc0021370
c0007313:	8b 00                	mov    eax,DWORD PTR [eax]
c0007315:	85 c0                	test   eax,eax
c0007317:	74 0f                	je     c0007328 <iso_readdir+0x74>
c0007319:	8d 76 00             	lea    esi,[esi+0x0]
c000731c:	b8 00 00 00 00       	mov    eax,0x0
c0007321:	e9 72 05 00 00       	jmp    c0007898 <iso_readdir+0x5e4>
c0007326:	66 90                	xchg   ax,ax
c0007328:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0007330:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007338:	e9 db 00 00 00       	jmp    c0007418 <iso_readdir+0x164>
c000733d:	8d 76 00             	lea    esi,[esi+0x0]
c0007340:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007344:	89 d0                	mov    eax,edx
c0007346:	c1 e0 03             	shl    eax,0x3
c0007349:	01 d0                	add    eax,edx
c000734b:	c1 e0 02             	shl    eax,0x2
c000734e:	01 d0                	add    eax,edx
c0007350:	c1 e0 02             	shl    eax,0x2
c0007353:	05 e0 12 02 c0       	add    eax,0xc00212e0
c0007358:	8b 08                	mov    ecx,DWORD PTR [eax]
c000735a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000735e:	89 d0                	mov    eax,edx
c0007360:	c1 e0 03             	shl    eax,0x3
c0007363:	01 d0                	add    eax,edx
c0007365:	c1 e0 02             	shl    eax,0x2
c0007368:	01 d0                	add    eax,edx
c000736a:	c1 e0 02             	shl    eax,0x2
c000736d:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0007372:	8b 00                	mov    eax,DWORD PTR [eax]
c0007374:	c1 e8 0b             	shr    eax,0xb
c0007377:	01 c8                	add    eax,ecx
c0007379:	83 ec 0c             	sub    esp,0xc
c000737c:	50                   	push   eax
c000737d:	e8 2a fa ff ff       	call   c0006dac <biread>
c0007382:	83 c4 10             	add    esp,0x10
c0007385:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007389:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000738e:	79 0c                	jns    c000739c <iso_readdir+0xe8>
c0007390:	b8 00 00 00 00       	mov    eax,0x0
c0007395:	e9 fe 04 00 00       	jmp    c0007898 <iso_readdir+0x5e4>
c000739a:	66 90                	xchg   ax,ax
c000739c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00073a0:	8b 04 85 a0 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde360]
c00073a7:	8d 48 04             	lea    ecx,[eax+0x4]
c00073aa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00073ae:	89 d0                	mov    eax,edx
c00073b0:	c1 e0 03             	shl    eax,0x3
c00073b3:	01 d0                	add    eax,edx
c00073b5:	c1 e0 02             	shl    eax,0x2
c00073b8:	01 d0                	add    eax,edx
c00073ba:	c1 e0 02             	shl    eax,0x2
c00073bd:	05 e8 12 02 c0       	add    eax,0xc00212e8
c00073c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00073c4:	25 ff 07 00 00       	and    eax,0x7ff
c00073c9:	01 c8                	add    eax,ecx
c00073cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00073cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073d3:	8a 00                	mov    al,BYTE PTR [eax]
c00073d5:	84 c0                	test   al,al
c00073d7:	75 7f                	jne    c0007458 <iso_readdir+0x1a4>
c00073d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00073dd:	89 d0                	mov    eax,edx
c00073df:	c1 e0 03             	shl    eax,0x3
c00073e2:	01 d0                	add    eax,edx
c00073e4:	c1 e0 02             	shl    eax,0x2
c00073e7:	01 d0                	add    eax,edx
c00073e9:	c1 e0 02             	shl    eax,0x2
c00073ec:	05 e8 12 02 c0       	add    eax,0xc00212e8
c00073f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00073f3:	25 00 f8 ff ff       	and    eax,0xfffff800
c00073f8:	8d 88 00 08 00 00    	lea    ecx,[eax+0x800]
c00073fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007402:	89 d0                	mov    eax,edx
c0007404:	c1 e0 03             	shl    eax,0x3
c0007407:	01 d0                	add    eax,edx
c0007409:	c1 e0 02             	shl    eax,0x2
c000740c:	01 d0                	add    eax,edx
c000740e:	c1 e0 02             	shl    eax,0x2
c0007411:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0007416:	89 08                	mov    DWORD PTR [eax],ecx
c0007418:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000741c:	89 d0                	mov    eax,edx
c000741e:	c1 e0 03             	shl    eax,0x3
c0007421:	01 d0                	add    eax,edx
c0007423:	c1 e0 02             	shl    eax,0x2
c0007426:	01 d0                	add    eax,edx
c0007428:	c1 e0 02             	shl    eax,0x2
c000742b:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0007430:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007432:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007436:	89 d0                	mov    eax,edx
c0007438:	c1 e0 03             	shl    eax,0x3
c000743b:	01 d0                	add    eax,edx
c000743d:	c1 e0 02             	shl    eax,0x2
c0007440:	01 d0                	add    eax,edx
c0007442:	c1 e0 02             	shl    eax,0x2
c0007445:	05 ec 12 02 c0       	add    eax,0xc00212ec
c000744a:	8b 00                	mov    eax,DWORD PTR [eax]
c000744c:	39 c1                	cmp    ecx,eax
c000744e:	0f 82 ec fe ff ff    	jb     c0007340 <iso_readdir+0x8c>
c0007454:	eb 06                	jmp    c000745c <iso_readdir+0x1a8>
c0007456:	66 90                	xchg   ax,ax
c0007458:	90                   	nop
c0007459:	8d 76 00             	lea    esi,[esi+0x0]
c000745c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007460:	89 d0                	mov    eax,edx
c0007462:	c1 e0 03             	shl    eax,0x3
c0007465:	01 d0                	add    eax,edx
c0007467:	c1 e0 02             	shl    eax,0x2
c000746a:	01 d0                	add    eax,edx
c000746c:	c1 e0 02             	shl    eax,0x2
c000746f:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0007474:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007476:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000747a:	89 d0                	mov    eax,edx
c000747c:	c1 e0 03             	shl    eax,0x3
c000747f:	01 d0                	add    eax,edx
c0007481:	c1 e0 02             	shl    eax,0x2
c0007484:	01 d0                	add    eax,edx
c0007486:	c1 e0 02             	shl    eax,0x2
c0007489:	05 ec 12 02 c0       	add    eax,0xc00212ec
c000748e:	8b 00                	mov    eax,DWORD PTR [eax]
c0007490:	39 c1                	cmp    ecx,eax
c0007492:	72 0c                	jb     c00074a0 <iso_readdir+0x1ec>
c0007494:	b8 00 00 00 00       	mov    eax,0x0
c0007499:	e9 fa 03 00 00       	jmp    c0007898 <iso_readdir+0x5e4>
c000749e:	66 90                	xchg   ax,ax
c00074a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074a4:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c00074a7:	84 c0                	test   al,al
c00074a9:	0f 85 11 01 00 00    	jne    c00075c0 <iso_readdir+0x30c>
c00074af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b3:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00074b6:	3c 01                	cmp    al,0x1
c00074b8:	0f 85 02 01 00 00    	jne    c00075c0 <iso_readdir+0x30c>
c00074be:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00074c2:	89 d0                	mov    eax,edx
c00074c4:	c1 e0 03             	shl    eax,0x3
c00074c7:	01 d0                	add    eax,edx
c00074c9:	c1 e0 02             	shl    eax,0x2
c00074cc:	01 d0                	add    eax,edx
c00074ce:	c1 e0 02             	shl    eax,0x2
c00074d1:	05 e8 12 02 c0       	add    eax,0xc00212e8
c00074d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00074d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074dc:	8a 00                	mov    al,BYTE PTR [eax]
c00074de:	25 ff 00 00 00       	and    eax,0xff
c00074e3:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00074e6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00074ea:	89 d0                	mov    eax,edx
c00074ec:	c1 e0 03             	shl    eax,0x3
c00074ef:	01 d0                	add    eax,edx
c00074f1:	c1 e0 02             	shl    eax,0x2
c00074f4:	01 d0                	add    eax,edx
c00074f6:	c1 e0 02             	shl    eax,0x2
c00074f9:	05 e8 12 02 c0       	add    eax,0xc00212e8
c00074fe:	89 08                	mov    DWORD PTR [eax],ecx
c0007500:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007504:	8b 04 85 a0 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde360]
c000750b:	8d 48 04             	lea    ecx,[eax+0x4]
c000750e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007512:	89 d0                	mov    eax,edx
c0007514:	c1 e0 03             	shl    eax,0x3
c0007517:	01 d0                	add    eax,edx
c0007519:	c1 e0 02             	shl    eax,0x2
c000751c:	01 d0                	add    eax,edx
c000751e:	c1 e0 02             	shl    eax,0x2
c0007521:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0007526:	8b 00                	mov    eax,DWORD PTR [eax]
c0007528:	25 ff 07 00 00       	and    eax,0x7ff
c000752d:	01 c8                	add    eax,ecx
c000752f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007533:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007537:	89 d0                	mov    eax,edx
c0007539:	c1 e0 03             	shl    eax,0x3
c000753c:	01 d0                	add    eax,edx
c000753e:	c1 e0 02             	shl    eax,0x2
c0007541:	01 d0                	add    eax,edx
c0007543:	c1 e0 02             	shl    eax,0x2
c0007546:	05 e8 12 02 c0       	add    eax,0xc00212e8
c000754b:	8b 10                	mov    edx,DWORD PTR [eax]
c000754d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007551:	8a 00                	mov    al,BYTE PTR [eax]
c0007553:	25 ff 00 00 00       	and    eax,0xff
c0007558:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000755b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000755f:	89 d0                	mov    eax,edx
c0007561:	c1 e0 03             	shl    eax,0x3
c0007564:	01 d0                	add    eax,edx
c0007566:	c1 e0 02             	shl    eax,0x2
c0007569:	01 d0                	add    eax,edx
c000756b:	c1 e0 02             	shl    eax,0x2
c000756e:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0007573:	89 08                	mov    DWORD PTR [eax],ecx
c0007575:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007579:	8b 04 85 a0 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde360]
c0007580:	8d 48 04             	lea    ecx,[eax+0x4]
c0007583:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007587:	89 d0                	mov    eax,edx
c0007589:	c1 e0 03             	shl    eax,0x3
c000758c:	01 d0                	add    eax,edx
c000758e:	c1 e0 02             	shl    eax,0x2
c0007591:	01 d0                	add    eax,edx
c0007593:	c1 e0 02             	shl    eax,0x2
c0007596:	05 e8 12 02 c0       	add    eax,0xc00212e8
c000759b:	8b 00                	mov    eax,DWORD PTR [eax]
c000759d:	25 ff 07 00 00       	and    eax,0x7ff
c00075a2:	01 c8                	add    eax,ecx
c00075a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00075a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075ac:	8a 00                	mov    al,BYTE PTR [eax]
c00075ae:	84 c0                	test   al,al
c00075b0:	0f 85 0a 00 00 00    	jne    c00075c0 <iso_readdir+0x30c>
c00075b6:	b8 00 00 00 00       	mov    eax,0x0
c00075bb:	e9 d8 02 00 00       	jmp    c0007898 <iso_readdir+0x5e4>
c00075c0:	a1 e0 1c 02 c0       	mov    eax,ds:0xc0021ce0
c00075c5:	85 c0                	test   eax,eax
c00075c7:	74 43                	je     c000760c <iso_readdir+0x358>
c00075c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075cd:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00075d0:	31 c9                	xor    ecx,ecx
c00075d2:	88 c1                	mov    cl,al
c00075d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075d8:	8d 58 21             	lea    ebx,[eax+0x21]
c00075db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00075df:	89 d0                	mov    eax,edx
c00075e1:	c1 e0 03             	shl    eax,0x3
c00075e4:	01 d0                	add    eax,edx
c00075e6:	c1 e0 02             	shl    eax,0x2
c00075e9:	01 d0                	add    eax,edx
c00075eb:	c1 e0 02             	shl    eax,0x2
c00075ee:	83 c0 10             	add    eax,0x10
c00075f1:	05 e0 12 02 c0       	add    eax,0xc00212e0
c00075f6:	83 c0 08             	add    eax,0x8
c00075f9:	83 ec 04             	sub    esp,0x4
c00075fc:	51                   	push   ecx
c00075fd:	53                   	push   ebx
c00075fe:	50                   	push   eax
c00075ff:	e8 78 e9 ff ff       	call   c0005f7c <ucs2utfn>
c0007604:	83 c4 10             	add    esp,0x10
c0007607:	e9 bc 01 00 00       	jmp    c00077c8 <iso_readdir+0x514>
c000760c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007610:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0007613:	31 c9                	xor    ecx,ecx
c0007615:	88 c1                	mov    cl,al
c0007617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000761b:	8d 58 21             	lea    ebx,[eax+0x21]
c000761e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007622:	89 d0                	mov    eax,edx
c0007624:	c1 e0 03             	shl    eax,0x3
c0007627:	01 d0                	add    eax,edx
c0007629:	c1 e0 02             	shl    eax,0x2
c000762c:	01 d0                	add    eax,edx
c000762e:	c1 e0 02             	shl    eax,0x2
c0007631:	83 c0 10             	add    eax,0x10
c0007634:	05 e0 12 02 c0       	add    eax,0xc00212e0
c0007639:	83 c0 08             	add    eax,0x8
c000763c:	83 ec 04             	sub    esp,0x4
c000763f:	51                   	push   ecx
c0007640:	53                   	push   ebx
c0007641:	50                   	push   eax
c0007642:	e8 09 90 ff ff       	call   c0000650 <strncpy>
c0007647:	83 c4 10             	add    esp,0x10
c000764a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000764e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0007651:	31 c9                	xor    ecx,ecx
c0007653:	88 c1                	mov    cl,al
c0007655:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007659:	89 d0                	mov    eax,edx
c000765b:	c1 e0 03             	shl    eax,0x3
c000765e:	01 d0                	add    eax,edx
c0007660:	c1 e0 02             	shl    eax,0x2
c0007663:	01 d0                	add    eax,edx
c0007665:	c1 e0 02             	shl    eax,0x2
c0007668:	01 c8                	add    eax,ecx
c000766a:	05 f8 12 02 c0       	add    eax,0xc00212f8
c000766f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007672:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007676:	89 d0                	mov    eax,edx
c0007678:	c1 e0 03             	shl    eax,0x3
c000767b:	01 d0                	add    eax,edx
c000767d:	c1 e0 02             	shl    eax,0x2
c0007680:	01 d0                	add    eax,edx
c0007682:	c1 e0 02             	shl    eax,0x2
c0007685:	83 c0 10             	add    eax,0x10
c0007688:	05 e0 12 02 c0       	add    eax,0xc00212e0
c000768d:	83 c0 08             	add    eax,0x8
c0007690:	83 ec 0c             	sub    esp,0xc
c0007693:	50                   	push   eax
c0007694:	e8 93 f0 ff ff       	call   c000672c <fn_postprocess>
c0007699:	83 c4 10             	add    esp,0x10
c000769c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076a0:	8a 00                	mov    al,BYTE PTR [eax]
c00076a2:	31 d2                	xor    edx,edx
c00076a4:	88 c2                	mov    dl,al
c00076a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076aa:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00076ad:	25 ff 00 00 00       	and    eax,0xff
c00076b2:	29 c2                	sub    edx,eax
c00076b4:	89 d0                	mov    eax,edx
c00076b6:	83 e8 21             	sub    eax,0x21
c00076b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00076bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076c1:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00076c4:	25 ff 00 00 00       	and    eax,0xff
c00076c9:	8d 50 21             	lea    edx,[eax+0x21]
c00076cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076d0:	01 d0                	add    eax,edx
c00076d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076d9:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00076dc:	25 ff 00 00 00       	and    eax,0xff
c00076e1:	83 e0 01             	and    eax,0x1
c00076e4:	0f 85 b6 00 00 00    	jne    c00077a0 <iso_readdir+0x4ec>
c00076ea:	ff 04 24             	inc    DWORD PTR [esp]
c00076ed:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
c00076f1:	e9 aa 00 00 00       	jmp    c00077a0 <iso_readdir+0x4ec>
c00076f6:	66 90                	xchg   ax,ax
c00076f8:	83 ec 04             	sub    esp,0x4
c00076fb:	6a 02                	push   0x2
c00076fd:	68 ce e8 01 c0       	push   0xc001e8ce
c0007702:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007706:	e8 75 90 ff ff       	call   c0000780 <strncmp>
c000770b:	83 c4 10             	add    esp,0x10
c000770e:	85 c0                	test   eax,eax
c0007710:	75 6e                	jne    c0007780 <iso_readdir+0x4cc>
c0007712:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007715:	83 c0 02             	add    eax,0x2
c0007718:	8a 00                	mov    al,BYTE PTR [eax]
c000771a:	0f be c0             	movsx  eax,al
c000771d:	83 e8 05             	sub    eax,0x5
c0007720:	89 c3                	mov    ebx,eax
c0007722:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007725:	8d 48 05             	lea    ecx,[eax+0x5]
c0007728:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000772c:	89 d0                	mov    eax,edx
c000772e:	c1 e0 03             	shl    eax,0x3
c0007731:	01 d0                	add    eax,edx
c0007733:	c1 e0 02             	shl    eax,0x2
c0007736:	01 d0                	add    eax,edx
c0007738:	c1 e0 02             	shl    eax,0x2
c000773b:	83 c0 10             	add    eax,0x10
c000773e:	05 e0 12 02 c0       	add    eax,0xc00212e0
c0007743:	83 c0 08             	add    eax,0x8
c0007746:	83 ec 04             	sub    esp,0x4
c0007749:	53                   	push   ebx
c000774a:	51                   	push   ecx
c000774b:	50                   	push   eax
c000774c:	e8 ff 8e ff ff       	call   c0000650 <strncpy>
c0007751:	83 c4 10             	add    esp,0x10
c0007754:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007757:	83 c0 02             	add    eax,0x2
c000775a:	8a 00                	mov    al,BYTE PTR [eax]
c000775c:	0f be c0             	movsx  eax,al
c000775f:	8d 48 fb             	lea    ecx,[eax-0x5]
c0007762:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007766:	89 d0                	mov    eax,edx
c0007768:	c1 e0 03             	shl    eax,0x3
c000776b:	01 d0                	add    eax,edx
c000776d:	c1 e0 02             	shl    eax,0x2
c0007770:	01 d0                	add    eax,edx
c0007772:	c1 e0 02             	shl    eax,0x2
c0007775:	01 c8                	add    eax,ecx
c0007777:	05 f8 12 02 c0       	add    eax,0xc00212f8
c000777c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000777f:	90                   	nop
c0007780:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007783:	83 c0 02             	add    eax,0x2
c0007786:	8a 00                	mov    al,BYTE PTR [eax]
c0007788:	0f be c0             	movsx  eax,al
c000778b:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c000778f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007792:	83 c0 02             	add    eax,0x2
c0007795:	8a 00                	mov    al,BYTE PTR [eax]
c0007797:	0f be c0             	movsx  eax,al
c000779a:	01 04 24             	add    DWORD PTR [esp],eax
c000779d:	8d 76 00             	lea    esi,[esi+0x0]
c00077a0:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00077a5:	7e 21                	jle    c00077c8 <iso_readdir+0x514>
c00077a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077aa:	83 c0 03             	add    eax,0x3
c00077ad:	8a 00                	mov    al,BYTE PTR [eax]
c00077af:	3c 01                	cmp    al,0x1
c00077b1:	0f 84 41 ff ff ff    	je     c00076f8 <iso_readdir+0x444>
c00077b7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077ba:	83 c0 03             	add    eax,0x3
c00077bd:	8a 00                	mov    al,BYTE PTR [eax]
c00077bf:	3c 02                	cmp    al,0x2
c00077c1:	0f 84 31 ff ff ff    	je     c00076f8 <iso_readdir+0x444>
c00077c7:	90                   	nop
c00077c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077cc:	8a 40 19             	mov    al,BYTE PTR [eax+0x19]
c00077cf:	25 ff 00 00 00       	and    eax,0xff
c00077d4:	83 e0 02             	and    eax,0x2
c00077d7:	74 27                	je     c0007800 <iso_readdir+0x54c>
c00077d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00077dd:	89 d0                	mov    eax,edx
c00077df:	c1 e0 03             	shl    eax,0x3
c00077e2:	01 d0                	add    eax,edx
c00077e4:	c1 e0 02             	shl    eax,0x2
c00077e7:	01 d0                	add    eax,edx
c00077e9:	c1 e0 02             	shl    eax,0x2
c00077ec:	05 f0 12 02 c0       	add    eax,0xc00212f0
c00077f1:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00077f7:	c7 40 04 ff ff ff ff 	mov    DWORD PTR [eax+0x4],0xffffffff
c00077fe:	eb 38                	jmp    c0007838 <iso_readdir+0x584>
c0007800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007804:	83 c0 0a             	add    eax,0xa
c0007807:	83 ec 0c             	sub    esp,0xc
c000780a:	50                   	push   eax
c000780b:	e8 48 ea ff ff       	call   c0006258 <iso_733>
c0007810:	83 c4 10             	add    esp,0x10
c0007813:	89 c2                	mov    edx,eax
c0007815:	b9 00 00 00 00       	mov    ecx,0x0
c000781a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000781e:	89 d8                	mov    eax,ebx
c0007820:	c1 e0 03             	shl    eax,0x3
c0007823:	01 d8                	add    eax,ebx
c0007825:	c1 e0 02             	shl    eax,0x2
c0007828:	01 d8                	add    eax,ebx
c000782a:	c1 e0 02             	shl    eax,0x2
c000782d:	05 f0 12 02 c0       	add    eax,0xc00212f0
c0007832:	89 10                	mov    DWORD PTR [eax],edx
c0007834:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0007837:	90                   	nop
c0007838:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000783c:	89 d0                	mov    eax,edx
c000783e:	c1 e0 03             	shl    eax,0x3
c0007841:	01 d0                	add    eax,edx
c0007843:	c1 e0 02             	shl    eax,0x2
c0007846:	01 d0                	add    eax,edx
c0007848:	c1 e0 02             	shl    eax,0x2
c000784b:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0007850:	8b 10                	mov    edx,DWORD PTR [eax]
c0007852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007856:	8a 00                	mov    al,BYTE PTR [eax]
c0007858:	25 ff 00 00 00       	and    eax,0xff
c000785d:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007860:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007864:	89 d0                	mov    eax,edx
c0007866:	c1 e0 03             	shl    eax,0x3
c0007869:	01 d0                	add    eax,edx
c000786b:	c1 e0 02             	shl    eax,0x2
c000786e:	01 d0                	add    eax,edx
c0007870:	c1 e0 02             	shl    eax,0x2
c0007873:	05 e8 12 02 c0       	add    eax,0xc00212e8
c0007878:	89 08                	mov    DWORD PTR [eax],ecx
c000787a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000787e:	89 d0                	mov    eax,edx
c0007880:	c1 e0 03             	shl    eax,0x3
c0007883:	01 d0                	add    eax,edx
c0007885:	c1 e0 02             	shl    eax,0x2
c0007888:	01 d0                	add    eax,edx
c000788a:	c1 e0 02             	shl    eax,0x2
c000788d:	83 c0 10             	add    eax,0x10
c0007890:	05 e0 12 02 c0       	add    eax,0xc00212e0
c0007895:	8d 76 00             	lea    esi,[esi+0x0]
c0007898:	83 c4 18             	add    esp,0x18
c000789b:	5b                   	pop    ebx
c000789c:	c3                   	ret    
c000789d:	8d 76 00             	lea    esi,[esi+0x0]

c00078a0 <iso_open>:
c00078a0:	83 ec 1c             	sub    esp,0x1c
c00078a3:	a1 e4 1c 02 c0       	mov    eax,ds:0xc0021ce4
c00078a8:	85 c0                	test   eax,eax
c00078aa:	75 14                	jne    c00078c0 <iso_open+0x20>
c00078ac:	e8 0b ef ff ff       	call   c00067bc <init_percd>
c00078b1:	85 c0                	test   eax,eax
c00078b3:	79 0b                	jns    c00078c0 <iso_open+0x20>
c00078b5:	b8 00 00 00 00       	mov    eax,0x0
c00078ba:	e9 61 01 00 00       	jmp    c0007a20 <iso_open+0x180>
c00078bf:	90                   	nop
c00078c0:	c7 05 e4 1c 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0021ce4,0x1
c00078ca:	83 ec 04             	sub    esp,0x4
c00078cd:	68 20 1c 02 c0       	push   0xc0021c20
c00078d2:	6a 00                	push   0x0
c00078d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00078d8:	e8 e7 f8 ff ff       	call   c00071c4 <find_object_path>
c00078dd:	83 c4 10             	add    esp,0x10
c00078e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00078e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00078e9:	75 0d                	jne    c00078f8 <iso_open+0x58>
c00078eb:	b8 00 00 00 00       	mov    eax,0x0
c00078f0:	e9 2b 01 00 00       	jmp    c0007a20 <iso_open+0x180>
c00078f5:	8d 76 00             	lea    esi,[esi+0x0]
c00078f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007900:	eb 46                	jmp    c0007948 <iso_open+0xa8>
c0007902:	66 90                	xchg   ax,ax
c0007904:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007908:	89 d0                	mov    eax,edx
c000790a:	c1 e0 03             	shl    eax,0x3
c000790d:	01 d0                	add    eax,edx
c000790f:	c1 e0 02             	shl    eax,0x2
c0007912:	01 d0                	add    eax,edx
c0007914:	c1 e0 02             	shl    eax,0x2
c0007917:	05 e0 12 02 c0       	add    eax,0xc00212e0
c000791c:	8b 00                	mov    eax,DWORD PTR [eax]
c000791e:	85 c0                	test   eax,eax
c0007920:	75 22                	jne    c0007944 <iso_open+0xa4>
c0007922:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007926:	89 d0                	mov    eax,edx
c0007928:	c1 e0 03             	shl    eax,0x3
c000792b:	01 d0                	add    eax,edx
c000792d:	c1 e0 02             	shl    eax,0x2
c0007930:	01 d0                	add    eax,edx
c0007932:	c1 e0 02             	shl    eax,0x2
c0007935:	05 e0 12 02 c0       	add    eax,0xc00212e0
c000793a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0007940:	eb 0e                	jmp    c0007950 <iso_open+0xb0>
c0007942:	66 90                	xchg   ax,ax
c0007944:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0007948:	83 7c 24 0c 0f       	cmp    DWORD PTR [esp+0xc],0xf
c000794d:	7e b5                	jle    c0007904 <iso_open+0x64>
c000794f:	90                   	nop
c0007950:	83 7c 24 0c 0f       	cmp    DWORD PTR [esp+0xc],0xf
c0007955:	7e 0d                	jle    c0007964 <iso_open+0xc4>
c0007957:	b8 00 00 00 00       	mov    eax,0x0
c000795c:	e9 bf 00 00 00       	jmp    c0007a20 <iso_open+0x180>
c0007961:	8d 76 00             	lea    esi,[esi+0x0]
c0007964:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007968:	83 c0 02             	add    eax,0x2
c000796b:	83 ec 0c             	sub    esp,0xc
c000796e:	50                   	push   eax
c000796f:	e8 e4 e8 ff ff       	call   c0006258 <iso_733>
c0007974:	83 c4 10             	add    esp,0x10
c0007977:	89 c1                	mov    ecx,eax
c0007979:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000797d:	89 d0                	mov    eax,edx
c000797f:	c1 e0 03             	shl    eax,0x3
c0007982:	01 d0                	add    eax,edx
c0007984:	c1 e0 02             	shl    eax,0x2
c0007987:	01 d0                	add    eax,edx
c0007989:	c1 e0 02             	shl    eax,0x2
c000798c:	05 e0 12 02 c0       	add    eax,0xc00212e0
c0007991:	89 08                	mov    DWORD PTR [eax],ecx
c0007993:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007997:	89 d0                	mov    eax,edx
c0007999:	c1 e0 03             	shl    eax,0x3
c000799c:	01 d0                	add    eax,edx
c000799e:	c1 e0 02             	shl    eax,0x2
c00079a1:	01 d0                	add    eax,edx
c00079a3:	c1 e0 02             	shl    eax,0x2
c00079a6:	05 e4 12 02 c0       	add    eax,0xc00212e4
c00079ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00079b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00079b5:	89 d0                	mov    eax,edx
c00079b7:	c1 e0 03             	shl    eax,0x3
c00079ba:	01 d0                	add    eax,edx
c00079bc:	c1 e0 02             	shl    eax,0x2
c00079bf:	01 d0                	add    eax,edx
c00079c1:	c1 e0 02             	shl    eax,0x2
c00079c4:	05 e8 12 02 c0       	add    eax,0xc00212e8
c00079c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00079cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079d3:	83 c0 0a             	add    eax,0xa
c00079d6:	83 ec 0c             	sub    esp,0xc
c00079d9:	50                   	push   eax
c00079da:	e8 79 e8 ff ff       	call   c0006258 <iso_733>
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	89 c1                	mov    ecx,eax
c00079e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00079e8:	89 d0                	mov    eax,edx
c00079ea:	c1 e0 03             	shl    eax,0x3
c00079ed:	01 d0                	add    eax,edx
c00079ef:	c1 e0 02             	shl    eax,0x2
c00079f2:	01 d0                	add    eax,edx
c00079f4:	c1 e0 02             	shl    eax,0x2
c00079f7:	05 ec 12 02 c0       	add    eax,0xc00212ec
c00079fc:	89 08                	mov    DWORD PTR [eax],ecx
c00079fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007a02:	89 d0                	mov    eax,edx
c0007a04:	c1 e0 03             	shl    eax,0x3
c0007a07:	01 d0                	add    eax,edx
c0007a09:	c1 e0 02             	shl    eax,0x2
c0007a0c:	01 d0                	add    eax,edx
c0007a0e:	c1 e0 02             	shl    eax,0x2
c0007a11:	05 70 13 02 c0       	add    eax,0xc0021370
c0007a16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007a1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a20:	83 c4 1c             	add    esp,0x1c
c0007a23:	c3                   	ret    

c0007a24 <iso_ioctl>:
c0007a24:	e8 77 ed ff ff       	call   c00067a0 <iso_reset>
c0007a29:	b8 00 00 00 00       	mov    eax,0x0
c0007a2e:	c3                   	ret    
c0007a2f:	90                   	nop

c0007a30 <fs_iso9660_init>:
c0007a30:	83 ec 2c             	sub    esp,0x2c
c0007a33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007a37:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0007a3b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0007a3f:	a2 60 0e 02 c0       	mov    ds:0xc0020e60,al
c0007a44:	83 ec 04             	sub    esp,0x4
c0007a47:	68 40 09 00 00       	push   0x940
c0007a4c:	6a 00                	push   0x0
c0007a4e:	68 e0 12 02 c0       	push   0xc00212e0
c0007a53:	e8 98 8a ff ff       	call   c00004f0 <memset>
c0007a58:	83 c4 10             	add    esp,0x10
c0007a5b:	c7 05 e0 12 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc00212e0,0xffffffff
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 04                	push   0x4
c0007a6a:	e8 f2 10 00 00       	call   c0008b61 <malloc>
c0007a6f:	83 c4 10             	add    esp,0x10
c0007a72:	a3 50 1c 02 c0       	mov    ds:0xc0021c50,eax
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	6a 04                	push   0x4
c0007a7c:	e8 e0 10 00 00       	call   c0008b61 <malloc>
c0007a81:	83 c4 10             	add    esp,0x10
c0007a84:	a3 c0 12 02 c0       	mov    ds:0xc00212c0,eax
c0007a89:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007a91:	eb 61                	jmp    c0007af4 <fs_iso9660_init+0xc4>
c0007a93:	90                   	nop
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	68 04 08 00 00       	push   0x804
c0007a9c:	e8 c0 10 00 00       	call   c0008b61 <malloc>
c0007aa1:	83 c4 10             	add    esp,0x10
c0007aa4:	89 c2                	mov    edx,eax
c0007aa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007aaa:	89 14 85 a0 1c 02 c0 	mov    DWORD PTR [eax*4-0x3ffde360],edx
c0007ab1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007ab5:	8b 04 85 a0 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde360]
c0007abc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0007ac2:	83 ec 0c             	sub    esp,0xc
c0007ac5:	68 04 08 00 00       	push   0x804
c0007aca:	e8 92 10 00 00       	call   c0008b61 <malloc>
c0007acf:	83 c4 10             	add    esp,0x10
c0007ad2:	89 c2                	mov    edx,eax
c0007ad4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007ad8:	89 14 85 60 1c 02 c0 	mov    DWORD PTR [eax*4-0x3ffde3a0],edx
c0007adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007ae3:	8b 04 85 60 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde3a0]
c0007aea:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0007af0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0007af4:	83 7c 24 1c 0f       	cmp    DWORD PTR [esp+0x1c],0xf
c0007af9:	7e 99                	jle    c0007a94 <fs_iso9660_init+0x64>
c0007afb:	c7 05 e4 1c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ce4,0x0
c0007b05:	b8 00 00 00 00       	mov    eax,0x0
c0007b0a:	83 c4 2c             	add    esp,0x2c
c0007b0d:	c3                   	ret    
c0007b0e:	66 90                	xchg   ax,ax

c0007b10 <fs_iso9660_shutdown>:
c0007b10:	83 ec 1c             	sub    esp,0x1c
c0007b13:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007b1b:	eb 37                	jmp    c0007b54 <fs_iso9660_shutdown+0x44>
c0007b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0007b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b24:	8b 04 85 a0 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde360]
c0007b2b:	83 ec 0c             	sub    esp,0xc
c0007b2e:	50                   	push   eax
c0007b2f:	e8 3d 10 00 00       	call   c0008b71 <free>
c0007b34:	83 c4 10             	add    esp,0x10
c0007b37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b3b:	8b 04 85 60 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde3a0]
c0007b42:	83 ec 0c             	sub    esp,0xc
c0007b45:	50                   	push   eax
c0007b46:	e8 26 10 00 00       	call   c0008b71 <free>
c0007b4b:	83 c4 10             	add    esp,0x10
c0007b4e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0007b52:	66 90                	xchg   ax,ax
c0007b54:	83 7c 24 0c 0f       	cmp    DWORD PTR [esp+0xc],0xf
c0007b59:	7e c5                	jle    c0007b20 <fs_iso9660_shutdown+0x10>
c0007b5b:	a1 50 1c 02 c0       	mov    eax,ds:0xc0021c50
c0007b60:	85 c0                	test   eax,eax
c0007b62:	74 14                	je     c0007b78 <fs_iso9660_shutdown+0x68>
c0007b64:	a1 50 1c 02 c0       	mov    eax,ds:0xc0021c50
c0007b69:	83 ec 0c             	sub    esp,0xc
c0007b6c:	50                   	push   eax
c0007b6d:	e8 ff 0f 00 00       	call   c0008b71 <free>
c0007b72:	83 c4 10             	add    esp,0x10
c0007b75:	8d 76 00             	lea    esi,[esi+0x0]
c0007b78:	a1 c0 12 02 c0       	mov    eax,ds:0xc00212c0
c0007b7d:	85 c0                	test   eax,eax
c0007b7f:	74 13                	je     c0007b94 <fs_iso9660_shutdown+0x84>
c0007b81:	a1 c0 12 02 c0       	mov    eax,ds:0xc00212c0
c0007b86:	83 ec 0c             	sub    esp,0xc
c0007b89:	50                   	push   eax
c0007b8a:	e8 e2 0f 00 00       	call   c0008b71 <free>
c0007b8f:	83 c4 10             	add    esp,0x10
c0007b92:	66 90                	xchg   ax,ax
c0007b94:	c7 05 c0 12 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00212c0,0x0
c0007b9e:	a1 c0 12 02 c0       	mov    eax,ds:0xc00212c0
c0007ba3:	a3 50 1c 02 c0       	mov    ds:0xc0021c50,eax
c0007ba8:	b8 00 00 00 00       	mov    eax,0x0
c0007bad:	83 c4 1c             	add    esp,0x1c
c0007bb0:	c3                   	ret    

c0007bb1 <CPU::current()>:
c0007bb1:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c0007bb6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0007bbc:	c3                   	ret    

c0007bbd <operator new(unsigned long)>:
c0007bbd:	e9 9f 0f 00 00       	jmp    c0008b61 <malloc>

c0007bc2 <operator delete(void*)>:
c0007bc2:	e9 ba 0f 00 00       	jmp    c0008b81 <rfree>

c0007bc7 <disableIRQs()>:
c0007bc7:	fa                   	cli    
c0007bc8:	c3                   	ret    

c0007bc9 <enableIRQs()>:
c0007bc9:	fb                   	sti    
c0007bca:	c3                   	ret    

c0007bcb <lockScheduler()>:
c0007bcb:	fa                   	cli    
c0007bcc:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0007bd2:	c3                   	ret    

c0007bd3 <unlockScheduler()>:
c0007bd3:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0007bd8:	48                   	dec    eax
c0007bd9:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0007bde:	75 01                	jne    c0007be1 <unlockScheduler()+0xe>
c0007be0:	fb                   	sti    
c0007be1:	c3                   	ret    

c0007be2 <lockStuff()>:
c0007be2:	fa                   	cli    
c0007be3:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0007be9:	ff 05 a4 51 02 c0    	inc    DWORD PTR ds:0xc00251a4
c0007bef:	c3                   	ret    

c0007bf0 <unlockStuff()>:
c0007bf0:	83 ec 0c             	sub    esp,0xc
c0007bf3:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c0007bf8:	48                   	dec    eax
c0007bf9:	a3 a4 51 02 c0       	mov    ds:0xc00251a4,eax
c0007bfe:	75 18                	jne    c0007c18 <unlockStuff()+0x28>
c0007c00:	83 3d a0 51 02 c0 00 	cmp    DWORD PTR ds:0xc00251a0,0x0
c0007c07:	74 0f                	je     c0007c18 <unlockStuff()+0x28>
c0007c09:	c7 05 a0 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251a0,0x0
c0007c13:	e8 7c cb 00 00       	call   c0014794 <schedule()>
c0007c18:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0007c1d:	48                   	dec    eax
c0007c1e:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0007c23:	75 01                	jne    c0007c26 <unlockStuff()+0x36>
c0007c25:	fb                   	sti    
c0007c26:	83 c4 0c             	add    esp,0xc
c0007c29:	c3                   	ret    

c0007c2a <Virt::getAKernelVAS()>:
c0007c2a:	a1 d0 1d 02 c0       	mov    eax,ds:0xc0021dd0
c0007c2f:	c3                   	ret    

c0007c30 <__not_memcpy>:
c0007c30:	57                   	push   edi
c0007c31:	56                   	push   esi
c0007c32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c36:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c3e:	89 c7                	mov    edi,eax
c0007c40:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007c42:	5e                   	pop    esi
c0007c43:	5f                   	pop    edi
c0007c44:	c3                   	ret    
c0007c45:	66 90                	xchg   ax,ax
c0007c47:	90                   	nop

c0007c48 <Krnl::resolveCompatibilitySymbol(char*)>:
c0007c48:	83 ec 0c             	sub    esp,0xc
c0007c4b:	83 ec 08             	sub    esp,0x8
c0007c4e:	68 d1 e8 01 c0       	push   0xc001e8d1
c0007c53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c57:	e8 a4 8a ff ff       	call   c0000700 <strcmp>
c0007c5c:	83 c4 10             	add    esp,0x10
c0007c5f:	85 c0                	test   eax,eax
c0007c61:	0f 94 c0             	sete   al
c0007c64:	84 c0                	test   al,al
c0007c66:	74 0c                	je     c0007c74 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0007c68:	b8 e8 1c 02 c0       	mov    eax,0xc0021ce8
c0007c6d:	e9 ea 00 00 00       	jmp    c0007d5c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007c72:	66 90                	xchg   ax,ax
c0007c74:	83 ec 08             	sub    esp,0x8
c0007c77:	68 da e8 01 c0       	push   0xc001e8da
c0007c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c80:	e8 7b 8a ff ff       	call   c0000700 <strcmp>
c0007c85:	83 c4 10             	add    esp,0x10
c0007c88:	85 c0                	test   eax,eax
c0007c8a:	0f 94 c0             	sete   al
c0007c8d:	84 c0                	test   al,al
c0007c8f:	74 0b                	je     c0007c9c <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0007c91:	b8 60 d5 01 c0       	mov    eax,0xc001d560
c0007c96:	e9 c1 00 00 00       	jmp    c0007d5c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007c9b:	90                   	nop
c0007c9c:	83 ec 08             	sub    esp,0x8
c0007c9f:	68 e4 e8 01 c0       	push   0xc001e8e4
c0007ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ca8:	e8 53 8a ff ff       	call   c0000700 <strcmp>
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	85 c0                	test   eax,eax
c0007cb2:	0f 94 c0             	sete   al
c0007cb5:	84 c0                	test   al,al
c0007cb7:	74 0b                	je     c0007cc4 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0007cb9:	b8 94 d2 01 c0       	mov    eax,0xc001d294
c0007cbe:	e9 99 00 00 00       	jmp    c0007d5c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007cc3:	90                   	nop
c0007cc4:	83 ec 08             	sub    esp,0x8
c0007cc7:	68 ed e8 01 c0       	push   0xc001e8ed
c0007ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cd0:	e8 2b 8a ff ff       	call   c0000700 <strcmp>
c0007cd5:	83 c4 10             	add    esp,0x10
c0007cd8:	85 c0                	test   eax,eax
c0007cda:	0f 94 c0             	sete   al
c0007cdd:	84 c0                	test   al,al
c0007cdf:	74 07                	je     c0007ce8 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0007ce1:	b8 60 d6 01 c0       	mov    eax,0xc001d660
c0007ce6:	eb 74                	jmp    c0007d5c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007ce8:	83 ec 08             	sub    esp,0x8
c0007ceb:	68 f7 e8 01 c0       	push   0xc001e8f7
c0007cf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cf4:	e8 07 8a ff ff       	call   c0000700 <strcmp>
c0007cf9:	83 c4 10             	add    esp,0x10
c0007cfc:	85 c0                	test   eax,eax
c0007cfe:	0f 94 c0             	sete   al
c0007d01:	84 c0                	test   al,al
c0007d03:	74 07                	je     c0007d0c <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0007d05:	b8 e0 d3 01 c0       	mov    eax,0xc001d3e0
c0007d0a:	eb 50                	jmp    c0007d5c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007d0c:	83 ec 08             	sub    esp,0x8
c0007d0f:	68 00 e9 01 c0       	push   0xc001e900
c0007d14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d18:	e8 e3 89 ff ff       	call   c0000700 <strcmp>
c0007d1d:	83 c4 10             	add    esp,0x10
c0007d20:	85 c0                	test   eax,eax
c0007d22:	0f 94 c0             	sete   al
c0007d25:	84 c0                	test   al,al
c0007d27:	74 07                	je     c0007d30 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0007d29:	b8 ec 1c 02 c0       	mov    eax,0xc0021cec
c0007d2e:	eb 2c                	jmp    c0007d5c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007d30:	83 ec 08             	sub    esp,0x8
c0007d33:	68 0d e9 01 c0       	push   0xc001e90d
c0007d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d3c:	e8 bf 89 ff ff       	call   c0000700 <strcmp>
c0007d41:	83 c4 10             	add    esp,0x10
c0007d44:	85 c0                	test   eax,eax
c0007d46:	0f 94 c0             	sete   al
c0007d49:	84 c0                	test   al,al
c0007d4b:	74 07                	je     c0007d54 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0007d4d:	b8 ed 1c 02 c0       	mov    eax,0xc0021ced
c0007d52:	eb 08                	jmp    c0007d5c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007d54:	b8 00 00 00 00       	mov    eax,0x0
c0007d59:	8d 76 00             	lea    esi,[esi+0x0]
c0007d5c:	83 c4 0c             	add    esp,0xc
c0007d5f:	c3                   	ret    

c0007d60 <Computer::close(int, int, void*)>:
c0007d60:	57                   	push   edi
c0007d61:	56                   	push   esi
c0007d62:	53                   	push   ebx
c0007d63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007d67:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007d6b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007d6f:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0007d75:	83 ec 0c             	sub    esp,0xc
c0007d78:	50                   	push   eax
c0007d79:	e8 d0 50 00 00       	call   c000ce4e <Device::closeAll()>
c0007d7e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0007d84:	83 c4 10             	add    esp,0x10
c0007d87:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d89:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0007d8d:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0007d95:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007d99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007d9d:	5b                   	pop    ebx
c0007d9e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0007da1:	5e                   	pop    esi
c0007da2:	5f                   	pop    edi
c0007da3:	ff e0                	jmp    eax

c0007da5 <Krnl::firstTask()>:
c0007da5:	53                   	push   ebx
c0007da6:	83 ec 14             	sub    esp,0x14
c0007da9:	fb                   	sti    
c0007daa:	68 1a e9 01 c0       	push   0xc001e91a
c0007daf:	e8 07 0e 00 00       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c0007db4:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0007dbb:	e8 a1 0d 00 00       	call   c0008b61 <malloc>
c0007dc0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007dc7:	89 c3                	mov    ebx,eax
c0007dc9:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0007dce:	50                   	push   eax
c0007dcf:	68 33 e9 01 c0       	push   0xc001e933
c0007dd4:	6a 01                	push   0x1
c0007dd6:	53                   	push   ebx
c0007dd7:	e8 8c c5 00 00       	call   c0014368 <Process::Process(bool, char const*, Process*, char**)>
c0007ddc:	83 c4 20             	add    esp,0x20
c0007ddf:	68 ff 00 00 00       	push   0xff
c0007de4:	6a 00                	push   0x0
c0007de6:	68 bb 85 00 c0       	push   0xc00085bb
c0007deb:	53                   	push   ebx
c0007dec:	e8 83 c7 00 00       	call   c0014574 <Process::createThread(void (*)(void*), void*, int)>
c0007df1:	8b 15 d0 51 02 c0    	mov    edx,DWORD PTR ds:0xc00251d0
c0007df7:	6a 7a                	push   0x7a
c0007df9:	6a 00                	push   0x0
c0007dfb:	68 c8 4f 01 c0       	push   0xc0014fc8
c0007e00:	52                   	push   edx
c0007e01:	e8 6e c7 00 00       	call   c0014574 <Process::createThread(void (*)(void*), void*, int)>
c0007e06:	83 c4 14             	add    esp,0x14
c0007e09:	a3 88 51 02 c0       	mov    ds:0xc0025188,eax
c0007e0e:	68 30 ea 01 c0       	push   0xc001ea30
c0007e13:	c6 05 ed 1c 02 c0 01 	mov    BYTE PTR ds:0xc0021ced,0x1
c0007e1a:	e8 9c 0d 00 00       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c0007e1f:	e8 83 d5 00 00       	call   c00153a7 <Vm::initialise8086()>
c0007e24:	e8 69 3e 00 00       	call   c000bc92 <Fs::initVFS()>
c0007e29:	c7 04 24 40 e9 01 c0 	mov    DWORD PTR [esp],0xc001e940
c0007e30:	e8 86 0d 00 00       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c0007e35:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c0007e3a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007e40:	8b 10                	mov    edx,DWORD PTR [eax]
c0007e42:	6a 00                	push   0x0
c0007e44:	6a 00                	push   0x0
c0007e46:	6a 00                	push   0x0
c0007e48:	50                   	push   eax
c0007e49:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007e4c:	83 c4 14             	add    esp,0x14
c0007e4f:	68 30 ea 01 c0       	push   0xc001ea30
c0007e54:	e8 62 0d 00 00       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c0007e59:	e8 9c ad 00 00       	call   c0012bfa <Sys::loadSyscalls()>
c0007e5e:	e8 d3 94 00 00       	call   c0011336 <Krnl::loadSystemEnv()>
c0007e63:	e8 98 97 00 00       	call   c0011600 <Krnl::setupPowerManager()>
c0007e68:	83 c4 0c             	add    esp,0xc
c0007e6b:	6a 3a                	push   0x3a
c0007e6d:	68 5a e9 01 c0       	push   0xc001e95a
c0007e72:	68 63 e9 01 c0       	push   0xc001e963
c0007e77:	e8 ae 9c 00 00       	call   c0011b2a <Reg::readIntWithDefault(char*, char*, int)>
c0007e7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e7f:	e8 1c 49 00 00       	call   c000c7a0 <User::loadClockSettings(int)>
c0007e84:	c7 04 24 54 ea 01 c0 	mov    DWORD PTR [esp],0xc001ea54
c0007e8b:	e8 2b 0d 00 00       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c0007e90:	59                   	pop    ecx
c0007e91:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c0007e96:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0007e9c:	53                   	push   ebx
c0007e9d:	e8 aa 4f 00 00       	call   c000ce4c <Device::loadDriversForAll()>
c0007ea2:	c7 04 24 6b e9 01 c0 	mov    DWORD PTR [esp],0xc001e96b
c0007ea9:	e8 0d 0d 00 00       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c0007eae:	58                   	pop    eax
c0007eaf:	8b 1d e8 1c 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ce8
c0007eb5:	5a                   	pop    edx
c0007eb6:	6a 01                	push   0x1
c0007eb8:	68 7c e9 01 c0       	push   0xc001e97c
c0007ebd:	e8 e0 be 00 00       	call   c0013da2 <Thr::loadDLL(char const*, bool)>
c0007ec2:	59                   	pop    ecx
c0007ec3:	5a                   	pop    edx
c0007ec4:	53                   	push   ebx
c0007ec5:	50                   	push   eax
c0007ec6:	e8 08 c1 00 00       	call   c0013fd3 <Thr::executeDLL(unsigned long, void*)>
c0007ecb:	83 c4 10             	add    esp,0x10
c0007ece:	83 ec 0c             	sub    esp,0xc
c0007ed1:	6a 02                	push   0x2
c0007ed3:	e8 b8 ca 00 00       	call   c0014990 <blockTask(TaskState)>
c0007ed8:	83 c4 10             	add    esp,0x10
c0007edb:	eb f1                	jmp    c0007ece <Krnl::firstTask()+0x129>
c0007edd:	90                   	nop

c0007ede <Computer::Computer()>:
c0007ede:	83 ec 0c             	sub    esp,0xc
c0007ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ee5:	83 ec 08             	sub    esp,0x8
c0007ee8:	68 98 e9 01 c0       	push   0xc001e998
c0007eed:	50                   	push   eax
c0007eee:	e8 d5 4f 00 00       	call   c000cec8 <Device::Device(char const*)>
c0007ef3:	83 c4 10             	add    esp,0x10
c0007ef6:	ba a0 ea 01 c0       	mov    edx,0xc001eaa0
c0007efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eff:	89 10                	mov    DWORD PTR [eax],edx
c0007f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f05:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0007f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f13:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0007f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f21:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0007f27:	83 ca 04             	or     edx,0x4
c0007f2a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0007f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007f3a:	31 d2                	xor    edx,edx
c0007f3c:	88 c2                	mov    dl,al
c0007f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f42:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0007f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f4d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007f53:	31 d2                	xor    edx,edx
c0007f55:	88 c2                	mov    dl,al
c0007f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f5b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0007f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f64:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007f6a:	8d 50 01             	lea    edx,[eax+0x1]
c0007f6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007f71:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0007f77:	31 d2                	xor    edx,edx
c0007f79:	88 c2                	mov    dl,al
c0007f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f7f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0007f83:	83 e1 3f             	and    ecx,0x3f
c0007f86:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0007f8a:	90                   	nop
c0007f8b:	83 c4 0c             	add    esp,0xc
c0007f8e:	c3                   	ret    
c0007f8f:	90                   	nop

c0007f90 <Computer::setBootMessage(char const*)>:
c0007f90:	c3                   	ret    
c0007f91:	90                   	nop

c0007f92 <Computer::detectFeatures()>:
c0007f92:	55                   	push   ebp
c0007f93:	57                   	push   edi
c0007f94:	56                   	push   esi
c0007f95:	53                   	push   ebx
c0007f96:	83 ec 1c             	sub    esp,0x1c
c0007f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007f9d:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0007fa7:	e8 6d 82 ff ff       	call   c0000219 <detectCPUID>
c0007fac:	85 c0                	test   eax,eax
c0007fae:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007fb4:	0f 95 c2             	setne  dl
c0007fb7:	83 e0 fd             	and    eax,0xfffffffd
c0007fba:	01 d2                	add    edx,edx
c0007fbc:	09 d0                	or     eax,edx
c0007fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007fc4:	a8 02                	test   al,0x2
c0007fc6:	75 46                	jne    c000800e <Computer::detectFeatures()+0x7c>
c0007fc8:	f6 05 01 1d 02 c0 04 	test   BYTE PTR ds:0xc0021d01,0x4
c0007fcf:	74 07                	je     c0007fd8 <Computer::detectFeatures()+0x46>
c0007fd1:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0007fd8:	e8 49 52 01 00       	call   c001d226 <x87Detect>
c0007fdd:	83 e0 01             	and    eax,0x1
c0007fe0:	c1 e0 04             	shl    eax,0x4
c0007fe3:	88 c2                	mov    dl,al
c0007fe5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007feb:	83 e0 ef             	and    eax,0xffffffef
c0007fee:	09 d0                	or     eax,edx
c0007ff0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007ff6:	a8 10                	test   al,0x10
c0007ff8:	0f 85 2a 01 00 00    	jne    c0008128 <Computer::detectFeatures()+0x196>
c0007ffe:	84 c0                	test   al,al
c0008000:	0f 88 45 01 00 00    	js     c000814b <Computer::detectFeatures()+0x1b9>
c0008006:	83 c4 1c             	add    esp,0x1c
c0008009:	5b                   	pop    ebx
c000800a:	5e                   	pop    esi
c000800b:	5f                   	pop    edi
c000800c:	5d                   	pop    ebp
c000800d:	c3                   	ret    
c000800e:	83 ec 0c             	sub    esp,0xc
c0008011:	6a 20                	push   0x20
c0008013:	e8 40 84 00 00       	call   c0010458 <CPU::cpuidCheckEDX(unsigned int)>
c0008018:	83 e0 01             	and    eax,0x1
c000801b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008022:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0008028:	83 e0 f7             	and    eax,0xfffffff7
c000802b:	09 d0                	or     eax,edx
c000802d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0008033:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000803a:	e8 19 84 00 00       	call   c0010458 <CPU::cpuidCheckEDX(unsigned int)>
c000803f:	83 e0 01             	and    eax,0x1
c0008042:	88 c2                	mov    dl,al
c0008044:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000804a:	83 e0 fe             	and    eax,0xfffffffe
c000804d:	09 d0                	or     eax,edx
c000804f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0008055:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000805c:	e8 f7 83 00 00       	call   c0010458 <CPU::cpuidCheckEDX(unsigned int)>
c0008061:	c1 e0 07             	shl    eax,0x7
c0008064:	88 c2                	mov    dl,al
c0008066:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000806c:	83 e0 7f             	and    eax,0x7f
c000806f:	09 d0                	or     eax,edx
c0008071:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0008077:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000807e:	e8 d5 83 00 00       	call   c0010458 <CPU::cpuidCheckEDX(unsigned int)>
c0008083:	83 c4 10             	add    esp,0x10
c0008086:	83 e0 01             	and    eax,0x1
c0008089:	c1 e0 05             	shl    eax,0x5
c000808c:	88 c2                	mov    dl,al
c000808e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0008094:	83 e0 df             	and    eax,0xffffffdf
c0008097:	09 d0                	or     eax,edx
c0008099:	f7 05 00 1d 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0021d00,0x401
c00080a3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00080a9:	0f 84 c2 00 00 00    	je     c0008171 <Computer::detectFeatures()+0x1df>
c00080af:	83 e0 fe             	and    eax,0xfffffffe
c00080b2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00080b8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00080be:	88 c2                	mov    dl,al
c00080c0:	83 e2 09             	and    edx,0x9
c00080c3:	fe ca                	dec    dl
c00080c5:	75 09                	jne    c00080d0 <Computer::detectFeatures()+0x13e>
c00080c7:	83 e0 fe             	and    eax,0xfffffffe
c00080ca:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00080d0:	83 ec 0c             	sub    esp,0xc
c00080d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00080d7:	50                   	push   eax
c00080d8:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00080dc:	55                   	push   ebp
c00080dd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00080e1:	57                   	push   edi
c00080e2:	8d 74 24 18          	lea    esi,[esp+0x18]
c00080e6:	56                   	push   esi
c00080e7:	68 00 00 00 80       	push   0x80000000
c00080ec:	e8 e3 82 00 00       	call   c00103d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00080f1:	83 c4 20             	add    esp,0x20
c00080f4:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00080fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00080ff:	0f 86 c3 fe ff ff    	jbe    c0007fc8 <Computer::detectFeatures()+0x36>
c0008105:	83 ec 0c             	sub    esp,0xc
c0008108:	50                   	push   eax
c0008109:	55                   	push   ebp
c000810a:	57                   	push   edi
c000810b:	56                   	push   esi
c000810c:	68 01 00 00 80       	push   0x80000001
c0008111:	e8 be 82 00 00       	call   c00103d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008116:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0008120:	83 c4 20             	add    esp,0x20
c0008123:	e9 a0 fe ff ff       	jmp    c0007fc8 <Computer::detectFeatures()+0x36>
c0008128:	e8 b3 50 01 00       	call   c001d1e0 <absolutelyNoChanceInHell>
c000812d:	88 c2                	mov    dl,al
c000812f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0008135:	c1 e2 07             	shl    edx,0x7
c0008138:	83 e0 7f             	and    eax,0x7f
c000813b:	09 d0                	or     eax,edx
c000813d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0008143:	84 c0                	test   al,al
c0008145:	0f 89 bb fe ff ff    	jns    c0008006 <Computer::detectFeatures()+0x74>
c000814b:	e8 10 4e 01 00       	call   c001cf60 <avxDetect>
c0008150:	83 e0 01             	and    eax,0x1
c0008153:	c1 e0 05             	shl    eax,0x5
c0008156:	88 c2                	mov    dl,al
c0008158:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000815e:	83 e0 df             	and    eax,0xffffffdf
c0008161:	09 d0                	or     eax,edx
c0008163:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0008169:	83 c4 1c             	add    esp,0x1c
c000816c:	5b                   	pop    ebx
c000816d:	5e                   	pop    esi
c000816e:	5f                   	pop    edi
c000816f:	5d                   	pop    ebp
c0008170:	c3                   	ret    
c0008171:	83 ec 0c             	sub    esp,0xc
c0008174:	68 00 02 00 00       	push   0x200
c0008179:	e8 da 82 00 00       	call   c0010458 <CPU::cpuidCheckEDX(unsigned int)>
c000817e:	83 c4 10             	add    esp,0x10
c0008181:	83 e0 01             	and    eax,0x1
c0008184:	88 c2                	mov    dl,al
c0008186:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000818c:	83 e0 fe             	and    eax,0xfffffffe
c000818f:	09 d0                	or     eax,edx
c0008191:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0008197:	e9 1c ff ff ff       	jmp    c00080b8 <Computer::detectFeatures()+0x126>

c000819c <Computer::displayFeatures()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <Computer::rdmsr(unsigned int)>:
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081a5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00081ac:	74 0a                	je     c00081b8 <Computer::rdmsr(unsigned int)+0x1a>
c00081ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00081b2:	0f 32                	rdmsr  
c00081b4:	83 c4 0c             	add    esp,0xc
c00081b7:	c3                   	ret    
c00081b8:	83 ec 0c             	sub    esp,0xc
c00081bb:	68 a1 e9 01 c0       	push   0xc001e9a1
c00081c0:	e8 7a 92 00 00       	call   c001143f <Krnl::panic(char const*)>
c00081c5:	83 c4 10             	add    esp,0x10
c00081c8:	eb e4                	jmp    c00081ae <Computer::rdmsr(unsigned int)+0x10>

c00081ca <Computer::wrmsr(unsigned int, unsigned long long)>:
c00081ca:	57                   	push   edi
c00081cb:	56                   	push   esi
c00081cc:	52                   	push   edx
c00081cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081d1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00081d5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00081d9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00081e0:	74 0e                	je     c00081f0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00081e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00081e6:	89 f0                	mov    eax,esi
c00081e8:	89 fa                	mov    edx,edi
c00081ea:	0f 30                	wrmsr  
c00081ec:	58                   	pop    eax
c00081ed:	5e                   	pop    esi
c00081ee:	5f                   	pop    edi
c00081ef:	c3                   	ret    
c00081f0:	83 ec 0c             	sub    esp,0xc
c00081f3:	68 a7 e9 01 c0       	push   0xc001e9a7
c00081f8:	e8 42 92 00 00       	call   c001143f <Krnl::panic(char const*)>
c00081fd:	83 c4 10             	add    esp,0x10
c0008200:	eb e0                	jmp    c00081e2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008202 <Computer::shutdown()>:
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008209:	8b 10                	mov    edx,DWORD PTR [eax]
c000820b:	6a 00                	push   0x0
c000820d:	6a 00                	push   0x0
c000820f:	6a 00                	push   0x0
c0008211:	50                   	push   eax
c0008212:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008215:	83 c4 1c             	add    esp,0x1c
c0008218:	c3                   	ret    
c0008219:	90                   	nop

c000821a <Computer::restart()>:
c000821a:	83 ec 0c             	sub    esp,0xc
c000821d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008221:	8b 10                	mov    edx,DWORD PTR [eax]
c0008223:	6a 00                	push   0x0
c0008225:	6a 00                	push   0x0
c0008227:	6a 01                	push   0x1
c0008229:	50                   	push   eax
c000822a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000822d:	83 c4 1c             	add    esp,0x1c
c0008230:	c3                   	ret    
c0008231:	90                   	nop

c0008232 <Computer::sleep()>:
c0008232:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008236:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000823c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008240:	e9 8b 7c 00 00       	jmp    c000fed0 <ACPI::sleep()>
c0008245:	90                   	nop

c0008246 <Computer::nmiEnabled()>:
c0008246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000824a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008250:	c3                   	ret    
c0008251:	90                   	nop

c0008252 <Computer::readCMOS(unsigned char)>:
c0008252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008256:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000825d:	19 c0                	sbb    eax,eax
c000825f:	83 e0 80             	and    eax,0xffffff80
c0008262:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008266:	e6 70                	out    0x70,al
c0008268:	e4 71                	in     al,0x71
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Computer::enableNMI(bool)>:
c000826c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008274:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000827a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008282:	eb ce                	jmp    c0008252 <Computer::readCMOS(unsigned char)>

c0008284 <Computer::open(int, int, void*)>:
c0008284:	56                   	push   esi
c0008285:	53                   	push   ebx
c0008286:	83 ec 10             	sub    esp,0x10
c0008289:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000828d:	f6 05 00 1d 02 c0 04 	test   BYTE PTR ds:0xc0021d00,0x4
c0008294:	68 ad e9 01 c0       	push   0xc001e9ad
c0008299:	0f 94 05 e0 0b 02 c0 	sete   BYTE PTR ds:0xc0020be0
c00082a0:	e8 16 09 00 00       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c00082a5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00082ac:	e8 b0 08 00 00       	call   c0008b61 <malloc>
c00082b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00082b4:	89 c6                	mov    esi,eax
c00082b6:	e8 ad 77 00 00       	call   c000fa68 <ACPI::ACPI()>
c00082bb:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00082c1:	58                   	pop    eax
c00082c2:	5a                   	pop    edx
c00082c3:	56                   	push   esi
c00082c4:	53                   	push   ebx
c00082c5:	e8 66 4a 00 00       	call   c000cd30 <Device::addChild(Device*)>
c00082ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00082cd:	e8 c0 fc ff ff       	call   c0007f92 <Computer::detectFeatures()>
c00082d2:	59                   	pop    ecx
c00082d3:	5e                   	pop    esi
c00082d4:	6a 01                	push   0x1
c00082d6:	53                   	push   ebx
c00082d7:	e8 90 ff ff ff       	call   c000826c <Computer::enableNMI(bool)>
c00082dc:	c7 04 24 c5 e9 01 c0 	mov    DWORD PTR [esp],0xc001e9c5
c00082e3:	e8 d3 08 00 00       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c00082e8:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00082ef:	e8 6d 08 00 00       	call   c0008b61 <malloc>
c00082f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00082f7:	89 c6                	mov    esi,eax
c00082f9:	e8 12 82 00 00       	call   c0010510 <CPU::CPU()>
c00082fe:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0008304:	58                   	pop    eax
c0008305:	5a                   	pop    edx
c0008306:	56                   	push   esi
c0008307:	53                   	push   ebx
c0008308:	e8 23 4a 00 00       	call   c000cd30 <Device::addChild(Device*)>
c000830d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0008313:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0008317:	8b 10                	mov    edx,DWORD PTR [eax]
c0008319:	51                   	push   ecx
c000831a:	6a 00                	push   0x0
c000831c:	6a 00                	push   0x0
c000831e:	50                   	push   eax
c000831f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008322:	83 c4 14             	add    esp,0x14
c0008325:	68 74 ea 01 c0       	push   0xc001ea74
c000832a:	e8 8c 08 00 00       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c000832f:	e8 34 e1 00 00       	call   c0016468 <HalInitialiseCoprocessor()>
c0008334:	c7 04 24 df e9 01 c0 	mov    DWORD PTR [esp],0xc001e9df
c000833b:	e8 7b 08 00 00       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c0008340:	c7 04 24 a5 7d 00 c0 	mov    DWORD PTR [esp],0xc0007da5
c0008347:	e8 40 c3 00 00       	call   c001468c <setupMultitasking(void (*)())>
c000834c:	83 c4 14             	add    esp,0x14
c000834f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0008354:	5b                   	pop    ebx
c0008355:	5e                   	pop    esi
c0008356:	c3                   	ret    
c0008357:	90                   	nop

c0008358 <Computer::disableNMI()>:
c0008358:	6a 00                	push   0x0
c000835a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000835e:	50                   	push   eax
c000835f:	e8 08 ff ff ff       	call   c000826c <Computer::enableNMI(bool)>
c0008364:	5a                   	pop    edx
c0008365:	59                   	pop    ecx
c0008366:	c3                   	ret    
c0008367:	90                   	nop

c0008368 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0008368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000836c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008373:	19 c0                	sbb    eax,eax
c0008375:	83 e0 80             	and    eax,0xffffff80
c0008378:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000837c:	e6 70                	out    0x70,al
c000837e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008382:	e6 71                	out    0x71,al
c0008384:	c3                   	ret    
c0008385:	90                   	nop

c0008386 <Computer::handleNMI()>:
c0008386:	56                   	push   esi
c0008387:	53                   	push   ebx
c0008388:	83 ec 10             	sub    esp,0x10
c000838b:	e4 92                	in     al,0x92
c000838d:	89 c6                	mov    esi,eax
c000838f:	e4 61                	in     al,0x61
c0008391:	68 fa e9 01 c0       	push   0xc001e9fa
c0008396:	88 c3                	mov    bl,al
c0008398:	e8 53 35 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c000839d:	83 c4 10             	add    esp,0x10
c00083a0:	83 e6 10             	and    esi,0x10
c00083a3:	75 0d                	jne    c00083b2 <Computer::handleNMI()+0x2c>
c00083a5:	f6 c3 40             	test   bl,0x40
c00083a8:	75 1d                	jne    c00083c7 <Computer::handleNMI()+0x41>
c00083aa:	84 db                	test   bl,bl
c00083ac:	78 2d                	js     c00083db <Computer::handleNMI()+0x55>
c00083ae:	58                   	pop    eax
c00083af:	5b                   	pop    ebx
c00083b0:	5e                   	pop    esi
c00083b1:	c3                   	ret    
c00083b2:	83 ec 0c             	sub    esp,0xc
c00083b5:	68 0b ea 01 c0       	push   0xc001ea0b
c00083ba:	e8 80 90 00 00       	call   c001143f <Krnl::panic(char const*)>
c00083bf:	83 c4 10             	add    esp,0x10
c00083c2:	f6 c3 40             	test   bl,0x40
c00083c5:	74 e3                	je     c00083aa <Computer::handleNMI()+0x24>
c00083c7:	83 ec 0c             	sub    esp,0xc
c00083ca:	68 18 ea 01 c0       	push   0xc001ea18
c00083cf:	e8 6b 90 00 00       	call   c001143f <Krnl::panic(char const*)>
c00083d4:	83 c4 10             	add    esp,0x10
c00083d7:	84 db                	test   bl,bl
c00083d9:	79 d3                	jns    c00083ae <Computer::handleNMI()+0x28>
c00083db:	c7 44 24 10 22 ea 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ea22
c00083e3:	5a                   	pop    edx
c00083e4:	5b                   	pop    ebx
c00083e5:	5e                   	pop    esi
c00083e6:	e9 54 90 00 00       	jmp    c001143f <Krnl::panic(char const*)>
c00083eb:	90                   	nop

c00083ec <GDTEntry::setBase(unsigned int)>:
c00083ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00083f4:	89 c1                	mov    ecx,eax
c00083f6:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00083fa:	c1 e9 10             	shr    ecx,0x10
c00083fd:	c1 e8 18             	shr    eax,0x18
c0008400:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0008403:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0008406:	c3                   	ret    
c0008407:	90                   	nop

c0008408 <GDTEntry::setLimit(unsigned int)>:
c0008408:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000840c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008410:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0008413:	66 89 01             	mov    WORD PTR [ecx],ax
c0008416:	83 e2 f0             	and    edx,0xfffffff0
c0008419:	c1 e8 10             	shr    eax,0x10
c000841c:	83 e0 0f             	and    eax,0xf
c000841f:	09 d0                	or     eax,edx
c0008421:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0008424:	c3                   	ret    
c0008425:	90                   	nop

c0008426 <GDT::GDT()>:
c0008426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000842a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008434:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000843a:	90                   	nop
c000843b:	c3                   	ret    

c000843c <GDT::addEntry(GDTEntry)>:
c000843c:	53                   	push   ebx
c000843d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008441:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008445:	8b 02                	mov    eax,DWORD PTR [edx]
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000844f:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0008453:	8d 48 01             	lea    ecx,[eax+0x1]
c0008456:	c1 e0 03             	shl    eax,0x3
c0008459:	89 0a                	mov    DWORD PTR [edx],ecx
c000845b:	5b                   	pop    ebx
c000845c:	c3                   	ret    
c000845d:	90                   	nop

c000845e <GDT::getNumberOfEntries()>:
c000845e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008462:	8b 00                	mov    eax,DWORD PTR [eax]
c0008464:	c3                   	ret    
c0008465:	90                   	nop

c0008466 <GDT::flush()>:
c0008466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000846a:	8b 10                	mov    edx,DWORD PTR [eax]
c000846c:	83 c0 04             	add    eax,0x4
c000846f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0008476:	a3 f2 1c 02 c0       	mov    ds:0xc0021cf2,eax
c000847b:	66 89 15 f0 1c 02 c0 	mov    WORD PTR ds:0xc0021cf0,dx
c0008482:	e9 f6 7e ff ff       	jmp    c000037d <loadGDT>
c0008487:	90                   	nop

c0008488 <GDT::setup()>:
c0008488:	57                   	push   edi
c0008489:	56                   	push   esi
c000848a:	53                   	push   ebx
c000848b:	83 ec 30             	sub    esp,0x30
c000848e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008492:	6a 00                	push   0x0
c0008494:	8d 74 24 14          	lea    esi,[esp+0x14]
c0008498:	56                   	push   esi
c0008499:	e8 4e ff ff ff       	call   c00083ec <GDTEntry::setBase(unsigned int)>
c000849e:	6a 00                	push   0x0
c00084a0:	56                   	push   esi
c00084a1:	e8 62 ff ff ff       	call   c0008408 <GDTEntry::setLimit(unsigned int)>
c00084a6:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00084ae:	6a 00                	push   0x0
c00084b0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00084b4:	56                   	push   esi
c00084b5:	e8 32 ff ff ff       	call   c00083ec <GDTEntry::setBase(unsigned int)>
c00084ba:	68 ff ff ff 00       	push   0xffffff
c00084bf:	56                   	push   esi
c00084c0:	e8 43 ff ff ff       	call   c0008408 <GDTEntry::setLimit(unsigned int)>
c00084c5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00084c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00084cd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00084d1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00084d5:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00084da:	0d 00 9a c0 00       	or     eax,0xc09a00
c00084df:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00084e3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00084e7:	89 f8                	mov    eax,edi
c00084e9:	89 fa                	mov    edx,edi
c00084eb:	80 e4 f7             	and    ah,0xf7
c00084ee:	80 ce 60             	or     dh,0x60
c00084f1:	89 c7                	mov    edi,eax
c00084f3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00084f7:	80 cc 60             	or     ah,0x60
c00084fa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00084fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008502:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0008506:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000850a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000850e:	83 c4 20             	add    esp,0x20
c0008511:	6a 00                	push   0x0
c0008513:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008517:	50                   	push   eax
c0008518:	e8 cf fe ff ff       	call   c00083ec <GDTEntry::setBase(unsigned int)>
c000851d:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0008521:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0008525:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000852a:	6a 00                	push   0x0
c000852c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0008530:	50                   	push   eax
c0008531:	e8 b6 fe ff ff       	call   c00083ec <GDTEntry::setBase(unsigned int)>
c0008536:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000853b:	83 c4 0c             	add    esp,0xc
c000853e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	53                   	push   ebx
c0008547:	e8 f0 fe ff ff       	call   c000843c <GDT::addEntry(GDTEntry)>
c000854c:	83 c4 0c             	add    esp,0xc
c000854f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008553:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008557:	53                   	push   ebx
c0008558:	e8 df fe ff ff       	call   c000843c <GDT::addEntry(GDTEntry)>
c000855d:	83 c4 0c             	add    esp,0xc
c0008560:	57                   	push   edi
c0008561:	56                   	push   esi
c0008562:	53                   	push   ebx
c0008563:	e8 d4 fe ff ff       	call   c000843c <GDT::addEntry(GDTEntry)>
c0008568:	83 c4 0c             	add    esp,0xc
c000856b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000856f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0008573:	53                   	push   ebx
c0008574:	e8 c3 fe ff ff       	call   c000843c <GDT::addEntry(GDTEntry)>
c0008579:	83 c4 0c             	add    esp,0xc
c000857c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008580:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008584:	53                   	push   ebx
c0008585:	e8 b2 fe ff ff       	call   c000843c <GDT::addEntry(GDTEntry)>
c000858a:	83 c4 0c             	add    esp,0xc
c000858d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008591:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008595:	53                   	push   ebx
c0008596:	e8 a1 fe ff ff       	call   c000843c <GDT::addEntry(GDTEntry)>
c000859b:	83 c4 0c             	add    esp,0xc
c000859e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00085a2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00085a6:	53                   	push   ebx
c00085a7:	e8 90 fe ff ff       	call   c000843c <GDT::addEntry(GDTEntry)>
c00085ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085af:	e8 b2 fe ff ff       	call   c0008466 <GDT::flush()>
c00085b4:	83 c4 40             	add    esp,0x40
c00085b7:	5b                   	pop    ebx
c00085b8:	5e                   	pop    esi
c00085b9:	5f                   	pop    edi
c00085ba:	c3                   	ret    

c00085bb <idleFunction(void*)>:
c00085bb:	83 ec 0c             	sub    esp,0xc
c00085be:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c00085c3:	48                   	dec    eax
c00085c4:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c00085c9:	75 01                	jne    c00085cc <idleFunction(void*)+0x11>
c00085cb:	fb                   	sti    
c00085cc:	f4                   	hlt    
c00085cd:	e8 10 52 01 00       	call   c001d7e2 <idleCommon()>
c00085d2:	eb f8                	jmp    c00085cc <idleFunction(void*)+0x11>

c00085d4 <IDTEntry::IDTEntry(bool)>:
c00085d4:	83 ec 04             	sub    esp,0x4
c00085d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085db:	88 04 24             	mov    BYTE PTR [esp],al
c00085de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00085e2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00085e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00085ec:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00085f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00085f4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00085f7:	83 e2 f0             	and    edx,0xfffffff0
c00085fa:	83 ca 0e             	or     edx,0xe
c00085fd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0008600:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008604:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0008607:	83 e2 ef             	and    edx,0xffffffef
c000860a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000860d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0008611:	74 05                	je     c0008618 <IDTEntry::IDTEntry(bool)+0x44>
c0008613:	b2 03                	mov    dl,0x3
c0008615:	eb 05                	jmp    c000861c <IDTEntry::IDTEntry(bool)+0x48>
c0008617:	90                   	nop
c0008618:	b2 00                	mov    dl,0x0
c000861a:	66 90                	xchg   ax,ax
c000861c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008620:	83 e2 03             	and    edx,0x3
c0008623:	88 d1                	mov    cl,dl
c0008625:	c1 e1 05             	shl    ecx,0x5
c0008628:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000862b:	83 e2 9f             	and    edx,0xffffff9f
c000862e:	09 ca                	or     edx,ecx
c0008630:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0008633:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008637:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000863a:	83 ca 80             	or     edx,0xffffff80
c000863d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0008640:	90                   	nop
c0008641:	83 c4 04             	add    esp,0x4
c0008644:	c3                   	ret    
c0008645:	90                   	nop

c0008646 <IDTEntry::setOffset(unsigned int)>:
c0008646:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000864a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000864e:	66 89 02             	mov    WORD PTR [edx],ax
c0008651:	c1 e8 10             	shr    eax,0x10
c0008654:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0008658:	c3                   	ret    
c0008659:	90                   	nop
c000865a:	66 90                	xchg   ax,ax

c000865c <IDT::IDT()>:
c000865c:	90                   	nop
c000865d:	c3                   	ret    

c000865e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000865e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008662:	83 c0 30             	add    eax,0x30
c0008665:	c3                   	ret    

c0008666 <IDT::addEntry(IDTEntry, int)>:
c0008666:	53                   	push   ebx
c0008667:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000866b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000866f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008673:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008677:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000867a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000867e:	5b                   	pop    ebx
c000867f:	c3                   	ret    

c0008680 <IDT::addEntry(int, void (*)(), bool)>:
c0008680:	53                   	push   ebx
c0008681:	83 ec 10             	sub    esp,0x10
c0008684:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0008689:	50                   	push   eax
c000868a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000868e:	53                   	push   ebx
c000868f:	e8 40 ff ff ff       	call   c00085d4 <IDTEntry::IDTEntry(bool)>
c0008694:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008698:	53                   	push   ebx
c0008699:	e8 a8 ff ff ff       	call   c0008646 <IDTEntry::setOffset(unsigned int)>
c000869e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00086a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00086a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00086aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00086ae:	e8 b3 ff ff ff       	call   c0008666 <IDT::addEntry(IDTEntry, int)>
c00086b3:	83 c4 30             	add    esp,0x30
c00086b6:	5b                   	pop    ebx
c00086b7:	c3                   	ret    

c00086b8 <IDT::flush()>:
c00086b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bc:	66 c7 05 f8 1c 02 c0 ff 07 	mov    WORD PTR ds:0xc0021cf8,0x7ff
c00086c5:	a3 fa 1c 02 c0       	mov    ds:0xc0021cfa,eax
c00086ca:	0f 01 1d f8 1c 02 c0 	lidtd  ds:0xc0021cf8
c00086d1:	c3                   	ret    

c00086d2 <IDT::setup()>:
c00086d2:	57                   	push   edi
c00086d3:	56                   	push   esi
c00086d4:	53                   	push   ebx
c00086d5:	83 ec 10             	sub    esp,0x10
c00086d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00086dc:	6a 00                	push   0x0
c00086de:	68 f0 cf 01 c0       	push   0xc001cff0
c00086e3:	6a 00                	push   0x0
c00086e5:	53                   	push   ebx
c00086e6:	e8 95 ff ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00086eb:	6a 00                	push   0x0
c00086ed:	68 00 d0 01 c0       	push   0xc001d000
c00086f2:	6a 01                	push   0x1
c00086f4:	53                   	push   ebx
c00086f5:	e8 86 ff ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00086fa:	83 c4 20             	add    esp,0x20
c00086fd:	6a 00                	push   0x0
c00086ff:	68 0a d0 01 c0       	push   0xc001d00a
c0008704:	6a 02                	push   0x2
c0008706:	53                   	push   ebx
c0008707:	e8 74 ff ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000870c:	6a 00                	push   0x0
c000870e:	68 14 d0 01 c0       	push   0xc001d014
c0008713:	6a 03                	push   0x3
c0008715:	53                   	push   ebx
c0008716:	e8 65 ff ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000871b:	83 c4 20             	add    esp,0x20
c000871e:	6a 00                	push   0x0
c0008720:	68 1e d0 01 c0       	push   0xc001d01e
c0008725:	6a 04                	push   0x4
c0008727:	53                   	push   ebx
c0008728:	e8 53 ff ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000872d:	6a 00                	push   0x0
c000872f:	68 28 d0 01 c0       	push   0xc001d028
c0008734:	6a 05                	push   0x5
c0008736:	53                   	push   ebx
c0008737:	e8 44 ff ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000873c:	83 c4 20             	add    esp,0x20
c000873f:	6a 00                	push   0x0
c0008741:	68 32 d0 01 c0       	push   0xc001d032
c0008746:	6a 06                	push   0x6
c0008748:	53                   	push   ebx
c0008749:	e8 32 ff ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000874e:	6a 00                	push   0x0
c0008750:	68 3c d0 01 c0       	push   0xc001d03c
c0008755:	6a 07                	push   0x7
c0008757:	53                   	push   ebx
c0008758:	e8 23 ff ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000875d:	83 c4 20             	add    esp,0x20
c0008760:	6a 00                	push   0x0
c0008762:	68 46 d0 01 c0       	push   0xc001d046
c0008767:	6a 08                	push   0x8
c0008769:	53                   	push   ebx
c000876a:	e8 11 ff ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000876f:	6a 00                	push   0x0
c0008771:	68 4e d0 01 c0       	push   0xc001d04e
c0008776:	6a 09                	push   0x9
c0008778:	53                   	push   ebx
c0008779:	e8 02 ff ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000877e:	83 c4 20             	add    esp,0x20
c0008781:	6a 00                	push   0x0
c0008783:	68 58 d0 01 c0       	push   0xc001d058
c0008788:	6a 0a                	push   0xa
c000878a:	53                   	push   ebx
c000878b:	e8 f0 fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c0008790:	6a 00                	push   0x0
c0008792:	68 60 d0 01 c0       	push   0xc001d060
c0008797:	6a 0b                	push   0xb
c0008799:	53                   	push   ebx
c000879a:	e8 e1 fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000879f:	83 c4 20             	add    esp,0x20
c00087a2:	6a 00                	push   0x0
c00087a4:	68 68 d0 01 c0       	push   0xc001d068
c00087a9:	6a 0c                	push   0xc
c00087ab:	53                   	push   ebx
c00087ac:	e8 cf fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00087b1:	6a 00                	push   0x0
c00087b3:	68 70 d0 01 c0       	push   0xc001d070
c00087b8:	6a 0d                	push   0xd
c00087ba:	53                   	push   ebx
c00087bb:	e8 c0 fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00087c0:	83 c4 20             	add    esp,0x20
c00087c3:	6a 00                	push   0x0
c00087c5:	68 78 d0 01 c0       	push   0xc001d078
c00087ca:	6a 0e                	push   0xe
c00087cc:	53                   	push   ebx
c00087cd:	e8 ae fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00087d2:	6a 00                	push   0x0
c00087d4:	68 80 d0 01 c0       	push   0xc001d080
c00087d9:	6a 0f                	push   0xf
c00087db:	53                   	push   ebx
c00087dc:	e8 9f fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00087e1:	83 c4 20             	add    esp,0x20
c00087e4:	6a 00                	push   0x0
c00087e6:	68 8a d0 01 c0       	push   0xc001d08a
c00087eb:	6a 10                	push   0x10
c00087ed:	53                   	push   ebx
c00087ee:	e8 8d fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00087f3:	6a 00                	push   0x0
c00087f5:	68 94 d0 01 c0       	push   0xc001d094
c00087fa:	6a 11                	push   0x11
c00087fc:	53                   	push   ebx
c00087fd:	e8 7e fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c0008802:	83 c4 20             	add    esp,0x20
c0008805:	6a 00                	push   0x0
c0008807:	68 9e d0 01 c0       	push   0xc001d09e
c000880c:	6a 12                	push   0x12
c000880e:	53                   	push   ebx
c000880f:	e8 6c fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c0008814:	6a 01                	push   0x1
c0008816:	68 38 d1 01 c0       	push   0xc001d138
c000881b:	6a 60                	push   0x60
c000881d:	53                   	push   ebx
c000881e:	e8 5d fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c0008823:	83 c4 20             	add    esp,0x20
c0008826:	6a 00                	push   0x0
c0008828:	68 3f d1 01 c0       	push   0xc001d13f
c000882d:	6a 20                	push   0x20
c000882f:	53                   	push   ebx
c0008830:	e8 4b fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c0008835:	6a 00                	push   0x0
c0008837:	68 2a d1 01 c0       	push   0xc001d12a
c000883c:	6a 21                	push   0x21
c000883e:	53                   	push   ebx
c000883f:	e8 3c fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c0008844:	83 c4 20             	add    esp,0x20
c0008847:	6a 00                	push   0x0
c0008849:	68 31 d1 01 c0       	push   0xc001d131
c000884e:	6a 22                	push   0x22
c0008850:	53                   	push   ebx
c0008851:	e8 2a fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c0008856:	6a 00                	push   0x0
c0008858:	68 a8 d0 01 c0       	push   0xc001d0a8
c000885d:	6a 23                	push   0x23
c000885f:	53                   	push   ebx
c0008860:	e8 1b fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c0008865:	83 c4 20             	add    esp,0x20
c0008868:	6a 00                	push   0x0
c000886a:	68 b2 d0 01 c0       	push   0xc001d0b2
c000886f:	6a 24                	push   0x24
c0008871:	53                   	push   ebx
c0008872:	e8 09 fe ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c0008877:	6a 00                	push   0x0
c0008879:	68 bc d0 01 c0       	push   0xc001d0bc
c000887e:	6a 25                	push   0x25
c0008880:	53                   	push   ebx
c0008881:	e8 fa fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c0008886:	83 c4 20             	add    esp,0x20
c0008889:	6a 00                	push   0x0
c000888b:	68 c6 d0 01 c0       	push   0xc001d0c6
c0008890:	6a 26                	push   0x26
c0008892:	53                   	push   ebx
c0008893:	e8 e8 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c0008898:	6a 00                	push   0x0
c000889a:	68 d0 d0 01 c0       	push   0xc001d0d0
c000889f:	6a 27                	push   0x27
c00088a1:	53                   	push   ebx
c00088a2:	e8 d9 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00088a7:	83 c4 20             	add    esp,0x20
c00088aa:	6a 00                	push   0x0
c00088ac:	68 da d0 01 c0       	push   0xc001d0da
c00088b1:	6a 28                	push   0x28
c00088b3:	53                   	push   ebx
c00088b4:	e8 c7 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00088b9:	6a 00                	push   0x0
c00088bb:	68 e4 d0 01 c0       	push   0xc001d0e4
c00088c0:	6a 29                	push   0x29
c00088c2:	53                   	push   ebx
c00088c3:	e8 b8 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00088c8:	83 c4 20             	add    esp,0x20
c00088cb:	6a 00                	push   0x0
c00088cd:	68 ee d0 01 c0       	push   0xc001d0ee
c00088d2:	6a 2a                	push   0x2a
c00088d4:	53                   	push   ebx
c00088d5:	e8 a6 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00088da:	6a 00                	push   0x0
c00088dc:	68 f8 d0 01 c0       	push   0xc001d0f8
c00088e1:	6a 2b                	push   0x2b
c00088e3:	53                   	push   ebx
c00088e4:	e8 97 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00088e9:	83 c4 20             	add    esp,0x20
c00088ec:	6a 00                	push   0x0
c00088ee:	68 02 d1 01 c0       	push   0xc001d102
c00088f3:	6a 2c                	push   0x2c
c00088f5:	53                   	push   ebx
c00088f6:	e8 85 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00088fb:	6a 00                	push   0x0
c00088fd:	68 0c d1 01 c0       	push   0xc001d10c
c0008902:	6a 2d                	push   0x2d
c0008904:	53                   	push   ebx
c0008905:	e8 76 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000890a:	83 c4 20             	add    esp,0x20
c000890d:	6a 00                	push   0x0
c000890f:	68 16 d1 01 c0       	push   0xc001d116
c0008914:	6a 2e                	push   0x2e
c0008916:	53                   	push   ebx
c0008917:	e8 64 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000891c:	6a 00                	push   0x0
c000891e:	68 20 d1 01 c0       	push   0xc001d120
c0008923:	6a 2f                	push   0x2f
c0008925:	53                   	push   ebx
c0008926:	e8 55 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000892b:	83 c4 20             	add    esp,0x20
c000892e:	6a 00                	push   0x0
c0008930:	68 76 d1 01 c0       	push   0xc001d176
c0008935:	6a 30                	push   0x30
c0008937:	53                   	push   ebx
c0008938:	e8 43 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000893d:	6a 00                	push   0x0
c000893f:	68 80 d1 01 c0       	push   0xc001d180
c0008944:	6a 31                	push   0x31
c0008946:	53                   	push   ebx
c0008947:	e8 34 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000894c:	83 c4 20             	add    esp,0x20
c000894f:	6a 00                	push   0x0
c0008951:	68 8a d1 01 c0       	push   0xc001d18a
c0008956:	6a 32                	push   0x32
c0008958:	53                   	push   ebx
c0008959:	e8 22 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000895e:	6a 00                	push   0x0
c0008960:	68 94 d1 01 c0       	push   0xc001d194
c0008965:	6a 33                	push   0x33
c0008967:	53                   	push   ebx
c0008968:	e8 13 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000896d:	83 c4 20             	add    esp,0x20
c0008970:	6a 00                	push   0x0
c0008972:	68 9e d1 01 c0       	push   0xc001d19e
c0008977:	6a 34                	push   0x34
c0008979:	53                   	push   ebx
c000897a:	e8 01 fd ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000897f:	6a 00                	push   0x0
c0008981:	68 a8 d1 01 c0       	push   0xc001d1a8
c0008986:	6a 35                	push   0x35
c0008988:	53                   	push   ebx
c0008989:	e8 f2 fc ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c000898e:	83 c4 20             	add    esp,0x20
c0008991:	6a 00                	push   0x0
c0008993:	68 b2 d1 01 c0       	push   0xc001d1b2
c0008998:	6a 36                	push   0x36
c000899a:	53                   	push   ebx
c000899b:	e8 e0 fc ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00089a0:	6a 00                	push   0x0
c00089a2:	68 bc d1 01 c0       	push   0xc001d1bc
c00089a7:	6a 37                	push   0x37
c00089a9:	53                   	push   ebx
c00089aa:	e8 d1 fc ff ff       	call   c0008680 <IDT::addEntry(int, void (*)(), bool)>
c00089af:	83 c4 1c             	add    esp,0x1c
c00089b2:	6a 03                	push   0x3
c00089b4:	6a 02                	push   0x2
c00089b6:	ff 35 d0 1d 02 c0    	push   DWORD PTR ds:0xc0021dd0
c00089bc:	e8 75 24 00 00       	call   c000ae36 <VAS::allocatePages(int, int)>
c00089c1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00089c8:	89 c6                	mov    esi,eax
c00089ca:	e8 92 01 00 00       	call   c0008b61 <malloc>
c00089cf:	81 c6 00 20 00 00    	add    esi,0x2000
c00089d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00089d8:	89 c7                	mov    edi,eax
c00089da:	e8 01 16 00 00       	call   c0009fe0 <TSS::TSS()>
c00089df:	83 c4 0c             	add    esp,0xc
c00089e2:	68 46 d0 01 c0       	push   0xc001d046
c00089e7:	56                   	push   esi
c00089e8:	57                   	push   edi
c00089e9:	e8 36 16 00 00       	call   c000a024 <TSS::setup(unsigned long, unsigned long)>
c00089ee:	89 c6                	mov    esi,eax
c00089f0:	58                   	pop    eax
c00089f1:	5a                   	pop    edx
c00089f2:	6a 00                	push   0x0
c00089f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00089f8:	50                   	push   eax
c00089f9:	e8 d6 fb ff ff       	call   c00085d4 <IDTEntry::IDTEntry(bool)>
c00089fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008a02:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0008a07:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0008a0e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0008a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a18:	80 ce 05             	or     dh,0x5
c0008a1b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0008a1e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008a26:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0008a29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a2c:	e8 87 fc ff ff       	call   c00086b8 <IDT::flush()>
c0008a31:	83 c4 20             	add    esp,0x20
c0008a34:	5b                   	pop    ebx
c0008a35:	5e                   	pop    esi
c0008a36:	5f                   	pop    edi
c0008a37:	c3                   	ret    

c0008a38 <sbrk>:
c0008a38:	55                   	push   ebp
c0008a39:	57                   	push   edi
c0008a3a:	56                   	push   esi
c0008a3b:	53                   	push   ebx
c0008a3c:	83 ec 1c             	sub    esp,0x1c
c0008a3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a43:	85 c0                	test   eax,eax
c0008a45:	74 5f                	je     c0008aa6 <sbrk+0x6e>
c0008a47:	78 64                	js     c0008aad <sbrk+0x75>
c0008a49:	8b 15 74 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a74
c0008a4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008a53:	05 ff 0f 00 00       	add    eax,0xfff
c0008a58:	89 c5                	mov    ebp,eax
c0008a5a:	78 69                	js     c0008ac5 <sbrk+0x8d>
c0008a5c:	c1 fd 0c             	sar    ebp,0xc
c0008a5f:	bb 00 00 00 00       	mov    ebx,0x0
c0008a64:	8b 35 d0 1d 02 c0    	mov    esi,DWORD PTR ds:0xc0021dd0
c0008a6a:	8b 3d 74 0a 02 c0    	mov    edi,DWORD PTR ds:0xc0020a74
c0008a70:	e8 b9 04 00 00       	call   c0008f2e <Phys::allocatePage()>
c0008a75:	68 01 04 00 00       	push   0x401
c0008a7a:	57                   	push   edi
c0008a7b:	50                   	push   eax
c0008a7c:	56                   	push   esi
c0008a7d:	e8 b0 22 00 00       	call   c000ad32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008a82:	81 05 74 0a 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0020a74,0x1000
c0008a8c:	43                   	inc    ebx
c0008a8d:	83 c4 10             	add    esp,0x10
c0008a90:	39 dd                	cmp    ebp,ebx
c0008a92:	75 d0                	jne    c0008a64 <sbrk+0x2c>
c0008a94:	0f 20 d8             	mov    eax,cr3
c0008a97:	0f 22 d8             	mov    cr3,eax
c0008a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a9e:	83 c4 1c             	add    esp,0x1c
c0008aa1:	5b                   	pop    ebx
c0008aa2:	5e                   	pop    esi
c0008aa3:	5f                   	pop    edi
c0008aa4:	5d                   	pop    ebp
c0008aa5:	c3                   	ret    
c0008aa6:	a1 74 0a 02 c0       	mov    eax,ds:0xc0020a74
c0008aab:	eb f1                	jmp    c0008a9e <sbrk+0x66>
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	50                   	push   eax
c0008ab1:	68 c4 ea 01 c0       	push   0xc001eac4
c0008ab6:	e8 35 2e 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0008abb:	83 c4 10             	add    esp,0x10
c0008abe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0008ac3:	eb d9                	jmp    c0008a9e <sbrk+0x66>
c0008ac5:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0008acb:	eb 8f                	jmp    c0008a5c <sbrk+0x24>

c0008acd <mmap>:
c0008acd:	83 ec 18             	sub    esp,0x18
c0008ad0:	68 f4 ea 01 c0       	push   0xc001eaf4
c0008ad5:	e8 65 89 00 00       	call   c001143f <Krnl::panic(char const*)>
c0008ada:	b8 00 00 00 00       	mov    eax,0x0
c0008adf:	83 c4 1c             	add    esp,0x1c
c0008ae2:	c3                   	ret    

c0008ae3 <munmap>:
c0008ae3:	83 ec 18             	sub    esp,0x18
c0008ae6:	68 f9 ea 01 c0       	push   0xc001eaf9
c0008aeb:	e8 4f 89 00 00       	call   c001143f <Krnl::panic(char const*)>
c0008af0:	b8 00 00 00 00       	mov    eax,0x0
c0008af5:	83 c4 1c             	add    esp,0x1c
c0008af8:	c3                   	ret    

c0008af9 <liballoc_lock()>:
c0008af9:	fa                   	cli    
c0008afa:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0008b00:	b8 00 00 00 00       	mov    eax,0x0
c0008b05:	c3                   	ret    

c0008b06 <liballoc_unlock()>:
c0008b06:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0008b0b:	48                   	dec    eax
c0008b0c:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0008b11:	75 01                	jne    c0008b14 <liballoc_unlock()+0xe>
c0008b13:	fb                   	sti    
c0008b14:	b8 00 00 00 00       	mov    eax,0x0
c0008b19:	c3                   	ret    

c0008b1a <liballoc_alloc(int)>:
c0008b1a:	83 ec 10             	sub    esp,0x10
c0008b1d:	6a 01                	push   0x1
c0008b1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008b23:	ff 35 d0 1d 02 c0    	push   DWORD PTR ds:0xc0021dd0
c0008b29:	e8 08 23 00 00       	call   c000ae36 <VAS::allocatePages(int, int)>
c0008b2e:	83 c4 1c             	add    esp,0x1c
c0008b31:	c3                   	ret    

c0008b32 <liballoc_free(void*, int)>:
c0008b32:	83 ec 14             	sub    esp,0x14
c0008b35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008b39:	ff 35 d0 1d 02 c0    	push   DWORD PTR ds:0xc0021dd0
c0008b3f:	e8 ae 1f 00 00       	call   c000aaf2 <VAS::freeAllocatedPages(unsigned long)>
c0008b44:	b8 00 00 00 00       	mov    eax,0x0
c0008b49:	83 c4 1c             	add    esp,0x1c
c0008b4c:	c3                   	ret    

c0008b4d <realloc>:
c0008b4d:	83 ec 14             	sub    esp,0x14
c0008b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b58:	e8 f4 89 ff ff       	call   c0001551 <dlrealloc>
c0008b5d:	83 c4 1c             	add    esp,0x1c
c0008b60:	c3                   	ret    

c0008b61 <malloc>:
c0008b61:	83 ec 18             	sub    esp,0x18
c0008b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b68:	e8 a7 84 ff ff       	call   c0001014 <dlmalloc>
c0008b6d:	83 c4 1c             	add    esp,0x1c
c0008b70:	c3                   	ret    

c0008b71 <free>:
c0008b71:	83 ec 18             	sub    esp,0x18
c0008b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b78:	e8 3c 81 ff ff       	call   c0000cb9 <dlfree>
c0008b7d:	83 c4 1c             	add    esp,0x1c
c0008b80:	c3                   	ret    

c0008b81 <rfree>:
c0008b81:	83 ec 18             	sub    esp,0x18
c0008b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b88:	e8 2c 81 ff ff       	call   c0000cb9 <dlfree>
c0008b8d:	83 c4 1c             	add    esp,0x1c
c0008b90:	c3                   	ret    

c0008b91 <calloc>:
c0008b91:	56                   	push   esi
c0008b92:	53                   	push   ebx
c0008b93:	83 ec 10             	sub    esp,0x10
c0008b96:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b9a:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0008b9f:	53                   	push   ebx
c0008ba0:	e8 bc ff ff ff       	call   c0008b61 <malloc>
c0008ba5:	89 c6                	mov    esi,eax
c0008ba7:	83 c4 0c             	add    esp,0xc
c0008baa:	53                   	push   ebx
c0008bab:	6a 00                	push   0x0
c0008bad:	50                   	push   eax
c0008bae:	e8 3d 79 ff ff       	call   c00004f0 <memset>
c0008bb3:	89 f0                	mov    eax,esi
c0008bb5:	83 c4 14             	add    esp,0x14
c0008bb8:	5b                   	pop    ebx
c0008bb9:	5e                   	pop    esi
c0008bba:	c3                   	ret    

c0008bbb <Krnl::setBootMessage(char const*)>:
c0008bbb:	57                   	push   edi
c0008bbc:	56                   	push   esi
c0008bbd:	53                   	push   ebx
c0008bbe:	81 ec a4 00 00 00    	sub    esp,0xa4
c0008bc4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0008bcb:	68 9e 00 00 00       	push   0x9e
c0008bd0:	6a 00                	push   0x0
c0008bd2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0008bd6:	56                   	push   esi
c0008bd7:	e8 14 79 ff ff       	call   c00004f0 <memset>
c0008bdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008bdf:	e8 7c 79 ff ff       	call   c0000560 <strlen>
c0008be4:	ba 50 00 00 00       	mov    edx,0x50
c0008be9:	83 c4 10             	add    esp,0x10
c0008bec:	29 c2                	sub    edx,eax
c0008bee:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0008bf2:	d1 ea                	shr    edx,1
c0008bf4:	84 c0                	test   al,al
c0008bf6:	74 19                	je     c0008c11 <Krnl::setBootMessage(char const*)+0x56>
c0008bf8:	01 d2                	add    edx,edx
c0008bfa:	43                   	inc    ebx
c0008bfb:	01 f2                	add    edx,esi
c0008bfd:	80 cc 0f             	or     ah,0xf
c0008c00:	83 c2 02             	add    edx,0x2
c0008c03:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0008c07:	43                   	inc    ebx
c0008c08:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0008c0d:	84 c0                	test   al,al
c0008c0f:	75 ec                	jne    c0008bfd <Krnl::setBootMessage(char const*)+0x42>
c0008c11:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0008c16:	b9 9e 00 00 00       	mov    ecx,0x9e
c0008c1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008c1d:	81 c4 a0 00 00 00    	add    esp,0xa0
c0008c23:	5b                   	pop    ebx
c0008c24:	5e                   	pop    esi
c0008c25:	5f                   	pop    edi
c0008c26:	c3                   	ret    

c0008c27 <kernel_main>:
c0008c27:	55                   	push   ebp
c0008c28:	57                   	push   edi
c0008c29:	bf f9 03 00 00       	mov    edi,0x3f9
c0008c2e:	56                   	push   esi
c0008c2f:	89 fa                	mov    edx,edi
c0008c31:	53                   	push   ebx
c0008c32:	31 f6                	xor    esi,esi
c0008c34:	83 ec 38             	sub    esp,0x38
c0008c37:	a1 00 05 00 00       	mov    eax,ds:0x500
c0008c3c:	a3 00 1d 02 c0       	mov    ds:0xc0021d00,eax
c0008c41:	89 f0                	mov    eax,esi
c0008c43:	ee                   	out    dx,al
c0008c44:	bb fb 03 00 00       	mov    ebx,0x3fb
c0008c49:	b0 80                	mov    al,0x80
c0008c4b:	89 da                	mov    edx,ebx
c0008c4d:	ee                   	out    dx,al
c0008c4e:	b1 03                	mov    cl,0x3
c0008c50:	ba f8 03 00 00       	mov    edx,0x3f8
c0008c55:	88 c8                	mov    al,cl
c0008c57:	ee                   	out    dx,al
c0008c58:	89 f0                	mov    eax,esi
c0008c5a:	89 fa                	mov    edx,edi
c0008c5c:	ee                   	out    dx,al
c0008c5d:	88 c8                	mov    al,cl
c0008c5f:	89 da                	mov    edx,ebx
c0008c61:	ee                   	out    dx,al
c0008c62:	b0 c7                	mov    al,0xc7
c0008c64:	ba fa 03 00 00       	mov    edx,0x3fa
c0008c69:	ee                   	out    dx,al
c0008c6a:	b0 0b                	mov    al,0xb
c0008c6c:	ba fc 03 00 00       	mov    edx,0x3fc
c0008c71:	ee                   	out    dx,al
c0008c72:	68 00 eb 01 c0       	push   0xc001eb00
c0008c77:	e8 74 2c 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0008c7c:	0f be 05 80 0a 02 c0 	movsx  eax,BYTE PTR ds:0xc0020a80
c0008c83:	83 c4 10             	add    esp,0x10
c0008c86:	84 c0                	test   al,al
c0008c88:	74 5c                	je     c0008ce6 <kernel_main+0xbf>
c0008c8a:	31 db                	xor    ebx,ebx
c0008c8c:	bd 0a 00 00 00       	mov    ebp,0xa
c0008c91:	bf 05 00 00 00       	mov    edi,0x5
c0008c96:	31 f6                	xor    esi,esi
c0008c98:	eb 14                	jmp    c0008cae <kernel_main+0x87>
c0008c9a:	47                   	inc    edi
c0008c9b:	bd 0a 00 00 00       	mov    ebp,0xa
c0008ca0:	31 f6                	xor    esi,esi
c0008ca2:	43                   	inc    ebx
c0008ca3:	0f be 83 80 0a 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdf580]
c0008caa:	84 c0                	test   al,al
c0008cac:	74 38                	je     c0008ce6 <kernel_main+0xbf>
c0008cae:	80 be b6 0a 02 c0 db 	cmp    BYTE PTR [esi-0x3ffdf54a],0xdb
c0008cb5:	0f 84 97 00 00 00    	je     c0008d52 <kernel_main+0x12b>
c0008cbb:	3c 0d                	cmp    al,0xd
c0008cbd:	74 e3                	je     c0008ca2 <kernel_main+0x7b>
c0008cbf:	3c 0a                	cmp    al,0xa
c0008cc1:	74 d7                	je     c0008c9a <kernel_main+0x73>
c0008cc3:	83 ec 0c             	sub    esp,0xc
c0008cc6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0008cca:	57                   	push   edi
c0008ccb:	43                   	inc    ebx
c0008ccc:	52                   	push   edx
c0008ccd:	46                   	inc    esi
c0008cce:	6a 00                	push   0x0
c0008cd0:	6a 0e                	push   0xe
c0008cd2:	50                   	push   eax
c0008cd3:	e8 c4 e4 00 00       	call   c001719c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008cd8:	83 c4 20             	add    esp,0x20
c0008cdb:	0f be 83 80 0a 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdf580]
c0008ce2:	84 c0                	test   al,al
c0008ce4:	75 c8                	jne    c0008cae <kernel_main+0x87>
c0008ce6:	83 ec 0c             	sub    esp,0xc
c0008ce9:	a1 24 05 00 00       	mov    eax,ds:0x524
c0008cee:	05 ff 0f 00 00       	add    eax,0xfff
c0008cf3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008cf8:	50                   	push   eax
c0008cf9:	e8 82 03 00 00       	call   c0009080 <Phys::physicalMemorySetup(unsigned int)>
c0008cfe:	e8 59 1b 00 00       	call   c000a85c <Virt::virtualMemorySetup()>
c0008d03:	58                   	pop    eax
c0008d04:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0008d08:	53                   	push   ebx
c0008d09:	e8 0a 1c 00 00       	call   c000a918 <VAS::VAS()>
c0008d0e:	89 1d d0 1d 02 c0    	mov    DWORD PTR ds:0xc0021dd0,ebx
c0008d14:	e8 07 73 ff ff       	call   c0000020 <callGlobalConstructors>
c0008d19:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0008d20:	e8 3c fe ff ff       	call   c0008b61 <malloc>
c0008d25:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d28:	89 c6                	mov    esi,eax
c0008d2a:	e8 af f1 ff ff       	call   c0007ede <Computer::Computer()>
c0008d2f:	6a 00                	push   0x0
c0008d31:	89 35 e8 1c 02 c0    	mov    DWORD PTR ds:0xc0021ce8,esi
c0008d37:	6a 00                	push   0x0
c0008d39:	6a 00                	push   0x0
c0008d3b:	56                   	push   esi
c0008d3c:	e8 43 f5 ff ff       	call   c0008284 <Computer::open(int, int, void*)>
c0008d41:	83 c4 14             	add    esp,0x14
c0008d44:	53                   	push   ebx
c0008d45:	e8 84 1e 00 00       	call   c000abce <VAS::~VAS()>
c0008d4a:	83 c4 3c             	add    esp,0x3c
c0008d4d:	5b                   	pop    ebx
c0008d4e:	5e                   	pop    esi
c0008d4f:	5f                   	pop    edi
c0008d50:	5d                   	pop    ebp
c0008d51:	c3                   	ret    
c0008d52:	31 d2                	xor    edx,edx
c0008d54:	8a 96 b5 0a 02 c0    	mov    dl,BYTE PTR [esi-0x3ffdf54b]
c0008d5a:	83 e2 fe             	and    edx,0xfffffffe
c0008d5d:	81 fa ba 00 00 00    	cmp    edx,0xba
c0008d63:	0f 85 52 ff ff ff    	jne    c0008cbb <kernel_main+0x94>
c0008d69:	45                   	inc    ebp
c0008d6a:	e9 4c ff ff ff       	jmp    c0008cbb <kernel_main+0x94>

c0008d6f <Phys::allocateDMA(unsigned long)>:
c0008d6f:	55                   	push   ebp
c0008d70:	31 ed                	xor    ebp,ebp
c0008d72:	57                   	push   edi
c0008d73:	56                   	push   esi
c0008d74:	53                   	push   ebx
c0008d75:	31 db                	xor    ebx,ebx
c0008d77:	83 ec 1c             	sub    esp,0x1c
c0008d7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008d7e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008d86:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0008d8c:	31 c0                	xor    eax,eax
c0008d8e:	c1 ef 0c             	shr    edi,0xc
c0008d91:	eb 19                	jmp    c0008dac <Phys::allocateDMA(unsigned long)+0x3d>
c0008d93:	85 c0                	test   eax,eax
c0008d95:	75 06                	jne    c0008d9d <Phys::allocateDMA(unsigned long)+0x2e>
c0008d97:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008d9b:	89 dd                	mov    ebp,ebx
c0008d9d:	8d 70 01             	lea    esi,[eax+0x1]
c0008da0:	39 f7                	cmp    edi,esi
c0008da2:	74 33                	je     c0008dd7 <Phys::allocateDMA(unsigned long)+0x68>
c0008da4:	89 f0                	mov    eax,esi
c0008da6:	43                   	inc    ebx
c0008da7:	83 fb 0f             	cmp    ebx,0xf
c0008daa:	7f 11                	jg     c0008dbd <Phys::allocateDMA(unsigned long)+0x4e>
c0008dac:	80 bb 1c 1d 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffde2e4],0x0
c0008db3:	74 de                	je     c0008d93 <Phys::allocateDMA(unsigned long)+0x24>
c0008db5:	31 c0                	xor    eax,eax
c0008db7:	43                   	inc    ebx
c0008db8:	83 fb 0f             	cmp    ebx,0xf
c0008dbb:	7e ef                	jle    c0008dac <Phys::allocateDMA(unsigned long)+0x3d>
c0008dbd:	83 ec 0c             	sub    esp,0xc
c0008dc0:	68 18 eb 01 c0       	push   0xc001eb18
c0008dc5:	e8 75 86 00 00       	call   c001143f <Krnl::panic(char const*)>
c0008dca:	83 c4 10             	add    esp,0x10
c0008dcd:	31 c0                	xor    eax,eax
c0008dcf:	83 c4 1c             	add    esp,0x1c
c0008dd2:	5b                   	pop    ebx
c0008dd3:	5e                   	pop    esi
c0008dd4:	5f                   	pop    edi
c0008dd5:	5d                   	pop    ebp
c0008dd6:	c3                   	ret    
c0008dd7:	89 e9                	mov    ecx,ebp
c0008dd9:	c1 f9 04             	sar    ecx,0x4
c0008ddc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0008de0:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	4a                   	dec    edx
c0008de7:	79 03                	jns    c0008dec <Phys::allocateDMA(unsigned long)+0x7d>
c0008de9:	8d 51 0e             	lea    edx,[ecx+0xe]
c0008dec:	c1 fa 04             	sar    edx,0x4
c0008def:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0008df3:	74 08                	je     c0008dfd <Phys::allocateDMA(unsigned long)+0x8e>
c0008df5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008df9:	31 c0                	xor    eax,eax
c0008dfb:	eb ba                	jmp    c0008db7 <Phys::allocateDMA(unsigned long)+0x48>
c0008dfd:	85 f6                	test   esi,esi
c0008dff:	74 15                	je     c0008e16 <Phys::allocateDMA(unsigned long)+0xa7>
c0008e01:	8d 95 1c 1d 02 c0    	lea    edx,[ebp-0x3ffde2e4]
c0008e07:	8d 84 05 1d 1d 02 c0 	lea    eax,[ebp+eax*1-0x3ffde2e3]
c0008e0e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0008e11:	42                   	inc    edx
c0008e12:	39 d0                	cmp    eax,edx
c0008e14:	75 f8                	jne    c0008e0e <Phys::allocateDMA(unsigned long)+0x9f>
c0008e16:	01 3d 14 1d 02 c0    	add    DWORD PTR ds:0xc0021d14,edi
c0008e1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e20:	85 c0                	test   eax,eax
c0008e22:	74 17                	je     c0008e3b <Phys::allocateDMA(unsigned long)+0xcc>
c0008e24:	83 ec 0c             	sub    esp,0xc
c0008e27:	68 18 eb 01 c0       	push   0xc001eb18
c0008e2c:	e8 0e 86 00 00       	call   c001143f <Krnl::panic(char const*)>
c0008e31:	83 c4 10             	add    esp,0x10
c0008e34:	89 f0                	mov    eax,esi
c0008e36:	e9 6b ff ff ff       	jmp    c0008da6 <Phys::allocateDMA(unsigned long)+0x37>
c0008e3b:	c1 e5 0c             	shl    ebp,0xc
c0008e3e:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0008e44:	eb 89                	jmp    c0008dcf <Phys::allocateDMA(unsigned long)+0x60>

c0008e46 <Phys::freeDMA(unsigned long, unsigned long)>:
c0008e46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008e4a:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0008e50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e54:	c1 ea 0c             	shr    edx,0xc
c0008e57:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0008e5c:	29 15 14 1d 02 c0    	sub    DWORD PTR ds:0xc0021d14,edx
c0008e62:	c1 e8 0c             	shr    eax,0xc
c0008e65:	85 d2                	test   edx,edx
c0008e67:	74 0f                	je     c0008e78 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0008e69:	05 1c 1d 02 c0       	add    eax,0xc0021d1c
c0008e6e:	01 c2                	add    edx,eax
c0008e70:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0008e73:	40                   	inc    eax
c0008e74:	39 d0                	cmp    eax,edx
c0008e76:	75 f8                	jne    c0008e70 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0008e78:	c3                   	ret    

c0008e79 <Phys::setPageState(unsigned long, bool)>:
c0008e79:	56                   	push   esi
c0008e7a:	ba 01 00 00 00       	mov    edx,0x1
c0008e7f:	53                   	push   ebx
c0008e80:	8b 35 c4 0b 02 c0    	mov    esi,DWORD PTR ds:0xc0020bc4
c0008e86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008e8e:	89 c8                	mov    eax,ecx
c0008e90:	83 e1 07             	and    ecx,0x7
c0008e93:	c1 e8 03             	shr    eax,0x3
c0008e96:	d3 e3                	shl    ebx,cl
c0008e98:	01 c6                	add    esi,eax
c0008e9a:	d3 e2                	shl    edx,cl
c0008e9c:	f7 d2                	not    edx
c0008e9e:	20 16                	and    BYTE PTR [esi],dl
c0008ea0:	03 05 c4 0b 02 c0    	add    eax,DWORD PTR ds:0xc0020bc4
c0008ea6:	08 18                	or     BYTE PTR [eax],bl
c0008ea8:	5b                   	pop    ebx
c0008ea9:	5e                   	pop    esi
c0008eaa:	c3                   	ret    

c0008eab <Phys::getPageState(unsigned long)>:
c0008eab:	53                   	push   ebx
c0008eac:	8b 15 c4 0b 02 c0    	mov    edx,DWORD PTR ds:0xc0020bc4
c0008eb2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008eb6:	31 db                	xor    ebx,ebx
c0008eb8:	89 c8                	mov    eax,ecx
c0008eba:	83 e1 07             	and    ecx,0x7
c0008ebd:	c1 e8 03             	shr    eax,0x3
c0008ec0:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0008ec3:	89 d8                	mov    eax,ebx
c0008ec5:	5b                   	pop    ebx
c0008ec6:	d3 f8                	sar    eax,cl
c0008ec8:	83 e0 01             	and    eax,0x1
c0008ecb:	c3                   	ret    

c0008ecc <Phys::freePage(unsigned long)>:
c0008ecc:	53                   	push   ebx
c0008ecd:	83 ec 08             	sub    esp,0x8
c0008ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ed4:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0008eda:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0008ee0:	76 3a                	jbe    c0008f1c <Phys::freePage(unsigned long)+0x50>
c0008ee2:	c1 e8 0c             	shr    eax,0xc
c0008ee5:	50                   	push   eax
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	e8 be ff ff ff       	call   c0008eab <Phys::getPageState(unsigned long)>
c0008eed:	5a                   	pop    edx
c0008eee:	84 c0                	test   al,al
c0008ef0:	74 19                	je     c0008f0b <Phys::freePage(unsigned long)+0x3f>
c0008ef2:	83 ec 08             	sub    esp,0x8
c0008ef5:	ff 0d 14 1d 02 c0    	dec    DWORD PTR ds:0xc0021d14
c0008efb:	6a 00                	push   0x0
c0008efd:	53                   	push   ebx
c0008efe:	e8 76 ff ff ff       	call   c0008e79 <Phys::setPageState(unsigned long, bool)>
c0008f03:	83 c4 10             	add    esp,0x10
c0008f06:	83 c4 08             	add    esp,0x8
c0008f09:	5b                   	pop    ebx
c0008f0a:	c3                   	ret    
c0008f0b:	c7 44 24 10 bd eb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ebbd
c0008f13:	83 c4 08             	add    esp,0x8
c0008f16:	5b                   	pop    ebx
c0008f17:	e9 23 85 00 00       	jmp    c001143f <Krnl::panic(char const*)>
c0008f1c:	68 00 10 00 00       	push   0x1000
c0008f21:	50                   	push   eax
c0008f22:	e8 1f ff ff ff       	call   c0008e46 <Phys::freeDMA(unsigned long, unsigned long)>
c0008f27:	59                   	pop    ecx
c0008f28:	5b                   	pop    ebx
c0008f29:	83 c4 08             	add    esp,0x8
c0008f2c:	5b                   	pop    ebx
c0008f2d:	c3                   	ret    

c0008f2e <Phys::allocatePage()>:
c0008f2e:	56                   	push   esi
c0008f2f:	53                   	push   ebx
c0008f30:	83 ec 14             	sub    esp,0x14
c0008f33:	8b 35 08 1d 02 c0    	mov    esi,DWORD PTR ds:0xc0021d08
c0008f39:	89 f3                	mov    ebx,esi
c0008f3b:	eb 0a                	jmp    c0008f47 <Phys::allocatePage()+0x19>
c0008f3d:	89 1d 08 1d 02 c0    	mov    DWORD PTR ds:0xc0021d08,ebx
c0008f43:	39 de                	cmp    esi,ebx
c0008f45:	74 24                	je     c0008f6b <Phys::allocatePage()+0x3d>
c0008f47:	53                   	push   ebx
c0008f48:	e8 5e ff ff ff       	call   c0008eab <Phys::getPageState(unsigned long)>
c0008f4d:	5a                   	pop    edx
c0008f4e:	84 c0                	test   al,al
c0008f50:	74 5f                	je     c0008fb1 <Phys::allocatePage()+0x83>
c0008f52:	43                   	inc    ebx
c0008f53:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0008f59:	75 e2                	jne    c0008f3d <Phys::allocatePage()+0xf>
c0008f5b:	31 db                	xor    ebx,ebx
c0008f5d:	c7 05 08 1d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021d08,0x0
c0008f67:	39 de                	cmp    esi,ebx
c0008f69:	75 dc                	jne    c0008f47 <Phys::allocatePage()+0x19>
c0008f6b:	83 ec 0c             	sub    esp,0xc
c0008f6e:	80 35 2c 1d 02 c0 01 	xor    BYTE PTR ds:0xc0021d2c,0x1
c0008f75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008f7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008f7d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008f83:	50                   	push   eax
c0008f84:	e8 87 26 00 00       	call   c000b610 <VAS::scanForEviction()>
c0008f89:	83 c4 10             	add    esp,0x10
c0008f8c:	85 c0                	test   eax,eax
c0008f8e:	75 3f                	jne    c0008fcf <Phys::allocatePage()+0xa1>
c0008f90:	83 ec 0c             	sub    esp,0xc
c0008f93:	68 40 eb 01 c0       	push   0xc001eb40
c0008f98:	e8 a2 84 00 00       	call   c001143f <Krnl::panic(char const*)>
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	8b 1d 08 1d 02 c0    	mov    ebx,DWORD PTR ds:0xc0021d08
c0008fa6:	53                   	push   ebx
c0008fa7:	e8 ff fe ff ff       	call   c0008eab <Phys::getPageState(unsigned long)>
c0008fac:	5a                   	pop    edx
c0008fad:	84 c0                	test   al,al
c0008faf:	75 a1                	jne    c0008f52 <Phys::allocatePage()+0x24>
c0008fb1:	6a 01                	push   0x1
c0008fb3:	53                   	push   ebx
c0008fb4:	e8 c0 fe ff ff       	call   c0008e79 <Phys::setPageState(unsigned long, bool)>
c0008fb9:	a1 08 1d 02 c0       	mov    eax,ds:0xc0021d08
c0008fbe:	5a                   	pop    edx
c0008fbf:	ff 05 14 1d 02 c0    	inc    DWORD PTR ds:0xc0021d14
c0008fc5:	c1 e0 0c             	shl    eax,0xc
c0008fc8:	59                   	pop    ecx
c0008fc9:	83 c4 14             	add    esp,0x14
c0008fcc:	5b                   	pop    ebx
c0008fcd:	5e                   	pop    esi
c0008fce:	c3                   	ret    
c0008fcf:	83 ec 08             	sub    esp,0x8
c0008fd2:	89 c2                	mov    edx,eax
c0008fd4:	6a 01                	push   0x1
c0008fd6:	c1 ea 0c             	shr    edx,0xc
c0008fd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fdd:	52                   	push   edx
c0008fde:	e8 96 fe ff ff       	call   c0008e79 <Phys::setPageState(unsigned long, bool)>
c0008fe3:	83 c4 10             	add    esp,0x10
c0008fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fea:	eb dd                	jmp    c0008fc9 <Phys::allocatePage()+0x9b>

c0008fec <Phys::allocateContiguousPages(int)>:
c0008fec:	57                   	push   edi
c0008fed:	56                   	push   esi
c0008fee:	53                   	push   ebx
c0008fef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008ff3:	fa                   	cli    
c0008ff4:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0008ffa:	31 db                	xor    ebx,ebx
c0008ffc:	85 db                	test   ebx,ebx
c0008ffe:	75 11                	jne    c0009011 <Phys::allocateContiguousPages(int)+0x25>
c0009000:	e8 29 ff ff ff       	call   c0008f2e <Phys::allocatePage()>
c0009005:	83 fe 01             	cmp    esi,0x1
c0009008:	89 c7                	mov    edi,eax
c000900a:	74 21                	je     c000902d <Phys::allocateContiguousPages(int)+0x41>
c000900c:	bb 01 00 00 00       	mov    ebx,0x1
c0009011:	e8 18 ff ff ff       	call   c0008f2e <Phys::allocatePage()>
c0009016:	89 da                	mov    edx,ebx
c0009018:	c1 e2 0c             	shl    edx,0xc
c000901b:	01 fa                	add    edx,edi
c000901d:	39 c2                	cmp    edx,eax
c000901f:	74 20                	je     c0009041 <Phys::allocateContiguousPages(int)+0x55>
c0009021:	bb 01 00 00 00       	mov    ebx,0x1
c0009026:	89 c7                	mov    edi,eax
c0009028:	83 fe 01             	cmp    esi,0x1
c000902b:	75 e4                	jne    c0009011 <Phys::allocateContiguousPages(int)+0x25>
c000902d:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0009032:	48                   	dec    eax
c0009033:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0009038:	75 01                	jne    c000903b <Phys::allocateContiguousPages(int)+0x4f>
c000903a:	fb                   	sti    
c000903b:	89 f8                	mov    eax,edi
c000903d:	5b                   	pop    ebx
c000903e:	5e                   	pop    esi
c000903f:	5f                   	pop    edi
c0009040:	c3                   	ret    
c0009041:	43                   	inc    ebx
c0009042:	39 f3                	cmp    ebx,esi
c0009044:	75 b6                	jne    c0008ffc <Phys::allocateContiguousPages(int)+0x10>
c0009046:	eb e5                	jmp    c000902d <Phys::allocateContiguousPages(int)+0x41>

c0009048 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009048:	56                   	push   esi
c0009049:	53                   	push   ebx
c000904a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000904e:	39 1d 0c 1d 02 c0    	cmp    DWORD PTR ds:0xc0021d0c,ebx
c0009054:	73 06                	jae    c000905c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009056:	89 1d 0c 1d 02 c0    	mov    DWORD PTR ds:0xc0021d0c,ebx
c000905c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009060:	c1 eb 0c             	shr    ebx,0xc
c0009063:	c1 e8 0c             	shr    eax,0xc
c0009066:	39 d8                	cmp    eax,ebx
c0009068:	73 13                	jae    c000907d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000906a:	6a 00                	push   0x0
c000906c:	8d 70 01             	lea    esi,[eax+0x1]
c000906f:	50                   	push   eax
c0009070:	e8 04 fe ff ff       	call   c0008e79 <Phys::setPageState(unsigned long, bool)>
c0009075:	5a                   	pop    edx
c0009076:	89 f0                	mov    eax,esi
c0009078:	59                   	pop    ecx
c0009079:	39 f3                	cmp    ebx,esi
c000907b:	75 ed                	jne    c000906a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000907d:	5b                   	pop    ebx
c000907e:	5e                   	pop    esi
c000907f:	c3                   	ret    

c0009080 <Phys::physicalMemorySetup(unsigned int)>:
c0009080:	55                   	push   ebp
c0009081:	57                   	push   edi
c0009082:	56                   	push   esi
c0009083:	53                   	push   ebx
c0009084:	31 db                	xor    ebx,ebx
c0009086:	83 ec 40             	sub    esp,0x40
c0009089:	6a 10                	push   0x10
c000908b:	6a 00                	push   0x0
c000908d:	68 1c 1d 02 c0       	push   0xc0021d1c
c0009092:	e8 59 74 ff ff       	call   c00004f0 <memset>
c0009097:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000909b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00090a0:	05 00 10 00 00       	add    eax,0x1000
c00090a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00090a9:	5a                   	pop    edx
c00090aa:	59                   	pop    ecx
c00090ab:	50                   	push   eax
c00090ac:	68 d3 eb 01 c0       	push   0xc001ebd3
c00090b1:	e8 3a 28 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c00090b6:	83 c4 10             	add    esp,0x10
c00090b9:	83 ec 08             	sub    esp,0x8
c00090bc:	6a 01                	push   0x1
c00090be:	53                   	push   ebx
c00090bf:	43                   	inc    ebx
c00090c0:	e8 b4 fd ff ff       	call   c0008e79 <Phys::setPageState(unsigned long, bool)>
c00090c5:	83 c4 10             	add    esp,0x10
c00090c8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00090ce:	75 e9                	jne    c00090b9 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00090d0:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00090d6:	66 85 c0             	test   ax,ax
c00090d9:	0f 84 97 01 00 00    	je     c0009276 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00090df:	89 c7                	mov    edi,eax
c00090e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00090e9:	81 e7 ff ff 00 00    	and    edi,0xffff
c00090ef:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00090f4:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00090f8:	eb 15                	jmp    c000910f <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00090fa:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00090fe:	83 c3 18             	add    ebx,0x18
c0009101:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009105:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009109:	0f 84 77 01 00 00    	je     c0009286 <Phys::physicalMemorySetup(unsigned int)+0x206>
c000910f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009112:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0009115:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0009118:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000911c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009120:	8b 33                	mov    esi,DWORD PTR [ebx]
c0009122:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0009125:	01 f0                	add    eax,esi
c0009127:	55                   	push   ebp
c0009128:	11 fa                	adc    edx,edi
c000912a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000912e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009132:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009136:	50                   	push   eax
c0009137:	56                   	push   esi
c0009138:	68 70 eb 01 c0       	push   0xc001eb70
c000913d:	e8 ae 27 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0009142:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009146:	83 c4 10             	add    esp,0x10
c0009149:	09 f8                	or     eax,edi
c000914b:	0f 85 35 01 00 00    	jne    c0009286 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0009151:	4d                   	dec    ebp
c0009152:	75 a6                	jne    c00090fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0009154:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009158:	ba 00 00 08 00       	mov    edx,0x80000
c000915d:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009161:	39 f2                	cmp    edx,esi
c0009163:	89 c1                	mov    ecx,eax
c0009165:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000916d:	19 f9                	sbb    ecx,edi
c000916f:	0f 82 a7 00 00 00    	jb     c000921c <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0009175:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0009179:	89 c1                	mov    ecx,eax
c000917b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000917f:	0f 83 97 00 00 00    	jae    c000921c <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0009185:	ba 00 00 0a 00       	mov    edx,0xa0000
c000918a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000918e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0009192:	39 fa                	cmp    edx,edi
c0009194:	19 e8                	sbb    eax,ebp
c0009196:	0f 82 9a 01 00 00    	jb     c0009336 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c000919c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00091a0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00091a4:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00091aa:	ba ff 1f 00 00       	mov    edx,0x1fff
c00091af:	83 d5 ff             	adc    ebp,0xffffffff
c00091b2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00091b6:	31 c0                	xor    eax,eax
c00091b8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00091bc:	39 fa                	cmp    edx,edi
c00091be:	89 c1                	mov    ecx,eax
c00091c0:	19 e9                	sbb    ecx,ebp
c00091c2:	0f 83 32 ff ff ff    	jae    c00090fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00091c8:	be 00 00 08 00       	mov    esi,0x80000
c00091cd:	51                   	push   ecx
c00091ce:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00091d2:	57                   	push   edi
c00091d3:	56                   	push   esi
c00091d4:	68 94 eb 01 c0       	push   0xc001eb94
c00091d9:	e8 12 27 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c00091de:	5d                   	pop    ebp
c00091df:	58                   	pop    eax
c00091e0:	57                   	push   edi
c00091e1:	56                   	push   esi
c00091e2:	e8 61 fe ff ff       	call   c0009048 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00091e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00091eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00091ef:	83 c4 0c             	add    esp,0xc
c00091f2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00091f6:	03 05 18 1d 02 c0    	add    eax,DWORD PTR ds:0xc0021d18
c00091fc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009203:	a3 18 1d 02 c0       	mov    ds:0xc0021d18,eax
c0009208:	52                   	push   edx
c0009209:	50                   	push   eax
c000920a:	68 f9 eb 01 c0       	push   0xc001ebf9
c000920f:	e8 dc 26 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0009214:	83 c4 10             	add    esp,0x10
c0009217:	e9 de fe ff ff       	jmp    c00090fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000921c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0009220:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009224:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009228:	39 ea                	cmp    edx,ebp
c000922a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000922e:	0f 82 c6 fe ff ff    	jb     c00090fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0009234:	ba ff 1f 00 00       	mov    edx,0x1fff
c0009239:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000923d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0009241:	0f 83 b3 fe ff ff    	jae    c00090fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0009247:	39 ee                	cmp    esi,ebp
c0009249:	89 f8                	mov    eax,edi
c000924b:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000924f:	0f 83 78 ff ff ff    	jae    c00091cd <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0009255:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009259:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000925d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009261:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009265:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0009269:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000926d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009271:	e9 57 ff ff ff       	jmp    c00091cd <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0009276:	83 ec 0c             	sub    esp,0xc
c0009279:	68 eb eb 01 c0       	push   0xc001ebeb
c000927e:	e8 bc 81 00 00       	call   c001143f <Krnl::panic(char const*)>
c0009283:	83 c4 10             	add    esp,0x10
c0009286:	83 ec 08             	sub    esp,0x8
c0009289:	bb 60 00 00 00       	mov    ebx,0x60
c000928e:	6a 00                	push   0x0
c0009290:	6a 06                	push   0x6
c0009292:	e8 e2 fb ff ff       	call   c0008e79 <Phys::setPageState(unsigned long, bool)>
c0009297:	58                   	pop    eax
c0009298:	5a                   	pop    edx
c0009299:	6a 00                	push   0x0
c000929b:	6a 07                	push   0x7
c000929d:	e8 d7 fb ff ff       	call   c0008e79 <Phys::setPageState(unsigned long, bool)>
c00092a2:	83 05 18 1d 02 c0 02 	add    DWORD PTR ds:0xc0021d18,0x2
c00092a9:	83 c4 10             	add    esp,0x10
c00092ac:	83 ec 08             	sub    esp,0x8
c00092af:	6a 00                	push   0x0
c00092b1:	53                   	push   ebx
c00092b2:	43                   	inc    ebx
c00092b3:	e8 c1 fb ff ff       	call   c0008e79 <Phys::setPageState(unsigned long, bool)>
c00092b8:	83 c4 10             	add    esp,0x10
c00092bb:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00092c1:	75 e9                	jne    c00092ac <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00092c3:	a1 18 1d 02 c0       	mov    eax,ds:0xc0021d18
c00092c8:	bb 40 01 00 00       	mov    ebx,0x140
c00092cd:	83 c0 20             	add    eax,0x20
c00092d0:	a3 18 1d 02 c0       	mov    ds:0xc0021d18,eax
c00092d5:	eb 22                	jmp    c00092f9 <Phys::physicalMemorySetup(unsigned int)+0x279>
c00092d7:	83 ec 08             	sub    esp,0x8
c00092da:	6a 00                	push   0x0
c00092dc:	53                   	push   ebx
c00092dd:	43                   	inc    ebx
c00092de:	e8 96 fb ff ff       	call   c0008e79 <Phys::setPageState(unsigned long, bool)>
c00092e3:	a1 18 1d 02 c0       	mov    eax,ds:0xc0021d18
c00092e8:	83 c4 10             	add    esp,0x10
c00092eb:	40                   	inc    eax
c00092ec:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00092f2:	a3 18 1d 02 c0       	mov    ds:0xc0021d18,eax
c00092f7:	74 07                	je     c0009300 <Phys::physicalMemorySetup(unsigned int)+0x280>
c00092f9:	3d ff 03 00 00       	cmp    eax,0x3ff
c00092fe:	7e d7                	jle    c00092d7 <Phys::physicalMemorySetup(unsigned int)+0x257>
c0009300:	bb d0 01 00 00       	mov    ebx,0x1d0
c0009305:	3d ff 07 00 00       	cmp    eax,0x7ff
c000930a:	7f 22                	jg     c000932e <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000930c:	83 ec 08             	sub    esp,0x8
c000930f:	6a 00                	push   0x0
c0009311:	53                   	push   ebx
c0009312:	43                   	inc    ebx
c0009313:	e8 61 fb ff ff       	call   c0008e79 <Phys::setPageState(unsigned long, bool)>
c0009318:	a1 18 1d 02 c0       	mov    eax,ds:0xc0021d18
c000931d:	83 c4 10             	add    esp,0x10
c0009320:	40                   	inc    eax
c0009321:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0009327:	a3 18 1d 02 c0       	mov    ds:0xc0021d18,eax
c000932c:	75 d7                	jne    c0009305 <Phys::physicalMemorySetup(unsigned int)+0x285>
c000932e:	83 c4 3c             	add    esp,0x3c
c0009331:	5b                   	pop    ebx
c0009332:	5e                   	pop    esi
c0009333:	5f                   	pop    edi
c0009334:	5d                   	pop    ebp
c0009335:	c3                   	ret    
c0009336:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000933e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009346:	e9 51 fe ff ff       	jmp    c000919c <Phys::physicalMemorySetup(unsigned int)+0x11c>
c000934b:	90                   	nop

c000934c <Pipe::isAtty()>:
c000934c:	31 c0                	xor    eax,eax
c000934e:	c3                   	ret    
c000934f:	90                   	nop

c0009350 <Pipe::~Pipe()>:
c0009350:	83 ec 0c             	sub    esp,0xc
c0009353:	ba 58 ec 01 c0       	mov    edx,0xc001ec58
c0009358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000935c:	89 10                	mov    DWORD PTR [eax],edx
c000935e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 d1 10 00 00       	call   c000a43c <UnixFile::~UnixFile()>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	90                   	nop
c000936f:	83 c4 0c             	add    esp,0xc
c0009372:	c3                   	ret    
c0009373:	90                   	nop

c0009374 <Pipe::~Pipe()>:
c0009374:	83 ec 0c             	sub    esp,0xc
c0009377:	83 ec 0c             	sub    esp,0xc
c000937a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000937e:	e8 cd ff ff ff       	call   c0009350 <Pipe::~Pipe()>
c0009383:	83 c4 10             	add    esp,0x10
c0009386:	83 ec 08             	sub    esp,0x8
c0009389:	6a 20                	push   0x20
c000938b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938f:	e8 66 24 00 00       	call   c000b7fa <operator delete(void*, unsigned long)>
c0009394:	83 c4 10             	add    esp,0x10
c0009397:	83 c4 0c             	add    esp,0xc
c000939a:	c3                   	ret    
c000939b:	90                   	nop

c000939c <Pipe::write(unsigned long long, void*, int*)>:
c000939c:	55                   	push   ebp
c000939d:	57                   	push   edi
c000939e:	56                   	push   esi
c000939f:	53                   	push   ebx
c00093a0:	83 ec 1c             	sub    esp,0x1c
c00093a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00093a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00093ab:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00093ae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00093b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00093b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093b9:	89 d8                	mov    eax,ebx
c00093bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00093be:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00093c2:	89 d6                	mov    esi,edx
c00093c4:	89 d7                	mov    edi,edx
c00093c6:	c1 ff 1f             	sar    edi,0x1f
c00093c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00093cc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00093d0:	c1 f8 1f             	sar    eax,0x1f
c00093d3:	39 f3                	cmp    ebx,esi
c00093d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00093d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093dd:	19 f8                	sbb    eax,edi
c00093df:	b8 01 00 00 00       	mov    eax,0x1
c00093e4:	72 6e                	jb     c0009454 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00093e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00093e9:	01 d0                	add    eax,edx
c00093eb:	99                   	cdq    
c00093ec:	f7 fb                	idiv   ebx
c00093ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093f2:	29 d3                	sub    ebx,edx
c00093f4:	89 d7                	mov    edi,edx
c00093f6:	89 de                	mov    esi,ebx
c00093f8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00093fb:	c1 fb 1f             	sar    ebx,0x1f
c00093fe:	39 f2                	cmp    edx,esi
c0009400:	19 d8                	sbb    eax,ebx
c0009402:	b8 00 00 00 00       	mov    eax,0x0
c0009407:	72 04                	jb     c000940d <Pipe::write(unsigned long long, void*, int*)+0x71>
c0009409:	89 d0                	mov    eax,edx
c000940b:	29 f0                	sub    eax,esi
c000940d:	89 d3                	mov    ebx,edx
c000940f:	29 c3                	sub    ebx,eax
c0009411:	74 0b                	je     c000941e <Pipe::write(unsigned long long, void*, int*)+0x82>
c0009413:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0009416:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000941a:	89 d9                	mov    ecx,ebx
c000941c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000941e:	85 c0                	test   eax,eax
c0009420:	74 0d                	je     c000942f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0009422:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0009426:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0009429:	89 de                	mov    esi,ebx
c000942b:	89 c1                	mov    ecx,eax
c000942d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000942f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0009432:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0009437:	75 10                	jne    c0009449 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0009439:	83 ec 0c             	sub    esp,0xc
c000943c:	68 15 ec 01 c0       	push   0xc001ec15
c0009441:	e8 f9 7f 00 00       	call   c001143f <Krnl::panic(char const*)>
c0009446:	83 c4 10             	add    esp,0x10
c0009449:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000944d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0009450:	89 08                	mov    DWORD PTR [eax],ecx
c0009452:	31 c0                	xor    eax,eax
c0009454:	83 c4 1c             	add    esp,0x1c
c0009457:	5b                   	pop    ebx
c0009458:	5e                   	pop    esi
c0009459:	5f                   	pop    edi
c000945a:	5d                   	pop    ebp
c000945b:	c3                   	ret    

c000945c <Pipe::read(unsigned long long, void*, int*)>:
c000945c:	55                   	push   ebp
c000945d:	57                   	push   edi
c000945e:	56                   	push   esi
c000945f:	53                   	push   ebx
c0009460:	83 ec 1c             	sub    esp,0x1c
c0009463:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009467:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000946b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000946f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009472:	89 c8                	mov    eax,ecx
c0009474:	99                   	cdq    
c0009475:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0009479:	74 24                	je     c000949f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000947b:	39 f9                	cmp    ecx,edi
c000947d:	89 d1                	mov    ecx,edx
c000947f:	19 f1                	sbb    ecx,esi
c0009481:	73 1c                	jae    c000949f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0009483:	fa                   	cli    
c0009484:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c000948a:	e8 05 b3 00 00       	call   c0014794 <schedule()>
c000948f:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0009494:	48                   	dec    eax
c0009495:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000949a:	75 d3                	jne    c000946f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000949c:	fb                   	sti    
c000949d:	eb d0                	jmp    c000946f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000949f:	39 f8                	cmp    eax,edi
c00094a1:	89 d1                	mov    ecx,edx
c00094a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00094a6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00094aa:	19 f1                	sbb    ecx,esi
c00094ac:	73 07                	jae    c00094b5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00094ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00094b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094b5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00094b8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00094bb:	29 f7                	sub    edi,esi
c00094bd:	89 f8                	mov    eax,edi
c00094bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00094c3:	99                   	cdq    
c00094c4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00094c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094cb:	19 d0                	sbb    eax,edx
c00094cd:	73 07                	jae    c00094d6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00094cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00094d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00094d6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00094d9:	89 ea                	mov    edx,ebp
c00094db:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00094df:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00094e4:	74 0d                	je     c00094f3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00094e6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00094e9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00094ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00094f3:	85 d2                	test   edx,edx
c00094f5:	74 11                	je     c0009508 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00094f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00094fb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00094fe:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0009502:	89 d1                	mov    ecx,edx
c0009504:	89 c7                	mov    edi,eax
c0009506:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009508:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000950b:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000950e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0009511:	99                   	cdq    
c0009512:	89 f7                	mov    edi,esi
c0009514:	03 04 24             	add    eax,DWORD PTR [esp]
c0009517:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000951b:	c1 ff 1f             	sar    edi,0x1f
c000951e:	57                   	push   edi
c000951f:	56                   	push   esi
c0009520:	52                   	push   edx
c0009521:	50                   	push   eax
c0009522:	e8 39 41 01 00       	call   c001d660 <__umoddi3>
c0009527:	83 c4 10             	add    esp,0x10
c000952a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000952d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0009532:	75 10                	jne    c0009544 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0009534:	83 ec 0c             	sub    esp,0xc
c0009537:	68 32 ec 01 c0       	push   0xc001ec32
c000953c:	e8 fe 7e 00 00       	call   c001143f <Krnl::panic(char const*)>
c0009541:	83 c4 10             	add    esp,0x10
c0009544:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009548:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000954b:	89 10                	mov    DWORD PTR [eax],edx
c000954d:	83 c4 1c             	add    esp,0x1c
c0009550:	31 c0                	xor    eax,eax
c0009552:	5b                   	pop    ebx
c0009553:	5e                   	pop    esi
c0009554:	5f                   	pop    edi
c0009555:	5d                   	pop    ebp
c0009556:	c3                   	ret    
c0009557:	90                   	nop

c0009558 <Pipe::Pipe(int)>:
c0009558:	83 ec 0c             	sub    esp,0xc
c000955b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000955f:	83 ec 08             	sub    esp,0x8
c0009562:	6a 00                	push   0x0
c0009564:	50                   	push   eax
c0009565:	e8 f0 0c 00 00       	call   c000a25a <UnixFile::UnixFile(int)>
c000956a:	83 c4 10             	add    esp,0x10
c000956d:	ba 58 ec 01 c0       	mov    edx,0xc001ec58
c0009572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009576:	89 10                	mov    DWORD PTR [eax],edx
c0009578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000957c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009580:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009587:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000958e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009592:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0009599:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000959d:	83 ec 0c             	sub    esp,0xc
c00095a0:	50                   	push   eax
c00095a1:	e8 bb f5 ff ff       	call   c0008b61 <malloc>
c00095a6:	83 c4 10             	add    esp,0x10
c00095a9:	89 c2                	mov    edx,eax
c00095ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00095b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095b6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00095ba:	90                   	nop
c00095bb:	83 c4 0c             	add    esp,0xc
c00095be:	c3                   	ret    
c00095bf:	90                   	nop

c00095c0 <VgaText::isAtty()>:
c00095c0:	b0 01                	mov    al,0x1
c00095c2:	c3                   	ret    
c00095c3:	90                   	nop

c00095c4 <VgaText::~VgaText()>:
c00095c4:	83 ec 0c             	sub    esp,0xc
c00095c7:	ba e0 ec 01 c0       	mov    edx,0xc001ece0
c00095cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095d0:	89 10                	mov    DWORD PTR [eax],edx
c00095d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095d6:	83 ec 0c             	sub    esp,0xc
c00095d9:	50                   	push   eax
c00095da:	e8 5d 0e 00 00       	call   c000a43c <UnixFile::~UnixFile()>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	90                   	nop
c00095e3:	83 c4 0c             	add    esp,0xc
c00095e6:	c3                   	ret    
c00095e7:	90                   	nop

c00095e8 <VgaText::~VgaText()>:
c00095e8:	83 ec 0c             	sub    esp,0xc
c00095eb:	83 ec 0c             	sub    esp,0xc
c00095ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095f2:	e8 cd ff ff ff       	call   c00095c4 <VgaText::~VgaText()>
c00095f7:	83 c4 10             	add    esp,0x10
c00095fa:	83 ec 08             	sub    esp,0x8
c00095fd:	68 34 01 00 00       	push   0x134
c0009602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009606:	e8 ef 21 00 00       	call   c000b7fa <operator delete(void*, unsigned long)>
c000960b:	83 c4 10             	add    esp,0x10
c000960e:	83 c4 0c             	add    esp,0xc
c0009611:	c3                   	ret    

c0009612 <VgaText::read(unsigned long long, void*, int*)>:
c0009612:	83 ec 10             	sub    esp,0x10
c0009615:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009619:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000961d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009621:	e8 24 45 00 00       	call   c000db4a <readKeyboard(VgaText*, char*, unsigned long)>
c0009626:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000962a:	89 02                	mov    DWORD PTR [edx],eax
c000962c:	31 c0                	xor    eax,eax
c000962e:	83 c4 1c             	add    esp,0x1c
c0009631:	c3                   	ret    

c0009632 <setTerminalScrollLock(bool)>:
c0009632:	c3                   	ret    

c0009633 <doTerminalCycle()>:
c0009633:	c3                   	ret    

c0009634 <addToTerminalCycle(VgaText*)>:
c0009634:	c3                   	ret    

c0009635 <scrollTerminalScrollLock(int)>:
c0009635:	c3                   	ret    

c0009636 <VgaText::updateTitle()>:
c0009636:	c3                   	ret    
c0009637:	90                   	nop

c0009638 <VgaText::load()>:
c0009638:	c3                   	ret    
c0009639:	90                   	nop

c000963a <VgaText::updateCursor()>:
c000963a:	83 ec 14             	sub    esp,0x14
c000963d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009641:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0009644:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0009647:	e8 bc db 00 00       	call   c0017208 <HalConsoleCursorUpdate(int, int)>
c000964c:	83 c4 1c             	add    esp,0x1c
c000964f:	c3                   	ret    

c0009650 <VgaText::doANSI_SGR(int)>:
c0009650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009658:	85 d2                	test   edx,edx
c000965a:	75 0b                	jne    c0009667 <VgaText::doANSI_SGR(int)+0x17>
c000965c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000965f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0009662:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009665:	eb 59                	jmp    c00096c0 <VgaText::doANSI_SGR(int)+0x70>
c0009667:	83 fa 07             	cmp    edx,0x7
c000966a:	75 0b                	jne    c0009677 <VgaText::doANSI_SGR(int)+0x27>
c000966c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000966f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0009672:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0009675:	eb 49                	jmp    c00096c0 <VgaText::doANSI_SGR(int)+0x70>
c0009677:	83 fa 1b             	cmp    edx,0x1b
c000967a:	74 e0                	je     c000965c <VgaText::doANSI_SGR(int)+0xc>
c000967c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000967f:	83 f9 07             	cmp    ecx,0x7
c0009682:	77 09                	ja     c000968d <VgaText::doANSI_SGR(int)+0x3d>
c0009684:	8b 14 8d 00 0c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdf400]
c000968b:	eb 20                	jmp    c00096ad <VgaText::doANSI_SGR(int)+0x5d>
c000968d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0009690:	83 f9 07             	cmp    ecx,0x7
c0009693:	77 09                	ja     c000969e <VgaText::doANSI_SGR(int)+0x4e>
c0009695:	8b 14 8d 00 0c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdf400]
c000969c:	eb 22                	jmp    c00096c0 <VgaText::doANSI_SGR(int)+0x70>
c000969e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00096a1:	83 f9 07             	cmp    ecx,0x7
c00096a4:	77 0b                	ja     c00096b1 <VgaText::doANSI_SGR(int)+0x61>
c00096a6:	8b 14 95 b8 0a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdf548]
c00096ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00096b0:	c3                   	ret    
c00096b1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00096b4:	83 f9 07             	cmp    ecx,0x7
c00096b7:	77 0a                	ja     c00096c3 <VgaText::doANSI_SGR(int)+0x73>
c00096b9:	8b 14 95 90 0a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdf570]
c00096c0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00096c3:	c3                   	ret    

c00096c4 <VgaText::setDefaultBgColour(VgaColour)>:
c00096c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096cc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00096cf:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00096d2:	c3                   	ret    
c00096d3:	90                   	nop

c00096d4 <VgaText::setDefaultFgColour(VgaColour)>:
c00096d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096dc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00096df:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00096e2:	c3                   	ret    
c00096e3:	90                   	nop

c00096e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00096e4:	53                   	push   ebx
c00096e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00096e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00096ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096f1:	51                   	push   ecx
c00096f2:	e8 cd ff ff ff       	call   c00096c4 <VgaText::setDefaultBgColour(VgaColour)>
c00096f7:	58                   	pop    eax
c00096f8:	5a                   	pop    edx
c00096f9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00096fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0009701:	5b                   	pop    ebx
c0009702:	eb d0                	jmp    c00096d4 <VgaText::setDefaultFgColour(VgaColour)>

c0009704 <VgaText::setTitleTextColour(VgaColour)>:
c0009704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009708:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000970c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000970f:	c3                   	ret    

c0009710 <VgaText::setTitleColour(VgaColour)>:
c0009710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009714:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009718:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000971b:	c3                   	ret    

c000971c <VgaText::setTitle(char*)>:
c000971c:	c3                   	ret    
c000971d:	90                   	nop

c000971e <VgaText::combineColours(unsigned char, unsigned char)>:
c000971e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0009722:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0009727:	83 e0 0f             	and    eax,0xf
c000972a:	c1 e2 04             	shl    edx,0x4
c000972d:	09 d0                	or     eax,edx
c000972f:	c3                   	ret    

c0009730 <VgaText::scrollScreen()>:
c0009730:	55                   	push   ebp
c0009731:	b9 01 00 00 00       	mov    ecx,0x1
c0009736:	57                   	push   edi
c0009737:	56                   	push   esi
c0009738:	53                   	push   ebx
c0009739:	83 ec 0c             	sub    esp,0xc
c000973c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009740:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0009746:	31 ff                	xor    edi,edi
c0009748:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000974b:	83 f9 18             	cmp    ecx,0x18
c000974e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0009751:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0009758:	75 27                	jne    c0009781 <VgaText::scrollScreen()+0x51>
c000975a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000975d:	01 f5                	add    ebp,esi
c000975f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009765:	74 16                	je     c000977d <VgaText::scrollScreen()+0x4d>
c0009767:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000976b:	50                   	push   eax
c000976c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0009770:	50                   	push   eax
c0009771:	e8 a8 ff ff ff       	call   c000971e <VgaText::combineColours(unsigned char, unsigned char)>
c0009776:	5a                   	pop    edx
c0009777:	5a                   	pop    edx
c0009778:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000977b:	eb 04                	jmp    c0009781 <VgaText::scrollScreen()+0x51>
c000977d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0009781:	47                   	inc    edi
c0009782:	46                   	inc    esi
c0009783:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0009789:	75 bd                	jne    c0009748 <VgaText::scrollScreen()+0x18>
c000978b:	41                   	inc    ecx
c000978c:	83 f9 19             	cmp    ecx,0x19
c000978f:	75 af                	jne    c0009740 <VgaText::scrollScreen()+0x10>
c0009791:	39 1d 34 1d 02 c0    	cmp    DWORD PTR ds:0xc0021d34,ebx
c0009797:	75 1f                	jne    c00097b8 <VgaText::scrollScreen()+0x88>
c0009799:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000979d:	74 05                	je     c00097a4 <VgaText::scrollScreen()+0x74>
c000979f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00097a2:	eb 14                	jmp    c00097b8 <VgaText::scrollScreen()+0x88>
c00097a4:	50                   	push   eax
c00097a5:	50                   	push   eax
c00097a6:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00097aa:	50                   	push   eax
c00097ab:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00097af:	50                   	push   eax
c00097b0:	e8 df d8 00 00       	call   c0017094 <HalConsoleScroll(int, int)>
c00097b5:	83 c4 10             	add    esp,0x10
c00097b8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00097bc:	83 c4 0c             	add    esp,0xc
c00097bf:	5b                   	pop    ebx
c00097c0:	5e                   	pop    esi
c00097c1:	5f                   	pop    edi
c00097c2:	5d                   	pop    ebp
c00097c3:	e9 72 fe ff ff       	jmp    c000963a <VgaText::updateCursor()>

c00097c8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00097c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00097cd:	c1 e0 08             	shl    eax,0x8
c00097d0:	89 c2                	mov    edx,eax
c00097d2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00097d7:	09 d0                	or     eax,edx
c00097d9:	c3                   	ret    

c00097da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00097da:	55                   	push   ebp
c00097db:	57                   	push   edi
c00097dc:	56                   	push   esi
c00097dd:	53                   	push   ebx
c00097de:	83 ec 1c             	sub    esp,0x1c
c00097e1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00097e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00097ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00097f1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00097f5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00097f9:	0f b6 c3             	movzx  eax,bl
c00097fc:	50                   	push   eax
c00097fd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0009802:	50                   	push   eax
c0009803:	e8 16 ff ff ff       	call   c000971e <VgaText::combineColours(unsigned char, unsigned char)>
c0009808:	5a                   	pop    edx
c0009809:	0f b6 c0             	movzx  eax,al
c000980c:	59                   	pop    ecx
c000980d:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0009812:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0009816:	50                   	push   eax
c0009817:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000981b:	e8 a8 ff ff ff       	call   c00097c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0009820:	5a                   	pop    edx
c0009821:	66 6b d7 50          	imul   dx,di,0x50
c0009825:	59                   	pop    ecx
c0009826:	01 f2                	add    edx,esi
c0009828:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000982b:	0f b7 d2             	movzx  edx,dx
c000982e:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0009832:	39 2d 34 1d 02 c0    	cmp    DWORD PTR ds:0xc0021d34,ebp
c0009838:	75 28                	jne    c0009862 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000983a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000983e:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0009842:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0009846:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000984a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000984e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009852:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009856:	83 c4 1c             	add    esp,0x1c
c0009859:	5b                   	pop    ebx
c000985a:	5e                   	pop    esi
c000985b:	5f                   	pop    edi
c000985c:	5d                   	pop    ebp
c000985d:	e9 3a d9 00 00       	jmp    c001719c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0009862:	83 c4 1c             	add    esp,0x1c
c0009865:	5b                   	pop    ebx
c0009866:	5e                   	pop    esi
c0009867:	5f                   	pop    edi
c0009868:	5d                   	pop    ebp
c0009869:	c3                   	ret    

c000986a <VgaText::getCursorX()>:
c000986a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000986e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0009871:	c3                   	ret    

c0009872 <VgaText::getCursorY()>:
c0009872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009876:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009879:	c3                   	ret    

c000987a <VgaText::setCursor(int, int)>:
c000987a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000987e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009882:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0009885:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009889:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000988c:	e9 a9 fd ff ff       	jmp    c000963a <VgaText::updateCursor()>

c0009891 <setActiveTerminal(VgaText*)>:
c0009891:	53                   	push   ebx
c0009892:	83 ec 08             	sub    esp,0x8
c0009895:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009899:	85 db                	test   ebx,ebx
c000989b:	75 11                	jne    c00098ae <setActiveTerminal(VgaText*)+0x1d>
c000989d:	c7 44 24 10 6c ec 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ec6c
c00098a5:	83 c4 08             	add    esp,0x8
c00098a8:	5b                   	pop    ebx
c00098a9:	e9 91 7b 00 00       	jmp    c001143f <Krnl::panic(char const*)>
c00098ae:	a1 34 1d 02 c0       	mov    eax,ds:0xc0021d34
c00098b3:	85 c0                	test   eax,eax
c00098b5:	74 0c                	je     c00098c3 <setActiveTerminal(VgaText*)+0x32>
c00098b7:	83 ec 0c             	sub    esp,0xc
c00098ba:	50                   	push   eax
c00098bb:	e8 7a fd ff ff       	call   c000963a <VgaText::updateCursor()>
c00098c0:	83 c4 10             	add    esp,0x10
c00098c3:	89 1d 34 1d 02 c0    	mov    DWORD PTR ds:0xc0021d34,ebx
c00098c9:	50                   	push   eax
c00098ca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00098cd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00098d0:	53                   	push   ebx
c00098d1:	e8 a4 ff ff ff       	call   c000987a <VgaText::setCursor(int, int)>
c00098d6:	83 c4 18             	add    esp,0x18
c00098d9:	5b                   	pop    ebx
c00098da:	c3                   	ret    
c00098db:	90                   	nop

c00098dc <VgaText::clearScreen()>:
c00098dc:	57                   	push   edi
c00098dd:	56                   	push   esi
c00098de:	31 f6                	xor    esi,esi
c00098e0:	53                   	push   ebx
c00098e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00098e5:	52                   	push   edx
c00098e6:	6a 00                	push   0x0
c00098e8:	6a 00                	push   0x0
c00098ea:	53                   	push   ebx
c00098eb:	e8 8a ff ff ff       	call   c000987a <VgaText::setCursor(int, int)>
c00098f0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00098f7:	83 c4 10             	add    esp,0x10
c00098fa:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00098fd:	7e 20                	jle    c000991f <VgaText::clearScreen()+0x43>
c00098ff:	31 ff                	xor    edi,edi
c0009901:	50                   	push   eax
c0009902:	50                   	push   eax
c0009903:	56                   	push   esi
c0009904:	57                   	push   edi
c0009905:	47                   	inc    edi
c0009906:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0009909:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000990c:	6a 20                	push   0x20
c000990e:	53                   	push   ebx
c000990f:	e8 c6 fe ff ff       	call   c00097da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0009914:	83 c4 20             	add    esp,0x20
c0009917:	83 ff 50             	cmp    edi,0x50
c000991a:	75 e5                	jne    c0009901 <VgaText::clearScreen()+0x25>
c000991c:	46                   	inc    esi
c000991d:	eb db                	jmp    c00098fa <VgaText::clearScreen()+0x1e>
c000991f:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0009926:	5b                   	pop    ebx
c0009927:	5e                   	pop    esi
c0009928:	5f                   	pop    edi
c0009929:	c3                   	ret    

c000992a <VgaText::setCursorX(int)>:
c000992a:	83 ec 10             	sub    esp,0x10
c000992d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009931:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0009934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009938:	50                   	push   eax
c0009939:	e8 3c ff ff ff       	call   c000987a <VgaText::setCursor(int, int)>
c000993e:	83 c4 1c             	add    esp,0x1c
c0009941:	c3                   	ret    

c0009942 <VgaText::setCursorY(int)>:
c0009942:	83 ec 10             	sub    esp,0x10
c0009945:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009949:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000994d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0009950:	50                   	push   eax
c0009951:	e8 24 ff ff ff       	call   c000987a <VgaText::setCursor(int, int)>
c0009956:	83 c4 1c             	add    esp,0x1c
c0009959:	c3                   	ret    

c000995a <VgaText::incrementCursor(bool)>:
c000995a:	56                   	push   esi
c000995b:	53                   	push   ebx
c000995c:	51                   	push   ecx
c000995d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009961:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009965:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009968:	40                   	inc    eax
c0009969:	83 f8 50             	cmp    eax,0x50
c000996c:	74 05                	je     c0009973 <VgaText::incrementCursor(bool)+0x19>
c000996e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009971:	eb 24                	jmp    c0009997 <VgaText::incrementCursor(bool)+0x3d>
c0009973:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009976:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000997d:	8d 50 01             	lea    edx,[eax+0x1]
c0009980:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0009983:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0009986:	75 0f                	jne    c0009997 <VgaText::incrementCursor(bool)+0x3d>
c0009988:	83 ec 0c             	sub    esp,0xc
c000998b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000998e:	53                   	push   ebx
c000998f:	e8 9c fd ff ff       	call   c0009730 <VgaText::scrollScreen()>
c0009994:	83 c4 10             	add    esp,0x10
c0009997:	89 f0                	mov    eax,esi
c0009999:	84 c0                	test   al,al
c000999b:	74 0c                	je     c00099a9 <VgaText::incrementCursor(bool)+0x4f>
c000999d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00099a1:	5a                   	pop    edx
c00099a2:	5b                   	pop    ebx
c00099a3:	5e                   	pop    esi
c00099a4:	e9 91 fc ff ff       	jmp    c000963a <VgaText::updateCursor()>
c00099a9:	58                   	pop    eax
c00099aa:	5b                   	pop    ebx
c00099ab:	5e                   	pop    esi
c00099ac:	c3                   	ret    
c00099ad:	90                   	nop

c00099ae <VgaText::decrementCursor(bool)>:
c00099ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00099b6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00099b9:	85 c0                	test   eax,eax
c00099bb:	74 04                	je     c00099c1 <VgaText::decrementCursor(bool)+0x13>
c00099bd:	48                   	dec    eax
c00099be:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00099c1:	84 c9                	test   cl,cl
c00099c3:	74 09                	je     c00099ce <VgaText::decrementCursor(bool)+0x20>
c00099c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00099c9:	e9 6c fc ff ff       	jmp    c000963a <VgaText::updateCursor()>
c00099ce:	c3                   	ret    
c00099cf:	90                   	nop

c00099d0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00099d0:	53                   	push   ebx
c00099d1:	83 ec 08             	sub    esp,0x8
c00099d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00099dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00099e4:	3c 07                	cmp    al,0x7
c00099e6:	75 21                	jne    c0009a09 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c00099e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00099f0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00099f8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0009a00:	83 c4 08             	add    esp,0x8
c0009a03:	5b                   	pop    ebx
c0009a04:	e9 3e 2d 00 00       	jmp    c000c747 <Krnl::beep(int, int, bool)>
c0009a09:	3c 0d                	cmp    al,0xd
c0009a0b:	75 09                	jne    c0009a16 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0009a0d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009a14:	eb 2c                	jmp    c0009a42 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0009a16:	3c 0a                	cmp    al,0xa
c0009a18:	75 31                	jne    c0009a4b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0009a1a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009a1d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009a24:	8d 50 01             	lea    edx,[eax+0x1]
c0009a27:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0009a2a:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0009a2d:	75 0f                	jne    c0009a3e <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0009a2f:	83 ec 0c             	sub    esp,0xc
c0009a32:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0009a35:	53                   	push   ebx
c0009a36:	e8 f5 fc ff ff       	call   c0009730 <VgaText::scrollScreen()>
c0009a3b:	83 c4 10             	add    esp,0x10
c0009a3e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009a42:	83 c4 08             	add    esp,0x8
c0009a45:	5b                   	pop    ebx
c0009a46:	e9 ef fb ff ff       	jmp    c000963a <VgaText::updateCursor()>
c0009a4b:	3c 08                	cmp    al,0x8
c0009a4d:	75 25                	jne    c0009a74 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0009a4f:	50                   	push   eax
c0009a50:	50                   	push   eax
c0009a51:	6a 01                	push   0x1
c0009a53:	53                   	push   ebx
c0009a54:	e8 55 ff ff ff       	call   c00099ae <VgaText::decrementCursor(bool)>
c0009a59:	5a                   	pop    edx
c0009a5a:	59                   	pop    ecx
c0009a5b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009a5e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009a61:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0009a64:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0009a67:	6a 20                	push   0x20
c0009a69:	53                   	push   ebx
c0009a6a:	e8 6b fd ff ff       	call   c00097da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0009a6f:	83 c4 28             	add    esp,0x28
c0009a72:	5b                   	pop    ebx
c0009a73:	c3                   	ret    
c0009a74:	83 ec 08             	sub    esp,0x8
c0009a77:	0f be c0             	movsx  eax,al
c0009a7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009a7d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009a80:	51                   	push   ecx
c0009a81:	52                   	push   edx
c0009a82:	50                   	push   eax
c0009a83:	53                   	push   ebx
c0009a84:	e8 51 fd ff ff       	call   c00097da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0009a89:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0009a8d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0009a95:	83 c4 28             	add    esp,0x28
c0009a98:	5b                   	pop    ebx
c0009a99:	e9 bc fe ff ff       	jmp    c000995a <VgaText::incrementCursor(bool)>

c0009a9e <VgaText::putchar(char)>:
c0009a9e:	56                   	push   esi
c0009a9f:	53                   	push   ebx
c0009aa0:	83 ec 14             	sub    esp,0x14
c0009aa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009aa7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009aab:	3c 5b                	cmp    al,0x5b
c0009aad:	75 18                	jne    c0009ac7 <VgaText::putchar(char)+0x29>
c0009aaf:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0009ab3:	74 1f                	je     c0009ad4 <VgaText::putchar(char)+0x36>
c0009ab5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0009abb:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0009ac2:	e9 bd 00 00 00       	jmp    c0009b84 <VgaText::putchar(char)+0xe6>
c0009ac7:	3c 1b                	cmp    al,0x1b
c0009ac9:	75 09                	jne    c0009ad4 <VgaText::putchar(char)+0x36>
c0009acb:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0009acf:	e9 b0 00 00 00       	jmp    c0009b84 <VgaText::putchar(char)+0xe6>
c0009ad4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0009ad7:	84 c9                	test   cl,cl
c0009ad9:	0f 84 92 00 00 00    	je     c0009b71 <VgaText::putchar(char)+0xd3>
c0009adf:	8d 50 c0             	lea    edx,[eax-0x40]
c0009ae2:	80 fa 3e             	cmp    dl,0x3e
c0009ae5:	77 76                	ja     c0009b5d <VgaText::putchar(char)+0xbf>
c0009ae7:	3c 6d                	cmp    al,0x6d
c0009ae9:	75 47                	jne    c0009b32 <VgaText::putchar(char)+0x94>
c0009aeb:	31 f6                	xor    esi,esi
c0009aed:	31 d2                	xor    edx,edx
c0009aef:	31 c0                	xor    eax,eax
c0009af1:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0009af4:	7e 2d                	jle    c0009b23 <VgaText::putchar(char)+0x85>
c0009af6:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0009afb:	80 fa 3b             	cmp    dl,0x3b
c0009afe:	75 17                	jne    c0009b17 <VgaText::putchar(char)+0x79>
c0009b00:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0009b04:	50                   	push   eax
c0009b05:	53                   	push   ebx
c0009b06:	e8 45 fb ff ff       	call   c0009650 <VgaText::doANSI_SGR(int)>
c0009b0b:	59                   	pop    ecx
c0009b0c:	31 d2                	xor    edx,edx
c0009b0e:	58                   	pop    eax
c0009b0f:	31 c0                	xor    eax,eax
c0009b11:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0009b15:	eb 09                	jmp    c0009b20 <VgaText::putchar(char)+0x82>
c0009b17:	6b c0 0a             	imul   eax,eax,0xa
c0009b1a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0009b1e:	88 ca                	mov    dl,cl
c0009b20:	46                   	inc    esi
c0009b21:	eb ce                	jmp    c0009af1 <VgaText::putchar(char)+0x53>
c0009b23:	84 d2                	test   dl,dl
c0009b25:	74 2e                	je     c0009b55 <VgaText::putchar(char)+0xb7>
c0009b27:	50                   	push   eax
c0009b28:	53                   	push   ebx
c0009b29:	e8 22 fb ff ff       	call   c0009650 <VgaText::doANSI_SGR(int)>
c0009b2e:	58                   	pop    eax
c0009b2f:	5a                   	pop    edx
c0009b30:	eb 23                	jmp    c0009b55 <VgaText::putchar(char)+0xb7>
c0009b32:	3c 4a                	cmp    al,0x4a
c0009b34:	75 1f                	jne    c0009b55 <VgaText::putchar(char)+0xb7>
c0009b36:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0009b3a:	75 19                	jne    c0009b55 <VgaText::putchar(char)+0xb7>
c0009b3c:	83 ec 0c             	sub    esp,0xc
c0009b3f:	53                   	push   ebx
c0009b40:	e8 97 fd ff ff       	call   c00098dc <VgaText::clearScreen()>
c0009b45:	83 c4 0c             	add    esp,0xc
c0009b48:	6a 00                	push   0x0
c0009b4a:	6a 00                	push   0x0
c0009b4c:	53                   	push   ebx
c0009b4d:	e8 28 fd ff ff       	call   c000987a <VgaText::setCursor(int, int)>
c0009b52:	83 c4 10             	add    esp,0x10
c0009b55:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0009b5b:	eb 27                	jmp    c0009b84 <VgaText::putchar(char)+0xe6>
c0009b5d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0009b60:	83 fa 0e             	cmp    edx,0xe
c0009b63:	7f 1f                	jg     c0009b84 <VgaText::putchar(char)+0xe6>
c0009b65:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009b68:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0009b6b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0009b6f:	eb 13                	jmp    c0009b84 <VgaText::putchar(char)+0xe6>
c0009b71:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0009b74:	0f be c0             	movsx  eax,al
c0009b77:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0009b7a:	50                   	push   eax
c0009b7b:	53                   	push   ebx
c0009b7c:	e8 4f fe ff ff       	call   c00099d0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0009b81:	83 c4 10             	add    esp,0x10
c0009b84:	83 c4 14             	add    esp,0x14
c0009b87:	5b                   	pop    ebx
c0009b88:	5e                   	pop    esi
c0009b89:	c3                   	ret    

c0009b8a <VgaText::putx(unsigned int)>:
c0009b8a:	57                   	push   edi
c0009b8b:	b9 11 00 00 00       	mov    ecx,0x11
c0009b90:	56                   	push   esi
c0009b91:	be 7a ec 01 c0       	mov    esi,0xc001ec7a
c0009b96:	53                   	push   ebx
c0009b97:	83 ec 20             	sub    esp,0x20
c0009b9a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009b9e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0009ba2:	fc                   	cld    
c0009ba3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009ba5:	be 08 00 00 00       	mov    esi,0x8
c0009baa:	50                   	push   eax
c0009bab:	50                   	push   eax
c0009bac:	89 d8                	mov    eax,ebx
c0009bae:	c1 e3 04             	shl    ebx,0x4
c0009bb1:	c1 e8 1c             	shr    eax,0x1c
c0009bb4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0009bb9:	50                   	push   eax
c0009bba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bbe:	e8 db fe ff ff       	call   c0009a9e <VgaText::putchar(char)>
c0009bc3:	83 c4 10             	add    esp,0x10
c0009bc6:	4e                   	dec    esi
c0009bc7:	75 e1                	jne    c0009baa <VgaText::putx(unsigned int)+0x20>
c0009bc9:	83 c4 20             	add    esp,0x20
c0009bcc:	5b                   	pop    ebx
c0009bcd:	5e                   	pop    esi
c0009bce:	5f                   	pop    edi
c0009bcf:	c3                   	ret    

c0009bd0 <VgaText::puts(char const*)>:
c0009bd0:	53                   	push   ebx
c0009bd1:	83 ec 08             	sub    esp,0x8
c0009bd4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009bd8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0009bdb:	84 c0                	test   al,al
c0009bdd:	74 12                	je     c0009bf1 <VgaText::puts(char const*)+0x21>
c0009bdf:	43                   	inc    ebx
c0009be0:	51                   	push   ecx
c0009be1:	51                   	push   ecx
c0009be2:	50                   	push   eax
c0009be3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009be7:	e8 b2 fe ff ff       	call   c0009a9e <VgaText::putchar(char)>
c0009bec:	83 c4 10             	add    esp,0x10
c0009bef:	eb e7                	jmp    c0009bd8 <VgaText::puts(char const*)+0x8>
c0009bf1:	83 c4 08             	add    esp,0x8
c0009bf4:	5b                   	pop    ebx
c0009bf5:	c3                   	ret    

c0009bf6 <VgaText::write(unsigned long long, void*, int*)>:
c0009bf6:	55                   	push   ebp
c0009bf7:	57                   	push   edi
c0009bf8:	56                   	push   esi
c0009bf9:	53                   	push   ebx
c0009bfa:	83 ec 0c             	sub    esp,0xc
c0009bfd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009c01:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0009c05:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009c09:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0009c10:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0009c13:	39 eb                	cmp    ebx,ebp
c0009c15:	74 13                	je     c0009c2a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0009c17:	43                   	inc    ebx
c0009c18:	50                   	push   eax
c0009c19:	50                   	push   eax
c0009c1a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0009c1e:	50                   	push   eax
c0009c1f:	56                   	push   esi
c0009c20:	e8 79 fe ff ff       	call   c0009a9e <VgaText::putchar(char)>
c0009c25:	83 c4 10             	add    esp,0x10
c0009c28:	eb e9                	jmp    c0009c13 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0009c2a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0009c31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c35:	89 38                	mov    DWORD PTR [eax],edi
c0009c37:	83 c4 0c             	add    esp,0xc
c0009c3a:	31 c0                	xor    eax,eax
c0009c3c:	5b                   	pop    ebx
c0009c3d:	5e                   	pop    esi
c0009c3e:	5f                   	pop    edi
c0009c3f:	5d                   	pop    ebp
c0009c40:	c3                   	ret    
c0009c41:	90                   	nop

c0009c42 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0009c42:	55                   	push   ebp
c0009c43:	57                   	push   edi
c0009c44:	56                   	push   esi
c0009c45:	53                   	push   ebx
c0009c46:	83 ec 0c             	sub    esp,0xc
c0009c49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009c4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0009c52:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0009c59:	50                   	push   eax
c0009c5a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0009c5f:	50                   	push   eax
c0009c60:	e8 b9 fa ff ff       	call   c000971e <VgaText::combineColours(unsigned char, unsigned char)>
c0009c65:	5a                   	pop    edx
c0009c66:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0009c6b:	59                   	pop    ecx
c0009c6c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0009c6f:	89 c5                	mov    ebp,eax
c0009c71:	0f b7 f6             	movzx  esi,si
c0009c74:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0009c78:	01 f6                	add    esi,esi
c0009c7a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009c7d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0009c80:	84 c0                	test   al,al
c0009c82:	0f 84 f4 00 00 00    	je     c0009d7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0009c88:	3c 0d                	cmp    al,0xd
c0009c8a:	75 0c                	jne    c0009c98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0009c8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c93:	e9 de 00 00 00       	jmp    c0009d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009c98:	3c 0a                	cmp    al,0xa
c0009c9a:	75 45                	jne    c0009ce1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0009c9c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009c9f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009ca6:	8d 48 01             	lea    ecx,[eax+0x1]
c0009ca9:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0009cac:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0009caf:	75 0f                	jne    c0009cc0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0009cb1:	83 ec 0c             	sub    esp,0xc
c0009cb4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0009cb7:	53                   	push   ebx
c0009cb8:	e8 73 fa ff ff       	call   c0009730 <VgaText::scrollScreen()>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	83 ec 0c             	sub    esp,0xc
c0009cc3:	53                   	push   ebx
c0009cc4:	e8 71 f9 ff ff       	call   c000963a <VgaText::updateCursor()>
c0009cc9:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0009cce:	83 c4 10             	add    esp,0x10
c0009cd1:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0009cd4:	0f b7 f6             	movzx  esi,si
c0009cd7:	01 f6                	add    esi,esi
c0009cd9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009cdc:	e9 95 00 00 00       	jmp    c0009d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009ce1:	3c 08                	cmp    al,0x8
c0009ce3:	75 35                	jne    c0009d1a <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0009ce5:	51                   	push   ecx
c0009ce6:	51                   	push   ecx
c0009ce7:	6a 01                	push   0x1
c0009ce9:	53                   	push   ebx
c0009cea:	e8 bf fc ff ff       	call   c00099ae <VgaText::decrementCursor(bool)>
c0009cef:	5e                   	pop    esi
c0009cf0:	58                   	pop    eax
c0009cf1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009cf4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009cf7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0009cfa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0009cfd:	6a 20                	push   0x20
c0009cff:	53                   	push   ebx
c0009d00:	e8 d5 fa ff ff       	call   c00097da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0009d05:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0009d0a:	83 c4 20             	add    esp,0x20
c0009d0d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0009d10:	0f b7 f6             	movzx  esi,si
c0009d13:	01 f6                	add    esi,esi
c0009d15:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009d18:	eb 5c                	jmp    c0009d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009d1a:	52                   	push   edx
c0009d1b:	52                   	push   edx
c0009d1c:	89 ea                	mov    edx,ebp
c0009d1e:	0f b6 ca             	movzx  ecx,dl
c0009d21:	51                   	push   ecx
c0009d22:	50                   	push   eax
c0009d23:	e8 a0 fa ff ff       	call   c00097c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0009d28:	83 c4 10             	add    esp,0x10
c0009d2b:	66 89 06             	mov    WORD PTR [esi],ax
c0009d2e:	39 1d 34 1d 02 c0    	cmp    DWORD PTR ds:0xc0021d34,ebx
c0009d34:	75 1d                	jne    c0009d53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0009d36:	83 ec 0c             	sub    esp,0xc
c0009d39:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009d3c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009d3f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009d43:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009d47:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0009d4a:	50                   	push   eax
c0009d4b:	e8 4c d4 00 00       	call   c001719c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0009d50:	83 c4 20             	add    esp,0x20
c0009d53:	83 c6 02             	add    esi,0x2
c0009d56:	50                   	push   eax
c0009d57:	50                   	push   eax
c0009d58:	6a 00                	push   0x0
c0009d5a:	53                   	push   ebx
c0009d5b:	e8 fa fb ff ff       	call   c000995a <VgaText::incrementCursor(bool)>
c0009d60:	83 c4 10             	add    esp,0x10
c0009d63:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0009d67:	75 0d                	jne    c0009d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009d69:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0009d6e:	0f b7 f6             	movzx  esi,si
c0009d71:	01 f6                	add    esi,esi
c0009d73:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009d76:	47                   	inc    edi
c0009d77:	e9 01 ff ff ff       	jmp    c0009c7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0009d7c:	83 ec 0c             	sub    esp,0xc
c0009d7f:	53                   	push   ebx
c0009d80:	e8 b5 f8 ff ff       	call   c000963a <VgaText::updateCursor()>
c0009d85:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0009d8c:	83 c4 1c             	add    esp,0x1c
c0009d8f:	5b                   	pop    ebx
c0009d90:	5e                   	pop    esi
c0009d91:	5f                   	pop    edi
c0009d92:	5d                   	pop    ebp
c0009d93:	c3                   	ret    

c0009d94 <VgaText::VgaText(char const*)>:
c0009d94:	56                   	push   esi
c0009d95:	53                   	push   ebx
c0009d96:	83 ec 04             	sub    esp,0x4
c0009d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9d:	83 ec 08             	sub    esp,0x8
c0009da0:	6a 00                	push   0x0
c0009da2:	50                   	push   eax
c0009da3:	e8 b2 04 00 00       	call   c000a25a <UnixFile::UnixFile(int)>
c0009da8:	83 c4 10             	add    esp,0x10
c0009dab:	ba e0 ec 01 c0       	mov    edx,0xc001ece0
c0009db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009db4:	89 10                	mov    DWORD PTR [eax],edx
c0009db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dba:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0009dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dc5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0009dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0009dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0009ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009de0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0009de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009deb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0009df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0009dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e01:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0009e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e0c:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0009e13:	83 ec 0c             	sub    esp,0xc
c0009e16:	6a 01                	push   0x1
c0009e18:	e8 80 08 00 00       	call   c000a69d <Virt::allocateKernelVirtualPages(int)>
c0009e1d:	83 c4 10             	add    esp,0x10
c0009e20:	89 c2                	mov    edx,eax
c0009e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e26:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e29:	8b 1d d0 1d 02 c0    	mov    ebx,DWORD PTR ds:0xc0021dd0
c0009e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e36:	89 c6                	mov    esi,eax
c0009e38:	e8 f1 f0 ff ff       	call   c0008f2e <Phys::allocatePage()>
c0009e3d:	68 05 0c 00 00       	push   0xc05
c0009e42:	56                   	push   esi
c0009e43:	50                   	push   eax
c0009e44:	53                   	push   ebx
c0009e45:	e8 e8 0e 00 00       	call   c000ad32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e4a:	83 c4 10             	add    esp,0x10
c0009e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e51:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e54:	83 ec 04             	sub    esp,0x4
c0009e57:	68 a0 0f 00 00       	push   0xfa0
c0009e5c:	6a 00                	push   0x0
c0009e5e:	50                   	push   eax
c0009e5f:	e8 8c 66 ff ff       	call   c00004f0 <memset>
c0009e64:	83 c4 10             	add    esp,0x10
c0009e67:	83 ec 04             	sub    esp,0x4
c0009e6a:	6a 00                	push   0x0
c0009e6c:	6a 07                	push   0x7
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	e8 6d f8 ff ff       	call   c00096e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	83 ec 04             	sub    esp,0x4
c0009e7d:	6a 00                	push   0x0
c0009e7f:	6a 00                	push   0x0
c0009e81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e85:	e8 f0 f9 ff ff       	call   c000987a <VgaText::setCursor(int, int)>
c0009e8a:	83 c4 10             	add    esp,0x10
c0009e8d:	83 ec 0c             	sub    esp,0xc
c0009e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e94:	e8 43 fa ff ff       	call   c00098dc <VgaText::clearScreen()>
c0009e99:	83 c4 10             	add    esp,0x10
c0009e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ea0:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0009ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ea8:	05 82 00 00 00       	add    eax,0x82
c0009ead:	83 ec 04             	sub    esp,0x4
c0009eb0:	6a 30                	push   0x30
c0009eb2:	6a 00                	push   0x0
c0009eb4:	50                   	push   eax
c0009eb5:	e8 36 66 ff ff       	call   c00004f0 <memset>
c0009eba:	83 c4 10             	add    esp,0x10
c0009ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ec1:	05 b2 00 00 00       	add    eax,0xb2
c0009ec6:	83 ec 04             	sub    esp,0x4
c0009ec9:	68 80 00 00 00       	push   0x80
c0009ece:	6a 00                	push   0x0
c0009ed0:	50                   	push   eax
c0009ed1:	e8 1a 66 ff ff       	call   c00004f0 <memset>
c0009ed6:	83 c4 10             	add    esp,0x10
c0009ed9:	90                   	nop
c0009eda:	83 c4 04             	add    esp,0x4
c0009edd:	5b                   	pop    ebx
c0009ede:	5e                   	pop    esi
c0009edf:	c3                   	ret    

c0009ee0 <VgaText::receiveKey(unsigned char)>:
c0009ee0:	57                   	push   edi
c0009ee1:	56                   	push   esi
c0009ee2:	53                   	push   ebx
c0009ee3:	83 ec 10             	sub    esp,0x10
c0009ee6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0009eea:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009eee:	84 db                	test   bl,bl
c0009ef0:	0f 84 ba 00 00 00    	je     c0009fb0 <VgaText::receiveKey(unsigned char)+0xd0>
c0009ef6:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0009efc:	80 fb 08             	cmp    bl,0x8
c0009eff:	75 2c                	jne    c0009f2d <VgaText::receiveKey(unsigned char)+0x4d>
c0009f01:	83 ec 0c             	sub    esp,0xc
c0009f04:	57                   	push   edi
c0009f05:	e8 56 66 ff ff       	call   c0000560 <strlen>
c0009f0a:	83 c4 10             	add    esp,0x10
c0009f0d:	85 c0                	test   eax,eax
c0009f0f:	74 41                	je     c0009f52 <VgaText::receiveKey(unsigned char)+0x72>
c0009f11:	50                   	push   eax
c0009f12:	50                   	push   eax
c0009f13:	6a 08                	push   0x8
c0009f15:	56                   	push   esi
c0009f16:	e8 83 fb ff ff       	call   c0009a9e <VgaText::putchar(char)>
c0009f1b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009f1e:	e8 3d 66 ff ff       	call   c0000560 <strlen>
c0009f23:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0009f2b:	eb 22                	jmp    c0009f4f <VgaText::receiveKey(unsigned char)+0x6f>
c0009f2d:	0f be c3             	movsx  eax,bl
c0009f30:	52                   	push   edx
c0009f31:	52                   	push   edx
c0009f32:	50                   	push   eax
c0009f33:	56                   	push   esi
c0009f34:	e8 65 fb ff ff       	call   c0009a9e <VgaText::putchar(char)>
c0009f39:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0009f3d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0009f42:	59                   	pop    ecx
c0009f43:	58                   	pop    eax
c0009f44:	8d 44 24 16          	lea    eax,[esp+0x16]
c0009f48:	50                   	push   eax
c0009f49:	57                   	push   edi
c0009f4a:	e8 91 68 ff ff       	call   c00007e0 <strcat>
c0009f4f:	83 c4 10             	add    esp,0x10
c0009f52:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0009f59:	75 05                	jne    c0009f60 <VgaText::receiveKey(unsigned char)+0x80>
c0009f5b:	80 fb 0a             	cmp    bl,0xa
c0009f5e:	75 50                	jne    c0009fb0 <VgaText::receiveKey(unsigned char)+0xd0>
c0009f60:	83 ec 0c             	sub    esp,0xc
c0009f63:	81 c6 b2 00 00 00    	add    esi,0xb2
c0009f69:	56                   	push   esi
c0009f6a:	e8 f1 65 ff ff       	call   c0000560 <strlen>
c0009f6f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009f72:	89 c3                	mov    ebx,eax
c0009f74:	e8 e7 65 ff ff       	call   c0000560 <strlen>
c0009f79:	83 c4 10             	add    esp,0x10
c0009f7c:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0009f80:	3d 80 00 00 00       	cmp    eax,0x80
c0009f85:	76 10                	jbe    c0009f97 <VgaText::receiveKey(unsigned char)+0xb7>
c0009f87:	83 ec 0c             	sub    esp,0xc
c0009f8a:	68 8b ec 01 c0       	push   0xc001ec8b
c0009f8f:	e8 ab 74 00 00       	call   c001143f <Krnl::panic(char const*)>
c0009f94:	83 c4 10             	add    esp,0x10
c0009f97:	50                   	push   eax
c0009f98:	50                   	push   eax
c0009f99:	57                   	push   edi
c0009f9a:	56                   	push   esi
c0009f9b:	e8 40 68 ff ff       	call   c00007e0 <strcat>
c0009fa0:	83 c4 0c             	add    esp,0xc
c0009fa3:	6a 30                	push   0x30
c0009fa5:	6a 00                	push   0x0
c0009fa7:	57                   	push   edi
c0009fa8:	e8 43 65 ff ff       	call   c00004f0 <memset>
c0009fad:	83 c4 10             	add    esp,0x10
c0009fb0:	83 c4 10             	add    esp,0x10
c0009fb3:	5b                   	pop    ebx
c0009fb4:	5e                   	pop    esi
c0009fb5:	5f                   	pop    edi
c0009fb6:	c3                   	ret    
c0009fb7:	90                   	nop

c0009fb8 <VgaText::doUpdate()>:
c0009fb8:	c3                   	ret    

c0009fb9 <newTerminal(char*)>:
c0009fb9:	83 ec 28             	sub    esp,0x28
c0009fbc:	68 34 01 00 00       	push   0x134
c0009fc1:	e8 9b eb ff ff       	call   c0008b61 <malloc>
c0009fc6:	5a                   	pop    edx
c0009fc7:	59                   	pop    ecx
c0009fc8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009fcc:	50                   	push   eax
c0009fcd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009fd1:	e8 be fd ff ff       	call   c0009d94 <VgaText::VgaText(char const*)>
c0009fd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009fda:	83 c4 2c             	add    esp,0x2c
c0009fdd:	c3                   	ret    
c0009fde:	66 90                	xchg   ax,ax

c0009fe0 <TSS::TSS()>:
c0009fe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009fe4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009feb:	90                   	nop
c0009fec:	c3                   	ret    
c0009fed:	90                   	nop
c0009fee:	66 90                	xchg   ax,ax

c0009ff0 <TSS::setESP(unsigned long)>:
c0009ff0:	55                   	push   ebp
c0009ff1:	89 e5                	mov    ebp,esp
c0009ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ff6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009ff9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009ffc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009fff:	90                   	nop
c000a000:	5d                   	pop    ebp
c000a001:	c3                   	ret    
c000a002:	66 90                	xchg   ax,ax

c000a004 <TSS::flush()>:
c000a004:	55                   	push   ebp
c000a005:	89 e5                	mov    ebp,esp
c000a007:	83 ec 10             	sub    esp,0x10
c000a00a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a00d:	8b 00                	mov    eax,DWORD PTR [eax]
c000a00f:	83 c8 03             	or     eax,0x3
c000a012:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000a016:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000a01a:	66 89 d0             	mov    ax,dx
c000a01d:	0f 00 d8             	ltr    ax
c000a020:	90                   	nop
c000a021:	c9                   	leave  
c000a022:	c3                   	ret    
c000a023:	90                   	nop

c000a024 <TSS::setup(unsigned long, unsigned long)>:
c000a024:	55                   	push   ebp
c000a025:	89 e5                	mov    ebp,esp
c000a027:	83 ec 18             	sub    esp,0x18
c000a02a:	83 ec 0c             	sub    esp,0xc
c000a02d:	6a 68                	push   0x68
c000a02f:	e8 2d eb ff ff       	call   c0008b61 <malloc>
c000a034:	83 c4 10             	add    esp,0x10
c000a037:	89 c2                	mov    edx,eax
c000a039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a03c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a03f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a042:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a045:	83 ec 04             	sub    esp,0x4
c000a048:	6a 68                	push   0x68
c000a04a:	6a 00                	push   0x0
c000a04c:	50                   	push   eax
c000a04d:	e8 9e 64 ff ff       	call   c00004f0 <memset>
c000a052:	83 c4 10             	add    esp,0x10
c000a055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a05b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000a061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a064:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a067:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000a06d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a070:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a073:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000a076:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a07c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a07f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000a085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a088:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a08b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000a091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a094:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a097:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000a09d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a0a3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000a0a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a0af:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000a0b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a0bb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000a0c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a0c7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000a0ca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000a0cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a0d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000a0d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a0d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a0df:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000a0e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a0ec:	0f 20 da             	mov    edx,cr3
c000a0ef:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000a0f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000a0f5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a0f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a0fe:	83 ec 08             	sub    esp,0x8
c000a101:	50                   	push   eax
c000a102:	8d 45 ec             	lea    eax,[ebp-0x14]
c000a105:	50                   	push   eax
c000a106:	e8 e1 e2 ff ff       	call   c00083ec <GDTEntry::setBase(unsigned int)>
c000a10b:	83 c4 10             	add    esp,0x10
c000a10e:	83 ec 08             	sub    esp,0x8
c000a111:	6a 68                	push   0x68
c000a113:	8d 45 ec             	lea    eax,[ebp-0x14]
c000a116:	50                   	push   eax
c000a117:	e8 ec e2 ff ff       	call   c0008408 <GDTEntry::setLimit(unsigned int)>
c000a11c:	83 c4 10             	add    esp,0x10
c000a11f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000a123:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000a126:	83 e0 0f             	and    eax,0xf
c000a129:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000a12c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000a12f:	83 c8 40             	or     eax,0x40
c000a132:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000a135:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000a13a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a140:	05 78 01 00 00       	add    eax,0x178
c000a145:	83 ec 04             	sub    esp,0x4
c000a148:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a14b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000a14e:	50                   	push   eax
c000a14f:	e8 e8 e2 ff ff       	call   c000843c <GDT::addEntry(GDTEntry)>
c000a154:	83 c4 10             	add    esp,0x10
c000a157:	89 c2                	mov    edx,eax
c000a159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a15c:	89 10                	mov    DWORD PTR [eax],edx
c000a15e:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000a163:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a169:	05 78 01 00 00       	add    eax,0x178
c000a16e:	83 ec 0c             	sub    esp,0xc
c000a171:	50                   	push   eax
c000a172:	e8 ef e2 ff ff       	call   c0008466 <GDT::flush()>
c000a177:	83 c4 10             	add    esp,0x10
c000a17a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a17d:	8b 00                	mov    eax,DWORD PTR [eax]
c000a17f:	c9                   	leave  
c000a180:	c3                   	ret    
c000a181:	90                   	nop

c000a182 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000a182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a186:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a18a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a18d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000a192:	75 08                	jne    c000a19c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000a194:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000a19a:	eb 38                	jmp    c000a1d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000a19c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000a1a1:	75 17                	jne    c000a1ba <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000a1a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a1a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a1ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000a1b1:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a1b7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000a1ba:	89 c1                	mov    ecx,eax
c000a1bc:	83 e1 fd             	and    ecx,0xfffffffd
c000a1bf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000a1c5:	74 cd                	je     c000a194 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000a1c7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000a1cc:	83 e0 ef             	and    eax,0xffffffef
c000a1cf:	83 f8 08             	cmp    eax,0x8
c000a1d2:	76 c0                	jbe    c000a194 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000a1d4:	31 c0                	xor    eax,eax
c000a1d6:	c3                   	ret    
c000a1d7:	90                   	nop

c000a1d8 <ReservedFilename::isAtty()>:
c000a1d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a1dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000a1df:	31 c0                	xor    eax,eax
c000a1e1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000a1e7:	74 09                	je     c000a1f2 <ReservedFilename::isAtty()+0x1a>
c000a1e9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000a1ef:	0f 94 c0             	sete   al
c000a1f2:	c3                   	ret    
c000a1f3:	90                   	nop

c000a1f4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000a1f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a1f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a1ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a203:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000a208:	75 08                	jne    c000a212 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000a20a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000a210:	eb 3d                	jmp    c000a24f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000a212:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000a217:	75 17                	jne    c000a230 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000a219:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a21e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a221:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000a227:	8b 10                	mov    edx,DWORD PTR [eax]
c000a229:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a22d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000a230:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000a235:	75 04                	jne    c000a23b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000a237:	89 0a                	mov    DWORD PTR [edx],ecx
c000a239:	eb 14                	jmp    c000a24f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000a23b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000a240:	74 c8                	je     c000a20a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000a242:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000a247:	83 e0 ef             	and    eax,0xffffffef
c000a24a:	83 f8 08             	cmp    eax,0x8
c000a24d:	76 bb                	jbe    c000a20a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000a24f:	31 c0                	xor    eax,eax
c000a251:	c3                   	ret    

c000a252 <UnixFile::getFileDescriptor()>:
c000a252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a256:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a259:	c3                   	ret    

c000a25a <UnixFile::UnixFile(int)>:
c000a25a:	53                   	push   ebx
c000a25b:	83 ec 28             	sub    esp,0x28
c000a25e:	ba a8 ed 01 c0       	mov    edx,0xc001eda8
c000a263:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a267:	89 10                	mov    DWORD PTR [eax],edx
c000a269:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000a271:	0f 8f 8c 01 00 00    	jg     c000a403 <UnixFile::UnixFile(int)+0x1a9>
c000a277:	a1 40 0c 02 c0       	mov    eax,ds:0xc0020c40
c000a27c:	8d 50 01             	lea    edx,[eax+0x1]
c000a27f:	89 15 40 0c 02 c0    	mov    DWORD PTR ds:0xc0020c40,edx
c000a285:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a289:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000a28c:	83 ec 08             	sub    esp,0x8
c000a28f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000a293:	68 b8 1d 02 c0       	push   0xc0021db8
c000a298:	e8 ab 35 01 00       	call   c001d848 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000a29d:	83 c4 10             	add    esp,0x10
c000a2a0:	a0 b4 1d 02 c0       	mov    al,ds:0xc0021db4
c000a2a5:	83 f0 01             	xor    eax,0x1
c000a2a8:	84 c0                	test   al,al
c000a2aa:	0f 84 54 01 00 00    	je     c000a404 <UnixFile::UnixFile(int)+0x1aa>
c000a2b0:	c6 05 b4 1d 02 c0 01 	mov    BYTE PTR ds:0xc0021db4,0x1
c000a2b7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000a2bf:	83 ec 0c             	sub    esp,0xc
c000a2c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2c6:	e8 96 e8 ff ff       	call   c0008b61 <malloc>
c000a2cb:	83 c4 10             	add    esp,0x10
c000a2ce:	89 c3                	mov    ebx,eax
c000a2d0:	83 ec 08             	sub    esp,0x8
c000a2d3:	68 03 ff ff 0f       	push   0xfffff03
c000a2d8:	53                   	push   ebx
c000a2d9:	e8 2c 01 00 00       	call   c000a40a <ReservedFilename::ReservedFilename(int)>
c000a2de:	83 c4 10             	add    esp,0x10
c000a2e1:	89 1d ac 1d 02 c0    	mov    DWORD PTR ds:0xc0021dac,ebx
c000a2e7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000a2ef:	83 ec 0c             	sub    esp,0xc
c000a2f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f6:	e8 66 e8 ff ff       	call   c0008b61 <malloc>
c000a2fb:	83 c4 10             	add    esp,0x10
c000a2fe:	89 c3                	mov    ebx,eax
c000a300:	83 ec 08             	sub    esp,0x8
c000a303:	68 01 ff ff 0f       	push   0xfffff01
c000a308:	53                   	push   ebx
c000a309:	e8 fc 00 00 00       	call   c000a40a <ReservedFilename::ReservedFilename(int)>
c000a30e:	83 c4 10             	add    esp,0x10
c000a311:	89 1d b0 1d 02 c0    	mov    DWORD PTR ds:0xc0021db0,ebx
c000a317:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000a31f:	83 ec 0c             	sub    esp,0xc
c000a322:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a326:	e8 36 e8 ff ff       	call   c0008b61 <malloc>
c000a32b:	83 c4 10             	add    esp,0x10
c000a32e:	89 c3                	mov    ebx,eax
c000a330:	83 ec 08             	sub    esp,0x8
c000a333:	68 00 ff ff 0f       	push   0xfffff00
c000a338:	53                   	push   ebx
c000a339:	e8 cc 00 00 00       	call   c000a40a <ReservedFilename::ReservedFilename(int)>
c000a33e:	83 c4 10             	add    esp,0x10
c000a341:	89 1d a4 1d 02 c0    	mov    DWORD PTR ds:0xc0021da4,ebx
c000a347:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000a34f:	83 ec 0c             	sub    esp,0xc
c000a352:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a356:	e8 06 e8 ff ff       	call   c0008b61 <malloc>
c000a35b:	83 c4 10             	add    esp,0x10
c000a35e:	89 c3                	mov    ebx,eax
c000a360:	83 ec 08             	sub    esp,0x8
c000a363:	68 02 ff ff 0f       	push   0xfffff02
c000a368:	53                   	push   ebx
c000a369:	e8 9c 00 00 00       	call   c000a40a <ReservedFilename::ReservedFilename(int)>
c000a36e:	83 c4 10             	add    esp,0x10
c000a371:	89 1d a8 1d 02 c0    	mov    DWORD PTR ds:0xc0021da8,ebx
c000a377:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a37f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000a384:	7f 7e                	jg     c000a404 <UnixFile::UnixFile(int)+0x1aa>
c000a386:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000a38e:	83 ec 0c             	sub    esp,0xc
c000a391:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a395:	e8 c7 e7 ff ff       	call   c0008b61 <malloc>
c000a39a:	83 c4 10             	add    esp,0x10
c000a39d:	89 c3                	mov    ebx,eax
c000a39f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3a3:	05 10 ff ff 0f       	add    eax,0xfffff10
c000a3a8:	83 ec 08             	sub    esp,0x8
c000a3ab:	50                   	push   eax
c000a3ac:	53                   	push   ebx
c000a3ad:	e8 58 00 00 00       	call   c000a40a <ReservedFilename::ReservedFilename(int)>
c000a3b2:	83 c4 10             	add    esp,0x10
c000a3b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3b9:	89 1c 85 80 1d 02 c0 	mov    DWORD PTR [eax*4-0x3ffde280],ebx
c000a3c0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000a3c8:	83 ec 0c             	sub    esp,0xc
c000a3cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3cf:	e8 8d e7 ff ff       	call   c0008b61 <malloc>
c000a3d4:	83 c4 10             	add    esp,0x10
c000a3d7:	89 c3                	mov    ebx,eax
c000a3d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3dd:	05 20 ff ff 0f       	add    eax,0xfffff20
c000a3e2:	83 ec 08             	sub    esp,0x8
c000a3e5:	50                   	push   eax
c000a3e6:	53                   	push   ebx
c000a3e7:	e8 1e 00 00 00       	call   c000a40a <ReservedFilename::ReservedFilename(int)>
c000a3ec:	83 c4 10             	add    esp,0x10
c000a3ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3f3:	89 1c 85 40 1d 02 c0 	mov    DWORD PTR [eax*4-0x3ffde2c0],ebx
c000a3fa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a3fe:	e9 7c ff ff ff       	jmp    c000a37f <UnixFile::UnixFile(int)+0x125>
c000a403:	90                   	nop
c000a404:	83 c4 28             	add    esp,0x28
c000a407:	5b                   	pop    ebx
c000a408:	c3                   	ret    
c000a409:	90                   	nop

c000a40a <ReservedFilename::ReservedFilename(int)>:
c000a40a:	83 ec 0c             	sub    esp,0xc
c000a40d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a411:	83 ec 08             	sub    esp,0x8
c000a414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a418:	50                   	push   eax
c000a419:	e8 3c fe ff ff       	call   c000a25a <UnixFile::UnixFile(int)>
c000a41e:	83 c4 10             	add    esp,0x10
c000a421:	ba c4 ed 01 c0       	mov    edx,0xc001edc4
c000a426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a42a:	89 10                	mov    DWORD PTR [eax],edx
c000a42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a430:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a434:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a437:	90                   	nop
c000a438:	83 c4 0c             	add    esp,0xc
c000a43b:	c3                   	ret    

c000a43c <UnixFile::~UnixFile()>:
c000a43c:	83 ec 1c             	sub    esp,0x1c
c000a43f:	ba a8 ed 01 c0       	mov    edx,0xc001eda8
c000a444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a448:	89 10                	mov    DWORD PTR [eax],edx
c000a44a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a44e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a451:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000a456:	7f 73                	jg     c000a4cb <UnixFile::~UnixFile()+0x8f>
c000a458:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a460:	83 ec 0c             	sub    esp,0xc
c000a463:	68 b8 1d 02 c0       	push   0xc0021db8
c000a468:	e8 af 34 01 00       	call   c001d91c <LinkedList<UnixFile>::getFirstElement()>
c000a46d:	83 c4 10             	add    esp,0x10
c000a470:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a474:	83 ec 0c             	sub    esp,0xc
c000a477:	68 b8 1d 02 c0       	push   0xc0021db8
c000a47c:	e8 a3 34 01 00       	call   c001d924 <LinkedList<UnixFile>::removeFirst()>
c000a481:	83 c4 10             	add    esp,0x10
c000a484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a488:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a48c:	74 40                	je     c000a4ce <UnixFile::~UnixFile()+0x92>
c000a48e:	83 ec 08             	sub    esp,0x8
c000a491:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a495:	68 b8 1d 02 c0       	push   0xc0021db8
c000a49a:	e8 a9 33 01 00       	call   c001d848 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000a49f:	83 c4 10             	add    esp,0x10
c000a4a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4a6:	8d 50 01             	lea    edx,[eax+0x1]
c000a4a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4ad:	3d 88 13 00 00       	cmp    eax,0x1388
c000a4b2:	0f 94 c0             	sete   al
c000a4b5:	84 c0                	test   al,al
c000a4b7:	74 a7                	je     c000a460 <UnixFile::~UnixFile()+0x24>
c000a4b9:	83 ec 0c             	sub    esp,0xc
c000a4bc:	68 80 ed 01 c0       	push   0xc001ed80
c000a4c1:	e8 79 6f 00 00       	call   c001143f <Krnl::panic(char const*)>
c000a4c6:	83 c4 10             	add    esp,0x10
c000a4c9:	eb 95                	jmp    c000a460 <UnixFile::~UnixFile()+0x24>
c000a4cb:	90                   	nop
c000a4cc:	eb 01                	jmp    c000a4cf <UnixFile::~UnixFile()+0x93>
c000a4ce:	90                   	nop
c000a4cf:	90                   	nop
c000a4d0:	83 c4 1c             	add    esp,0x1c
c000a4d3:	c3                   	ret    

c000a4d4 <UnixFile::~UnixFile()>:
c000a4d4:	83 ec 0c             	sub    esp,0xc
c000a4d7:	83 ec 0c             	sub    esp,0xc
c000a4da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4de:	e8 59 ff ff ff       	call   c000a43c <UnixFile::~UnixFile()>
c000a4e3:	83 c4 10             	add    esp,0x10
c000a4e6:	83 ec 08             	sub    esp,0x8
c000a4e9:	6a 0c                	push   0xc
c000a4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ef:	e8 06 13 00 00       	call   c000b7fa <operator delete(void*, unsigned long)>
c000a4f4:	83 c4 10             	add    esp,0x10
c000a4f7:	83 c4 0c             	add    esp,0xc
c000a4fa:	c3                   	ret    
c000a4fb:	90                   	nop

c000a4fc <ReservedFilename::~ReservedFilename()>:
c000a4fc:	83 ec 0c             	sub    esp,0xc
c000a4ff:	ba c4 ed 01 c0       	mov    edx,0xc001edc4
c000a504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a508:	89 10                	mov    DWORD PTR [eax],edx
c000a50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a50e:	83 ec 0c             	sub    esp,0xc
c000a511:	50                   	push   eax
c000a512:	e8 25 ff ff ff       	call   c000a43c <UnixFile::~UnixFile()>
c000a517:	83 c4 10             	add    esp,0x10
c000a51a:	90                   	nop
c000a51b:	83 c4 0c             	add    esp,0xc
c000a51e:	c3                   	ret    
c000a51f:	90                   	nop

c000a520 <ReservedFilename::~ReservedFilename()>:
c000a520:	83 ec 0c             	sub    esp,0xc
c000a523:	83 ec 0c             	sub    esp,0xc
c000a526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a52a:	e8 cd ff ff ff       	call   c000a4fc <ReservedFilename::~ReservedFilename()>
c000a52f:	83 c4 10             	add    esp,0x10
c000a532:	83 ec 08             	sub    esp,0x8
c000a535:	6a 0c                	push   0xc
c000a537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a53b:	e8 ba 12 00 00       	call   c000b7fa <operator delete(void*, unsigned long)>
c000a540:	83 c4 10             	add    esp,0x10
c000a543:	83 c4 0c             	add    esp,0xc
c000a546:	c3                   	ret    

c000a547 <getFromFileDescriptor(int)>:
c000a547:	53                   	push   ebx
c000a548:	83 ec 08             	sub    esp,0x8
c000a54b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a54f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000a555:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000a55b:	7f 2c                	jg     c000a589 <getFromFileDescriptor(int)+0x42>
c000a55d:	83 ec 0c             	sub    esp,0xc
c000a560:	68 b8 1d 02 c0       	push   0xc0021db8
c000a565:	e8 b2 33 01 00       	call   c001d91c <LinkedList<UnixFile>::getFirstElement()>
c000a56a:	83 c4 10             	add    esp,0x10
c000a56d:	85 c0                	test   eax,eax
c000a56f:	75 04                	jne    c000a575 <getFromFileDescriptor(int)+0x2e>
c000a571:	31 c0                	xor    eax,eax
c000a573:	eb 6e                	jmp    c000a5e3 <getFromFileDescriptor(int)+0x9c>
c000a575:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000a578:	74 69                	je     c000a5e3 <getFromFileDescriptor(int)+0x9c>
c000a57a:	52                   	push   edx
c000a57b:	52                   	push   edx
c000a57c:	50                   	push   eax
c000a57d:	68 b8 1d 02 c0       	push   0xc0021db8
c000a582:	e8 3f 34 01 00       	call   c001d9c6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000a587:	eb e1                	jmp    c000a56a <getFromFileDescriptor(int)+0x23>
c000a589:	a1 ac 1d 02 c0       	mov    eax,ds:0xc0021dac
c000a58e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000a594:	74 4d                	je     c000a5e3 <getFromFileDescriptor(int)+0x9c>
c000a596:	a1 b0 1d 02 c0       	mov    eax,ds:0xc0021db0
c000a59b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000a5a1:	74 40                	je     c000a5e3 <getFromFileDescriptor(int)+0x9c>
c000a5a3:	a1 a8 1d 02 c0       	mov    eax,ds:0xc0021da8
c000a5a8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000a5ae:	74 33                	je     c000a5e3 <getFromFileDescriptor(int)+0x9c>
c000a5b0:	a1 a4 1d 02 c0       	mov    eax,ds:0xc0021da4
c000a5b5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000a5bb:	74 26                	je     c000a5e3 <getFromFileDescriptor(int)+0x9c>
c000a5bd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000a5c3:	83 f8 08             	cmp    eax,0x8
c000a5c6:	77 09                	ja     c000a5d1 <getFromFileDescriptor(int)+0x8a>
c000a5c8:	8b 04 85 80 1d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde280]
c000a5cf:	eb 12                	jmp    c000a5e3 <getFromFileDescriptor(int)+0x9c>
c000a5d1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000a5d7:	83 fb 08             	cmp    ebx,0x8
c000a5da:	77 95                	ja     c000a571 <getFromFileDescriptor(int)+0x2a>
c000a5dc:	8b 04 9d 40 1d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde2c0]
c000a5e3:	83 c4 08             	add    esp,0x8
c000a5e6:	5b                   	pop    ebx
c000a5e7:	c3                   	ret    

c000a5e8 <__static_initialization_and_destruction_0(int, int)>:
c000a5e8:	83 ec 0c             	sub    esp,0xc
c000a5eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000a5f0:	75 34                	jne    c000a626 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000a5f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000a5fa:	75 2a                	jne    c000a626 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000a5fc:	83 ec 0c             	sub    esp,0xc
c000a5ff:	68 b8 1d 02 c0       	push   0xc0021db8
c000a604:	e8 fd 31 01 00       	call   c001d806 <LinkedList<UnixFile>::LinkedList()>
c000a609:	83 c4 10             	add    esp,0x10
c000a60c:	83 ec 04             	sub    esp,0x4
c000a60f:	68 70 0a 02 c0       	push   0xc0020a70
c000a614:	68 b8 1d 02 c0       	push   0xc0021db8
c000a619:	68 04 d8 01 c0       	push   0xc001d804
c000a61e:	e8 87 11 00 00       	call   c000b7aa <__cxa_atexit>
c000a623:	83 c4 10             	add    esp,0x10
c000a626:	90                   	nop
c000a627:	83 c4 0c             	add    esp,0xc
c000a62a:	c3                   	ret    

c000a62b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000a62b:	83 ec 0c             	sub    esp,0xc
c000a62e:	83 ec 08             	sub    esp,0x8
c000a631:	68 ff ff 00 00       	push   0xffff
c000a636:	6a 01                	push   0x1
c000a638:	e8 ab ff ff ff       	call   c000a5e8 <__static_initialization_and_destruction_0(int, int)>
c000a63d:	83 c4 10             	add    esp,0x10
c000a640:	83 c4 0c             	add    esp,0xc
c000a643:	c3                   	ret    

c000a644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000a644:	53                   	push   ebx
c000a645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a649:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a64d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000a653:	89 c8                	mov    eax,ecx
c000a655:	d1 e8                	shr    eax,1
c000a657:	03 05 48 0c 02 c0    	add    eax,DWORD PTR ds:0xc0020c48
c000a65d:	83 e1 01             	and    ecx,0x1
c000a660:	8a 10                	mov    dl,BYTE PTR [eax]
c000a662:	75 09                	jne    c000a66d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000a664:	83 e2 f0             	and    edx,0xfffffff0
c000a667:	09 da                	or     edx,ebx
c000a669:	88 10                	mov    BYTE PTR [eax],dl
c000a66b:	5b                   	pop    ebx
c000a66c:	c3                   	ret    
c000a66d:	c1 e3 04             	shl    ebx,0x4
c000a670:	83 e2 0f             	and    edx,0xf
c000a673:	09 da                	or     edx,ebx
c000a675:	88 10                	mov    BYTE PTR [eax],dl
c000a677:	5b                   	pop    ebx
c000a678:	c3                   	ret    

c000a679 <Virt::getPageState(unsigned long)>:
c000a679:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a67d:	8b 0d 48 0c 02 c0    	mov    ecx,DWORD PTR ds:0xc0020c48
c000a683:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000a689:	89 d0                	mov    eax,edx
c000a68b:	d1 e8                	shr    eax,1
c000a68d:	83 e2 01             	and    edx,0x1
c000a690:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000a693:	75 04                	jne    c000a699 <Virt::getPageState(unsigned long)+0x20>
c000a695:	83 e0 0f             	and    eax,0xf
c000a698:	c3                   	ret    
c000a699:	c0 e8 04             	shr    al,0x4
c000a69c:	c3                   	ret    

c000a69d <Virt::allocateKernelVirtualPages(int)>:
c000a69d:	55                   	push   ebp
c000a69e:	31 ed                	xor    ebp,ebp
c000a6a0:	57                   	push   edi
c000a6a1:	56                   	push   esi
c000a6a2:	53                   	push   ebx
c000a6a3:	31 db                	xor    ebx,ebx
c000a6a5:	83 ec 1c             	sub    esp,0x1c
c000a6a8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000a6ac:	8b 3d 44 0c 02 c0    	mov    edi,DWORD PTR ds:0xc0020c44
c000a6b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000a6b7:	57                   	push   edi
c000a6b8:	e8 bc ff ff ff       	call   c000a679 <Virt::getPageState(unsigned long)>
c000a6bd:	5a                   	pop    edx
c000a6be:	84 c0                	test   al,al
c000a6c0:	75 3a                	jne    c000a6fc <Virt::allocateKernelVirtualPages(int)+0x5f>
c000a6c2:	85 db                	test   ebx,ebx
c000a6c4:	75 02                	jne    c000a6c8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000a6c6:	89 fd                	mov    ebp,edi
c000a6c8:	43                   	inc    ebx
c000a6c9:	39 f3                	cmp    ebx,esi
c000a6cb:	74 5a                	je     c000a727 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000a6cd:	47                   	inc    edi
c000a6ce:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000a6d4:	76 31                	jbe    c000a707 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000a6d6:	c7 05 44 0c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0020c44,0xc8000
c000a6e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000a6e5:	75 28                	jne    c000a70f <Virt::allocateKernelVirtualPages(int)+0x72>
c000a6e7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000a6ec:	bf 00 80 0c 00       	mov    edi,0xc8000
c000a6f1:	57                   	push   edi
c000a6f2:	e8 82 ff ff ff       	call   c000a679 <Virt::getPageState(unsigned long)>
c000a6f7:	5a                   	pop    edx
c000a6f8:	84 c0                	test   al,al
c000a6fa:	74 c6                	je     c000a6c2 <Virt::allocateKernelVirtualPages(int)+0x25>
c000a6fc:	31 db                	xor    ebx,ebx
c000a6fe:	47                   	inc    edi
c000a6ff:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000a705:	77 cf                	ja     c000a6d6 <Virt::allocateKernelVirtualPages(int)+0x39>
c000a707:	89 3d 44 0c 02 c0    	mov    DWORD PTR ds:0xc0020c44,edi
c000a70d:	eb a8                	jmp    c000a6b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000a70f:	83 ec 0c             	sub    esp,0xc
c000a712:	68 d8 ed 01 c0       	push   0xc001edd8
c000a717:	e8 23 6d 00 00       	call   c001143f <Krnl::panic(char const*)>
c000a71c:	8b 3d 44 0c 02 c0    	mov    edi,DWORD PTR ds:0xc0020c44
c000a722:	83 c4 10             	add    esp,0x10
c000a725:	eb 90                	jmp    c000a6b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000a727:	89 2d 44 0c 02 c0    	mov    DWORD PTR ds:0xc0020c44,ebp
c000a72d:	4b                   	dec    ebx
c000a72e:	74 5f                	je     c000a78f <Virt::allocateKernelVirtualPages(int)+0xf2>
c000a730:	85 f6                	test   esi,esi
c000a732:	74 3d                	je     c000a771 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000a734:	89 e8                	mov    eax,ebp
c000a736:	31 db                	xor    ebx,ebx
c000a738:	8d 7e ff             	lea    edi,[esi-0x1]
c000a73b:	eb 14                	jmp    c000a751 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000a73d:	6a 01                	push   0x1
c000a73f:	43                   	inc    ebx
c000a740:	50                   	push   eax
c000a741:	e8 fe fe ff ff       	call   c000a644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000a746:	58                   	pop    eax
c000a747:	39 f3                	cmp    ebx,esi
c000a749:	5a                   	pop    edx
c000a74a:	74 25                	je     c000a771 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000a74c:	a1 44 0c 02 c0       	mov    eax,ds:0xc0020c44
c000a751:	8d 50 01             	lea    edx,[eax+0x1]
c000a754:	85 db                	test   ebx,ebx
c000a756:	89 15 44 0c 02 c0    	mov    DWORD PTR ds:0xc0020c44,edx
c000a75c:	74 20                	je     c000a77e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000a75e:	39 df                	cmp    edi,ebx
c000a760:	75 db                	jne    c000a73d <Virt::allocateKernelVirtualPages(int)+0xa0>
c000a762:	6a 03                	push   0x3
c000a764:	43                   	inc    ebx
c000a765:	50                   	push   eax
c000a766:	e8 d9 fe ff ff       	call   c000a644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000a76b:	59                   	pop    ecx
c000a76c:	39 f3                	cmp    ebx,esi
c000a76e:	58                   	pop    eax
c000a76f:	75 db                	jne    c000a74c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000a771:	83 c4 1c             	add    esp,0x1c
c000a774:	89 e8                	mov    eax,ebp
c000a776:	5b                   	pop    ebx
c000a777:	c1 e0 0c             	shl    eax,0xc
c000a77a:	5e                   	pop    esi
c000a77b:	5f                   	pop    edi
c000a77c:	5d                   	pop    ebp
c000a77d:	c3                   	ret    
c000a77e:	6a 02                	push   0x2
c000a780:	bb 01 00 00 00       	mov    ebx,0x1
c000a785:	50                   	push   eax
c000a786:	e8 b9 fe ff ff       	call   c000a644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000a78b:	58                   	pop    eax
c000a78c:	5a                   	pop    edx
c000a78d:	eb bd                	jmp    c000a74c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000a78f:	6a 04                	push   0x4
c000a791:	8d 45 01             	lea    eax,[ebp+0x1]
c000a794:	55                   	push   ebp
c000a795:	a3 44 0c 02 c0       	mov    ds:0xc0020c44,eax
c000a79a:	e8 a5 fe ff ff       	call   c000a644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000a79f:	59                   	pop    ecx
c000a7a0:	89 e8                	mov    eax,ebp
c000a7a2:	5b                   	pop    ebx
c000a7a3:	c1 e0 0c             	shl    eax,0xc
c000a7a6:	83 c4 1c             	add    esp,0x1c
c000a7a9:	5b                   	pop    ebx
c000a7aa:	5e                   	pop    esi
c000a7ab:	5f                   	pop    edi
c000a7ac:	5d                   	pop    ebp
c000a7ad:	c3                   	ret    

c000a7ae <Virt::freeSwapfilePage(unsigned long)>:
c000a7ae:	53                   	push   ebx
c000a7af:	8b 15 cc 1d 02 c0    	mov    edx,DWORD PTR ds:0xc0021dcc
c000a7b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a7b9:	b8 01 00 00 00       	mov    eax,0x1
c000a7be:	89 cb                	mov    ebx,ecx
c000a7c0:	d3 e0                	shl    eax,cl
c000a7c2:	c1 eb 05             	shr    ebx,0x5
c000a7c5:	f7 d0                	not    eax
c000a7c7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000a7ca:	5b                   	pop    ebx
c000a7cb:	c3                   	ret    

c000a7cc <Virt::swapIDToSector(unsigned long)>:
c000a7cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7d0:	0f af 05 4c 0c 02 c0 	imul   eax,DWORD PTR ds:0xc0020c4c
c000a7d7:	03 05 54 0c 02 c0    	add    eax,DWORD PTR ds:0xc0020c54
c000a7dd:	c3                   	ret    

c000a7de <Virt::allocateSwapfilePage()>:
c000a7de:	55                   	push   ebp
c000a7df:	31 d2                	xor    edx,edx
c000a7e1:	57                   	push   edi
c000a7e2:	56                   	push   esi
c000a7e3:	53                   	push   ebx
c000a7e4:	83 ec 0c             	sub    esp,0xc
c000a7e7:	8b 0d 4c 0c 02 c0    	mov    ecx,DWORD PTR ds:0xc0020c4c
c000a7ed:	a1 50 0c 02 c0       	mov    eax,ds:0xc0020c50
c000a7f2:	f7 f1                	div    ecx
c000a7f4:	39 0d 50 0c 02 c0    	cmp    DWORD PTR ds:0xc0020c50,ecx
c000a7fa:	72 2d                	jb     c000a829 <Virt::allocateSwapfilePage()+0x4b>
c000a7fc:	8b 35 cc 1d 02 c0    	mov    esi,DWORD PTR ds:0xc0021dcc
c000a802:	8b 16                	mov    edx,DWORD PTR [esi]
c000a804:	f6 c2 01             	test   dl,0x1
c000a807:	74 3c                	je     c000a845 <Virt::allocateSwapfilePage()+0x67>
c000a809:	31 c9                	xor    ecx,ecx
c000a80b:	bf 01 00 00 00       	mov    edi,0x1
c000a810:	eb 12                	jmp    c000a824 <Virt::allocateSwapfilePage()+0x46>
c000a812:	89 fd                	mov    ebp,edi
c000a814:	89 ca                	mov    edx,ecx
c000a816:	d3 e5                	shl    ebp,cl
c000a818:	c1 ea 05             	shr    edx,0x5
c000a81b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000a81e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a820:	85 ea                	test   edx,ebp
c000a822:	74 2a                	je     c000a84e <Virt::allocateSwapfilePage()+0x70>
c000a824:	41                   	inc    ecx
c000a825:	39 c8                	cmp    eax,ecx
c000a827:	77 e9                	ja     c000a812 <Virt::allocateSwapfilePage()+0x34>
c000a829:	83 ec 0c             	sub    esp,0xc
c000a82c:	68 3f ef 01 c0       	push   0xc001ef3f
c000a831:	e8 09 6c 00 00       	call   c001143f <Krnl::panic(char const*)>
c000a836:	83 c4 10             	add    esp,0x10
c000a839:	31 c9                	xor    ecx,ecx
c000a83b:	83 c4 0c             	add    esp,0xc
c000a83e:	89 c8                	mov    eax,ecx
c000a840:	5b                   	pop    ebx
c000a841:	5e                   	pop    esi
c000a842:	5f                   	pop    edi
c000a843:	5d                   	pop    ebp
c000a844:	c3                   	ret    
c000a845:	89 f3                	mov    ebx,esi
c000a847:	bd 01 00 00 00       	mov    ebp,0x1
c000a84c:	31 c9                	xor    ecx,ecx
c000a84e:	09 ea                	or     edx,ebp
c000a850:	89 c8                	mov    eax,ecx
c000a852:	89 13                	mov    DWORD PTR [ebx],edx
c000a854:	83 c4 0c             	add    esp,0xc
c000a857:	5b                   	pop    ebx
c000a858:	5e                   	pop    esi
c000a859:	5f                   	pop    edi
c000a85a:	5d                   	pop    ebp
c000a85b:	c3                   	ret    

c000a85c <Virt::virtualMemorySetup()>:
c000a85c:	53                   	push   ebx
c000a85d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000a862:	6a 0f                	push   0xf
c000a864:	53                   	push   ebx
c000a865:	43                   	inc    ebx
c000a866:	e8 d9 fd ff ff       	call   c000a644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000a86b:	58                   	pop    eax
c000a86c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000a872:	5a                   	pop    edx
c000a873:	75 ed                	jne    c000a862 <Virt::virtualMemorySetup()+0x6>
c000a875:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000a87a:	6a 00                	push   0x0
c000a87c:	53                   	push   ebx
c000a87d:	43                   	inc    ebx
c000a87e:	e8 c1 fd ff ff       	call   c000a644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000a883:	59                   	pop    ecx
c000a884:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000a88a:	58                   	pop    eax
c000a88b:	75 ed                	jne    c000a87a <Virt::virtualMemorySetup()+0x1e>
c000a88d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000a892:	6a 0f                	push   0xf
c000a894:	53                   	push   ebx
c000a895:	43                   	inc    ebx
c000a896:	e8 a9 fd ff ff       	call   c000a644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000a89b:	58                   	pop    eax
c000a89c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000a8a2:	5a                   	pop    edx
c000a8a3:	75 ed                	jne    c000a892 <Virt::virtualMemorySetup()+0x36>
c000a8a5:	5b                   	pop    ebx
c000a8a6:	c3                   	ret    

c000a8a7 <Virt::setupPageSwapping(int)>:
c000a8a7:	53                   	push   ebx
c000a8a8:	83 ec 0c             	sub    esp,0xc
c000a8ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a8af:	a1 48 42 02 c0       	mov    eax,ds:0xc0024248
c000a8b4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a8ba:	8b 10                	mov    edx,DWORD PTR [eax]
c000a8bc:	53                   	push   ebx
c000a8bd:	c1 e3 0b             	shl    ebx,0xb
c000a8c0:	68 56 ef 01 c0       	push   0xc001ef56
c000a8c5:	50                   	push   eax
c000a8c6:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000a8c9:	89 1d 50 0c 02 c0    	mov    DWORD PTR ds:0xc0020c50,ebx
c000a8cf:	c6 05 58 0c 02 c0 43 	mov    BYTE PTR ds:0xc0020c58,0x43
c000a8d6:	c1 eb 08             	shr    ebx,0x8
c000a8d9:	a3 54 0c 02 c0       	mov    ds:0xc0020c54,eax
c000a8de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a8e1:	c7 05 4c 0c 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0020c4c,0x8
c000a8eb:	e8 71 e2 ff ff       	call   c0008b61 <malloc>
c000a8f0:	83 c4 0c             	add    esp,0xc
c000a8f3:	89 c1                	mov    ecx,eax
c000a8f5:	a3 cc 1d 02 c0       	mov    ds:0xc0021dcc,eax
c000a8fa:	31 d2                	xor    edx,edx
c000a8fc:	a1 50 0c 02 c0       	mov    eax,ds:0xc0020c50
c000a901:	f7 35 4c 0c 02 c0    	div    DWORD PTR ds:0xc0020c4c
c000a907:	c1 e8 05             	shr    eax,0x5
c000a90a:	50                   	push   eax
c000a90b:	6a 00                	push   0x0
c000a90d:	51                   	push   ecx
c000a90e:	e8 dd 5b ff ff       	call   c00004f0 <memset>
c000a913:	83 c4 18             	add    esp,0x18
c000a916:	5b                   	pop    ebx
c000a917:	c3                   	ret    

c000a918 <VAS::VAS()>:
c000a918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a91c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a923:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a927:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a92e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a932:	a3 d0 1d 02 c0       	mov    ds:0xc0021dd0,eax
c000a937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a93b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000a93f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a943:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000a946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a94a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000a951:	90                   	nop
c000a952:	c3                   	ret    
c000a953:	90                   	nop

c000a954 <VAS::VAS(VAS*)>:
c000a954:	83 ec 0c             	sub    esp,0xc
c000a957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a95b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a966:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a96d:	83 ec 0c             	sub    esp,0xc
c000a970:	68 f8 ed 01 c0       	push   0xc001edf8
c000a975:	e8 c5 6a 00 00       	call   c001143f <Krnl::panic(char const*)>
c000a97a:	83 c4 10             	add    esp,0x10
c000a97d:	90                   	nop
c000a97e:	83 c4 0c             	add    esp,0xc
c000a981:	c3                   	ret    

c000a982 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000a982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a986:	89 c2                	mov    edx,eax
c000a988:	c1 e8 0a             	shr    eax,0xa
c000a98b:	c1 ea 16             	shr    edx,0x16
c000a98e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000a993:	19 c9                	sbb    ecx,ecx
c000a995:	c1 e2 0c             	shl    edx,0xc
c000a998:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000a99e:	25 fc 0f 00 00       	and    eax,0xffc
c000a9a3:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000a9aa:	01 d0                	add    eax,edx
c000a9ac:	c3                   	ret    
c000a9ad:	90                   	nop

c000a9ae <VAS::getPageTableEntry(unsigned long)>:
c000a9ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a9b2:	89 ca                	mov    edx,ecx
c000a9b4:	c1 e9 0a             	shr    ecx,0xa
c000a9b7:	c1 ea 16             	shr    edx,0x16
c000a9ba:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000a9c0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000a9c6:	c1 e0 0c             	shl    eax,0xc
c000a9c9:	8d 04 08             	lea    eax,[eax+ecx*1]
c000a9cc:	c3                   	ret    

c000a9cd <Virt::freeKernelVirtualPages(unsigned long)>:
c000a9cd:	57                   	push   edi
c000a9ce:	56                   	push   esi
c000a9cf:	be 01 00 00 00       	mov    esi,0x1
c000a9d4:	53                   	push   ebx
c000a9d5:	83 ec 10             	sub    esp,0x10
c000a9d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9dc:	c1 eb 0c             	shr    ebx,0xc
c000a9df:	eb 3f                	jmp    c000aa20 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000a9e1:	83 ec 08             	sub    esp,0x8
c000a9e4:	a1 d0 1d 02 c0       	mov    eax,ds:0xc0021dd0
c000a9e9:	57                   	push   edi
c000a9ea:	50                   	push   eax
c000a9eb:	e8 be ff ff ff       	call   c000a9ae <VAS::getPageTableEntry(unsigned long)>
c000a9f0:	83 c4 10             	add    esp,0x10
c000a9f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000a9f9:	f6 c4 04             	test   ah,0x4
c000a9fc:	75 60                	jne    c000aa5e <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c000a9fe:	80 fa 04             	cmp    dl,0x4
c000aa01:	74 79                	je     c000aa7c <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c000aa03:	80 fa 02             	cmp    dl,0x2
c000aa06:	0f 84 89 00 00 00    	je     c000aa95 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c000aa0c:	80 fa 03             	cmp    dl,0x3
c000aa0f:	0f 84 ae 00 00 00    	je     c000aac3 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c000aa15:	fe ca                	dec    dl
c000aa17:	0f 84 93 00 00 00    	je     c000aab0 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000aa1d:	43                   	inc    ebx
c000aa1e:	31 f6                	xor    esi,esi
c000aa20:	53                   	push   ebx
c000aa21:	89 df                	mov    edi,ebx
c000aa23:	e8 51 fc ff ff       	call   c000a679 <Virt::getPageState(unsigned long)>
c000aa28:	c1 e7 0c             	shl    edi,0xc
c000aa2b:	5a                   	pop    edx
c000aa2c:	84 c0                	test   al,al
c000aa2e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000aa32:	75 ad                	jne    c000a9e1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000aa34:	83 ec 0c             	sub    esp,0xc
c000aa37:	68 6d ef 01 c0       	push   0xc001ef6d
c000aa3c:	e8 fe 69 00 00       	call   c001143f <Krnl::panic(char const*)>
c000aa41:	5a                   	pop    edx
c000aa42:	59                   	pop    ecx
c000aa43:	57                   	push   edi
c000aa44:	8b 3d d0 1d 02 c0    	mov    edi,DWORD PTR ds:0xc0021dd0
c000aa4a:	57                   	push   edi
c000aa4b:	e8 5e ff ff ff       	call   c000a9ae <VAS::getPageTableEntry(unsigned long)>
c000aa50:	83 c4 10             	add    esp,0x10
c000aa53:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa55:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000aa59:	f6 c4 04             	test   ah,0x4
c000aa5c:	74 bf                	je     c000aa1d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000aa5e:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000aa62:	25 00 f0 ff ff       	and    eax,0xfffff000
c000aa67:	83 ec 0c             	sub    esp,0xc
c000aa6a:	50                   	push   eax
c000aa6b:	e8 5c e4 ff ff       	call   c0008ecc <Phys::freePage(unsigned long)>
c000aa70:	83 c4 10             	add    esp,0x10
c000aa73:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000aa77:	80 fa 04             	cmp    dl,0x4
c000aa7a:	75 87                	jne    c000aa03 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000aa7c:	89 f0                	mov    eax,esi
c000aa7e:	84 c0                	test   al,al
c000aa80:	75 47                	jne    c000aac9 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000aa82:	c7 44 24 20 1c ee 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ee1c
c000aa8a:	83 c4 10             	add    esp,0x10
c000aa8d:	5b                   	pop    ebx
c000aa8e:	5e                   	pop    esi
c000aa8f:	5f                   	pop    edi
c000aa90:	e9 aa 69 00 00       	jmp    c001143f <Krnl::panic(char const*)>
c000aa95:	89 f0                	mov    eax,esi
c000aa97:	84 c0                	test   al,al
c000aa99:	75 15                	jne    c000aab0 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000aa9b:	83 ec 0c             	sub    esp,0xc
c000aa9e:	68 89 ef 01 c0       	push   0xc001ef89
c000aaa3:	e8 97 69 00 00       	call   c001143f <Krnl::panic(char const*)>
c000aaa8:	83 c4 10             	add    esp,0x10
c000aaab:	e9 6d ff ff ff       	jmp    c000aa1d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000aab0:	83 ec 08             	sub    esp,0x8
c000aab3:	6a 00                	push   0x0
c000aab5:	53                   	push   ebx
c000aab6:	e8 89 fb ff ff       	call   c000a644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000aabb:	83 c4 10             	add    esp,0x10
c000aabe:	e9 5a ff ff ff       	jmp    c000aa1d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000aac3:	89 f0                	mov    eax,esi
c000aac5:	84 c0                	test   al,al
c000aac7:	75 15                	jne    c000aade <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c000aac9:	83 ec 08             	sub    esp,0x8
c000aacc:	6a 00                	push   0x0
c000aace:	53                   	push   ebx
c000aacf:	e8 70 fb ff ff       	call   c000a644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	5b                   	pop    ebx
c000aadb:	5e                   	pop    esi
c000aadc:	5f                   	pop    edi
c000aadd:	c3                   	ret    
c000aade:	c7 44 24 20 a5 ef 01 c0 	mov    DWORD PTR [esp+0x20],0xc001efa5
c000aae6:	83 c4 10             	add    esp,0x10
c000aae9:	5b                   	pop    ebx
c000aaea:	5e                   	pop    esi
c000aaeb:	5f                   	pop    edi
c000aaec:	e9 4e 69 00 00       	jmp    c001143f <Krnl::panic(char const*)>
c000aaf1:	90                   	nop

c000aaf2 <VAS::freeAllocatedPages(unsigned long)>:
c000aaf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aafa:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000aafe:	74 09                	je     c000ab09 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000ab00:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab04:	e9 c4 fe ff ff       	jmp    c000a9cd <Virt::freeKernelVirtualPages(unsigned long)>
c000ab09:	c7 44 24 04 40 ee 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ee40
c000ab11:	e9 da 0d 00 00       	jmp    c000b8f0 <Dbg::kprintf(char const*, ...)>

c000ab16 <VAS::virtualToPhysical(unsigned long)>:
c000ab16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ab1a:	50                   	push   eax
c000ab1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab1f:	52                   	push   edx
c000ab20:	e8 89 fe ff ff       	call   c000a9ae <VAS::getPageTableEntry(unsigned long)>
c000ab25:	59                   	pop    ecx
c000ab26:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab28:	5a                   	pop    edx
c000ab29:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ab2e:	c3                   	ret    
c000ab2f:	90                   	nop

c000ab30 <VAS::reflagRange(unsigned long, int, int, int)>:
c000ab30:	55                   	push   ebp
c000ab31:	57                   	push   edi
c000ab32:	56                   	push   esi
c000ab33:	53                   	push   ebx
c000ab34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ab38:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000ab3c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ab40:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ab44:	85 db                	test   ebx,ebx
c000ab46:	7e 22                	jle    c000ab6a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000ab48:	c1 e3 0c             	shl    ebx,0xc
c000ab4b:	01 f3                	add    ebx,esi
c000ab4d:	56                   	push   esi
c000ab4e:	81 c6 00 10 00 00    	add    esi,0x1000
c000ab54:	55                   	push   ebp
c000ab55:	e8 54 fe ff ff       	call   c000a9ae <VAS::getPageTableEntry(unsigned long)>
c000ab5a:	5a                   	pop    edx
c000ab5b:	59                   	pop    ecx
c000ab5c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab5e:	21 f9                	and    ecx,edi
c000ab60:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000ab64:	39 f3                	cmp    ebx,esi
c000ab66:	89 08                	mov    DWORD PTR [eax],ecx
c000ab68:	75 e3                	jne    c000ab4d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000ab6a:	5b                   	pop    ebx
c000ab6b:	5e                   	pop    esi
c000ab6c:	5f                   	pop    edi
c000ab6d:	5d                   	pop    ebp
c000ab6e:	c3                   	ret    
c000ab6f:	90                   	nop

c000ab70 <VAS::setToWriteCombining(unsigned long, int)>:
c000ab70:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000ab75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ab7b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000ab82:	75 01                	jne    c000ab85 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000ab84:	c3                   	ret    
c000ab85:	68 80 00 00 00       	push   0x80
c000ab8a:	6a ff                	push   0xffffffff
c000ab8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab90:	50                   	push   eax
c000ab91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab95:	52                   	push   edx
c000ab96:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ab9a:	51                   	push   ecx
c000ab9b:	e8 90 ff ff ff       	call   c000ab30 <VAS::reflagRange(unsigned long, int, int, int)>
c000aba0:	83 c4 14             	add    esp,0x14
c000aba3:	c3                   	ret    

c000aba4 <VAS::mapOtherVASIn(bool, VAS*)>:
c000aba4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000aba9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000abad:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000abb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abb4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000abb7:	19 c0                	sbb    eax,eax
c000abb9:	83 ca 03             	or     edx,0x3
c000abbc:	83 e0 fc             	and    eax,0xfffffffc
c000abbf:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000abc6:	0f 20 d8             	mov    eax,cr3
c000abc9:	0f 22 d8             	mov    cr3,eax
c000abcc:	c3                   	ret    
c000abcd:	90                   	nop

c000abce <VAS::~VAS()>:
c000abce:	83 ec 2c             	sub    esp,0x2c
c000abd1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000abd9:	fa                   	cli    
c000abda:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000abdf:	40                   	inc    eax
c000abe0:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000abe5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000abea:	8b 00                	mov    eax,DWORD PTR [eax]
c000abec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000abef:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000abf5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000abf9:	6a 01                	push   0x1
c000abfb:	50                   	push   eax
c000abfc:	e8 a3 ff ff ff       	call   c000aba4 <VAS::mapOtherVASIn(bool, VAS*)>
c000ac01:	83 c4 0c             	add    esp,0xc
c000ac04:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ac0c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000ac14:	0f 8f d4 00 00 00    	jg     c000acee <VAS::~VAS()+0x120>
c000ac1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac1e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac21:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ac25:	c1 e2 02             	shl    edx,0x2
c000ac28:	01 d0                	add    eax,edx
c000ac2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac34:	83 e0 01             	and    eax,0x1
c000ac37:	0f 84 a8 00 00 00    	je     c000ace5 <VAS::~VAS()+0x117>
c000ac3d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ac45:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000ac4d:	7f 72                	jg     c000acc1 <VAS::~VAS()+0xf3>
c000ac4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ac53:	c1 e0 0a             	shl    eax,0xa
c000ac56:	89 c2                	mov    edx,eax
c000ac58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac5c:	01 d0                	add    eax,edx
c000ac5e:	c1 e0 0c             	shl    eax,0xc
c000ac61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ac65:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ac6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac6c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ac6f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	6a 01                	push   0x1
c000ac7b:	50                   	push   eax
c000ac7c:	e8 01 fd ff ff       	call   c000a982 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000ac81:	83 c4 0c             	add    esp,0xc
c000ac84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ac8c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac96:	25 01 04 00 00       	and    eax,0x401
c000ac9b:	3d 01 04 00 00       	cmp    eax,0x401
c000aca0:	75 19                	jne    c000acbb <VAS::~VAS()+0xed>
c000aca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aca6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000acab:	83 ec 0c             	sub    esp,0xc
c000acae:	50                   	push   eax
c000acaf:	e8 18 e2 ff ff       	call   c0008ecc <Phys::freePage(unsigned long)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000acbb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000acbf:	eb 84                	jmp    c000ac45 <VAS::~VAS()+0x77>
c000acc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acc5:	25 00 04 00 00       	and    eax,0x400
c000acca:	74 19                	je     c000ace5 <VAS::~VAS()+0x117>
c000accc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acd0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000acd5:	83 ec 0c             	sub    esp,0xc
c000acd8:	50                   	push   eax
c000acd9:	e8 ee e1 ff ff       	call   c0008ecc <Phys::freePage(unsigned long)>
c000acde:	83 c4 10             	add    esp,0x10
c000ace1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ace5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ace9:	e9 1e ff ff ff       	jmp    c000ac0c <VAS::~VAS()+0x3e>
c000acee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acf2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000acf5:	83 ec 0c             	sub    esp,0xc
c000acf8:	50                   	push   eax
c000acf9:	e8 cf fc ff ff       	call   c000a9cd <Virt::freeKernelVirtualPages(unsigned long)>
c000acfe:	83 c4 10             	add    esp,0x10
c000ad01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ad08:	83 ec 0c             	sub    esp,0xc
c000ad0b:	50                   	push   eax
c000ad0c:	e8 bb e1 ff ff       	call   c0008ecc <Phys::freePage(unsigned long)>
c000ad11:	83 c4 10             	add    esp,0x10
c000ad14:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ad18:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000ad1d:	48                   	dec    eax
c000ad1e:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000ad23:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000ad28:	85 c0                	test   eax,eax
c000ad2a:	75 01                	jne    c000ad2d <VAS::~VAS()+0x15f>
c000ad2c:	fb                   	sti    
c000ad2d:	90                   	nop
c000ad2e:	83 c4 2c             	add    esp,0x2c
c000ad31:	c3                   	ret    

c000ad32 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000ad32:	55                   	push   ebp
c000ad33:	57                   	push   edi
c000ad34:	56                   	push   esi
c000ad35:	53                   	push   ebx
c000ad36:	83 ec 1c             	sub    esp,0x1c
c000ad39:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ad3d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000ad41:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000ad47:	77 0b                	ja     c000ad54 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000ad49:	0f 20 d8             	mov    eax,cr3
c000ad4c:	0f 20 d8             	mov    eax,cr3
c000ad4f:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000ad52:	75 47                	jne    c000ad9b <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000ad54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ad58:	09 d8                	or     eax,ebx
c000ad5a:	a9 ff 0f 00 00       	test   eax,0xfff
c000ad5f:	75 57                	jne    c000adb8 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000ad61:	89 de                	mov    esi,ebx
c000ad63:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ad66:	c1 ee 16             	shr    esi,0x16
c000ad69:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000ad70:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000ad74:	74 54                	je     c000adca <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000ad76:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ad7a:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000ad80:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ad84:	c1 e6 0c             	shl    esi,0xc
c000ad87:	c1 eb 0a             	shr    ebx,0xa
c000ad8a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000ad90:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000ad93:	83 c4 1c             	add    esp,0x1c
c000ad96:	5b                   	pop    ebx
c000ad97:	5e                   	pop    esi
c000ad98:	5f                   	pop    edi
c000ad99:	5d                   	pop    ebp
c000ad9a:	c3                   	ret    
c000ad9b:	83 ec 0c             	sub    esp,0xc
c000ad9e:	68 64 ee 01 c0       	push   0xc001ee64
c000ada3:	e8 48 0b 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c000ada8:	83 c4 10             	add    esp,0x10
c000adab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000adaf:	09 d8                	or     eax,ebx
c000adb1:	a9 ff 0f 00 00       	test   eax,0xfff
c000adb6:	74 a9                	je     c000ad61 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000adb8:	83 ec 0c             	sub    esp,0xc
c000adbb:	68 cc ee 01 c0       	push   0xc001eecc
c000adc0:	e8 7a 66 00 00       	call   c001143f <Krnl::panic(char const*)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	eb 97                	jmp    c000ad61 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000adca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adce:	e8 5b e1 ff ff       	call   c0008f2e <Phys::allocatePage()>
c000add3:	83 ec 0c             	sub    esp,0xc
c000add6:	89 c5                	mov    ebp,eax
c000add8:	8b 0d d0 1d 02 c0    	mov    ecx,DWORD PTR ds:0xc0021dd0
c000adde:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ade2:	6a 01                	push   0x1
c000ade4:	e8 b4 f8 ff ff       	call   c000a69d <Virt::allocateKernelVirtualPages(int)>
c000ade9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000adf0:	6a 01                	push   0x1
c000adf2:	50                   	push   eax
c000adf3:	55                   	push   ebp
c000adf4:	81 cd 07 04 00 00    	or     ebp,0x407
c000adfa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000adfe:	51                   	push   ecx
c000adff:	e8 28 02 00 00       	call   c000b02c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ae04:	83 c4 1c             	add    esp,0x1c
c000ae07:	68 00 10 00 00       	push   0x1000
c000ae0c:	6a 00                	push   0x0
c000ae0e:	50                   	push   eax
c000ae0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ae13:	e8 d8 56 ff ff       	call   c00004f0 <memset>
c000ae18:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ae1c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ae1f:	e8 a9 fb ff ff       	call   c000a9cd <Virt::freeKernelVirtualPages(unsigned long)>
c000ae24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ae28:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ae2b:	83 c4 10             	add    esp,0x10
c000ae2e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000ae31:	e9 40 ff ff ff       	jmp    c000ad76 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000ae36 <VAS::allocatePages(int, int)>:
c000ae36:	55                   	push   ebp
c000ae37:	57                   	push   edi
c000ae38:	56                   	push   esi
c000ae39:	53                   	push   ebx
c000ae3a:	83 ec 1c             	sub    esp,0x1c
c000ae3d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000ae41:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000ae46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ae4c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000ae52:	83 e0 01             	and    eax,0x1
c000ae55:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000ae59:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ae5d:	0f 85 cc 00 00 00    	jne    c000af2f <VAS::allocatePages(int, int)+0xf9>
c000ae63:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ae66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ae6a:	85 c0                	test   eax,eax
c000ae6c:	0f 84 a1 00 00 00    	je     c000af13 <VAS::allocatePages(int, int)+0xdd>
c000ae72:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ae76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ae7a:	c1 e6 0c             	shl    esi,0xc
c000ae7d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000ae81:	85 c0                	test   eax,eax
c000ae83:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000ae86:	7e 33                	jle    c000aebb <VAS::allocatePages(int, int)+0x85>
c000ae88:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ae8c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ae90:	81 cd 00 04 00 00    	or     ebp,0x400
c000ae96:	e8 93 e0 ff ff       	call   c0008f2e <Phys::allocatePage()>
c000ae9b:	55                   	push   ebp
c000ae9c:	53                   	push   ebx
c000ae9d:	50                   	push   eax
c000ae9e:	57                   	push   edi
c000ae9f:	e8 8e fe ff ff       	call   c000ad32 <VAS::mapPage(unsigned long, unsigned long, int)>
c000aea4:	83 c4 10             	add    esp,0x10
c000aea7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000aeac:	74 03                	je     c000aeb1 <VAS::allocatePages(int, int)+0x7b>
c000aeae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000aeb1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000aeb7:	39 de                	cmp    esi,ebx
c000aeb9:	75 db                	jne    c000ae96 <VAS::allocatePages(int, int)+0x60>
c000aebb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000aec0:	75 12                	jne    c000aed4 <VAS::allocatePages(int, int)+0x9e>
c000aec2:	0f 20 d8             	mov    eax,cr3
c000aec5:	0f 22 d8             	mov    cr3,eax
c000aec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aecc:	83 c4 1c             	add    esp,0x1c
c000aecf:	5b                   	pop    ebx
c000aed0:	5e                   	pop    esi
c000aed1:	5f                   	pop    edi
c000aed2:	5d                   	pop    ebp
c000aed3:	c3                   	ret    
c000aed4:	c1 ee 0a             	shr    esi,0xa
c000aed7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aedb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000aee1:	c1 eb 0a             	shr    ebx,0xa
c000aee4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000aeea:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000aef0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000aef6:	39 c3                	cmp    ebx,eax
c000aef8:	77 ce                	ja     c000aec8 <VAS::allocatePages(int, int)+0x92>
c000aefa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000aefd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000af03:	39 d8                	cmp    eax,ebx
c000af05:	73 f3                	jae    c000aefa <VAS::allocatePages(int, int)+0xc4>
c000af07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af0b:	83 c4 1c             	add    esp,0x1c
c000af0e:	5b                   	pop    ebx
c000af0f:	5e                   	pop    esi
c000af10:	5f                   	pop    edi
c000af11:	5d                   	pop    ebp
c000af12:	c3                   	ret    
c000af13:	83 ec 0c             	sub    esp,0xc
c000af16:	68 f0 ee 01 c0       	push   0xc001eef0
c000af1b:	e8 1f 65 00 00       	call   c001143f <Krnl::panic(char const*)>
c000af20:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000af23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000af27:	83 c4 10             	add    esp,0x10
c000af2a:	e9 43 ff ff ff       	jmp    c000ae72 <VAS::allocatePages(int, int)+0x3c>
c000af2f:	83 ec 0c             	sub    esp,0xc
c000af32:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000af36:	51                   	push   ecx
c000af37:	e8 61 f7 ff ff       	call   c000a69d <Virt::allocateKernelVirtualPages(int)>
c000af3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000af40:	83 c4 10             	add    esp,0x10
c000af43:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000af48:	0f 87 9b 00 00 00    	ja     c000afe9 <VAS::allocatePages(int, int)+0x1b3>
c000af4e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000af52:	85 d2                	test   edx,edx
c000af54:	7e 3c                	jle    c000af92 <VAS::allocatePages(int, int)+0x15c>
c000af56:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000af5a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000af5e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000af62:	c1 e5 0c             	shl    ebp,0xc
c000af65:	81 ce 00 04 00 00    	or     esi,0x400
c000af6b:	01 dd                	add    ebp,ebx
c000af6d:	e8 bc df ff ff       	call   c0008f2e <Phys::allocatePage()>
c000af72:	56                   	push   esi
c000af73:	53                   	push   ebx
c000af74:	50                   	push   eax
c000af75:	57                   	push   edi
c000af76:	e8 b7 fd ff ff       	call   c000ad32 <VAS::mapPage(unsigned long, unsigned long, int)>
c000af7b:	83 c4 10             	add    esp,0x10
c000af7e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000af83:	74 03                	je     c000af88 <VAS::allocatePages(int, int)+0x152>
c000af85:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000af88:	81 c3 00 10 00 00    	add    ebx,0x1000
c000af8e:	39 dd                	cmp    ebp,ebx
c000af90:	75 db                	jne    c000af6d <VAS::allocatePages(int, int)+0x137>
c000af92:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000af97:	0f 84 25 ff ff ff    	je     c000aec2 <VAS::allocatePages(int, int)+0x8c>
c000af9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000afa1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afa5:	89 d3                	mov    ebx,edx
c000afa7:	c1 e0 0c             	shl    eax,0xc
c000afaa:	c1 eb 0a             	shr    ebx,0xa
c000afad:	01 d0                	add    eax,edx
c000afaf:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000afb5:	c1 e8 0a             	shr    eax,0xa
c000afb8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000afbe:	25 00 f0 ff ff       	and    eax,0xfffff000
c000afc3:	2d 00 00 40 00       	sub    eax,0x400000
c000afc8:	39 c3                	cmp    ebx,eax
c000afca:	0f 87 f8 fe ff ff    	ja     c000aec8 <VAS::allocatePages(int, int)+0x92>
c000afd0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000afd3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000afd9:	39 d8                	cmp    eax,ebx
c000afdb:	73 f3                	jae    c000afd0 <VAS::allocatePages(int, int)+0x19a>
c000afdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afe1:	83 c4 1c             	add    esp,0x1c
c000afe4:	5b                   	pop    ebx
c000afe5:	5e                   	pop    esi
c000afe6:	5f                   	pop    edi
c000afe7:	5d                   	pop    ebp
c000afe8:	c3                   	ret    
c000afe9:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000afee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000aff4:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000affb:	0f 84 4d ff ff ff    	je     c000af4e <VAS::allocatePages(int, int)+0x118>
c000b001:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000b009:	e9 40 ff ff ff       	jmp    c000af4e <VAS::allocatePages(int, int)+0x118>

c000b00e <VAS::setCPUSpecific(unsigned long)>:
c000b00e:	83 ec 0c             	sub    esp,0xc
c000b011:	6a 05                	push   0x5
c000b013:	68 00 00 40 c2       	push   0xc2400000
c000b018:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b01c:	50                   	push   eax
c000b01d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b021:	52                   	push   edx
c000b022:	e8 0b fd ff ff       	call   c000ad32 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b027:	83 c4 1c             	add    esp,0x1c
c000b02a:	c3                   	ret    
c000b02b:	90                   	nop

c000b02c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000b02c:	55                   	push   ebp
c000b02d:	57                   	push   edi
c000b02e:	56                   	push   esi
c000b02f:	53                   	push   ebx
c000b030:	83 ec 1c             	sub    esp,0x1c
c000b033:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000b038:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000b03c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b042:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b046:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000b04c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000b050:	83 e0 01             	and    eax,0x1
c000b053:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b057:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b05b:	85 c0                	test   eax,eax
c000b05d:	7e 39                	jle    c000b098 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000b05f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b063:	89 f3                	mov    ebx,esi
c000b065:	c1 e0 0c             	shl    eax,0xc
c000b068:	01 f0                	add    eax,esi
c000b06a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b06e:	55                   	push   ebp
c000b06f:	53                   	push   ebx
c000b070:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b074:	29 f0                	sub    eax,esi
c000b076:	01 d8                	add    eax,ebx
c000b078:	50                   	push   eax
c000b079:	57                   	push   edi
c000b07a:	e8 b3 fc ff ff       	call   c000ad32 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b07f:	83 c4 10             	add    esp,0x10
c000b082:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b087:	74 03                	je     c000b08c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000b089:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000b08c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b092:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000b096:	75 d6                	jne    c000b06e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000b098:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b09d:	75 10                	jne    c000b0af <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000b09f:	0f 20 d8             	mov    eax,cr3
c000b0a2:	0f 22 d8             	mov    cr3,eax
c000b0a5:	83 c4 1c             	add    esp,0x1c
c000b0a8:	89 f0                	mov    eax,esi
c000b0aa:	5b                   	pop    ebx
c000b0ab:	5e                   	pop    esi
c000b0ac:	5f                   	pop    edi
c000b0ad:	5d                   	pop    ebp
c000b0ae:	c3                   	ret    
c000b0af:	89 f3                	mov    ebx,esi
c000b0b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b0b5:	c1 eb 0a             	shr    ebx,0xa
c000b0b8:	c1 e0 0c             	shl    eax,0xc
c000b0bb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000b0c1:	01 f0                	add    eax,esi
c000b0c3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000b0c9:	c1 e8 0a             	shr    eax,0xa
c000b0cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b0d1:	2d 00 00 40 00       	sub    eax,0x400000
c000b0d6:	39 c3                	cmp    ebx,eax
c000b0d8:	77 cb                	ja     c000b0a5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000b0da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000b0dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b0e3:	39 d8                	cmp    eax,ebx
c000b0e5:	73 f3                	jae    c000b0da <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000b0e7:	83 c4 1c             	add    esp,0x1c
c000b0ea:	89 f0                	mov    eax,esi
c000b0ec:	5b                   	pop    ebx
c000b0ed:	5e                   	pop    esi
c000b0ee:	5f                   	pop    edi
c000b0ef:	5d                   	pop    ebp
c000b0f0:	c3                   	ret    
c000b0f1:	90                   	nop

c000b0f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000b0f2:	55                   	push   ebp
c000b0f3:	57                   	push   edi
c000b0f4:	56                   	push   esi
c000b0f5:	53                   	push   ebx
c000b0f6:	83 ec 1c             	sub    esp,0x1c
c000b0f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b0fd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b101:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000b105:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b109:	a9 ff 0f 00 00       	test   eax,0xfff
c000b10e:	75 4a                	jne    c000b15a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000b110:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b114:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b117:	c1 eb 16             	shr    ebx,0x16
c000b11a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000b121:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000b125:	74 4d                	je     c000b174 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000b127:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b12b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000b12f:	c1 e8 0a             	shr    eax,0xa
c000b132:	80 fa 01             	cmp    dl,0x1
c000b135:	19 d2                	sbb    edx,edx
c000b137:	c1 e3 0c             	shl    ebx,0xc
c000b13a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000b13e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000b144:	25 fc 0f 00 00       	and    eax,0xffc
c000b149:	01 d8                	add    eax,ebx
c000b14b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000b152:	83 c4 1c             	add    esp,0x1c
c000b155:	5b                   	pop    ebx
c000b156:	5e                   	pop    esi
c000b157:	5f                   	pop    edi
c000b158:	5d                   	pop    ebp
c000b159:	c3                   	ret    
c000b15a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b15e:	83 ec 0c             	sub    esp,0xc
c000b161:	68 1c ef 01 c0       	push   0xc001ef1c
c000b166:	e8 d4 62 00 00       	call   c001143f <Krnl::panic(char const*)>
c000b16b:	83 c4 10             	add    esp,0x10
c000b16e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b172:	eb 9c                	jmp    c000b110 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000b174:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b178:	e8 b1 dd ff ff       	call   c0008f2e <Phys::allocatePage()>
c000b17d:	83 ec 0c             	sub    esp,0xc
c000b180:	89 c5                	mov    ebp,eax
c000b182:	8b 0d d0 1d 02 c0    	mov    ecx,DWORD PTR ds:0xc0021dd0
c000b188:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b18c:	6a 01                	push   0x1
c000b18e:	e8 0a f5 ff ff       	call   c000a69d <Virt::allocateKernelVirtualPages(int)>
c000b193:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000b19a:	6a 01                	push   0x1
c000b19c:	50                   	push   eax
c000b19d:	55                   	push   ebp
c000b19e:	81 cd 07 04 00 00    	or     ebp,0x407
c000b1a4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000b1a8:	51                   	push   ecx
c000b1a9:	e8 7e fe ff ff       	call   c000b02c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b1ae:	83 c4 1c             	add    esp,0x1c
c000b1b1:	68 00 10 00 00       	push   0x1000
c000b1b6:	6a 00                	push   0x0
c000b1b8:	50                   	push   eax
c000b1b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b1bd:	e8 2e 53 ff ff       	call   c00004f0 <memset>
c000b1c2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000b1c6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000b1c9:	e8 ff f7 ff ff       	call   c000a9cd <Virt::freeKernelVirtualPages(unsigned long)>
c000b1ce:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b1d1:	83 c4 10             	add    esp,0x10
c000b1d4:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000b1d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b1db:	e9 47 ff ff ff       	jmp    c000b127 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000b1e0 <VAS::VAS(bool)>:
c000b1e0:	53                   	push   ebx
c000b1e1:	83 ec 28             	sub    esp,0x28
c000b1e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b1ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b1f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1fb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b202:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b206:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b20a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000b20d:	e8 1c dd ff ff       	call   c0008f2e <Phys::allocatePage()>
c000b212:	89 c2                	mov    edx,eax
c000b214:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b218:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000b21b:	8b 1d d0 1d 02 c0    	mov    ebx,DWORD PTR ds:0xc0021dd0
c000b221:	83 ec 0c             	sub    esp,0xc
c000b224:	6a 01                	push   0x1
c000b226:	e8 72 f4 ff ff       	call   c000a69d <Virt::allocateKernelVirtualPages(int)>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 c2                	mov    edx,eax
c000b230:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b234:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b237:	83 ec 0c             	sub    esp,0xc
c000b23a:	6a 03                	push   0x3
c000b23c:	6a 01                	push   0x1
c000b23e:	52                   	push   edx
c000b23f:	50                   	push   eax
c000b240:	53                   	push   ebx
c000b241:	e8 e6 fd ff ff       	call   c000b02c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b246:	83 c4 20             	add    esp,0x20
c000b249:	89 c2                	mov    edx,eax
c000b24b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b24f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b252:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b25a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000b262:	7f 1c                	jg     c000b280 <VAS::VAS(bool)+0xa0>
c000b264:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b268:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b26b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b26f:	c1 e2 02             	shl    edx,0x2
c000b272:	01 d0                	add    eax,edx
c000b274:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000b27a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b27e:	eb da                	jmp    c000b25a <VAS::VAS(bool)+0x7a>
c000b280:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000b288:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000b290:	7f 7a                	jg     c000b30c <VAS::VAS(bool)+0x12c>
c000b292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b296:	2d 00 02 00 00       	sub    eax,0x200
c000b29b:	c1 e0 0c             	shl    eax,0xc
c000b29e:	83 c8 03             	or     eax,0x3
c000b2a1:	89 c2                	mov    edx,eax
c000b2a3:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000b2a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b2ae:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000b2b4:	83 e0 10             	and    eax,0x10
c000b2b7:	84 c0                	test   al,al
c000b2b9:	74 07                	je     c000b2c2 <VAS::VAS(bool)+0xe2>
c000b2bb:	b8 00 01 00 00       	mov    eax,0x100
c000b2c0:	eb 05                	jmp    c000b2c7 <VAS::VAS(bool)+0xe7>
c000b2c2:	b8 00 00 00 00       	mov    eax,0x0
c000b2c7:	09 d0                	or     eax,edx
c000b2c9:	89 c1                	mov    ecx,eax
c000b2cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b2d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b2d6:	c1 e2 02             	shl    edx,0x2
c000b2d9:	01 d0                	add    eax,edx
c000b2db:	89 ca                	mov    edx,ecx
c000b2dd:	89 10                	mov    DWORD PTR [eax],edx
c000b2df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2e3:	2d 40 03 00 00       	sub    eax,0x340
c000b2e8:	83 f8 7f             	cmp    eax,0x7f
c000b2eb:	77 16                	ja     c000b303 <VAS::VAS(bool)+0x123>
c000b2ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2f1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b2f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b2f8:	c1 e2 02             	shl    edx,0x2
c000b2fb:	01 d0                	add    eax,edx
c000b2fd:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000b303:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b307:	e9 7c ff ff ff       	jmp    c000b288 <VAS::VAS(bool)+0xa8>
c000b30c:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000b311:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b317:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000b31d:	83 e0 10             	and    eax,0x10
c000b320:	84 c0                	test   al,al
c000b322:	74 07                	je     c000b32b <VAS::VAS(bool)+0x14b>
c000b324:	b8 03 41 00 00       	mov    eax,0x4103
c000b329:	eb 05                	jmp    c000b330 <VAS::VAS(bool)+0x150>
c000b32b:	b8 03 40 00 00       	mov    eax,0x4003
c000b330:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b334:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b337:	81 c2 20 0c 00 00    	add    edx,0xc20
c000b33d:	89 02                	mov    DWORD PTR [edx],eax
c000b33f:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000b344:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b34a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000b350:	83 ec 08             	sub    esp,0x8
c000b353:	50                   	push   eax
c000b354:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b358:	e8 b1 fc ff ff       	call   c000b00e <VAS::setCPUSpecific(unsigned long)>
c000b35d:	83 c4 10             	add    esp,0x10
c000b360:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b364:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000b367:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000b36c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b372:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000b378:	83 e0 10             	and    eax,0x10
c000b37b:	84 c0                	test   al,al
c000b37d:	74 07                	je     c000b386 <VAS::VAS(bool)+0x1a6>
c000b37f:	b8 00 01 00 00       	mov    eax,0x100
c000b384:	eb 05                	jmp    c000b38b <VAS::VAS(bool)+0x1ab>
c000b386:	b8 00 00 00 00       	mov    eax,0x0
c000b38b:	09 c2                	or     edx,eax
c000b38d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b391:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b394:	05 fc 0f 00 00       	add    eax,0xffc
c000b399:	83 ca 03             	or     edx,0x3
c000b39c:	89 10                	mov    DWORD PTR [eax],edx
c000b39e:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000b3a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b3a9:	83 ec 0c             	sub    esp,0xc
c000b3ac:	50                   	push   eax
c000b3ad:	e8 12 1c 00 00       	call   c000cfc4 <Device::getName()>
c000b3b2:	83 c4 10             	add    esp,0x10
c000b3b5:	83 ec 08             	sub    esp,0x8
c000b3b8:	68 bf ef 01 c0       	push   0xc001efbf
c000b3bd:	50                   	push   eax
c000b3be:	e8 3d 53 ff ff       	call   c0000700 <strcmp>
c000b3c3:	83 c4 10             	add    esp,0x10
c000b3c6:	85 c0                	test   eax,eax
c000b3c8:	0f 94 c0             	sete   al
c000b3cb:	84 c0                	test   al,al
c000b3cd:	0f 84 87 00 00 00    	je     c000b45a <VAS::VAS(bool)+0x27a>
c000b3d3:	fa                   	cli    
c000b3d4:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000b3d9:	40                   	inc    eax
c000b3da:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000b3df:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000b3e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b3ea:	05 7c 09 00 00       	add    eax,0x97c
c000b3ef:	83 ec 0c             	sub    esp,0xc
c000b3f2:	50                   	push   eax
c000b3f3:	e8 66 d2 ff ff       	call   c000865e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b400:	89 c3                	mov    ebx,eax
c000b402:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000b407:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b40d:	05 7c 09 00 00       	add    eax,0x97c
c000b412:	83 ec 0c             	sub    esp,0xc
c000b415:	50                   	push   eax
c000b416:	e8 43 d2 ff ff       	call   c000865e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000b41b:	83 c4 10             	add    esp,0x10
c000b41e:	83 ec 08             	sub    esp,0x8
c000b421:	50                   	push   eax
c000b422:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b426:	e8 83 f5 ff ff       	call   c000a9ae <VAS::getPageTableEntry(unsigned long)>
c000b42b:	83 c4 10             	add    esp,0x10
c000b42e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b430:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b435:	6a 11                	push   0x11
c000b437:	53                   	push   ebx
c000b438:	50                   	push   eax
c000b439:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b43d:	e8 f0 f8 ff ff       	call   c000ad32 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000b44a:	48                   	dec    eax
c000b44b:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000b450:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000b455:	85 c0                	test   eax,eax
c000b457:	75 01                	jne    c000b45a <VAS::VAS(bool)+0x27a>
c000b459:	fb                   	sti    
c000b45a:	90                   	nop
c000b45b:	83 c4 28             	add    esp,0x28
c000b45e:	5b                   	pop    ebx
c000b45f:	c3                   	ret    

c000b460 <VAS::evict(unsigned long)>:
c000b460:	55                   	push   ebp
c000b461:	57                   	push   edi
c000b462:	56                   	push   esi
c000b463:	53                   	push   ebx
c000b464:	83 ec 1c             	sub    esp,0x1c
c000b467:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b46b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b46f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b473:	e8 66 f3 ff ff       	call   c000a7de <Virt::allocateSwapfilePage()>
c000b478:	8b 0d 4c 0c 02 c0    	mov    ecx,DWORD PTR ds:0xc0020c4c
c000b47e:	89 c7                	mov    edi,eax
c000b480:	85 c9                	test   ecx,ecx
c000b482:	7e 3e                	jle    c000b4c2 <VAS::evict(unsigned long)+0x62>
c000b484:	89 ee                	mov    esi,ebp
c000b486:	31 db                	xor    ebx,ebx
c000b488:	83 ec 0c             	sub    esp,0xc
c000b48b:	57                   	push   edi
c000b48c:	e8 3b f3 ff ff       	call   c000a7cc <Virt::swapIDToSector(unsigned long)>
c000b491:	89 34 24             	mov    DWORD PTR [esp],esi
c000b494:	01 d8                	add    eax,ebx
c000b496:	6a 01                	push   0x1
c000b498:	31 d2                	xor    edx,edx
c000b49a:	43                   	inc    ebx
c000b49b:	52                   	push   edx
c000b49c:	81 c6 00 02 00 00    	add    esi,0x200
c000b4a2:	50                   	push   eax
c000b4a3:	0f be 05 58 0c 02 c0 	movsx  eax,BYTE PTR ds:0xc0020c58
c000b4aa:	8b 14 85 3c 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbec4]
c000b4b1:	52                   	push   edx
c000b4b2:	e8 8d 2b 00 00       	call   c000e044 <LogicalDisk::write(unsigned long long, int, void*)>
c000b4b7:	83 c4 20             	add    esp,0x20
c000b4ba:	39 1d 4c 0c 02 c0    	cmp    DWORD PTR ds:0xc0020c4c,ebx
c000b4c0:	7f c6                	jg     c000b488 <VAS::evict(unsigned long)+0x28>
c000b4c2:	83 ec 08             	sub    esp,0x8
c000b4c5:	c1 e7 0b             	shl    edi,0xb
c000b4c8:	55                   	push   ebp
c000b4c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b4cd:	50                   	push   eax
c000b4ce:	e8 db f4 ff ff       	call   c000a9ae <VAS::getPageTableEntry(unsigned long)>
c000b4d3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4d5:	89 d1                	mov    ecx,edx
c000b4d7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b4dd:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000b4e3:	09 cf                	or     edi,ecx
c000b4e5:	89 38                	mov    DWORD PTR [eax],edi
c000b4e7:	89 14 24             	mov    DWORD PTR [esp],edx
c000b4ea:	ff 05 c8 1d 02 c0    	inc    DWORD PTR ds:0xc0021dc8
c000b4f0:	e8 d7 d9 ff ff       	call   c0008ecc <Phys::freePage(unsigned long)>
c000b4f5:	0f 20 d8             	mov    eax,cr3
c000b4f8:	0f 22 d8             	mov    cr3,eax
c000b4fb:	a1 c4 1d 02 c0       	mov    eax,ds:0xc0021dc4
c000b500:	c7 44 24 40 cd ef 01 c0 	mov    DWORD PTR [esp+0x40],0xc001efcd
c000b508:	8d 50 01             	lea    edx,[eax+0x1]
c000b50b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b50f:	89 15 c4 1d 02 c0    	mov    DWORD PTR ds:0xc0021dc4,edx
c000b515:	83 c4 2c             	add    esp,0x2c
c000b518:	5b                   	pop    ebx
c000b519:	5e                   	pop    esi
c000b51a:	5f                   	pop    edi
c000b51b:	5d                   	pop    ebp
c000b51c:	e9 cf 03 00 00       	jmp    c000b8f0 <Dbg::kprintf(char const*, ...)>
c000b521:	90                   	nop

c000b522 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000b522:	55                   	push   ebp
c000b523:	57                   	push   edi
c000b524:	56                   	push   esi
c000b525:	53                   	push   ebx
c000b526:	83 ec 14             	sub    esp,0x14
c000b529:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b52d:	53                   	push   ebx
c000b52e:	68 de ef 01 c0       	push   0xc001efde
c000b533:	e8 b8 03 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000b541:	74 21                	je     c000b564 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000b543:	83 ec 08             	sub    esp,0x8
c000b546:	53                   	push   ebx
c000b547:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000b54b:	57                   	push   edi
c000b54c:	e8 5d f4 ff ff       	call   c000a9ae <VAS::getPageTableEntry(unsigned long)>
c000b551:	83 c4 10             	add    esp,0x10
c000b554:	89 c6                	mov    esi,eax
c000b556:	85 c0                	test   eax,eax
c000b558:	74 0a                	je     c000b564 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000b55a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000b55c:	f7 c5 01 00 00 00    	test   ebp,0x1
c000b562:	74 0a                	je     c000b56e <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000b564:	31 c0                	xor    eax,eax
c000b566:	83 c4 0c             	add    esp,0xc
c000b569:	5b                   	pop    ebx
c000b56a:	5e                   	pop    esi
c000b56b:	5f                   	pop    edi
c000b56c:	5d                   	pop    ebp
c000b56d:	c3                   	ret    
c000b56e:	e8 bb d9 ff ff       	call   c0008f2e <Phys::allocatePage()>
c000b573:	c1 ed 0b             	shr    ebp,0xb
c000b576:	8b 16                	mov    edx,DWORD PTR [esi]
c000b578:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000b57e:	09 c2                	or     edx,eax
c000b580:	81 ca 01 08 00 00    	or     edx,0x801
c000b586:	89 16                	mov    DWORD PTR [esi],edx
c000b588:	8b 35 4c 0c 02 c0    	mov    esi,DWORD PTR ds:0xc0020c4c
c000b58e:	85 f6                	test   esi,esi
c000b590:	7e 3e                	jle    c000b5d0 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000b592:	89 df                	mov    edi,ebx
c000b594:	31 f6                	xor    esi,esi
c000b596:	83 ec 0c             	sub    esp,0xc
c000b599:	55                   	push   ebp
c000b59a:	e8 2d f2 ff ff       	call   c000a7cc <Virt::swapIDToSector(unsigned long)>
c000b59f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b5a2:	01 f0                	add    eax,esi
c000b5a4:	6a 01                	push   0x1
c000b5a6:	31 d2                	xor    edx,edx
c000b5a8:	46                   	inc    esi
c000b5a9:	52                   	push   edx
c000b5aa:	81 c7 00 02 00 00    	add    edi,0x200
c000b5b0:	50                   	push   eax
c000b5b1:	0f be 05 58 0c 02 c0 	movsx  eax,BYTE PTR ds:0xc0020c58
c000b5b8:	8b 0c 85 3c 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbec4]
c000b5bf:	51                   	push   ecx
c000b5c0:	e8 13 2a 00 00       	call   c000dfd8 <LogicalDisk::read(unsigned long long, int, void*)>
c000b5c5:	83 c4 20             	add    esp,0x20
c000b5c8:	39 35 4c 0c 02 c0    	cmp    DWORD PTR ds:0xc0020c4c,esi
c000b5ce:	7f c6                	jg     c000b596 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000b5d0:	a1 c8 1d 02 c0       	mov    eax,ds:0xc0021dc8
c000b5d5:	48                   	dec    eax
c000b5d6:	52                   	push   edx
c000b5d7:	a3 c8 1d 02 c0       	mov    ds:0xc0021dc8,eax
c000b5dc:	50                   	push   eax
c000b5dd:	53                   	push   ebx
c000b5de:	68 f1 ef 01 c0       	push   0xc001eff1
c000b5e3:	e8 08 03 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c000b5e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b5eb:	e8 be f1 ff ff       	call   c000a7ae <Virt::freeSwapfilePage(unsigned long)>
c000b5f0:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000b5f5:	83 c4 10             	add    esp,0x10
c000b5f8:	48                   	dec    eax
c000b5f9:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000b5fe:	85 c0                	test   eax,eax
c000b600:	75 01                	jne    c000b603 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000b602:	fb                   	sti    
c000b603:	0f 20 d8             	mov    eax,cr3
c000b606:	0f 22 d8             	mov    cr3,eax
c000b609:	b0 01                	mov    al,0x1
c000b60b:	e9 56 ff ff ff       	jmp    c000b566 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000b610 <VAS::scanForEviction()>:
c000b610:	57                   	push   edi
c000b611:	31 ff                	xor    edi,edi
c000b613:	56                   	push   esi
c000b614:	53                   	push   ebx
c000b615:	83 ec 10             	sub    esp,0x10
c000b618:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b61c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000b61f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000b625:	75 0e                	jne    c000b635 <VAS::scanForEviction()+0x25>
c000b627:	89 da                	mov    edx,ebx
c000b629:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000b62c:	c1 ea 16             	shr    edx,0x16
c000b62f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000b633:	74 4e                	je     c000b683 <VAS::scanForEviction()+0x73>
c000b635:	53                   	push   ebx
c000b636:	56                   	push   esi
c000b637:	e8 72 f3 ff ff       	call   c000a9ae <VAS::getPageTableEntry(unsigned long)>
c000b63c:	5a                   	pop    edx
c000b63d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b63f:	59                   	pop    ecx
c000b640:	89 d1                	mov    ecx,edx
c000b642:	81 e1 01 08 00 00    	and    ecx,0x801
c000b648:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000b64e:	74 3e                	je     c000b68e <VAS::scanForEviction()+0x7e>
c000b650:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b656:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000b65c:	76 2b                	jbe    c000b689 <VAS::scanForEviction()+0x79>
c000b65e:	47                   	inc    edi
c000b65f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000b666:	83 ff 03             	cmp    edi,0x3
c000b669:	74 32                	je     c000b69d <VAS::scanForEviction()+0x8d>
c000b66b:	31 db                	xor    ebx,ebx
c000b66d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000b673:	75 c0                	jne    c000b635 <VAS::scanForEviction()+0x25>
c000b675:	89 da                	mov    edx,ebx
c000b677:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000b67a:	c1 ea 16             	shr    edx,0x16
c000b67d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000b681:	75 b2                	jne    c000b635 <VAS::scanForEviction()+0x25>
c000b683:	81 c3 00 00 40 00    	add    ebx,0x400000
c000b689:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000b68c:	eb 91                	jmp    c000b61f <VAS::scanForEviction()+0xf>
c000b68e:	f6 c2 20             	test   dl,0x20
c000b691:	74 13                	je     c000b6a6 <VAS::scanForEviction()+0x96>
c000b693:	83 e2 df             	and    edx,0xffffffdf
c000b696:	89 10                	mov    DWORD PTR [eax],edx
c000b698:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000b69b:	eb b3                	jmp    c000b650 <VAS::scanForEviction()+0x40>
c000b69d:	83 c4 10             	add    esp,0x10
c000b6a0:	31 c0                	xor    eax,eax
c000b6a2:	5b                   	pop    ebx
c000b6a3:	5e                   	pop    esi
c000b6a4:	5f                   	pop    edi
c000b6a5:	c3                   	ret    
c000b6a6:	83 ec 08             	sub    esp,0x8
c000b6a9:	89 d0                	mov    eax,edx
c000b6ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b6b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6b4:	53                   	push   ebx
c000b6b5:	68 06 f0 01 c0       	push   0xc001f006
c000b6ba:	e8 31 02 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c000b6bf:	58                   	pop    eax
c000b6c0:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000b6c3:	5a                   	pop    edx
c000b6c4:	51                   	push   ecx
c000b6c5:	56                   	push   esi
c000b6c6:	e8 95 fd ff ff       	call   c000b460 <VAS::evict(unsigned long)>
c000b6cb:	5b                   	pop    ebx
c000b6cc:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b6cf:	5f                   	pop    edi
c000b6d0:	50                   	push   eax
c000b6d1:	68 1a f0 01 c0       	push   0xc001f01a
c000b6d6:	e8 15 02 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c000b6db:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000b6e2:	83 c4 10             	add    esp,0x10
c000b6e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b6e9:	83 c4 10             	add    esp,0x10
c000b6ec:	5b                   	pop    ebx
c000b6ed:	5e                   	pop    esi
c000b6ee:	5f                   	pop    edi
c000b6ef:	c3                   	ret    

c000b6f0 <mapVASFirstTime>:
c000b6f0:	55                   	push   ebp
c000b6f1:	57                   	push   edi
c000b6f2:	56                   	push   esi
c000b6f3:	53                   	push   ebx
c000b6f4:	83 ec 0c             	sub    esp,0xc
c000b6f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b6fc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000b6ff:	4a                   	dec    edx
c000b700:	0f 84 8c 00 00 00    	je     c000b792 <mapVASFirstTime+0xa2>
c000b706:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000b709:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000b70c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000b711:	c1 e5 15             	shl    ebp,0x15
c000b714:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000b719:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000b71f:	29 eb                	sub    ebx,ebp
c000b721:	29 ef                	sub    edi,ebp
c000b723:	e8 06 d8 ff ff       	call   c0008f2e <Phys::allocatePage()>
c000b728:	83 ec 0c             	sub    esp,0xc
c000b72b:	68 03 04 00 00       	push   0x403
c000b730:	6a 01                	push   0x1
c000b732:	53                   	push   ebx
c000b733:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000b739:	50                   	push   eax
c000b73a:	56                   	push   esi
c000b73b:	e8 ec f8 ff ff       	call   c000b02c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b740:	83 c4 20             	add    esp,0x20
c000b743:	39 fb                	cmp    ebx,edi
c000b745:	75 dc                	jne    c000b723 <mapVASFirstTime+0x33>
c000b747:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000b74c:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000b751:	29 eb                	sub    ebx,ebp
c000b753:	29 ef                	sub    edi,ebp
c000b755:	e8 d4 d7 ff ff       	call   c0008f2e <Phys::allocatePage()>
c000b75a:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000b75e:	19 d2                	sbb    edx,edx
c000b760:	83 ec 0c             	sub    esp,0xc
c000b763:	83 e2 04             	and    edx,0x4
c000b766:	81 c2 03 04 00 00    	add    edx,0x403
c000b76c:	52                   	push   edx
c000b76d:	6a 01                	push   0x1
c000b76f:	53                   	push   ebx
c000b770:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000b776:	50                   	push   eax
c000b777:	56                   	push   esi
c000b778:	e8 af f8 ff ff       	call   c000b02c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b77d:	83 c4 20             	add    esp,0x20
c000b780:	39 df                	cmp    edi,ebx
c000b782:	75 d1                	jne    c000b755 <mapVASFirstTime+0x65>
c000b784:	0f 20 d8             	mov    eax,cr3
c000b787:	0f 22 d8             	mov    cr3,eax
c000b78a:	83 c4 0c             	add    esp,0xc
c000b78d:	5b                   	pop    ebx
c000b78e:	5e                   	pop    esi
c000b78f:	5f                   	pop    edi
c000b790:	5d                   	pop    ebp
c000b791:	c3                   	ret    
c000b792:	83 ec 0c             	sub    esp,0xc
c000b795:	68 2d f0 01 c0       	push   0xc001f02d
c000b79a:	e8 51 01 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c000b79f:	83 c4 10             	add    esp,0x10
c000b7a2:	83 c4 0c             	add    esp,0xc
c000b7a5:	5b                   	pop    ebx
c000b7a6:	5e                   	pop    esi
c000b7a7:	5f                   	pop    edi
c000b7a8:	5d                   	pop    ebp
c000b7a9:	c3                   	ret    

c000b7aa <__cxa_atexit>:
c000b7aa:	31 c0                	xor    eax,eax
c000b7ac:	c3                   	ret    

c000b7ad <__cxa_finalize>:
c000b7ad:	c3                   	ret    

c000b7ae <__stack_chk_fail>:
c000b7ae:	55                   	push   ebp
c000b7af:	89 e5                	mov    ebp,esp
c000b7b1:	83 ec 10             	sub    esp,0x10
c000b7b4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b7b7:	68 46 f0 01 c0       	push   0xc001f046
c000b7bc:	e8 2f 01 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c000b7c1:	58                   	pop    eax
c000b7c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b7c5:	5a                   	pop    edx
c000b7c6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000b7c9:	68 46 f0 01 c0       	push   0xc001f046
c000b7ce:	e8 1d 01 00 00       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c000b7d3:	c7 04 24 4e f0 01 c0 	mov    DWORD PTR [esp],0xc001f04e
c000b7da:	e8 60 5c 00 00       	call   c001143f <Krnl::panic(char const*)>
c000b7df:	83 c4 10             	add    esp,0x10
c000b7e2:	c9                   	leave  
c000b7e3:	c3                   	ret    

c000b7e4 <__cxa_pure_virtual>:
c000b7e4:	83 ec 18             	sub    esp,0x18
c000b7e7:	68 66 f0 01 c0       	push   0xc001f066
c000b7ec:	e8 4e 5c 00 00       	call   c001143f <Krnl::panic(char const*)>
c000b7f1:	83 c4 1c             	add    esp,0x1c
c000b7f4:	c3                   	ret    

c000b7f5 <operator new[](unsigned long)>:
c000b7f5:	e9 67 d3 ff ff       	jmp    c0008b61 <malloc>

c000b7fa <operator delete(void*, unsigned long)>:
c000b7fa:	e9 82 d3 ff ff       	jmp    c0008b81 <rfree>

c000b7ff <operator delete[](void*)>:
c000b7ff:	e9 7d d3 ff ff       	jmp    c0008b81 <rfree>

c000b804 <operator delete[](void*, unsigned long)>:
c000b804:	e9 78 d3 ff ff       	jmp    c0008b81 <rfree>

c000b809 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000b809:	55                   	push   ebp
c000b80a:	b9 04 00 00 00       	mov    ecx,0x4
c000b80f:	57                   	push   edi
c000b810:	56                   	push   esi
c000b811:	be 7b ec 01 c0       	mov    esi,0xc001ec7b
c000b816:	53                   	push   ebx
c000b817:	83 ec 20             	sub    esp,0x20
c000b81a:	a1 7a ec 01 c0       	mov    eax,ds:0xc001ec7a
c000b81f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b823:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000b827:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b82b:	a1 87 ec 01 c0       	mov    eax,ds:0xc001ec87
c000b830:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b834:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b838:	fc                   	cld    
c000b839:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b83b:	89 ee                	mov    esi,ebp
c000b83d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b841:	eb 02                	jmp    c000b845 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000b843:	89 c6                	mov    esi,eax
c000b845:	31 d2                	xor    edx,edx
c000b847:	41                   	inc    ecx
c000b848:	89 f0                	mov    eax,esi
c000b84a:	f7 f3                	div    ebx
c000b84c:	39 de                	cmp    esi,ebx
c000b84e:	73 f3                	jae    c000b843 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000b850:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b853:	eb 02                	jmp    c000b857 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000b855:	89 c5                	mov    ebp,eax
c000b857:	31 d2                	xor    edx,edx
c000b859:	49                   	dec    ecx
c000b85a:	89 e8                	mov    eax,ebp
c000b85c:	f7 f3                	div    ebx
c000b85e:	39 dd                	cmp    ebp,ebx
c000b860:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000b864:	88 11                	mov    BYTE PTR [ecx],dl
c000b866:	73 ed                	jae    c000b855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000b868:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b86c:	83 c4 20             	add    esp,0x20
c000b86f:	5b                   	pop    ebx
c000b870:	5e                   	pop    esi
c000b871:	5f                   	pop    edi
c000b872:	5d                   	pop    ebp
c000b873:	c3                   	ret    

c000b874 <Dbg::logc(char)>:
c000b874:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b878:	f6 05 00 1d 02 c0 10 	test   BYTE PTR ds:0xc0021d00,0x10
c000b87f:	75 12                	jne    c000b893 <Dbg::logc(char)+0x1f>
c000b881:	ba fd 03 00 00       	mov    edx,0x3fd
c000b886:	ec                   	in     al,dx
c000b887:	a8 20                	test   al,0x20
c000b889:	74 fb                	je     c000b886 <Dbg::logc(char)+0x12>
c000b88b:	ba f8 03 00 00       	mov    edx,0x3f8
c000b890:	88 c8                	mov    al,cl
c000b892:	ee                   	out    dx,al
c000b893:	c3                   	ret    

c000b894 <Dbg::logs(char*)>:
c000b894:	53                   	push   ebx
c000b895:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b899:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b89c:	84 c0                	test   al,al
c000b89e:	74 0f                	je     c000b8af <Dbg::logs(char*)+0x1b>
c000b8a0:	50                   	push   eax
c000b8a1:	43                   	inc    ebx
c000b8a2:	e8 cd ff ff ff       	call   c000b874 <Dbg::logc(char)>
c000b8a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b8aa:	5a                   	pop    edx
c000b8ab:	84 c0                	test   al,al
c000b8ad:	75 f1                	jne    c000b8a0 <Dbg::logs(char*)+0xc>
c000b8af:	5b                   	pop    ebx
c000b8b0:	c3                   	ret    

c000b8b1 <Dbg::logWriteInt(unsigned int)>:
c000b8b1:	83 ec 10             	sub    esp,0x10
c000b8b4:	6a 0a                	push   0xa
c000b8b6:	8d 44 24 08          	lea    eax,[esp+0x8]
c000b8ba:	50                   	push   eax
c000b8bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b8bf:	50                   	push   eax
c000b8c0:	e8 44 ff ff ff       	call   c000b809 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000b8c5:	50                   	push   eax
c000b8c6:	e8 c9 ff ff ff       	call   c000b894 <Dbg::logs(char*)>
c000b8cb:	83 c4 20             	add    esp,0x20
c000b8ce:	c3                   	ret    

c000b8cf <Dbg::logWriteIntBase(unsigned int, int)>:
c000b8cf:	83 ec 10             	sub    esp,0x10
c000b8d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b8d6:	50                   	push   eax
c000b8d7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000b8db:	50                   	push   eax
c000b8dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b8e0:	52                   	push   edx
c000b8e1:	e8 23 ff ff ff       	call   c000b809 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000b8e6:	50                   	push   eax
c000b8e7:	e8 a8 ff ff ff       	call   c000b894 <Dbg::logs(char*)>
c000b8ec:	83 c4 20             	add    esp,0x20
c000b8ef:	c3                   	ret    

c000b8f0 <Dbg::kprintf(char const*, ...)>:
c000b8f0:	55                   	push   ebp
c000b8f1:	57                   	push   edi
c000b8f2:	56                   	push   esi
c000b8f3:	53                   	push   ebx
c000b8f4:	83 ec 0c             	sub    esp,0xc
c000b8f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b8fb:	f6 05 00 1d 02 c0 10 	test   BYTE PTR ds:0xc0021d00,0x10
c000b902:	74 08                	je     c000b90c <Dbg::kprintf(char const*, ...)+0x1c>
c000b904:	83 c4 0c             	add    esp,0xc
c000b907:	5b                   	pop    ebx
c000b908:	5e                   	pop    esi
c000b909:	5f                   	pop    edi
c000b90a:	5d                   	pop    ebp
c000b90b:	c3                   	ret    
c000b90c:	8d 44 24 24          	lea    eax,[esp+0x24]
c000b910:	31 ff                	xor    edi,edi
c000b912:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b916:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b919:	84 c0                	test   al,al
c000b91b:	74 e7                	je     c000b904 <Dbg::kprintf(char const*, ...)+0x14>
c000b91d:	8d 77 01             	lea    esi,[edi+0x1]
c000b920:	3c 25                	cmp    al,0x25
c000b922:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000b925:	75 47                	jne    c000b96e <Dbg::kprintf(char const*, ...)+0x7e>
c000b927:	83 c7 02             	add    edi,0x2
c000b92a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b92d:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000b930:	83 e8 25             	sub    eax,0x25
c000b933:	3c 53                	cmp    al,0x53
c000b935:	0f 87 d2 00 00 00    	ja     c000ba0d <Dbg::kprintf(char const*, ...)+0x11d>
c000b93b:	25 ff 00 00 00       	and    eax,0xff
c000b940:	ff 24 85 7c f0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0f84]
c000b947:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b94b:	89 c8                	mov    eax,ecx
c000b94d:	83 c1 04             	add    ecx,0x4
c000b950:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000b954:	8b 28                	mov    ebp,DWORD PTR [eax]
c000b956:	55                   	push   ebp
c000b957:	e8 55 ff ff ff       	call   c000b8b1 <Dbg::logWriteInt(unsigned int)>
c000b95c:	58                   	pop    eax
c000b95d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b960:	84 c0                	test   al,al
c000b962:	74 a0                	je     c000b904 <Dbg::kprintf(char const*, ...)+0x14>
c000b964:	8d 77 01             	lea    esi,[edi+0x1]
c000b967:	3c 25                	cmp    al,0x25
c000b969:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000b96c:	74 b9                	je     c000b927 <Dbg::kprintf(char const*, ...)+0x37>
c000b96e:	50                   	push   eax
c000b96f:	89 f7                	mov    edi,esi
c000b971:	e8 fe fe ff ff       	call   c000b874 <Dbg::logc(char)>
c000b976:	89 ee                	mov    esi,ebp
c000b978:	58                   	pop    eax
c000b979:	eb e2                	jmp    c000b95d <Dbg::kprintf(char const*, ...)+0x6d>
c000b97b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b97f:	89 c8                	mov    eax,ecx
c000b981:	83 c1 04             	add    ecx,0x4
c000b984:	8b 00                	mov    eax,DWORD PTR [eax]
c000b986:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000b98a:	50                   	push   eax
c000b98b:	e8 04 ff ff ff       	call   c000b894 <Dbg::logs(char*)>
c000b990:	58                   	pop    eax
c000b991:	eb ca                	jmp    c000b95d <Dbg::kprintf(char const*, ...)+0x6d>
c000b993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b997:	89 d0                	mov    eax,edx
c000b999:	83 c2 04             	add    edx,0x4
c000b99c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9a2:	50                   	push   eax
c000b9a3:	e8 09 ff ff ff       	call   c000b8b1 <Dbg::logWriteInt(unsigned int)>
c000b9a8:	58                   	pop    eax
c000b9a9:	eb b2                	jmp    c000b95d <Dbg::kprintf(char const*, ...)+0x6d>
c000b9ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b9af:	89 d0                	mov    eax,edx
c000b9b1:	83 c2 04             	add    edx,0x4
c000b9b4:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000b9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9bb:	50                   	push   eax
c000b9bc:	e8 b3 fe ff ff       	call   c000b874 <Dbg::logc(char)>
c000b9c1:	58                   	pop    eax
c000b9c2:	eb 99                	jmp    c000b95d <Dbg::kprintf(char const*, ...)+0x6d>
c000b9c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b9c8:	89 c8                	mov    eax,ecx
c000b9ca:	83 c1 04             	add    ecx,0x4
c000b9cd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000b9d1:	6a 10                	push   0x10
c000b9d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b9d5:	51                   	push   ecx
c000b9d6:	e8 f4 fe ff ff       	call   c000b8cf <Dbg::logWriteIntBase(unsigned int, int)>
c000b9db:	5d                   	pop    ebp
c000b9dc:	58                   	pop    eax
c000b9dd:	e9 7b ff ff ff       	jmp    c000b95d <Dbg::kprintf(char const*, ...)+0x6d>
c000b9e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b9e6:	89 d0                	mov    eax,edx
c000b9e8:	83 c2 08             	add    edx,0x8
c000b9eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9ef:	6a 10                	push   0x10
c000b9f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9f3:	50                   	push   eax
c000b9f4:	e8 d6 fe ff ff       	call   c000b8cf <Dbg::logWriteIntBase(unsigned int, int)>
c000b9f9:	58                   	pop    eax
c000b9fa:	5a                   	pop    edx
c000b9fb:	e9 5d ff ff ff       	jmp    c000b95d <Dbg::kprintf(char const*, ...)+0x6d>
c000ba00:	6a 25                	push   0x25
c000ba02:	e8 6d fe ff ff       	call   c000b874 <Dbg::logc(char)>
c000ba07:	5a                   	pop    edx
c000ba08:	e9 50 ff ff ff       	jmp    c000b95d <Dbg::kprintf(char const*, ...)+0x6d>
c000ba0d:	6a 25                	push   0x25
c000ba0f:	e8 60 fe ff ff       	call   c000b874 <Dbg::logc(char)>
c000ba14:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ba18:	50                   	push   eax
c000ba19:	e8 56 fe ff ff       	call   c000b874 <Dbg::logc(char)>
c000ba1e:	5a                   	pop    edx
c000ba1f:	59                   	pop    ecx
c000ba20:	e9 38 ff ff ff       	jmp    c000b95d <Dbg::kprintf(char const*, ...)+0x6d>
c000ba25:	90                   	nop

c000ba26 <File::read(unsigned long long, void*, int*)>:
c000ba26:	53                   	push   ebx
c000ba27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ba2b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ba2f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ba36:	3c 19                	cmp    al,0x19
c000ba38:	77 35                	ja     c000ba6f <File::read(unsigned long long, void*, int*)+0x49>
c000ba3a:	8b 04 85 40 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbdc0]
c000ba41:	85 c0                	test   eax,eax
c000ba43:	74 2a                	je     c000ba6f <File::read(unsigned long long, void*, int*)+0x49>
c000ba45:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ba4b:	85 c0                	test   eax,eax
c000ba4d:	74 20                	je     c000ba6f <File::read(unsigned long long, void*, int*)+0x49>
c000ba4f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba53:	74 21                	je     c000ba76 <File::read(unsigned long long, void*, int*)+0x50>
c000ba55:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ba57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ba5b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ba61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba69:	5b                   	pop    ebx
c000ba6a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ba6d:	ff e0                	jmp    eax
c000ba6f:	b8 0b 00 00 00       	mov    eax,0xb
c000ba74:	eb 05                	jmp    c000ba7b <File::read(unsigned long long, void*, int*)+0x55>
c000ba76:	b8 05 00 00 00       	mov    eax,0x5
c000ba7b:	5b                   	pop    ebx
c000ba7c:	c3                   	ret    
c000ba7d:	90                   	nop

c000ba7e <File::write(unsigned long long, void*, int*)>:
c000ba7e:	53                   	push   ebx
c000ba7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ba83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ba87:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ba8e:	3c 19                	cmp    al,0x19
c000ba90:	77 35                	ja     c000bac7 <File::write(unsigned long long, void*, int*)+0x49>
c000ba92:	8b 04 85 40 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbdc0]
c000ba99:	85 c0                	test   eax,eax
c000ba9b:	74 2a                	je     c000bac7 <File::write(unsigned long long, void*, int*)+0x49>
c000ba9d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000baa3:	85 c0                	test   eax,eax
c000baa5:	74 20                	je     c000bac7 <File::write(unsigned long long, void*, int*)+0x49>
c000baa7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000baab:	74 21                	je     c000bace <File::write(unsigned long long, void*, int*)+0x50>
c000baad:	8b 08                	mov    ecx,DWORD PTR [eax]
c000baaf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000bab3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000bab9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000babd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bac1:	5b                   	pop    ebx
c000bac2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000bac5:	ff e0                	jmp    eax
c000bac7:	b8 0b 00 00 00       	mov    eax,0xb
c000bacc:	eb 05                	jmp    c000bad3 <File::write(unsigned long long, void*, int*)+0x55>
c000bace:	b8 05 00 00 00       	mov    eax,0x5
c000bad3:	5b                   	pop    ebx
c000bad4:	c3                   	ret    
c000bad5:	90                   	nop

c000bad6 <Directory::read(unsigned long long, void*, int*)>:
c000bad6:	53                   	push   ebx
c000bad7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000badb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000badf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000bae6:	3c 19                	cmp    al,0x19
c000bae8:	77 35                	ja     c000bb1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000baea:	8b 04 85 40 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbdc0]
c000baf1:	85 c0                	test   eax,eax
c000baf3:	74 2a                	je     c000bb1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000baf5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bafb:	85 c0                	test   eax,eax
c000bafd:	74 20                	je     c000bb1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000baff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb03:	74 21                	je     c000bb26 <Directory::read(unsigned long long, void*, int*)+0x50>
c000bb05:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bb07:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000bb0b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000bb11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb19:	5b                   	pop    ebx
c000bb1a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000bb1d:	ff e0                	jmp    eax
c000bb1f:	b8 0b 00 00 00       	mov    eax,0xb
c000bb24:	eb 05                	jmp    c000bb2b <Directory::read(unsigned long long, void*, int*)+0x55>
c000bb26:	b8 05 00 00 00       	mov    eax,0x5
c000bb2b:	5b                   	pop    ebx
c000bb2c:	c3                   	ret    
c000bb2d:	90                   	nop

c000bb2e <Directory::write(unsigned long long, void*, int*)>:
c000bb2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb32:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000bb39:	b8 0b 00 00 00       	mov    eax,0xb
c000bb3e:	80 fa 19             	cmp    dl,0x19
c000bb41:	77 18                	ja     c000bb5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000bb43:	8b 14 95 40 42 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbdc0]
c000bb4a:	85 d2                	test   edx,edx
c000bb4c:	74 0d                	je     c000bb5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000bb4e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000bb55:	19 c0                	sbb    eax,eax
c000bb57:	83 e0 0a             	and    eax,0xa
c000bb5a:	40                   	inc    eax
c000bb5b:	c3                   	ret    

c000bb5c <File::isAtty()>:
c000bb5c:	31 c0                	xor    eax,eax
c000bb5e:	c3                   	ret    
c000bb5f:	90                   	nop

c000bb60 <Directory::isAtty()>:
c000bb60:	31 c0                	xor    eax,eax
c000bb62:	c3                   	ret    
c000bb63:	90                   	nop

c000bb64 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000bb64:	b8 0a 00 00 00       	mov    eax,0xa
c000bb69:	c3                   	ret    

c000bb6a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000bb6a:	b8 0a 00 00 00       	mov    eax,0xa
c000bb6f:	c3                   	ret    

c000bb70 <Filesystem::allocateSwapfile(char const*, int)>:
c000bb70:	31 c0                	xor    eax,eax
c000bb72:	31 d2                	xor    edx,edx
c000bb74:	c3                   	ret    
c000bb75:	90                   	nop

c000bb76 <File::~File()>:
c000bb76:	83 ec 0c             	sub    esp,0xc
c000bb79:	ba 3c f2 01 c0       	mov    edx,0xc001f23c
c000bb7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb82:	89 10                	mov    DWORD PTR [eax],edx
c000bb84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb88:	83 ec 0c             	sub    esp,0xc
c000bb8b:	50                   	push   eax
c000bb8c:	e8 ab e8 ff ff       	call   c000a43c <UnixFile::~UnixFile()>
c000bb91:	83 c4 10             	add    esp,0x10
c000bb94:	90                   	nop
c000bb95:	83 c4 0c             	add    esp,0xc
c000bb98:	c3                   	ret    
c000bb99:	90                   	nop

c000bb9a <File::~File()>:
c000bb9a:	83 ec 0c             	sub    esp,0xc
c000bb9d:	83 ec 0c             	sub    esp,0xc
c000bba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba4:	e8 cd ff ff ff       	call   c000bb76 <File::~File()>
c000bba9:	83 c4 10             	add    esp,0x10
c000bbac:	83 ec 08             	sub    esp,0x8
c000bbaf:	68 14 01 00 00       	push   0x114
c000bbb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbb8:	e8 3d fc ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000bbbd:	83 c4 10             	add    esp,0x10
c000bbc0:	83 c4 0c             	add    esp,0xc
c000bbc3:	c3                   	ret    

c000bbc4 <Directory::~Directory()>:
c000bbc4:	83 ec 0c             	sub    esp,0xc
c000bbc7:	ba 58 f2 01 c0       	mov    edx,0xc001f258
c000bbcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbd0:	89 10                	mov    DWORD PTR [eax],edx
c000bbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbd6:	83 ec 0c             	sub    esp,0xc
c000bbd9:	50                   	push   eax
c000bbda:	e8 5d e8 ff ff       	call   c000a43c <UnixFile::~UnixFile()>
c000bbdf:	83 c4 10             	add    esp,0x10
c000bbe2:	90                   	nop
c000bbe3:	83 c4 0c             	add    esp,0xc
c000bbe6:	c3                   	ret    
c000bbe7:	90                   	nop

c000bbe8 <Directory::~Directory()>:
c000bbe8:	83 ec 0c             	sub    esp,0xc
c000bbeb:	83 ec 0c             	sub    esp,0xc
c000bbee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbf2:	e8 cd ff ff ff       	call   c000bbc4 <Directory::~Directory()>
c000bbf7:	83 c4 10             	add    esp,0x10
c000bbfa:	83 ec 08             	sub    esp,0x8
c000bbfd:	68 14 01 00 00       	push   0x114
c000bc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc06:	e8 ef fb ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000bc0b:	83 c4 10             	add    esp,0x10
c000bc0e:	83 c4 0c             	add    esp,0xc
c000bc11:	c3                   	ret    

c000bc12 <Filesystem::Filesystem()>:
c000bc12:	ba d4 f1 01 c0       	mov    edx,0xc001f1d4
c000bc17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc1b:	89 10                	mov    DWORD PTR [eax],edx
c000bc1d:	8b 15 d4 1d 02 c0    	mov    edx,DWORD PTR ds:0xc0021dd4
c000bc23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000bc2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc2e:	a3 d4 1d 02 c0       	mov    ds:0xc0021dd4,eax
c000bc33:	90                   	nop
c000bc34:	c3                   	ret    
c000bc35:	90                   	nop

c000bc36 <Filesystem::~Filesystem()>:
c000bc36:	ba d4 f1 01 c0       	mov    edx,0xc001f1d4
c000bc3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc3f:	89 10                	mov    DWORD PTR [eax],edx
c000bc41:	90                   	nop
c000bc42:	c3                   	ret    
c000bc43:	90                   	nop

c000bc44 <Filesystem::~Filesystem()>:
c000bc44:	83 ec 0c             	sub    esp,0xc
c000bc47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bc4b:	e8 e6 ff ff ff       	call   c000bc36 <Filesystem::~Filesystem()>
c000bc50:	83 c4 04             	add    esp,0x4
c000bc53:	83 ec 08             	sub    esp,0x8
c000bc56:	6a 08                	push   0x8
c000bc58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc5c:	e8 99 fb ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000bc61:	83 c4 10             	add    esp,0x10
c000bc64:	83 c4 0c             	add    esp,0xc
c000bc67:	c3                   	ret    

c000bc68 <Fs::getcwd(Process*, char*, int)>:
c000bc68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bc6c:	31 c0                	xor    eax,eax
c000bc6e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000bc71:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000bc75:	7d 15                	jge    c000bc8c <Fs::getcwd(Process*, char*, int)+0x24>
c000bc77:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000bc7b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000bc82:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000bc85:	84 c9                	test   cl,cl
c000bc87:	74 06                	je     c000bc8f <Fs::getcwd(Process*, char*, int)+0x27>
c000bc89:	40                   	inc    eax
c000bc8a:	eb e2                	jmp    c000bc6e <Fs::getcwd(Process*, char*, int)+0x6>
c000bc8c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000bc8f:	31 c0                	xor    eax,eax
c000bc91:	c3                   	ret    

c000bc92 <Fs::initVFS()>:
c000bc92:	83 ec 18             	sub    esp,0x18
c000bc95:	6a 08                	push   0x8
c000bc97:	e8 c5 ce ff ff       	call   c0008b61 <malloc>
c000bc9c:	89 04 24             	mov    DWORD PTR [esp],eax
c000bc9f:	e8 a4 c2 00 00       	call   c0017f48 <FAT::FAT()>
c000bca4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bcab:	e8 b1 ce ff ff       	call   c0008b61 <malloc>
c000bcb0:	89 04 24             	mov    DWORD PTR [esp],eax
c000bcb3:	e8 1c d6 00 00       	call   c00192d4 <ISO9660::ISO9660()>
c000bcb8:	83 c4 1c             	add    esp,0x1c
c000bcbb:	c3                   	ret    

c000bcbc <Fs::standardiseFiles(char*, char const*, char const*)>:
c000bcbc:	55                   	push   ebp
c000bcbd:	57                   	push   edi
c000bcbe:	56                   	push   esi
c000bcbf:	53                   	push   ebx
c000bcc0:	81 ec 10 04 00 00    	sub    esp,0x410
c000bcc6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000bccd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000bcd4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000bcdb:	68 00 04 00 00       	push   0x400
c000bce0:	6a 00                	push   0x0
c000bce2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000bce6:	56                   	push   esi
c000bce7:	e8 04 48 ff ff       	call   c00004f0 <memset>
c000bcec:	83 c4 10             	add    esp,0x10
c000bcef:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000bcf3:	75 0b                	jne    c000bd00 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000bcf5:	50                   	push   eax
c000bcf6:	50                   	push   eax
c000bcf7:	57                   	push   edi
c000bcf8:	56                   	push   esi
c000bcf9:	e8 22 49 ff ff       	call   c0000620 <strcpy>
c000bcfe:	eb 41                	jmp    c000bd41 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000bd00:	8a 07                	mov    al,BYTE PTR [edi]
c000bd02:	3c 5c                	cmp    al,0x5c
c000bd04:	74 04                	je     c000bd0a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000bd06:	3c 2f                	cmp    al,0x2f
c000bd08:	75 18                	jne    c000bd22 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000bd0a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000bd0d:	3c 60                	cmp    al,0x60
c000bd0f:	7e 03                	jle    c000bd14 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000bd11:	83 e8 20             	sub    eax,0x20
c000bd14:	88 04 24             	mov    BYTE PTR [esp],al
c000bd17:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000bd1e:	50                   	push   eax
c000bd1f:	50                   	push   eax
c000bd20:	eb 18                	jmp    c000bd3a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000bd22:	50                   	push   eax
c000bd23:	50                   	push   eax
c000bd24:	55                   	push   ebp
c000bd25:	56                   	push   esi
c000bd26:	e8 f5 48 ff ff       	call   c0000620 <strcpy>
c000bd2b:	5a                   	pop    edx
c000bd2c:	59                   	pop    ecx
c000bd2d:	68 7f fe 01 c0       	push   0xc001fe7f
c000bd32:	56                   	push   esi
c000bd33:	e8 a8 4a ff ff       	call   c00007e0 <strcat>
c000bd38:	5d                   	pop    ebp
c000bd39:	58                   	pop    eax
c000bd3a:	57                   	push   edi
c000bd3b:	56                   	push   esi
c000bd3c:	e8 9f 4a ff ff       	call   c00007e0 <strcat>
c000bd41:	83 c4 10             	add    esp,0x10
c000bd44:	8a 04 24             	mov    al,BYTE PTR [esp]
c000bd47:	3c 60                	cmp    al,0x60
c000bd49:	7e 03                	jle    c000bd4e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000bd4b:	83 e8 20             	sub    eax,0x20
c000bd4e:	88 04 24             	mov    BYTE PTR [esp],al
c000bd51:	88 03                	mov    BYTE PTR [ebx],al
c000bd53:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000bd5a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000bd60:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000bd64:	bf 03 00 00 00       	mov    edi,0x3
c000bd69:	b8 03 00 00 00       	mov    eax,0x3
c000bd6e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000bd71:	84 d2                	test   dl,dl
c000bd73:	0f 84 91 00 00 00    	je     c000be0a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000bd79:	8d 4f 01             	lea    ecx,[edi+0x1]
c000bd7c:	80 fa 5c             	cmp    dl,0x5c
c000bd7f:	74 05                	je     c000bd86 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000bd81:	80 fa 2f             	cmp    dl,0x2f
c000bd84:	75 12                	jne    c000bd98 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000bd86:	89 c5                	mov    ebp,eax
c000bd88:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000bd8d:	74 09                	je     c000bd98 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000bd8f:	40                   	inc    eax
c000bd90:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000bd94:	89 cf                	mov    edi,ecx
c000bd96:	eb d6                	jmp    c000bd6e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000bd98:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000bd9d:	75 5b                	jne    c000bdfa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000bd9f:	80 fa 2e             	cmp    dl,0x2e
c000bda2:	75 56                	jne    c000bdfa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000bda4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000bda8:	74 19                	je     c000bdc3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000bdaa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000bdaf:	74 53                	je     c000be04 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000bdb1:	89 f9                	mov    ecx,edi
c000bdb3:	41                   	inc    ecx
c000bdb4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000bdb7:	80 fa 2f             	cmp    dl,0x2f
c000bdba:	74 f7                	je     c000bdb3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000bdbc:	80 fa 5c             	cmp    dl,0x5c
c000bdbf:	74 f2                	je     c000bdb3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000bdc1:	eb d1                	jmp    c000bd94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000bdc3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000bdc8:	74 3a                	je     c000be04 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000bdca:	83 f8 03             	cmp    eax,0x3
c000bdcd:	74 c5                	je     c000bd94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000bdcf:	41                   	inc    ecx
c000bdd0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000bdd3:	80 fa 2f             	cmp    dl,0x2f
c000bdd6:	74 f7                	je     c000bdcf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000bdd8:	80 fa 5c             	cmp    dl,0x5c
c000bddb:	74 f2                	je     c000bdcf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000bddd:	48                   	dec    eax
c000bdde:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000bde2:	75 06                	jne    c000bdea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000bde4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000bde8:	eb f3                	jmp    c000bddd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000bdea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000bdee:	74 07                	je     c000bdf7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000bdf0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000bdf4:	48                   	dec    eax
c000bdf5:	eb f3                	jmp    c000bdea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000bdf7:	40                   	inc    eax
c000bdf8:	eb 9a                	jmp    c000bd94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000bdfa:	80 fa 2f             	cmp    dl,0x2f
c000bdfd:	74 95                	je     c000bd94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000bdff:	80 fa 5c             	cmp    dl,0x5c
c000be02:	74 90                	je     c000bd94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000be04:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000be07:	40                   	inc    eax
c000be08:	eb 8a                	jmp    c000bd94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000be0a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000be0e:	83 ec 0c             	sub    esp,0xc
c000be11:	53                   	push   ebx
c000be12:	e8 49 47 ff ff       	call   c0000560 <strlen>
c000be17:	83 c4 10             	add    esp,0x10
c000be1a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000be1f:	75 26                	jne    c000be47 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000be21:	83 ec 0c             	sub    esp,0xc
c000be24:	53                   	push   ebx
c000be25:	e8 36 47 ff ff       	call   c0000560 <strlen>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000be32:	74 26                	je     c000be5a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000be34:	83 ec 0c             	sub    esp,0xc
c000be37:	53                   	push   ebx
c000be38:	e8 23 47 ff ff       	call   c0000560 <strlen>
c000be3d:	83 c4 10             	add    esp,0x10
c000be40:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000be45:	eb c7                	jmp    c000be0e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000be47:	83 ec 0c             	sub    esp,0xc
c000be4a:	53                   	push   ebx
c000be4b:	e8 10 47 ff ff       	call   c0000560 <strlen>
c000be50:	83 c4 10             	add    esp,0x10
c000be53:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000be58:	74 c7                	je     c000be21 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000be5a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000be60:	5b                   	pop    ebx
c000be61:	5e                   	pop    esi
c000be62:	5f                   	pop    edi
c000be63:	5d                   	pop    ebp
c000be64:	c3                   	ret    
c000be65:	90                   	nop

c000be66 <File::File(char const*, Process*)>:
c000be66:	83 ec 0c             	sub    esp,0xc
c000be69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be6d:	83 ec 08             	sub    esp,0x8
c000be70:	6a 00                	push   0x0
c000be72:	50                   	push   eax
c000be73:	e8 e2 e3 ff ff       	call   c000a25a <UnixFile::UnixFile(int)>
c000be78:	83 c4 10             	add    esp,0x10
c000be7b:	ba 3c f2 01 c0       	mov    edx,0xc001f23c
c000be80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be84:	89 10                	mov    DWORD PTR [eax],edx
c000be86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be8a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000be90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be94:	83 c0 0d             	add    eax,0xd
c000be97:	83 ec 04             	sub    esp,0x4
c000be9a:	52                   	push   edx
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	50                   	push   eax
c000bea0:	e8 17 fe ff ff       	call   c000bcbc <Fs::standardiseFiles(char*, char const*, char const*)>
c000bea5:	83 c4 10             	add    esp,0x10
c000bea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beac:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000beaf:	8d 50 bf             	lea    edx,[eax-0x41]
c000beb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bec0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bec8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bece:	25 ff 00 00 00       	and    eax,0xff
c000bed3:	8b 04 85 40 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbdc0]
c000beda:	85 c0                	test   eax,eax
c000bedc:	74 42                	je     c000bf20 <File::File(char const*, Process*)+0xba>
c000bede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bee2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bee8:	25 ff 00 00 00       	and    eax,0xff
c000beed:	8b 04 85 40 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbdc0]
c000bef4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000befa:	85 c0                	test   eax,eax
c000befc:	75 22                	jne    c000bf20 <File::File(char const*, Process*)+0xba>
c000befe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf02:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bf08:	25 ff 00 00 00       	and    eax,0xff
c000bf0d:	8b 04 85 40 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbdc0]
c000bf14:	83 ec 0c             	sub    esp,0xc
c000bf17:	50                   	push   eax
c000bf18:	e8 f9 1f 00 00       	call   c000df16 <LogicalDisk::mount()>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	90                   	nop
c000bf21:	83 c4 0c             	add    esp,0xc
c000bf24:	c3                   	ret    
c000bf25:	90                   	nop

c000bf26 <File::open(FileOpenMode)>:
c000bf26:	53                   	push   ebx
c000bf27:	b8 0b 00 00 00       	mov    eax,0xb
c000bf2c:	83 ec 08             	sub    esp,0x8
c000bf2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf33:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bf3a:	80 fa 19             	cmp    dl,0x19
c000bf3d:	77 40                	ja     c000bf7f <File::open(FileOpenMode)+0x59>
c000bf3f:	8b 14 95 40 42 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbdc0]
c000bf46:	85 d2                	test   edx,edx
c000bf48:	74 35                	je     c000bf7f <File::open(FileOpenMode)+0x59>
c000bf4a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000bf50:	85 d2                	test   edx,edx
c000bf52:	74 2b                	je     c000bf7f <File::open(FileOpenMode)+0x59>
c000bf54:	b8 06 00 00 00       	mov    eax,0x6
c000bf59:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bf5d:	75 20                	jne    c000bf7f <File::open(FileOpenMode)+0x59>
c000bf5f:	8b 02                	mov    eax,DWORD PTR [edx]
c000bf61:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bf67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf6b:	51                   	push   ecx
c000bf6c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bf6f:	51                   	push   ecx
c000bf70:	52                   	push   edx
c000bf71:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bf74:	83 c4 10             	add    esp,0x10
c000bf77:	85 c0                	test   eax,eax
c000bf79:	75 04                	jne    c000bf7f <File::open(FileOpenMode)+0x59>
c000bf7b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bf7f:	83 c4 08             	add    esp,0x8
c000bf82:	5b                   	pop    ebx
c000bf83:	c3                   	ret    

c000bf84 <File::close()>:
c000bf84:	53                   	push   ebx
c000bf85:	b8 0b 00 00 00       	mov    eax,0xb
c000bf8a:	83 ec 08             	sub    esp,0x8
c000bf8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bf91:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bf98:	80 fa 19             	cmp    dl,0x19
c000bf9b:	77 41                	ja     c000bfde <File::close()+0x5a>
c000bf9d:	8b 1c 95 40 42 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbdc0]
c000bfa4:	85 db                	test   ebx,ebx
c000bfa6:	74 36                	je     c000bfde <File::close()+0x5a>
c000bfa8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000bfaf:	74 2d                	je     c000bfde <File::close()+0x5a>
c000bfb1:	b8 05 00 00 00       	mov    eax,0x5
c000bfb6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bfba:	74 22                	je     c000bfde <File::close()+0x5a>
c000bfbc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000bfc0:	8b 04 95 40 42 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbdc0]
c000bfc7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bfcd:	53                   	push   ebx
c000bfce:	53                   	push   ebx
c000bfcf:	8b 10                	mov    edx,DWORD PTR [eax]
c000bfd1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bfd7:	50                   	push   eax
c000bfd8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000bfdb:	83 c4 10             	add    esp,0x10
c000bfde:	83 c4 08             	add    esp,0x8
c000bfe1:	5b                   	pop    ebx
c000bfe2:	c3                   	ret    
c000bfe3:	90                   	nop

c000bfe4 <File::seek(unsigned long long)>:
c000bfe4:	56                   	push   esi
c000bfe5:	53                   	push   ebx
c000bfe6:	b8 0b 00 00 00       	mov    eax,0xb
c000bfeb:	51                   	push   ecx
c000bfec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bff0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bff4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bffb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bfff:	80 fa 19             	cmp    dl,0x19
c000c002:	77 31                	ja     c000c035 <File::seek(unsigned long long)+0x51>
c000c004:	8b 14 95 40 42 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbdc0]
c000c00b:	85 d2                	test   edx,edx
c000c00d:	74 26                	je     c000c035 <File::seek(unsigned long long)+0x51>
c000c00f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000c015:	85 d2                	test   edx,edx
c000c017:	74 1c                	je     c000c035 <File::seek(unsigned long long)+0x51>
c000c019:	b8 05 00 00 00       	mov    eax,0x5
c000c01e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000c022:	74 11                	je     c000c035 <File::seek(unsigned long long)+0x51>
c000c024:	8b 02                	mov    eax,DWORD PTR [edx]
c000c026:	53                   	push   ebx
c000c027:	51                   	push   ecx
c000c028:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000c02e:	52                   	push   edx
c000c02f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c032:	83 c4 10             	add    esp,0x10
c000c035:	5a                   	pop    edx
c000c036:	5b                   	pop    ebx
c000c037:	5e                   	pop    esi
c000c038:	c3                   	ret    
c000c039:	90                   	nop

c000c03a <File::tell(unsigned long long*)>:
c000c03a:	83 ec 0c             	sub    esp,0xc
c000c03d:	b8 0b 00 00 00       	mov    eax,0xb
c000c042:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c046:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000c04d:	80 fa 19             	cmp    dl,0x19
c000c050:	77 34                	ja     c000c086 <File::tell(unsigned long long*)+0x4c>
c000c052:	8b 14 95 40 42 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbdc0]
c000c059:	85 d2                	test   edx,edx
c000c05b:	74 29                	je     c000c086 <File::tell(unsigned long long*)+0x4c>
c000c05d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000c063:	85 d2                	test   edx,edx
c000c065:	74 1f                	je     c000c086 <File::tell(unsigned long long*)+0x4c>
c000c067:	b8 05 00 00 00       	mov    eax,0x5
c000c06c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000c070:	74 14                	je     c000c086 <File::tell(unsigned long long*)+0x4c>
c000c072:	50                   	push   eax
c000c073:	8b 02                	mov    eax,DWORD PTR [edx]
c000c075:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c079:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000c07f:	52                   	push   edx
c000c080:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000c083:	83 c4 10             	add    esp,0x10
c000c086:	83 c4 0c             	add    esp,0xc
c000c089:	c3                   	ret    

c000c08a <File::rewind()>:
c000c08a:	83 ec 10             	sub    esp,0x10
c000c08d:	6a 00                	push   0x0
c000c08f:	6a 00                	push   0x0
c000c091:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c095:	e8 4a ff ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c000c09a:	83 c4 1c             	add    esp,0x1c
c000c09d:	c3                   	ret    

c000c09e <File::unlink()>:
c000c09e:	83 ec 0c             	sub    esp,0xc
c000c0a1:	b8 0b 00 00 00       	mov    eax,0xb
c000c0a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c0b1:	80 f9 19             	cmp    cl,0x19
c000c0b4:	77 2f                	ja     c000c0e5 <File::unlink()+0x47>
c000c0b6:	8b 0c 8d 40 42 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbdc0]
c000c0bd:	85 c9                	test   ecx,ecx
c000c0bf:	74 24                	je     c000c0e5 <File::unlink()+0x47>
c000c0c1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000c0c7:	85 c9                	test   ecx,ecx
c000c0c9:	74 1a                	je     c000c0e5 <File::unlink()+0x47>
c000c0cb:	b8 06 00 00 00       	mov    eax,0x6
c000c0d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c0d4:	75 0f                	jne    c000c0e5 <File::unlink()+0x47>
c000c0d6:	83 c2 0d             	add    edx,0xd
c000c0d9:	50                   	push   eax
c000c0da:	50                   	push   eax
c000c0db:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c0dd:	52                   	push   edx
c000c0de:	51                   	push   ecx
c000c0df:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000c0e2:	83 c4 10             	add    esp,0x10
c000c0e5:	83 c4 0c             	add    esp,0xc
c000c0e8:	c3                   	ret    
c000c0e9:	90                   	nop

c000c0ea <File::rename(char const*)>:
c000c0ea:	83 ec 0c             	sub    esp,0xc
c000c0ed:	b8 0b 00 00 00       	mov    eax,0xb
c000c0f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c0fd:	80 f9 19             	cmp    cl,0x19
c000c100:	77 32                	ja     c000c134 <File::rename(char const*)+0x4a>
c000c102:	8b 0c 8d 40 42 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbdc0]
c000c109:	85 c9                	test   ecx,ecx
c000c10b:	74 27                	je     c000c134 <File::rename(char const*)+0x4a>
c000c10d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000c113:	85 c9                	test   ecx,ecx
c000c115:	74 1d                	je     c000c134 <File::rename(char const*)+0x4a>
c000c117:	b8 06 00 00 00       	mov    eax,0x6
c000c11c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c120:	75 12                	jne    c000c134 <File::rename(char const*)+0x4a>
c000c122:	83 c2 0d             	add    edx,0xd
c000c125:	50                   	push   eax
c000c126:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c128:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c12c:	52                   	push   edx
c000c12d:	51                   	push   ecx
c000c12e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c131:	83 c4 10             	add    esp,0x10
c000c134:	83 c4 0c             	add    esp,0xc
c000c137:	c3                   	ret    

c000c138 <File::chfatattr(unsigned char, unsigned char)>:
c000c138:	57                   	push   edi
c000c139:	b8 0b 00 00 00       	mov    eax,0xb
c000c13e:	56                   	push   esi
c000c13f:	53                   	push   ebx
c000c140:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c144:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c148:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c14f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c153:	80 f9 19             	cmp    cl,0x19
c000c156:	77 37                	ja     c000c18f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000c158:	8b 0c 8d 40 42 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbdc0]
c000c15f:	85 c9                	test   ecx,ecx
c000c161:	74 2c                	je     c000c18f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000c163:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000c169:	85 c9                	test   ecx,ecx
c000c16b:	74 22                	je     c000c18f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000c16d:	b8 06 00 00 00       	mov    eax,0x6
c000c172:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c176:	75 17                	jne    c000c18f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000c178:	8b 39                	mov    edi,DWORD PTR [ecx]
c000c17a:	89 f0                	mov    eax,esi
c000c17c:	83 c2 0d             	add    edx,0xd
c000c17f:	0f b6 f0             	movzx  esi,al
c000c182:	0f b6 db             	movzx  ebx,bl
c000c185:	56                   	push   esi
c000c186:	53                   	push   ebx
c000c187:	52                   	push   edx
c000c188:	51                   	push   ecx
c000c189:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000c18c:	83 c4 10             	add    esp,0x10
c000c18f:	5b                   	pop    ebx
c000c190:	5e                   	pop    esi
c000c191:	5f                   	pop    edi
c000c192:	c3                   	ret    
c000c193:	90                   	nop

c000c194 <File::exists()>:
c000c194:	83 ec 0c             	sub    esp,0xc
c000c197:	31 c0                	xor    eax,eax
c000c199:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c19d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1a4:	80 f9 19             	cmp    cl,0x19
c000c1a7:	77 24                	ja     c000c1cd <File::exists()+0x39>
c000c1a9:	8b 0c 8d 40 42 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbdc0]
c000c1b0:	85 c9                	test   ecx,ecx
c000c1b2:	74 19                	je     c000c1cd <File::exists()+0x39>
c000c1b4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000c1ba:	85 c9                	test   ecx,ecx
c000c1bc:	74 0f                	je     c000c1cd <File::exists()+0x39>
c000c1be:	83 c2 0d             	add    edx,0xd
c000c1c1:	50                   	push   eax
c000c1c2:	50                   	push   eax
c000c1c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1c5:	52                   	push   edx
c000c1c6:	51                   	push   ecx
c000c1c7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c1ca:	83 c4 10             	add    esp,0x10
c000c1cd:	83 c4 0c             	add    esp,0xc
c000c1d0:	c3                   	ret    
c000c1d1:	90                   	nop

c000c1d2 <File::stat(unsigned long long*, bool*)>:
c000c1d2:	56                   	push   esi
c000c1d3:	53                   	push   ebx
c000c1d4:	50                   	push   eax
c000c1d5:	b8 0b 00 00 00       	mov    eax,0xb
c000c1da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1de:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c1e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c1ed:	80 f9 19             	cmp    cl,0x19
c000c1f0:	77 3d                	ja     c000c22f <File::stat(unsigned long long*, bool*)+0x5d>
c000c1f2:	8b 0c 8d 40 42 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbdc0]
c000c1f9:	85 c9                	test   ecx,ecx
c000c1fb:	74 32                	je     c000c22f <File::stat(unsigned long long*, bool*)+0x5d>
c000c1fd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000c203:	85 c9                	test   ecx,ecx
c000c205:	74 28                	je     c000c22f <File::stat(unsigned long long*, bool*)+0x5d>
c000c207:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c209:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c20d:	74 13                	je     c000c222 <File::stat(unsigned long long*, bool*)+0x50>
c000c20f:	83 ec 04             	sub    esp,0x4
c000c212:	56                   	push   esi
c000c213:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c219:	51                   	push   ecx
c000c21a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000c21d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000c220:	eb 0a                	jmp    c000c22c <File::stat(unsigned long long*, bool*)+0x5a>
c000c222:	53                   	push   ebx
c000c223:	83 c2 0d             	add    edx,0xd
c000c226:	56                   	push   esi
c000c227:	52                   	push   edx
c000c228:	51                   	push   ecx
c000c229:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000c22c:	83 c4 10             	add    esp,0x10
c000c22f:	5a                   	pop    edx
c000c230:	5b                   	pop    ebx
c000c231:	5e                   	pop    esi
c000c232:	c3                   	ret    

c000c233 <Fs::setcwd(Process*, char*)>:
c000c233:	55                   	push   ebp
c000c234:	57                   	push   edi
c000c235:	56                   	push   esi
c000c236:	53                   	push   ebx
c000c237:	81 ec 20 02 00 00    	sub    esp,0x220
c000c23d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000c244:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000c24a:	57                   	push   edi
c000c24b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000c252:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000c256:	56                   	push   esi
c000c257:	e8 60 fa ff ff       	call   c000bcbc <Fs::standardiseFiles(char*, char const*, char const*)>
c000c25c:	89 34 24             	mov    DWORD PTR [esp],esi
c000c25f:	e8 fc 42 ff ff       	call   c0000560 <strlen>
c000c264:	83 c4 10             	add    esp,0x10
c000c267:	83 f8 02             	cmp    eax,0x2
c000c26a:	77 15                	ja     c000c281 <Fs::setcwd(Process*, char*)+0x4e>
c000c26c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000c271:	83 eb 41             	sub    ebx,0x41
c000c274:	8b 04 9d 40 42 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbdc0]
c000c27b:	85 c0                	test   eax,eax
c000c27d:	75 1c                	jne    c000c29b <Fs::setcwd(Process*, char*)+0x68>
c000c27f:	eb 2f                	jmp    c000c2b0 <Fs::setcwd(Process*, char*)+0x7d>
c000c281:	83 ec 0c             	sub    esp,0xc
c000c284:	56                   	push   esi
c000c285:	e8 d6 42 ff ff       	call   c0000560 <strlen>
c000c28a:	83 c4 10             	add    esp,0x10
c000c28d:	83 f8 03             	cmp    eax,0x3
c000c290:	75 57                	jne    c000c2e9 <Fs::setcwd(Process*, char*)+0xb6>
c000c292:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000c297:	75 50                	jne    c000c2e9 <Fs::setcwd(Process*, char*)+0xb6>
c000c299:	eb d1                	jmp    c000c26c <Fs::setcwd(Process*, char*)+0x39>
c000c29b:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000c2a2:	75 0c                	jne    c000c2b0 <Fs::setcwd(Process*, char*)+0x7d>
c000c2a4:	83 ec 0c             	sub    esp,0xc
c000c2a7:	50                   	push   eax
c000c2a8:	e8 69 1c 00 00       	call   c000df16 <LogicalDisk::mount()>
c000c2ad:	83 c4 10             	add    esp,0x10
c000c2b0:	b8 03 00 00 00       	mov    eax,0x3
c000c2b5:	83 fb 19             	cmp    ebx,0x19
c000c2b8:	0f 87 c6 00 00 00    	ja     c000c384 <Fs::setcwd(Process*, char*)+0x151>
c000c2be:	8b 14 9d 40 42 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdbdc0]
c000c2c5:	b8 05 00 00 00       	mov    eax,0x5
c000c2ca:	85 d2                	test   edx,edx
c000c2cc:	0f 84 b2 00 00 00    	je     c000c384 <Fs::setcwd(Process*, char*)+0x151>
c000c2d2:	b8 06 00 00 00       	mov    eax,0x6
c000c2d7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000c2de:	0f 85 92 00 00 00    	jne    c000c376 <Fs::setcwd(Process*, char*)+0x143>
c000c2e4:	e9 9b 00 00 00       	jmp    c000c384 <Fs::setcwd(Process*, char*)+0x151>
c000c2e9:	83 ec 0c             	sub    esp,0xc
c000c2ec:	68 14 01 00 00       	push   0x114
c000c2f1:	e8 6b c8 ff ff       	call   c0008b61 <malloc>
c000c2f6:	83 c4 0c             	add    esp,0xc
c000c2f9:	89 c3                	mov    ebx,eax
c000c2fb:	55                   	push   ebp
c000c2fc:	56                   	push   esi
c000c2fd:	50                   	push   eax
c000c2fe:	e8 63 fb ff ff       	call   c000be66 <File::File(char const*, Process*)>
c000c303:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000c308:	83 c4 0c             	add    esp,0xc
c000c30b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c30f:	50                   	push   eax
c000c310:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c314:	50                   	push   eax
c000c315:	53                   	push   ebx
c000c316:	e8 b7 fe ff ff       	call   c000c1d2 <File::stat(unsigned long long*, bool*)>
c000c31b:	83 c4 10             	add    esp,0x10
c000c31e:	83 f8 02             	cmp    eax,0x2
c000c321:	74 04                	je     c000c327 <Fs::setcwd(Process*, char*)+0xf4>
c000c323:	85 c0                	test   eax,eax
c000c325:	74 1c                	je     c000c343 <Fs::setcwd(Process*, char*)+0x110>
c000c327:	b8 01 00 00 00       	mov    eax,0x1
c000c32c:	85 db                	test   ebx,ebx
c000c32e:	74 54                	je     c000c384 <Fs::setcwd(Process*, char*)+0x151>
c000c330:	83 ec 0c             	sub    esp,0xc
c000c333:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c335:	53                   	push   ebx
c000c336:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c339:	83 c4 10             	add    esp,0x10
c000c33c:	b8 01 00 00 00       	mov    eax,0x1
c000c341:	eb 41                	jmp    c000c384 <Fs::setcwd(Process*, char*)+0x151>
c000c343:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c348:	75 1c                	jne    c000c366 <Fs::setcwd(Process*, char*)+0x133>
c000c34a:	b8 02 00 00 00       	mov    eax,0x2
c000c34f:	85 db                	test   ebx,ebx
c000c351:	74 31                	je     c000c384 <Fs::setcwd(Process*, char*)+0x151>
c000c353:	83 ec 0c             	sub    esp,0xc
c000c356:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c358:	53                   	push   ebx
c000c359:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c35c:	83 c4 10             	add    esp,0x10
c000c35f:	b8 02 00 00 00       	mov    eax,0x2
c000c364:	eb 1e                	jmp    c000c384 <Fs::setcwd(Process*, char*)+0x151>
c000c366:	85 db                	test   ebx,ebx
c000c368:	74 0c                	je     c000c376 <Fs::setcwd(Process*, char*)+0x143>
c000c36a:	83 ec 0c             	sub    esp,0xc
c000c36d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c36f:	53                   	push   ebx
c000c370:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c373:	83 c4 10             	add    esp,0x10
c000c376:	50                   	push   eax
c000c377:	50                   	push   eax
c000c378:	56                   	push   esi
c000c379:	57                   	push   edi
c000c37a:	e8 a1 42 ff ff       	call   c0000620 <strcpy>
c000c37f:	83 c4 10             	add    esp,0x10
c000c382:	31 c0                	xor    eax,eax
c000c384:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c38a:	5b                   	pop    ebx
c000c38b:	5e                   	pop    esi
c000c38c:	5f                   	pop    edi
c000c38d:	5d                   	pop    ebp
c000c38e:	c3                   	ret    
c000c38f:	90                   	nop

c000c390 <Directory::Directory(char const*, Process*)>:
c000c390:	83 ec 0c             	sub    esp,0xc
c000c393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c397:	83 ec 08             	sub    esp,0x8
c000c39a:	6a 00                	push   0x0
c000c39c:	50                   	push   eax
c000c39d:	e8 b8 de ff ff       	call   c000a25a <UnixFile::UnixFile(int)>
c000c3a2:	83 c4 10             	add    esp,0x10
c000c3a5:	ba 58 f2 01 c0       	mov    edx,0xc001f258
c000c3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ae:	89 10                	mov    DWORD PTR [eax],edx
c000c3b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000c3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3be:	83 c0 0d             	add    eax,0xd
c000c3c1:	83 ec 04             	sub    esp,0x4
c000c3c4:	52                   	push   edx
c000c3c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c9:	50                   	push   eax
c000c3ca:	e8 ed f8 ff ff       	call   c000bcbc <Fs::standardiseFiles(char*, char const*, char const*)>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3d6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c3d9:	8d 50 bf             	lea    edx,[eax-0x41]
c000c3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3f2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c3f8:	25 ff 00 00 00       	and    eax,0xff
c000c3fd:	8b 04 85 40 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbdc0]
c000c404:	85 c0                	test   eax,eax
c000c406:	74 42                	je     c000c44a <Directory::Directory(char const*, Process*)+0xba>
c000c408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c40c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c412:	25 ff 00 00 00       	and    eax,0xff
c000c417:	8b 04 85 40 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbdc0]
c000c41e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c424:	85 c0                	test   eax,eax
c000c426:	75 22                	jne    c000c44a <Directory::Directory(char const*, Process*)+0xba>
c000c428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c42c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c432:	25 ff 00 00 00       	and    eax,0xff
c000c437:	8b 04 85 40 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbdc0]
c000c43e:	83 ec 0c             	sub    esp,0xc
c000c441:	50                   	push   eax
c000c442:	e8 cf 1a 00 00       	call   c000df16 <LogicalDisk::mount()>
c000c447:	83 c4 10             	add    esp,0x10
c000c44a:	90                   	nop
c000c44b:	83 c4 0c             	add    esp,0xc
c000c44e:	c3                   	ret    
c000c44f:	90                   	nop

c000c450 <Directory::open()>:
c000c450:	53                   	push   ebx
c000c451:	b8 0b 00 00 00       	mov    eax,0xb
c000c456:	83 ec 08             	sub    esp,0x8
c000c459:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c45d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c464:	80 fa 19             	cmp    dl,0x19
c000c467:	77 3d                	ja     c000c4a6 <Directory::open()+0x56>
c000c469:	8b 14 95 40 42 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbdc0]
c000c470:	85 d2                	test   edx,edx
c000c472:	74 32                	je     c000c4a6 <Directory::open()+0x56>
c000c474:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000c47a:	85 d2                	test   edx,edx
c000c47c:	74 28                	je     c000c4a6 <Directory::open()+0x56>
c000c47e:	b8 06 00 00 00       	mov    eax,0x6
c000c483:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c487:	75 1d                	jne    c000c4a6 <Directory::open()+0x56>
c000c489:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c48f:	50                   	push   eax
c000c490:	8b 02                	mov    eax,DWORD PTR [edx]
c000c492:	51                   	push   ecx
c000c493:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c496:	51                   	push   ecx
c000c497:	52                   	push   edx
c000c498:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000c49b:	83 c4 10             	add    esp,0x10
c000c49e:	85 c0                	test   eax,eax
c000c4a0:	75 04                	jne    c000c4a6 <Directory::open()+0x56>
c000c4a2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c4a6:	83 c4 08             	add    esp,0x8
c000c4a9:	5b                   	pop    ebx
c000c4aa:	c3                   	ret    
c000c4ab:	90                   	nop

c000c4ac <Directory::close()>:
c000c4ac:	53                   	push   ebx
c000c4ad:	b8 0b 00 00 00       	mov    eax,0xb
c000c4b2:	83 ec 08             	sub    esp,0x8
c000c4b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c4b9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000c4c0:	80 fa 19             	cmp    dl,0x19
c000c4c3:	77 41                	ja     c000c506 <Directory::close()+0x5a>
c000c4c5:	8b 1c 95 40 42 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbdc0]
c000c4cc:	85 db                	test   ebx,ebx
c000c4ce:	74 36                	je     c000c506 <Directory::close()+0x5a>
c000c4d0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000c4d7:	74 2d                	je     c000c506 <Directory::close()+0x5a>
c000c4d9:	b8 05 00 00 00       	mov    eax,0x5
c000c4de:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000c4e2:	74 22                	je     c000c506 <Directory::close()+0x5a>
c000c4e4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000c4e8:	8b 04 95 40 42 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbdc0]
c000c4ef:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c4f5:	53                   	push   ebx
c000c4f6:	53                   	push   ebx
c000c4f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000c4f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000c4ff:	50                   	push   eax
c000c500:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000c503:	83 c4 10             	add    esp,0x10
c000c506:	83 c4 08             	add    esp,0x8
c000c509:	5b                   	pop    ebx
c000c50a:	c3                   	ret    
c000c50b:	90                   	nop

c000c50c <Directory::unlink()>:
c000c50c:	83 ec 0c             	sub    esp,0xc
c000c50f:	b8 0b 00 00 00       	mov    eax,0xb
c000c514:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c518:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c51f:	80 f9 19             	cmp    cl,0x19
c000c522:	77 2f                	ja     c000c553 <Directory::unlink()+0x47>
c000c524:	8b 0c 8d 40 42 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbdc0]
c000c52b:	85 c9                	test   ecx,ecx
c000c52d:	74 24                	je     c000c553 <Directory::unlink()+0x47>
c000c52f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000c535:	85 c9                	test   ecx,ecx
c000c537:	74 1a                	je     c000c553 <Directory::unlink()+0x47>
c000c539:	b8 06 00 00 00       	mov    eax,0x6
c000c53e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c542:	75 0f                	jne    c000c553 <Directory::unlink()+0x47>
c000c544:	83 c2 0d             	add    edx,0xd
c000c547:	50                   	push   eax
c000c548:	50                   	push   eax
c000c549:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c54b:	52                   	push   edx
c000c54c:	51                   	push   ecx
c000c54d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000c550:	83 c4 10             	add    esp,0x10
c000c553:	83 c4 0c             	add    esp,0xc
c000c556:	c3                   	ret    
c000c557:	90                   	nop

c000c558 <Directory::rename(char const*)>:
c000c558:	83 ec 0c             	sub    esp,0xc
c000c55b:	b8 0b 00 00 00       	mov    eax,0xb
c000c560:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c564:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c56b:	80 f9 19             	cmp    cl,0x19
c000c56e:	77 32                	ja     c000c5a2 <Directory::rename(char const*)+0x4a>
c000c570:	8b 0c 8d 40 42 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbdc0]
c000c577:	85 c9                	test   ecx,ecx
c000c579:	74 27                	je     c000c5a2 <Directory::rename(char const*)+0x4a>
c000c57b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000c581:	85 c9                	test   ecx,ecx
c000c583:	74 1d                	je     c000c5a2 <Directory::rename(char const*)+0x4a>
c000c585:	b8 06 00 00 00       	mov    eax,0x6
c000c58a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c58e:	75 12                	jne    c000c5a2 <Directory::rename(char const*)+0x4a>
c000c590:	83 c2 0d             	add    edx,0xd
c000c593:	50                   	push   eax
c000c594:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c596:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c59a:	52                   	push   edx
c000c59b:	51                   	push   ecx
c000c59c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c59f:	83 c4 10             	add    esp,0x10
c000c5a2:	83 c4 0c             	add    esp,0xc
c000c5a5:	c3                   	ret    

c000c5a6 <Directory::exists()>:
c000c5a6:	83 ec 0c             	sub    esp,0xc
c000c5a9:	31 c0                	xor    eax,eax
c000c5ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5af:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c5b6:	80 f9 19             	cmp    cl,0x19
c000c5b9:	77 24                	ja     c000c5df <Directory::exists()+0x39>
c000c5bb:	8b 0c 8d 40 42 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbdc0]
c000c5c2:	85 c9                	test   ecx,ecx
c000c5c4:	74 19                	je     c000c5df <Directory::exists()+0x39>
c000c5c6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000c5cc:	85 c9                	test   ecx,ecx
c000c5ce:	74 0f                	je     c000c5df <Directory::exists()+0x39>
c000c5d0:	83 c2 0d             	add    edx,0xd
c000c5d3:	50                   	push   eax
c000c5d4:	50                   	push   eax
c000c5d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c5d7:	52                   	push   edx
c000c5d8:	51                   	push   ecx
c000c5d9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c5dc:	83 c4 10             	add    esp,0x10
c000c5df:	83 c4 0c             	add    esp,0xc
c000c5e2:	c3                   	ret    
c000c5e3:	90                   	nop

c000c5e4 <Directory::read(dirent*)>:
c000c5e4:	83 ec 1c             	sub    esp,0x1c
c000c5e7:	b8 0b 00 00 00       	mov    eax,0xb
c000c5ec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c5f0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000c5f7:	80 fa 19             	cmp    dl,0x19
c000c5fa:	77 30                	ja     c000c62c <Directory::read(dirent*)+0x48>
c000c5fc:	8b 14 95 40 42 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbdc0]
c000c603:	85 d2                	test   edx,edx
c000c605:	74 25                	je     c000c62c <Directory::read(dirent*)+0x48>
c000c607:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000c60e:	74 1c                	je     c000c62c <Directory::read(dirent*)+0x48>
c000c610:	83 ec 0c             	sub    esp,0xc
c000c613:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c615:	8d 54 24 18          	lea    edx,[esp+0x18]
c000c619:	52                   	push   edx
c000c61a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61e:	6a 00                	push   0x0
c000c620:	68 10 01 00 00       	push   0x110
c000c625:	51                   	push   ecx
c000c626:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c629:	83 c4 20             	add    esp,0x20
c000c62c:	83 c4 1c             	add    esp,0x1c
c000c62f:	c3                   	ret    

c000c630 <Directory::create()>:
c000c630:	83 ec 0c             	sub    esp,0xc
c000c633:	b8 0b 00 00 00       	mov    eax,0xb
c000c638:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c63c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c643:	80 f9 19             	cmp    cl,0x19
c000c646:	77 2f                	ja     c000c677 <Directory::create()+0x47>
c000c648:	8b 0c 8d 40 42 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbdc0]
c000c64f:	85 c9                	test   ecx,ecx
c000c651:	74 24                	je     c000c677 <Directory::create()+0x47>
c000c653:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000c659:	85 c9                	test   ecx,ecx
c000c65b:	74 1a                	je     c000c677 <Directory::create()+0x47>
c000c65d:	b8 06 00 00 00       	mov    eax,0x6
c000c662:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c666:	75 0f                	jne    c000c677 <Directory::create()+0x47>
c000c668:	83 c2 0d             	add    edx,0xd
c000c66b:	50                   	push   eax
c000c66c:	50                   	push   eax
c000c66d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c66f:	52                   	push   edx
c000c670:	51                   	push   ecx
c000c671:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c674:	83 c4 10             	add    esp,0x10
c000c677:	83 c4 0c             	add    esp,0xc
c000c67a:	c3                   	ret    
c000c67b:	90                   	nop

c000c67c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c67c:	b8 0a 00 00 00       	mov    eax,0xa
c000c681:	c3                   	ret    
c000c682:	66 90                	xchg   ax,ax

c000c684 <Bus::Bus(char const*)>:
c000c684:	83 ec 0c             	sub    esp,0xc
c000c687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c68b:	83 ec 08             	sub    esp,0x8
c000c68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c692:	50                   	push   eax
c000c693:	e8 30 08 00 00       	call   c000cec8 <Device::Device(char const*)>
c000c698:	83 c4 10             	add    esp,0x10
c000c69b:	ba 74 f2 01 c0       	mov    edx,0xc001f274
c000c6a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6a4:	89 10                	mov    DWORD PTR [eax],edx
c000c6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6aa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c6b4:	90                   	nop
c000c6b5:	83 c4 0c             	add    esp,0xc
c000c6b8:	c3                   	ret    
c000c6b9:	90                   	nop
c000c6ba:	66 90                	xchg   ax,ax

c000c6bc <Bus::~Bus()>:
c000c6bc:	83 ec 0c             	sub    esp,0xc
c000c6bf:	ba 74 f2 01 c0       	mov    edx,0xc001f274
c000c6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6c8:	89 10                	mov    DWORD PTR [eax],edx
c000c6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ce:	83 ec 0c             	sub    esp,0xc
c000c6d1:	50                   	push   eax
c000c6d2:	e8 5b 05 00 00       	call   c000cc32 <Device::~Device()>
c000c6d7:	83 c4 10             	add    esp,0x10
c000c6da:	90                   	nop
c000c6db:	83 c4 0c             	add    esp,0xc
c000c6de:	c3                   	ret    
c000c6df:	90                   	nop

c000c6e0 <Bus::~Bus()>:
c000c6e0:	83 ec 0c             	sub    esp,0xc
c000c6e3:	83 ec 0c             	sub    esp,0xc
c000c6e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6ea:	e8 cd ff ff ff       	call   c000c6bc <Bus::~Bus()>
c000c6ef:	83 c4 10             	add    esp,0x10
c000c6f2:	83 ec 08             	sub    esp,0x8
c000c6f5:	68 58 01 00 00       	push   0x158
c000c6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6fe:	e8 f7 f0 ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000c703:	83 c4 10             	add    esp,0x10
c000c706:	83 c4 0c             	add    esp,0xc
c000c709:	c3                   	ret    

c000c70a <beepThread(void*)>:
c000c70a:	83 ec 0c             	sub    esp,0xc
c000c70d:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000c712:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c716:	48                   	dec    eax
c000c717:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000c71c:	75 01                	jne    c000c71f <beepThread(void*)+0x15>
c000c71e:	fb                   	sti    
c000c71f:	83 ec 0c             	sub    esp,0xc
c000c722:	6b c2 0a             	imul   eax,edx,0xa
c000c725:	50                   	push   eax
c000c726:	e8 69 83 00 00       	call   c0014a94 <milliTenthSleep(unsigned int)>
c000c72b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c732:	e8 a5 9f 00 00       	call   c00166dc <HalMakeBeep(int)>
c000c737:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c73f:	83 c4 1c             	add    esp,0x1c
c000c742:	e9 49 82 00 00       	jmp    c0014990 <blockTask(TaskState)>

c000c747 <Krnl::beep(int, int, bool)>:
c000c747:	56                   	push   esi
c000c748:	53                   	push   ebx
c000c749:	83 ec 10             	sub    esp,0x10
c000c74c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c750:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c758:	e8 7f 9f 00 00       	call   c00166dc <HalMakeBeep(int)>
c000c75d:	83 c4 10             	add    esp,0x10
c000c760:	89 f0                	mov    eax,esi
c000c762:	84 c0                	test   al,al
c000c764:	74 1e                	je     c000c784 <Krnl::beep(int, int, bool)+0x3d>
c000c766:	83 ec 0c             	sub    esp,0xc
c000c769:	6b db 0a             	imul   ebx,ebx,0xa
c000c76c:	53                   	push   ebx
c000c76d:	e8 22 83 00 00       	call   c0014a94 <milliTenthSleep(unsigned int)>
c000c772:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c77a:	83 c4 14             	add    esp,0x14
c000c77d:	5b                   	pop    ebx
c000c77e:	5e                   	pop    esi
c000c77f:	e9 58 9f 00 00       	jmp    c00166dc <HalMakeBeep(int)>
c000c784:	68 e6 00 00 00       	push   0xe6
c000c789:	53                   	push   ebx
c000c78a:	68 0a c7 00 c0       	push   0xc000c70a
c000c78f:	ff 35 d0 51 02 c0    	push   DWORD PTR ds:0xc00251d0
c000c795:	e8 da 7d 00 00       	call   c0014574 <Process::createThread(void (*)(void*), void*, int)>
c000c79a:	83 c4 14             	add    esp,0x14
c000c79d:	5b                   	pop    ebx
c000c79e:	5e                   	pop    esi
c000c79f:	c3                   	ret    

c000c7a0 <User::loadClockSettings(int)>:
c000c7a0:	53                   	push   ebx
c000c7a1:	83 ec 14             	sub    esp,0x14
c000c7a4:	68 14 01 00 00       	push   0x114
c000c7a9:	e8 b3 c3 ff ff       	call   c0008b61 <malloc>
c000c7ae:	83 c4 0c             	add    esp,0xc
c000c7b1:	89 c3                	mov    ebx,eax
c000c7b3:	ff 35 d0 51 02 c0    	push   DWORD PTR ds:0xc00251d0
c000c7b9:	68 98 f2 01 c0       	push   0xc001f298
c000c7be:	50                   	push   eax
c000c7bf:	e8 a2 f6 ff ff       	call   c000be66 <File::File(char const*, Process*)>
c000c7c4:	58                   	pop    eax
c000c7c5:	5a                   	pop    edx
c000c7c6:	6a 01                	push   0x1
c000c7c8:	53                   	push   ebx
c000c7c9:	e8 58 f7 ff ff       	call   c000bf26 <File::open(FileOpenMode)>
c000c7ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c7d1:	e8 ae f7 ff ff       	call   c000bf84 <File::close()>
c000c7d6:	83 c4 10             	add    esp,0x10
c000c7d9:	85 db                	test   ebx,ebx
c000c7db:	74 0f                	je     c000c7ec <User::loadClockSettings(int)+0x4c>
c000c7dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c7e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c7e6:	83 c4 08             	add    esp,0x8
c000c7e9:	5b                   	pop    ebx
c000c7ea:	ff e0                	jmp    eax
c000c7ec:	83 c4 08             	add    esp,0x8
c000c7ef:	5b                   	pop    ebx
c000c7f0:	c3                   	ret    
c000c7f1:	90                   	nop

c000c7f2 <Clock::Clock(char const*)>:
c000c7f2:	83 ec 0c             	sub    esp,0xc
c000c7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7f9:	83 ec 08             	sub    esp,0x8
c000c7fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c800:	50                   	push   eax
c000c801:	e8 c2 06 00 00       	call   c000cec8 <Device::Device(char const*)>
c000c806:	83 c4 10             	add    esp,0x10
c000c809:	ba c0 f2 01 c0       	mov    edx,0xc001f2c0
c000c80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c812:	89 10                	mov    DWORD PTR [eax],edx
c000c814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c818:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c822:	90                   	nop
c000c823:	83 c4 0c             	add    esp,0xc
c000c826:	c3                   	ret    
c000c827:	90                   	nop

c000c828 <Clock::~Clock()>:
c000c828:	83 ec 0c             	sub    esp,0xc
c000c82b:	ba c0 f2 01 c0       	mov    edx,0xc001f2c0
c000c830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c834:	89 10                	mov    DWORD PTR [eax],edx
c000c836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c83a:	83 ec 0c             	sub    esp,0xc
c000c83d:	50                   	push   eax
c000c83e:	e8 ef 03 00 00       	call   c000cc32 <Device::~Device()>
c000c843:	83 c4 10             	add    esp,0x10
c000c846:	90                   	nop
c000c847:	83 c4 0c             	add    esp,0xc
c000c84a:	c3                   	ret    
c000c84b:	90                   	nop

c000c84c <Clock::~Clock()>:
c000c84c:	83 ec 0c             	sub    esp,0xc
c000c84f:	83 ec 0c             	sub    esp,0xc
c000c852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c856:	e8 cd ff ff ff       	call   c000c828 <Clock::~Clock()>
c000c85b:	83 c4 10             	add    esp,0x10
c000c85e:	83 ec 08             	sub    esp,0x8
c000c861:	68 58 01 00 00       	push   0x158
c000c866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c86a:	e8 8b ef ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000c86f:	83 c4 10             	add    esp,0x10
c000c872:	83 c4 0c             	add    esp,0xc
c000c875:	c3                   	ret    

c000c876 <Clock::timeInSecondsLocal()>:
c000c876:	53                   	push   ebx
c000c877:	83 ec 14             	sub    esp,0x14
c000c87a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c87e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c880:	50                   	push   eax
c000c881:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c884:	0f b6 0d d8 1d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021dd8
c000c88b:	03 0d dc 1d 02 c0    	add    ecx,DWORD PTR ds:0xc0021ddc
c000c891:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c897:	89 cb                	mov    ebx,ecx
c000c899:	c1 fb 1f             	sar    ebx,0x1f
c000c89c:	01 c8                	add    eax,ecx
c000c89e:	11 da                	adc    edx,ebx
c000c8a0:	83 c4 10             	add    esp,0x10
c000c8a3:	31 c9                	xor    ecx,ecx
c000c8a5:	80 3d d9 1d 02 c0 00 	cmp    BYTE PTR ds:0xc0021dd9,0x0
c000c8ac:	74 05                	je     c000c8b3 <Clock::timeInSecondsLocal()+0x3d>
c000c8ae:	b9 08 07 00 00       	mov    ecx,0x708
c000c8b3:	31 db                	xor    ebx,ebx
c000c8b5:	01 c8                	add    eax,ecx
c000c8b7:	11 da                	adc    edx,ebx
c000c8b9:	83 c4 08             	add    esp,0x8
c000c8bc:	5b                   	pop    ebx
c000c8bd:	c3                   	ret    

c000c8be <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c8be:	57                   	push   edi
c000c8bf:	56                   	push   esi
c000c8c0:	53                   	push   ebx
c000c8c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c8c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c8c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c8cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c8cf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c8d2:	0f b6 05 d8 1d 02 c0 	movzx  eax,BYTE PTR ds:0xc0021dd8
c000c8d9:	03 05 dc 1d 02 c0    	add    eax,DWORD PTR ds:0xc0021ddc
c000c8df:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c8e5:	99                   	cdq    
c000c8e6:	29 c6                	sub    esi,eax
c000c8e8:	19 d7                	sbb    edi,edx
c000c8ea:	89 f0                	mov    eax,esi
c000c8ec:	89 fa                	mov    edx,edi
c000c8ee:	31 f6                	xor    esi,esi
c000c8f0:	80 3d d9 1d 02 c0 00 	cmp    BYTE PTR ds:0xc0021dd9,0x0
c000c8f7:	74 05                	je     c000c8fe <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c8f9:	be 08 07 00 00       	mov    esi,0x708
c000c8fe:	31 ff                	xor    edi,edi
c000c900:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c904:	29 f0                	sub    eax,esi
c000c906:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c90a:	19 fa                	sbb    edx,edi
c000c90c:	89 d8                	mov    eax,ebx
c000c90e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c912:	5b                   	pop    ebx
c000c913:	5e                   	pop    esi
c000c914:	5f                   	pop    edi
c000c915:	ff e0                	jmp    eax

c000c917 <datetimeToSeconds(datetime_t)>:
c000c917:	55                   	push   ebp
c000c918:	57                   	push   edi
c000c919:	56                   	push   esi
c000c91a:	53                   	push   ebx
c000c91b:	83 ec 14             	sub    esp,0x14
c000c91e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c922:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c926:	89 d3                	mov    ebx,edx
c000c928:	0f b6 c6             	movzx  eax,dh
c000c92b:	c1 eb 10             	shr    ebx,0x10
c000c92e:	48                   	dec    eax
c000c92f:	66 81 eb 6c 07       	sub    bx,0x76c
c000c934:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000c938:	0f b6 f5             	movzx  esi,ch
c000c93b:	89 cf                	mov    edi,ecx
c000c93d:	6b f6 3c             	imul   esi,esi,0x3c
c000c940:	c1 ef 10             	shr    edi,0x10
c000c943:	0f b6 c9             	movzx  ecx,cl
c000c946:	89 f8                	mov    eax,edi
c000c948:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c94e:	0f b6 f8             	movzx  edi,al
c000c951:	0f b6 d2             	movzx  edx,dl
c000c954:	01 fe                	add    esi,edi
c000c956:	01 f1                	add    ecx,esi
c000c958:	0f b7 f3             	movzx  esi,bx
c000c95b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c95f:	c1 f9 1f             	sar    ecx,0x1f
c000c962:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000c967:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c96b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000c970:	8b 0c 8d 00 f3 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe0d00]
c000c977:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c97b:	76 29                	jbe    c000c9a6 <datetimeToSeconds(datetime_t)+0x8f>
c000c97d:	f6 c3 03             	test   bl,0x3
c000c980:	75 24                	jne    c000c9a6 <datetimeToSeconds(datetime_t)+0x8f>
c000c982:	31 d2                	xor    edx,edx
c000c984:	bf 64 00 00 00       	mov    edi,0x64
c000c989:	89 d8                	mov    eax,ebx
c000c98b:	66 f7 f7             	div    di
c000c98e:	66 85 d2             	test   dx,dx
c000c991:	75 12                	jne    c000c9a5 <datetimeToSeconds(datetime_t)+0x8e>
c000c993:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c999:	bf 90 01 00 00       	mov    edi,0x190
c000c99e:	99                   	cdq    
c000c99f:	f7 ff                	idiv   edi
c000c9a1:	85 d2                	test   edx,edx
c000c9a3:	75 01                	jne    c000c9a6 <datetimeToSeconds(datetime_t)+0x8f>
c000c9a5:	41                   	inc    ecx
c000c9a6:	66 83 fb 46          	cmp    bx,0x46
c000c9aa:	76 45                	jbe    c000c9f1 <datetimeToSeconds(datetime_t)+0xda>
c000c9ac:	bb 46 00 00 00       	mov    ebx,0x46
c000c9b1:	bf 64 00 00 00       	mov    edi,0x64
c000c9b6:	bd 90 01 00 00       	mov    ebp,0x190
c000c9bb:	b8 6d 01 00 00       	mov    eax,0x16d
c000c9c0:	f6 c3 03             	test   bl,0x3
c000c9c3:	75 23                	jne    c000c9e8 <datetimeToSeconds(datetime_t)+0xd1>
c000c9c5:	89 d8                	mov    eax,ebx
c000c9c7:	99                   	cdq    
c000c9c8:	f7 ff                	idiv   edi
c000c9ca:	b8 6e 01 00 00       	mov    eax,0x16e
c000c9cf:	85 d2                	test   edx,edx
c000c9d1:	75 15                	jne    c000c9e8 <datetimeToSeconds(datetime_t)+0xd1>
c000c9d3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c9d9:	99                   	cdq    
c000c9da:	f7 fd                	idiv   ebp
c000c9dc:	31 c0                	xor    eax,eax
c000c9de:	85 d2                	test   edx,edx
c000c9e0:	0f 94 c0             	sete   al
c000c9e3:	05 6d 01 00 00       	add    eax,0x16d
c000c9e8:	01 c1                	add    ecx,eax
c000c9ea:	43                   	inc    ebx
c000c9eb:	39 f3                	cmp    ebx,esi
c000c9ed:	7c cc                	jl     c000c9bb <datetimeToSeconds(datetime_t)+0xa4>
c000c9ef:	eb 3b                	jmp    c000ca2c <datetimeToSeconds(datetime_t)+0x115>
c000c9f1:	74 39                	je     c000ca2c <datetimeToSeconds(datetime_t)+0x115>
c000c9f3:	b8 45 00 00 00       	mov    eax,0x45
c000c9f8:	89 c2                	mov    edx,eax
c000c9fa:	83 e2 03             	and    edx,0x3
c000c9fd:	39 f0                	cmp    eax,esi
c000c9ff:	7e 13                	jle    c000ca14 <datetimeToSeconds(datetime_t)+0xfd>
c000ca01:	85 d2                	test   edx,edx
c000ca03:	0f 94 c2             	sete   dl
c000ca06:	48                   	dec    eax
c000ca07:	0f b6 d2             	movzx  edx,dl
c000ca0a:	81 c2 6d 01 00 00    	add    edx,0x16d
c000ca10:	29 d1                	sub    ecx,edx
c000ca12:	eb e4                	jmp    c000c9f8 <datetimeToSeconds(datetime_t)+0xe1>
c000ca14:	b8 6d 01 00 00       	mov    eax,0x16d
c000ca19:	85 d2                	test   edx,edx
c000ca1b:	75 0d                	jne    c000ca2a <datetimeToSeconds(datetime_t)+0x113>
c000ca1d:	31 c0                	xor    eax,eax
c000ca1f:	66 85 db             	test   bx,bx
c000ca22:	0f 95 c0             	setne  al
c000ca25:	05 6d 01 00 00       	add    eax,0x16d
c000ca2a:	29 c1                	sub    ecx,eax
c000ca2c:	b8 80 51 01 00       	mov    eax,0x15180
c000ca31:	f7 e9                	imul   ecx
c000ca33:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ca37:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ca3b:	83 c4 14             	add    esp,0x14
c000ca3e:	5b                   	pop    ebx
c000ca3f:	5e                   	pop    esi
c000ca40:	5f                   	pop    edi
c000ca41:	5d                   	pop    ebp
c000ca42:	c3                   	ret    
c000ca43:	90                   	nop

c000ca44 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000ca44:	57                   	push   edi
c000ca45:	56                   	push   esi
c000ca46:	53                   	push   ebx
c000ca47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca4b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ca4d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000ca50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca58:	e8 ba fe ff ff       	call   c000c917 <datetimeToSeconds(datetime_t)>
c000ca5d:	59                   	pop    ecx
c000ca5e:	0f b6 0d d8 1d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021dd8
c000ca65:	5b                   	pop    ebx
c000ca66:	03 0d dc 1d 02 c0    	add    ecx,DWORD PTR ds:0xc0021ddc
c000ca6c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ca72:	89 cb                	mov    ebx,ecx
c000ca74:	c1 fb 1f             	sar    ebx,0x1f
c000ca77:	29 c8                	sub    eax,ecx
c000ca79:	19 da                	sbb    edx,ebx
c000ca7b:	31 c9                	xor    ecx,ecx
c000ca7d:	80 3d d9 1d 02 c0 00 	cmp    BYTE PTR ds:0xc0021dd9,0x0
c000ca84:	74 05                	je     c000ca8b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000ca86:	b9 08 07 00 00       	mov    ecx,0x708
c000ca8b:	31 db                	xor    ebx,ebx
c000ca8d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ca91:	29 c8                	sub    eax,ecx
c000ca93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ca97:	19 da                	sbb    edx,ebx
c000ca99:	89 f8                	mov    eax,edi
c000ca9b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ca9f:	5b                   	pop    ebx
c000caa0:	5e                   	pop    esi
c000caa1:	5f                   	pop    edi
c000caa2:	ff e0                	jmp    eax

c000caa4 <secondsToDatetime(unsigned long long)>:
c000caa4:	55                   	push   ebp
c000caa5:	57                   	push   edi
c000caa6:	56                   	push   esi
c000caa7:	53                   	push   ebx
c000caa8:	83 ec 1c             	sub    esp,0x1c
c000caab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000caaf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000cab3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000cab7:	6a 00                	push   0x0
c000cab9:	68 80 51 01 00       	push   0x15180
c000cabe:	55                   	push   ebp
c000cabf:	57                   	push   edi
c000cac0:	e8 9b 0a 01 00       	call   c001d560 <__udivdi3>
c000cac5:	83 c4 10             	add    esp,0x10
c000cac8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000cace:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cad2:	6a 00                	push   0x0
c000cad4:	68 80 51 01 00       	push   0x15180
c000cad9:	55                   	push   ebp
c000cada:	57                   	push   edi
c000cadb:	bf 10 0e 00 00       	mov    edi,0xe10
c000cae0:	e8 7b 0b 01 00       	call   c001d660 <__umoddi3>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	99                   	cdq    
c000cae9:	f7 ff                	idiv   edi
c000caeb:	bf 3c 00 00 00       	mov    edi,0x3c
c000caf0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000caf3:	89 d0                	mov    eax,edx
c000caf5:	99                   	cdq    
c000caf6:	f7 ff                	idiv   edi
c000caf8:	85 db                	test   ebx,ebx
c000cafa:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000cafd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000cb00:	79 11                	jns    c000cb13 <secondsToDatetime(unsigned long long)+0x6f>
c000cb02:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cb06:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000cb0c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000cb11:	eb 07                	jmp    c000cb1a <secondsToDatetime(unsigned long long)+0x76>
c000cb13:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000cb18:	89 d8                	mov    eax,ebx
c000cb1a:	bf b4 05 00 00       	mov    edi,0x5b4
c000cb1f:	99                   	cdq    
c000cb20:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000cb25:	f7 f9                	idiv   ecx
c000cb27:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000cb2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb30:	31 d2                	xor    edx,edx
c000cb32:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000cb3a:	01 c3                	add    ebx,eax
c000cb3c:	89 d8                	mov    eax,ebx
c000cb3e:	f7 f1                	div    ecx
c000cb40:	31 d2                	xor    edx,edx
c000cb42:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000cb45:	89 d8                	mov    eax,ebx
c000cb47:	f7 f7                	div    edi
c000cb49:	31 d2                	xor    edx,edx
c000cb4b:	29 c1                	sub    ecx,eax
c000cb4d:	89 d8                	mov    eax,ebx
c000cb4f:	f7 f5                	div    ebp
c000cb51:	bd 6d 01 00 00       	mov    ebp,0x16d
c000cb56:	29 c1                	sub    ecx,eax
c000cb58:	31 d2                	xor    edx,edx
c000cb5a:	89 c8                	mov    eax,ecx
c000cb5c:	f7 f5                	div    ebp
c000cb5e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000cb63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb67:	31 d2                	xor    edx,edx
c000cb69:	89 c8                	mov    eax,ecx
c000cb6b:	f7 f5                	div    ebp
c000cb6d:	31 d2                	xor    edx,edx
c000cb6f:	01 c3                	add    ebx,eax
c000cb71:	89 c8                	mov    eax,ecx
c000cb73:	f7 f7                	div    edi
c000cb75:	bf 99 00 00 00       	mov    edi,0x99
c000cb7a:	29 c3                	sub    ebx,eax
c000cb7c:	31 d2                	xor    edx,edx
c000cb7e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000cb86:	29 c3                	sub    ebx,eax
c000cb88:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cb8b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000cb8e:	bb 05 00 00 00       	mov    ebx,0x5
c000cb93:	83 c1 02             	add    ecx,0x2
c000cb96:	89 c8                	mov    eax,ecx
c000cb98:	f7 f7                	div    edi
c000cb9a:	31 d2                	xor    edx,edx
c000cb9c:	89 c7                	mov    edi,eax
c000cb9e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000cba4:	83 c0 02             	add    eax,0x2
c000cba7:	f7 f3                	div    ebx
c000cba9:	89 eb                	mov    ebx,ebp
c000cbab:	29 c3                	sub    ebx,eax
c000cbad:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000cbb3:	88 1e                	mov    BYTE PTR [esi],bl
c000cbb5:	19 c0                	sbb    eax,eax
c000cbb7:	31 d2                	xor    edx,edx
c000cbb9:	83 e0 0c             	and    eax,0xc
c000cbbc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000cbc0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000cbc8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000cbcc:	83 f9 01             	cmp    ecx,0x1
c000cbcf:	0f 96 c2             	setbe  dl
c000cbd2:	41                   	inc    ecx
c000cbd3:	01 d0                	add    eax,edx
c000cbd5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000cbd8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000cbdc:	83 c4 1c             	add    esp,0x1c
c000cbdf:	89 f0                	mov    eax,esi
c000cbe1:	5b                   	pop    ebx
c000cbe2:	5e                   	pop    esi
c000cbe3:	5f                   	pop    edi
c000cbe4:	5d                   	pop    ebp
c000cbe5:	c2 04 00             	ret    0x4

c000cbe8 <Clock::timeInDatetimeLocal()>:
c000cbe8:	53                   	push   ebx
c000cbe9:	83 ec 14             	sub    esp,0x14
c000cbec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cbf0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cbf4:	e8 7d fc ff ff       	call   c000c876 <Clock::timeInSecondsLocal()>
c000cbf9:	83 c4 0c             	add    esp,0xc
c000cbfc:	52                   	push   edx
c000cbfd:	50                   	push   eax
c000cbfe:	53                   	push   ebx
c000cbff:	e8 a0 fe ff ff       	call   c000caa4 <secondsToDatetime(unsigned long long)>
c000cc04:	89 d8                	mov    eax,ebx
c000cc06:	83 c4 14             	add    esp,0x14
c000cc09:	5b                   	pop    ebx
c000cc0a:	c2 04 00             	ret    0x4
c000cc0d:	90                   	nop

c000cc0e <Device::hibernate()>:
c000cc0e:	c3                   	ret    
c000cc0f:	90                   	nop

c000cc10 <Device::wake()>:
c000cc10:	c3                   	ret    
c000cc11:	90                   	nop

c000cc12 <Device::detect()>:
c000cc12:	c3                   	ret    
c000cc13:	90                   	nop

c000cc14 <Device::disableLegacy()>:
c000cc14:	c3                   	ret    
c000cc15:	90                   	nop

c000cc16 <Device::powerSaving(PowerSavingLevel)>:
c000cc16:	c3                   	ret    
c000cc17:	90                   	nop

c000cc18 <DriverlessDevice::close(int, int, void*)>:
c000cc18:	31 c0                	xor    eax,eax
c000cc1a:	c3                   	ret    
c000cc1b:	90                   	nop

c000cc1c <DriverlessDevice::detect()>:
c000cc1c:	c3                   	ret    
c000cc1d:	90                   	nop

c000cc1e <DriverlessDevice::open(int, int, void*)>:
c000cc1e:	83 ec 18             	sub    esp,0x18
c000cc21:	68 30 f3 01 c0       	push   0xc001f330
c000cc26:	e8 14 48 00 00       	call   c001143f <Krnl::panic(char const*)>
c000cc2b:	83 c8 ff             	or     eax,0xffffffff
c000cc2e:	83 c4 1c             	add    esp,0x1c
c000cc31:	c3                   	ret    

c000cc32 <Device::~Device()>:
c000cc32:	ba 90 f3 01 c0       	mov    edx,0xc001f390
c000cc37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc3b:	89 10                	mov    DWORD PTR [eax],edx
c000cc3d:	90                   	nop
c000cc3e:	c3                   	ret    
c000cc3f:	90                   	nop

c000cc40 <Device::~Device()>:
c000cc40:	83 ec 0c             	sub    esp,0xc
c000cc43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc47:	e8 e6 ff ff ff       	call   c000cc32 <Device::~Device()>
c000cc4c:	83 c4 04             	add    esp,0x4
c000cc4f:	83 ec 08             	sub    esp,0x8
c000cc52:	68 58 01 00 00       	push   0x158
c000cc57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc5b:	e8 9a eb ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000cc60:	83 c4 10             	add    esp,0x10
c000cc63:	83 c4 0c             	add    esp,0xc
c000cc66:	c3                   	ret    
c000cc67:	90                   	nop

c000cc68 <Device::findAndLoadDriver()>:
c000cc68:	c7 44 24 04 4e f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f34e
c000cc70:	e9 7b ec ff ff       	jmp    c000b8f0 <Dbg::kprintf(char const*, ...)>
c000cc75:	90                   	nop

c000cc76 <Device::preOpenPCI(PCIDeviceInfo)>:
c000cc76:	57                   	push   edi
c000cc77:	b9 09 00 00 00       	mov    ecx,0x9
c000cc7c:	56                   	push   esi
c000cc7d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000cc81:	8d 74 24 10          	lea    esi,[esp+0x10]
c000cc85:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000cc8f:	81 c7 18 01 00 00    	add    edi,0x118
c000cc95:	fc                   	cld    
c000cc96:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000cc98:	5e                   	pop    esi
c000cc99:	5f                   	pop    edi
c000cc9a:	c3                   	ret    
c000cc9b:	90                   	nop

c000cc9c <Device::preOpenACPI(void*, char*, char*)>:
c000cc9c:	57                   	push   edi
c000cc9d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000cca2:	56                   	push   esi
c000cca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cca7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccab:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000ccb5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000ccbb:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000ccc1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ccc7:	b9 0e 00 00 00       	mov    ecx,0xe
c000cccc:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000ccd2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ccd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ccd8:	5e                   	pop    esi
c000ccd9:	5f                   	pop    edi
c000ccda:	c3                   	ret    
c000ccdb:	90                   	nop

c000ccdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ccdc:	53                   	push   ebx
c000ccdd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cce1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cce5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cce9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cced:	0f b6 c0             	movzx  eax,al
c000ccf0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ccf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccf8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ccfc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000cd00:	5b                   	pop    ebx
c000cd01:	e9 a6 05 00 00       	jmp    c000d2ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000cd06 <Device::getParent()>:
c000cd06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd0a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000cd10:	c3                   	ret    
c000cd11:	90                   	nop

c000cd12 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cd12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd1a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000cd1f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000cd23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000cd27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd2b:	e9 e8 06 00 00       	jmp    c000d418 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000cd30 <Device::addChild(Device*)>:
c000cd30:	53                   	push   ebx
c000cd31:	83 ec 08             	sub    esp,0x8
c000cd34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cd38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cd3c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000cd42:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000cd48:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cd4a:	85 d2                	test   edx,edx
c000cd4c:	74 04                	je     c000cd52 <Device::addChild(Device*)+0x22>
c000cd4e:	89 d3                	mov    ebx,edx
c000cd50:	eb f6                	jmp    c000cd48 <Device::addChild(Device*)+0x18>
c000cd52:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000cd55:	83 ec 0c             	sub    esp,0xc
c000cd58:	6a 08                	push   0x8
c000cd5a:	e8 02 be ff ff       	call   c0008b61 <malloc>
c000cd5f:	89 03                	mov    DWORD PTR [ebx],eax
c000cd61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cd67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cd6e:	83 c4 18             	add    esp,0x18
c000cd71:	5b                   	pop    ebx
c000cd72:	c3                   	ret    
c000cd73:	90                   	nop

c000cd74 <Device::removeAllChildren()>:
c000cd74:	56                   	push   esi
c000cd75:	53                   	push   ebx
c000cd76:	52                   	push   edx
c000cd77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd7b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000cd81:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cd84:	74 17                	je     c000cd9d <Device::removeAllChildren()+0x29>
c000cd86:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000cd89:	85 c0                	test   eax,eax
c000cd8b:	74 0c                	je     c000cd99 <Device::removeAllChildren()+0x25>
c000cd8d:	83 ec 0c             	sub    esp,0xc
c000cd90:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd92:	50                   	push   eax
c000cd93:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000cd96:	83 c4 10             	add    esp,0x10
c000cd99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cd9b:	eb e4                	jmp    c000cd81 <Device::removeAllChildren()+0xd>
c000cd9d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000cda3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cda9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000cdaf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cdb6:	58                   	pop    eax
c000cdb7:	5b                   	pop    ebx
c000cdb8:	5e                   	pop    esi
c000cdb9:	c3                   	ret    

c000cdba <Device::hibernateAll()>:
c000cdba:	53                   	push   ebx
c000cdbb:	83 ec 14             	sub    esp,0x14
c000cdbe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cdc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cdc4:	53                   	push   ebx
c000cdc5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000cdc8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cdce:	83 c4 10             	add    esp,0x10
c000cdd1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cdd4:	74 0f                	je     c000cde5 <Device::hibernateAll()+0x2b>
c000cdd6:	83 ec 0c             	sub    esp,0xc
c000cdd9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cddc:	e8 d9 ff ff ff       	call   c000cdba <Device::hibernateAll()>
c000cde1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cde3:	eb e9                	jmp    c000cdce <Device::hibernateAll()+0x14>
c000cde5:	83 c4 08             	add    esp,0x8
c000cde8:	5b                   	pop    ebx
c000cde9:	c3                   	ret    

c000cdea <Device::wakeAll()>:
c000cdea:	53                   	push   ebx
c000cdeb:	83 ec 14             	sub    esp,0x14
c000cdee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cdf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cdf4:	53                   	push   ebx
c000cdf5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000cdf8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cdfe:	83 c4 10             	add    esp,0x10
c000ce01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ce04:	74 0f                	je     c000ce15 <Device::wakeAll()+0x2b>
c000ce06:	83 ec 0c             	sub    esp,0xc
c000ce09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ce0c:	e8 d9 ff ff ff       	call   c000cdea <Device::wakeAll()>
c000ce11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ce13:	eb e9                	jmp    c000cdfe <Device::wakeAll()+0x14>
c000ce15:	83 c4 08             	add    esp,0x8
c000ce18:	5b                   	pop    ebx
c000ce19:	c3                   	ret    

c000ce1a <Device::detectAll()>:
c000ce1a:	53                   	push   ebx
c000ce1b:	83 ec 14             	sub    esp,0x14
c000ce1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce22:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce24:	53                   	push   ebx
c000ce25:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ce28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ce2e:	83 c4 10             	add    esp,0x10
c000ce31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ce34:	74 0f                	je     c000ce45 <Device::detectAll()+0x2b>
c000ce36:	83 ec 0c             	sub    esp,0xc
c000ce39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ce3c:	e8 d9 ff ff ff       	call   c000ce1a <Device::detectAll()>
c000ce41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ce43:	eb e9                	jmp    c000ce2e <Device::detectAll()+0x14>
c000ce45:	83 c4 08             	add    esp,0x8
c000ce48:	5b                   	pop    ebx
c000ce49:	c3                   	ret    

c000ce4a <Device::disableLegacyAll()>:
c000ce4a:	c3                   	ret    
c000ce4b:	90                   	nop

c000ce4c <Device::loadDriversForAll()>:
c000ce4c:	c3                   	ret    
c000ce4d:	90                   	nop

c000ce4e <Device::closeAll()>:
c000ce4e:	53                   	push   ebx
c000ce4f:	83 ec 08             	sub    esp,0x8
c000ce52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce56:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce58:	6a 00                	push   0x0
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	53                   	push   ebx
c000ce5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ce62:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ce68:	83 c4 10             	add    esp,0x10
c000ce6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ce6e:	74 0f                	je     c000ce7f <Device::closeAll()+0x31>
c000ce70:	83 ec 0c             	sub    esp,0xc
c000ce73:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ce76:	e8 d3 ff ff ff       	call   c000ce4e <Device::closeAll()>
c000ce7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ce7d:	eb e9                	jmp    c000ce68 <Device::closeAll()+0x1a>
c000ce7f:	83 c4 08             	add    esp,0x8
c000ce82:	5b                   	pop    ebx
c000ce83:	c3                   	ret    

c000ce84 <Device::powerSavingAll(PowerSavingLevel)>:
c000ce84:	56                   	push   esi
c000ce85:	53                   	push   ebx
c000ce86:	83 ec 0c             	sub    esp,0xc
c000ce89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ce8d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ce91:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce93:	56                   	push   esi
c000ce94:	53                   	push   ebx
c000ce95:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ce98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ce9e:	83 c4 10             	add    esp,0x10
c000cea1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cea4:	74 0f                	je     c000ceb5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cea6:	52                   	push   edx
c000cea7:	52                   	push   edx
c000cea8:	56                   	push   esi
c000cea9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ceac:	e8 d3 ff ff ff       	call   c000ce84 <Device::powerSavingAll(PowerSavingLevel)>
c000ceb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ceb3:	eb e9                	jmp    c000ce9e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000ceb5:	58                   	pop    eax
c000ceb6:	5b                   	pop    ebx
c000ceb7:	5e                   	pop    esi
c000ceb8:	c3                   	ret    
c000ceb9:	90                   	nop

c000ceba <Device::setName(char const*)>:
c000ceba:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cec2:	e9 59 37 ff ff       	jmp    c0000620 <strcpy>
c000cec7:	90                   	nop

c000cec8 <Device::Device(char const*)>:
c000cec8:	83 ec 1c             	sub    esp,0x1c
c000cecb:	ba 90 f3 01 c0       	mov    edx,0xc001f390
c000ced0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ced4:	89 10                	mov    DWORD PTR [eax],edx
c000ced6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ceda:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cee8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cef6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cf00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf04:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cf0e:	83 ec 08             	sub    esp,0x8
c000cf11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf19:	e8 9c ff ff ff       	call   c000ceba <Device::setName(char const*)>
c000cf1e:	83 c4 10             	add    esp,0x10
c000cf21:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cf29:	83 ec 0c             	sub    esp,0xc
c000cf2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf30:	e8 2c bc ff ff       	call   c0008b61 <malloc>
c000cf35:	83 c4 10             	add    esp,0x10
c000cf38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cf3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cf45:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cf49:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cf4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf53:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cf59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cf5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf63:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cf69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cf70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf74:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cf7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf7f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cf86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf8a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cf94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf98:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cfa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfa6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cfb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfb4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cfbe:	90                   	nop
c000cfbf:	83 c4 1c             	add    esp,0x1c
c000cfc2:	c3                   	ret    
c000cfc3:	90                   	nop

c000cfc4 <Device::getName()>:
c000cfc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfc8:	05 d0 00 00 00       	add    eax,0xd0
c000cfcd:	c3                   	ret    

c000cfce <DriverlessDevice::DriverlessDevice(char const*)>:
c000cfce:	83 ec 0c             	sub    esp,0xc
c000cfd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd5:	83 ec 08             	sub    esp,0x8
c000cfd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfdc:	50                   	push   eax
c000cfdd:	e8 e6 fe ff ff       	call   c000cec8 <Device::Device(char const*)>
c000cfe2:	83 c4 10             	add    esp,0x10
c000cfe5:	ba bc f3 01 c0       	mov    edx,0xc001f3bc
c000cfea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfee:	89 10                	mov    DWORD PTR [eax],edx
c000cff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cff4:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000cffe:	90                   	nop
c000cfff:	83 c4 0c             	add    esp,0xc
c000d002:	c3                   	ret    
c000d003:	90                   	nop

c000d004 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000d004:	57                   	push   edi
c000d005:	56                   	push   esi
c000d006:	53                   	push   ebx
c000d007:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d00b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d00f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d013:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000d019:	75 0c                	jne    c000d027 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000d01b:	52                   	push   edx
c000d01c:	52                   	push   edx
c000d01d:	53                   	push   ebx
c000d01e:	56                   	push   esi
c000d01f:	e8 ee 09 01 00       	call   c001da12 <LinkedList<Device>::addElement(Device*)>
c000d024:	83 c4 10             	add    esp,0x10
c000d027:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000d02d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d030:	74 12                	je     c000d044 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000d032:	50                   	push   eax
c000d033:	57                   	push   edi
c000d034:	56                   	push   esi
c000d035:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d038:	e8 c7 ff ff ff       	call   c000d004 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000d03d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000d03f:	83 c4 10             	add    esp,0x10
c000d042:	eb e9                	jmp    c000d02d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000d044:	5b                   	pop    ebx
c000d045:	5e                   	pop    esi
c000d046:	5f                   	pop    edi
c000d047:	c3                   	ret    

c000d048 <getDevicesOfType(DeviceType)>:
c000d048:	53                   	push   ebx
c000d049:	83 ec 14             	sub    esp,0x14
c000d04c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d050:	53                   	push   ebx
c000d051:	e8 98 0a 01 00       	call   c001daee <LinkedList<Device>::LinkedList()>
c000d056:	83 c4 0c             	add    esp,0xc
c000d059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d05d:	53                   	push   ebx
c000d05e:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c000d064:	e8 9b ff ff ff       	call   c000d004 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000d069:	89 d8                	mov    eax,ebx
c000d06b:	83 c4 18             	add    esp,0x18
c000d06e:	5b                   	pop    ebx
c000d06f:	c2 04 00             	ret    0x4
c000d072:	66 90                	xchg   ax,ax

c000d074 <HardDiskController::HardDiskController(char const*)>:
c000d074:	83 ec 0c             	sub    esp,0xc
c000d077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d07b:	83 ec 08             	sub    esp,0x8
c000d07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d082:	50                   	push   eax
c000d083:	e8 40 fe ff ff       	call   c000cec8 <Device::Device(char const*)>
c000d088:	83 c4 10             	add    esp,0x10
c000d08b:	ba e8 f3 01 c0       	mov    edx,0xc001f3e8
c000d090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d094:	89 10                	mov    DWORD PTR [eax],edx
c000d096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d09a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000d0a4:	90                   	nop
c000d0a5:	83 c4 0c             	add    esp,0xc
c000d0a8:	c3                   	ret    
c000d0a9:	90                   	nop
c000d0aa:	66 90                	xchg   ax,ax

c000d0ac <HardDiskController::~HardDiskController()>:
c000d0ac:	83 ec 0c             	sub    esp,0xc
c000d0af:	ba e8 f3 01 c0       	mov    edx,0xc001f3e8
c000d0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0b8:	89 10                	mov    DWORD PTR [eax],edx
c000d0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0be:	83 ec 0c             	sub    esp,0xc
c000d0c1:	50                   	push   eax
c000d0c2:	e8 6b fb ff ff       	call   c000cc32 <Device::~Device()>
c000d0c7:	83 c4 10             	add    esp,0x10
c000d0ca:	90                   	nop
c000d0cb:	83 c4 0c             	add    esp,0xc
c000d0ce:	c3                   	ret    
c000d0cf:	90                   	nop

c000d0d0 <HardDiskController::~HardDiskController()>:
c000d0d0:	83 ec 0c             	sub    esp,0xc
c000d0d3:	83 ec 0c             	sub    esp,0xc
c000d0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0da:	e8 cd ff ff ff       	call   c000d0ac <HardDiskController::~HardDiskController()>
c000d0df:	83 c4 10             	add    esp,0x10
c000d0e2:	83 ec 08             	sub    esp,0x8
c000d0e5:	68 58 01 00 00       	push   0x158
c000d0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0ee:	e8 07 e7 ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000d0f3:	83 c4 10             	add    esp,0x10
c000d0f6:	83 c4 0c             	add    esp,0xc
c000d0f9:	c3                   	ret    

c000d0fa <PhysicalDisk::eject()>:
c000d0fa:	83 c8 ff             	or     eax,0xffffffff
c000d0fd:	c3                   	ret    

c000d0fe <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000d0fe:	83 ec 0c             	sub    esp,0xc
c000d101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d105:	83 ec 08             	sub    esp,0x8
c000d108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d10c:	50                   	push   eax
c000d10d:	e8 b6 fd ff ff       	call   c000cec8 <Device::Device(char const*)>
c000d112:	83 c4 10             	add    esp,0x10
c000d115:	ba 14 f4 01 c0       	mov    edx,0xc001f414
c000d11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d11e:	89 10                	mov    DWORD PTR [eax],edx
c000d120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d124:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d12f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000d136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d13a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000d144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d14c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000d152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d156:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d160:	90                   	nop
c000d161:	83 c4 0c             	add    esp,0xc
c000d164:	c3                   	ret    
c000d165:	90                   	nop

c000d166 <PhysicalDisk::startCache()>:
c000d166:	56                   	push   esi
c000d167:	53                   	push   ebx
c000d168:	83 ec 10             	sub    esp,0x10
c000d16b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d16f:	6a 44                	push   0x44
c000d171:	e8 eb b9 ff ff       	call   c0008b61 <malloc>
c000d176:	89 c6                	mov    esi,eax
c000d178:	58                   	pop    eax
c000d179:	5a                   	pop    edx
c000d17a:	53                   	push   ebx
c000d17b:	56                   	push   esi
c000d17c:	e8 ab 15 00 00       	call   c000e72c <VCache::VCache(PhysicalDisk*)>
c000d181:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000d187:	83 c4 14             	add    esp,0x14
c000d18a:	5b                   	pop    ebx
c000d18b:	5e                   	pop    esi
c000d18c:	c3                   	ret    
c000d18d:	90                   	nop

c000d18e <PhysicalDisk::~PhysicalDisk()>:
c000d18e:	83 ec 0c             	sub    esp,0xc
c000d191:	ba 14 f4 01 c0       	mov    edx,0xc001f414
c000d196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d19a:	89 10                	mov    DWORD PTR [eax],edx
c000d19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a0:	83 ec 0c             	sub    esp,0xc
c000d1a3:	50                   	push   eax
c000d1a4:	e8 89 fa ff ff       	call   c000cc32 <Device::~Device()>
c000d1a9:	83 c4 10             	add    esp,0x10
c000d1ac:	90                   	nop
c000d1ad:	83 c4 0c             	add    esp,0xc
c000d1b0:	c3                   	ret    
c000d1b1:	90                   	nop

c000d1b2 <PhysicalDisk::~PhysicalDisk()>:
c000d1b2:	83 ec 0c             	sub    esp,0xc
c000d1b5:	83 ec 0c             	sub    esp,0xc
c000d1b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1bc:	e8 cd ff ff ff       	call   c000d18e <PhysicalDisk::~PhysicalDisk()>
c000d1c1:	83 c4 10             	add    esp,0x10
c000d1c4:	83 ec 08             	sub    esp,0x8
c000d1c7:	68 6c 01 00 00       	push   0x16c
c000d1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1d0:	e8 25 e6 ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	83 c4 0c             	add    esp,0xc
c000d1db:	c3                   	ret    

c000d1dc <int_handler>:
c000d1dc:	55                   	push   ebp
c000d1dd:	57                   	push   edi
c000d1de:	56                   	push   esi
c000d1df:	53                   	push   ebx
c000d1e0:	83 ec 0c             	sub    esp,0xc
c000d1e3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000d1e7:	80 3d 60 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024760,0x0
c000d1ee:	74 0b                	je     c000d1fb <int_handler+0x1f>
c000d1f0:	fa                   	cli    
c000d1f1:	f4                   	hlt    
c000d1f2:	80 3d 60 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024760,0x0
c000d1f9:	75 f5                	jne    c000d1f0 <int_handler+0x14>
c000d1fb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000d1fe:	8d 46 e0             	lea    eax,[esi-0x20]
c000d201:	83 f8 17             	cmp    eax,0x17
c000d204:	76 3e                	jbe    c000d244 <int_handler+0x68>
c000d206:	c1 e6 04             	shl    esi,0x4
c000d209:	31 db                	xor    ebx,ebx
c000d20b:	8d ae e0 2d 02 c0    	lea    ebp,[esi-0x3ffdd220]
c000d211:	81 c6 e0 1d 02 c0    	add    esi,0xc0021de0
c000d217:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000d21b:	85 c0                	test   eax,eax
c000d21d:	74 13                	je     c000d232 <int_handler+0x56>
c000d21f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000d222:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000d226:	74 2a                	je     c000d252 <int_handler+0x76>
c000d228:	83 ec 08             	sub    esp,0x8
c000d22b:	52                   	push   edx
c000d22c:	57                   	push   edi
c000d22d:	ff d0                	call   eax
c000d22f:	83 c4 10             	add    esp,0x10
c000d232:	43                   	inc    ebx
c000d233:	83 fb 04             	cmp    ebx,0x4
c000d236:	75 df                	jne    c000d217 <int_handler+0x3b>
c000d238:	83 c4 0c             	add    esp,0xc
c000d23b:	31 c0                	xor    eax,eax
c000d23d:	5b                   	pop    ebx
c000d23e:	31 d2                	xor    edx,edx
c000d240:	5e                   	pop    esi
c000d241:	5f                   	pop    edi
c000d242:	5d                   	pop    ebp
c000d243:	c3                   	ret    
c000d244:	83 ec 0c             	sub    esp,0xc
c000d247:	50                   	push   eax
c000d248:	e8 cc 94 00 00       	call   c0016719 <HalEndOfInterrupt(int)>
c000d24d:	83 c4 10             	add    esp,0x10
c000d250:	eb b4                	jmp    c000d206 <int_handler+0x2a>
c000d252:	83 ec 08             	sub    esp,0x8
c000d255:	52                   	push   edx
c000d256:	57                   	push   edi
c000d257:	ff d0                	call   eax
c000d259:	83 c4 10             	add    esp,0x10
c000d25c:	83 c4 0c             	add    esp,0xc
c000d25f:	5b                   	pop    ebx
c000d260:	5e                   	pop    esi
c000d261:	5f                   	pop    edi
c000d262:	5d                   	pop    ebp
c000d263:	c3                   	ret    

c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000d264:	56                   	push   esi
c000d265:	31 c0                	xor    eax,eax
c000d267:	53                   	push   ebx
c000d268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d26c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d270:	89 ca                	mov    edx,ecx
c000d272:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d276:	c1 e2 04             	shl    edx,0x4
c000d279:	83 bc 82 e0 2d 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdd220],0x0
c000d281:	74 15                	je     c000d298 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000d283:	40                   	inc    eax
c000d284:	83 f8 04             	cmp    eax,0x4
c000d287:	75 f0                	jne    c000d279 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000d289:	c7 44 24 0c 44 f4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f444
c000d291:	5b                   	pop    ebx
c000d292:	5e                   	pop    esi
c000d293:	e9 a7 41 00 00       	jmp    c001143f <Krnl::panic(char const*)>
c000d298:	8d 04 88             	lea    eax,[eax+ecx*4]
c000d29b:	89 1c 85 e0 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd220],ebx
c000d2a2:	89 34 85 e0 1d 02 c0 	mov    DWORD PTR [eax*4-0x3ffde220],esi
c000d2a9:	5b                   	pop    ebx
c000d2aa:	5e                   	pop    esi
c000d2ab:	c3                   	ret    

c000d2ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000d2ac:	57                   	push   edi
c000d2ad:	8b 15 e8 1c 02 c0    	mov    edx,DWORD PTR ds:0xc0021ce8
c000d2b3:	56                   	push   esi
c000d2b4:	53                   	push   ebx
c000d2b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d2b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d2bd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d2c4:	74 5b                	je     c000d321 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000d2c6:	89 c7                	mov    edi,eax
c000d2c8:	84 c0                	test   al,al
c000d2ca:	74 24                	je     c000d2f0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000d2cc:	83 fe 0f             	cmp    esi,0xf
c000d2cf:	0f 8f d9 00 00 00    	jg     c000d3ae <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000d2d5:	8a 86 60 0c 02 c0    	mov    al,BYTE PTR [esi-0x3ffdf3a0]
c000d2db:	25 ff 00 00 00       	and    eax,0xff
c000d2e0:	66 8b bc 00 80 45 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdba80]
c000d2e8:	89 c6                	mov    esi,eax
c000d2ea:	66 d1 ef             	shr    di,1
c000d2ed:	83 e7 01             	and    edi,0x1
c000d2f0:	83 ec 08             	sub    esp,0x8
c000d2f3:	a1 a0 5b 02 c0       	mov    eax,ds:0xc0025ba0
c000d2f8:	31 db                	xor    ebx,ebx
c000d2fa:	50                   	push   eax
c000d2fb:	68 51 f4 01 c0       	push   0xc001f451
c000d300:	e8 eb e5 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c000d305:	83 c4 10             	add    esp,0x10
c000d308:	a1 a0 5b 02 c0       	mov    eax,ds:0xc0025ba0
c000d30d:	85 c0                	test   eax,eax
c000d30f:	7f 51                	jg     c000d362 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000d311:	83 ec 0c             	sub    esp,0xc
c000d314:	68 68 f4 01 c0       	push   0xc001f468
c000d319:	e8 21 41 00 00       	call   c001143f <Krnl::panic(char const*)>
c000d31e:	83 c4 10             	add    esp,0x10
c000d321:	8d 4e 20             	lea    ecx,[esi+0x20]
c000d324:	31 d2                	xor    edx,edx
c000d326:	89 c8                	mov    eax,ecx
c000d328:	c1 e0 04             	shl    eax,0x4
c000d32b:	8b 9c 90 e0 2d 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdd220]
c000d332:	85 db                	test   ebx,ebx
c000d334:	0f 84 8b 00 00 00    	je     c000d3c5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000d33a:	42                   	inc    edx
c000d33b:	83 fa 04             	cmp    edx,0x4
c000d33e:	75 eb                	jne    c000d32b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000d340:	83 ec 0c             	sub    esp,0xc
c000d343:	68 bc f4 01 c0       	push   0xc001f4bc
c000d348:	e8 f2 40 00 00       	call   c001143f <Krnl::panic(char const*)>
c000d34d:	83 c4 10             	add    esp,0x10
c000d350:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d355:	5b                   	pop    ebx
c000d356:	5e                   	pop    esi
c000d357:	5f                   	pop    edi
c000d358:	c3                   	ret    
c000d359:	43                   	inc    ebx
c000d35a:	39 1d a0 5b 02 c0    	cmp    DWORD PTR ds:0xc0025ba0,ebx
c000d360:	7e af                	jle    c000d311 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000d362:	83 ec 08             	sub    esp,0x8
c000d365:	8b 04 9d c0 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda440]
c000d36c:	56                   	push   esi
c000d36d:	50                   	push   eax
c000d36e:	e8 cb f6 00 00       	call   c001ca3e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	84 c0                	test   al,al
c000d378:	74 df                	je     c000d359 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000d37a:	81 e7 ff 00 00 00    	and    edi,0xff
c000d380:	50                   	push   eax
c000d381:	8d 46 20             	lea    eax,[esi+0x20]
c000d384:	57                   	push   edi
c000d385:	25 ff 00 00 00       	and    eax,0xff
c000d38a:	6a 00                	push   0x0
c000d38c:	50                   	push   eax
c000d38d:	89 f0                	mov    eax,esi
c000d38f:	6a 00                	push   0x0
c000d391:	25 ff 00 00 00       	and    eax,0xff
c000d396:	6a 00                	push   0x0
c000d398:	50                   	push   eax
c000d399:	8b 04 9d c0 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda440]
c000d3a0:	50                   	push   eax
c000d3a1:	e8 12 f8 00 00       	call   c001cbb8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d3a6:	83 c4 20             	add    esp,0x20
c000d3a9:	e9 73 ff ff ff       	jmp    c000d321 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000d3ae:	83 ec 0c             	sub    esp,0xc
c000d3b1:	31 ff                	xor    edi,edi
c000d3b3:	68 84 f4 01 c0       	push   0xc001f484
c000d3b8:	e8 82 40 00 00       	call   c001143f <Krnl::panic(char const*)>
c000d3bd:	83 c4 10             	add    esp,0x10
c000d3c0:	e9 2b ff ff ff       	jmp    c000d2f0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000d3c5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000d3c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d3cc:	89 14 85 e0 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd220],edx
c000d3d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3d7:	5b                   	pop    ebx
c000d3d8:	89 14 85 e0 1d 02 c0 	mov    DWORD PTR [eax*4-0x3ffde220],edx
c000d3df:	89 f0                	mov    eax,esi
c000d3e1:	5e                   	pop    esi
c000d3e2:	5f                   	pop    edi
c000d3e3:	c3                   	ret    

c000d3e4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d3ec:	c1 e0 04             	shl    eax,0x4
c000d3ef:	8d 50 10             	lea    edx,[eax+0x10]
c000d3f2:	39 88 e0 2d 02 c0    	cmp    DWORD PTR [eax-0x3ffdd220],ecx
c000d3f8:	74 08                	je     c000d402 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d3fa:	83 c0 04             	add    eax,0x4
c000d3fd:	39 d0                	cmp    eax,edx
c000d3ff:	75 f1                	jne    c000d3f2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d401:	c3                   	ret    
c000d402:	c7 80 e0 2d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd220],0x0
c000d40c:	c7 80 e0 1d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde220],0x0
c000d416:	eb e2                	jmp    c000d3fa <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d418 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d418:	53                   	push   ebx
c000d419:	83 ec 08             	sub    esp,0x8
c000d41c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d420:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d425:	74 0e                	je     c000d435 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d427:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000d42c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d433:	75 37                	jne    c000d46c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d439:	83 c0 20             	add    eax,0x20
c000d43c:	c1 e0 04             	shl    eax,0x4
c000d43f:	8d 50 10             	lea    edx,[eax+0x10]
c000d442:	39 98 e0 2d 02 c0    	cmp    DWORD PTR [eax-0x3ffdd220],ebx
c000d448:	74 0c                	je     c000d456 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d44a:	83 c0 04             	add    eax,0x4
c000d44d:	39 d0                	cmp    eax,edx
c000d44f:	75 f1                	jne    c000d442 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d451:	83 c4 08             	add    esp,0x8
c000d454:	5b                   	pop    ebx
c000d455:	c3                   	ret    
c000d456:	c7 80 e0 2d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd220],0x0
c000d460:	c7 80 e0 1d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde220],0x0
c000d46a:	eb de                	jmp    c000d44a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d46c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d471:	7f 12                	jg     c000d485 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000d473:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d477:	31 c0                	xor    eax,eax
c000d479:	8a 81 60 0c 02 c0    	mov    al,BYTE PTR [ecx-0x3ffdf3a0]
c000d47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d483:	eb b0                	jmp    c000d435 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d485:	83 ec 0c             	sub    esp,0xc
c000d488:	68 75 f4 01 c0       	push   0xc001f475
c000d48d:	e8 ad 3f 00 00       	call   c001143f <Krnl::panic(char const*)>
c000d492:	83 c4 10             	add    esp,0x10
c000d495:	eb 9e                	jmp    c000d435 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d497 <setupINTS()>:
c000d497:	31 c0                	xor    eax,eax
c000d499:	c7 80 e0 2d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd220],0x0
c000d4a3:	c7 80 e0 1d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde220],0x0
c000d4ad:	c7 80 e4 2d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd21c],0x0
c000d4b7:	c7 80 e4 1d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde21c],0x0
c000d4c1:	c7 80 e8 2d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd218],0x0
c000d4cb:	c7 80 e8 1d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde218],0x0
c000d4d5:	c7 80 ec 2d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd214],0x0
c000d4df:	c7 80 ec 1d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde214],0x0
c000d4e9:	83 c0 10             	add    eax,0x10
c000d4ec:	3d 00 10 00 00       	cmp    eax,0x1000
c000d4f1:	75 a6                	jne    c000d499 <setupINTS()+0x2>
c000d4f3:	c3                   	ret    

c000d4f4 <convertLegacyIRQNumber(int)>:
c000d4f4:	83 ec 0c             	sub    esp,0xc
c000d4f7:	8b 15 e8 1c 02 c0    	mov    edx,DWORD PTR ds:0xc0021ce8
c000d4fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d501:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d508:	74 0f                	je     c000d519 <convertLegacyIRQNumber(int)+0x25>
c000d50a:	83 f8 0f             	cmp    eax,0xf
c000d50d:	7f 0e                	jg     c000d51d <convertLegacyIRQNumber(int)+0x29>
c000d50f:	31 c9                	xor    ecx,ecx
c000d511:	8a 88 60 0c 02 c0    	mov    cl,BYTE PTR [eax-0x3ffdf3a0]
c000d517:	89 c8                	mov    eax,ecx
c000d519:	83 c4 0c             	add    esp,0xc
c000d51c:	c3                   	ret    
c000d51d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d521:	83 ec 0c             	sub    esp,0xc
c000d524:	68 84 f4 01 c0       	push   0xc001f484
c000d529:	e8 11 3f 00 00       	call   c001143f <Krnl::panic(char const*)>
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d535:	83 c4 0c             	add    esp,0xc
c000d538:	c3                   	ret    
c000d539:	90                   	nop

c000d53a <startGUI(void*)>:
c000d53a:	55                   	push   ebp
c000d53b:	89 e5                	mov    ebp,esp
c000d53d:	53                   	push   ebx
c000d53e:	83 ec 04             	sub    esp,0x4
c000d541:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000d546:	48                   	dec    eax
c000d547:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000d54c:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000d551:	85 c0                	test   eax,eax
c000d553:	75 01                	jne    c000d556 <startGUI(void*)+0x1c>
c000d555:	fb                   	sti    
c000d556:	8b 1d e8 1c 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ce8
c000d55c:	83 ec 08             	sub    esp,0x8
c000d55f:	6a 01                	push   0x1
c000d561:	68 e1 f4 01 c0       	push   0xc001f4e1
c000d566:	e8 37 68 00 00       	call   c0013da2 <Thr::loadDLL(char const*, bool)>
c000d56b:	83 c4 10             	add    esp,0x10
c000d56e:	83 ec 08             	sub    esp,0x8
c000d571:	53                   	push   ebx
c000d572:	50                   	push   eax
c000d573:	e8 5b 6a 00 00       	call   c0013fd3 <Thr::executeDLL(unsigned long, void*)>
c000d578:	83 c4 10             	add    esp,0x10
c000d57b:	8b 1d e8 1c 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ce8
c000d581:	83 ec 08             	sub    esp,0x8
c000d584:	6a 01                	push   0x1
c000d586:	68 fb f4 01 c0       	push   0xc001f4fb
c000d58b:	e8 12 68 00 00       	call   c0013da2 <Thr::loadDLL(char const*, bool)>
c000d590:	83 c4 10             	add    esp,0x10
c000d593:	83 ec 08             	sub    esp,0x8
c000d596:	53                   	push   ebx
c000d597:	50                   	push   eax
c000d598:	e8 36 6a 00 00       	call   c0013fd3 <Thr::executeDLL(unsigned long, void*)>
c000d59d:	83 c4 10             	add    esp,0x10
c000d5a0:	90                   	nop
c000d5a1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d5a4:	c9                   	leave  
c000d5a5:	c3                   	ret    

c000d5a6 <startGUIVESA(void*)>:
c000d5a6:	55                   	push   ebp
c000d5a7:	89 e5                	mov    ebp,esp
c000d5a9:	53                   	push   ebx
c000d5aa:	83 ec 04             	sub    esp,0x4
c000d5ad:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000d5b2:	48                   	dec    eax
c000d5b3:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000d5b8:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000d5bd:	85 c0                	test   eax,eax
c000d5bf:	75 01                	jne    c000d5c2 <startGUIVESA(void*)+0x1c>
c000d5c1:	fb                   	sti    
c000d5c2:	8b 1d e8 1c 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ce8
c000d5c8:	83 ec 08             	sub    esp,0x8
c000d5cb:	6a 01                	push   0x1
c000d5cd:	68 19 f5 01 c0       	push   0xc001f519
c000d5d2:	e8 cb 67 00 00       	call   c0013da2 <Thr::loadDLL(char const*, bool)>
c000d5d7:	83 c4 10             	add    esp,0x10
c000d5da:	83 ec 08             	sub    esp,0x8
c000d5dd:	53                   	push   ebx
c000d5de:	50                   	push   eax
c000d5df:	e8 ef 69 00 00       	call   c0013fd3 <Thr::executeDLL(unsigned long, void*)>
c000d5e4:	83 c4 10             	add    esp,0x10
c000d5e7:	8b 1d e8 1c 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ce8
c000d5ed:	83 ec 08             	sub    esp,0x8
c000d5f0:	6a 01                	push   0x1
c000d5f2:	68 fb f4 01 c0       	push   0xc001f4fb
c000d5f7:	e8 a6 67 00 00       	call   c0013da2 <Thr::loadDLL(char const*, bool)>
c000d5fc:	83 c4 10             	add    esp,0x10
c000d5ff:	83 ec 08             	sub    esp,0x8
c000d602:	53                   	push   ebx
c000d603:	50                   	push   eax
c000d604:	e8 ca 69 00 00       	call   c0013fd3 <Thr::executeDLL(unsigned long, void*)>
c000d609:	83 c4 10             	add    esp,0x10
c000d60c:	90                   	nop
c000d60d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d610:	c9                   	leave  
c000d611:	c3                   	ret    

c000d612 <sendKeyToTerminal(unsigned char)>:
c000d612:	55                   	push   ebp
c000d613:	89 e5                	mov    ebp,esp
c000d615:	83 ec 28             	sub    esp,0x28
c000d618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d61b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d61e:	8b 15 34 1d 02 c0    	mov    edx,DWORD PTR ds:0xc0021d34
c000d624:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000d627:	25 ff 00 00 00       	and    eax,0xff
c000d62c:	83 ec 08             	sub    esp,0x8
c000d62f:	50                   	push   eax
c000d630:	52                   	push   edx
c000d631:	e8 aa c8 ff ff       	call   c0009ee0 <VgaText::receiveKey(unsigned char)>
c000d636:	83 c4 10             	add    esp,0x10
c000d639:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000d63d:	0f 85 8f 00 00 00    	jne    c000d6d2 <sendKeyToTerminal(unsigned char)+0xc0>
c000d643:	fa                   	cli    
c000d644:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000d649:	40                   	inc    eax
c000d64a:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000d64f:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c000d654:	40                   	inc    eax
c000d655:	a3 a4 51 02 c0       	mov    ds:0xc00251a4,eax
c000d65a:	a1 e0 3d 02 c0       	mov    eax,ds:0xc0023de0
c000d65f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d662:	c7 05 e0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023de0,0x0
c000d66c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d670:	74 1f                	je     c000d691 <sendKeyToTerminal(unsigned char)+0x7f>
c000d672:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d675:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d678:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d67b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d67e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d681:	83 ec 0c             	sub    esp,0xc
c000d684:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d687:	e8 cc 75 00 00       	call   c0014c58 <unblockTask(ThreadControlBlock*)>
c000d68c:	83 c4 10             	add    esp,0x10
c000d68f:	eb db                	jmp    c000d66c <sendKeyToTerminal(unsigned char)+0x5a>
c000d691:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c000d696:	48                   	dec    eax
c000d697:	a3 a4 51 02 c0       	mov    ds:0xc00251a4,eax
c000d69c:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c000d6a1:	85 c0                	test   eax,eax
c000d6a3:	75 18                	jne    c000d6bd <sendKeyToTerminal(unsigned char)+0xab>
c000d6a5:	a1 a0 51 02 c0       	mov    eax,ds:0xc00251a0
c000d6aa:	85 c0                	test   eax,eax
c000d6ac:	74 0f                	je     c000d6bd <sendKeyToTerminal(unsigned char)+0xab>
c000d6ae:	c7 05 a0 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251a0,0x0
c000d6b8:	e8 d7 70 00 00       	call   c0014794 <schedule()>
c000d6bd:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000d6c2:	48                   	dec    eax
c000d6c3:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000d6c8:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000d6cd:	85 c0                	test   eax,eax
c000d6cf:	75 01                	jne    c000d6d2 <sendKeyToTerminal(unsigned char)+0xc0>
c000d6d1:	fb                   	sti    
c000d6d2:	90                   	nop
c000d6d3:	c9                   	leave  
c000d6d4:	c3                   	ret    

c000d6d5 <sendKeyboardToken(KeyboardToken)>:
c000d6d5:	55                   	push   ebp
c000d6d6:	89 e5                	mov    ebp,esp
c000d6d8:	83 ec 18             	sub    esp,0x18
c000d6db:	e8 ab 3e 00 00       	call   c001158b <Krnl::userIOReceived()>
c000d6e0:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d6e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e6:	25 ff ff 00 00       	and    eax,0xffff
c000d6eb:	83 f2 01             	xor    edx,0x1
c000d6ee:	88 90 00 3e 02 c0    	mov    BYTE PTR [eax-0x3ffdc200],dl
c000d6f4:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000d6f9:	85 c0                	test   eax,eax
c000d6fb:	74 24                	je     c000d721 <sendKeyboardToken(KeyboardToken)+0x4c>
c000d6fd:	8b 0d e8 3d 02 c0    	mov    ecx,DWORD PTR ds:0xc0023de8
c000d703:	83 ec 04             	sub    esp,0x4
c000d706:	68 00 3e 02 c0       	push   0xc0023e00
c000d70b:	83 ec 08             	sub    esp,0x8
c000d70e:	89 e2                	mov    edx,esp
c000d710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d713:	89 02                	mov    DWORD PTR [edx],eax
c000d715:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d718:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d71c:	ff d1                	call   ecx
c000d71e:	83 c4 10             	add    esp,0x10
c000d721:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d725:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d728:	a0 08 42 02 c0       	mov    al,ds:0xc0024208
c000d72d:	38 c2                	cmp    dl,al
c000d72f:	74 1e                	je     c000d74f <sendKeyboardToken(KeyboardToken)+0x7a>
c000d731:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d734:	a2 08 42 02 c0       	mov    ds:0xc0024208,al
c000d739:	a0 08 42 02 c0       	mov    al,ds:0xc0024208
c000d73e:	25 ff 00 00 00       	and    eax,0xff
c000d743:	83 ec 0c             	sub    esp,0xc
c000d746:	50                   	push   eax
c000d747:	e8 e6 be ff ff       	call   c0009632 <setTerminalScrollLock(bool)>
c000d74c:	83 c4 10             	add    esp,0x10
c000d74f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d752:	84 c0                	test   al,al
c000d754:	0f 84 ae 00 00 00    	je     c000d808 <sendKeyboardToken(KeyboardToken)+0x133>
c000d75a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d75d:	66 3d 10 03          	cmp    ax,0x310
c000d761:	75 06                	jne    c000d769 <sendKeyboardToken(KeyboardToken)+0x94>
c000d763:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d76c:	66 3d 11 03          	cmp    ax,0x311
c000d770:	75 06                	jne    c000d778 <sendKeyboardToken(KeyboardToken)+0xa3>
c000d772:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d77b:	66 3d 12 03          	cmp    ax,0x312
c000d77f:	75 06                	jne    c000d787 <sendKeyboardToken(KeyboardToken)+0xb2>
c000d781:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d78a:	66 3d 13 03          	cmp    ax,0x313
c000d78e:	75 06                	jne    c000d796 <sendKeyboardToken(KeyboardToken)+0xc1>
c000d790:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d799:	66 3d 14 03          	cmp    ax,0x314
c000d79d:	75 06                	jne    c000d7a5 <sendKeyboardToken(KeyboardToken)+0xd0>
c000d79f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d7a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a8:	66 3d 15 03          	cmp    ax,0x315
c000d7ac:	75 06                	jne    c000d7b4 <sendKeyboardToken(KeyboardToken)+0xdf>
c000d7ae:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d7b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b7:	66 3d 16 03          	cmp    ax,0x316
c000d7bb:	75 06                	jne    c000d7c3 <sendKeyboardToken(KeyboardToken)+0xee>
c000d7bd:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d7c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c6:	66 3d 17 03          	cmp    ax,0x317
c000d7ca:	75 06                	jne    c000d7d2 <sendKeyboardToken(KeyboardToken)+0xfd>
c000d7cc:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d7d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d5:	66 3d 18 03          	cmp    ax,0x318
c000d7d9:	75 06                	jne    c000d7e1 <sendKeyboardToken(KeyboardToken)+0x10c>
c000d7db:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d7e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7e4:	66 3d 19 03          	cmp    ax,0x319
c000d7e8:	75 06                	jne    c000d7f0 <sendKeyboardToken(KeyboardToken)+0x11b>
c000d7ea:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d7f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7f3:	66 3d 1a 03          	cmp    ax,0x31a
c000d7f7:	0f 85 c9 00 00 00    	jne    c000d8c6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000d7fd:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d803:	e9 be 00 00 00       	jmp    c000d8c6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000d808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d80b:	66 3d 10 03          	cmp    ax,0x310
c000d80f:	75 0a                	jne    c000d81b <sendKeyboardToken(KeyboardToken)+0x146>
c000d811:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d817:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d81b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d81e:	66 3d 11 03          	cmp    ax,0x311
c000d822:	75 0a                	jne    c000d82e <sendKeyboardToken(KeyboardToken)+0x159>
c000d824:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d82a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d82e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d831:	66 3d 12 03          	cmp    ax,0x312
c000d835:	75 0a                	jne    c000d841 <sendKeyboardToken(KeyboardToken)+0x16c>
c000d837:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d83d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d844:	66 3d 13 03          	cmp    ax,0x313
c000d848:	75 0a                	jne    c000d854 <sendKeyboardToken(KeyboardToken)+0x17f>
c000d84a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d850:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d857:	66 3d 14 03          	cmp    ax,0x314
c000d85b:	75 0a                	jne    c000d867 <sendKeyboardToken(KeyboardToken)+0x192>
c000d85d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d863:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d867:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d86a:	66 3d 15 03          	cmp    ax,0x315
c000d86e:	75 0a                	jne    c000d87a <sendKeyboardToken(KeyboardToken)+0x1a5>
c000d870:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d876:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d87a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d87d:	66 3d 16 03          	cmp    ax,0x316
c000d881:	75 0a                	jne    c000d88d <sendKeyboardToken(KeyboardToken)+0x1b8>
c000d883:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d889:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d890:	66 3d 17 03          	cmp    ax,0x317
c000d894:	75 0a                	jne    c000d8a0 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000d896:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d89c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d8a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8a3:	66 3d 18 03          	cmp    ax,0x318
c000d8a7:	75 0a                	jne    c000d8b3 <sendKeyboardToken(KeyboardToken)+0x1de>
c000d8a9:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d8af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d8b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8b6:	66 3d 19 03          	cmp    ax,0x319
c000d8ba:	75 0a                	jne    c000d8c6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000d8bc:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d8c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d8c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8c9:	66 3d 00 02          	cmp    ax,0x200
c000d8cd:	75 2c                	jne    c000d8fb <sendKeyboardToken(KeyboardToken)+0x226>
c000d8cf:	a0 00 42 02 c0       	mov    al,ds:0xc0024200
c000d8d4:	83 f0 01             	xor    eax,0x1
c000d8d7:	84 c0                	test   al,al
c000d8d9:	74 20                	je     c000d8fb <sendKeyboardToken(KeyboardToken)+0x226>
c000d8db:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c000d8e0:	6a 01                	push   0x1
c000d8e2:	6a 00                	push   0x0
c000d8e4:	68 3a d5 00 c0       	push   0xc000d53a
c000d8e9:	50                   	push   eax
c000d8ea:	e8 85 6c 00 00       	call   c0014574 <Process::createThread(void (*)(void*), void*, int)>
c000d8ef:	83 c4 10             	add    esp,0x10
c000d8f2:	c6 05 00 42 02 c0 01 	mov    BYTE PTR ds:0xc0024200,0x1
c000d8f9:	eb 33                	jmp    c000d92e <sendKeyboardToken(KeyboardToken)+0x259>
c000d8fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8fe:	66 3d 01 02          	cmp    ax,0x201
c000d902:	75 2a                	jne    c000d92e <sendKeyboardToken(KeyboardToken)+0x259>
c000d904:	a0 00 42 02 c0       	mov    al,ds:0xc0024200
c000d909:	83 f0 01             	xor    eax,0x1
c000d90c:	84 c0                	test   al,al
c000d90e:	74 1e                	je     c000d92e <sendKeyboardToken(KeyboardToken)+0x259>
c000d910:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c000d915:	6a 01                	push   0x1
c000d917:	6a 00                	push   0x0
c000d919:	68 a6 d5 00 c0       	push   0xc000d5a6
c000d91e:	50                   	push   eax
c000d91f:	e8 50 6c 00 00       	call   c0014574 <Process::createThread(void (*)(void*), void*, int)>
c000d924:	83 c4 10             	add    esp,0x10
c000d927:	c6 05 00 42 02 c0 01 	mov    BYTE PTR ds:0xc0024200,0x1
c000d92e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d931:	66 3d 1d 03          	cmp    ax,0x31d
c000d935:	75 06                	jne    c000d93d <sendKeyboardToken(KeyboardToken)+0x268>
c000d937:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d93d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d940:	66 3d 1c 03          	cmp    ax,0x31c
c000d944:	75 06                	jne    c000d94c <sendKeyboardToken(KeyboardToken)+0x277>
c000d946:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d94c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d94f:	66 3d 1b 03          	cmp    ax,0x31b
c000d953:	75 06                	jne    c000d95b <sendKeyboardToken(KeyboardToken)+0x286>
c000d955:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d95b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d95e:	66 3d 1e 03          	cmp    ax,0x31e
c000d962:	75 06                	jne    c000d96a <sendKeyboardToken(KeyboardToken)+0x295>
c000d964:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d96a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d96d:	66 3d 1f 03          	cmp    ax,0x31f
c000d971:	75 06                	jne    c000d979 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000d973:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d979:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d97c:	66 3d 1a 03          	cmp    ax,0x31a
c000d980:	75 06                	jne    c000d988 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000d982:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d988:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d98c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d98f:	83 f0 01             	xor    eax,0x1
c000d992:	84 c0                	test   al,al
c000d994:	74 7b                	je     c000da11 <sendKeyboardToken(KeyboardToken)+0x33c>
c000d996:	a0 01 3f 02 c0       	mov    al,ds:0xc0023f01
c000d99b:	84 c0                	test   al,al
c000d99d:	74 43                	je     c000d9e2 <sendKeyboardToken(KeyboardToken)+0x30d>
c000d99f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d9a3:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000d9a7:	74 2d                	je     c000d9d6 <sendKeyboardToken(KeyboardToken)+0x301>
c000d9a9:	8b 15 04 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024204
c000d9af:	89 d0                	mov    eax,edx
c000d9b1:	c1 e0 02             	shl    eax,0x2
c000d9b4:	01 d0                	add    eax,edx
c000d9b6:	01 c0                	add    eax,eax
c000d9b8:	a3 04 42 02 c0       	mov    ds:0xc0024204,eax
c000d9bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9c0:	25 ff ff 00 00       	and    eax,0xffff
c000d9c5:	8d 50 d0             	lea    edx,[eax-0x30]
c000d9c8:	a1 04 42 02 c0       	mov    eax,ds:0xc0024204
c000d9cd:	01 d0                	add    eax,edx
c000d9cf:	a3 04 42 02 c0       	mov    ds:0xc0024204,eax
c000d9d4:	eb 71                	jmp    c000da47 <sendKeyboardToken(KeyboardToken)+0x372>
c000d9d6:	c7 05 04 42 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024204,0x0
c000d9e0:	eb 65                	jmp    c000da47 <sendKeyboardToken(KeyboardToken)+0x372>
c000d9e2:	a1 04 42 02 c0       	mov    eax,ds:0xc0024204
c000d9e7:	85 c0                	test   eax,eax
c000d9e9:	74 1a                	je     c000da05 <sendKeyboardToken(KeyboardToken)+0x330>
c000d9eb:	a1 04 42 02 c0       	mov    eax,ds:0xc0024204
c000d9f0:	25 ff 00 00 00       	and    eax,0xff
c000d9f5:	83 ec 0c             	sub    esp,0xc
c000d9f8:	50                   	push   eax
c000d9f9:	e8 14 fc ff ff       	call   c000d612 <sendKeyToTerminal(unsigned char)>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000da05:	c7 05 04 42 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024204,0x0
c000da0f:	eb 36                	jmp    c000da47 <sendKeyboardToken(KeyboardToken)+0x372>
c000da11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da14:	66 3d 01 01          	cmp    ax,0x101
c000da18:	75 2d                	jne    c000da47 <sendKeyboardToken(KeyboardToken)+0x372>
c000da1a:	a1 04 42 02 c0       	mov    eax,ds:0xc0024204
c000da1f:	85 c0                	test   eax,eax
c000da21:	74 1a                	je     c000da3d <sendKeyboardToken(KeyboardToken)+0x368>
c000da23:	a1 04 42 02 c0       	mov    eax,ds:0xc0024204
c000da28:	25 ff 00 00 00       	and    eax,0xff
c000da2d:	83 ec 0c             	sub    esp,0xc
c000da30:	50                   	push   eax
c000da31:	e8 dc fb ff ff       	call   c000d612 <sendKeyToTerminal(unsigned char)>
c000da36:	83 c4 10             	add    esp,0x10
c000da39:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000da3d:	c7 05 04 42 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024204,0x0
c000da47:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000da4a:	83 f0 01             	xor    eax,0x1
c000da4d:	84 c0                	test   al,al
c000da4f:	74 4e                	je     c000da9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000da51:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000da54:	83 f0 01             	xor    eax,0x1
c000da57:	84 c0                	test   al,al
c000da59:	74 44                	je     c000da9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000da5b:	a0 00 3f 02 c0       	mov    al,ds:0xc0023f00
c000da60:	83 f0 01             	xor    eax,0x1
c000da63:	84 c0                	test   al,al
c000da65:	74 38                	je     c000da9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000da67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da6a:	66 83 f8 1f          	cmp    ax,0x1f
c000da6e:	76 09                	jbe    c000da79 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000da70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da73:	66 83 f8 7e          	cmp    ax,0x7e
c000da77:	76 12                	jbe    c000da8b <sendKeyboardToken(KeyboardToken)+0x3b6>
c000da79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da7c:	66 83 f8 0a          	cmp    ax,0xa
c000da80:	74 09                	je     c000da8b <sendKeyboardToken(KeyboardToken)+0x3b6>
c000da82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da85:	66 83 f8 08          	cmp    ax,0x8
c000da89:	75 14                	jne    c000da9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000da8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da8e:	25 ff 00 00 00       	and    eax,0xff
c000da93:	83 ec 0c             	sub    esp,0xc
c000da96:	50                   	push   eax
c000da97:	e8 76 fb ff ff       	call   c000d612 <sendKeyToTerminal(unsigned char)>
c000da9c:	83 c4 10             	add    esp,0x10
c000da9f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000daa2:	83 f0 01             	xor    eax,0x1
c000daa5:	84 c0                	test   al,al
c000daa7:	74 51                	je     c000dafa <sendKeyboardToken(KeyboardToken)+0x425>
c000daa9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000daac:	83 f0 01             	xor    eax,0x1
c000daaf:	84 c0                	test   al,al
c000dab1:	74 47                	je     c000dafa <sendKeyboardToken(KeyboardToken)+0x425>
c000dab3:	a0 00 3f 02 c0       	mov    al,ds:0xc0023f00
c000dab8:	84 c0                	test   al,al
c000daba:	74 3e                	je     c000dafa <sendKeyboardToken(KeyboardToken)+0x425>
c000dabc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dabf:	66 83 f8 3f          	cmp    ax,0x3f
c000dac3:	76 35                	jbe    c000dafa <sendKeyboardToken(KeyboardToken)+0x425>
c000dac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dac8:	66 83 f8 7f          	cmp    ax,0x7f
c000dacc:	77 2c                	ja     c000dafa <sendKeyboardToken(KeyboardToken)+0x425>
c000dace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dad1:	88 c2                	mov    dl,al
c000dad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dad6:	66 83 f8 5f          	cmp    ax,0x5f
c000dada:	76 04                	jbe    c000dae0 <sendKeyboardToken(KeyboardToken)+0x40b>
c000dadc:	b0 20                	mov    al,0x20
c000dade:	eb 02                	jmp    c000dae2 <sendKeyboardToken(KeyboardToken)+0x40d>
c000dae0:	b0 00                	mov    al,0x0
c000dae2:	29 c2                	sub    edx,eax
c000dae4:	88 d0                	mov    al,dl
c000dae6:	83 e8 40             	sub    eax,0x40
c000dae9:	25 ff 00 00 00       	and    eax,0xff
c000daee:	83 ec 0c             	sub    esp,0xc
c000daf1:	50                   	push   eax
c000daf2:	e8 1b fb ff ff       	call   c000d612 <sendKeyToTerminal(unsigned char)>
c000daf7:	83 c4 10             	add    esp,0x10
c000dafa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dafd:	66 3d 00 03          	cmp    ax,0x300
c000db01:	75 0f                	jne    c000db12 <sendKeyboardToken(KeyboardToken)+0x43d>
c000db03:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000db06:	83 f0 01             	xor    eax,0x1
c000db09:	84 c0                	test   al,al
c000db0b:	74 05                	je     c000db12 <sendKeyboardToken(KeyboardToken)+0x43d>
c000db0d:	e8 21 bb ff ff       	call   c0009633 <doTerminalCycle()>
c000db12:	90                   	nop
c000db13:	c9                   	leave  
c000db14:	c3                   	ret    

c000db15 <clearInternalKeybuffer(VgaText*)>:
c000db15:	55                   	push   ebp
c000db16:	89 e5                	mov    ebp,esp
c000db18:	83 ec 08             	sub    esp,0x8
c000db1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db1e:	05 b2 00 00 00       	add    eax,0xb2
c000db23:	83 ec 0c             	sub    esp,0xc
c000db26:	50                   	push   eax
c000db27:	e8 34 2a ff ff       	call   c0000560 <strlen>
c000db2c:	83 c4 10             	add    esp,0x10
c000db2f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000db32:	81 c2 b2 00 00 00    	add    edx,0xb2
c000db38:	83 ec 04             	sub    esp,0x4
c000db3b:	50                   	push   eax
c000db3c:	6a 00                	push   0x0
c000db3e:	52                   	push   edx
c000db3f:	e8 ac 29 ff ff       	call   c00004f0 <memset>
c000db44:	83 c4 10             	add    esp,0x10
c000db47:	90                   	nop
c000db48:	c9                   	leave  
c000db49:	c3                   	ret    

c000db4a <readKeyboard(VgaText*, char*, unsigned long)>:
c000db4a:	55                   	push   ebp
c000db4b:	89 e5                	mov    ebp,esp
c000db4d:	83 ec 18             	sub    esp,0x18
c000db50:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c000db55:	85 c0                	test   eax,eax
c000db57:	74 2a                	je     c000db83 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000db59:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000db5f:	8b 0d e8 3d 02 c0    	mov    ecx,DWORD PTR ds:0xc0023de8
c000db65:	83 ec 04             	sub    esp,0x4
c000db68:	68 00 3e 02 c0       	push   0xc0023e00
c000db6d:	83 ec 08             	sub    esp,0x8
c000db70:	89 e2                	mov    edx,esp
c000db72:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000db75:	89 02                	mov    DWORD PTR [edx],eax
c000db77:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000db7a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000db7e:	ff d1                	call   ecx
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	fb                   	sti    
c000db84:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000db8b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000db8f:	0f 84 a1 00 00 00    	je     c000dc36 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000db95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db98:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000db9e:	84 c0                	test   al,al
c000dba0:	75 28                	jne    c000dbca <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000dba2:	fa                   	cli    
c000dba3:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000dba8:	40                   	inc    eax
c000dba9:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000dbae:	e8 e1 6b 00 00       	call   c0014794 <schedule()>
c000dbb3:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000dbb8:	48                   	dec    eax
c000dbb9:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000dbbe:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000dbc3:	85 c0                	test   eax,eax
c000dbc5:	75 ce                	jne    c000db95 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000dbc7:	fb                   	sti    
c000dbc8:	eb cb                	jmp    c000db95 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000dbca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000dbcd:	8d 50 01             	lea    edx,[eax+0x1]
c000dbd0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000dbd3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000dbd6:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000dbdc:	88 10                	mov    BYTE PTR [eax],dl
c000dbde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbe1:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000dbe7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000dbea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbed:	05 b2 00 00 00       	add    eax,0xb2
c000dbf2:	83 ec 0c             	sub    esp,0xc
c000dbf5:	50                   	push   eax
c000dbf6:	e8 65 29 ff ff       	call   c0000560 <strlen>
c000dbfb:	83 c4 10             	add    esp,0x10
c000dbfe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000dc01:	81 c2 b2 00 00 00    	add    edx,0xb2
c000dc07:	8d 4a 01             	lea    ecx,[edx+0x1]
c000dc0a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000dc0d:	81 c2 b2 00 00 00    	add    edx,0xb2
c000dc13:	83 ec 04             	sub    esp,0x4
c000dc16:	50                   	push   eax
c000dc17:	51                   	push   ecx
c000dc18:	52                   	push   edx
c000dc19:	e8 e2 27 ff ff       	call   c0000400 <memmove>
c000dc1e:	83 c4 10             	add    esp,0x10
c000dc21:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000dc24:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000dc27:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000dc2b:	0f 85 5a ff ff ff    	jne    c000db8b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000dc31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000dc34:	eb 03                	jmp    c000dc39 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000dc36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000dc39:	c9                   	leave  
c000dc3a:	c3                   	ret    
c000dc3b:	90                   	nop

c000dc3c <Keyboard::Keyboard(char const*)>:
c000dc3c:	83 ec 0c             	sub    esp,0xc
c000dc3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc43:	83 ec 08             	sub    esp,0x8
c000dc46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc4a:	50                   	push   eax
c000dc4b:	e8 78 f2 ff ff       	call   c000cec8 <Device::Device(char const*)>
c000dc50:	83 c4 10             	add    esp,0x10
c000dc53:	ba 3c f5 01 c0       	mov    edx,0xc001f53c
c000dc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc5c:	89 10                	mov    DWORD PTR [eax],edx
c000dc5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc62:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000dc6c:	c6 05 e4 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023de4,0x1
c000dc73:	90                   	nop
c000dc74:	83 c4 0c             	add    esp,0xc
c000dc77:	c3                   	ret    

c000dc78 <Keyboard::~Keyboard()>:
c000dc78:	83 ec 0c             	sub    esp,0xc
c000dc7b:	ba 3c f5 01 c0       	mov    edx,0xc001f53c
c000dc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc84:	89 10                	mov    DWORD PTR [eax],edx
c000dc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc8a:	83 ec 0c             	sub    esp,0xc
c000dc8d:	50                   	push   eax
c000dc8e:	e8 9f ef ff ff       	call   c000cc32 <Device::~Device()>
c000dc93:	83 c4 10             	add    esp,0x10
c000dc96:	90                   	nop
c000dc97:	83 c4 0c             	add    esp,0xc
c000dc9a:	c3                   	ret    
c000dc9b:	90                   	nop

c000dc9c <Keyboard::~Keyboard()>:
c000dc9c:	83 ec 0c             	sub    esp,0xc
c000dc9f:	83 ec 0c             	sub    esp,0xc
c000dca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dca6:	e8 cd ff ff ff       	call   c000dc78 <Keyboard::~Keyboard()>
c000dcab:	83 c4 10             	add    esp,0x10
c000dcae:	83 ec 08             	sub    esp,0x8
c000dcb1:	68 5c 01 00 00       	push   0x15c
c000dcb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcba:	e8 3b db ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	83 c4 0c             	add    esp,0xc
c000dcc5:	c3                   	ret    

c000dcc6 <LogicalDisk::close(int, int, void*)>:
c000dcc6:	83 c8 ff             	or     eax,0xffffffff
c000dcc9:	c3                   	ret    

c000dcca <LogicalDisk::~LogicalDisk()>:
c000dcca:	83 ec 0c             	sub    esp,0xc
c000dccd:	ba b4 f5 01 c0       	mov    edx,0xc001f5b4
c000dcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcd6:	89 10                	mov    DWORD PTR [eax],edx
c000dcd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcdc:	83 ec 0c             	sub    esp,0xc
c000dcdf:	50                   	push   eax
c000dce0:	e8 4d ef ff ff       	call   c000cc32 <Device::~Device()>
c000dce5:	83 c4 10             	add    esp,0x10
c000dce8:	90                   	nop
c000dce9:	83 c4 0c             	add    esp,0xc
c000dcec:	c3                   	ret    
c000dced:	90                   	nop

c000dcee <LogicalDisk::~LogicalDisk()>:
c000dcee:	83 ec 0c             	sub    esp,0xc
c000dcf1:	83 ec 0c             	sub    esp,0xc
c000dcf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcf8:	e8 cd ff ff ff       	call   c000dcca <LogicalDisk::~LogicalDisk()>
c000dcfd:	83 c4 10             	add    esp,0x10
c000dd00:	83 ec 08             	sub    esp,0x8
c000dd03:	68 74 01 00 00       	push   0x174
c000dd08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd0c:	e8 e9 da ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000dd11:	83 c4 10             	add    esp,0x10
c000dd14:	83 c4 0c             	add    esp,0xc
c000dd17:	c3                   	ret    

c000dd18 <LogicalDisk::open(int, int, void*)>:
c000dd18:	83 ec 18             	sub    esp,0x18
c000dd1b:	68 68 f5 01 c0       	push   0xc001f568
c000dd20:	e8 1a 37 00 00       	call   c001143f <Krnl::panic(char const*)>
c000dd25:	83 c8 ff             	or     eax,0xffffffff
c000dd28:	83 c4 1c             	add    esp,0x1c
c000dd2b:	c3                   	ret    

c000dd2c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000dd2c:	53                   	push   ebx
c000dd2d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dd31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd39:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000dd3f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000dd45:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000dd4b:	77 10                	ja     c000dd5d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000dd4d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000dd53:	89 d3                	mov    ebx,edx
c000dd55:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000dd5b:	72 05                	jb     c000dd62 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000dd5d:	83 c8 ff             	or     eax,0xffffffff
c000dd60:	89 c2                	mov    edx,eax
c000dd62:	5b                   	pop    ebx
c000dd63:	c3                   	ret    

c000dd64 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000dd64:	56                   	push   esi
c000dd65:	83 c8 ff             	or     eax,0xffffffff
c000dd68:	53                   	push   ebx
c000dd69:	89 c2                	mov    edx,eax
c000dd6b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dd6f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dd73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dd77:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dd7d:	77 27                	ja     c000dda6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dd7f:	89 d8                	mov    eax,ebx
c000dd81:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000dd87:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000dd8d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dd92:	89 c2                	mov    edx,eax
c000dd94:	73 10                	jae    c000dda6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dd96:	89 c8                	mov    eax,ecx
c000dd98:	89 da                	mov    edx,ebx
c000dd9a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000dda0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000dda6:	5b                   	pop    ebx
c000dda7:	5e                   	pop    esi
c000dda8:	c3                   	ret    
c000dda9:	90                   	nop

c000ddaa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ddaa:	83 ec 1c             	sub    esp,0x1c
c000ddad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ddb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ddbd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ddc1:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddc4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ddc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ddcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddd0:	83 ec 08             	sub    esp,0x8
c000ddd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddd7:	50                   	push   eax
c000ddd8:	e8 eb f0 ff ff       	call   c000cec8 <Device::Device(char const*)>
c000dddd:	83 c4 10             	add    esp,0x10
c000dde0:	ba b4 f5 01 c0       	mov    edx,0xc001f5b4
c000dde5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dde9:	89 10                	mov    DWORD PTR [eax],edx
c000ddeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddef:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ddf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddfa:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000de01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de05:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000de0f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000de13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de1b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000de21:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000de27:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000de2b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000de2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de32:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000de38:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000de3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000de46:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000de4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de50:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000de5a:	90                   	nop
c000de5b:	83 c4 1c             	add    esp,0x1c
c000de5e:	c3                   	ret    
c000de5f:	90                   	nop

c000de60 <LogicalDisk::assignDriveLetter()>:
c000de60:	55                   	push   ebp
c000de61:	57                   	push   edi
c000de62:	56                   	push   esi
c000de63:	53                   	push   ebx
c000de64:	83 ec 14             	sub    esp,0x14
c000de67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de6b:	8b 3d 20 42 02 c0    	mov    edi,DWORD PTR ds:0xc0024220
c000de71:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000de77:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000de7b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000de81:	8b 3d 24 42 02 c0    	mov    edi,DWORD PTR ds:0xc0024224
c000de87:	3c 01                	cmp    al,0x1
c000de89:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000de8d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000de91:	19 c0                	sbb    eax,eax
c000de93:	83 e0 02             	and    eax,0x2
c000de96:	83 c0 41             	add    eax,0x41
c000de99:	0f be e8             	movsx  ebp,al
c000de9c:	3c 43                	cmp    al,0x43
c000de9e:	75 10                	jne    c000deb0 <LogicalDisk::assignDriveLetter()+0x50>
c000dea0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dea7:	75 5d                	jne    c000df06 <LogicalDisk::assignDriveLetter()+0xa6>
c000dea9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000deae:	75 56                	jne    c000df06 <LogicalDisk::assignDriveLetter()+0xa6>
c000deb0:	8d 75 bf             	lea    esi,[ebp-0x41]
c000deb3:	ba 01 00 00 00       	mov    edx,0x1
c000deb8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000debc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000dec0:	d3 e2                	shl    edx,cl
c000dec2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dec6:	89 d7                	mov    edi,edx
c000dec8:	89 d6                	mov    esi,edx
c000deca:	c1 ff 1f             	sar    edi,0x1f
c000decd:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000ded1:	21 f9                	and    ecx,edi
c000ded3:	09 d1                	or     ecx,edx
c000ded5:	75 2f                	jne    c000df06 <LogicalDisk::assignDriveLetter()+0xa6>
c000ded7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dedb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dedf:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dee5:	09 f2                	or     edx,esi
c000dee7:	89 15 20 42 02 c0    	mov    DWORD PTR ds:0xc0024220,edx
c000deed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000def1:	09 fa                	or     edx,edi
c000def3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000def7:	89 15 24 42 02 c0    	mov    DWORD PTR ds:0xc0024224,edx
c000defd:	89 1c bd 40 42 02 c0 	mov    DWORD PTR [edi*4-0x3ffdbdc0],ebx
c000df04:	eb 08                	jmp    c000df0e <LogicalDisk::assignDriveLetter()+0xae>
c000df06:	45                   	inc    ebp
c000df07:	40                   	inc    eax
c000df08:	3c 5b                	cmp    al,0x5b
c000df0a:	75 90                	jne    c000de9c <LogicalDisk::assignDriveLetter()+0x3c>
c000df0c:	31 c0                	xor    eax,eax
c000df0e:	83 c4 14             	add    esp,0x14
c000df11:	5b                   	pop    ebx
c000df12:	5e                   	pop    esi
c000df13:	5f                   	pop    edi
c000df14:	5d                   	pop    ebp
c000df15:	c3                   	ret    

c000df16 <LogicalDisk::mount()>:
c000df16:	56                   	push   esi
c000df17:	53                   	push   ebx
c000df18:	53                   	push   ebx
c000df19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df1d:	8b 1d d4 1d 02 c0    	mov    ebx,DWORD PTR ds:0xc0021dd4
c000df23:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000df2d:	85 db                	test   ebx,ebx
c000df2f:	74 27                	je     c000df58 <LogicalDisk::mount()+0x42>
c000df31:	51                   	push   ecx
c000df32:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000df39:	8b 13                	mov    edx,DWORD PTR [ebx]
c000df3b:	83 e8 41             	sub    eax,0x41
c000df3e:	50                   	push   eax
c000df3f:	56                   	push   esi
c000df40:	53                   	push   ebx
c000df41:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000df44:	83 c4 10             	add    esp,0x10
c000df47:	84 c0                	test   al,al
c000df49:	74 08                	je     c000df53 <LogicalDisk::mount()+0x3d>
c000df4b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000df51:	eb 07                	jmp    c000df5a <LogicalDisk::mount()+0x44>
c000df53:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000df56:	eb d5                	jmp    c000df2d <LogicalDisk::mount()+0x17>
c000df58:	31 c0                	xor    eax,eax
c000df5a:	5a                   	pop    edx
c000df5b:	5b                   	pop    ebx
c000df5c:	5e                   	pop    esi
c000df5d:	c3                   	ret    

c000df5e <LogicalDisk::unmount()>:
c000df5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df62:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000df6c:	c3                   	ret    
c000df6d:	90                   	nop

c000df6e <LogicalDisk::eject()>:
c000df6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df72:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000df78:	8b 10                	mov    edx,DWORD PTR [eax]
c000df7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df7e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000df81:	90                   	nop

c000df82 <LogicalDisk::unassignDriveLetter()>:
c000df82:	57                   	push   edi
c000df83:	56                   	push   esi
c000df84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df88:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000df8f:	84 c9                	test   cl,cl
c000df91:	75 0f                	jne    c000dfa2 <LogicalDisk::unassignDriveLetter()+0x20>
c000df93:	c7 44 24 0c 8c f5 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f58c
c000df9b:	5e                   	pop    esi
c000df9c:	5f                   	pop    edi
c000df9d:	e9 9d 34 00 00       	jmp    c001143f <Krnl::panic(char const*)>
c000dfa2:	83 e9 41             	sub    ecx,0x41
c000dfa5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dfac:	b8 01 00 00 00       	mov    eax,0x1
c000dfb1:	c7 04 8d 40 42 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdbdc0],0x0
c000dfbc:	d3 e0                	shl    eax,cl
c000dfbe:	89 c7                	mov    edi,eax
c000dfc0:	f7 d0                	not    eax
c000dfc2:	c1 ff 1f             	sar    edi,0x1f
c000dfc5:	21 05 20 42 02 c0    	and    DWORD PTR ds:0xc0024220,eax
c000dfcb:	89 fe                	mov    esi,edi
c000dfcd:	f7 d6                	not    esi
c000dfcf:	21 35 24 42 02 c0    	and    DWORD PTR ds:0xc0024224,esi
c000dfd5:	5e                   	pop    esi
c000dfd6:	5f                   	pop    edi
c000dfd7:	c3                   	ret    

c000dfd8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000dfd8:	57                   	push   edi
c000dfd9:	56                   	push   esi
c000dfda:	53                   	push   ebx
c000dfdb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dfdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dfe3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dfe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dfeb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dff1:	77 41                	ja     c000e034 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000dff3:	99                   	cdq    
c000dff4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dffa:	01 c8                	add    eax,ecx
c000dffc:	11 da                	adc    edx,ebx
c000dffe:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000e004:	19 d7                	sbb    edi,edx
c000e006:	72 33                	jb     c000e03b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000e008:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000e00e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000e014:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e018:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000e01c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000e022:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e028:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e02c:	5b                   	pop    ebx
c000e02d:	5e                   	pop    esi
c000e02e:	5f                   	pop    edi
c000e02f:	e9 32 0a 00 00       	jmp    c000ea66 <VCache::read(unsigned long long, int, void*)>
c000e034:	b8 05 00 00 00       	mov    eax,0x5
c000e039:	eb 05                	jmp    c000e040 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000e03b:	b8 07 00 00 00       	mov    eax,0x7
c000e040:	5b                   	pop    ebx
c000e041:	5e                   	pop    esi
c000e042:	5f                   	pop    edi
c000e043:	c3                   	ret    

c000e044 <LogicalDisk::write(unsigned long long, int, void*)>:
c000e044:	57                   	push   edi
c000e045:	56                   	push   esi
c000e046:	53                   	push   ebx
c000e047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e04b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e04f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e053:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e057:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000e05d:	77 41                	ja     c000e0a0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000e05f:	99                   	cdq    
c000e060:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000e066:	01 c8                	add    eax,ecx
c000e068:	11 da                	adc    edx,ebx
c000e06a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000e070:	19 d7                	sbb    edi,edx
c000e072:	72 33                	jb     c000e0a7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000e074:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000e07a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000e080:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e084:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000e088:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000e08e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e094:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e098:	5b                   	pop    ebx
c000e099:	5e                   	pop    esi
c000e09a:	5f                   	pop    edi
c000e09b:	e9 cc 08 00 00       	jmp    c000e96c <VCache::write(unsigned long long, int, void*)>
c000e0a0:	b8 05 00 00 00       	mov    eax,0x5
c000e0a5:	eb 05                	jmp    c000e0ac <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000e0a7:	b8 07 00 00 00       	mov    eax,0x7
c000e0ac:	5b                   	pop    ebx
c000e0ad:	5e                   	pop    esi
c000e0ae:	5f                   	pop    edi
c000e0af:	c3                   	ret    

c000e0b0 <Mouse::Mouse(char const*)>:
c000e0b0:	83 ec 0c             	sub    esp,0xc
c000e0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0b7:	83 ec 08             	sub    esp,0x8
c000e0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0be:	50                   	push   eax
c000e0bf:	e8 04 ee ff ff       	call   c000cec8 <Device::Device(char const*)>
c000e0c4:	83 c4 10             	add    esp,0x10
c000e0c7:	ba e0 f5 01 c0       	mov    edx,0xc001f5e0
c000e0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0d0:	89 10                	mov    DWORD PTR [eax],edx
c000e0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0d6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000e0e0:	90                   	nop
c000e0e1:	83 c4 0c             	add    esp,0xc
c000e0e4:	c3                   	ret    
c000e0e5:	90                   	nop
c000e0e6:	66 90                	xchg   ax,ax

c000e0e8 <Mouse::~Mouse()>:
c000e0e8:	83 ec 0c             	sub    esp,0xc
c000e0eb:	ba e0 f5 01 c0       	mov    edx,0xc001f5e0
c000e0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0f4:	89 10                	mov    DWORD PTR [eax],edx
c000e0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0fa:	83 ec 0c             	sub    esp,0xc
c000e0fd:	50                   	push   eax
c000e0fe:	e8 2f eb ff ff       	call   c000cc32 <Device::~Device()>
c000e103:	83 c4 10             	add    esp,0x10
c000e106:	90                   	nop
c000e107:	83 c4 0c             	add    esp,0xc
c000e10a:	c3                   	ret    
c000e10b:	90                   	nop

c000e10c <Mouse::~Mouse()>:
c000e10c:	83 ec 0c             	sub    esp,0xc
c000e10f:	83 ec 0c             	sub    esp,0xc
c000e112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e116:	e8 cd ff ff ff       	call   c000e0e8 <Mouse::~Mouse()>
c000e11b:	83 c4 10             	add    esp,0x10
c000e11e:	83 ec 08             	sub    esp,0x8
c000e121:	68 58 01 00 00       	push   0x158
c000e126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e12a:	e8 cb d6 ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000e12f:	83 c4 10             	add    esp,0x10
c000e132:	83 c4 0c             	add    esp,0xc
c000e135:	c3                   	ret    

c000e136 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000e136:	55                   	push   ebp
c000e137:	57                   	push   edi
c000e138:	56                   	push   esi
c000e139:	53                   	push   ebx
c000e13a:	81 ec 28 01 00 00    	sub    esp,0x128
c000e140:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000e147:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000e14e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000e155:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000e15c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e160:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e164:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e16b:	e8 54 ee ff ff       	call   c000cfc4 <Device::getName()>
c000e170:	5a                   	pop    edx
c000e171:	59                   	pop    ecx
c000e172:	50                   	push   eax
c000e173:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e177:	55                   	push   ebp
c000e178:	e8 a3 24 ff ff       	call   c0000620 <strcpy>
c000e17d:	5b                   	pop    ebx
c000e17e:	58                   	pop    eax
c000e17f:	68 04 f6 01 c0       	push   0xc001f604
c000e184:	55                   	push   ebp
c000e185:	e8 56 26 ff ff       	call   c00007e0 <strcat>
c000e18a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000e191:	e8 cb a9 ff ff       	call   c0008b61 <malloc>
c000e196:	83 c4 0c             	add    esp,0xc
c000e199:	89 c3                	mov    ebx,eax
c000e19b:	57                   	push   edi
c000e19c:	56                   	push   esi
c000e19d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e1a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e1a5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e1ac:	55                   	push   ebp
c000e1ad:	50                   	push   eax
c000e1ae:	e8 f7 fb ff ff       	call   c000ddaa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e1b3:	83 c4 14             	add    esp,0x14
c000e1b6:	53                   	push   ebx
c000e1b7:	e8 a4 fc ff ff       	call   c000de60 <LogicalDisk::assignDriveLetter()>
c000e1bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1bf:	e8 52 fd ff ff       	call   c000df16 <LogicalDisk::mount()>
c000e1c4:	58                   	pop    eax
c000e1c5:	5a                   	pop    edx
c000e1c6:	53                   	push   ebx
c000e1c7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e1ce:	e8 5d eb ff ff       	call   c000cd30 <Device::addChild(Device*)>
c000e1d3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e1d9:	5b                   	pop    ebx
c000e1da:	5e                   	pop    esi
c000e1db:	5f                   	pop    edi
c000e1dc:	5d                   	pop    ebp
c000e1dd:	c3                   	ret    

c000e1de <createPartitionsForDisk(PhysicalDisk*)>:
c000e1de:	55                   	push   ebp
c000e1df:	57                   	push   edi
c000e1e0:	56                   	push   esi
c000e1e1:	53                   	push   ebx
c000e1e2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e1e8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e1ef:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e1f5:	3d 00 02 00 00       	cmp    eax,0x200
c000e1fa:	74 27                	je     c000e223 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e1fc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e202:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e208:	83 ec 10             	sub    esp,0x10
c000e20b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e20f:	99                   	cdq    
c000e210:	c1 e6 0a             	shl    esi,0xa
c000e213:	52                   	push   edx
c000e214:	89 fd                	mov    ebp,edi
c000e216:	50                   	push   eax
c000e217:	55                   	push   ebp
c000e218:	56                   	push   esi
c000e219:	e8 42 f3 00 00       	call   c001d560 <__udivdi3>
c000e21e:	e9 b1 00 00 00       	jmp    c000e2d4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000e223:	83 ec 0c             	sub    esp,0xc
c000e226:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e228:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e22c:	56                   	push   esi
c000e22d:	6a 01                	push   0x1
c000e22f:	6a 00                	push   0x0
c000e231:	6a 00                	push   0x0
c000e233:	53                   	push   ebx
c000e234:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e237:	83 c4 20             	add    esp,0x20
c000e23a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e242:	75 0a                	jne    c000e24e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e244:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e24c:	74 2c                	je     c000e27a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e24e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e254:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e25a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e260:	83 ec 10             	sub    esp,0x10
c000e263:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e267:	89 f7                	mov    edi,esi
c000e269:	c1 e0 0a             	shl    eax,0xa
c000e26c:	c1 ff 1f             	sar    edi,0x1f
c000e26f:	57                   	push   edi
c000e270:	56                   	push   esi
c000e271:	52                   	push   edx
c000e272:	50                   	push   eax
c000e273:	e8 e8 f2 00 00       	call   c001d560 <__udivdi3>
c000e278:	eb 5a                	jmp    c000e2d4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000e27a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e281:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000e288:	83 e1 7f             	and    ecx,0x7f
c000e28b:	83 e0 7f             	and    eax,0x7f
c000e28e:	01 c1                	add    ecx,eax
c000e290:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e297:	83 e0 7f             	and    eax,0x7f
c000e29a:	01 c1                	add    ecx,eax
c000e29c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e2a3:	83 e0 7f             	and    eax,0x7f
c000e2a6:	00 c1                	add    cl,al
c000e2a8:	74 41                	je     c000e2eb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000e2aa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e2b0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e2b6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e2bc:	83 ec 10             	sub    esp,0x10
c000e2bf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e2c3:	89 f7                	mov    edi,esi
c000e2c5:	c1 e0 0a             	shl    eax,0xa
c000e2c8:	c1 ff 1f             	sar    edi,0x1f
c000e2cb:	57                   	push   edi
c000e2cc:	56                   	push   esi
c000e2cd:	52                   	push   edx
c000e2ce:	50                   	push   eax
c000e2cf:	e8 8c f2 00 00       	call   c001d560 <__udivdi3>
c000e2d4:	83 c4 14             	add    esp,0x14
c000e2d7:	52                   	push   edx
c000e2d8:	50                   	push   eax
c000e2d9:	6a 00                	push   0x0
c000e2db:	6a 00                	push   0x0
c000e2dd:	53                   	push   ebx
c000e2de:	e8 53 fe ff ff       	call   c000e136 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e2e3:	83 c4 20             	add    esp,0x20
c000e2e6:	e9 79 01 00 00       	jmp    c000e464 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000e2eb:	89 f0                	mov    eax,esi
c000e2ed:	31 f6                	xor    esi,esi
c000e2ef:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e2f6:	75 02                	jne    c000e2fa <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000e2f8:	89 f1                	mov    ecx,esi
c000e2fa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e301:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000e308:	c1 e2 08             	shl    edx,0x8
c000e30b:	c1 e7 10             	shl    edi,0x10
c000e30e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000e316:	09 fa                	or     edx,edi
c000e318:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000e320:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000e327:	83 c0 10             	add    eax,0x10
c000e32a:	09 fa                	or     edx,edi
c000e32c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000e333:	c1 e7 18             	shl    edi,0x18
c000e336:	09 fa                	or     edx,edi
c000e338:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000e33f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000e343:	c1 e7 10             	shl    edi,0x10
c000e346:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e34d:	c1 e2 08             	shl    edx,0x8
c000e350:	09 fa                	or     edx,edi
c000e352:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000e359:	09 fa                	or     edx,edi
c000e35b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000e362:	c1 e7 18             	shl    edi,0x18
c000e365:	09 fa                	or     edx,edi
c000e367:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000e36b:	46                   	inc    esi
c000e36c:	83 fe 04             	cmp    esi,0x4
c000e36f:	0f 85 7a ff ff ff    	jne    c000e2ef <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000e375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e379:	83 f0 01             	xor    eax,0x1
c000e37c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e380:	75 57                	jne    c000e3d9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e382:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e386:	83 f0 01             	xor    eax,0x1
c000e389:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e38d:	75 4a                	jne    c000e3d9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e38f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000e393:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e39b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e3a3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e3a9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e3af:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e3b5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e3b9:	89 f7                	mov    edi,esi
c000e3bb:	c1 e0 0a             	shl    eax,0xa
c000e3be:	c1 ff 1f             	sar    edi,0x1f
c000e3c1:	57                   	push   edi
c000e3c2:	56                   	push   esi
c000e3c3:	52                   	push   edx
c000e3c4:	50                   	push   eax
c000e3c5:	e8 96 f1 00 00       	call   c001d560 <__udivdi3>
c000e3ca:	83 c4 10             	add    esp,0x10
c000e3cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e3d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e3d5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000e3d9:	84 c9                	test   cl,cl
c000e3db:	74 53                	je     c000e430 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000e3dd:	0f b6 c9             	movzx  ecx,cl
c000e3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e3e8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e3ec:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e3f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e3f8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000e3fc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000e400:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e404:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e408:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e40c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e410:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000e414:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000e418:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000e41c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000e420:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e424:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e428:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000e42c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000e430:	31 ed                	xor    ebp,ebp
c000e432:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e436:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e43a:	89 f8                	mov    eax,edi
c000e43c:	09 f0                	or     eax,esi
c000e43e:	74 1e                	je     c000e45e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000e440:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e444:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e448:	89 d1                	mov    ecx,edx
c000e44a:	09 c1                	or     ecx,eax
c000e44c:	74 10                	je     c000e45e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000e44e:	83 ec 0c             	sub    esp,0xc
c000e451:	57                   	push   edi
c000e452:	56                   	push   esi
c000e453:	52                   	push   edx
c000e454:	50                   	push   eax
c000e455:	53                   	push   ebx
c000e456:	e8 db fc ff ff       	call   c000e136 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e45b:	83 c4 20             	add    esp,0x20
c000e45e:	45                   	inc    ebp
c000e45f:	83 fd 04             	cmp    ebp,0x4
c000e462:	75 ce                	jne    c000e432 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e464:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e46a:	5b                   	pop    ebx
c000e46b:	5e                   	pop    esi
c000e46c:	5f                   	pop    edi
c000e46d:	5d                   	pop    ebp
c000e46e:	c3                   	ret    
c000e46f:	90                   	nop

c000e470 <Serial::Serial(char const*)>:
c000e470:	83 ec 0c             	sub    esp,0xc
c000e473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e477:	83 ec 08             	sub    esp,0x8
c000e47a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e47e:	50                   	push   eax
c000e47f:	e8 44 ea ff ff       	call   c000cec8 <Device::Device(char const*)>
c000e484:	83 c4 10             	add    esp,0x10
c000e487:	ba 18 f6 01 c0       	mov    edx,0xc001f618
c000e48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e490:	89 10                	mov    DWORD PTR [eax],edx
c000e492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e496:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e4a0:	90                   	nop
c000e4a1:	83 c4 0c             	add    esp,0xc
c000e4a4:	c3                   	ret    
c000e4a5:	90                   	nop
c000e4a6:	66 90                	xchg   ax,ax

c000e4a8 <Serial::~Serial()>:
c000e4a8:	83 ec 0c             	sub    esp,0xc
c000e4ab:	ba 18 f6 01 c0       	mov    edx,0xc001f618
c000e4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4b4:	89 10                	mov    DWORD PTR [eax],edx
c000e4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ba:	83 ec 0c             	sub    esp,0xc
c000e4bd:	50                   	push   eax
c000e4be:	e8 6f e7 ff ff       	call   c000cc32 <Device::~Device()>
c000e4c3:	83 c4 10             	add    esp,0x10
c000e4c6:	90                   	nop
c000e4c7:	83 c4 0c             	add    esp,0xc
c000e4ca:	c3                   	ret    
c000e4cb:	90                   	nop

c000e4cc <Serial::~Serial()>:
c000e4cc:	83 ec 0c             	sub    esp,0xc
c000e4cf:	83 ec 0c             	sub    esp,0xc
c000e4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4d6:	e8 cd ff ff ff       	call   c000e4a8 <Serial::~Serial()>
c000e4db:	83 c4 10             	add    esp,0x10
c000e4de:	83 ec 08             	sub    esp,0x8
c000e4e1:	68 58 01 00 00       	push   0x158
c000e4e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4ea:	e8 0b d3 ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000e4ef:	83 c4 10             	add    esp,0x10
c000e4f2:	83 c4 0c             	add    esp,0xc
c000e4f5:	c3                   	ret    
c000e4f6:	66 90                	xchg   ax,ax

c000e4f8 <Timer::Timer(char const*)>:
c000e4f8:	83 ec 0c             	sub    esp,0xc
c000e4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ff:	83 ec 08             	sub    esp,0x8
c000e502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e506:	50                   	push   eax
c000e507:	e8 bc e9 ff ff       	call   c000cec8 <Device::Device(char const*)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	ba 5c f6 01 c0       	mov    edx,0xc001f65c
c000e514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e518:	89 10                	mov    DWORD PTR [eax],edx
c000e51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e51e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000e528:	90                   	nop
c000e529:	83 c4 0c             	add    esp,0xc
c000e52c:	c3                   	ret    
c000e52d:	90                   	nop
c000e52e:	66 90                	xchg   ax,ax

c000e530 <Timer::~Timer()>:
c000e530:	83 ec 0c             	sub    esp,0xc
c000e533:	ba 5c f6 01 c0       	mov    edx,0xc001f65c
c000e538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e53c:	89 10                	mov    DWORD PTR [eax],edx
c000e53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e542:	83 ec 0c             	sub    esp,0xc
c000e545:	50                   	push   eax
c000e546:	e8 e7 e6 ff ff       	call   c000cc32 <Device::~Device()>
c000e54b:	83 c4 10             	add    esp,0x10
c000e54e:	90                   	nop
c000e54f:	83 c4 0c             	add    esp,0xc
c000e552:	c3                   	ret    
c000e553:	90                   	nop

c000e554 <Timer::~Timer()>:
c000e554:	83 ec 0c             	sub    esp,0xc
c000e557:	83 ec 0c             	sub    esp,0xc
c000e55a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e55e:	e8 cd ff ff ff       	call   c000e530 <Timer::~Timer()>
c000e563:	83 c4 10             	add    esp,0x10
c000e566:	83 ec 08             	sub    esp,0x8
c000e569:	68 5c 01 00 00       	push   0x15c
c000e56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e572:	e8 83 d2 ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000e577:	83 c4 10             	add    esp,0x10
c000e57a:	83 c4 0c             	add    esp,0xc
c000e57d:	c3                   	ret    

c000e57e <Timer::read()>:
c000e57e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e582:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e588:	c3                   	ret    

c000e589 <setupTimer(int)>:
c000e589:	53                   	push   ebx
c000e58a:	83 ec 14             	sub    esp,0x14
c000e58d:	68 5c 01 00 00       	push   0x15c
c000e592:	e8 ca a5 ff ff       	call   c0008b61 <malloc>
c000e597:	89 04 24             	mov    DWORD PTR [esp],eax
c000e59a:	89 c3                	mov    ebx,eax
c000e59c:	e8 37 e9 00 00       	call   c001ced8 <PIT::PIT()>
c000e5a1:	58                   	pop    eax
c000e5a2:	5a                   	pop    edx
c000e5a3:	53                   	push   ebx
c000e5a4:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c000e5aa:	e8 81 e7 ff ff       	call   c000cd30 <Device::addChild(Device*)>
c000e5af:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5b1:	6a 00                	push   0x0
c000e5b3:	6a 00                	push   0x0
c000e5b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e5b9:	53                   	push   ebx
c000e5ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e5bd:	89 d8                	mov    eax,ebx
c000e5bf:	83 c4 28             	add    esp,0x28
c000e5c2:	5b                   	pop    ebx
c000e5c3:	c3                   	ret    

c000e5c4 <timerHandler(unsigned int)>:
c000e5c4:	56                   	push   esi
c000e5c5:	53                   	push   ebx
c000e5c6:	51                   	push   ecx
c000e5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5cb:	01 05 ac 42 02 c0    	add    DWORD PTR ds:0xc00242ac,eax
c000e5d1:	80 3d ed 1c 02 c0 00 	cmp    BYTE PTR ds:0xc0021ced,0x0
c000e5d8:	0f 84 4a 01 00 00    	je     c000e728 <timerHandler(unsigned int)+0x164>
c000e5de:	fa                   	cli    
c000e5df:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c000e5e5:	83 ec 0c             	sub    esp,0xc
c000e5e8:	ff 05 a4 51 02 c0    	inc    DWORD PTR ds:0xc00251a4
c000e5ee:	68 b8 51 02 c0       	push   0xc00251b8
c000e5f3:	e8 38 f5 00 00       	call   c001db30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e5f8:	83 c4 10             	add    esp,0x10
c000e5fb:	84 c0                	test   al,al
c000e5fd:	0f 85 a1 00 00 00    	jne    c000e6a4 <timerHandler(unsigned int)+0xe0>
c000e603:	83 ec 0c             	sub    esp,0xc
c000e606:	68 b8 51 02 c0       	push   0xc00251b8
c000e60b:	e8 3c f5 00 00       	call   c001db4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	89 c6                	mov    esi,eax
c000e615:	8d 76 00             	lea    esi,[esi+0x0]
c000e618:	83 ec 0c             	sub    esp,0xc
c000e61b:	68 b8 51 02 c0       	push   0xc00251b8
c000e620:	e8 27 f5 00 00       	call   c001db4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e625:	c7 04 24 b8 51 02 c0 	mov    DWORD PTR [esp],0xc00251b8
c000e62c:	89 c3                	mov    ebx,eax
c000e62e:	e8 21 f5 00 00       	call   c001db54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e633:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e636:	83 c4 10             	add    esp,0x10
c000e639:	3b 05 ac 42 02 c0    	cmp    eax,DWORD PTR ds:0xc00242ac
c000e63f:	77 23                	ja     c000e664 <timerHandler(unsigned int)+0xa0>
c000e641:	83 ec 0c             	sub    esp,0xc
c000e644:	53                   	push   ebx
c000e645:	e8 0e 66 00 00       	call   c0014c58 <unblockTask(ThreadControlBlock*)>
c000e64a:	83 c4 10             	add    esp,0x10
c000e64d:	39 de                	cmp    esi,ebx
c000e64f:	75 27                	jne    c000e678 <timerHandler(unsigned int)+0xb4>
c000e651:	83 ec 0c             	sub    esp,0xc
c000e654:	68 b8 51 02 c0       	push   0xc00251b8
c000e659:	e8 ee f4 00 00       	call   c001db4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e65e:	89 c6                	mov    esi,eax
c000e660:	eb 12                	jmp    c000e674 <timerHandler(unsigned int)+0xb0>
c000e662:	66 90                	xchg   ax,ax
c000e664:	52                   	push   edx
c000e665:	52                   	push   edx
c000e666:	53                   	push   ebx
c000e667:	68 b8 51 02 c0       	push   0xc00251b8
c000e66c:	e8 9b f5 00 00       	call   c001dc0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e671:	8d 76 00             	lea    esi,[esi+0x0]
c000e674:	83 c4 10             	add    esp,0x10
c000e677:	90                   	nop
c000e678:	83 ec 0c             	sub    esp,0xc
c000e67b:	68 b8 51 02 c0       	push   0xc00251b8
c000e680:	e8 ab f4 00 00       	call   c001db30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e685:	83 c4 10             	add    esp,0x10
c000e688:	84 c0                	test   al,al
c000e68a:	75 18                	jne    c000e6a4 <timerHandler(unsigned int)+0xe0>
c000e68c:	83 ec 0c             	sub    esp,0xc
c000e68f:	68 b8 51 02 c0       	push   0xc00251b8
c000e694:	e8 b3 f4 00 00       	call   c001db4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e699:	83 c4 10             	add    esp,0x10
c000e69c:	39 f0                	cmp    eax,esi
c000e69e:	0f 85 74 ff ff ff    	jne    c000e618 <timerHandler(unsigned int)+0x54>
c000e6a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6a9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e6ad:	74 41                	je     c000e6f0 <timerHandler(unsigned int)+0x12c>
c000e6af:	80 3d ec 1c 02 c0 00 	cmp    BYTE PTR ds:0xc0021cec,0x0
c000e6b6:	74 38                	je     c000e6f0 <timerHandler(unsigned int)+0x12c>
c000e6b8:	fa                   	cli    
c000e6b9:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c000e6bf:	a1 ac 42 02 c0       	mov    eax,ds:0xc00242ac
c000e6c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e6ca:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e6cd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e6d3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e6d6:	72 08                	jb     c000e6e0 <timerHandler(unsigned int)+0x11c>
c000e6d8:	e8 b7 60 00 00       	call   c0014794 <schedule()>
c000e6dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e6e0:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000e6e5:	48                   	dec    eax
c000e6e6:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000e6eb:	75 03                	jne    c000e6f0 <timerHandler(unsigned int)+0x12c>
c000e6ed:	fb                   	sti    
c000e6ee:	66 90                	xchg   ax,ax
c000e6f0:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c000e6f5:	48                   	dec    eax
c000e6f6:	a3 a4 51 02 c0       	mov    ds:0xc00251a4,eax
c000e6fb:	75 1b                	jne    c000e718 <timerHandler(unsigned int)+0x154>
c000e6fd:	83 3d a0 51 02 c0 00 	cmp    DWORD PTR ds:0xc00251a0,0x0
c000e704:	74 12                	je     c000e718 <timerHandler(unsigned int)+0x154>
c000e706:	c7 05 a0 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251a0,0x0
c000e710:	e8 7f 60 00 00       	call   c0014794 <schedule()>
c000e715:	8d 76 00             	lea    esi,[esi+0x0]
c000e718:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c000e71d:	48                   	dec    eax
c000e71e:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c000e723:	75 03                	jne    c000e728 <timerHandler(unsigned int)+0x164>
c000e725:	fb                   	sti    
c000e726:	66 90                	xchg   ax,ax
c000e728:	58                   	pop    eax
c000e729:	5b                   	pop    ebx
c000e72a:	5e                   	pop    esi
c000e72b:	c3                   	ret    

c000e72c <VCache::VCache(PhysicalDisk*)>:
c000e72c:	53                   	push   ebx
c000e72d:	83 ec 18             	sub    esp,0x18
c000e730:	ba 8c f6 01 c0       	mov    edx,0xc001f68c
c000e735:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e739:	89 10                	mov    DWORD PTR [eax],edx
c000e73b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e73f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e74a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e751:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e755:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e75c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e763:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e767:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e76e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e775:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e779:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e784:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e78c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e793:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e79a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e79e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e7a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7a6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e7aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e7b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7b6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e7bd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e7c5:	83 ec 0c             	sub    esp,0xc
c000e7c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7cc:	e8 90 a3 ff ff       	call   c0008b61 <malloc>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	89 c3                	mov    ebx,eax
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	53                   	push   ebx
c000e7da:	e8 81 5d 00 00       	call   c0014560 <Mutex::Mutex()>
c000e7df:	83 c4 10             	add    esp,0x10
c000e7e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7e6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e7e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e7f1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e7f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e7ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e803:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e80d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e810:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e814:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e81a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e820:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e824:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e827:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e82a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e82e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e832:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e836:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e83c:	05 00 01 00 00       	add    eax,0x100
c000e841:	c1 e0 04             	shl    eax,0x4
c000e844:	83 ec 0c             	sub    esp,0xc
c000e847:	50                   	push   eax
c000e848:	e8 14 a3 ff ff       	call   c0008b61 <malloc>
c000e84d:	83 c4 10             	add    esp,0x10
c000e850:	89 c2                	mov    edx,eax
c000e852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e856:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e85d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e868:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e86c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e870:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e876:	c1 e0 06             	shl    eax,0x6
c000e879:	83 ec 0c             	sub    esp,0xc
c000e87c:	50                   	push   eax
c000e87d:	e8 df a2 ff ff       	call   c0008b61 <malloc>
c000e882:	83 c4 10             	add    esp,0x10
c000e885:	89 c2                	mov    edx,eax
c000e887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e88b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e88e:	90                   	nop
c000e88f:	83 c4 18             	add    esp,0x18
c000e892:	5b                   	pop    ebx
c000e893:	c3                   	ret    

c000e894 <VCache::invalidateReadBuffer()>:
c000e894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e898:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e89e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e8a2:	c3                   	ret    
c000e8a3:	90                   	nop

c000e8a4 <VCache::writeWriteBuffer()>:
c000e8a4:	53                   	push   ebx
c000e8a5:	83 ec 08             	sub    esp,0x8
c000e8a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e8ac:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e8b0:	74 1e                	je     c000e8d0 <VCache::writeWriteBuffer()+0x2c>
c000e8b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8b5:	83 ec 0c             	sub    esp,0xc
c000e8b8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ba:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e8bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e8c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e8c3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e8c6:	50                   	push   eax
c000e8c7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e8ca:	83 c4 20             	add    esp,0x20
c000e8cd:	8d 76 00             	lea    esi,[esi+0x0]
c000e8d0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e8d7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e8de:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e8e2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e8e9:	83 c4 08             	add    esp,0x8
c000e8ec:	5b                   	pop    ebx
c000e8ed:	c3                   	ret    
c000e8ee:	66 90                	xchg   ax,ax

c000e8f0 <VCache::~VCache()>:
c000e8f0:	83 ec 0c             	sub    esp,0xc
c000e8f3:	ba 8c f6 01 c0       	mov    edx,0xc001f68c
c000e8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8fc:	89 10                	mov    DWORD PTR [eax],edx
c000e8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e902:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e905:	84 c0                	test   al,al
c000e907:	74 0f                	je     c000e918 <VCache::~VCache()+0x28>
c000e909:	83 ec 0c             	sub    esp,0xc
c000e90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e910:	e8 8f ff ff ff       	call   c000e8a4 <VCache::writeWriteBuffer()>
c000e915:	83 c4 10             	add    esp,0x10
c000e918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e91c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e91f:	83 ec 0c             	sub    esp,0xc
c000e922:	50                   	push   eax
c000e923:	e8 49 a2 ff ff       	call   c0008b71 <free>
c000e928:	83 c4 10             	add    esp,0x10
c000e92b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e92f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e932:	83 ec 0c             	sub    esp,0xc
c000e935:	50                   	push   eax
c000e936:	e8 36 a2 ff ff       	call   c0008b71 <free>
c000e93b:	83 c4 10             	add    esp,0x10
c000e93e:	90                   	nop
c000e93f:	83 c4 0c             	add    esp,0xc
c000e942:	c3                   	ret    
c000e943:	90                   	nop

c000e944 <VCache::~VCache()>:
c000e944:	83 ec 0c             	sub    esp,0xc
c000e947:	83 ec 0c             	sub    esp,0xc
c000e94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e94e:	e8 9d ff ff ff       	call   c000e8f0 <VCache::~VCache()>
c000e953:	83 c4 10             	add    esp,0x10
c000e956:	83 ec 08             	sub    esp,0x8
c000e959:	6a 44                	push   0x44
c000e95b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e95f:	e8 96 ce ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000e964:	83 c4 10             	add    esp,0x10
c000e967:	83 c4 0c             	add    esp,0xc
c000e96a:	c3                   	ret    
c000e96b:	90                   	nop

c000e96c <VCache::write(unsigned long long, int, void*)>:
c000e96c:	55                   	push   ebp
c000e96d:	31 c0                	xor    eax,eax
c000e96f:	57                   	push   edi
c000e970:	56                   	push   esi
c000e971:	53                   	push   ebx
c000e972:	83 ec 0c             	sub    esp,0xc
c000e975:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e979:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000e97d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e981:	8d 76 00             	lea    esi,[esi+0x0]
c000e984:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000e988:	7d 1a                	jge    c000e9a4 <VCache::write(unsigned long long, int, void*)+0x38>
c000e98a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000e98d:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000e993:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e997:	0f af c8             	imul   ecx,eax
c000e99a:	01 ca                	add    edx,ecx
c000e99c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000e99e:	40                   	inc    eax
c000e99f:	eb e3                	jmp    c000e984 <VCache::write(unsigned long long, int, void*)+0x18>
c000e9a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e9a4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e9a8:	74 0a                	je     c000e9b4 <VCache::write(unsigned long long, int, void*)+0x48>
c000e9aa:	53                   	push   ebx
c000e9ab:	e8 e4 fe ff ff       	call   c000e894 <VCache::invalidateReadBuffer()>
c000e9b0:	58                   	pop    eax
c000e9b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e9b4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e9b8:	74 5e                	je     c000ea18 <VCache::write(unsigned long long, int, void*)+0xac>
c000e9ba:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000e9bd:	89 e8                	mov    eax,ebp
c000e9bf:	99                   	cdq    
c000e9c0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e9c3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e9c6:	89 c1                	mov    ecx,eax
c000e9c8:	89 d0                	mov    eax,edx
c000e9ca:	31 f1                	xor    ecx,esi
c000e9cc:	31 f8                	xor    eax,edi
c000e9ce:	09 c1                	or     ecx,eax
c000e9d0:	75 3a                	jne    c000ea0c <VCache::write(unsigned long long, int, void*)+0xa0>
c000e9d2:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000e9d7:	75 33                	jne    c000ea0c <VCache::write(unsigned long long, int, void*)+0xa0>
c000e9d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e9dc:	89 ef                	mov    edi,ebp
c000e9de:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e9e4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e9e8:	0f af f9             	imul   edi,ecx
c000e9eb:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e9ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e9f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e9f3:	40                   	inc    eax
c000e9f4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e9f7:	83 f8 40             	cmp    eax,0x40
c000e9fa:	75 60                	jne    c000ea5c <VCache::write(unsigned long long, int, void*)+0xf0>
c000e9fc:	83 ec 0c             	sub    esp,0xc
c000e9ff:	53                   	push   ebx
c000ea00:	e8 9f fe ff ff       	call   c000e8a4 <VCache::writeWriteBuffer()>
c000ea05:	83 c4 10             	add    esp,0x10
c000ea08:	eb 52                	jmp    c000ea5c <VCache::write(unsigned long long, int, void*)+0xf0>
c000ea0a:	66 90                	xchg   ax,ax
c000ea0c:	83 ec 0c             	sub    esp,0xc
c000ea0f:	53                   	push   ebx
c000ea10:	e8 8f fe ff ff       	call   c000e8a4 <VCache::writeWriteBuffer()>
c000ea15:	83 c4 10             	add    esp,0x10
c000ea18:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ea1b:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000ea20:	7f 22                	jg     c000ea44 <VCache::write(unsigned long long, int, void*)+0xd8>
c000ea22:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000ea25:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000ea28:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ea2c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000ea30:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ea33:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000ea36:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ea3c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea40:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ea42:	eb 18                	jmp    c000ea5c <VCache::write(unsigned long long, int, void*)+0xf0>
c000ea44:	83 ec 0c             	sub    esp,0xc
c000ea47:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea4d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea51:	57                   	push   edi
c000ea52:	56                   	push   esi
c000ea53:	50                   	push   eax
c000ea54:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ea57:	83 c4 20             	add    esp,0x20
c000ea5a:	66 90                	xchg   ax,ax
c000ea5c:	83 c4 0c             	add    esp,0xc
c000ea5f:	31 c0                	xor    eax,eax
c000ea61:	5b                   	pop    ebx
c000ea62:	5e                   	pop    esi
c000ea63:	5f                   	pop    edi
c000ea64:	5d                   	pop    ebp
c000ea65:	c3                   	ret    

c000ea66 <VCache::read(unsigned long long, int, void*)>:
c000ea66:	55                   	push   ebp
c000ea67:	31 c0                	xor    eax,eax
c000ea69:	57                   	push   edi
c000ea6a:	56                   	push   esi
c000ea6b:	53                   	push   ebx
c000ea6c:	83 ec 1c             	sub    esp,0x1c
c000ea6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ea73:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ea77:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ea7b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ea7f:	90                   	nop
c000ea80:	39 e8                	cmp    eax,ebp
c000ea82:	7d 18                	jge    c000ea9c <VCache::read(unsigned long long, int, void*)+0x36>
c000ea84:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000ea87:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000ea8d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ea91:	0f af c8             	imul   ecx,eax
c000ea94:	01 ca                	add    edx,ecx
c000ea96:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000ea98:	40                   	inc    eax
c000ea99:	eb e5                	jmp    c000ea80 <VCache::read(unsigned long long, int, void*)+0x1a>
c000ea9b:	90                   	nop
c000ea9c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000eaa0:	74 0e                	je     c000eab0 <VCache::read(unsigned long long, int, void*)+0x4a>
c000eaa2:	83 ec 0c             	sub    esp,0xc
c000eaa5:	53                   	push   ebx
c000eaa6:	e8 f9 fd ff ff       	call   c000e8a4 <VCache::writeWriteBuffer()>
c000eaab:	83 c4 10             	add    esp,0x10
c000eaae:	66 90                	xchg   ax,ax
c000eab0:	83 fd 01             	cmp    ebp,0x1
c000eab3:	0f 85 87 00 00 00    	jne    c000eb40 <VCache::read(unsigned long long, int, void*)+0xda>
c000eab9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000eabc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000eac0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000eac7:	75 77                	jne    c000eb40 <VCache::read(unsigned long long, int, void*)+0xda>
c000eac9:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000eacc:	89 e9                	mov    ecx,ebp
c000eace:	f7 d9                	neg    ecx
c000ead0:	89 c8                	mov    eax,ecx
c000ead2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ead6:	c1 f8 1f             	sar    eax,0x1f
c000ead9:	21 f1                	and    ecx,esi
c000eadb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eadf:	89 c8                	mov    eax,ecx
c000eae1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eae5:	21 f9                	and    ecx,edi
c000eae7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000eaeb:	89 ca                	mov    edx,ecx
c000eaed:	74 0d                	je     c000eafc <VCache::read(unsigned long long, int, void*)+0x96>
c000eaef:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000eaf2:	75 08                	jne    c000eafc <VCache::read(unsigned long long, int, void*)+0x96>
c000eaf4:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000eaf7:	74 27                	je     c000eb20 <VCache::read(unsigned long long, int, void*)+0xba>
c000eaf9:	8d 76 00             	lea    esi,[esi+0x0]
c000eafc:	83 ec 0c             	sub    esp,0xc
c000eaff:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000eb03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb07:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000eb0a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000eb0d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000eb0f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eb12:	55                   	push   ebp
c000eb13:	52                   	push   edx
c000eb14:	50                   	push   eax
c000eb15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eb19:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000eb1c:	83 c4 20             	add    esp,0x20
c000eb1f:	90                   	nop
c000eb20:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000eb23:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000eb27:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000eb2d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eb30:	48                   	dec    eax
c000eb31:	21 c6                	and    esi,eax
c000eb33:	0f af f1             	imul   esi,ecx
c000eb36:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000eb39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eb3b:	eb 23                	jmp    c000eb60 <VCache::read(unsigned long long, int, void*)+0xfa>
c000eb3d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	53                   	push   ebx
c000eb44:	e8 4b fd ff ff       	call   c000e894 <VCache::invalidateReadBuffer()>
c000eb49:	5a                   	pop    edx
c000eb4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000eb4d:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000eb53:	55                   	push   ebp
c000eb54:	57                   	push   edi
c000eb55:	56                   	push   esi
c000eb56:	50                   	push   eax
c000eb57:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000eb5a:	83 c4 20             	add    esp,0x20
c000eb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb60:	83 c4 1c             	add    esp,0x1c
c000eb63:	31 c0                	xor    eax,eax
c000eb65:	5b                   	pop    ebx
c000eb66:	5e                   	pop    esi
c000eb67:	5f                   	pop    edi
c000eb68:	5d                   	pop    ebp
c000eb69:	c3                   	ret    

c000eb6a <Video::putrect(int, int, int, int, unsigned int)>:
c000eb6a:	55                   	push   ebp
c000eb6b:	57                   	push   edi
c000eb6c:	56                   	push   esi
c000eb6d:	53                   	push   ebx
c000eb6e:	83 ec 1c             	sub    esp,0x1c
c000eb71:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eb75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb79:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000eb7d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000eb81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eb85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb89:	01 df                	add    edi,ebx
c000eb8b:	39 fb                	cmp    ebx,edi
c000eb8d:	7d 1f                	jge    c000ebae <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000eb8f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eb93:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000eb97:	7d 12                	jge    c000ebab <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000eb99:	8b 16                	mov    edx,DWORD PTR [esi]
c000eb9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000eb9f:	53                   	push   ebx
c000eba0:	55                   	push   ebp
c000eba1:	45                   	inc    ebp
c000eba2:	56                   	push   esi
c000eba3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000eba6:	83 c4 10             	add    esp,0x10
c000eba9:	eb e8                	jmp    c000eb93 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ebab:	43                   	inc    ebx
c000ebac:	eb dd                	jmp    c000eb8b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ebae:	83 c4 1c             	add    esp,0x1c
c000ebb1:	5b                   	pop    ebx
c000ebb2:	5e                   	pop    esi
c000ebb3:	5f                   	pop    edi
c000ebb4:	5d                   	pop    ebp
c000ebb5:	c3                   	ret    

c000ebb6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ebb6:	55                   	push   ebp
c000ebb7:	57                   	push   edi
c000ebb8:	31 ff                	xor    edi,edi
c000ebba:	56                   	push   esi
c000ebbb:	53                   	push   ebx
c000ebbc:	83 ec 1c             	sub    esp,0x1c
c000ebbf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ebc3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ebc7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ebce:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ebd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ebd7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ebdb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ebdf:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ebe2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ebe6:	01 f9                	add    ecx,edi
c000ebe8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ebec:	7d 2f                	jge    c000ec1d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ebee:	31 f6                	xor    esi,esi
c000ebf0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebf4:	01 f2                	add    edx,esi
c000ebf6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ebfa:	7d 1a                	jge    c000ec16 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ebfc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ebff:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ec02:	46                   	inc    esi
c000ec03:	51                   	push   ecx
c000ec04:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ec08:	52                   	push   edx
c000ec09:	55                   	push   ebp
c000ec0a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ec0d:	83 c4 10             	add    esp,0x10
c000ec10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ec14:	eb da                	jmp    c000ebf0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ec16:	47                   	inc    edi
c000ec17:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ec1b:	eb c5                	jmp    c000ebe2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ec1d:	83 c4 1c             	add    esp,0x1c
c000ec20:	5b                   	pop    ebx
c000ec21:	5e                   	pop    esi
c000ec22:	5f                   	pop    edi
c000ec23:	5d                   	pop    ebp
c000ec24:	c3                   	ret    
c000ec25:	90                   	nop

c000ec26 <Video::blit(unsigned int*, int, int, int, int)>:
c000ec26:	55                   	push   ebp
c000ec27:	57                   	push   edi
c000ec28:	56                   	push   esi
c000ec29:	53                   	push   ebx
c000ec2a:	83 ec 1c             	sub    esp,0x1c
c000ec2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec31:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ec35:	85 c0                	test   eax,eax
c000ec37:	79 02                	jns    c000ec3b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000ec39:	31 c0                	xor    eax,eax
c000ec3b:	c1 e0 02             	shl    eax,0x2
c000ec3e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ec42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec46:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec4a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000ec4e:	39 d8                	cmp    eax,ebx
c000ec50:	7e 49                	jle    c000ec9b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ec52:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ec58:	7c 41                	jl     c000ec9b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ec5a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ec5e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ec62:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ec66:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000ec6a:	39 f9                	cmp    ecx,edi
c000ec6c:	7e 22                	jle    c000ec90 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000ec6e:	83 c5 04             	add    ebp,0x4
c000ec71:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ec77:	7c 14                	jl     c000ec8d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000ec79:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ec7b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000ec7e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ec82:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ec86:	56                   	push   esi
c000ec87:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ec8a:	83 c4 10             	add    esp,0x10
c000ec8d:	47                   	inc    edi
c000ec8e:	eb d2                	jmp    c000ec62 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000ec90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec94:	43                   	inc    ebx
c000ec95:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ec99:	eb ab                	jmp    c000ec46 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000ec9b:	83 c4 1c             	add    esp,0x1c
c000ec9e:	5b                   	pop    ebx
c000ec9f:	5e                   	pop    esi
c000eca0:	5f                   	pop    edi
c000eca1:	5d                   	pop    ebp
c000eca2:	c3                   	ret    
c000eca3:	90                   	nop

c000eca4 <Video::clearScreen(unsigned int)>:
c000eca4:	57                   	push   edi
c000eca5:	56                   	push   esi
c000eca6:	53                   	push   ebx
c000eca7:	31 db                	xor    ebx,ebx
c000eca9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ecad:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ecb3:	7e 1f                	jle    c000ecd4 <Video::clearScreen(unsigned int)+0x30>
c000ecb5:	31 ff                	xor    edi,edi
c000ecb7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ecbd:	7e 12                	jle    c000ecd1 <Video::clearScreen(unsigned int)+0x2d>
c000ecbf:	8b 06                	mov    eax,DWORD PTR [esi]
c000ecc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ecc5:	53                   	push   ebx
c000ecc6:	57                   	push   edi
c000ecc7:	47                   	inc    edi
c000ecc8:	56                   	push   esi
c000ecc9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eccc:	83 c4 10             	add    esp,0x10
c000eccf:	eb e6                	jmp    c000ecb7 <Video::clearScreen(unsigned int)+0x13>
c000ecd1:	43                   	inc    ebx
c000ecd2:	eb d9                	jmp    c000ecad <Video::clearScreen(unsigned int)+0x9>
c000ecd4:	5b                   	pop    ebx
c000ecd5:	5e                   	pop    esi
c000ecd6:	5f                   	pop    edi
c000ecd7:	c3                   	ret    

c000ecd8 <Video::putpixel(int, int, unsigned int)>:
c000ecd8:	c7 44 24 04 94 f6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f694
c000ece0:	e9 5a 27 00 00       	jmp    c001143f <Krnl::panic(char const*)>
c000ece5:	90                   	nop

c000ece6 <Video::Video(char const*)>:
c000ece6:	83 ec 0c             	sub    esp,0xc
c000ece9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eced:	83 ec 08             	sub    esp,0x8
c000ecf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecf4:	50                   	push   eax
c000ecf5:	e8 ce e1 ff ff       	call   c000cec8 <Device::Device(char const*)>
c000ecfa:	83 c4 10             	add    esp,0x10
c000ecfd:	ba 04 f7 01 c0       	mov    edx,0xc001f704
c000ed02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed06:	89 10                	mov    DWORD PTR [eax],edx
c000ed08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed0c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ed16:	90                   	nop
c000ed17:	83 c4 0c             	add    esp,0xc
c000ed1a:	c3                   	ret    
c000ed1b:	90                   	nop

c000ed1c <Video::~Video()>:
c000ed1c:	83 ec 0c             	sub    esp,0xc
c000ed1f:	ba 04 f7 01 c0       	mov    edx,0xc001f704
c000ed24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed28:	89 10                	mov    DWORD PTR [eax],edx
c000ed2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed2e:	83 ec 0c             	sub    esp,0xc
c000ed31:	50                   	push   eax
c000ed32:	e8 fb de ff ff       	call   c000cc32 <Device::~Device()>
c000ed37:	83 c4 10             	add    esp,0x10
c000ed3a:	90                   	nop
c000ed3b:	83 c4 0c             	add    esp,0xc
c000ed3e:	c3                   	ret    
c000ed3f:	90                   	nop

c000ed40 <Video::~Video()>:
c000ed40:	83 ec 0c             	sub    esp,0xc
c000ed43:	83 ec 0c             	sub    esp,0xc
c000ed46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed4a:	e8 cd ff ff ff       	call   c000ed1c <Video::~Video()>
c000ed4f:	83 c4 10             	add    esp,0x10
c000ed52:	83 ec 08             	sub    esp,0x8
c000ed55:	68 64 01 00 00       	push   0x164
c000ed5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed5e:	e8 97 ca ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c000ed63:	83 c4 10             	add    esp,0x10
c000ed66:	83 c4 0c             	add    esp,0xc
c000ed69:	c3                   	ret    

c000ed6a <Video::isMonochrome()>:
c000ed6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed6e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ed74:	c3                   	ret    
c000ed75:	90                   	nop

c000ed76 <Video::getWidth()>:
c000ed76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed7a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ed80:	c3                   	ret    
c000ed81:	90                   	nop

c000ed82 <Video::getHeight()>:
c000ed82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed86:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ed8c:	c3                   	ret    
c000ed8d:	90                   	nop

c000ed8e <Video::drawCursor(int, int, unsigned char*, int)>:
c000ed8e:	55                   	push   ebp
c000ed8f:	57                   	push   edi
c000ed90:	56                   	push   esi
c000ed91:	53                   	push   ebx
c000ed92:	83 ec 2c             	sub    esp,0x2c
c000ed95:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ed99:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ed9d:	83 f8 01             	cmp    eax,0x1
c000eda0:	19 c9                	sbb    ecx,ecx
c000eda2:	31 db                	xor    ebx,ebx
c000eda4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eda8:	89 cd                	mov    ebp,ecx
c000edaa:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000edb2:	f7 d5                	not    ebp
c000edb4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000edba:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000edbe:	01 d8                	add    eax,ebx
c000edc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000edc4:	56                   	push   esi
c000edc5:	e8 b8 ff ff ff       	call   c000ed82 <Video::getHeight()>
c000edca:	59                   	pop    ecx
c000edcb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000edcf:	7e 70                	jle    c000ee41 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000edd1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000edd5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000edd9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000eddc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ede0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ede4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000edeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000edef:	89 f8                	mov    eax,edi
c000edf1:	83 c0 20             	add    eax,0x20
c000edf4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000edf8:	56                   	push   esi
c000edf9:	e8 78 ff ff ff       	call   c000ed76 <Video::getWidth()>
c000edfe:	5a                   	pop    edx
c000edff:	39 c7                	cmp    edi,eax
c000ee01:	7d 34                	jge    c000ee37 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000ee03:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ee08:	74 05                	je     c000ee0f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000ee0a:	8b 06                	mov    eax,DWORD PTR [esi]
c000ee0c:	55                   	push   ebp
c000ee0d:	eb 0d                	jmp    c000ee1c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000ee0f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ee14:	74 12                	je     c000ee28 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000ee16:	8b 06                	mov    eax,DWORD PTR [esi]
c000ee18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ee1c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ee20:	57                   	push   edi
c000ee21:	56                   	push   esi
c000ee22:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ee25:	83 c4 10             	add    esp,0x10
c000ee28:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ee2c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ee30:	47                   	inc    edi
c000ee31:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ee35:	75 c1                	jne    c000edf8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000ee37:	43                   	inc    ebx
c000ee38:	83 fb 20             	cmp    ebx,0x20
c000ee3b:	0f 85 79 ff ff ff    	jne    c000edba <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000ee41:	83 c4 2c             	add    esp,0x2c
c000ee44:	5b                   	pop    ebx
c000ee45:	5e                   	pop    esi
c000ee46:	5f                   	pop    edi
c000ee47:	5d                   	pop    ebp
c000ee48:	c3                   	ret    
c000ee49:	90                   	nop

c000ee4a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ee4a:	55                   	push   ebp
c000ee4b:	57                   	push   edi
c000ee4c:	56                   	push   esi
c000ee4d:	53                   	push   ebx
c000ee4e:	83 ec 28             	sub    esp,0x28
c000ee51:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ee55:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ee59:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ee5d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ee61:	c1 e6 08             	shl    esi,0x8
c000ee64:	01 c6                	add    esi,eax
c000ee66:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ee6a:	c1 e0 08             	shl    eax,0x8
c000ee6d:	01 d0                	add    eax,edx
c000ee6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ee73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee77:	0f af c6             	imul   eax,esi
c000ee7a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ee81:	50                   	push   eax
c000ee82:	e8 da 9c ff ff       	call   c0008b61 <malloc>
c000ee87:	83 c4 10             	add    esp,0x10
c000ee8a:	89 c7                	mov    edi,eax
c000ee8c:	85 c0                	test   eax,eax
c000ee8e:	75 10                	jne    c000eea0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ee90:	83 ec 0c             	sub    esp,0xc
c000ee93:	68 b5 f6 01 c0       	push   0xc001f6b5
c000ee98:	e8 a2 25 00 00       	call   c001143f <Krnl::panic(char const*)>
c000ee9d:	83 c4 10             	add    esp,0x10
c000eea0:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000eea3:	ba 12 00 00 00       	mov    edx,0x12
c000eea8:	84 c0                	test   al,al
c000eeaa:	74 11                	je     c000eebd <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000eeac:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000eeb0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000eeb4:	c1 fa 03             	sar    edx,0x3
c000eeb7:	0f af d1             	imul   edx,ecx
c000eeba:	83 c2 12             	add    edx,0x12
c000eebd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eec1:	74 04                	je     c000eec7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000eec3:	85 f6                	test   esi,esi
c000eec5:	75 12                	jne    c000eed9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000eec7:	83 ec 0c             	sub    esp,0xc
c000eeca:	68 c5 f6 01 c0       	push   0xc001f6c5
c000eecf:	e8 1c ca ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c000eed4:	e9 b8 00 00 00       	jmp    c000ef91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000eed9:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eedd:	80 f9 02             	cmp    cl,0x2
c000eee0:	0f 85 96 00 00 00    	jne    c000ef7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000eee6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eeeb:	75 0e                	jne    c000eefb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000eeed:	84 c0                	test   al,al
c000eeef:	75 0a                	jne    c000eefb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000eef1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eef4:	83 e8 18             	sub    eax,0x18
c000eef7:	a8 f7                	test   al,0xf7
c000eef9:	74 0a                	je     c000ef05 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000eefb:	83 ec 0c             	sub    esp,0xc
c000eefe:	68 da f6 01 c0       	push   0xc001f6da
c000ef03:	eb 7f                	jmp    c000ef84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000ef05:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ef0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ef15:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ef19:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ef21:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ef25:	75 0c                	jne    c000ef33 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000ef27:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000ef2c:	c1 e0 18             	shl    eax,0x18
c000ef2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef33:	45                   	inc    ebp
c000ef34:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ef39:	c1 e1 10             	shl    ecx,0x10
c000ef3c:	89 c8                	mov    eax,ecx
c000ef3e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ef43:	c1 e1 08             	shl    ecx,0x8
c000ef46:	09 c1                	or     ecx,eax
c000ef48:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ef4c:	09 c1                	or     ecx,eax
c000ef4e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ef52:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ef56:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ef5a:	c1 f8 03             	sar    eax,0x3
c000ef5d:	01 c2                	add    edx,eax
c000ef5f:	89 e8                	mov    eax,ebp
c000ef61:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ef65:	39 c6                	cmp    esi,eax
c000ef67:	7f b0                	jg     c000ef19 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000ef69:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ef6d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef71:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ef74:	7e 22                	jle    c000ef98 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000ef76:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ef7a:	eb 99                	jmp    c000ef15 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000ef7c:	50                   	push   eax
c000ef7d:	50                   	push   eax
c000ef7e:	51                   	push   ecx
c000ef7f:	68 e8 f6 01 c0       	push   0xc001f6e8
c000ef84:	e8 67 c9 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c000ef89:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ef8c:	e8 e0 9b ff ff       	call   c0008b71 <free>
c000ef91:	83 c4 10             	add    esp,0x10
c000ef94:	31 ff                	xor    edi,edi
c000ef96:	eb 0f                	jmp    c000efa7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000ef98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef9c:	89 30                	mov    DWORD PTR [eax],esi
c000ef9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000efa2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000efa5:	89 30                	mov    DWORD PTR [eax],esi
c000efa7:	83 c4 1c             	add    esp,0x1c
c000efaa:	89 f8                	mov    eax,edi
c000efac:	5b                   	pop    ebx
c000efad:	5e                   	pop    esi
c000efae:	5f                   	pop    edi
c000efaf:	5d                   	pop    ebp
c000efb0:	c3                   	ret    
c000efb1:	90                   	nop

c000efb2 <Video::putTGA(int, int, unsigned char*, int)>:
c000efb2:	55                   	push   ebp
c000efb3:	57                   	push   edi
c000efb4:	56                   	push   esi
c000efb5:	53                   	push   ebx
c000efb6:	83 ec 28             	sub    esp,0x28
c000efb9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000efbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000efc1:	50                   	push   eax
c000efc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000efc6:	50                   	push   eax
c000efc7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000efcb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000efcf:	56                   	push   esi
c000efd0:	e8 75 fe ff ff       	call   c000ee4a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000efd5:	83 c4 20             	add    esp,0x20
c000efd8:	85 c0                	test   eax,eax
c000efda:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000efde:	74 35                	je     c000f015 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000efe0:	89 c7                	mov    edi,eax
c000efe2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000efe6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000efea:	39 d8                	cmp    eax,ebx
c000efec:	7e 27                	jle    c000f015 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000efee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eff2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eff6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000effa:	39 e8                	cmp    eax,ebp
c000effc:	7e 14                	jle    c000f012 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000effe:	8b 06                	mov    eax,DWORD PTR [esi]
c000f000:	83 c7 04             	add    edi,0x4
c000f003:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000f006:	53                   	push   ebx
c000f007:	55                   	push   ebp
c000f008:	45                   	inc    ebp
c000f009:	56                   	push   esi
c000f00a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f00d:	83 c4 10             	add    esp,0x10
c000f010:	eb e0                	jmp    c000eff2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000f012:	43                   	inc    ebx
c000f013:	eb cd                	jmp    c000efe2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000f015:	83 c4 1c             	add    esp,0x1c
c000f018:	5b                   	pop    ebx
c000f019:	5e                   	pop    esi
c000f01a:	5f                   	pop    edi
c000f01b:	5d                   	pop    ebp
c000f01c:	c3                   	ret    
c000f01d:	66 90                	xchg   ax,ax
c000f01f:	90                   	nop

c000f020 <ACPI::close(int, int, void*)>:
c000f020:	83 ec 1c             	sub    esp,0x1c
c000f023:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000f02b:	74 0b                	je     c000f038 <ACPI::close(int, int, void*)+0x18>
c000f02d:	b8 00 00 00 00       	mov    eax,0x0
c000f032:	e9 9d 00 00 00       	jmp    c000f0d4 <ACPI::close(int, int, void*)+0xb4>
c000f037:	90                   	nop
c000f038:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000f03d:	75 29                	jne    c000f068 <ACPI::close(int, int, void*)+0x48>
c000f03f:	a1 c8 42 02 c0       	mov    eax,ds:0xc00242c8
c000f044:	85 c0                	test   eax,eax
c000f046:	74 08                	je     c000f050 <ACPI::close(int, int, void*)+0x30>
c000f048:	a1 c8 42 02 c0       	mov    eax,ds:0xc00242c8
c000f04d:	ff d0                	call   eax
c000f04f:	90                   	nop
c000f050:	83 ec 0c             	sub    esp,0xc
c000f053:	68 44 f7 01 c0       	push   0xc001f744
c000f058:	e8 e2 23 00 00       	call   c001143f <Krnl::panic(char const*)>
c000f05d:	83 c4 10             	add    esp,0x10
c000f060:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f065:	eb 6d                	jmp    c000f0d4 <ACPI::close(int, int, void*)+0xb4>
c000f067:	90                   	nop
c000f068:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000f06d:	75 5d                	jne    c000f0cc <ACPI::close(int, int, void*)+0xac>
c000f06f:	a1 c4 42 02 c0       	mov    eax,ds:0xc00242c4
c000f074:	85 c0                	test   eax,eax
c000f076:	74 08                	je     c000f080 <ACPI::close(int, int, void*)+0x60>
c000f078:	a1 c4 42 02 c0       	mov    eax,ds:0xc00242c4
c000f07d:	ff d0                	call   eax
c000f07f:	90                   	nop
c000f080:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000f085:	8d 76 00             	lea    esi,[esi+0x0]
c000f088:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f08c:	25 ff 00 00 00       	and    eax,0xff
c000f091:	83 e0 02             	and    eax,0x2
c000f094:	74 1e                	je     c000f0b4 <ACPI::close(int, int, void*)+0x94>
c000f096:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000f09d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0a1:	89 c2                	mov    edx,eax
c000f0a3:	ec                   	in     al,dx
c000f0a4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000f0a8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000f0ac:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f0b0:	eb d6                	jmp    c000f088 <ACPI::close(int, int, void*)+0x68>
c000f0b2:	66 90                	xchg   ax,ax
c000f0b4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000f0bb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000f0c0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f0c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0c8:	ee                   	out    dx,al
c000f0c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f0d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0d4:	83 c4 1c             	add    esp,0x1c
c000f0d7:	c3                   	ret    

c000f0d8 <findRSDP()>:
c000f0d8:	83 ec 1c             	sub    esp,0x1c
c000f0db:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000f0e0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0e6:	83 e0 04             	and    eax,0x4
c000f0e9:	84 c0                	test   al,al
c000f0eb:	75 07                	jne    c000f0f4 <findRSDP()+0x1c>
c000f0ed:	b8 00 00 00 00       	mov    eax,0x0
c000f0f2:	eb 70                	jmp    c000f164 <findRSDP()+0x8c>
c000f0f4:	a1 18 1d 02 c0       	mov    eax,ds:0xc0021d18
c000f0f9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f0fe:	7f 1c                	jg     c000f11c <findRSDP()+0x44>
c000f100:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000f105:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f10b:	83 e2 fb             	and    edx,0xfffffffb
c000f10e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f114:	b8 00 00 00 00       	mov    eax,0x0
c000f119:	eb 49                	jmp    c000f164 <findRSDP()+0x8c>
c000f11b:	90                   	nop
c000f11c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f124:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f12c:	77 2e                	ja     c000f15c <findRSDP()+0x84>
c000f12e:	83 ec 04             	sub    esp,0x4
c000f131:	6a 08                	push   0x8
c000f133:	68 df f7 01 c0       	push   0xc001f7df
c000f138:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f13c:	e8 6f 12 ff ff       	call   c00003b0 <memcmp>
c000f141:	83 c4 10             	add    esp,0x10
c000f144:	85 c0                	test   eax,eax
c000f146:	0f 94 c0             	sete   al
c000f149:	84 c0                	test   al,al
c000f14b:	74 07                	je     c000f154 <findRSDP()+0x7c>
c000f14d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f151:	eb 11                	jmp    c000f164 <findRSDP()+0x8c>
c000f153:	90                   	nop
c000f154:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f159:	eb c9                	jmp    c000f124 <findRSDP()+0x4c>
c000f15b:	90                   	nop
c000f15c:	b8 00 00 00 00       	mov    eax,0x0
c000f161:	8d 76 00             	lea    esi,[esi+0x0]
c000f164:	83 c4 1c             	add    esp,0x1c
c000f167:	c3                   	ret    

c000f168 <loadACPITables(unsigned char*)>:
c000f168:	57                   	push   edi
c000f169:	56                   	push   esi
c000f16a:	53                   	push   ebx
c000f16b:	83 ec 60             	sub    esp,0x60
c000f16e:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000f173:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f179:	83 e0 04             	and    eax,0x4
c000f17c:	84 c0                	test   al,al
c000f17e:	0f 84 3c 02 00 00    	je     c000f3c0 <loadACPITables(unsigned char*)+0x258>
c000f184:	a0 e0 44 02 c0       	mov    al,ds:0xc00244e0
c000f189:	84 c0                	test   al,al
c000f18b:	74 77                	je     c000f204 <loadACPITables(unsigned char*)+0x9c>
c000f18d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f191:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f195:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f199:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f19c:	83 e8 24             	sub    eax,0x24
c000f19f:	c1 e8 03             	shr    eax,0x3
c000f1a2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f1a6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f1ae:	66 90                	xchg   ax,ax
c000f1b0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f1b4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f1b8:	0f 8d b6 00 00 00    	jge    c000f274 <loadACPITables(unsigned char*)+0x10c>
c000f1be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f1c2:	83 c0 24             	add    eax,0x24
c000f1c5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f1c9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1cd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1d1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f1d5:	c1 e0 03             	shl    eax,0x3
c000f1d8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f1dc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f1e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f1e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1e5:	89 c1                	mov    ecx,eax
c000f1e7:	a1 cc 42 02 c0       	mov    eax,ds:0xc00242cc
c000f1ec:	8d 50 01             	lea    edx,[eax+0x1]
c000f1ef:	89 15 cc 42 02 c0    	mov    DWORD PTR ds:0xc00242cc,edx
c000f1f5:	89 ca                	mov    edx,ecx
c000f1f7:	89 14 c5 e4 42 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbd1c],edx
c000f1fe:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000f202:	eb ac                	jmp    c000f1b0 <loadACPITables(unsigned char*)+0x48>
c000f204:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f208:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f20c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f210:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f213:	83 e8 24             	sub    eax,0x24
c000f216:	c1 e8 02             	shr    eax,0x2
c000f219:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f21d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f225:	8d 76 00             	lea    esi,[esi+0x0]
c000f228:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f22c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f230:	7d 42                	jge    c000f274 <loadACPITables(unsigned char*)+0x10c>
c000f232:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f236:	83 c0 24             	add    eax,0x24
c000f239:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f23d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f241:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f245:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f249:	c1 e0 02             	shl    eax,0x2
c000f24c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f250:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f254:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f256:	a1 cc 42 02 c0       	mov    eax,ds:0xc00242cc
c000f25b:	8d 50 01             	lea    edx,[eax+0x1]
c000f25e:	89 15 cc 42 02 c0    	mov    DWORD PTR ds:0xc00242cc,edx
c000f264:	89 ca                	mov    edx,ecx
c000f266:	89 14 c5 e4 42 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbd1c],edx
c000f26d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000f271:	eb b5                	jmp    c000f228 <loadACPITables(unsigned char*)+0xc0>
c000f273:	90                   	nop
c000f274:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f27c:	a1 cc 42 02 c0       	mov    eax,ds:0xc00242cc
c000f281:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f285:	0f 8d 39 01 00 00    	jge    c000f3c4 <loadACPITables(unsigned char*)+0x25c>
c000f28b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f28f:	8b 04 c5 e4 42 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbd1c]
c000f296:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f29a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f29e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f2a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2a6:	25 ff 0f 00 00       	and    eax,0xfff
c000f2ab:	89 c6                	mov    esi,eax
c000f2ad:	8b 1d d0 1d 02 c0    	mov    ebx,DWORD PTR ds:0xc0021dd0
c000f2b3:	83 ec 0c             	sub    esp,0xc
c000f2b6:	6a 01                	push   0x1
c000f2b8:	e8 e0 b3 ff ff       	call   c000a69d <Virt::allocateKernelVirtualPages(int)>
c000f2bd:	83 c4 10             	add    esp,0x10
c000f2c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f2c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2ca:	83 ec 0c             	sub    esp,0xc
c000f2cd:	6a 01                	push   0x1
c000f2cf:	6a 01                	push   0x1
c000f2d1:	50                   	push   eax
c000f2d2:	52                   	push   edx
c000f2d3:	53                   	push   ebx
c000f2d4:	e8 53 bd ff ff       	call   c000b02c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2d9:	83 c4 20             	add    esp,0x20
c000f2dc:	09 f0                	or     eax,esi
c000f2de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2e2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f2e6:	c1 e0 03             	shl    eax,0x3
c000f2e9:	05 e0 42 02 c0       	add    eax,0xc00242e0
c000f2ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f2f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f2fa:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f302:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f306:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f30a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f312:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f316:	89 c6                	mov    esi,eax
c000f318:	89 d7                	mov    edi,edx
c000f31a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f31c:	89 c8                	mov    eax,ecx
c000f31e:	89 fa                	mov    edx,edi
c000f320:	89 f3                	mov    ebx,esi
c000f322:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f326:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f32a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f32e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f335:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f339:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f33d:	05 00 10 00 00       	add    eax,0x1000
c000f342:	c1 e8 0c             	shr    eax,0xc
c000f345:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f349:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f34d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f351:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f355:	25 ff 0f 00 00       	and    eax,0xfff
c000f35a:	89 c6                	mov    esi,eax
c000f35c:	8b 1d d0 1d 02 c0    	mov    ebx,DWORD PTR ds:0xc0021dd0
c000f362:	83 ec 0c             	sub    esp,0xc
c000f365:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f369:	e8 2f b3 ff ff       	call   c000a69d <Virt::allocateKernelVirtualPages(int)>
c000f36e:	83 c4 10             	add    esp,0x10
c000f371:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f375:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f37b:	83 ec 0c             	sub    esp,0xc
c000f37e:	6a 01                	push   0x1
c000f380:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f384:	50                   	push   eax
c000f385:	52                   	push   edx
c000f386:	53                   	push   ebx
c000f387:	e8 a0 bc ff ff       	call   c000b02c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f38c:	83 c4 20             	add    esp,0x20
c000f38f:	09 f0                	or     eax,esi
c000f391:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f399:	83 ec 0c             	sub    esp,0xc
c000f39c:	50                   	push   eax
c000f39d:	e8 2b b6 ff ff       	call   c000a9cd <Virt::freeKernelVirtualPages(unsigned long)>
c000f3a2:	83 c4 10             	add    esp,0x10
c000f3a5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f3a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f3ad:	89 14 c5 e4 42 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbd1c],edx
c000f3b4:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000f3b8:	e9 bf fe ff ff       	jmp    c000f27c <loadACPITables(unsigned char*)+0x114>
c000f3bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f3c0:	90                   	nop
c000f3c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f3c4:	83 c4 60             	add    esp,0x60
c000f3c7:	5b                   	pop    ebx
c000f3c8:	5e                   	pop    esi
c000f3c9:	5f                   	pop    edi
c000f3ca:	c3                   	ret    
c000f3cb:	90                   	nop

c000f3cc <findRSDT(unsigned char*)>:
c000f3cc:	57                   	push   edi
c000f3cd:	56                   	push   esi
c000f3ce:	53                   	push   ebx
c000f3cf:	83 ec 50             	sub    esp,0x50
c000f3d2:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000f3d7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f3dd:	83 e0 04             	and    eax,0x4
c000f3e0:	84 c0                	test   al,al
c000f3e2:	75 0c                	jne    c000f3f0 <findRSDT(unsigned char*)+0x24>
c000f3e4:	b8 00 00 00 00       	mov    eax,0x0
c000f3e9:	e9 26 01 00 00       	jmp    c000f514 <findRSDT(unsigned char*)+0x148>
c000f3ee:	66 90                	xchg   ax,ax
c000f3f0:	89 e0                	mov    eax,esp
c000f3f2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f3f6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f3fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f3fe:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f406:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f40a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f40e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f412:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f416:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f41a:	89 c6                	mov    esi,eax
c000f41c:	89 d7                	mov    edi,edx
c000f41e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f420:	89 c8                	mov    eax,ecx
c000f422:	89 fa                	mov    edx,edi
c000f424:	89 f3                	mov    ebx,esi
c000f426:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f42a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f42e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f432:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f436:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f43a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f442:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f446:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f44a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f452:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f456:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f45a:	25 ff 0f 00 00       	and    eax,0xfff
c000f45f:	89 c6                	mov    esi,eax
c000f461:	8b 1d d0 1d 02 c0    	mov    ebx,DWORD PTR ds:0xc0021dd0
c000f467:	83 ec 0c             	sub    esp,0xc
c000f46a:	6a 02                	push   0x2
c000f46c:	e8 2c b2 ff ff       	call   c000a69d <Virt::allocateKernelVirtualPages(int)>
c000f471:	83 c4 10             	add    esp,0x10
c000f474:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f478:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f47e:	83 ec 0c             	sub    esp,0xc
c000f481:	6a 01                	push   0x1
c000f483:	6a 02                	push   0x2
c000f485:	50                   	push   eax
c000f486:	52                   	push   edx
c000f487:	53                   	push   ebx
c000f488:	e8 9f bb ff ff       	call   c000b02c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f48d:	83 c4 20             	add    esp,0x20
c000f490:	09 f0                	or     eax,esi
c000f492:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f496:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f49a:	25 ff 0f 00 00       	and    eax,0xfff
c000f49f:	89 c6                	mov    esi,eax
c000f4a1:	8b 1d d0 1d 02 c0    	mov    ebx,DWORD PTR ds:0xc0021dd0
c000f4a7:	83 ec 0c             	sub    esp,0xc
c000f4aa:	6a 02                	push   0x2
c000f4ac:	e8 ec b1 ff ff       	call   c000a69d <Virt::allocateKernelVirtualPages(int)>
c000f4b1:	83 c4 10             	add    esp,0x10
c000f4b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f4b8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f4be:	83 ec 0c             	sub    esp,0xc
c000f4c1:	6a 01                	push   0x1
c000f4c3:	6a 02                	push   0x2
c000f4c5:	50                   	push   eax
c000f4c6:	52                   	push   edx
c000f4c7:	53                   	push   ebx
c000f4c8:	e8 5f bb ff ff       	call   c000b02c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f4cd:	83 c4 20             	add    esp,0x20
c000f4d0:	09 f0                	or     eax,esi
c000f4d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f4d6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000f4db:	75 13                	jne    c000f4f0 <findRSDT(unsigned char*)+0x124>
c000f4dd:	c6 05 e0 44 02 c0 00 	mov    BYTE PTR ds:0xc00244e0,0x0
c000f4e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f4e8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f4ec:	eb 22                	jmp    c000f510 <findRSDT(unsigned char*)+0x144>
c000f4ee:	66 90                	xchg   ax,ax
c000f4f0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000f4f5:	75 11                	jne    c000f508 <findRSDT(unsigned char*)+0x13c>
c000f4f7:	c6 05 e0 44 02 c0 01 	mov    BYTE PTR ds:0xc00244e0,0x1
c000f4fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f502:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f506:	eb 08                	jmp    c000f510 <findRSDT(unsigned char*)+0x144>
c000f508:	b8 00 00 00 00       	mov    eax,0x0
c000f50d:	eb 05                	jmp    c000f514 <findRSDT(unsigned char*)+0x148>
c000f50f:	90                   	nop
c000f510:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f514:	83 c4 50             	add    esp,0x50
c000f517:	5b                   	pop    ebx
c000f518:	5e                   	pop    esi
c000f519:	5f                   	pop    edi
c000f51a:	c3                   	ret    
c000f51b:	90                   	nop

c000f51c <findDataTable(unsigned char*, char*)>:
c000f51c:	83 ec 1c             	sub    esp,0x1c
c000f51f:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000f524:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f52a:	83 e0 04             	and    eax,0x4
c000f52d:	84 c0                	test   al,al
c000f52f:	75 07                	jne    c000f538 <findDataTable(unsigned char*, char*)+0x1c>
c000f531:	b8 00 00 00 00       	mov    eax,0x0
c000f536:	eb 58                	jmp    c000f590 <findDataTable(unsigned char*, char*)+0x74>
c000f538:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f540:	a1 cc 42 02 c0       	mov    eax,ds:0xc00242cc
c000f545:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f549:	7d 3d                	jge    c000f588 <findDataTable(unsigned char*, char*)+0x6c>
c000f54b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f54f:	c1 e0 03             	shl    eax,0x3
c000f552:	05 e0 42 02 c0       	add    eax,0xc00242e0
c000f557:	83 ec 04             	sub    esp,0x4
c000f55a:	6a 04                	push   0x4
c000f55c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f560:	50                   	push   eax
c000f561:	e8 4a 0e ff ff       	call   c00003b0 <memcmp>
c000f566:	83 c4 10             	add    esp,0x10
c000f569:	85 c0                	test   eax,eax
c000f56b:	0f 94 c0             	sete   al
c000f56e:	84 c0                	test   al,al
c000f570:	74 0e                	je     c000f580 <findDataTable(unsigned char*, char*)+0x64>
c000f572:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f576:	8b 04 c5 e4 42 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbd1c]
c000f57d:	eb 11                	jmp    c000f590 <findDataTable(unsigned char*, char*)+0x74>
c000f57f:	90                   	nop
c000f580:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000f584:	eb ba                	jmp    c000f540 <findDataTable(unsigned char*, char*)+0x24>
c000f586:	66 90                	xchg   ax,ax
c000f588:	b8 00 00 00 00       	mov    eax,0x0
c000f58d:	8d 76 00             	lea    esi,[esi+0x0]
c000f590:	83 c4 1c             	add    esp,0x1c
c000f593:	c3                   	ret    

c000f594 <scanMADT()>:
c000f594:	53                   	push   ebx
c000f595:	83 ec 38             	sub    esp,0x38
c000f598:	a1 00 1d 02 c0       	mov    eax,ds:0xc0021d00
c000f59d:	25 00 04 00 00       	and    eax,0x400
c000f5a2:	74 14                	je     c000f5b8 <scanMADT()+0x24>
c000f5a4:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000f5a9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f5af:	83 e2 fb             	and    edx,0xfffffffb
c000f5b2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5b8:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000f5bd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f5c3:	83 e0 04             	and    eax,0x4
c000f5c6:	84 c0                	test   al,al
c000f5c8:	0f 84 8a 04 00 00    	je     c000fa58 <scanMADT()+0x4c4>
c000f5ce:	e8 05 fb ff ff       	call   c000f0d8 <findRSDP()>
c000f5d3:	a3 ec 44 02 c0       	mov    ds:0xc00244ec,eax
c000f5d8:	a1 ec 44 02 c0       	mov    eax,ds:0xc00244ec
c000f5dd:	85 c0                	test   eax,eax
c000f5df:	75 1b                	jne    c000f5fc <scanMADT()+0x68>
c000f5e1:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000f5e6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f5ec:	83 e2 fb             	and    edx,0xfffffffb
c000f5ef:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5f5:	e9 66 04 00 00       	jmp    c000fa60 <scanMADT()+0x4cc>
c000f5fa:	66 90                	xchg   ax,ax
c000f5fc:	a1 ec 44 02 c0       	mov    eax,ds:0xc00244ec
c000f601:	83 ec 0c             	sub    esp,0xc
c000f604:	50                   	push   eax
c000f605:	e8 c2 fd ff ff       	call   c000f3cc <findRSDT(unsigned char*)>
c000f60a:	83 c4 10             	add    esp,0x10
c000f60d:	a3 e8 44 02 c0       	mov    ds:0xc00244e8,eax
c000f612:	a1 e8 44 02 c0       	mov    eax,ds:0xc00244e8
c000f617:	85 c0                	test   eax,eax
c000f619:	75 19                	jne    c000f634 <scanMADT()+0xa0>
c000f61b:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000f620:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f626:	83 e2 fb             	and    edx,0xfffffffb
c000f629:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f62f:	e9 2c 04 00 00       	jmp    c000fa60 <scanMADT()+0x4cc>
c000f634:	a1 e8 44 02 c0       	mov    eax,ds:0xc00244e8
c000f639:	83 ec 0c             	sub    esp,0xc
c000f63c:	50                   	push   eax
c000f63d:	e8 26 fb ff ff       	call   c000f168 <loadACPITables(unsigned char*)>
c000f642:	83 c4 10             	add    esp,0x10
c000f645:	a1 e8 44 02 c0       	mov    eax,ds:0xc00244e8
c000f64a:	83 ec 08             	sub    esp,0x8
c000f64d:	68 e8 f7 01 c0       	push   0xc001f7e8
c000f652:	50                   	push   eax
c000f653:	e8 c4 fe ff ff       	call   c000f51c <findDataTable(unsigned char*, char*)>
c000f658:	83 c4 10             	add    esp,0x10
c000f65b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f65f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f664:	75 1a                	jne    c000f680 <scanMADT()+0xec>
c000f666:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000f66b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f671:	83 e2 fe             	and    edx,0xfffffffe
c000f674:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f67a:	e9 e1 03 00 00       	jmp    c000fa60 <scanMADT()+0x4cc>
c000f67f:	90                   	nop
c000f680:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f688:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f68c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f68f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f693:	0f 87 c7 03 00 00    	ja     c000fa60 <scanMADT()+0x4cc>
c000f699:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f6a1:	0f 87 b9 03 00 00    	ja     c000fa60 <scanMADT()+0x4cc>
c000f6a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6ab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f6af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6b3:	8d 50 01             	lea    edx,[eax+0x1]
c000f6b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6be:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f6c2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f6c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6ca:	8d 50 01             	lea    edx,[eax+0x1]
c000f6cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f6d9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f6dd:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000f6e2:	0f 86 74 03 00 00    	jbe    c000fa5c <scanMADT()+0x4c8>
c000f6e8:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000f6ed:	75 5d                	jne    c000f74c <scanMADT()+0x1b8>
c000f6ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6f3:	8d 50 01             	lea    edx,[eax+0x1]
c000f6f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6fa:	8a 15 e0 46 02 c0    	mov    dl,BYTE PTR ds:0xc00246e0
c000f700:	81 e2 ff 00 00 00    	and    edx,0xff
c000f706:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f70a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f70e:	88 82 20 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb8e0],al
c000f714:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f718:	8d 42 01             	lea    eax,[edx+0x1]
c000f71b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f71f:	a0 e0 46 02 c0       	mov    al,ds:0xc00246e0
c000f724:	8d 48 01             	lea    ecx,[eax+0x1]
c000f727:	88 0d e0 46 02 c0    	mov    BYTE PTR ds:0xc00246e0,cl
c000f72d:	25 ff 00 00 00       	and    eax,0xff
c000f732:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f736:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000f73a:	88 90 00 47 02 c0    	mov    BYTE PTR [eax-0x3ffdb900],dl
c000f740:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f745:	e9 f6 02 00 00       	jmp    c000fa40 <scanMADT()+0x4ac>
c000f74a:	66 90                	xchg   ax,ax
c000f74c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000f751:	0f 85 29 01 00 00    	jne    c000f880 <scanMADT()+0x2ec>
c000f757:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f75b:	8d 50 01             	lea    edx,[eax+0x1]
c000f75e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f762:	8a 15 a0 45 02 c0    	mov    dl,BYTE PTR ds:0xc00245a0
c000f768:	81 e2 ff 00 00 00    	and    edx,0xff
c000f76e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f772:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f776:	88 82 c0 45 02 c0    	mov    BYTE PTR [edx-0x3ffdba40],al
c000f77c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000f780:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f784:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f788:	01 d0                	add    eax,edx
c000f78a:	83 c0 2c             	add    eax,0x2c
c000f78d:	8a 00                	mov    al,BYTE PTR [eax]
c000f78f:	31 d2                	xor    edx,edx
c000f791:	88 c2                	mov    dl,al
c000f793:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f797:	8d 48 01             	lea    ecx,[eax+0x1]
c000f79a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f79e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f7a2:	25 ff 00 00 00       	and    eax,0xff
c000f7a7:	c1 e0 08             	shl    eax,0x8
c000f7aa:	89 d1                	mov    ecx,edx
c000f7ac:	09 c1                	or     ecx,eax
c000f7ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7b2:	8d 50 02             	lea    edx,[eax+0x2]
c000f7b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7b9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7bd:	25 ff 00 00 00       	and    eax,0xff
c000f7c2:	c1 e0 10             	shl    eax,0x10
c000f7c5:	09 c1                	or     ecx,eax
c000f7c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7cb:	8d 50 03             	lea    edx,[eax+0x3]
c000f7ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7d2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7d6:	25 ff 00 00 00       	and    eax,0xff
c000f7db:	c1 e0 18             	shl    eax,0x18
c000f7de:	09 c1                	or     ecx,eax
c000f7e0:	89 ca                	mov    edx,ecx
c000f7e2:	a0 a0 45 02 c0       	mov    al,ds:0xc00245a0
c000f7e7:	25 ff 00 00 00       	and    eax,0xff
c000f7ec:	89 14 85 e0 45 02 c0 	mov    DWORD PTR [eax*4-0x3ffdba20],edx
c000f7f3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f800:	01 d0                	add    eax,edx
c000f802:	83 c0 2c             	add    eax,0x2c
c000f805:	8a 00                	mov    al,BYTE PTR [eax]
c000f807:	31 d2                	xor    edx,edx
c000f809:	88 c2                	mov    dl,al
c000f80b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f80f:	8d 48 01             	lea    ecx,[eax+0x1]
c000f812:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f816:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f81a:	25 ff 00 00 00       	and    eax,0xff
c000f81f:	c1 e0 08             	shl    eax,0x8
c000f822:	89 d1                	mov    ecx,edx
c000f824:	09 c1                	or     ecx,eax
c000f826:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f82a:	8d 50 02             	lea    edx,[eax+0x2]
c000f82d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f831:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f835:	25 ff 00 00 00       	and    eax,0xff
c000f83a:	c1 e0 10             	shl    eax,0x10
c000f83d:	09 c1                	or     ecx,eax
c000f83f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f843:	8d 50 03             	lea    edx,[eax+0x3]
c000f846:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f84a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f84e:	25 ff 00 00 00       	and    eax,0xff
c000f853:	c1 e0 18             	shl    eax,0x18
c000f856:	09 c1                	or     ecx,eax
c000f858:	89 ca                	mov    edx,ecx
c000f85a:	a0 a0 45 02 c0       	mov    al,ds:0xc00245a0
c000f85f:	25 ff 00 00 00       	and    eax,0xff
c000f864:	89 14 85 60 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb9a0],edx
c000f86b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f870:	a0 a0 45 02 c0       	mov    al,ds:0xc00245a0
c000f875:	40                   	inc    eax
c000f876:	a2 a0 45 02 c0       	mov    ds:0xc00245a0,al
c000f87b:	e9 c0 01 00 00       	jmp    c000fa40 <scanMADT()+0x4ac>
c000f880:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000f885:	0f 85 fd 00 00 00    	jne    c000f988 <scanMADT()+0x3f4>
c000f88b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f88f:	8d 50 01             	lea    edx,[eax+0x1]
c000f892:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f896:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f89a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f89e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f8a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8a6:	8d 50 01             	lea    edx,[eax+0x1]
c000f8a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8b5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f8b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8c1:	01 d0                	add    eax,edx
c000f8c3:	83 c0 2c             	add    eax,0x2c
c000f8c6:	8a 00                	mov    al,BYTE PTR [eax]
c000f8c8:	31 d2                	xor    edx,edx
c000f8ca:	88 c2                	mov    dl,al
c000f8cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8d0:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8d7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8db:	25 ff 00 00 00       	and    eax,0xff
c000f8e0:	c1 e0 08             	shl    eax,0x8
c000f8e3:	89 d1                	mov    ecx,edx
c000f8e5:	09 c1                	or     ecx,eax
c000f8e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8eb:	8d 50 02             	lea    edx,[eax+0x2]
c000f8ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8f2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f8f6:	25 ff 00 00 00       	and    eax,0xff
c000f8fb:	c1 e0 10             	shl    eax,0x10
c000f8fe:	09 c1                	or     ecx,eax
c000f900:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f904:	8d 50 03             	lea    edx,[eax+0x3]
c000f907:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f90b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f90f:	25 ff 00 00 00       	and    eax,0xff
c000f914:	c1 e0 18             	shl    eax,0x18
c000f917:	09 c8                	or     eax,ecx
c000f919:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f91d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f922:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f92a:	01 d0                	add    eax,edx
c000f92c:	83 c0 2c             	add    eax,0x2c
c000f92f:	8a 00                	mov    al,BYTE PTR [eax]
c000f931:	25 ff 00 00 00       	and    eax,0xff
c000f936:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f93a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f93d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f941:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f945:	81 e2 ff 00 00 00    	and    edx,0xff
c000f94b:	c1 e2 08             	shl    edx,0x8
c000f94e:	09 d0                	or     eax,edx
c000f950:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f955:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f95a:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000f95e:	25 ff 00 00 00       	and    eax,0xff
c000f963:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f967:	88 90 60 0c 02 c0    	mov    BYTE PTR [eax-0x3ffdf3a0],dl
c000f96d:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000f971:	31 d2                	xor    edx,edx
c000f973:	88 c2                	mov    dl,al
c000f975:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f97a:	66 89 84 12 80 45 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdba80],ax
c000f982:	e9 b9 00 00 00       	jmp    c000fa40 <scanMADT()+0x4ac>
c000f987:	90                   	nop
c000f988:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000f98d:	0f 85 a1 00 00 00    	jne    c000fa34 <scanMADT()+0x4a0>
c000f993:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f997:	8d 50 01             	lea    edx,[eax+0x1]
c000f99a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f99e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f9a2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f9a6:	25 ff 00 00 00       	and    eax,0xff
c000f9ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f9af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f9b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f9b7:	01 d0                	add    eax,edx
c000f9b9:	83 c0 2c             	add    eax,0x2c
c000f9bc:	8a 00                	mov    al,BYTE PTR [eax]
c000f9be:	31 d2                	xor    edx,edx
c000f9c0:	88 c2                	mov    dl,al
c000f9c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f9c6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f9c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9cd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f9d1:	25 ff 00 00 00       	and    eax,0xff
c000f9d6:	c1 e0 08             	shl    eax,0x8
c000f9d9:	09 d0                	or     eax,edx
c000f9db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f9df:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f9e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f9e8:	8d 50 01             	lea    edx,[eax+0x1]
c000f9eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f9ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f9f3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f9f7:	25 ff 00 00 00       	and    eax,0xff
c000f9fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa04:	c1 e0 08             	shl    eax,0x8
c000fa07:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fa0b:	89 c1                	mov    ecx,eax
c000fa0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa11:	c1 e0 18             	shl    eax,0x18
c000fa14:	89 c3                	mov    ebx,eax
c000fa16:	a1 f0 44 02 c0       	mov    eax,ds:0xc00244f0
c000fa1b:	8d 50 01             	lea    edx,[eax+0x1]
c000fa1e:	89 15 f0 44 02 c0    	mov    DWORD PTR ds:0xc00244f0,edx
c000fa24:	09 d9                	or     ecx,ebx
c000fa26:	89 ca                	mov    edx,ecx
c000fa28:	89 14 85 00 45 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbb00],edx
c000fa2f:	eb 0f                	jmp    c000fa40 <scanMADT()+0x4ac>
c000fa31:	8d 76 00             	lea    esi,[esi+0x0]
c000fa34:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000fa39:	75 05                	jne    c000fa40 <scanMADT()+0x4ac>
c000fa3b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000fa40:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000fa44:	31 d2                	xor    edx,edx
c000fa46:	88 c2                	mov    dl,al
c000fa48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa4c:	01 d0                	add    eax,edx
c000fa4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fa52:	e9 31 fc ff ff       	jmp    c000f688 <scanMADT()+0xf4>
c000fa57:	90                   	nop
c000fa58:	90                   	nop
c000fa59:	eb 05                	jmp    c000fa60 <scanMADT()+0x4cc>
c000fa5b:	90                   	nop
c000fa5c:	90                   	nop
c000fa5d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa60:	83 c4 38             	add    esp,0x38
c000fa63:	5b                   	pop    ebx
c000fa64:	c3                   	ret    
c000fa65:	90                   	nop
c000fa66:	66 90                	xchg   ax,ax

c000fa68 <ACPI::ACPI()>:
c000fa68:	83 ec 0c             	sub    esp,0xc
c000fa6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa6f:	83 ec 08             	sub    esp,0x8
c000fa72:	68 ed f7 01 c0       	push   0xc001f7ed
c000fa77:	50                   	push   eax
c000fa78:	e8 4b d4 ff ff       	call   c000cec8 <Device::Device(char const*)>
c000fa7d:	83 c4 10             	add    esp,0x10
c000fa80:	ba 24 f9 01 c0       	mov    edx,0xc001f924
c000fa85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa89:	89 10                	mov    DWORD PTR [eax],edx
c000fa8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa8f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000fa96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa9a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000faa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faa8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000fab2:	e8 dd fa ff ff       	call   c000f594 <scanMADT()>
c000fab7:	90                   	nop
c000fab8:	83 c4 0c             	add    esp,0xc
c000fabb:	c3                   	ret    

c000fabc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000fabc:	83 ec 2c             	sub    esp,0x2c
c000fabf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000fac3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fac7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000facb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000facf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000fad4:	88 d0                	mov    al,dl
c000fad6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fada:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fadf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000fae7:	90                   	nop
c000fae8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000faec:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000faf2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000faf6:	0f 8d 9c 00 00 00    	jge    c000fb98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000fafc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fb04:	83 c2 2a             	add    edx,0x2a
c000fb07:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000fb0b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000fb10:	75 7a                	jne    c000fb8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000fb12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fb1a:	83 c2 2a             	add    edx,0x2a
c000fb1d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fb21:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000fb25:	75 65                	jne    c000fb8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000fb27:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000fb2c:	74 3a                	je     c000fb68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000fb2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fb36:	83 c2 2a             	add    edx,0x2a
c000fb39:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fb3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb44:	39 c2                	cmp    edx,eax
c000fb46:	74 10                	je     c000fb58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000fb48:	83 ec 0c             	sub    esp,0xc
c000fb4b:	68 68 f7 01 c0       	push   0xc001f768
c000fb50:	e8 ea 18 00 00       	call   c001143f <Krnl::panic(char const*)>
c000fb55:	83 c4 10             	add    esp,0x10
c000fb58:	83 ec 0c             	sub    esp,0xc
c000fb5b:	68 f2 f7 01 c0       	push   0xc001f7f2
c000fb60:	e8 da 18 00 00       	call   c001143f <Krnl::panic(char const*)>
c000fb65:	83 c4 10             	add    esp,0x10
c000fb68:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fb74:	83 c2 2a             	add    edx,0x2a
c000fb77:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fb7b:	8b 02                	mov    eax,DWORD PTR [edx]
c000fb7d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fb80:	89 01                	mov    DWORD PTR [ecx],eax
c000fb82:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fb85:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb8a:	66 90                	xchg   ax,ax
c000fb8c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000fb90:	e9 53 ff ff ff       	jmp    c000fae8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fb95:	8d 76 00             	lea    esi,[esi+0x0]
c000fb98:	90                   	nop
c000fb99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb9d:	83 c4 2c             	add    esp,0x2c
c000fba0:	c2 04 00             	ret    0x4
c000fba3:	90                   	nop

c000fba4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fba4:	83 ec 1c             	sub    esp,0x1c
c000fba7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fbab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fbaf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fbb3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fbb8:	88 c8                	mov    al,cl
c000fbba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fbbe:	88 d0                	mov    al,dl
c000fbc0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fbc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbc8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fbce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbd2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fbd5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fbd9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fbdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbe1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fbe7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fbeb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000fbee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbf2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fbf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbfb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fc01:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fc05:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc0c:	83 c2 2a             	add    edx,0x2a
c000fc0f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fc13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc17:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fc1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc21:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fc24:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fc28:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fc2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc30:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fc36:	8d 50 01             	lea    edx,[eax+0x1]
c000fc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc3d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fc43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc47:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fc4d:	3d 00 02 00 00       	cmp    eax,0x200
c000fc52:	75 10                	jne    c000fc64 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000fc54:	83 ec 0c             	sub    esp,0xc
c000fc57:	68 01 f8 01 c0       	push   0xc001f801
c000fc5c:	e8 de 17 00 00       	call   c001143f <Krnl::panic(char const*)>
c000fc61:	83 c4 10             	add    esp,0x10
c000fc64:	90                   	nop
c000fc65:	83 c4 1c             	add    esp,0x1c
c000fc68:	c3                   	ret    
c000fc69:	90                   	nop
c000fc6a:	66 90                	xchg   ax,ax

c000fc6c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fc6c:	b8 00 00 00 00       	mov    eax,0x0
c000fc71:	c3                   	ret    
c000fc72:	66 90                	xchg   ax,ax

c000fc74 <ACPI::detectPCI()>:
c000fc74:	53                   	push   ebx
c000fc75:	83 ec 28             	sub    esp,0x28
c000fc78:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fc7d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fc82:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c000fc87:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fc8d:	83 e0 04             	and    eax,0x4
c000fc90:	84 c0                	test   al,al
c000fc92:	74 2c                	je     c000fcc0 <ACPI::detectPCI()+0x4c>
c000fc94:	a1 e8 44 02 c0       	mov    eax,ds:0xc00244e8
c000fc99:	83 ec 08             	sub    esp,0x8
c000fc9c:	68 1e f8 01 c0       	push   0xc001f81e
c000fca1:	50                   	push   eax
c000fca2:	e8 75 f8 ff ff       	call   c000f51c <findDataTable(unsigned char*, char*)>
c000fca7:	83 c4 10             	add    esp,0x10
c000fcaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fcae:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fcb3:	74 0b                	je     c000fcc0 <ACPI::detectPCI()+0x4c>
c000fcb5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fcba:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fcbf:	90                   	nop
c000fcc0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fcc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fccc:	8a 00                	mov    al,BYTE PTR [eax]
c000fcce:	3c 01                	cmp    al,0x1
c000fcd0:	75 0e                	jne    c000fce0 <ACPI::detectPCI()+0x6c>
c000fcd2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fcd7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fcdc:	eb 2a                	jmp    c000fd08 <ACPI::detectPCI()+0x94>
c000fcde:	66 90                	xchg   ax,ax
c000fce0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fce4:	8a 00                	mov    al,BYTE PTR [eax]
c000fce6:	3c 02                	cmp    al,0x2
c000fce8:	75 1e                	jne    c000fd08 <ACPI::detectPCI()+0x94>
c000fcea:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fcef:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000fcf4:	74 12                	je     c000fd08 <ACPI::detectPCI()+0x94>
c000fcf6:	83 ec 0c             	sub    esp,0xc
c000fcf9:	68 98 f7 01 c0       	push   0xc001f798
c000fcfe:	e8 3c 17 00 00       	call   c001143f <Krnl::panic(char const*)>
c000fd03:	83 c4 10             	add    esp,0x10
c000fd06:	66 90                	xchg   ax,ax
c000fd08:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fd0c:	83 f0 01             	xor    eax,0x1
c000fd0f:	84 c0                	test   al,al
c000fd11:	74 41                	je     c000fd54 <ACPI::detectPCI()+0xe0>
c000fd13:	e8 38 04 ff ff       	call   c0000150 <manualPCIProbe>
c000fd18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fd1c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fd21:	75 0d                	jne    c000fd30 <ACPI::detectPCI()+0xbc>
c000fd23:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fd28:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fd2d:	eb 25                	jmp    c000fd54 <ACPI::detectPCI()+0xe0>
c000fd2f:	90                   	nop
c000fd30:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fd35:	75 1d                	jne    c000fd54 <ACPI::detectPCI()+0xe0>
c000fd37:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fd3c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000fd41:	74 11                	je     c000fd54 <ACPI::detectPCI()+0xe0>
c000fd43:	83 ec 0c             	sub    esp,0xc
c000fd46:	68 98 f7 01 c0       	push   0xc001f798
c000fd4b:	e8 ef 16 00 00       	call   c001143f <Krnl::panic(char const*)>
c000fd50:	83 c4 10             	add    esp,0x10
c000fd53:	90                   	nop
c000fd54:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000fd59:	0f 84 85 00 00 00    	je     c000fde4 <ACPI::detectPCI()+0x170>
c000fd5f:	83 ec 0c             	sub    esp,0xc
c000fd62:	68 23 f8 01 c0       	push   0xc001f823
c000fd67:	e8 4f 8e ff ff       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c000fd6c:	83 c4 10             	add    esp,0x10
c000fd6f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fd77:	83 ec 0c             	sub    esp,0xc
c000fd7a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd7e:	e8 de 8d ff ff       	call   c0008b61 <malloc>
c000fd83:	83 c4 10             	add    esp,0x10
c000fd86:	89 c3                	mov    ebx,eax
c000fd88:	83 ec 0c             	sub    esp,0xc
c000fd8b:	53                   	push   ebx
c000fd8c:	e8 6d 9b 00 00       	call   c00198fe <PCI::PCI()>
c000fd91:	83 c4 10             	add    esp,0x10
c000fd94:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fd98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd9c:	83 ec 08             	sub    esp,0x8
c000fd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fda3:	50                   	push   eax
c000fda4:	e8 87 cf ff ff       	call   c000cd30 <Device::addChild(Device*)>
c000fda9:	83 c4 10             	add    esp,0x10
c000fdac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb2:	83 c0 08             	add    eax,0x8
c000fdb5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000fdbc:	74 0a                	je     c000fdc8 <ACPI::detectPCI()+0x154>
c000fdbe:	ba 01 00 00 00       	mov    edx,0x1
c000fdc3:	eb 0b                	jmp    c000fdd0 <ACPI::detectPCI()+0x15c>
c000fdc5:	8d 76 00             	lea    esi,[esi+0x0]
c000fdc8:	ba 02 00 00 00       	mov    edx,0x2
c000fdcd:	8d 76 00             	lea    esi,[esi+0x0]
c000fdd0:	6a 00                	push   0x0
c000fdd2:	6a 00                	push   0x0
c000fdd4:	52                   	push   edx
c000fdd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdd9:	ff d0                	call   eax
c000fddb:	83 c4 10             	add    esp,0x10
c000fdde:	e9 91 00 00 00       	jmp    c000fe74 <ACPI::detectPCI()+0x200>
c000fde3:	90                   	nop
c000fde4:	83 ec 0c             	sub    esp,0xc
c000fde7:	68 3b f8 01 c0       	push   0xc001f83b
c000fdec:	e8 ca 8d ff ff       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c000fdf1:	83 c4 10             	add    esp,0x10
c000fdf4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fdfb:	83 ec 0c             	sub    esp,0xc
c000fdfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fe02:	e8 5a 8d ff ff       	call   c0008b61 <malloc>
c000fe07:	83 c4 10             	add    esp,0x10
c000fe0a:	89 c3                	mov    ebx,eax
c000fe0c:	83 ec 0c             	sub    esp,0xc
c000fe0f:	53                   	push   ebx
c000fe10:	e8 15 a6 00 00       	call   c001a42a <IDE::IDE()>
c000fe15:	83 c4 10             	add    esp,0x10
c000fe18:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fe1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe20:	83 ec 08             	sub    esp,0x8
c000fe23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fe27:	50                   	push   eax
c000fe28:	e8 03 cf ff ff       	call   c000cd30 <Device::addChild(Device*)>
c000fe2d:	83 c4 10             	add    esp,0x10
c000fe30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe34:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fe3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe42:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fe4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe4f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fe58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe5e:	83 c0 08             	add    eax,0x8
c000fe61:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe63:	6a 00                	push   0x0
c000fe65:	6a 00                	push   0x0
c000fe67:	6a 00                	push   0x0
c000fe69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe6d:	ff d0                	call   eax
c000fe6f:	83 c4 10             	add    esp,0x10
c000fe72:	66 90                	xchg   ax,ax
c000fe74:	90                   	nop
c000fe75:	83 c4 28             	add    esp,0x28
c000fe78:	5b                   	pop    ebx
c000fe79:	c3                   	ret    
c000fe7a:	66 90                	xchg   ax,ax

c000fe7c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fe7c:	83 ec 1c             	sub    esp,0x1c
c000fe7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe83:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fe86:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fe8a:	8b 15 e8 1c 02 c0    	mov    edx,DWORD PTR ds:0xc0021ce8
c000fe90:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fe94:	25 ff 00 00 00       	and    eax,0xff
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	50                   	push   eax
c000fe9d:	52                   	push   edx
c000fe9e:	e8 af 83 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c000fea3:	83 c4 10             	add    esp,0x10
c000fea6:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000feaa:	8b 15 e8 1c 02 c0    	mov    edx,DWORD PTR ds:0xc0021ce8
c000feb0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000feb4:	25 ff 00 00 00       	and    eax,0xff
c000feb9:	83 ec 04             	sub    esp,0x4
c000febc:	6a 01                	push   0x1
c000febe:	50                   	push   eax
c000febf:	52                   	push   edx
c000fec0:	e8 a3 84 ff ff       	call   c0008368 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	90                   	nop
c000fec9:	83 c4 1c             	add    esp,0x1c
c000fecc:	c3                   	ret    
c000fecd:	90                   	nop
c000fece:	66 90                	xchg   ax,ax

c000fed0 <ACPI::sleep()>:
c000fed0:	83 ec 0c             	sub    esp,0xc
c000fed3:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c000fed8:	85 c0                	test   eax,eax
c000feda:	74 08                	je     c000fee4 <ACPI::sleep()+0x14>
c000fedc:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c000fee1:	ff d0                	call   eax
c000fee3:	90                   	nop
c000fee4:	90                   	nop
c000fee5:	83 c4 0c             	add    esp,0xc
c000fee8:	c3                   	ret    
c000fee9:	90                   	nop
c000feea:	66 90                	xchg   ax,ax

c000feec <ACPI::open(int, int, void*)>:
c000feec:	57                   	push   edi
c000feed:	56                   	push   esi
c000feee:	53                   	push   ebx
c000feef:	81 ec 70 01 00 00    	sub    esp,0x170
c000fef5:	83 ec 0c             	sub    esp,0xc
c000fef8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000feff:	e8 70 fd ff ff       	call   c000fc74 <ACPI::detectPCI()>
c000ff04:	83 c4 10             	add    esp,0x10
c000ff07:	83 ec 0c             	sub    esp,0xc
c000ff0a:	68 c0 f7 01 c0       	push   0xc001f7c0
c000ff0f:	e8 a7 8c ff ff       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c000ff14:	83 c4 10             	add    esp,0x10
c000ff17:	83 ec 0c             	sub    esp,0xc
c000ff1a:	68 50 f8 01 c0       	push   0xc001f850
c000ff1f:	e8 07 34 00 00       	call   c001332b <Thr::loadKernelSymbolTable(char const*)>
c000ff24:	83 c4 10             	add    esp,0x10
c000ff27:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ff2f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ff3a:	83 ec 0c             	sub    esp,0xc
c000ff3d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ff44:	e8 18 8c ff ff       	call   c0008b61 <malloc>
c000ff49:	83 c4 10             	add    esp,0x10
c000ff4c:	89 c3                	mov    ebx,eax
c000ff4e:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c000ff53:	83 ec 04             	sub    esp,0x4
c000ff56:	50                   	push   eax
c000ff57:	68 6e f8 01 c0       	push   0xc001f86e
c000ff5c:	53                   	push   ebx
c000ff5d:	e8 04 bf ff ff       	call   c000be66 <File::File(char const*, Process*)>
c000ff62:	83 c4 10             	add    esp,0x10
c000ff65:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ff6c:	83 ec 08             	sub    esp,0x8
c000ff6f:	6a 01                	push   0x1
c000ff71:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff78:	e8 a9 bf ff ff       	call   c000bf26 <File::open(FileOpenMode)>
c000ff7d:	83 c4 10             	add    esp,0x10
c000ff80:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ff87:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ff8f:	75 17                	jne    c000ffa8 <ACPI::open(int, int, void*)+0xbc>
c000ff91:	83 ec 0c             	sub    esp,0xc
c000ff94:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff9b:	e8 e4 bf ff ff       	call   c000bf84 <File::close()>
c000ffa0:	83 c4 10             	add    esp,0x10
c000ffa3:	eb 0b                	jmp    c000ffb0 <ACPI::open(int, int, void*)+0xc4>
c000ffa5:	8d 76 00             	lea    esi,[esi+0x0]
c000ffa8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ffb0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ffb8:	74 1e                	je     c000ffd8 <ACPI::open(int, int, void*)+0xec>
c000ffba:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ffc1:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffc3:	83 c0 08             	add    eax,0x8
c000ffc6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffc8:	83 ec 0c             	sub    esp,0xc
c000ffcb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ffd2:	ff d0                	call   eax
c000ffd4:	83 c4 10             	add    esp,0x10
c000ffd7:	90                   	nop
c000ffd8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ffdf:	83 f0 01             	xor    eax,0x1
c000ffe2:	84 c0                	test   al,al
c000ffe4:	74 42                	je     c0010028 <ACPI::open(int, int, void*)+0x13c>
c000ffe6:	83 ec 0c             	sub    esp,0xc
c000ffe9:	68 8c f8 01 c0       	push   0xc001f88c
c000ffee:	e8 c8 8b ff ff       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c000fff3:	83 c4 10             	add    esp,0x10
c000fff6:	83 ec 04             	sub    esp,0x4
c000fff9:	6a 0c                	push   0xc
c000fffb:	68 a7 f8 01 c0       	push   0xc001f8a7
c0010000:	68 b8 f8 01 c0       	push   0xc001f8b8
c0010005:	e8 20 1b 00 00       	call   c0011b2a <Reg::readIntWithDefault(char*, char*, int)>
c001000a:	83 c4 10             	add    esp,0x10
c001000d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0010014:	83 ec 0c             	sub    esp,0xc
c0010017:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001001e:	e8 84 a8 ff ff       	call   c000a8a7 <Virt::setupPageSwapping(int)>
c0010023:	83 c4 10             	add    esp,0x10
c0010026:	66 90                	xchg   ax,ax
c0010028:	83 ec 0c             	sub    esp,0xc
c001002b:	68 40 e9 01 c0       	push   0xc001e940
c0010030:	e8 86 8b ff ff       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c0010035:	83 c4 10             	add    esp,0x10
c0010038:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001003f:	83 ec 08             	sub    esp,0x8
c0010042:	6a 12                	push   0x12
c0010044:	50                   	push   eax
c0010045:	e8 fe cf ff ff       	call   c000d048 <getDevicesOfType(DeviceType)>
c001004a:	83 c4 0c             	add    esp,0xc
c001004d:	8d 76 00             	lea    esi,[esi+0x0]
c0010050:	83 ec 0c             	sub    esp,0xc
c0010053:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001005a:	50                   	push   eax
c001005b:	e8 dc dc 00 00       	call   c001dd3c <LinkedList<Device>::isEmpty()>
c0010060:	83 c4 10             	add    esp,0x10
c0010063:	83 f0 01             	xor    eax,0x1
c0010066:	84 c0                	test   al,al
c0010068:	0f 84 46 01 00 00    	je     c00101b4 <ACPI::open(int, int, void*)+0x2c8>
c001006e:	83 ec 0c             	sub    esp,0xc
c0010071:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010078:	50                   	push   eax
c0010079:	e8 da dc 00 00       	call   c001dd58 <LinkedList<Device>::getFirstElement()>
c001007e:	83 c4 10             	add    esp,0x10
c0010081:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0010088:	83 ec 0c             	sub    esp,0xc
c001008b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010092:	50                   	push   eax
c0010093:	e8 c8 dc 00 00       	call   c001dd60 <LinkedList<Device>::removeFirst()>
c0010098:	83 c4 10             	add    esp,0x10
c001009b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c00100a2:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00100a9:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c00100b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100b4:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00100ba:	ba 09 00 00 00       	mov    edx,0x9
c00100bf:	fc                   	cld    
c00100c0:	89 c7                	mov    edi,eax
c00100c2:	89 de                	mov    esi,ebx
c00100c4:	89 d1                	mov    ecx,edx
c00100c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00100c8:	83 ec 08             	sub    esp,0x8
c00100cb:	8d 44 24 38          	lea    eax,[esp+0x38]
c00100cf:	50                   	push   eax
c00100d0:	83 ec 24             	sub    esp,0x24
c00100d3:	89 e0                	mov    eax,esp
c00100d5:	89 c3                	mov    ebx,eax
c00100d7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00100db:	ba 09 00 00 00       	mov    edx,0x9
c00100e0:	89 df                	mov    edi,ebx
c00100e2:	89 c6                	mov    esi,eax
c00100e4:	89 d1                	mov    ecx,edx
c00100e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00100e8:	e8 f3 9c 00 00       	call   c0019de0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00100ed:	83 c4 30             	add    esp,0x30
c00100f0:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00100f7:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00100ff:	0f 84 4b ff ff ff    	je     c0010050 <ACPI::open(int, int, void*)+0x164>
c0010105:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0010110:	83 ec 0c             	sub    esp,0xc
c0010113:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001011a:	e8 42 8a ff ff       	call   c0008b61 <malloc>
c001011f:	83 c4 10             	add    esp,0x10
c0010122:	89 c3                	mov    ebx,eax
c0010124:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0010129:	83 ec 04             	sub    esp,0x4
c001012c:	50                   	push   eax
c001012d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010134:	53                   	push   ebx
c0010135:	e8 2c bd ff ff       	call   c000be66 <File::File(char const*, Process*)>
c001013a:	83 c4 10             	add    esp,0x10
c001013d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0010144:	83 ec 0c             	sub    esp,0xc
c0010147:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001014e:	e8 41 c0 ff ff       	call   c000c194 <File::exists()>
c0010153:	83 c4 10             	add    esp,0x10
c0010156:	84 c0                	test   al,al
c0010158:	74 2a                	je     c0010184 <ACPI::open(int, int, void*)+0x298>
c001015a:	83 ec 08             	sub    esp,0x8
c001015d:	6a 01                	push   0x1
c001015f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010166:	e8 37 3c 00 00       	call   c0013da2 <Thr::loadDLL(char const*, bool)>
c001016b:	83 c4 10             	add    esp,0x10
c001016e:	83 ec 08             	sub    esp,0x8
c0010171:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010178:	50                   	push   eax
c0010179:	e8 55 3e 00 00       	call   c0013fd3 <Thr::executeDLL(unsigned long, void*)>
c001017e:	83 c4 10             	add    esp,0x10
c0010181:	8d 76 00             	lea    esi,[esi+0x0]
c0010184:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001018c:	0f 84 be fe ff ff    	je     c0010050 <ACPI::open(int, int, void*)+0x164>
c0010192:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0010199:	8b 00                	mov    eax,DWORD PTR [eax]
c001019b:	83 c0 08             	add    eax,0x8
c001019e:	8b 00                	mov    eax,DWORD PTR [eax]
c00101a0:	83 ec 0c             	sub    esp,0xc
c00101a3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00101aa:	ff d0                	call   eax
c00101ac:	83 c4 10             	add    esp,0x10
c00101af:	e9 9c fe ff ff       	jmp    c0010050 <ACPI::open(int, int, void*)+0x164>
c00101b4:	83 ec 0c             	sub    esp,0xc
c00101b7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00101be:	50                   	push   eax
c00101bf:	e8 74 db 00 00       	call   c001dd38 <LinkedList<Device>::~LinkedList()>
c00101c4:	83 c4 10             	add    esp,0x10
c00101c7:	8b 1d e8 1c 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ce8
c00101cd:	83 ec 08             	sub    esp,0x8
c00101d0:	6a 01                	push   0x1
c00101d2:	68 bf f8 01 c0       	push   0xc001f8bf
c00101d7:	e8 c6 3b 00 00       	call   c0013da2 <Thr::loadDLL(char const*, bool)>
c00101dc:	83 c4 10             	add    esp,0x10
c00101df:	83 ec 08             	sub    esp,0x8
c00101e2:	53                   	push   ebx
c00101e3:	50                   	push   eax
c00101e4:	e8 ea 3d 00 00       	call   c0013fd3 <Thr::executeDLL(unsigned long, void*)>
c00101e9:	83 c4 10             	add    esp,0x10
c00101ec:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c00101f1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00101f7:	83 e0 04             	and    eax,0x4
c00101fa:	84 c0                	test   al,al
c00101fc:	0f 84 16 01 00 00    	je     c0010318 <ACPI::open(int, int, void*)+0x42c>
c0010202:	83 ec 0c             	sub    esp,0xc
c0010205:	68 dc f8 01 c0       	push   0xc001f8dc
c001020a:	e8 ac 89 ff ff       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c001020f:	83 c4 10             	add    esp,0x10
c0010212:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001021d:	83 ec 0c             	sub    esp,0xc
c0010220:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0010227:	e8 35 89 ff ff       	call   c0008b61 <malloc>
c001022c:	83 c4 10             	add    esp,0x10
c001022f:	89 c3                	mov    ebx,eax
c0010231:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0010236:	83 ec 04             	sub    esp,0x4
c0010239:	50                   	push   eax
c001023a:	68 f9 f8 01 c0       	push   0xc001f8f9
c001023f:	53                   	push   ebx
c0010240:	e8 21 bc ff ff       	call   c000be66 <File::File(char const*, Process*)>
c0010245:	83 c4 10             	add    esp,0x10
c0010248:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001024f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010257:	74 1b                	je     c0010274 <ACPI::open(int, int, void*)+0x388>
c0010259:	83 ec 0c             	sub    esp,0xc
c001025c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010263:	e8 2c bf ff ff       	call   c000c194 <File::exists()>
c0010268:	83 c4 10             	add    esp,0x10
c001026b:	84 c0                	test   al,al
c001026d:	74 05                	je     c0010274 <ACPI::open(int, int, void*)+0x388>
c001026f:	b0 01                	mov    al,0x1
c0010271:	eb 05                	jmp    c0010278 <ACPI::open(int, int, void*)+0x38c>
c0010273:	90                   	nop
c0010274:	b0 00                	mov    al,0x0
c0010276:	66 90                	xchg   ax,ax
c0010278:	84 c0                	test   al,al
c001027a:	74 28                	je     c00102a4 <ACPI::open(int, int, void*)+0x3b8>
c001027c:	83 ec 08             	sub    esp,0x8
c001027f:	6a 01                	push   0x1
c0010281:	68 f9 f8 01 c0       	push   0xc001f8f9
c0010286:	e8 17 3b 00 00       	call   c0013da2 <Thr::loadDLL(char const*, bool)>
c001028b:	83 c4 10             	add    esp,0x10
c001028e:	83 ec 08             	sub    esp,0x8
c0010291:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0010298:	50                   	push   eax
c0010299:	e8 35 3d 00 00       	call   c0013fd3 <Thr::executeDLL(unsigned long, void*)>
c001029e:	83 c4 10             	add    esp,0x10
c00102a1:	8d 76 00             	lea    esi,[esi+0x0]
c00102a4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00102ac:	74 2a                	je     c00102d8 <ACPI::open(int, int, void*)+0x3ec>
c00102ae:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00102b6:	74 20                	je     c00102d8 <ACPI::open(int, int, void*)+0x3ec>
c00102b8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00102bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00102c1:	83 c0 08             	add    eax,0x8
c00102c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00102c6:	83 ec 0c             	sub    esp,0xc
c00102c9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00102d0:	ff d0                	call   eax
c00102d2:	83 c4 10             	add    esp,0x10
c00102d5:	8d 76 00             	lea    esi,[esi+0x0]
c00102d8:	a1 e8 44 02 c0       	mov    eax,ds:0xc00244e8
c00102dd:	83 ec 08             	sub    esp,0x8
c00102e0:	68 16 f9 01 c0       	push   0xc001f916
c00102e5:	50                   	push   eax
c00102e6:	e8 31 f2 ff ff       	call   c000f51c <findDataTable(unsigned char*, char*)>
c00102eb:	83 c4 10             	add    esp,0x10
c00102ee:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00102f5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00102fd:	74 19                	je     c0010318 <ACPI::open(int, int, void*)+0x42c>
c00102ff:	83 ec 08             	sub    esp,0x8
c0010302:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0010309:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0010310:	e8 67 fb ff ff       	call   c000fe7c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010315:	83 c4 10             	add    esp,0x10
c0010318:	b8 00 00 00 00       	mov    eax,0x0
c001031d:	81 c4 70 01 00 00    	add    esp,0x170
c0010323:	5b                   	pop    ebx
c0010324:	5e                   	pop    esi
c0010325:	5f                   	pop    edi
c0010326:	c3                   	ret    
c0010327:	90                   	nop

c0010328 <CPU::close(int, int, void*)>:
c0010328:	31 c0                	xor    eax,eax
c001032a:	c3                   	ret    
c001032b:	90                   	nop

c001032c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001032c:	60                   	pusha  
c001032d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010331:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010335:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010339:	9c                   	pushf  
c001033a:	fa                   	cli    
c001033b:	0f 09                	wbinvd 
c001033d:	0f 30                	wrmsr  
c001033f:	9d                   	popf   
c0010340:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010344:	89 02                	mov    DWORD PTR [edx],eax
c0010346:	61                   	popa   
c0010347:	c3                   	ret    

c0010348 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010348:	60                   	pusha  
c0010349:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001034d:	9c                   	pushf  
c001034e:	fa                   	cli    
c001034f:	0f 09                	wbinvd 
c0010351:	31 c0                	xor    eax,eax
c0010353:	31 d2                	xor    edx,edx
c0010355:	0f 32                	rdmsr  
c0010357:	9d                   	popf   
c0010358:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001035c:	89 02                	mov    DWORD PTR [edx],eax
c001035e:	61                   	popa   
c001035f:	c3                   	ret    

c0010360 <CPU::AMD_K6_writeback(int, int, int)>:
c0010360:	56                   	push   esi
c0010361:	53                   	push   ebx
c0010362:	83 ec 10             	sub    esp,0x10
c0010365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010369:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001036e:	75 5d                	jne    c00103cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010370:	83 f8 08             	cmp    eax,0x8
c0010373:	75 09                	jne    c001037e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010375:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001037a:	7e 13                	jle    c001038f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001037c:	eb 30                	jmp    c00103ae <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001037e:	83 f8 06             	cmp    eax,0x6
c0010381:	7c 4a                	jl     c00103cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010383:	83 f8 07             	cmp    eax,0x7
c0010386:	7e 07                	jle    c001038f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010388:	83 f8 09             	cmp    eax,0x9
c001038b:	74 21                	je     c00103ae <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001038d:	eb 3e                	jmp    c00103cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001038f:	89 e6                	mov    esi,esp
c0010391:	8b 1d 0c 1d 02 c0    	mov    ebx,DWORD PTR ds:0xc0021d0c
c0010397:	56                   	push   esi
c0010398:	c1 eb 15             	shr    ebx,0x15
c001039b:	68 82 00 00 c0       	push   0xc0000082
c00103a0:	83 e3 7e             	and    ebx,0x7e
c00103a3:	e8 a0 ff ff ff       	call   c0010348 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00103a8:	56                   	push   esi
c00103a9:	6a 00                	push   0x0
c00103ab:	53                   	push   ebx
c00103ac:	eb 12                	jmp    c00103c0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00103ae:	89 e3                	mov    ebx,esp
c00103b0:	53                   	push   ebx
c00103b1:	68 82 00 00 c0       	push   0xc0000082
c00103b6:	e8 8d ff ff ff       	call   c0010348 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00103bb:	53                   	push   ebx
c00103bc:	6a 00                	push   0x0
c00103be:	6a 00                	push   0x0
c00103c0:	68 82 00 00 c0       	push   0xc0000082
c00103c5:	e8 62 ff ff ff       	call   c001032c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00103ca:	83 c4 18             	add    esp,0x18
c00103cd:	83 c4 10             	add    esp,0x10
c00103d0:	5b                   	pop    ebx
c00103d1:	5e                   	pop    esi
c00103d2:	c3                   	ret    
c00103d3:	90                   	nop

c00103d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00103d4:	55                   	push   ebp
c00103d5:	57                   	push   edi
c00103d6:	56                   	push   esi
c00103d7:	53                   	push   ebx
c00103d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00103e0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00103e4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00103e8:	39 05 70 0c 02 c0    	cmp    DWORD PTR ds:0xc0020c70,eax
c00103ee:	75 23                	jne    c0010413 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00103f0:	a1 4c 47 02 c0       	mov    eax,ds:0xc002474c
c00103f5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00103f9:	89 06                	mov    DWORD PTR [esi],eax
c00103fb:	a1 48 47 02 c0       	mov    eax,ds:0xc0024748
c0010400:	89 07                	mov    DWORD PTR [edi],eax
c0010402:	a1 44 47 02 c0       	mov    eax,ds:0xc0024744
c0010407:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001040a:	a1 40 47 02 c0       	mov    eax,ds:0xc0024740
c001040f:	89 02                	mov    DWORD PTR [edx],eax
c0010411:	eb 3f                	jmp    c0010452 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010413:	31 c9                	xor    ecx,ecx
c0010415:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010419:	0f a2                	cpuid  
c001041b:	89 06                	mov    DWORD PTR [esi],eax
c001041d:	89 1f                	mov    DWORD PTR [edi],ebx
c001041f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010423:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010426:	89 10                	mov    DWORD PTR [eax],edx
c0010428:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001042c:	a3 70 0c 02 c0       	mov    ds:0xc0020c70,eax
c0010431:	8b 06                	mov    eax,DWORD PTR [esi]
c0010433:	a3 4c 47 02 c0       	mov    ds:0xc002474c,eax
c0010438:	8b 07                	mov    eax,DWORD PTR [edi]
c001043a:	a3 48 47 02 c0       	mov    ds:0xc0024748,eax
c001043f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010442:	a3 44 47 02 c0       	mov    ds:0xc0024744,eax
c0010447:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001044b:	8b 00                	mov    eax,DWORD PTR [eax]
c001044d:	a3 40 47 02 c0       	mov    ds:0xc0024740,eax
c0010452:	5b                   	pop    ebx
c0010453:	5e                   	pop    esi
c0010454:	5f                   	pop    edi
c0010455:	5d                   	pop    ebp
c0010456:	c3                   	ret    
c0010457:	90                   	nop

c0010458 <CPU::cpuidCheckEDX(unsigned int)>:
c0010458:	83 ec 10             	sub    esp,0x10
c001045b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001045f:	50                   	push   eax
c0010460:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010464:	50                   	push   eax
c0010465:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010469:	50                   	push   eax
c001046a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001046e:	50                   	push   eax
c001046f:	6a 01                	push   0x1
c0010471:	e8 5e ff ff ff       	call   c00103d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010476:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001047a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001047e:	0f 95 c0             	setne  al
c0010481:	83 c4 24             	add    esp,0x24
c0010484:	c3                   	ret    
c0010485:	90                   	nop

c0010486 <CPU::cpuidCheckECX(unsigned int)>:
c0010486:	83 ec 10             	sub    esp,0x10
c0010489:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001048d:	50                   	push   eax
c001048e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010492:	50                   	push   eax
c0010493:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010497:	50                   	push   eax
c0010498:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001049c:	50                   	push   eax
c001049d:	6a 01                	push   0x1
c001049f:	e8 30 ff ff ff       	call   c00103d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00104a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104a8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00104ac:	0f 95 c0             	setne  al
c00104af:	83 c4 24             	add    esp,0x24
c00104b2:	c3                   	ret    
c00104b3:	90                   	nop

c00104b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00104b4:	83 ec 10             	sub    esp,0x10
c00104b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104bb:	50                   	push   eax
c00104bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104c0:	50                   	push   eax
c00104c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104c5:	50                   	push   eax
c00104c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104ca:	50                   	push   eax
c00104cb:	6a 07                	push   0x7
c00104cd:	e8 02 ff ff ff       	call   c00103d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00104d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104d6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00104da:	0f 95 c0             	setne  al
c00104dd:	83 c4 24             	add    esp,0x24
c00104e0:	c3                   	ret    
c00104e1:	90                   	nop

c00104e2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00104e2:	83 ec 10             	sub    esp,0x10
c00104e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104e9:	50                   	push   eax
c00104ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104ee:	50                   	push   eax
c00104ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104f3:	50                   	push   eax
c00104f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104f8:	50                   	push   eax
c00104f9:	6a 07                	push   0x7
c00104fb:	e8 d4 fe ff ff       	call   c00103d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010500:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010504:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010508:	0f 95 c0             	setne  al
c001050b:	83 c4 24             	add    esp,0x24
c001050e:	c3                   	ret    
c001050f:	90                   	nop

c0010510 <CPU::CPU()>:
c0010510:	83 ec 0c             	sub    esp,0xc
c0010513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010517:	83 ec 08             	sub    esp,0x8
c001051a:	68 39 fa 01 c0       	push   0xc001fa39
c001051f:	50                   	push   eax
c0010520:	e8 a3 c9 ff ff       	call   c000cec8 <Device::Device(char const*)>
c0010525:	83 c4 10             	add    esp,0x10
c0010528:	ba c0 fa 01 c0       	mov    edx,0xc001fac0
c001052d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010531:	89 10                	mov    DWORD PTR [eax],edx
c0010533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010537:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010545:	05 78 01 00 00       	add    eax,0x178
c001054a:	83 ec 0c             	sub    esp,0xc
c001054d:	50                   	push   eax
c001054e:	e8 d3 7e ff ff       	call   c0008426 <GDT::GDT()>
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055a:	05 7c 09 00 00       	add    eax,0x97c
c001055f:	83 ec 0c             	sub    esp,0xc
c0010562:	50                   	push   eax
c0010563:	e8 f4 80 ff ff       	call   c000865c <IDT::IDT()>
c0010568:	83 c4 10             	add    esp,0x10
c001056b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056f:	05 7c 11 00 00       	add    eax,0x117c
c0010574:	83 ec 0c             	sub    esp,0xc
c0010577:	50                   	push   eax
c0010578:	e8 63 9a ff ff       	call   c0009fe0 <TSS::TSS()>
c001057d:	83 c4 10             	add    esp,0x10
c0010580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010584:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001058b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0010599:	90                   	nop
c001059a:	83 c4 0c             	add    esp,0xc
c001059d:	c3                   	ret    

c001059e <CPU::displayFeatures()>:
c001059e:	c3                   	ret    
c001059f:	90                   	nop

c00105a0 <CPU::detectFeatures()>:
c00105a0:	55                   	push   ebp
c00105a1:	57                   	push   edi
c00105a2:	56                   	push   esi
c00105a3:	53                   	push   ebx
c00105a4:	83 ec 30             	sub    esp,0x30
c00105a7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00105ab:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00105b5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00105bc:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00105c2:	6a 0d                	push   0xd
c00105c4:	6a 00                	push   0x0
c00105c6:	55                   	push   ebp
c00105c7:	e8 24 ff fe ff       	call   c00004f0 <memset>
c00105cc:	83 c4 10             	add    esp,0x10
c00105cf:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c00105d4:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00105db:	0f 84 d5 05 00 00    	je     c0010bb6 <CPU::detectFeatures()+0x616>
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	89 ef                	mov    edi,ebp
c00105e6:	6a 10                	push   0x10
c00105e8:	e8 6b fe ff ff       	call   c0010458 <CPU::cpuidCheckEDX(unsigned int)>
c00105ed:	83 e0 01             	and    eax,0x1
c00105f0:	8d 14 00             	lea    edx,[eax+eax*1]
c00105f3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105f9:	83 e0 fd             	and    eax,0xfffffffd
c00105fc:	09 d0                	or     eax,edx
c00105fe:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010604:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001060b:	e8 48 fe ff ff       	call   c0010458 <CPU::cpuidCheckEDX(unsigned int)>
c0010610:	83 e0 01             	and    eax,0x1
c0010613:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001061a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010620:	83 e0 fb             	and    eax,0xfffffffb
c0010623:	09 d0                	or     eax,edx
c0010625:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001062b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010632:	e8 21 fe ff ff       	call   c0010458 <CPU::cpuidCheckEDX(unsigned int)>
c0010637:	83 e0 01             	and    eax,0x1
c001063a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010641:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010647:	83 e0 f7             	and    eax,0xfffffff7
c001064a:	09 d0                	or     eax,edx
c001064c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010652:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010659:	e8 fa fd ff ff       	call   c0010458 <CPU::cpuidCheckEDX(unsigned int)>
c001065e:	83 e0 01             	and    eax,0x1
c0010661:	c1 e0 04             	shl    eax,0x4
c0010664:	88 c2                	mov    dl,al
c0010666:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001066c:	83 e0 ef             	and    eax,0xffffffef
c001066f:	09 d0                	or     eax,edx
c0010671:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010677:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001067e:	e8 d5 fd ff ff       	call   c0010458 <CPU::cpuidCheckEDX(unsigned int)>
c0010683:	83 e0 01             	and    eax,0x1
c0010686:	c1 e0 05             	shl    eax,0x5
c0010689:	88 c2                	mov    dl,al
c001068b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010691:	83 e0 df             	and    eax,0xffffffdf
c0010694:	09 d0                	or     eax,edx
c0010696:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001069c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00106a3:	e8 b0 fd ff ff       	call   c0010458 <CPU::cpuidCheckEDX(unsigned int)>
c00106a8:	83 e0 01             	and    eax,0x1
c00106ab:	8d 14 00             	lea    edx,[eax+eax*1]
c00106ae:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106b4:	83 e0 fd             	and    eax,0xfffffffd
c00106b7:	09 d0                	or     eax,edx
c00106b9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00106bf:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00106c6:	e8 8d fd ff ff       	call   c0010458 <CPU::cpuidCheckEDX(unsigned int)>
c00106cb:	83 e0 01             	and    eax,0x1
c00106ce:	c1 e0 06             	shl    eax,0x6
c00106d1:	88 c2                	mov    dl,al
c00106d3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106d9:	83 e0 bf             	and    eax,0xffffffbf
c00106dc:	09 d0                	or     eax,edx
c00106de:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00106e4:	58                   	pop    eax
c00106e5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106e9:	50                   	push   eax
c00106ea:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106ee:	50                   	push   eax
c00106ef:	8d 74 24 28          	lea    esi,[esp+0x28]
c00106f3:	56                   	push   esi
c00106f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106f8:	50                   	push   eax
c00106f9:	6a 00                	push   0x0
c00106fb:	e8 d4 fc ff ff       	call   c00103d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010700:	b8 04 00 00 00       	mov    eax,0x4
c0010705:	89 c1                	mov    ecx,eax
c0010707:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010709:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001070f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010713:	89 c1                	mov    ecx,eax
c0010715:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010717:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001071d:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010721:	89 c1                	mov    ecx,eax
c0010723:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010725:	83 c4 18             	add    esp,0x18
c0010728:	68 48 f9 01 c0       	push   0xc001f948
c001072d:	55                   	push   ebp
c001072e:	e8 cd ff fe ff       	call   c0000700 <strcmp>
c0010733:	83 c4 10             	add    esp,0x10
c0010736:	85 c0                	test   eax,eax
c0010738:	75 0f                	jne    c0010749 <CPU::detectFeatures()+0x1a9>
c001073a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010744:	e9 22 02 00 00       	jmp    c001096b <CPU::detectFeatures()+0x3cb>
c0010749:	50                   	push   eax
c001074a:	50                   	push   eax
c001074b:	68 55 f9 01 c0       	push   0xc001f955
c0010750:	55                   	push   ebp
c0010751:	e8 aa ff fe ff       	call   c0000700 <strcmp>
c0010756:	83 c4 10             	add    esp,0x10
c0010759:	85 c0                	test   eax,eax
c001075b:	74 dd                	je     c001073a <CPU::detectFeatures()+0x19a>
c001075d:	50                   	push   eax
c001075e:	50                   	push   eax
c001075f:	68 62 f9 01 c0       	push   0xc001f962
c0010764:	55                   	push   ebp
c0010765:	e8 96 ff fe ff       	call   c0000700 <strcmp>
c001076a:	83 c4 10             	add    esp,0x10
c001076d:	85 c0                	test   eax,eax
c001076f:	74 2a                	je     c001079b <CPU::detectFeatures()+0x1fb>
c0010771:	50                   	push   eax
c0010772:	50                   	push   eax
c0010773:	68 6f f9 01 c0       	push   0xc001f96f
c0010778:	55                   	push   ebp
c0010779:	e8 82 ff fe ff       	call   c0000700 <strcmp>
c001077e:	83 c4 10             	add    esp,0x10
c0010781:	85 c0                	test   eax,eax
c0010783:	74 16                	je     c001079b <CPU::detectFeatures()+0x1fb>
c0010785:	50                   	push   eax
c0010786:	50                   	push   eax
c0010787:	68 7c f9 01 c0       	push   0xc001f97c
c001078c:	55                   	push   ebp
c001078d:	e8 6e ff fe ff       	call   c0000700 <strcmp>
c0010792:	83 c4 10             	add    esp,0x10
c0010795:	85 c0                	test   eax,eax
c0010797:	74 48                	je     c00107e1 <CPU::detectFeatures()+0x241>
c0010799:	eb 0f                	jmp    c00107aa <CPU::detectFeatures()+0x20a>
c001079b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00107a5:	e9 c1 01 00 00       	jmp    c001096b <CPU::detectFeatures()+0x3cb>
c00107aa:	50                   	push   eax
c00107ab:	50                   	push   eax
c00107ac:	68 89 f9 01 c0       	push   0xc001f989
c00107b1:	55                   	push   ebp
c00107b2:	e8 49 ff fe ff       	call   c0000700 <strcmp>
c00107b7:	83 c4 10             	add    esp,0x10
c00107ba:	85 c0                	test   eax,eax
c00107bc:	74 23                	je     c00107e1 <CPU::detectFeatures()+0x241>
c00107be:	57                   	push   edi
c00107bf:	57                   	push   edi
c00107c0:	68 96 f9 01 c0       	push   0xc001f996
c00107c5:	55                   	push   ebp
c00107c6:	e8 35 ff fe ff       	call   c0000700 <strcmp>
c00107cb:	83 c4 10             	add    esp,0x10
c00107ce:	85 c0                	test   eax,eax
c00107d0:	75 1e                	jne    c00107f0 <CPU::detectFeatures()+0x250>
c00107d2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00107dc:	e9 8a 01 00 00       	jmp    c001096b <CPU::detectFeatures()+0x3cb>
c00107e1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00107eb:	e9 7b 01 00 00       	jmp    c001096b <CPU::detectFeatures()+0x3cb>
c00107f0:	56                   	push   esi
c00107f1:	56                   	push   esi
c00107f2:	68 a3 f9 01 c0       	push   0xc001f9a3
c00107f7:	55                   	push   ebp
c00107f8:	e8 03 ff fe ff       	call   c0000700 <strcmp>
c00107fd:	83 c4 10             	add    esp,0x10
c0010800:	85 c0                	test   eax,eax
c0010802:	75 0f                	jne    c0010813 <CPU::detectFeatures()+0x273>
c0010804:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001080e:	e9 58 01 00 00       	jmp    c001096b <CPU::detectFeatures()+0x3cb>
c0010813:	51                   	push   ecx
c0010814:	51                   	push   ecx
c0010815:	68 62 f9 01 c0       	push   0xc001f962
c001081a:	55                   	push   ebp
c001081b:	e8 e0 fe fe ff       	call   c0000700 <strcmp>
c0010820:	83 c4 10             	add    esp,0x10
c0010823:	85 c0                	test   eax,eax
c0010825:	75 0f                	jne    c0010836 <CPU::detectFeatures()+0x296>
c0010827:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0010831:	e9 35 01 00 00       	jmp    c001096b <CPU::detectFeatures()+0x3cb>
c0010836:	52                   	push   edx
c0010837:	52                   	push   edx
c0010838:	68 b0 f9 01 c0       	push   0xc001f9b0
c001083d:	55                   	push   ebp
c001083e:	e8 bd fe fe ff       	call   c0000700 <strcmp>
c0010843:	83 c4 10             	add    esp,0x10
c0010846:	85 c0                	test   eax,eax
c0010848:	75 0f                	jne    c0010859 <CPU::detectFeatures()+0x2b9>
c001084a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010854:	e9 12 01 00 00       	jmp    c001096b <CPU::detectFeatures()+0x3cb>
c0010859:	50                   	push   eax
c001085a:	50                   	push   eax
c001085b:	68 bd f9 01 c0       	push   0xc001f9bd
c0010860:	55                   	push   ebp
c0010861:	e8 9a fe fe ff       	call   c0000700 <strcmp>
c0010866:	83 c4 10             	add    esp,0x10
c0010869:	85 c0                	test   eax,eax
c001086b:	75 0f                	jne    c001087c <CPU::detectFeatures()+0x2dc>
c001086d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010877:	e9 ef 00 00 00       	jmp    c001096b <CPU::detectFeatures()+0x3cb>
c001087c:	50                   	push   eax
c001087d:	50                   	push   eax
c001087e:	68 ca f9 01 c0       	push   0xc001f9ca
c0010883:	55                   	push   ebp
c0010884:	e8 77 fe fe ff       	call   c0000700 <strcmp>
c0010889:	83 c4 10             	add    esp,0x10
c001088c:	85 c0                	test   eax,eax
c001088e:	75 0f                	jne    c001089f <CPU::detectFeatures()+0x2ff>
c0010890:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001089a:	e9 cc 00 00 00       	jmp    c001096b <CPU::detectFeatures()+0x3cb>
c001089f:	50                   	push   eax
c00108a0:	50                   	push   eax
c00108a1:	68 d7 f9 01 c0       	push   0xc001f9d7
c00108a6:	55                   	push   ebp
c00108a7:	e8 54 fe fe ff       	call   c0000700 <strcmp>
c00108ac:	83 c4 10             	add    esp,0x10
c00108af:	85 c0                	test   eax,eax
c00108b1:	75 0f                	jne    c00108c2 <CPU::detectFeatures()+0x322>
c00108b3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00108bd:	e9 a9 00 00 00       	jmp    c001096b <CPU::detectFeatures()+0x3cb>
c00108c2:	50                   	push   eax
c00108c3:	50                   	push   eax
c00108c4:	68 e4 f9 01 c0       	push   0xc001f9e4
c00108c9:	55                   	push   ebp
c00108ca:	e8 31 fe fe ff       	call   c0000700 <strcmp>
c00108cf:	83 c4 10             	add    esp,0x10
c00108d2:	85 c0                	test   eax,eax
c00108d4:	75 0f                	jne    c00108e5 <CPU::detectFeatures()+0x345>
c00108d6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00108e0:	e9 86 00 00 00       	jmp    c001096b <CPU::detectFeatures()+0x3cb>
c00108e5:	50                   	push   eax
c00108e6:	50                   	push   eax
c00108e7:	68 f1 f9 01 c0       	push   0xc001f9f1
c00108ec:	55                   	push   ebp
c00108ed:	e8 0e fe fe ff       	call   c0000700 <strcmp>
c00108f2:	83 c4 10             	add    esp,0x10
c00108f5:	85 c0                	test   eax,eax
c00108f7:	75 0c                	jne    c0010905 <CPU::detectFeatures()+0x365>
c00108f9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010903:	eb 66                	jmp    c001096b <CPU::detectFeatures()+0x3cb>
c0010905:	50                   	push   eax
c0010906:	50                   	push   eax
c0010907:	68 fe f9 01 c0       	push   0xc001f9fe
c001090c:	55                   	push   ebp
c001090d:	e8 ee fd fe ff       	call   c0000700 <strcmp>
c0010912:	83 c4 10             	add    esp,0x10
c0010915:	85 c0                	test   eax,eax
c0010917:	75 0c                	jne    c0010925 <CPU::detectFeatures()+0x385>
c0010919:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010923:	eb 46                	jmp    c001096b <CPU::detectFeatures()+0x3cb>
c0010925:	57                   	push   edi
c0010926:	57                   	push   edi
c0010927:	68 0b fa 01 c0       	push   0xc001fa0b
c001092c:	55                   	push   ebp
c001092d:	e8 ce fd fe ff       	call   c0000700 <strcmp>
c0010932:	83 c4 10             	add    esp,0x10
c0010935:	85 c0                	test   eax,eax
c0010937:	74 e0                	je     c0010919 <CPU::detectFeatures()+0x379>
c0010939:	56                   	push   esi
c001093a:	56                   	push   esi
c001093b:	68 18 fa 01 c0       	push   0xc001fa18
c0010940:	55                   	push   ebp
c0010941:	e8 ba fd fe ff       	call   c0000700 <strcmp>
c0010946:	83 c4 10             	add    esp,0x10
c0010949:	85 c0                	test   eax,eax
c001094b:	74 cc                	je     c0010919 <CPU::detectFeatures()+0x379>
c001094d:	51                   	push   ecx
c001094e:	51                   	push   ecx
c001094f:	68 25 fa 01 c0       	push   0xc001fa25
c0010954:	55                   	push   ebp
c0010955:	e8 a6 fd fe ff       	call   c0000700 <strcmp>
c001095a:	83 c4 10             	add    esp,0x10
c001095d:	85 c0                	test   eax,eax
c001095f:	74 b8                	je     c0010919 <CPU::detectFeatures()+0x379>
c0010961:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001096b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010970:	0f 86 be 00 00 00    	jbe    c0010a34 <CPU::detectFeatures()+0x494>
c0010976:	83 ec 0c             	sub    esp,0xc
c0010979:	68 80 00 00 00       	push   0x80
c001097e:	e8 31 fb ff ff       	call   c00104b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010983:	83 e0 01             	and    eax,0x1
c0010986:	c1 e0 06             	shl    eax,0x6
c0010989:	88 c2                	mov    dl,al
c001098b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010991:	83 e0 bf             	and    eax,0xffffffbf
c0010994:	09 d0                	or     eax,edx
c0010996:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001099c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00109a3:	e8 0c fb ff ff       	call   c00104b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00109a8:	83 e0 01             	and    eax,0x1
c00109ab:	c1 e0 04             	shl    eax,0x4
c00109ae:	88 c2                	mov    dl,al
c00109b0:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00109b6:	83 e0 ef             	and    eax,0xffffffef
c00109b9:	09 d0                	or     eax,edx
c00109bb:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00109c1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00109c8:	e8 e7 fa ff ff       	call   c00104b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00109cd:	c1 e0 07             	shl    eax,0x7
c00109d0:	88 c2                	mov    dl,al
c00109d2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00109d8:	83 e0 7f             	and    eax,0x7f
c00109db:	09 d0                	or     eax,edx
c00109dd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00109e3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00109ea:	e8 f3 fa ff ff       	call   c00104e2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00109ef:	83 e0 01             	and    eax,0x1
c00109f2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00109f9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00109ff:	83 e0 f7             	and    eax,0xfffffff7
c0010a02:	09 d0                	or     eax,edx
c0010a04:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a0a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010a11:	e8 cc fa ff ff       	call   c00104e2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010a16:	83 c4 10             	add    esp,0x10
c0010a19:	83 e0 01             	and    eax,0x1
c0010a1c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010a23:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a29:	83 e0 fb             	and    eax,0xfffffffb
c0010a2c:	09 d0                	or     eax,edx
c0010a2e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010a34:	83 ec 0c             	sub    esp,0xc
c0010a37:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a3b:	50                   	push   eax
c0010a3c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a40:	50                   	push   eax
c0010a41:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010a45:	56                   	push   esi
c0010a46:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a4a:	50                   	push   eax
c0010a4b:	6a 01                	push   0x1
c0010a4d:	e8 82 f9 ff ff       	call   c00103d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a52:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0010a56:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0010a5c:	88 ca                	mov    dl,cl
c0010a5e:	83 e0 f0             	and    eax,0xfffffff0
c0010a61:	83 e2 0f             	and    edx,0xf
c0010a64:	09 d0                	or     eax,edx
c0010a66:	88 ca                	mov    dl,cl
c0010a68:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0010a6e:	c0 ea 04             	shr    dl,0x4
c0010a71:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0010a75:	0f b6 c2             	movzx  eax,dl
c0010a78:	83 c4 20             	add    esp,0x20
c0010a7b:	c1 e0 06             	shl    eax,0x6
c0010a7e:	89 c7                	mov    edi,eax
c0010a80:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010a86:	66 25 3f c0          	and    ax,0xc03f
c0010a8a:	09 f8                	or     eax,edi
c0010a8c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0010a93:	89 c8                	mov    eax,ecx
c0010a95:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0010a9c:	c1 e8 08             	shr    eax,0x8
c0010a9f:	83 e5 3f             	and    ebp,0x3f
c0010aa2:	83 e0 0f             	and    eax,0xf
c0010aa5:	89 c7                	mov    edi,eax
c0010aa7:	c1 e7 06             	shl    edi,0x6
c0010aaa:	09 ef                	or     edi,ebp
c0010aac:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0010ab3:	89 fa                	mov    edx,edi
c0010ab5:	83 e5 c0             	and    ebp,0xffffffc0
c0010ab8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010abe:	88 c2                	mov    dl,al
c0010ac0:	c0 ea 02             	shr    dl,0x2
c0010ac3:	89 d7                	mov    edi,edx
c0010ac5:	09 ef                	or     edi,ebp
c0010ac7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010acd:	89 fa                	mov    edx,edi
c0010acf:	83 e5 cf             	and    ebp,0xffffffcf
c0010ad2:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0010ad8:	89 cf                	mov    edi,ecx
c0010ada:	c1 ef 0c             	shr    edi,0xc
c0010add:	83 e7 03             	and    edi,0x3
c0010ae0:	c1 e7 04             	shl    edi,0x4
c0010ae3:	09 ef                	or     edi,ebp
c0010ae5:	3c 06                	cmp    al,0x6
c0010ae7:	89 fa                	mov    edx,edi
c0010ae9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010aef:	74 04                	je     c0010af5 <CPU::detectFeatures()+0x555>
c0010af1:	3c 0f                	cmp    al,0xf
c0010af3:	75 5c                	jne    c0010b51 <CPU::detectFeatures()+0x5b1>
c0010af5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0010af9:	89 cf                	mov    edi,ecx
c0010afb:	c1 ef 10             	shr    edi,0x10
c0010afe:	c1 e7 04             	shl    edi,0x4
c0010b01:	09 fa                	or     edx,edi
c0010b03:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0010b09:	0f b6 d2             	movzx  edx,dl
c0010b0c:	66 81 e7 3f c0       	and    di,0xc03f
c0010b11:	c1 e2 06             	shl    edx,0x6
c0010b14:	09 fa                	or     edx,edi
c0010b16:	3c 0f                	cmp    al,0xf
c0010b18:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010b1f:	75 30                	jne    c0010b51 <CPU::detectFeatures()+0x5b1>
c0010b21:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0010b27:	c1 e9 14             	shr    ecx,0x14
c0010b2a:	83 e0 3f             	and    eax,0x3f
c0010b2d:	83 c1 0f             	add    ecx,0xf
c0010b30:	88 ca                	mov    dl,cl
c0010b32:	c0 e9 02             	shr    cl,0x2
c0010b35:	c1 e2 06             	shl    edx,0x6
c0010b38:	09 d0                	or     eax,edx
c0010b3a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0010b40:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0010b46:	83 e0 c0             	and    eax,0xffffffc0
c0010b49:	09 c1                	or     ecx,eax
c0010b4b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010b51:	83 ec 0c             	sub    esp,0xc
c0010b54:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c0010b5b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010b5f:	50                   	push   eax
c0010b60:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010b64:	55                   	push   ebp
c0010b65:	56                   	push   esi
c0010b66:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010b6a:	57                   	push   edi
c0010b6b:	68 00 00 00 80       	push   0x80000000
c0010b70:	e8 5f f8 ff ff       	call   c00103d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b75:	83 c4 20             	add    esp,0x20
c0010b78:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010b80:	76 22                	jbe    c0010ba4 <CPU::detectFeatures()+0x604>
c0010b82:	83 ec 0c             	sub    esp,0xc
c0010b85:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010b89:	50                   	push   eax
c0010b8a:	55                   	push   ebp
c0010b8b:	56                   	push   esi
c0010b8c:	57                   	push   edi
c0010b8d:	68 01 00 00 80       	push   0x80000001
c0010b92:	e8 3d f8 ff ff       	call   c00103d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b97:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010ba1:	83 c4 20             	add    esp,0x20
c0010ba4:	52                   	push   edx
c0010ba5:	52                   	push   edx
c0010ba6:	68 31 fa 01 c0       	push   0xc001fa31
c0010bab:	53                   	push   ebx
c0010bac:	e8 09 c3 ff ff       	call   c000ceba <Device::setName(char const*)>
c0010bb1:	83 c4 10             	add    esp,0x10
c0010bb4:	eb 67                	jmp    c0010c1d <CPU::detectFeatures()+0x67d>
c0010bb6:	50                   	push   eax
c0010bb7:	50                   	push   eax
c0010bb8:	68 96 f9 01 c0       	push   0xc001f996
c0010bbd:	55                   	push   ebp
c0010bbe:	e8 5d fa fe ff       	call   c0000620 <strcpy>
c0010bc3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010bcd:	e8 11 f6 fe ff       	call   c00001e3 <is486>
c0010bd2:	83 c4 10             	add    esp,0x10
c0010bd5:	85 c0                	test   eax,eax
c0010bd7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010bdd:	74 1d                	je     c0010bfc <CPU::detectFeatures()+0x65c>
c0010bdf:	83 c8 07             	or     eax,0x7
c0010be2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010be8:	0f 20 c0             	mov    eax,cr0
c0010beb:	83 e0 14             	and    eax,0x14
c0010bee:	83 f8 04             	cmp    eax,0x4
c0010bf1:	75 0e                	jne    c0010c01 <CPU::detectFeatures()+0x661>
c0010bf3:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c0010bfa:	eb 21                	jmp    c0010c1d <CPU::detectFeatures()+0x67d>
c0010bfc:	83 e0 f8             	and    eax,0xfffffff8
c0010bff:	eb e1                	jmp    c0010be2 <CPU::detectFeatures()+0x642>
c0010c01:	e8 b8 f5 fe ff       	call   c00001be <hasLegacyFPU>
c0010c06:	83 e0 01             	and    eax,0x1
c0010c09:	8d 14 00             	lea    edx,[eax+eax*1]
c0010c0c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010c12:	83 e0 fd             	and    eax,0xfffffffd
c0010c15:	09 d0                	or     eax,edx
c0010c17:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010c1d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010c24:	74 0e                	je     c0010c34 <CPU::detectFeatures()+0x694>
c0010c26:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c0010c2b:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c0010c32:	eb 20                	jmp    c0010c54 <CPU::detectFeatures()+0x6b4>
c0010c34:	e8 85 f5 fe ff       	call   c00001be <hasLegacyFPU>
c0010c39:	83 e0 01             	and    eax,0x1
c0010c3c:	8d 14 00             	lea    edx,[eax+eax*1]
c0010c3f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010c45:	83 e0 fd             	and    eax,0xfffffffd
c0010c48:	09 d0                	or     eax,edx
c0010c4a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010c50:	a8 02                	test   al,0x2
c0010c52:	75 d2                	jne    c0010c26 <CPU::detectFeatures()+0x686>
c0010c54:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010c5b:	83 c4 2c             	add    esp,0x2c
c0010c5e:	5b                   	pop    ebx
c0010c5f:	5e                   	pop    esi
c0010c60:	5f                   	pop    edi
c0010c61:	5d                   	pop    ebp
c0010c62:	c3                   	ret    
c0010c63:	90                   	nop

c0010c64 <CPU::setupSMEP()>:
c0010c64:	0f 20 e0             	mov    eax,cr4
c0010c67:	0d 00 00 10 00       	or     eax,0x100000
c0010c6c:	0f 22 e0             	mov    cr4,eax
c0010c6f:	c3                   	ret    

c0010c70 <CPU::setupUMIP()>:
c0010c70:	0f 20 e0             	mov    eax,cr4
c0010c73:	80 cc 08             	or     ah,0x8
c0010c76:	0f 22 e0             	mov    cr4,eax
c0010c79:	c3                   	ret    

c0010c7a <CPU::setupTSC()>:
c0010c7a:	0f 20 e0             	mov    eax,cr4
c0010c7d:	83 c8 04             	or     eax,0x4
c0010c80:	0f 22 e0             	mov    cr4,eax
c0010c83:	c3                   	ret    

c0010c84 <CPU::setupLargePages()>:
c0010c84:	0f 20 e0             	mov    eax,cr4
c0010c87:	83 c8 10             	or     eax,0x10
c0010c8a:	0f 22 e0             	mov    cr4,eax
c0010c8d:	c3                   	ret    

c0010c8e <CPU::setupPAT()>:
c0010c8e:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c0010c93:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010c9a:	74 2c                	je     c0010cc8 <CPU::setupPAT()+0x3a>
c0010c9c:	53                   	push   ebx
c0010c9d:	83 ec 10             	sub    esp,0x10
c0010ca0:	68 77 02 00 00       	push   0x277
c0010ca5:	50                   	push   eax
c0010ca6:	e8 f3 74 ff ff       	call   c000819e <Computer::rdmsr(unsigned int)>
c0010cab:	83 e2 f8             	and    edx,0xfffffff8
c0010cae:	83 ca 01             	or     edx,0x1
c0010cb1:	52                   	push   edx
c0010cb2:	50                   	push   eax
c0010cb3:	68 77 02 00 00       	push   0x277
c0010cb8:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0010cbe:	e8 07 75 ff ff       	call   c00081ca <Computer::wrmsr(unsigned int, unsigned long long)>
c0010cc3:	83 c4 28             	add    esp,0x28
c0010cc6:	5b                   	pop    ebx
c0010cc7:	c3                   	ret    
c0010cc8:	c3                   	ret    
c0010cc9:	90                   	nop

c0010cca <CPU::setupMTRR()>:
c0010cca:	c3                   	ret    
c0010ccb:	90                   	nop

c0010ccc <CPU::setupGlobalPages()>:
c0010ccc:	0f 20 e0             	mov    eax,cr4
c0010ccf:	0c 80                	or     al,0x80
c0010cd1:	0f 22 e0             	mov    cr4,eax
c0010cd4:	c3                   	ret    
c0010cd5:	90                   	nop

c0010cd6 <CPU::allowUsermodeDataAccess()>:
c0010cd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cda:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010ce1:	74 03                	je     c0010ce6 <CPU::allowUsermodeDataAccess()+0x10>
c0010ce3:	0f 01 cb             	stac   
c0010ce6:	c3                   	ret    
c0010ce7:	90                   	nop

c0010ce8 <CPU::prohibitUsermodeDataAccess()>:
c0010ce8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cec:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010cf3:	74 03                	je     c0010cf8 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010cf5:	0f 01 ca             	clac   
c0010cf8:	c3                   	ret    
c0010cf9:	90                   	nop

c0010cfa <CPU::setupSMAP()>:
c0010cfa:	0f 20 e0             	mov    eax,cr4
c0010cfd:	0d 00 00 20 00       	or     eax,0x200000
c0010d02:	0f 22 e0             	mov    cr4,eax
c0010d05:	eb e1                	jmp    c0010ce8 <CPU::prohibitUsermodeDataAccess()>
c0010d07:	90                   	nop

c0010d08 <CPU::setupFeatures()>:
c0010d08:	53                   	push   ebx
c0010d09:	83 ec 08             	sub    esp,0x8
c0010d0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d10:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010d17:	74 18                	je     c0010d31 <CPU::setupFeatures()+0x29>
c0010d19:	83 ec 0c             	sub    esp,0xc
c0010d1c:	68 3d fa 01 c0       	push   0xc001fa3d
c0010d21:	e8 ca ab ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0010d26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d29:	e8 42 ff ff ff       	call   c0010c70 <CPU::setupUMIP()>
c0010d2e:	83 c4 10             	add    esp,0x10
c0010d31:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010d38:	74 18                	je     c0010d52 <CPU::setupFeatures()+0x4a>
c0010d3a:	83 ec 0c             	sub    esp,0xc
c0010d3d:	68 47 fa 01 c0       	push   0xc001fa47
c0010d42:	e8 a9 ab ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0010d47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d4a:	e8 2b ff ff ff       	call   c0010c7a <CPU::setupTSC()>
c0010d4f:	83 c4 10             	add    esp,0x10
c0010d52:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010d59:	74 18                	je     c0010d73 <CPU::setupFeatures()+0x6b>
c0010d5b:	83 ec 0c             	sub    esp,0xc
c0010d5e:	68 50 fa 01 c0       	push   0xc001fa50
c0010d63:	e8 88 ab ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0010d68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d6b:	e8 14 ff ff ff       	call   c0010c84 <CPU::setupLargePages()>
c0010d70:	83 c4 10             	add    esp,0x10
c0010d73:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010d7a:	74 18                	je     c0010d94 <CPU::setupFeatures()+0x8c>
c0010d7c:	83 ec 0c             	sub    esp,0xc
c0010d7f:	68 59 fa 01 c0       	push   0xc001fa59
c0010d84:	e8 67 ab ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0010d89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d8c:	e8 3b ff ff ff       	call   c0010ccc <CPU::setupGlobalPages()>
c0010d91:	83 c4 10             	add    esp,0x10
c0010d94:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010d9b:	74 18                	je     c0010db5 <CPU::setupFeatures()+0xad>
c0010d9d:	83 ec 0c             	sub    esp,0xc
c0010da0:	68 6b fa 01 c0       	push   0xc001fa6b
c0010da5:	e8 46 ab ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0010daa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dad:	e8 dc fe ff ff       	call   c0010c8e <CPU::setupPAT()>
c0010db2:	83 c4 10             	add    esp,0x10
c0010db5:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010dbc:	74 11                	je     c0010dcf <CPU::setupFeatures()+0xc7>
c0010dbe:	c7 44 24 10 74 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fa74
c0010dc6:	83 c4 08             	add    esp,0x8
c0010dc9:	5b                   	pop    ebx
c0010dca:	e9 21 ab ff ff       	jmp    c000b8f0 <Dbg::kprintf(char const*, ...)>
c0010dcf:	83 c4 08             	add    esp,0x8
c0010dd2:	5b                   	pop    ebx
c0010dd3:	c3                   	ret    

c0010dd4 <CPU::open(int, int, void*)>:
c0010dd4:	57                   	push   edi
c0010dd5:	56                   	push   esi
c0010dd6:	53                   	push   ebx
c0010dd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ddb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010ddf:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010de5:	83 ec 0c             	sub    esp,0xc
c0010de8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010dee:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0010df4:	50                   	push   eax
c0010df5:	e8 8e 76 ff ff       	call   c0008488 <GDT::setup()>
c0010dfa:	83 c4 0c             	add    esp,0xc
c0010dfd:	6a 00                	push   0x0
c0010dff:	68 ef be ad de       	push   0xdeadbeef
c0010e04:	57                   	push   edi
c0010e05:	e8 1a 92 ff ff       	call   c000a024 <TSS::setup(unsigned long, unsigned long)>
c0010e0a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e0d:	e8 f2 91 ff ff       	call   c000a004 <TSS::flush()>
c0010e12:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010e18:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e1b:	e8 b2 78 ff ff       	call   c00086d2 <IDT::setup()>
c0010e20:	b8 00 04 00 00       	mov    eax,0x400
c0010e25:	0f 23 f8             	mov    db7,eax
c0010e28:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010e32:	e8 f7 80 ff ff       	call   c0008f2e <Phys::allocatePage()>
c0010e37:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010e3d:	89 30                	mov    DWORD PTR [eax],esi
c0010e3f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010e45:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010e48:	58                   	pop    eax
c0010e49:	5a                   	pop    edx
c0010e4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010e50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e54:	e8 b5 a1 ff ff       	call   c000b00e <VAS::setCPUSpecific(unsigned long)>
c0010e59:	c7 04 24 7e fa 01 c0 	mov    DWORD PTR [esp],0xc001fa7e
c0010e60:	e8 56 7d ff ff       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c0010e65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e68:	e8 33 f7 ff ff       	call   c00105a0 <CPU::detectFeatures()>
c0010e6d:	c7 04 24 a1 fa 01 c0 	mov    DWORD PTR [esp],0xc001faa1
c0010e74:	e8 42 7d ff ff       	call   c0008bbb <Krnl::setBootMessage(char const*)>
c0010e79:	e8 b8 56 00 00       	call   c0016536 <HalInitialise()>
c0010e7e:	a1 00 1d 02 c0       	mov    eax,ds:0xc0021d00
c0010e83:	83 e0 10             	and    eax,0x10
c0010e86:	83 f8 01             	cmp    eax,0x1
c0010e89:	19 c0                	sbb    eax,eax
c0010e8b:	83 e0 46             	and    eax,0x46
c0010e8e:	83 c0 1e             	add    eax,0x1e
c0010e91:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e94:	e8 f0 d6 ff ff       	call   c000e589 <setupTimer(int)>
c0010e99:	83 c4 10             	add    esp,0x10
c0010e9c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010ea2:	f6 05 00 1d 02 c0 20 	test   BYTE PTR ds:0xc0021d00,0x20
c0010ea9:	74 0c                	je     c0010eb7 <CPU::open(int, int, void*)+0xe3>
c0010eab:	83 ec 0c             	sub    esp,0xc
c0010eae:	53                   	push   ebx
c0010eaf:	e8 54 fe ff ff       	call   c0010d08 <CPU::setupFeatures()>
c0010eb4:	83 c4 10             	add    esp,0x10
c0010eb7:	5b                   	pop    ebx
c0010eb8:	31 c0                	xor    eax,eax
c0010eba:	5e                   	pop    esi
c0010ebb:	5f                   	pop    edi
c0010ebc:	c3                   	ret    
c0010ebd:	90                   	nop

c0010ebe <EnvVarContainer::getEnv(char const*)>:
c0010ebe:	57                   	push   edi
c0010ebf:	56                   	push   esi
c0010ec0:	53                   	push   ebx
c0010ec1:	31 db                	xor    ebx,ebx
c0010ec3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ec7:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010ec9:	7e 2b                	jle    c0010ef6 <EnvVarContainer::getEnv(char const*)+0x38>
c0010ecb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010ed2:	50                   	push   eax
c0010ed3:	50                   	push   eax
c0010ed4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ed7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010eda:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ede:	e8 1d f8 fe ff       	call   c0000700 <strcmp>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	85 c0                	test   eax,eax
c0010ee8:	75 09                	jne    c0010ef3 <EnvVarContainer::getEnv(char const*)+0x35>
c0010eea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010eed:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010ef1:	eb 05                	jmp    c0010ef8 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010ef3:	43                   	inc    ebx
c0010ef4:	eb d1                	jmp    c0010ec7 <EnvVarContainer::getEnv(char const*)+0x9>
c0010ef6:	31 c0                	xor    eax,eax
c0010ef8:	5b                   	pop    ebx
c0010ef9:	5e                   	pop    esi
c0010efa:	5f                   	pop    edi
c0010efb:	c3                   	ret    

c0010efc <EnvVarContainer::setEnv(char const*, char const*)>:
c0010efc:	55                   	push   ebp
c0010efd:	57                   	push   edi
c0010efe:	56                   	push   esi
c0010eff:	53                   	push   ebx
c0010f00:	83 ec 28             	sub    esp,0x28
c0010f03:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010f07:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010f0b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010f0f:	56                   	push   esi
c0010f10:	e8 4b f6 fe ff       	call   c0000560 <strlen>
c0010f15:	40                   	inc    eax
c0010f16:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f19:	e8 43 7c ff ff       	call   c0008b61 <malloc>
c0010f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010f25:	e8 36 f6 fe ff       	call   c0000560 <strlen>
c0010f2a:	40                   	inc    eax
c0010f2b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f2e:	e8 2e 7c ff ff       	call   c0008b61 <malloc>
c0010f33:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f36:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f3a:	e8 21 f6 fe ff       	call   c0000560 <strlen>
c0010f3f:	83 c4 0c             	add    esp,0xc
c0010f42:	40                   	inc    eax
c0010f43:	50                   	push   eax
c0010f44:	6a 00                	push   0x0
c0010f46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f4a:	e8 a1 f5 fe ff       	call   c00004f0 <memset>
c0010f4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f52:	e8 09 f6 fe ff       	call   c0000560 <strlen>
c0010f57:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010f5b:	8d 48 01             	lea    ecx,[eax+0x1]
c0010f5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f63:	89 de                	mov    esi,ebx
c0010f65:	e8 f6 f5 fe ff       	call   c0000560 <strlen>
c0010f6a:	83 c4 0c             	add    esp,0xc
c0010f6d:	40                   	inc    eax
c0010f6e:	50                   	push   eax
c0010f6f:	6a 00                	push   0x0
c0010f71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f75:	e8 76 f5 fe ff       	call   c00004f0 <memset>
c0010f7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f7d:	e8 de f5 fe ff       	call   c0000560 <strlen>
c0010f82:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010f86:	8d 48 01             	lea    ecx,[eax+0x1]
c0010f89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f8b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f8e:	40                   	inc    eax
c0010f8f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010f92:	c1 e0 03             	shl    eax,0x3
c0010f95:	5a                   	pop    edx
c0010f96:	59                   	pop    ecx
c0010f97:	50                   	push   eax
c0010f98:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010f9b:	e8 ad 7b ff ff       	call   c0008b4d <realloc>
c0010fa0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010fa4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010fa7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010faa:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010fae:	b9 08 00 00 00       	mov    ecx,0x8
c0010fb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fb5:	83 c4 2c             	add    esp,0x2c
c0010fb8:	5b                   	pop    ebx
c0010fb9:	5e                   	pop    esi
c0010fba:	5f                   	pop    edi
c0010fbb:	5d                   	pop    ebp
c0010fbc:	c3                   	ret    
c0010fbd:	90                   	nop

c0010fbe <EnvVarContainer::deleteEnv(char const*)>:
c0010fbe:	c3                   	ret    
c0010fbf:	90                   	nop

c0010fc0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010fc0:	55                   	push   ebp
c0010fc1:	57                   	push   edi
c0010fc2:	56                   	push   esi
c0010fc3:	53                   	push   ebx
c0010fc4:	81 ec 38 01 00 00    	sub    esp,0x138
c0010fca:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010fd1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010fd8:	68 14 01 00 00       	push   0x114
c0010fdd:	e8 7f 7b ff ff       	call   c0008b61 <malloc>
c0010fe2:	83 c4 0c             	add    esp,0xc
c0010fe5:	89 c3                	mov    ebx,eax
c0010fe7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010fea:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010ff1:	50                   	push   eax
c0010ff2:	e8 6f ae ff ff       	call   c000be66 <File::File(char const*, Process*)>
c0010ff7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ffa:	e8 95 b1 ff ff       	call   c000c194 <File::exists()>
c0010fff:	83 c4 10             	add    esp,0x10
c0011002:	84 c0                	test   al,al
c0011004:	75 31                	jne    c0011037 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0011006:	50                   	push   eax
c0011007:	50                   	push   eax
c0011008:	6a 12                	push   0x12
c001100a:	53                   	push   ebx
c001100b:	e8 16 af ff ff       	call   c000bf26 <File::open(FileOpenMode)>
c0011010:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011012:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0011015:	89 34 24             	mov    DWORD PTR [esp],esi
c0011018:	e8 43 f5 fe ff       	call   c0000560 <strlen>
c001101d:	5a                   	pop    edx
c001101e:	31 d2                	xor    edx,edx
c0011020:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0011024:	51                   	push   ecx
c0011025:	56                   	push   esi
c0011026:	52                   	push   edx
c0011027:	50                   	push   eax
c0011028:	53                   	push   ebx
c0011029:	ff d7                	call   edi
c001102b:	83 c4 14             	add    esp,0x14
c001102e:	53                   	push   ebx
c001102f:	e8 50 af ff ff       	call   c000bf84 <File::close()>
c0011034:	83 c4 10             	add    esp,0x10
c0011037:	56                   	push   esi
c0011038:	31 f6                	xor    esi,esi
c001103a:	68 00 01 00 00       	push   0x100
c001103f:	6a 00                	push   0x0
c0011041:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011045:	50                   	push   eax
c0011046:	e8 a5 f4 fe ff       	call   c00004f0 <memset>
c001104b:	5f                   	pop    edi
c001104c:	58                   	pop    eax
c001104d:	6a 01                	push   0x1
c001104f:	53                   	push   ebx
c0011050:	e8 d1 ae ff ff       	call   c000bf26 <File::open(FileOpenMode)>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011060:	83 ec 0c             	sub    esp,0xc
c0011063:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011065:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0011069:	51                   	push   ecx
c001106a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001106e:	52                   	push   edx
c001106f:	6a 00                	push   0x0
c0011071:	6a 01                	push   0x1
c0011073:	53                   	push   ebx
c0011074:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011077:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001107b:	83 c4 20             	add    esp,0x20
c001107e:	3c 0d                	cmp    al,0xd
c0011080:	0f 84 09 01 00 00    	je     c001118f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0011086:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001108b:	0f 84 ef 00 00 00    	je     c0011180 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0011091:	3c 0a                	cmp    al,0xa
c0011093:	74 13                	je     c00110a8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0011095:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001109a:	74 0c                	je     c00110a8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001109c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00110a2:	0f 8e d8 00 00 00    	jle    c0011180 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00110a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110ac:	83 ec 0c             	sub    esp,0xc
c00110af:	8d 78 01             	lea    edi,[eax+0x1]
c00110b2:	57                   	push   edi
c00110b3:	e8 a9 7a ff ff       	call   c0008b61 <malloc>
c00110b8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00110bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00110c0:	8d 56 04             	lea    edx,[esi+0x4]
c00110c3:	89 14 24             	mov    DWORD PTR [esp],edx
c00110c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00110ca:	e8 92 7a ff ff       	call   c0008b61 <malloc>
c00110cf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00110d3:	83 c4 0c             	add    esp,0xc
c00110d6:	57                   	push   edi
c00110d7:	6a 00                	push   0x0
c00110d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00110dd:	e8 0e f4 fe ff       	call   c00004f0 <memset>
c00110e2:	8d 74 24 30          	lea    esi,[esp+0x30]
c00110e6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00110ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00110ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110f0:	83 c4 0c             	add    esp,0xc
c00110f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00110f7:	52                   	push   edx
c00110f8:	6a 00                	push   0x0
c00110fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00110fe:	e8 ed f3 fe ff       	call   c00004f0 <memset>
c0011103:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011107:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001110b:	89 34 24             	mov    DWORD PTR [esp],esi
c001110e:	e8 4d f4 fe ff       	call   c0000560 <strlen>
c0011113:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011117:	89 c1                	mov    ecx,eax
c0011119:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001111b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001111e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0011121:	40                   	inc    eax
c0011122:	83 c4 10             	add    esp,0x10
c0011125:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011128:	85 d2                	test   edx,edx
c001112a:	75 0c                	jne    c0011138 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001112c:	83 ec 0c             	sub    esp,0xc
c001112f:	6a 08                	push   0x8
c0011131:	e8 2b 7a ff ff       	call   c0008b61 <malloc>
c0011136:	eb 0c                	jmp    c0011144 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0011138:	c1 e0 03             	shl    eax,0x3
c001113b:	51                   	push   ecx
c001113c:	51                   	push   ecx
c001113d:	50                   	push   eax
c001113e:	52                   	push   edx
c001113f:	e8 09 7a ff ff       	call   c0008b4d <realloc>
c0011144:	83 c4 10             	add    esp,0x10
c0011147:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001114a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001114d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0011150:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011154:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011158:	b9 08 00 00 00       	mov    ecx,0x8
c001115d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001115f:	31 f6                	xor    esi,esi
c0011161:	50                   	push   eax
c0011162:	68 00 01 00 00       	push   0x100
c0011167:	6a 00                	push   0x0
c0011169:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001116d:	50                   	push   eax
c001116e:	e8 7d f3 fe ff       	call   c00004f0 <memset>
c0011173:	83 c4 10             	add    esp,0x10
c0011176:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001117e:	eb 0f                	jmp    c001118f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0011180:	3c 3d                	cmp    al,0x3d
c0011182:	74 07                	je     c001118b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0011184:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0011188:	46                   	inc    esi
c0011189:	eb 04                	jmp    c001118f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001118b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001118f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011194:	0f 85 c6 fe ff ff    	jne    c0011060 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001119a:	81 c4 2c 01 00 00    	add    esp,0x12c
c00111a0:	5b                   	pop    ebx
c00111a1:	5e                   	pop    esi
c00111a2:	5f                   	pop    edi
c00111a3:	5d                   	pop    ebp
c00111a4:	c3                   	ret    
c00111a5:	90                   	nop

c00111a6 <EnvVarContainer::__loadSystem()>:
c00111a6:	83 ec 10             	sub    esp,0x10
c00111a9:	68 80 0c 02 c0       	push   0xc0020c80
c00111ae:	68 e4 fa 01 c0       	push   0xc001fae4
c00111b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111b7:	e8 04 fe ff ff       	call   c0010fc0 <EnvVarContainer::loadFrom(char const*, char const*)>
c00111bc:	83 c4 1c             	add    esp,0x1c
c00111bf:	c3                   	ret    

c00111c0 <EnvVarContainer::__loadUser()>:
c00111c0:	c3                   	ret    
c00111c1:	90                   	nop

c00111c2 <EnvVarContainer::EnvVarContainer(Process*)>:
c00111c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00111cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00111d4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00111d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00111e2:	90                   	nop
c00111e3:	c3                   	ret    

c00111e4 <EnvVarContainer::~EnvVarContainer()>:
c00111e4:	83 ec 0c             	sub    esp,0xc
c00111e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ee:	85 c0                	test   eax,eax
c00111f0:	74 1d                	je     c001120f <EnvVarContainer::~EnvVarContainer()+0x2b>
c00111f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00111f8:	85 c0                	test   eax,eax
c00111fa:	74 13                	je     c001120f <EnvVarContainer::~EnvVarContainer()+0x2b>
c00111fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011200:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011203:	83 ec 0c             	sub    esp,0xc
c0011206:	50                   	push   eax
c0011207:	e8 65 79 ff ff       	call   c0008b71 <free>
c001120c:	83 c4 10             	add    esp,0x10
c001120f:	90                   	nop
c0011210:	83 c4 0c             	add    esp,0xc
c0011213:	c3                   	ret    

c0011214 <Krnl::getEnv(Process*, char const*)>:
c0011214:	53                   	push   ebx
c0011215:	83 ec 08             	sub    esp,0x8
c0011218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011220:	39 05 d0 51 02 c0    	cmp    DWORD PTR ds:0xc00251d0,eax
c0011226:	74 04                	je     c001122c <Krnl::getEnv(Process*, char const*)+0x18>
c0011228:	85 c0                	test   eax,eax
c001122a:	75 0b                	jne    c0011237 <Krnl::getEnv(Process*, char const*)+0x23>
c001122c:	a1 50 47 02 c0       	mov    eax,ds:0xc0024750
c0011231:	85 c0                	test   eax,eax
c0011233:	75 19                	jne    c001124e <Krnl::getEnv(Process*, char const*)+0x3a>
c0011235:	eb 27                	jmp    c001125e <Krnl::getEnv(Process*, char const*)+0x4a>
c0011237:	52                   	push   edx
c0011238:	52                   	push   edx
c0011239:	53                   	push   ebx
c001123a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011240:	e8 79 fc ff ff       	call   c0010ebe <EnvVarContainer::getEnv(char const*)>
c0011245:	83 c4 10             	add    esp,0x10
c0011248:	85 c0                	test   eax,eax
c001124a:	75 28                	jne    c0011274 <Krnl::getEnv(Process*, char const*)+0x60>
c001124c:	eb de                	jmp    c001122c <Krnl::getEnv(Process*, char const*)+0x18>
c001124e:	52                   	push   edx
c001124f:	52                   	push   edx
c0011250:	53                   	push   ebx
c0011251:	50                   	push   eax
c0011252:	e8 67 fc ff ff       	call   c0010ebe <EnvVarContainer::getEnv(char const*)>
c0011257:	83 c4 10             	add    esp,0x10
c001125a:	85 c0                	test   eax,eax
c001125c:	75 16                	jne    c0011274 <Krnl::getEnv(Process*, char const*)+0x60>
c001125e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011262:	a1 54 47 02 c0       	mov    eax,ds:0xc0024754
c0011267:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001126b:	83 c4 08             	add    esp,0x8
c001126e:	5b                   	pop    ebx
c001126f:	e9 4a fc ff ff       	jmp    c0010ebe <EnvVarContainer::getEnv(char const*)>
c0011274:	83 c4 08             	add    esp,0x8
c0011277:	5b                   	pop    ebx
c0011278:	c3                   	ret    

c0011279 <Krnl::setEnvSystem(char const*, char const*)>:
c0011279:	83 ec 10             	sub    esp,0x10
c001127c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011280:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011284:	ff 35 54 47 02 c0    	push   DWORD PTR ds:0xc0024754
c001128a:	e8 6d fc ff ff       	call   c0010efc <EnvVarContainer::setEnv(char const*, char const*)>
c001128f:	83 c4 1c             	add    esp,0x1c
c0011292:	c3                   	ret    

c0011293 <Krnl::setEnvUser(char const*, char const*)>:
c0011293:	a1 50 47 02 c0       	mov    eax,ds:0xc0024750
c0011298:	85 c0                	test   eax,eax
c001129a:	74 15                	je     c00112b1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001129c:	83 ec 10             	sub    esp,0x10
c001129f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112a7:	50                   	push   eax
c00112a8:	e8 4f fc ff ff       	call   c0010efc <EnvVarContainer::setEnv(char const*, char const*)>
c00112ad:	83 c4 1c             	add    esp,0x1c
c00112b0:	c3                   	ret    
c00112b1:	c3                   	ret    

c00112b2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00112b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112b6:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00112bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00112c0:	e9 37 fc ff ff       	jmp    c0010efc <EnvVarContainer::setEnv(char const*, char const*)>

c00112c5 <Krnl::deleteEnvSystem(char const*)>:
c00112c5:	c3                   	ret    

c00112c6 <Krnl::deleteEnvUser(char const*)>:
c00112c6:	c3                   	ret    

c00112c7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00112c7:	c3                   	ret    

c00112c8 <Krnl::newProcessEnv(Process*)>:
c00112c8:	83 ec 28             	sub    esp,0x28
c00112cb:	6a 0c                	push   0xc
c00112cd:	e8 8f 78 ff ff       	call   c0008b61 <malloc>
c00112d2:	5a                   	pop    edx
c00112d3:	59                   	pop    ecx
c00112d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00112d8:	50                   	push   eax
c00112d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112dd:	e8 e0 fe ff ff       	call   c00111c2 <EnvVarContainer::EnvVarContainer(Process*)>
c00112e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112e6:	83 c4 2c             	add    esp,0x2c
c00112e9:	c3                   	ret    

c00112ea <Krnl::copyProcessEnv(Process*, Process*)>:
c00112ea:	57                   	push   edi
c00112eb:	56                   	push   esi
c00112ec:	53                   	push   ebx
c00112ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f1:	83 ec 0c             	sub    esp,0xc
c00112f4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00112fa:	6a 0c                	push   0xc
c00112fc:	e8 60 78 ff ff       	call   c0008b61 <malloc>
c0011301:	89 c3                	mov    ebx,eax
c0011303:	58                   	pop    eax
c0011304:	5a                   	pop    edx
c0011305:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011309:	53                   	push   ebx
c001130a:	e8 b3 fe ff ff       	call   c00111c2 <EnvVarContainer::EnvVarContainer(Process*)>
c001130f:	8b 07                	mov    eax,DWORD PTR [edi]
c0011311:	89 03                	mov    DWORD PTR [ebx],eax
c0011313:	c1 e0 03             	shl    eax,0x3
c0011316:	89 04 24             	mov    DWORD PTR [esp],eax
c0011319:	e8 43 78 ff ff       	call   c0008b61 <malloc>
c001131e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011321:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011323:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011326:	c1 e1 03             	shl    ecx,0x3
c0011329:	89 c7                	mov    edi,eax
c001132b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001132d:	83 c4 10             	add    esp,0x10
c0011330:	89 d8                	mov    eax,ebx
c0011332:	5b                   	pop    ebx
c0011333:	5e                   	pop    esi
c0011334:	5f                   	pop    edi
c0011335:	c3                   	ret    

c0011336 <Krnl::loadSystemEnv()>:
c0011336:	53                   	push   ebx
c0011337:	83 ec 14             	sub    esp,0x14
c001133a:	6a 0c                	push   0xc
c001133c:	e8 20 78 ff ff       	call   c0008b61 <malloc>
c0011341:	89 c3                	mov    ebx,eax
c0011343:	58                   	pop    eax
c0011344:	5a                   	pop    edx
c0011345:	ff 35 d0 51 02 c0    	push   DWORD PTR ds:0xc00251d0
c001134b:	53                   	push   ebx
c001134c:	e8 71 fe ff ff       	call   c00111c2 <EnvVarContainer::EnvVarContainer(Process*)>
c0011351:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011354:	89 1d 54 47 02 c0    	mov    DWORD PTR ds:0xc0024754,ebx
c001135a:	e8 47 fe ff ff       	call   c00111a6 <EnvVarContainer::__loadSystem()>
c001135f:	83 c4 18             	add    esp,0x18
c0011362:	5b                   	pop    ebx
c0011363:	c3                   	ret    

c0011364 <Krnl::loadUserEnv()>:
c0011364:	53                   	push   ebx
c0011365:	83 ec 14             	sub    esp,0x14
c0011368:	6a 0c                	push   0xc
c001136a:	e8 f2 77 ff ff       	call   c0008b61 <malloc>
c001136f:	89 c3                	mov    ebx,eax
c0011371:	58                   	pop    eax
c0011372:	5a                   	pop    edx
c0011373:	ff 35 d0 51 02 c0    	push   DWORD PTR ds:0xc00251d0
c0011379:	53                   	push   ebx
c001137a:	e8 43 fe ff ff       	call   c00111c2 <EnvVarContainer::EnvVarContainer(Process*)>
c001137f:	89 1d 50 47 02 c0    	mov    DWORD PTR ds:0xc0024750,ebx
c0011385:	83 c4 18             	add    esp,0x18
c0011388:	5b                   	pop    ebx
c0011389:	c3                   	ret    

c001138a <Krnl::flushEnv()>:
c001138a:	c3                   	ret    

c001138b <Krnl::getProcessTotalEnvCount(Process*)>:
c001138b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001138f:	8b 15 50 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024750
c0011395:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001139b:	a1 54 47 02 c0       	mov    eax,ds:0xc0024754
c00113a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00113a2:	03 01                	add    eax,DWORD PTR [ecx]
c00113a4:	85 d2                	test   edx,edx
c00113a6:	74 02                	je     c00113aa <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00113a8:	03 02                	add    eax,DWORD PTR [edx]
c00113aa:	c3                   	ret    

c00113ab <Krnl::getProcessEnvPair(Process*, int)>:
c00113ab:	57                   	push   edi
c00113ac:	56                   	push   esi
c00113ad:	8b 35 50 47 02 c0    	mov    esi,DWORD PTR ds:0xc0024750
c00113b3:	53                   	push   ebx
c00113b4:	85 f6                	test   esi,esi
c00113b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00113ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113be:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00113c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00113c8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00113ca:	75 16                	jne    c00113e2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00113cc:	39 c2                	cmp    edx,eax
c00113ce:	7c 16                	jl     c00113e6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00113d0:	8b 0d 54 47 02 c0    	mov    ecx,DWORD PTR ds:0xc0024754
c00113d6:	8b 31                	mov    esi,DWORD PTR [ecx]
c00113d8:	01 c6                	add    esi,eax
c00113da:	39 d6                	cmp    esi,edx
c00113dc:	7e 3c                	jle    c001141a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00113de:	29 c2                	sub    edx,eax
c00113e0:	eb 04                	jmp    c00113e6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00113e2:	39 c2                	cmp    edx,eax
c00113e4:	7d 05                	jge    c00113eb <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00113e6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00113e9:	eb 20                	jmp    c001140b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00113eb:	8b 3e                	mov    edi,DWORD PTR [esi]
c00113ed:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00113f0:	39 d1                	cmp    ecx,edx
c00113f2:	7e 04                	jle    c00113f8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00113f4:	29 c2                	sub    edx,eax
c00113f6:	eb 10                	jmp    c0011408 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00113f8:	8b 35 54 47 02 c0    	mov    esi,DWORD PTR ds:0xc0024754
c00113fe:	03 0e                	add    ecx,DWORD PTR [esi]
c0011400:	39 d1                	cmp    ecx,edx
c0011402:	7e 16                	jle    c001141a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0011404:	29 c2                	sub    edx,eax
c0011406:	29 fa                	sub    edx,edi
c0011408:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001140b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0011410:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011413:	89 03                	mov    DWORD PTR [ebx],eax
c0011415:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011418:	eb 1d                	jmp    c0011437 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001141a:	83 ec 0c             	sub    esp,0xc
c001141d:	68 06 fb 01 c0       	push   0xc001fb06
c0011422:	e8 18 00 00 00       	call   c001143f <Krnl::panic(char const*)>
c0011427:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001142d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011434:	83 c4 10             	add    esp,0x10
c0011437:	89 d8                	mov    eax,ebx
c0011439:	5b                   	pop    ebx
c001143a:	5e                   	pop    esi
c001143b:	5f                   	pop    edi
c001143c:	c2 04 00             	ret    0x4

c001143f <Krnl::panic(char const*)>:
c001143f:	53                   	push   ebx
c0011440:	83 ec 10             	sub    esp,0x10
c0011443:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011447:	fa                   	cli    
c0011448:	c6 05 60 47 02 c0 01 	mov    BYTE PTR ds:0xc0024760,0x1
c001144f:	53                   	push   ebx
c0011450:	68 20 fb 01 c0       	push   0xc001fb20
c0011455:	e8 96 a4 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001145a:	83 c4 0c             	add    esp,0xc
c001145d:	a1 34 1d 02 c0       	mov    eax,ds:0xc0021d34
c0011462:	6a 01                	push   0x1
c0011464:	6a 0f                	push   0xf
c0011466:	50                   	push   eax
c0011467:	e8 78 82 ff ff       	call   c00096e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001146c:	5a                   	pop    edx
c001146d:	8b 0d 34 1d 02 c0    	mov    ecx,DWORD PTR ds:0xc0021d34
c0011473:	51                   	push   ecx
c0011474:	e8 63 84 ff ff       	call   c00098dc <VgaText::clearScreen()>
c0011479:	58                   	pop    eax
c001147a:	8b 0d 34 1d 02 c0    	mov    ecx,DWORD PTR ds:0xc0021d34
c0011480:	5a                   	pop    edx
c0011481:	68 51 fb 01 c0       	push   0xc001fb51
c0011486:	51                   	push   ecx
c0011487:	e8 90 82 ff ff       	call   c000971c <VgaText::setTitle(char*)>
c001148c:	83 c4 0c             	add    esp,0xc
c001148f:	a1 34 1d 02 c0       	mov    eax,ds:0xc0021d34
c0011494:	6a 01                	push   0x1
c0011496:	6a 0f                	push   0xf
c0011498:	50                   	push   eax
c0011499:	e8 46 82 ff ff       	call   c00096e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001149e:	58                   	pop    eax
c001149f:	8b 0d 34 1d 02 c0    	mov    ecx,DWORD PTR ds:0xc0021d34
c00114a5:	5a                   	pop    edx
c00114a6:	68 39 fb 01 c0       	push   0xc001fb39
c00114ab:	51                   	push   ecx
c00114ac:	e8 1f 87 ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c00114b1:	83 c4 0c             	add    esp,0xc
c00114b4:	a1 34 1d 02 c0       	mov    eax,ds:0xc0021d34
c00114b9:	6a 0f                	push   0xf
c00114bb:	6a 01                	push   0x1
c00114bd:	50                   	push   eax
c00114be:	e8 21 82 ff ff       	call   c00096e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00114c3:	58                   	pop    eax
c00114c4:	8b 0d 34 1d 02 c0    	mov    ecx,DWORD PTR ds:0xc0021d34
c00114ca:	5a                   	pop    edx
c00114cb:	68 42 fb 01 c0       	push   0xc001fb42
c00114d0:	51                   	push   ecx
c00114d1:	e8 fa 86 ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c00114d6:	83 c4 0c             	add    esp,0xc
c00114d9:	a1 34 1d 02 c0       	mov    eax,ds:0xc0021d34
c00114de:	6a 01                	push   0x1
c00114e0:	6a 0f                	push   0xf
c00114e2:	50                   	push   eax
c00114e3:	e8 fc 81 ff ff       	call   c00096e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00114e8:	58                   	pop    eax
c00114e9:	8b 0d 34 1d 02 c0    	mov    ecx,DWORD PTR ds:0xc0021d34
c00114ef:	5a                   	pop    edx
c00114f0:	68 4f fb 01 c0       	push   0xc001fb4f
c00114f5:	51                   	push   ecx
c00114f6:	e8 d5 86 ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c00114fb:	58                   	pop    eax
c00114fc:	8b 0d 34 1d 02 c0    	mov    ecx,DWORD PTR ds:0xc0021d34
c0011502:	5a                   	pop    edx
c0011503:	68 60 fb 01 c0       	push   0xc001fb60
c0011508:	51                   	push   ecx
c0011509:	e8 c2 86 ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c001150e:	58                   	pop    eax
c001150f:	8b 0d 34 1d 02 c0    	mov    ecx,DWORD PTR ds:0xc0021d34
c0011515:	5a                   	pop    edx
c0011516:	68 52 fb 01 c0       	push   0xc001fb52
c001151b:	51                   	push   ecx
c001151c:	e8 af 86 ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c0011521:	58                   	pop    eax
c0011522:	8b 0d 34 1d 02 c0    	mov    ecx,DWORD PTR ds:0xc0021d34
c0011528:	5a                   	pop    edx
c0011529:	53                   	push   ebx
c001152a:	51                   	push   ecx
c001152b:	e8 a0 86 ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c0011530:	5b                   	pop    ebx
c0011531:	58                   	pop    eax
c0011532:	a1 34 1d 02 c0       	mov    eax,ds:0xc0021d34
c0011537:	68 4f fb 01 c0       	push   0xc001fb4f
c001153c:	50                   	push   eax
c001153d:	e8 8e 86 ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c0011542:	83 c4 10             	add    esp,0x10
c0011545:	eb fe                	jmp    c0011545 <Krnl::panic(char const*)+0x106>

c0011547 <Krnl::powerThread(void*)>:
c0011547:	83 ec 0c             	sub    esp,0xc
c001154a:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c001154f:	48                   	dec    eax
c0011550:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0011555:	75 01                	jne    c0011558 <Krnl::powerThread(void*)+0x11>
c0011557:	fb                   	sti    
c0011558:	83 ec 0c             	sub    esp,0xc
c001155b:	c6 05 80 47 02 c0 00 	mov    BYTE PTR ds:0xc0024780,0x0
c0011562:	6a 0a                	push   0xa
c0011564:	e8 3b 35 00 00       	call   c0014aa4 <sleep(unsigned int)>
c0011569:	83 05 c4 47 02 c0 0a 	add    DWORD PTR ds:0xc00247c4,0xa
c0011570:	83 c4 10             	add    esp,0x10
c0011573:	eb e3                	jmp    c0011558 <Krnl::powerThread(void*)+0x11>

c0011575 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0011575:	57                   	push   edi
c0011576:	b9 09 00 00 00       	mov    ecx,0x9
c001157b:	56                   	push   esi
c001157c:	bf a0 47 02 c0       	mov    edi,0xc00247a0
c0011581:	fc                   	cld    
c0011582:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011586:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011588:	5e                   	pop    esi
c0011589:	5f                   	pop    edi
c001158a:	c3                   	ret    

c001158b <Krnl::userIOReceived()>:
c001158b:	c7 05 c4 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247c4,0x0
c0011595:	c3                   	ret    

c0011596 <Krnl::handlePowerButton()>:
c0011596:	83 ec 0c             	sub    esp,0xc
c0011599:	a1 a0 47 02 c0       	mov    eax,ds:0xc00247a0
c001159e:	83 f8 02             	cmp    eax,0x2
c00115a1:	75 10                	jne    c00115b3 <Krnl::handlePowerButton()+0x1d>
c00115a3:	83 ec 0c             	sub    esp,0xc
c00115a6:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c00115ac:	e8 51 6c ff ff       	call   c0008202 <Computer::shutdown()>
c00115b1:	eb 11                	jmp    c00115c4 <Krnl::handlePowerButton()+0x2e>
c00115b3:	48                   	dec    eax
c00115b4:	75 11                	jne    c00115c7 <Krnl::handlePowerButton()+0x31>
c00115b6:	83 ec 0c             	sub    esp,0xc
c00115b9:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c00115bf:	e8 6e 6c ff ff       	call   c0008232 <Computer::sleep()>
c00115c4:	83 c4 10             	add    esp,0x10
c00115c7:	83 c4 0c             	add    esp,0xc
c00115ca:	c3                   	ret    

c00115cb <Krnl::handleSleepButton()>:
c00115cb:	83 ec 0c             	sub    esp,0xc
c00115ce:	a1 a4 47 02 c0       	mov    eax,ds:0xc00247a4
c00115d3:	83 f8 02             	cmp    eax,0x2
c00115d6:	75 10                	jne    c00115e8 <Krnl::handleSleepButton()+0x1d>
c00115d8:	83 ec 0c             	sub    esp,0xc
c00115db:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c00115e1:	e8 1c 6c ff ff       	call   c0008202 <Computer::shutdown()>
c00115e6:	eb 11                	jmp    c00115f9 <Krnl::handleSleepButton()+0x2e>
c00115e8:	48                   	dec    eax
c00115e9:	75 11                	jne    c00115fc <Krnl::handleSleepButton()+0x31>
c00115eb:	83 ec 0c             	sub    esp,0xc
c00115ee:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c00115f4:	e8 39 6c ff ff       	call   c0008232 <Computer::sleep()>
c00115f9:	83 c4 10             	add    esp,0x10
c00115fc:	83 c4 0c             	add    esp,0xc
c00115ff:	c3                   	ret    

c0011600 <Krnl::setupPowerManager()>:
c0011600:	83 ec 0c             	sub    esp,0xc
c0011603:	c7 05 c4 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247c4,0x0
c001160d:	68 f0 00 00 00       	push   0xf0
c0011612:	c6 05 80 47 02 c0 00 	mov    BYTE PTR ds:0xc0024780,0x0
c0011619:	6a 00                	push   0x0
c001161b:	68 47 15 01 c0       	push   0xc0011547
c0011620:	ff 35 d0 51 02 c0    	push   DWORD PTR ds:0xc00251d0
c0011626:	e8 49 2f 00 00       	call   c0014574 <Process::createThread(void (*)(void*), void*, int)>
c001162b:	c7 05 a0 47 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00247a0,0x2
c0011635:	c7 05 a4 47 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00247a4,0x1
c001163f:	c7 05 a8 47 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00247a8,0x3
c0011649:	c7 05 ac 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247ac,0x0
c0011653:	c7 05 b8 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247b8,0x0
c001165d:	c7 05 b0 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247b0,0x0
c0011667:	c7 05 bc 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247bc,0x0
c0011671:	c7 05 b4 47 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00247b4,0x3c
c001167b:	c7 05 c0 47 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00247c0,0x3c
c0011685:	83 c4 1c             	add    esp,0x1c
c0011688:	c3                   	ret    

c0011689 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011689:	55                   	push   ebp
c001168a:	57                   	push   edi
c001168b:	56                   	push   esi
c001168c:	53                   	push   ebx
c001168d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011693:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001169a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001169c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001169f:	80 fb 40             	cmp    bl,0x40
c00116a2:	75 1b                	jne    c00116bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00116a4:	8a 16                	mov    dl,BYTE PTR [esi]
c00116a6:	84 d2                	test   dl,dl
c00116a8:	0f 84 f1 00 00 00    	je     c001179f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00116ae:	8d 46 01             	lea    eax,[esi+0x1]
c00116b1:	80 fa 3a             	cmp    dl,0x3a
c00116b4:	74 04                	je     c00116ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00116b6:	89 c6                	mov    esi,eax
c00116b8:	eb ea                	jmp    c00116a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00116ba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00116bd:	89 c6                	mov    esi,eax
c00116bf:	50                   	push   eax
c00116c0:	6a 40                	push   0x40
c00116c2:	6a 00                	push   0x0
c00116c4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00116c8:	50                   	push   eax
c00116c9:	e8 22 ee fe ff       	call   c00004f0 <memset>
c00116ce:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00116d5:	31 c0                	xor    eax,eax
c00116d7:	83 c4 10             	add    esp,0x10
c00116da:	8a 0f                	mov    cl,BYTE PTR [edi]
c00116dc:	84 c9                	test   cl,cl
c00116de:	0f 84 bb 00 00 00    	je     c001179f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00116e4:	3d c7 00 00 00       	cmp    eax,0xc7
c00116e9:	0f 8f b0 00 00 00    	jg     c001179f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00116ef:	80 f9 0a             	cmp    cl,0xa
c00116f2:	0f 85 98 00 00 00    	jne    c0011790 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00116f8:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00116fd:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0011701:	a8 df                	test   al,0xdf
c0011703:	0f 94 c1             	sete   cl
c0011706:	3c 23                	cmp    al,0x23
c0011708:	0f 94 c2             	sete   dl
c001170b:	08 d1                	or     cl,dl
c001170d:	75 4a                	jne    c0011759 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001170f:	8d 50 f7             	lea    edx,[eax-0x9]
c0011712:	80 fa 01             	cmp    dl,0x1
c0011715:	76 42                	jbe    c0011759 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011717:	3c 5b                	cmp    al,0x5b
c0011719:	75 42                	jne    c001175d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001171b:	80 fb 40             	cmp    bl,0x40
c001171e:	75 39                	jne    c0011759 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011720:	83 ec 0c             	sub    esp,0xc
c0011723:	8d 54 24 65          	lea    edx,[esp+0x65]
c0011727:	52                   	push   edx
c0011728:	e8 33 ee fe ff       	call   c0000560 <strlen>
c001172d:	83 c4 10             	add    esp,0x10
c0011730:	83 f8 3f             	cmp    eax,0x3f
c0011733:	77 6a                	ja     c001179f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011735:	50                   	push   eax
c0011736:	50                   	push   eax
c0011737:	8d 54 24 61          	lea    edx,[esp+0x61]
c001173b:	52                   	push   edx
c001173c:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011740:	52                   	push   edx
c0011741:	e8 da ee fe ff       	call   c0000620 <strcpy>
c0011746:	58                   	pop    eax
c0011747:	8d 54 24 24          	lea    edx,[esp+0x24]
c001174b:	52                   	push   edx
c001174c:	e8 0f ee fe ff       	call   c0000560 <strlen>
c0011751:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0011756:	83 c4 10             	add    esp,0x10
c0011759:	31 d2                	xor    edx,edx
c001175b:	eb 3a                	jmp    c0011797 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001175d:	80 fb 40             	cmp    bl,0x40
c0011760:	74 06                	je     c0011768 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0011762:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011766:	eb 20                	jmp    c0011788 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011768:	50                   	push   eax
c0011769:	50                   	push   eax
c001176a:	55                   	push   ebp
c001176b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001176f:	50                   	push   eax
c0011770:	e8 8b ef fe ff       	call   c0000700 <strcmp>
c0011775:	83 c4 10             	add    esp,0x10
c0011778:	85 c0                	test   eax,eax
c001177a:	75 dd                	jne    c0011759 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001177c:	eb e4                	jmp    c0011762 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001177e:	8d 50 01             	lea    edx,[eax+0x1]
c0011781:	80 f9 3d             	cmp    cl,0x3d
c0011784:	74 1d                	je     c00117a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0011786:	89 d0                	mov    eax,edx
c0011788:	8a 08                	mov    cl,BYTE PTR [eax]
c001178a:	84 c9                	test   cl,cl
c001178c:	75 f0                	jne    c001177e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001178e:	eb 0f                	jmp    c001179f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011790:	8d 50 01             	lea    edx,[eax+0x1]
c0011793:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0011797:	47                   	inc    edi
c0011798:	89 d0                	mov    eax,edx
c001179a:	e9 3b ff ff ff       	jmp    c00116da <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001179f:	31 c0                	xor    eax,eax
c00117a1:	eb 33                	jmp    c00117d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00117a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00117a7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00117aa:	50                   	push   eax
c00117ab:	50                   	push   eax
c00117ac:	8d 44 24 60          	lea    eax,[esp+0x60]
c00117b0:	50                   	push   eax
c00117b1:	56                   	push   esi
c00117b2:	e8 49 ef fe ff       	call   c0000700 <strcmp>
c00117b7:	83 c4 10             	add    esp,0x10
c00117ba:	85 c0                	test   eax,eax
c00117bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00117c0:	75 97                	jne    c0011759 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00117c2:	51                   	push   ecx
c00117c3:	51                   	push   ecx
c00117c4:	52                   	push   edx
c00117c5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00117cc:	e8 4f ee fe ff       	call   c0000620 <strcpy>
c00117d1:	83 c4 10             	add    esp,0x10
c00117d4:	b0 01                	mov    al,0x1
c00117d6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00117dc:	5b                   	pop    ebx
c00117dd:	5e                   	pop    esi
c00117de:	5f                   	pop    edi
c00117df:	5d                   	pop    ebp
c00117e0:	c3                   	ret    

c00117e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00117e1:	57                   	push   edi
c00117e2:	56                   	push   esi
c00117e3:	53                   	push   ebx
c00117e4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00117ea:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00117f1:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00117f8:	53                   	push   ebx
c00117f9:	e8 62 ed fe ff       	call   c0000560 <strlen>
c00117fe:	89 34 24             	mov    DWORD PTR [esp],esi
c0011801:	89 c7                	mov    edi,eax
c0011803:	e8 58 ed fe ff       	call   c0000560 <strlen>
c0011808:	83 c4 10             	add    esp,0x10
c001180b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001180f:	3d ff 00 00 00       	cmp    eax,0xff
c0011814:	0f 87 d3 00 00 00    	ja     c00118ed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001181a:	57                   	push   edi
c001181b:	57                   	push   edi
c001181c:	56                   	push   esi
c001181d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0011821:	56                   	push   esi
c0011822:	e8 f9 ed fe ff       	call   c0000620 <strcpy>
c0011827:	58                   	pop    eax
c0011828:	5a                   	pop    edx
c0011829:	68 7f fe 01 c0       	push   0xc001fe7f
c001182e:	56                   	push   esi
c001182f:	e8 ac ef fe ff       	call   c00007e0 <strcat>
c0011834:	59                   	pop    ecx
c0011835:	5f                   	pop    edi
c0011836:	53                   	push   ebx
c0011837:	56                   	push   esi
c0011838:	e8 a3 ef fe ff       	call   c00007e0 <strcat>
c001183d:	58                   	pop    eax
c001183e:	5a                   	pop    edx
c001183f:	68 9a fb 01 c0       	push   0xc001fb9a
c0011844:	56                   	push   esi
c0011845:	e8 96 ef fe ff       	call   c00007e0 <strcat>
c001184a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011851:	e8 0b 73 ff ff       	call   c0008b61 <malloc>
c0011856:	83 c4 0c             	add    esp,0xc
c0011859:	89 c3                	mov    ebx,eax
c001185b:	ff 35 d0 51 02 c0    	push   DWORD PTR ds:0xc00251d0
c0011861:	56                   	push   esi
c0011862:	50                   	push   eax
c0011863:	e8 fe a5 ff ff       	call   c000be66 <File::File(char const*, Process*)>
c0011868:	83 c4 10             	add    esp,0x10
c001186b:	85 db                	test   ebx,ebx
c001186d:	74 7e                	je     c00118ed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001186f:	51                   	push   ecx
c0011870:	51                   	push   ecx
c0011871:	6a 01                	push   0x1
c0011873:	53                   	push   ebx
c0011874:	e8 ad a6 ff ff       	call   c000bf26 <File::open(FileOpenMode)>
c0011879:	83 c4 10             	add    esp,0x10
c001187c:	85 c0                	test   eax,eax
c001187e:	74 08                	je     c0011888 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011880:	83 ec 0c             	sub    esp,0xc
c0011883:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011885:	53                   	push   ebx
c0011886:	eb 5f                	jmp    c00118e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011888:	52                   	push   edx
c0011889:	8d 44 24 17          	lea    eax,[esp+0x17]
c001188d:	50                   	push   eax
c001188e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011892:	50                   	push   eax
c0011893:	53                   	push   ebx
c0011894:	e8 39 a9 ff ff       	call   c000c1d2 <File::stat(unsigned long long*, bool*)>
c0011899:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001189d:	83 c4 10             	add    esp,0x10
c00118a0:	89 c1                	mov    ecx,eax
c00118a2:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00118a6:	74 31                	je     c00118d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00118a8:	83 ec 0c             	sub    esp,0xc
c00118ab:	50                   	push   eax
c00118ac:	e8 b0 72 ff ff       	call   c0008b61 <malloc>
c00118b1:	89 c6                	mov    esi,eax
c00118b3:	58                   	pop    eax
c00118b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118b6:	8d 54 24 20          	lea    edx,[esp+0x20]
c00118ba:	52                   	push   edx
c00118bb:	56                   	push   esi
c00118bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00118c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00118c4:	53                   	push   ebx
c00118c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00118c8:	83 c4 20             	add    esp,0x20
c00118cb:	85 c0                	test   eax,eax
c00118cd:	75 0a                	jne    c00118d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00118cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118d3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00118d7:	74 18                	je     c00118f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00118d9:	83 ec 0c             	sub    esp,0xc
c00118dc:	53                   	push   ebx
c00118dd:	e8 a2 a6 ff ff       	call   c000bf84 <File::close()>
c00118e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118ea:	83 c4 10             	add    esp,0x10
c00118ed:	31 c0                	xor    eax,eax
c00118ef:	eb 3b                	jmp    c001192c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00118f1:	83 ec 0c             	sub    esp,0xc
c00118f4:	53                   	push   ebx
c00118f5:	e8 8a a6 ff ff       	call   c000bf84 <File::close()>
c00118fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011902:	83 c4 0c             	add    esp,0xc
c0011905:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001190c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011913:	56                   	push   esi
c0011914:	e8 70 fd ff ff       	call   c0011689 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0011919:	89 34 24             	mov    DWORD PTR [esp],esi
c001191c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011920:	e8 4c 72 ff ff       	call   c0008b71 <free>
c0011925:	83 c4 10             	add    esp,0x10
c0011928:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001192c:	81 c4 20 01 00 00    	add    esp,0x120
c0011932:	5b                   	pop    ebx
c0011933:	5e                   	pop    esi
c0011934:	5f                   	pop    edi
c0011935:	c3                   	ret    

c0011936 <Reg::getLine(char*, char*, char*)>:
c0011936:	57                   	push   edi
c0011937:	56                   	push   esi
c0011938:	53                   	push   ebx
c0011939:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001193d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011941:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011945:	57                   	push   edi
c0011946:	56                   	push   esi
c0011947:	53                   	push   ebx
c0011948:	68 9f fb 01 c0       	push   0xc001fb9f
c001194d:	e8 8f fe ff ff       	call   c00117e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011952:	83 c4 10             	add    esp,0x10
c0011955:	84 c0                	test   al,al
c0011957:	75 10                	jne    c0011969 <Reg::getLine(char*, char*, char*)+0x33>
c0011959:	57                   	push   edi
c001195a:	56                   	push   esi
c001195b:	53                   	push   ebx
c001195c:	68 c4 fb 01 c0       	push   0xc001fbc4
c0011961:	e8 7b fe ff ff       	call   c00117e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011966:	83 c4 10             	add    esp,0x10
c0011969:	5b                   	pop    ebx
c001196a:	5e                   	pop    esi
c001196b:	5f                   	pop    edi
c001196c:	c3                   	ret    

c001196d <Reg::readInt(char*, char*, int*)>:
c001196d:	55                   	push   ebp
c001196e:	57                   	push   edi
c001196f:	56                   	push   esi
c0011970:	53                   	push   ebx
c0011971:	81 ec f0 00 00 00    	sub    esp,0xf0
c0011977:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001197b:	57                   	push   edi
c001197c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011983:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001198a:	e8 a7 ff ff ff       	call   c0011936 <Reg::getLine(char*, char*, char*)>
c001198f:	83 c4 10             	add    esp,0x10
c0011992:	84 c0                	test   al,al
c0011994:	0f 84 b3 00 00 00    	je     c0011a4d <Reg::readInt(char*, char*, int*)+0xe0>
c001199a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001199e:	80 fa 2b             	cmp    dl,0x2b
c00119a1:	74 0c                	je     c00119af <Reg::readInt(char*, char*, int*)+0x42>
c00119a3:	80 fa 2d             	cmp    dl,0x2d
c00119a6:	75 0e                	jne    c00119b6 <Reg::readInt(char*, char*, int*)+0x49>
c00119a8:	ba 01 00 00 00       	mov    edx,0x1
c00119ad:	eb 0b                	jmp    c00119ba <Reg::readInt(char*, char*, int*)+0x4d>
c00119af:	ba 01 00 00 00       	mov    edx,0x1
c00119b4:	eb 02                	jmp    c00119b8 <Reg::readInt(char*, char*, int*)+0x4b>
c00119b6:	31 d2                	xor    edx,edx
c00119b8:	31 c0                	xor    eax,eax
c00119ba:	be 0a 00 00 00       	mov    esi,0xa
c00119bf:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00119c4:	75 20                	jne    c00119e6 <Reg::readInt(char*, char*, int*)+0x79>
c00119c6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00119ca:	80 f9 78             	cmp    cl,0x78
c00119cd:	75 0a                	jne    c00119d9 <Reg::readInt(char*, char*, int*)+0x6c>
c00119cf:	83 c2 02             	add    edx,0x2
c00119d2:	be 10 00 00 00       	mov    esi,0x10
c00119d7:	eb 0d                	jmp    c00119e6 <Reg::readInt(char*, char*, int*)+0x79>
c00119d9:	80 f9 62             	cmp    cl,0x62
c00119dc:	75 08                	jne    c00119e6 <Reg::readInt(char*, char*, int*)+0x79>
c00119de:	83 c2 02             	add    edx,0x2
c00119e1:	be 02 00 00 00       	mov    esi,0x2
c00119e6:	01 d7                	add    edi,edx
c00119e8:	31 d2                	xor    edx,edx
c00119ea:	8a 1f                	mov    bl,BYTE PTR [edi]
c00119ec:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00119f0:	80 fb 0d             	cmp    bl,0xd
c00119f3:	0f 94 c3             	sete   bl
c00119f6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00119fb:	0f 94 c1             	sete   cl
c00119fe:	08 cb                	or     bl,cl
c0011a00:	75 3a                	jne    c0011a3c <Reg::readInt(char*, char*, int*)+0xcf>
c0011a02:	0f af d6             	imul   edx,esi
c0011a05:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0011a0a:	83 fe 10             	cmp    esi,0x10
c0011a0d:	75 26                	jne    c0011a35 <Reg::readInt(char*, char*, int*)+0xc8>
c0011a0f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011a13:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0011a16:	89 e9                	mov    ecx,ebp
c0011a18:	80 f9 05             	cmp    cl,0x5
c0011a1b:	77 06                	ja     c0011a23 <Reg::readInt(char*, char*, int*)+0xb6>
c0011a1d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0011a21:	eb 16                	jmp    c0011a39 <Reg::readInt(char*, char*, int*)+0xcc>
c0011a23:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011a27:	83 e9 61             	sub    ecx,0x61
c0011a2a:	80 f9 05             	cmp    cl,0x5
c0011a2d:	77 06                	ja     c0011a35 <Reg::readInt(char*, char*, int*)+0xc8>
c0011a2f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0011a33:	eb 04                	jmp    c0011a39 <Reg::readInt(char*, char*, int*)+0xcc>
c0011a35:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011a39:	47                   	inc    edi
c0011a3a:	eb ae                	jmp    c00119ea <Reg::readInt(char*, char*, int*)+0x7d>
c0011a3c:	84 c0                	test   al,al
c0011a3e:	74 02                	je     c0011a42 <Reg::readInt(char*, char*, int*)+0xd5>
c0011a40:	f7 da                	neg    edx
c0011a42:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011a49:	89 10                	mov    DWORD PTR [eax],edx
c0011a4b:	88 d8                	mov    al,bl
c0011a4d:	81 c4 ec 00 00 00    	add    esp,0xec
c0011a53:	5b                   	pop    ebx
c0011a54:	5e                   	pop    esi
c0011a55:	5f                   	pop    edi
c0011a56:	5d                   	pop    ebp
c0011a57:	c3                   	ret    

c0011a58 <Reg::readString(char*, char*, char*, int)>:
c0011a58:	57                   	push   edi
c0011a59:	56                   	push   esi
c0011a5a:	53                   	push   ebx
c0011a5b:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011a61:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011a68:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011a6c:	57                   	push   edi
c0011a6d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011a74:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011a7b:	e8 b6 fe ff ff       	call   c0011936 <Reg::getLine(char*, char*, char*)>
c0011a80:	83 c4 10             	add    esp,0x10
c0011a83:	89 c6                	mov    esi,eax
c0011a85:	84 c0                	test   al,al
c0011a87:	74 44                	je     c0011acd <Reg::readString(char*, char*, char*, int)+0x75>
c0011a89:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011a90:	31 c0                	xor    eax,eax
c0011a92:	4a                   	dec    edx
c0011a93:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0011a96:	84 c9                	test   cl,cl
c0011a98:	74 0f                	je     c0011aa9 <Reg::readString(char*, char*, char*, int)+0x51>
c0011a9a:	39 c2                	cmp    edx,eax
c0011a9c:	7e 0b                	jle    c0011aa9 <Reg::readString(char*, char*, char*, int)+0x51>
c0011a9e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011aa1:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0011aa6:	40                   	inc    eax
c0011aa7:	eb ea                	jmp    c0011a93 <Reg::readString(char*, char*, char*, int)+0x3b>
c0011aa9:	83 ec 0c             	sub    esp,0xc
c0011aac:	53                   	push   ebx
c0011aad:	e8 ae ea fe ff       	call   c0000560 <strlen>
c0011ab2:	83 c4 10             	add    esp,0x10
c0011ab5:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011aba:	75 11                	jne    c0011acd <Reg::readString(char*, char*, char*, int)+0x75>
c0011abc:	83 ec 0c             	sub    esp,0xc
c0011abf:	53                   	push   ebx
c0011ac0:	e8 9b ea fe ff       	call   c0000560 <strlen>
c0011ac5:	83 c4 10             	add    esp,0x10
c0011ac8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011acd:	81 c4 d0 00 00 00    	add    esp,0xd0
c0011ad3:	89 f0                	mov    eax,esi
c0011ad5:	5b                   	pop    ebx
c0011ad6:	5e                   	pop    esi
c0011ad7:	5f                   	pop    edi
c0011ad8:	c3                   	ret    

c0011ad9 <Reg::readBool(char*, char*, bool*)>:
c0011ad9:	83 ec 20             	sub    esp,0x20
c0011adc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011ae0:	50                   	push   eax
c0011ae1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011ae5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011ae9:	e8 7f fe ff ff       	call   c001196d <Reg::readInt(char*, char*, int*)>
c0011aee:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011af3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0011af7:	0f 95 02             	setne  BYTE PTR [edx]
c0011afa:	83 c4 2c             	add    esp,0x2c
c0011afd:	c3                   	ret    

c0011afe <Reg::readBoolWithDefault(char*, char*, bool)>:
c0011afe:	53                   	push   ebx
c0011aff:	83 ec 1c             	sub    esp,0x1c
c0011b02:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0011b06:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011b0a:	50                   	push   eax
c0011b0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011b0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011b13:	e8 c1 ff ff ff       	call   c0011ad9 <Reg::readBool(char*, char*, bool*)>
c0011b18:	83 c4 10             	add    esp,0x10
c0011b1b:	84 c0                	test   al,al
c0011b1d:	74 04                	je     c0011b23 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011b1f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0011b23:	88 d8                	mov    al,bl
c0011b25:	83 c4 18             	add    esp,0x18
c0011b28:	5b                   	pop    ebx
c0011b29:	c3                   	ret    

c0011b2a <Reg::readIntWithDefault(char*, char*, int)>:
c0011b2a:	53                   	push   ebx
c0011b2b:	83 ec 1c             	sub    esp,0x1c
c0011b2e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b32:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011b36:	50                   	push   eax
c0011b37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011b3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011b3f:	e8 29 fe ff ff       	call   c001196d <Reg::readInt(char*, char*, int*)>
c0011b44:	83 c4 10             	add    esp,0x10
c0011b47:	84 c0                	test   al,al
c0011b49:	74 04                	je     c0011b4f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011b4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b4f:	89 d8                	mov    eax,ebx
c0011b51:	83 c4 18             	add    esp,0x18
c0011b54:	5b                   	pop    ebx
c0011b55:	c3                   	ret    

c0011b56 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011b56:	57                   	push   edi
c0011b57:	56                   	push   esi
c0011b58:	56                   	push   esi
c0011b59:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b5d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011b61:	56                   	push   esi
c0011b62:	57                   	push   edi
c0011b63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b6b:	e8 e8 fe ff ff       	call   c0011a58 <Reg::readString(char*, char*, char*, int)>
c0011b70:	83 c4 10             	add    esp,0x10
c0011b73:	84 c0                	test   al,al
c0011b75:	75 1a                	jne    c0011b91 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011b77:	51                   	push   ecx
c0011b78:	56                   	push   esi
c0011b79:	6a 00                	push   0x0
c0011b7b:	57                   	push   edi
c0011b7c:	e8 6f e9 fe ff       	call   c00004f0 <memset>
c0011b81:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011b84:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b8a:	83 c4 10             	add    esp,0x10
c0011b8d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b91:	89 f8                	mov    eax,edi
c0011b93:	5a                   	pop    edx
c0011b94:	5e                   	pop    esi
c0011b95:	5f                   	pop    edi
c0011b96:	c3                   	ret    

c0011b97 <Sys::eject(regs*)>:
c0011b97:	83 ec 0c             	sub    esp,0xc
c0011b9a:	83 ca ff             	or     edx,0xffffffff
c0011b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ba1:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011ba4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011ba9:	83 e9 41             	sub    ecx,0x41
c0011bac:	83 f9 19             	cmp    ecx,0x19
c0011baf:	77 18                	ja     c0011bc9 <Sys::eject(regs*)+0x32>
c0011bb1:	8b 0c 8d 40 42 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbdc0]
c0011bb8:	85 c9                	test   ecx,ecx
c0011bba:	74 0d                	je     c0011bc9 <Sys::eject(regs*)+0x32>
c0011bbc:	83 ec 0c             	sub    esp,0xc
c0011bbf:	51                   	push   ecx
c0011bc0:	e8 a9 c3 ff ff       	call   c000df6e <LogicalDisk::eject()>
c0011bc5:	83 c4 10             	add    esp,0x10
c0011bc8:	99                   	cdq    
c0011bc9:	83 c4 0c             	add    esp,0xc
c0011bcc:	c3                   	ret    

c0011bcd <Sys::exit(regs*)>:
c0011bcd:	83 ec 18             	sub    esp,0x18
c0011bd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011bd4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011bd7:	e8 dc 34 00 00       	call   c00150b8 <terminateTask(int)>
c0011bdc:	83 c8 ff             	or     eax,0xffffffff
c0011bdf:	83 c4 1c             	add    esp,0x1c
c0011be2:	89 c2                	mov    edx,eax
c0011be4:	c3                   	ret    

c0011be5 <Sys::getCwd(regs*)>:
c0011be5:	83 ec 10             	sub    esp,0x10
c0011be8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011bec:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011bef:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011bf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bf7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011bfa:	e8 69 a0 ff ff       	call   c000bc68 <Fs::getcwd(Process*, char*, int)>
c0011bff:	83 c4 1c             	add    esp,0x1c
c0011c02:	99                   	cdq    
c0011c03:	c3                   	ret    

c0011c04 <Sys::getPID(regs*)>:
c0011c04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0e:	99                   	cdq    
c0011c0f:	c3                   	ret    

c0011c10 <Sys::getRAMData(regs*)>:
c0011c10:	8b 0d 18 1d 02 c0    	mov    ecx,DWORD PTR ds:0xc0021d18
c0011c16:	69 05 14 1d 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0021d14,0xc8
c0011c20:	99                   	cdq    
c0011c21:	f7 f9                	idiv   ecx
c0011c23:	c1 e0 18             	shl    eax,0x18
c0011c26:	09 c8                	or     eax,ecx
c0011c28:	99                   	cdq    
c0011c29:	c3                   	ret    

c0011c2a <Sys::getVGAPtr(regs*)>:
c0011c2a:	55                   	push   ebp
c0011c2b:	57                   	push   edi
c0011c2c:	56                   	push   esi
c0011c2d:	53                   	push   ebx
c0011c2e:	83 ec 18             	sub    esp,0x18
c0011c31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011c35:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011c38:	e8 7b 2f 00 00       	call   c0014bb8 <Thr::processFromPID(int)>
c0011c3d:	83 c4 10             	add    esp,0x10
c0011c40:	89 c1                	mov    ecx,eax
c0011c42:	b8 01 00 00 00       	mov    eax,0x1
c0011c47:	85 c9                	test   ecx,ecx
c0011c49:	74 57                	je     c0011ca2 <Sys::getVGAPtr(regs*)+0x78>
c0011c4b:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011c51:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011c55:	74 0c                	je     c0011c63 <Sys::getVGAPtr(regs*)+0x39>
c0011c57:	83 ec 0c             	sub    esp,0xc
c0011c5a:	55                   	push   ebp
c0011c5b:	e8 31 7c ff ff       	call   c0009891 <setActiveTerminal(VgaText*)>
c0011c60:	83 c4 10             	add    esp,0x10
c0011c63:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011c66:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011c69:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011c6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011c70:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011c73:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c76:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011c7c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c7f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011c82:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011c88:	50                   	push   eax
c0011c89:	50                   	push   eax
c0011c8a:	68 df fb 01 c0       	push   0xc001fbdf
c0011c8f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c92:	05 a8 0f 00 00       	add    eax,0xfa8
c0011c97:	50                   	push   eax
c0011c98:	e8 83 e9 fe ff       	call   c0000620 <strcpy>
c0011c9d:	83 c4 10             	add    esp,0x10
c0011ca0:	31 c0                	xor    eax,eax
c0011ca2:	83 c4 0c             	add    esp,0xc
c0011ca5:	31 d2                	xor    edx,edx
c0011ca7:	5b                   	pop    ebx
c0011ca8:	5e                   	pop    esi
c0011ca9:	5f                   	pop    edi
c0011caa:	5d                   	pop    ebp
c0011cab:	c3                   	ret    

c0011cac <Sys::loadDLL(regs*)>:
c0011cac:	56                   	push   esi
c0011cad:	53                   	push   ebx
c0011cae:	31 d2                	xor    edx,edx
c0011cb0:	51                   	push   ecx
c0011cb1:	b8 01 00 00 00       	mov    eax,0x1
c0011cb6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011cba:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011cbe:	0f 84 8c 00 00 00    	je     c0011d50 <Sys::loadDLL(regs*)+0xa4>
c0011cc4:	83 ec 0c             	sub    esp,0xc
c0011cc7:	68 14 01 00 00       	push   0x114
c0011ccc:	e8 90 6e ff ff       	call   c0008b61 <malloc>
c0011cd1:	83 c4 0c             	add    esp,0xc
c0011cd4:	89 c3                	mov    ebx,eax
c0011cd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cdb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011cde:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011ce1:	53                   	push   ebx
c0011ce2:	e8 7f a1 ff ff       	call   c000be66 <File::File(char const*, Process*)>
c0011ce7:	83 c4 10             	add    esp,0x10
c0011cea:	31 d2                	xor    edx,edx
c0011cec:	b8 02 00 00 00       	mov    eax,0x2
c0011cf1:	85 db                	test   ebx,ebx
c0011cf3:	74 5b                	je     c0011d50 <Sys::loadDLL(regs*)+0xa4>
c0011cf5:	83 ec 0c             	sub    esp,0xc
c0011cf8:	53                   	push   ebx
c0011cf9:	e8 96 a4 ff ff       	call   c000c194 <File::exists()>
c0011cfe:	83 c4 10             	add    esp,0x10
c0011d01:	84 c0                	test   al,al
c0011d03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d05:	75 11                	jne    c0011d18 <Sys::loadDLL(regs*)+0x6c>
c0011d07:	83 ec 0c             	sub    esp,0xc
c0011d0a:	53                   	push   ebx
c0011d0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d0e:	83 c4 10             	add    esp,0x10
c0011d11:	b8 03 00 00 00       	mov    eax,0x3
c0011d16:	eb 36                	jmp    c0011d4e <Sys::loadDLL(regs*)+0xa2>
c0011d18:	83 ec 0c             	sub    esp,0xc
c0011d1b:	53                   	push   ebx
c0011d1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d1f:	58                   	pop    eax
c0011d20:	5a                   	pop    edx
c0011d21:	6a 00                	push   0x0
c0011d23:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011d26:	e8 77 20 00 00       	call   c0013da2 <Thr::loadDLL(char const*, bool)>
c0011d2b:	83 c4 10             	add    esp,0x10
c0011d2e:	89 c1                	mov    ecx,eax
c0011d30:	31 d2                	xor    edx,edx
c0011d32:	b8 04 00 00 00       	mov    eax,0x4
c0011d37:	85 c9                	test   ecx,ecx
c0011d39:	74 15                	je     c0011d50 <Sys::loadDLL(regs*)+0xa4>
c0011d3b:	53                   	push   ebx
c0011d3c:	53                   	push   ebx
c0011d3d:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0011d43:	51                   	push   ecx
c0011d44:	e8 8a 22 00 00       	call   c0013fd3 <Thr::executeDLL(unsigned long, void*)>
c0011d49:	83 c4 10             	add    esp,0x10
c0011d4c:	31 c0                	xor    eax,eax
c0011d4e:	31 d2                	xor    edx,edx
c0011d50:	59                   	pop    ecx
c0011d51:	5b                   	pop    ebx
c0011d52:	5e                   	pop    esi
c0011d53:	c3                   	ret    

c0011d54 <Sys::read(regs*)>:
c0011d54:	57                   	push   edi
c0011d55:	56                   	push   esi
c0011d56:	53                   	push   ebx
c0011d57:	83 ec 10             	sub    esp,0x10
c0011d5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d5e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d61:	83 f8 02             	cmp    eax,0x2
c0011d64:	77 10                	ja     c0011d76 <Sys::read(regs*)+0x22>
c0011d66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d6b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d6e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d74:	eb 0e                	jmp    c0011d84 <Sys::read(regs*)+0x30>
c0011d76:	83 ec 0c             	sub    esp,0xc
c0011d79:	50                   	push   eax
c0011d7a:	e8 c8 87 ff ff       	call   c000a547 <getFromFileDescriptor(int)>
c0011d7f:	83 c4 10             	add    esp,0x10
c0011d82:	89 c1                	mov    ecx,eax
c0011d84:	83 c8 ff             	or     eax,0xffffffff
c0011d87:	85 c9                	test   ecx,ecx
c0011d89:	89 c2                	mov    edx,eax
c0011d8b:	74 28                	je     c0011db5 <Sys::read(regs*)+0x61>
c0011d8d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d95:	31 ff                	xor    edi,edi
c0011d97:	83 ec 0c             	sub    esp,0xc
c0011d9a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d9c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011da0:	52                   	push   edx
c0011da1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011da4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011da7:	57                   	push   edi
c0011da8:	56                   	push   esi
c0011da9:	51                   	push   ecx
c0011daa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011dad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011db1:	83 c4 20             	add    esp,0x20
c0011db4:	99                   	cdq    
c0011db5:	83 c4 10             	add    esp,0x10
c0011db8:	5b                   	pop    ebx
c0011db9:	5e                   	pop    esi
c0011dba:	5f                   	pop    edi
c0011dbb:	c3                   	ret    

c0011dbc <Sys::sbrk(regs*)>:
c0011dbc:	56                   	push   esi
c0011dbd:	53                   	push   ebx
c0011dbe:	50                   	push   eax
c0011dbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011dc8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dcb:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011dce:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011dd4:	85 db                	test   ebx,ebx
c0011dd6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011dd9:	74 02                	je     c0011ddd <Sys::sbrk(regs*)+0x21>
c0011ddb:	79 06                	jns    c0011de3 <Sys::sbrk(regs*)+0x27>
c0011ddd:	89 f0                	mov    eax,esi
c0011ddf:	31 d2                	xor    edx,edx
c0011de1:	eb 2a                	jmp    c0011e0d <Sys::sbrk(regs*)+0x51>
c0011de3:	83 c8 ff             	or     eax,0xffffffff
c0011de6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011dec:	89 c2                	mov    edx,eax
c0011dee:	77 1d                	ja     c0011e0d <Sys::sbrk(regs*)+0x51>
c0011df0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011df6:	50                   	push   eax
c0011df7:	c1 ea 0c             	shr    edx,0xc
c0011dfa:	68 07 0c 00 00       	push   0xc07
c0011dff:	52                   	push   edx
c0011e00:	51                   	push   ecx
c0011e01:	e8 30 90 ff ff       	call   c000ae36 <VAS::allocatePages(int, int)>
c0011e06:	89 f0                	mov    eax,esi
c0011e08:	31 d2                	xor    edx,edx
c0011e0a:	83 c4 10             	add    esp,0x10
c0011e0d:	59                   	pop    ecx
c0011e0e:	5b                   	pop    ebx
c0011e0f:	5e                   	pop    esi
c0011e10:	c3                   	ret    

c0011e11 <Sys::setCwd(regs*)>:
c0011e11:	83 ec 14             	sub    esp,0x14
c0011e14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e18:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011e1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e20:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011e23:	e8 0b a4 ff ff       	call   c000c233 <Fs::setcwd(Process*, char*)>
c0011e28:	83 c4 1c             	add    esp,0x1c
c0011e2b:	99                   	cdq    
c0011e2c:	c3                   	ret    

c0011e2d <Sys::setTime(regs*)>:
c0011e2d:	55                   	push   ebp
c0011e2e:	31 c9                	xor    ecx,ecx
c0011e30:	57                   	push   edi
c0011e31:	bd 0c 00 00 00       	mov    ebp,0xc
c0011e36:	56                   	push   esi
c0011e37:	53                   	push   ebx
c0011e38:	31 db                	xor    ebx,ebx
c0011e3a:	83 ec 10             	sub    esp,0x10
c0011e3d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011e41:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011e44:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011e47:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011e4a:	89 c2                	mov    edx,eax
c0011e4c:	66 81 ef 6c 07       	sub    di,0x76c
c0011e51:	83 e2 1f             	and    edx,0x1f
c0011e54:	c1 e7 10             	shl    edi,0x10
c0011e57:	42                   	inc    edx
c0011e58:	c1 e8 05             	shr    eax,0x5
c0011e5b:	88 d1                	mov    cl,dl
c0011e5d:	31 d2                	xor    edx,edx
c0011e5f:	f7 f5                	div    ebp
c0011e61:	89 dd                	mov    ebp,ebx
c0011e63:	88 d5                	mov    ch,dl
c0011e65:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011e6b:	0f b7 c1             	movzx  eax,cx
c0011e6e:	31 d2                	xor    edx,edx
c0011e70:	09 f8                	or     eax,edi
c0011e72:	bf 3c 00 00 00       	mov    edi,0x3c
c0011e77:	89 c1                	mov    ecx,eax
c0011e79:	89 f0                	mov    eax,esi
c0011e7b:	f7 f7                	div    edi
c0011e7d:	c1 e2 10             	shl    edx,0x10
c0011e80:	09 d5                	or     ebp,edx
c0011e82:	31 d2                	xor    edx,edx
c0011e84:	89 eb                	mov    ebx,ebp
c0011e86:	f7 f7                	div    edi
c0011e88:	bf 10 0e 00 00       	mov    edi,0xe10
c0011e8d:	88 d7                	mov    bh,dl
c0011e8f:	89 f0                	mov    eax,esi
c0011e91:	31 d2                	xor    edx,edx
c0011e93:	f7 f7                	div    edi
c0011e95:	bf 18 00 00 00       	mov    edi,0x18
c0011e9a:	31 d2                	xor    edx,edx
c0011e9c:	f7 f7                	div    edi
c0011e9e:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c0011ea3:	88 d3                	mov    bl,dl
c0011ea5:	53                   	push   ebx
c0011ea6:	51                   	push   ecx
c0011ea7:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011ead:	e8 92 ab ff ff       	call   c000ca44 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011eb2:	83 c4 1c             	add    esp,0x1c
c0011eb5:	83 f0 01             	xor    eax,0x1
c0011eb8:	5b                   	pop    ebx
c0011eb9:	0f b6 c0             	movzx  eax,al
c0011ebc:	5e                   	pop    esi
c0011ebd:	31 d2                	xor    edx,edx
c0011ebf:	5f                   	pop    edi
c0011ec0:	5d                   	pop    ebp
c0011ec1:	c3                   	ret    

c0011ec2 <Sys::timezone(regs*)>:
c0011ec2:	53                   	push   ebx
c0011ec3:	83 ec 08             	sub    esp,0x8
c0011ec6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011eca:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011ece:	75 17                	jne    c0011ee7 <Sys::timezone(regs*)+0x25>
c0011ed0:	83 ec 0c             	sub    esp,0xc
c0011ed3:	68 e9 fb 01 c0       	push   0xc001fbe9
c0011ed8:	e8 13 9a ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0011edd:	83 c8 ff             	or     eax,0xffffffff
c0011ee0:	83 c4 10             	add    esp,0x10
c0011ee3:	89 c2                	mov    edx,eax
c0011ee5:	eb 20                	jmp    c0011f07 <Sys::timezone(regs*)+0x45>
c0011ee7:	83 ec 0c             	sub    esp,0xc
c0011eea:	68 fe fb 01 c0       	push   0xc001fbfe
c0011eef:	e8 fc 99 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0011ef4:	58                   	pop    eax
c0011ef5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011ef8:	e8 a3 a8 ff ff       	call   c000c7a0 <User::loadClockSettings(int)>
c0011efd:	83 c4 10             	add    esp,0x10
c0011f00:	b8 01 00 00 00       	mov    eax,0x1
c0011f05:	31 d2                	xor    edx,edx
c0011f07:	83 c4 08             	add    esp,0x8
c0011f0a:	5b                   	pop    ebx
c0011f0b:	c3                   	ret    

c0011f0c <Sys::write(regs*)>:
c0011f0c:	57                   	push   edi
c0011f0d:	56                   	push   esi
c0011f0e:	53                   	push   ebx
c0011f0f:	83 ec 10             	sub    esp,0x10
c0011f12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f16:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f19:	83 f8 02             	cmp    eax,0x2
c0011f1c:	77 10                	ja     c0011f2e <Sys::write(regs*)+0x22>
c0011f1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f23:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f26:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011f2c:	eb 0e                	jmp    c0011f3c <Sys::write(regs*)+0x30>
c0011f2e:	83 ec 0c             	sub    esp,0xc
c0011f31:	50                   	push   eax
c0011f32:	e8 10 86 ff ff       	call   c000a547 <getFromFileDescriptor(int)>
c0011f37:	83 c4 10             	add    esp,0x10
c0011f3a:	89 c1                	mov    ecx,eax
c0011f3c:	83 c8 ff             	or     eax,0xffffffff
c0011f3f:	85 c9                	test   ecx,ecx
c0011f41:	89 c2                	mov    edx,eax
c0011f43:	74 28                	je     c0011f6d <Sys::write(regs*)+0x61>
c0011f45:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f4d:	31 ff                	xor    edi,edi
c0011f4f:	83 ec 0c             	sub    esp,0xc
c0011f52:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011f54:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011f58:	52                   	push   edx
c0011f59:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011f5c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011f5f:	57                   	push   edi
c0011f60:	56                   	push   esi
c0011f61:	51                   	push   ecx
c0011f62:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011f65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f69:	83 c4 20             	add    esp,0x20
c0011f6c:	99                   	cdq    
c0011f6d:	83 c4 10             	add    esp,0x10
c0011f70:	5b                   	pop    ebx
c0011f71:	5e                   	pop    esi
c0011f72:	5f                   	pop    edi
c0011f73:	c3                   	ret    

c0011f74 <Sys::wsbe(regs*)>:
c0011f74:	57                   	push   edi
c0011f75:	b9 0b 00 00 00       	mov    ecx,0xb
c0011f7a:	56                   	push   esi
c0011f7b:	be 3d fc 01 c0       	mov    esi,0xc001fc3d
c0011f80:	53                   	push   ebx
c0011f81:	83 ec 30             	sub    esp,0x30
c0011f84:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011f88:	fc                   	cld    
c0011f89:	83 ec 0c             	sub    esp,0xc
c0011f8c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011f8e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011f92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f9a:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011fa0:	8b 06                	mov    eax,DWORD PTR [esi]
c0011fa2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011fa5:	57                   	push   edi
c0011fa6:	e8 b5 e5 fe ff       	call   c0000560 <strlen>
c0011fab:	5a                   	pop    edx
c0011fac:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011fb0:	52                   	push   edx
c0011fb1:	31 d2                	xor    edx,edx
c0011fb3:	57                   	push   edi
c0011fb4:	52                   	push   edx
c0011fb5:	50                   	push   eax
c0011fb6:	56                   	push   esi
c0011fb7:	ff d3                	call   ebx
c0011fb9:	83 c4 14             	add    esp,0x14
c0011fbc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011fc0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011fc3:	e8 f0 30 00 00       	call   c00150b8 <terminateTask(int)>
c0011fc8:	83 c4 40             	add    esp,0x40
c0011fcb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011fd0:	5b                   	pop    ebx
c0011fd1:	31 d2                	xor    edx,edx
c0011fd3:	5e                   	pop    esi
c0011fd4:	5f                   	pop    edi
c0011fd5:	c3                   	ret    

c0011fd6 <Sys::yield(regs*)>:
c0011fd6:	83 ec 0c             	sub    esp,0xc
c0011fd9:	fa                   	cli    
c0011fda:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0011fe0:	e8 af 27 00 00       	call   c0014794 <schedule()>
c0011fe5:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0011fea:	48                   	dec    eax
c0011feb:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0011ff0:	75 01                	jne    c0011ff3 <Sys::yield(regs*)+0x1d>
c0011ff2:	fb                   	sti    
c0011ff3:	31 c0                	xor    eax,eax
c0011ff5:	31 d2                	xor    edx,edx
c0011ff7:	83 c4 0c             	add    esp,0xc
c0011ffa:	c3                   	ret    

c0011ffb <sysCallSeekDir(regs*)>:
c0011ffb:	31 c0                	xor    eax,eax
c0011ffd:	31 d2                	xor    edx,edx
c0011fff:	c3                   	ret    

c0012000 <sysCallTellDir(regs*)>:
c0012000:	31 c0                	xor    eax,eax
c0012002:	31 d2                	xor    edx,edx
c0012004:	c3                   	ret    

c0012005 <sysCallVerify(regs*)>:
c0012005:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012009:	31 d2                	xor    edx,edx
c001200b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001200e:	c3                   	ret    

c001200f <sysCallGetArgc(regs*)>:
c001200f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012014:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012017:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001201d:	99                   	cdq    
c001201e:	c3                   	ret    

c001201f <sysCallTTYName(regs*)>:
c001201f:	b8 01 00 00 00       	mov    eax,0x1
c0012024:	31 d2                	xor    edx,edx
c0012026:	c3                   	ret    

c0012027 <sysFormatDisk(regs*)>:
c0012027:	56                   	push   esi
c0012028:	53                   	push   ebx
c0012029:	50                   	push   eax
c001202a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001202e:	8b 1d d4 1d 02 c0    	mov    ebx,DWORD PTR ds:0xc0021dd4
c0012034:	eb 28                	jmp    c001205e <sysFormatDisk(regs*)+0x37>
c0012036:	83 ec 0c             	sub    esp,0xc
c0012039:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001203c:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001203f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012041:	51                   	push   ecx
c0012042:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0012045:	51                   	push   ecx
c0012046:	50                   	push   eax
c0012047:	8b 04 85 40 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbdc0]
c001204e:	50                   	push   eax
c001204f:	53                   	push   ebx
c0012050:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0012053:	83 c4 20             	add    esp,0x20
c0012056:	83 f8 08             	cmp    eax,0x8
c0012059:	75 12                	jne    c001206d <sysFormatDisk(regs*)+0x46>
c001205b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001205e:	85 db                	test   ebx,ebx
c0012060:	75 d4                	jne    c0012036 <sysFormatDisk(regs*)+0xf>
c0012062:	59                   	pop    ecx
c0012063:	b8 03 00 00 00       	mov    eax,0x3
c0012068:	31 d2                	xor    edx,edx
c001206a:	5b                   	pop    ebx
c001206b:	5e                   	pop    esi
c001206c:	c3                   	ret    
c001206d:	85 c0                	test   eax,eax
c001206f:	74 1b                	je     c001208c <sysFormatDisk(regs*)+0x65>
c0012071:	83 f8 09             	cmp    eax,0x9
c0012074:	74 0b                	je     c0012081 <sysFormatDisk(regs*)+0x5a>
c0012076:	59                   	pop    ecx
c0012077:	b8 02 00 00 00       	mov    eax,0x2
c001207c:	31 d2                	xor    edx,edx
c001207e:	5b                   	pop    ebx
c001207f:	5e                   	pop    esi
c0012080:	c3                   	ret    
c0012081:	59                   	pop    ecx
c0012082:	b8 01 00 00 00       	mov    eax,0x1
c0012087:	31 d2                	xor    edx,edx
c0012089:	5b                   	pop    ebx
c001208a:	5e                   	pop    esi
c001208b:	c3                   	ret    
c001208c:	59                   	pop    ecx
c001208d:	31 c0                	xor    eax,eax
c001208f:	31 d2                	xor    edx,edx
c0012091:	5b                   	pop    ebx
c0012092:	5e                   	pop    esi
c0012093:	c3                   	ret    

c0012094 <sysSetDiskVolumeLabel(regs*)>:
c0012094:	56                   	push   esi
c0012095:	53                   	push   ebx
c0012096:	53                   	push   ebx
c0012097:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001209b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001209e:	83 f8 19             	cmp    eax,0x19
c00120a1:	77 2d                	ja     c00120d0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00120a3:	8b 0c 85 40 42 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbdc0]
c00120aa:	85 c9                	test   ecx,ecx
c00120ac:	74 22                	je     c00120d0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00120ae:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00120b1:	85 db                	test   ebx,ebx
c00120b3:	74 1b                	je     c00120d0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00120b5:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00120bb:	85 d2                	test   edx,edx
c00120bd:	74 11                	je     c00120d0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00120bf:	8b 32                	mov    esi,DWORD PTR [edx]
c00120c1:	53                   	push   ebx
c00120c2:	50                   	push   eax
c00120c3:	51                   	push   ecx
c00120c4:	52                   	push   edx
c00120c5:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00120c8:	83 c4 10             	add    esp,0x10
c00120cb:	99                   	cdq    
c00120cc:	59                   	pop    ecx
c00120cd:	5b                   	pop    ebx
c00120ce:	5e                   	pop    esi
c00120cf:	c3                   	ret    
c00120d0:	59                   	pop    ecx
c00120d1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00120d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120db:	5b                   	pop    ebx
c00120dc:	5e                   	pop    esi
c00120dd:	c3                   	ret    

c00120de <sysGetDiskVolumeLabel(regs*)>:
c00120de:	57                   	push   edi
c00120df:	56                   	push   esi
c00120e0:	53                   	push   ebx
c00120e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120e5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00120e8:	83 fa 19             	cmp    edx,0x19
c00120eb:	77 38                	ja     c0012125 <sysGetDiskVolumeLabel(regs*)+0x47>
c00120ed:	8b 0c 95 40 42 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdbdc0]
c00120f4:	85 c9                	test   ecx,ecx
c00120f6:	74 2d                	je     c0012125 <sysGetDiskVolumeLabel(regs*)+0x47>
c00120f8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00120fb:	85 db                	test   ebx,ebx
c00120fd:	74 26                	je     c0012125 <sysGetDiskVolumeLabel(regs*)+0x47>
c00120ff:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012102:	85 f6                	test   esi,esi
c0012104:	74 1f                	je     c0012125 <sysGetDiskVolumeLabel(regs*)+0x47>
c0012106:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001210c:	85 c0                	test   eax,eax
c001210e:	74 15                	je     c0012125 <sysGetDiskVolumeLabel(regs*)+0x47>
c0012110:	83 ec 0c             	sub    esp,0xc
c0012113:	8b 38                	mov    edi,DWORD PTR [eax]
c0012115:	56                   	push   esi
c0012116:	53                   	push   ebx
c0012117:	52                   	push   edx
c0012118:	51                   	push   ecx
c0012119:	50                   	push   eax
c001211a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001211d:	83 c4 20             	add    esp,0x20
c0012120:	99                   	cdq    
c0012121:	5b                   	pop    ebx
c0012122:	5e                   	pop    esi
c0012123:	5f                   	pop    edi
c0012124:	c3                   	ret    
c0012125:	5b                   	pop    ebx
c0012126:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001212b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012130:	5e                   	pop    esi
c0012131:	5f                   	pop    edi
c0012132:	c3                   	ret    

c0012133 <sysShutdown(regs*)>:
c0012133:	83 ec 0c             	sub    esp,0xc
c0012136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001213a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001213d:	85 c0                	test   eax,eax
c001213f:	74 18                	je     c0012159 <sysShutdown(regs*)+0x26>
c0012141:	83 f8 01             	cmp    eax,0x1
c0012144:	74 38                	je     c001217e <sysShutdown(regs*)+0x4b>
c0012146:	83 f8 02             	cmp    eax,0x2
c0012149:	74 24                	je     c001216f <sysShutdown(regs*)+0x3c>
c001214b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012150:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012155:	83 c4 0c             	add    esp,0xc
c0012158:	c3                   	ret    
c0012159:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c001215e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012160:	6a 00                	push   0x0
c0012162:	6a 00                	push   0x0
c0012164:	6a 00                	push   0x0
c0012166:	50                   	push   eax
c0012167:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001216a:	83 c4 10             	add    esp,0x10
c001216d:	eb dc                	jmp    c001214b <sysShutdown(regs*)+0x18>
c001216f:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c0012174:	8b 10                	mov    edx,DWORD PTR [eax]
c0012176:	6a 00                	push   0x0
c0012178:	6a 00                	push   0x0
c001217a:	6a 01                	push   0x1
c001217c:	eb e8                	jmp    c0012166 <sysShutdown(regs*)+0x33>
c001217e:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c0012183:	85 c0                	test   eax,eax
c0012185:	74 02                	je     c0012189 <sysShutdown(regs*)+0x56>
c0012187:	ff d0                	call   eax
c0012189:	31 c0                	xor    eax,eax
c001218b:	31 d2                	xor    edx,edx
c001218d:	83 c4 0c             	add    esp,0xc
c0012190:	c3                   	ret    

c0012191 <sysCallRealpath(regs*)>:
c0012191:	83 ec 0c             	sub    esp,0xc
c0012194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012198:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001219b:	85 d2                	test   edx,edx
c001219d:	74 07                	je     c00121a6 <sysCallRealpath(regs*)+0x15>
c001219f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00121a2:	85 c0                	test   eax,eax
c00121a4:	75 0b                	jne    c00121b1 <sysCallRealpath(regs*)+0x20>
c00121a6:	b8 01 00 00 00       	mov    eax,0x1
c00121ab:	31 d2                	xor    edx,edx
c00121ad:	83 c4 0c             	add    esp,0xc
c00121b0:	c3                   	ret    
c00121b1:	51                   	push   ecx
c00121b2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00121b8:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00121bb:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00121c1:	51                   	push   ecx
c00121c2:	52                   	push   edx
c00121c3:	50                   	push   eax
c00121c4:	e8 f3 9a ff ff       	call   c000bcbc <Fs::standardiseFiles(char*, char const*, char const*)>
c00121c9:	83 c4 10             	add    esp,0x10
c00121cc:	31 c0                	xor    eax,eax
c00121ce:	31 d2                	xor    edx,edx
c00121d0:	83 c4 0c             	add    esp,0xc
c00121d3:	c3                   	ret    

c00121d4 <sysCallReadDir(regs*)>:
c00121d4:	53                   	push   ebx
c00121d5:	83 ec 18             	sub    esp,0x18
c00121d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00121dc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00121df:	83 f8 02             	cmp    eax,0x2
c00121e2:	76 61                	jbe    c0012245 <sysCallReadDir(regs*)+0x71>
c00121e4:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00121eb:	77 49                	ja     c0012236 <sysCallReadDir(regs*)+0x62>
c00121ed:	83 ec 0c             	sub    esp,0xc
c00121f0:	50                   	push   eax
c00121f1:	e8 51 83 ff ff       	call   c000a547 <getFromFileDescriptor(int)>
c00121f6:	83 c4 10             	add    esp,0x10
c00121f9:	85 c0                	test   eax,eax
c00121fb:	74 39                	je     c0012236 <sysCallReadDir(regs*)+0x62>
c00121fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012205:	83 ec 0c             	sub    esp,0xc
c0012208:	8b 10                	mov    edx,DWORD PTR [eax]
c001220a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001220e:	51                   	push   ecx
c001220f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012212:	51                   	push   ecx
c0012213:	6a 00                	push   0x0
c0012215:	68 10 01 00 00       	push   0x110
c001221a:	50                   	push   eax
c001221b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001221e:	83 c4 20             	add    esp,0x20
c0012221:	85 c0                	test   eax,eax
c0012223:	74 29                	je     c001224e <sysCallReadDir(regs*)+0x7a>
c0012225:	83 f8 07             	cmp    eax,0x7
c0012228:	74 1b                	je     c0012245 <sysCallReadDir(regs*)+0x71>
c001222a:	b8 02 00 00 00       	mov    eax,0x2
c001222f:	31 d2                	xor    edx,edx
c0012231:	83 c4 18             	add    esp,0x18
c0012234:	5b                   	pop    ebx
c0012235:	c3                   	ret    
c0012236:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001223b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012240:	83 c4 18             	add    esp,0x18
c0012243:	5b                   	pop    ebx
c0012244:	c3                   	ret    
c0012245:	b8 01 00 00 00       	mov    eax,0x1
c001224a:	31 d2                	xor    edx,edx
c001224c:	eb e3                	jmp    c0012231 <sysCallReadDir(regs*)+0x5d>
c001224e:	31 c0                	xor    eax,eax
c0012250:	31 d2                	xor    edx,edx
c0012252:	eb dd                	jmp    c0012231 <sysCallReadDir(regs*)+0x5d>

c0012254 <sysCallIsATTY(regs*)>:
c0012254:	83 ec 0c             	sub    esp,0xc
c0012257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001225b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001225e:	83 f8 02             	cmp    eax,0x2
c0012261:	76 07                	jbe    c001226a <sysCallIsATTY(regs*)+0x16>
c0012263:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012268:	75 28                	jne    c0012292 <sysCallIsATTY(regs*)+0x3e>
c001226a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001226f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012272:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012278:	85 c0                	test   eax,eax
c001227a:	74 26                	je     c00122a2 <sysCallIsATTY(regs*)+0x4e>
c001227c:	83 ec 0c             	sub    esp,0xc
c001227f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012281:	50                   	push   eax
c0012282:	ff 12                	call   DWORD PTR [edx]
c0012284:	31 d2                	xor    edx,edx
c0012286:	25 ff 00 00 00       	and    eax,0xff
c001228b:	83 c4 10             	add    esp,0x10
c001228e:	83 c4 0c             	add    esp,0xc
c0012291:	c3                   	ret    
c0012292:	83 ec 0c             	sub    esp,0xc
c0012295:	50                   	push   eax
c0012296:	e8 ac 82 ff ff       	call   c000a547 <getFromFileDescriptor(int)>
c001229b:	83 c4 10             	add    esp,0x10
c001229e:	85 c0                	test   eax,eax
c00122a0:	75 da                	jne    c001227c <sysCallIsATTY(regs*)+0x28>
c00122a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122ac:	83 c4 0c             	add    esp,0xc
c00122af:	c3                   	ret    

c00122b0 <sysCallSeek(regs*)>:
c00122b0:	53                   	push   ebx
c00122b1:	83 ec 08             	sub    esp,0x8
c00122b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122bb:	8d 50 fd             	lea    edx,[eax-0x3]
c00122be:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00122c4:	77 34                	ja     c00122fa <sysCallSeek(regs*)+0x4a>
c00122c6:	83 ec 0c             	sub    esp,0xc
c00122c9:	50                   	push   eax
c00122ca:	e8 78 82 ff ff       	call   c000a547 <getFromFileDescriptor(int)>
c00122cf:	83 c4 0c             	add    esp,0xc
c00122d2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00122d5:	31 db                	xor    ebx,ebx
c00122d7:	53                   	push   ebx
c00122d8:	51                   	push   ecx
c00122d9:	50                   	push   eax
c00122da:	e8 05 9d ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c00122df:	83 c4 10             	add    esp,0x10
c00122e2:	85 c0                	test   eax,eax
c00122e4:	0f 95 c0             	setne  al
c00122e7:	31 d2                	xor    edx,edx
c00122e9:	25 ff 00 00 00       	and    eax,0xff
c00122ee:	f7 d8                	neg    eax
c00122f0:	83 d2 00             	adc    edx,0x0
c00122f3:	83 c4 08             	add    esp,0x8
c00122f6:	f7 da                	neg    edx
c00122f8:	5b                   	pop    ebx
c00122f9:	c3                   	ret    
c00122fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012304:	83 c4 08             	add    esp,0x8
c0012307:	5b                   	pop    ebx
c0012308:	c3                   	ret    

c0012309 <sysCallTell(regs*)>:
c0012309:	53                   	push   ebx
c001230a:	83 ec 08             	sub    esp,0x8
c001230d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012311:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012314:	83 f8 02             	cmp    eax,0x2
c0012317:	76 50                	jbe    c0012369 <sysCallTell(regs*)+0x60>
c0012319:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001231e:	76 19                	jbe    c0012339 <sysCallTell(regs*)+0x30>
c0012320:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012323:	31 d2                	xor    edx,edx
c0012325:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001232b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012332:	31 c0                	xor    eax,eax
c0012334:	83 c4 08             	add    esp,0x8
c0012337:	5b                   	pop    ebx
c0012338:	c3                   	ret    
c0012339:	83 ec 0c             	sub    esp,0xc
c001233c:	50                   	push   eax
c001233d:	e8 05 82 ff ff       	call   c000a547 <getFromFileDescriptor(int)>
c0012342:	5a                   	pop    edx
c0012343:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012346:	59                   	pop    ecx
c0012347:	53                   	push   ebx
c0012348:	50                   	push   eax
c0012349:	e8 ec 9c ff ff       	call   c000c03a <File::tell(unsigned long long*)>
c001234e:	83 c4 10             	add    esp,0x10
c0012351:	85 c0                	test   eax,eax
c0012353:	0f 95 c0             	setne  al
c0012356:	31 d2                	xor    edx,edx
c0012358:	25 ff 00 00 00       	and    eax,0xff
c001235d:	f7 d8                	neg    eax
c001235f:	83 d2 00             	adc    edx,0x0
c0012362:	83 c4 08             	add    esp,0x8
c0012365:	f7 da                	neg    edx
c0012367:	5b                   	pop    ebx
c0012368:	c3                   	ret    
c0012369:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001236e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012373:	83 c4 08             	add    esp,0x8
c0012376:	5b                   	pop    ebx
c0012377:	c3                   	ret    

c0012378 <sysCallSize(regs*)>:
c0012378:	53                   	push   ebx
c0012379:	83 ec 18             	sub    esp,0x18
c001237c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012380:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012383:	83 f8 02             	cmp    eax,0x2
c0012386:	76 56                	jbe    c00123de <sysCallSize(regs*)+0x66>
c0012388:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001238d:	76 19                	jbe    c00123a8 <sysCallSize(regs*)+0x30>
c001238f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012392:	31 d2                	xor    edx,edx
c0012394:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001239a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00123a1:	31 c0                	xor    eax,eax
c00123a3:	83 c4 18             	add    esp,0x18
c00123a6:	5b                   	pop    ebx
c00123a7:	c3                   	ret    
c00123a8:	83 ec 0c             	sub    esp,0xc
c00123ab:	50                   	push   eax
c00123ac:	e8 96 81 ff ff       	call   c000a547 <getFromFileDescriptor(int)>
c00123b1:	83 c4 0c             	add    esp,0xc
c00123b4:	8d 54 24 13          	lea    edx,[esp+0x13]
c00123b8:	52                   	push   edx
c00123b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00123bc:	52                   	push   edx
c00123bd:	50                   	push   eax
c00123be:	e8 0f 9e ff ff       	call   c000c1d2 <File::stat(unsigned long long*, bool*)>
c00123c3:	83 c4 10             	add    esp,0x10
c00123c6:	85 c0                	test   eax,eax
c00123c8:	0f 95 c0             	setne  al
c00123cb:	31 d2                	xor    edx,edx
c00123cd:	25 ff 00 00 00       	and    eax,0xff
c00123d2:	f7 d8                	neg    eax
c00123d4:	83 d2 00             	adc    edx,0x0
c00123d7:	83 c4 18             	add    esp,0x18
c00123da:	f7 da                	neg    edx
c00123dc:	5b                   	pop    ebx
c00123dd:	c3                   	ret    
c00123de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123e8:	83 c4 18             	add    esp,0x18
c00123eb:	5b                   	pop    ebx
c00123ec:	c3                   	ret    

c00123ed <sysCallSizeFromFilename(regs*)>:
c00123ed:	57                   	push   edi
c00123ee:	56                   	push   esi
c00123ef:	53                   	push   ebx
c00123f0:	83 ec 20             	sub    esp,0x20
c00123f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00123f7:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00123fa:	83 fb 02             	cmp    ebx,0x2
c00123fd:	0f 86 8c 00 00 00    	jbe    c001248f <sysCallSizeFromFilename(regs*)+0xa2>
c0012403:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0012409:	76 1b                	jbe    c0012426 <sysCallSizeFromFilename(regs*)+0x39>
c001240b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001240e:	31 d2                	xor    edx,edx
c0012410:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012416:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001241d:	83 c4 20             	add    esp,0x20
c0012420:	31 c0                	xor    eax,eax
c0012422:	5b                   	pop    ebx
c0012423:	5e                   	pop    esi
c0012424:	5f                   	pop    edi
c0012425:	c3                   	ret    
c0012426:	83 ec 0c             	sub    esp,0xc
c0012429:	68 14 01 00 00       	push   0x114
c001242e:	e8 2e 67 ff ff       	call   c0008b61 <malloc>
c0012433:	83 c4 0c             	add    esp,0xc
c0012436:	89 c7                	mov    edi,eax
c0012438:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001243d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012440:	50                   	push   eax
c0012441:	53                   	push   ebx
c0012442:	57                   	push   edi
c0012443:	e8 1e 9a ff ff       	call   c000be66 <File::File(char const*, Process*)>
c0012448:	83 c4 0c             	add    esp,0xc
c001244b:	8d 44 24 23          	lea    eax,[esp+0x23]
c001244f:	50                   	push   eax
c0012450:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0012453:	52                   	push   edx
c0012454:	57                   	push   edi
c0012455:	e8 78 9d ff ff       	call   c000c1d2 <File::stat(unsigned long long*, bool*)>
c001245a:	83 c4 10             	add    esp,0x10
c001245d:	85 ff                	test   edi,edi
c001245f:	74 14                	je     c0012475 <sysCallSizeFromFilename(regs*)+0x88>
c0012461:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012465:	8b 17                	mov    edx,DWORD PTR [edi]
c0012467:	83 ec 0c             	sub    esp,0xc
c001246a:	57                   	push   edi
c001246b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001246e:	83 c4 10             	add    esp,0x10
c0012471:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012475:	85 c0                	test   eax,eax
c0012477:	0f 95 c0             	setne  al
c001247a:	31 d2                	xor    edx,edx
c001247c:	25 ff 00 00 00       	and    eax,0xff
c0012481:	f7 d8                	neg    eax
c0012483:	83 d2 00             	adc    edx,0x0
c0012486:	83 c4 20             	add    esp,0x20
c0012489:	f7 da                	neg    edx
c001248b:	5b                   	pop    ebx
c001248c:	5e                   	pop    esi
c001248d:	5f                   	pop    edi
c001248e:	c3                   	ret    
c001248f:	83 c4 20             	add    esp,0x20
c0012492:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012497:	5b                   	pop    ebx
c0012498:	ba ff ff ff ff       	mov    edx,0xffffffff
c001249d:	5e                   	pop    esi
c001249e:	5f                   	pop    edi
c001249f:	c3                   	ret    

c00124a0 <sysCallClose(regs*)>:
c00124a0:	53                   	push   ebx
c00124a1:	83 ec 08             	sub    esp,0x8
c00124a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124a8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00124ab:	83 f8 02             	cmp    eax,0x2
c00124ae:	76 41                	jbe    c00124f1 <sysCallClose(regs*)+0x51>
c00124b0:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00124b6:	83 fa 01             	cmp    edx,0x1
c00124b9:	76 2d                	jbe    c00124e8 <sysCallClose(regs*)+0x48>
c00124bb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00124c0:	77 2f                	ja     c00124f1 <sysCallClose(regs*)+0x51>
c00124c2:	83 ec 0c             	sub    esp,0xc
c00124c5:	50                   	push   eax
c00124c6:	e8 7c 80 ff ff       	call   c000a547 <getFromFileDescriptor(int)>
c00124cb:	89 c3                	mov    ebx,eax
c00124cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00124d0:	e8 af 9a ff ff       	call   c000bf84 <File::close()>
c00124d5:	83 c4 10             	add    esp,0x10
c00124d8:	85 db                	test   ebx,ebx
c00124da:	74 0c                	je     c00124e8 <sysCallClose(regs*)+0x48>
c00124dc:	83 ec 0c             	sub    esp,0xc
c00124df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124e1:	53                   	push   ebx
c00124e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124e5:	83 c4 10             	add    esp,0x10
c00124e8:	31 c0                	xor    eax,eax
c00124ea:	31 d2                	xor    edx,edx
c00124ec:	83 c4 08             	add    esp,0x8
c00124ef:	5b                   	pop    ebx
c00124f0:	c3                   	ret    
c00124f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124f6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124fb:	83 c4 08             	add    esp,0x8
c00124fe:	5b                   	pop    ebx
c00124ff:	c3                   	ret    

c0012500 <sysCallOpenDir(regs*)>:
c0012500:	56                   	push   esi
c0012501:	53                   	push   ebx
c0012502:	50                   	push   eax
c0012503:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012507:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001250a:	85 c0                	test   eax,eax
c001250c:	74 5b                	je     c0012569 <sysCallOpenDir(regs*)+0x69>
c001250e:	83 ec 0c             	sub    esp,0xc
c0012511:	68 14 01 00 00       	push   0x114
c0012516:	e8 46 66 ff ff       	call   c0008b61 <malloc>
c001251b:	83 c4 0c             	add    esp,0xc
c001251e:	89 c6                	mov    esi,eax
c0012520:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012525:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012528:	50                   	push   eax
c0012529:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001252c:	50                   	push   eax
c001252d:	56                   	push   esi
c001252e:	e8 5d 9e ff ff       	call   c000c390 <Directory::Directory(char const*, Process*)>
c0012533:	83 c4 10             	add    esp,0x10
c0012536:	85 f6                	test   esi,esi
c0012538:	74 2f                	je     c0012569 <sysCallOpenDir(regs*)+0x69>
c001253a:	83 ec 0c             	sub    esp,0xc
c001253d:	56                   	push   esi
c001253e:	e8 0d 9f ff ff       	call   c000c450 <Directory::open()>
c0012543:	83 c4 10             	add    esp,0x10
c0012546:	85 c0                	test   eax,eax
c0012548:	75 1f                	jne    c0012569 <sysCallOpenDir(regs*)+0x69>
c001254a:	83 ec 0c             	sub    esp,0xc
c001254d:	56                   	push   esi
c001254e:	e8 ff 7c ff ff       	call   c000a252 <UnixFile::getFileDescriptor()>
c0012553:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012556:	83 c4 10             	add    esp,0x10
c0012559:	89 02                	mov    DWORD PTR [edx],eax
c001255b:	c1 f8 1f             	sar    eax,0x1f
c001255e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012561:	31 c0                	xor    eax,eax
c0012563:	59                   	pop    ecx
c0012564:	31 d2                	xor    edx,edx
c0012566:	5b                   	pop    ebx
c0012567:	5e                   	pop    esi
c0012568:	c3                   	ret    
c0012569:	59                   	pop    ecx
c001256a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001256f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012574:	5b                   	pop    ebx
c0012575:	5e                   	pop    esi
c0012576:	c3                   	ret    

c0012577 <sysCallCloseDir(regs*)>:
c0012577:	53                   	push   ebx
c0012578:	83 ec 08             	sub    esp,0x8
c001257b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001257f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012582:	8d 50 fd             	lea    edx,[eax-0x3]
c0012585:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001258b:	77 2f                	ja     c00125bc <sysCallCloseDir(regs*)+0x45>
c001258d:	83 ec 0c             	sub    esp,0xc
c0012590:	50                   	push   eax
c0012591:	e8 b1 7f ff ff       	call   c000a547 <getFromFileDescriptor(int)>
c0012596:	89 c3                	mov    ebx,eax
c0012598:	89 04 24             	mov    DWORD PTR [esp],eax
c001259b:	e8 0c 9f ff ff       	call   c000c4ac <Directory::close()>
c00125a0:	83 c4 10             	add    esp,0x10
c00125a3:	85 db                	test   ebx,ebx
c00125a5:	74 0c                	je     c00125b3 <sysCallCloseDir(regs*)+0x3c>
c00125a7:	83 ec 0c             	sub    esp,0xc
c00125aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125ac:	53                   	push   ebx
c00125ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125b0:	83 c4 10             	add    esp,0x10
c00125b3:	31 c0                	xor    eax,eax
c00125b5:	31 d2                	xor    edx,edx
c00125b7:	83 c4 08             	add    esp,0x8
c00125ba:	5b                   	pop    ebx
c00125bb:	c3                   	ret    
c00125bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00125c6:	83 c4 08             	add    esp,0x8
c00125c9:	5b                   	pop    ebx
c00125ca:	c3                   	ret    

c00125cb <sysCallMakeDir(regs*)>:
c00125cb:	56                   	push   esi
c00125cc:	53                   	push   ebx
c00125cd:	83 ec 10             	sub    esp,0x10
c00125d0:	68 14 01 00 00       	push   0x114
c00125d5:	e8 87 65 ff ff       	call   c0008b61 <malloc>
c00125da:	83 c4 0c             	add    esp,0xc
c00125dd:	89 c3                	mov    ebx,eax
c00125df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125e4:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c00125e7:	56                   	push   esi
c00125e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125ec:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00125ef:	50                   	push   eax
c00125f0:	53                   	push   ebx
c00125f1:	e8 9a 9d ff ff       	call   c000c390 <Directory::Directory(char const*, Process*)>
c00125f6:	83 c4 10             	add    esp,0x10
c00125f9:	85 db                	test   ebx,ebx
c00125fb:	74 32                	je     c001262f <sysCallMakeDir(regs*)+0x64>
c00125fd:	83 ec 0c             	sub    esp,0xc
c0012600:	53                   	push   ebx
c0012601:	e8 2a a0 ff ff       	call   c000c630 <Directory::create()>
c0012606:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012609:	89 c6                	mov    esi,eax
c001260b:	e8 9c 9e ff ff       	call   c000c4ac <Directory::close()>
c0012610:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012612:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012615:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012618:	83 c4 10             	add    esp,0x10
c001261b:	31 c0                	xor    eax,eax
c001261d:	59                   	pop    ecx
c001261e:	85 f6                	test   esi,esi
c0012620:	5b                   	pop    ebx
c0012621:	0f 95 c0             	setne  al
c0012624:	5e                   	pop    esi
c0012625:	31 d2                	xor    edx,edx
c0012627:	f7 d8                	neg    eax
c0012629:	83 d2 00             	adc    edx,0x0
c001262c:	f7 da                	neg    edx
c001262e:	c3                   	ret    
c001262f:	59                   	pop    ecx
c0012630:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012635:	ba ff ff ff ff       	mov    edx,0xffffffff
c001263a:	5b                   	pop    ebx
c001263b:	5e                   	pop    esi
c001263c:	c3                   	ret    

c001263d <sysCallWait(regs*)>:
c001263d:	83 ec 10             	sub    esp,0x10
c0012640:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012644:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012647:	52                   	push   edx
c0012648:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001264b:	51                   	push   ecx
c001264c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001264f:	50                   	push   eax
c0012650:	e8 6b 23 00 00       	call   c00149c0 <waitTask(int, int*, int)>
c0012655:	83 c4 1c             	add    esp,0x1c
c0012658:	99                   	cdq    
c0012659:	c3                   	ret    

c001265a <sysCallNotImpl(regs*)>:
c001265a:	83 ec 18             	sub    esp,0x18
c001265d:	68 69 fc 01 c0       	push   0xc001fc69
c0012662:	e8 d8 ed ff ff       	call   c001143f <Krnl::panic(char const*)>
c0012667:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001266c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012671:	83 c4 1c             	add    esp,0x1c
c0012674:	c3                   	ret    

c0012675 <sysPanic(regs*)>:
c0012675:	83 ec 18             	sub    esp,0x18
c0012678:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001267c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001267f:	50                   	push   eax
c0012680:	e8 ba ed ff ff       	call   c001143f <Krnl::panic(char const*)>
c0012685:	b8 01 00 00 00       	mov    eax,0x1
c001268a:	31 d2                	xor    edx,edx
c001268c:	83 c4 1c             	add    esp,0x1c
c001268f:	c3                   	ret    

c0012690 <sysCallRmdir(regs*)>:
c0012690:	56                   	push   esi
c0012691:	53                   	push   ebx
c0012692:	83 ec 20             	sub    esp,0x20
c0012695:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012699:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001269c:	68 14 01 00 00       	push   0x114
c00126a1:	e8 bb 64 ff ff       	call   c0008b61 <malloc>
c00126a6:	83 c4 0c             	add    esp,0xc
c00126a9:	89 c3                	mov    ebx,eax
c00126ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126b3:	50                   	push   eax
c00126b4:	56                   	push   esi
c00126b5:	53                   	push   ebx
c00126b6:	e8 ab 97 ff ff       	call   c000be66 <File::File(char const*, Process*)>
c00126bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126be:	e8 db 99 ff ff       	call   c000c09e <File::unlink()>
c00126c3:	83 c4 10             	add    esp,0x10
c00126c6:	85 db                	test   ebx,ebx
c00126c8:	74 14                	je     c00126de <sysCallRmdir(regs*)+0x4e>
c00126ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126ce:	8b 13                	mov    edx,DWORD PTR [ebx]
c00126d0:	83 ec 0c             	sub    esp,0xc
c00126d3:	53                   	push   ebx
c00126d4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00126d7:	83 c4 10             	add    esp,0x10
c00126da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00126de:	85 c0                	test   eax,eax
c00126e0:	0f 95 c0             	setne  al
c00126e3:	31 d2                	xor    edx,edx
c00126e5:	25 ff 00 00 00       	and    eax,0xff
c00126ea:	f7 d8                	neg    eax
c00126ec:	83 d2 00             	adc    edx,0x0
c00126ef:	83 c4 14             	add    esp,0x14
c00126f2:	f7 da                	neg    edx
c00126f4:	5b                   	pop    ebx
c00126f5:	5e                   	pop    esi
c00126f6:	c3                   	ret    

c00126f7 <sysCallUnlink(regs*)>:
c00126f7:	56                   	push   esi
c00126f8:	53                   	push   ebx
c00126f9:	83 ec 20             	sub    esp,0x20
c00126fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012700:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012703:	68 14 01 00 00       	push   0x114
c0012708:	e8 54 64 ff ff       	call   c0008b61 <malloc>
c001270d:	83 c4 0c             	add    esp,0xc
c0012710:	89 c3                	mov    ebx,eax
c0012712:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012717:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001271a:	50                   	push   eax
c001271b:	56                   	push   esi
c001271c:	53                   	push   ebx
c001271d:	e8 44 97 ff ff       	call   c000be66 <File::File(char const*, Process*)>
c0012722:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012725:	e8 74 99 ff ff       	call   c000c09e <File::unlink()>
c001272a:	83 c4 10             	add    esp,0x10
c001272d:	85 db                	test   ebx,ebx
c001272f:	74 14                	je     c0012745 <sysCallUnlink(regs*)+0x4e>
c0012731:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012735:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012737:	83 ec 0c             	sub    esp,0xc
c001273a:	53                   	push   ebx
c001273b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001273e:	83 c4 10             	add    esp,0x10
c0012741:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012745:	85 c0                	test   eax,eax
c0012747:	0f 95 c0             	setne  al
c001274a:	31 d2                	xor    edx,edx
c001274c:	25 ff 00 00 00       	and    eax,0xff
c0012751:	f7 d8                	neg    eax
c0012753:	83 d2 00             	adc    edx,0x0
c0012756:	83 c4 14             	add    esp,0x14
c0012759:	f7 da                	neg    edx
c001275b:	5b                   	pop    ebx
c001275c:	5e                   	pop    esi
c001275d:	c3                   	ret    

c001275e <sysCallGetArgv(regs*)>:
c001275e:	83 ec 0c             	sub    esp,0xc
c0012761:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012765:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012768:	85 c0                	test   eax,eax
c001276a:	78 2c                	js     c0012798 <sysCallGetArgv(regs*)+0x3a>
c001276c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012772:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012775:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001277b:	7d 1b                	jge    c0012798 <sysCallGetArgv(regs*)+0x3a>
c001277d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012784:	85 c0                	test   eax,eax
c0012786:	74 18                	je     c00127a0 <sysCallGetArgv(regs*)+0x42>
c0012788:	83 ec 08             	sub    esp,0x8
c001278b:	50                   	push   eax
c001278c:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001278f:	50                   	push   eax
c0012790:	e8 8b de fe ff       	call   c0000620 <strcpy>
c0012795:	83 c4 10             	add    esp,0x10
c0012798:	31 c0                	xor    eax,eax
c001279a:	31 d2                	xor    edx,edx
c001279c:	83 c4 0c             	add    esp,0xc
c001279f:	c3                   	ret    
c00127a0:	b8 01 00 00 00       	mov    eax,0x1
c00127a5:	31 d2                	xor    edx,edx
c00127a7:	83 c4 0c             	add    esp,0xc
c00127aa:	c3                   	ret    

c00127ab <sysCallUSleep(regs*)>:
c00127ab:	83 ec 1c             	sub    esp,0x1c
c00127ae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00127b2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00127b5:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00127b8:	6a 00                	push   0x0
c00127ba:	6a 64                	push   0x64
c00127bc:	52                   	push   edx
c00127bd:	50                   	push   eax
c00127be:	e8 9d ad 00 00       	call   c001d560 <__udivdi3>
c00127c3:	83 c4 14             	add    esp,0x14
c00127c6:	50                   	push   eax
c00127c7:	e8 c8 22 00 00       	call   c0014a94 <milliTenthSleep(unsigned int)>
c00127cc:	31 c0                	xor    eax,eax
c00127ce:	31 d2                	xor    edx,edx
c00127d0:	83 c4 1c             	add    esp,0x1c
c00127d3:	c3                   	ret    

c00127d4 <sysCallSpawn(regs*)>:
c00127d4:	56                   	push   esi
c00127d5:	53                   	push   ebx
c00127d6:	50                   	push   eax
c00127d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127db:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00127de:	85 c0                	test   eax,eax
c00127e0:	75 08                	jne    c00127ea <sysCallSpawn(regs*)+0x16>
c00127e2:	59                   	pop    ecx
c00127e3:	31 c0                	xor    eax,eax
c00127e5:	31 d2                	xor    edx,edx
c00127e7:	5b                   	pop    ebx
c00127e8:	5e                   	pop    esi
c00127e9:	c3                   	ret    
c00127ea:	83 ec 0c             	sub    esp,0xc
c00127ed:	68 1f 07 00 00       	push   0x71f
c00127f2:	e8 6a 63 ff ff       	call   c0008b61 <malloc>
c00127f7:	83 c4 10             	add    esp,0x10
c00127fa:	89 c6                	mov    esi,eax
c00127fc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00127ff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012802:	85 c0                	test   eax,eax
c0012804:	75 33                	jne    c0012839 <sysCallSpawn(regs*)+0x65>
c0012806:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001280b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001280e:	52                   	push   edx
c001280f:	50                   	push   eax
c0012810:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0012813:	53                   	push   ebx
c0012814:	56                   	push   esi
c0012815:	e8 5e 19 00 00       	call   c0014178 <Process::Process(char const*, Process*, char**)>
c001281a:	83 c4 10             	add    esp,0x10
c001281d:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012824:	75 bc                	jne    c00127e2 <sysCallSpawn(regs*)+0xe>
c0012826:	83 ec 0c             	sub    esp,0xc
c0012829:	56                   	push   esi
c001282a:	e8 3d 1e 00 00       	call   c001466c <Process::createUserThread()>
c001282f:	8b 06                	mov    eax,DWORD PTR [esi]
c0012831:	83 c4 10             	add    esp,0x10
c0012834:	99                   	cdq    
c0012835:	59                   	pop    ecx
c0012836:	5b                   	pop    ebx
c0012837:	5e                   	pop    esi
c0012838:	c3                   	ret    
c0012839:	31 c0                	xor    eax,eax
c001283b:	eb d1                	jmp    c001280e <sysCallSpawn(regs*)+0x3a>

c001283d <sysCallGetEnv(regs*)>:
c001283d:	57                   	push   edi
c001283e:	56                   	push   esi
c001283f:	53                   	push   ebx
c0012840:	83 ec 1c             	sub    esp,0x1c
c0012843:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012847:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001284c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001284f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012852:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012855:	50                   	push   eax
c0012856:	e8 30 eb ff ff       	call   c001138b <Krnl::getProcessTotalEnvCount(Process*)>
c001285b:	83 c4 10             	add    esp,0x10
c001285e:	39 c7                	cmp    edi,eax
c0012860:	7c 14                	jl     c0012876 <sysCallGetEnv(regs*)+0x39>
c0012862:	85 f6                	test   esi,esi
c0012864:	75 0b                	jne    c0012871 <sysCallGetEnv(regs*)+0x34>
c0012866:	83 c4 10             	add    esp,0x10
c0012869:	31 c0                	xor    eax,eax
c001286b:	5b                   	pop    ebx
c001286c:	31 d2                	xor    edx,edx
c001286e:	5e                   	pop    esi
c001286f:	5f                   	pop    edi
c0012870:	c3                   	ret    
c0012871:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012874:	eb f0                	jmp    c0012866 <sysCallGetEnv(regs*)+0x29>
c0012876:	8d 44 24 08          	lea    eax,[esp+0x8]
c001287a:	52                   	push   edx
c001287b:	57                   	push   edi
c001287c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012882:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0012885:	51                   	push   ecx
c0012886:	50                   	push   eax
c0012887:	e8 1f eb ff ff       	call   c00113ab <Krnl::getProcessEnvPair(Process*, int)>
c001288c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001288f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012893:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012897:	83 c4 0c             	add    esp,0xc
c001289a:	85 db                	test   ebx,ebx
c001289c:	75 23                	jne    c00128c1 <sysCallGetEnv(regs*)+0x84>
c001289e:	83 ec 0c             	sub    esp,0xc
c00128a1:	50                   	push   eax
c00128a2:	e8 b9 dc fe ff       	call   c0000560 <strlen>
c00128a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128aa:	89 c3                	mov    ebx,eax
c00128ac:	e8 af dc fe ff       	call   c0000560 <strlen>
c00128b1:	31 d2                	xor    edx,edx
c00128b3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00128b7:	83 c4 10             	add    esp,0x10
c00128ba:	83 c4 10             	add    esp,0x10
c00128bd:	5b                   	pop    ebx
c00128be:	5e                   	pop    esi
c00128bf:	5f                   	pop    edi
c00128c0:	c3                   	ret    
c00128c1:	83 ec 08             	sub    esp,0x8
c00128c4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00128c7:	50                   	push   eax
c00128c8:	56                   	push   esi
c00128c9:	e8 52 dd fe ff       	call   c0000620 <strcpy>
c00128ce:	58                   	pop    eax
c00128cf:	5a                   	pop    edx
c00128d0:	68 83 fc 01 c0       	push   0xc001fc83
c00128d5:	56                   	push   esi
c00128d6:	e8 05 df fe ff       	call   c00007e0 <strcat>
c00128db:	59                   	pop    ecx
c00128dc:	5b                   	pop    ebx
c00128dd:	57                   	push   edi
c00128de:	56                   	push   esi
c00128df:	e8 fc de fe ff       	call   c00007e0 <strcat>
c00128e4:	83 c4 10             	add    esp,0x10
c00128e7:	e9 7a ff ff ff       	jmp    c0012866 <sysCallGetEnv(regs*)+0x29>

c00128ec <sysSetFatAttrib(regs*)>:
c00128ec:	57                   	push   edi
c00128ed:	56                   	push   esi
c00128ee:	53                   	push   ebx
c00128ef:	83 ec 1c             	sub    esp,0x1c
c00128f2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00128f6:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00128f9:	68 14 01 00 00       	push   0x114
c00128fe:	e8 5e 62 ff ff       	call   c0008b61 <malloc>
c0012903:	83 c4 0c             	add    esp,0xc
c0012906:	89 c3                	mov    ebx,eax
c0012908:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001290d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012910:	50                   	push   eax
c0012911:	57                   	push   edi
c0012912:	53                   	push   ebx
c0012913:	e8 4e 95 ff ff       	call   c000be66 <File::File(char const*, Process*)>
c0012918:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001291b:	83 c4 0c             	add    esp,0xc
c001291e:	0f b6 d4             	movzx  edx,ah
c0012921:	25 ff 00 00 00       	and    eax,0xff
c0012926:	52                   	push   edx
c0012927:	50                   	push   eax
c0012928:	53                   	push   ebx
c0012929:	e8 0a 98 ff ff       	call   c000c138 <File::chfatattr(unsigned char, unsigned char)>
c001292e:	83 c4 10             	add    esp,0x10
c0012931:	85 db                	test   ebx,ebx
c0012933:	74 14                	je     c0012949 <sysSetFatAttrib(regs*)+0x5d>
c0012935:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012939:	8b 13                	mov    edx,DWORD PTR [ebx]
c001293b:	83 ec 0c             	sub    esp,0xc
c001293e:	53                   	push   ebx
c001293f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012942:	83 c4 10             	add    esp,0x10
c0012945:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012949:	85 c0                	test   eax,eax
c001294b:	0f 95 c0             	setne  al
c001294e:	31 d2                	xor    edx,edx
c0012950:	25 ff 00 00 00       	and    eax,0xff
c0012955:	f7 d8                	neg    eax
c0012957:	83 d2 00             	adc    edx,0x0
c001295a:	83 c4 10             	add    esp,0x10
c001295d:	f7 da                	neg    edx
c001295f:	5b                   	pop    ebx
c0012960:	5e                   	pop    esi
c0012961:	5f                   	pop    edi
c0012962:	c3                   	ret    

c0012963 <sysPipe(regs*)>:
c0012963:	57                   	push   edi
c0012964:	56                   	push   esi
c0012965:	53                   	push   ebx
c0012966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001296a:	83 ec 0c             	sub    esp,0xc
c001296d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012970:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012973:	6a 20                	push   0x20
c0012975:	e8 e7 61 ff ff       	call   c0008b61 <malloc>
c001297a:	89 c3                	mov    ebx,eax
c001297c:	58                   	pop    eax
c001297d:	5a                   	pop    edx
c001297e:	68 00 50 00 00       	push   0x5000
c0012983:	53                   	push   ebx
c0012984:	e8 cf 6b ff ff       	call   c0009558 <Pipe::Pipe(int)>
c0012989:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001298c:	e8 c1 78 ff ff       	call   c000a252 <UnixFile::getFileDescriptor()>
c0012991:	89 07                	mov    DWORD PTR [edi],eax
c0012993:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012996:	e8 b7 78 ff ff       	call   c000a252 <UnixFile::getFileDescriptor()>
c001299b:	83 c4 10             	add    esp,0x10
c001299e:	89 06                	mov    DWORD PTR [esi],eax
c00129a0:	31 d2                	xor    edx,edx
c00129a2:	5b                   	pop    ebx
c00129a3:	31 c0                	xor    eax,eax
c00129a5:	5e                   	pop    esi
c00129a6:	5f                   	pop    edi
c00129a7:	c3                   	ret    

c00129a8 <sysGetUnixTime(regs*)>:
c00129a8:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c00129ad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00129b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00129b7:	e9 ba 9e ff ff       	jmp    c000c876 <Clock::timeInSecondsLocal()>

c00129bc <string_ends_with(char const*, char const*)>:
c00129bc:	57                   	push   edi
c00129bd:	56                   	push   esi
c00129be:	53                   	push   ebx
c00129bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00129c3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00129c7:	83 ec 0c             	sub    esp,0xc
c00129ca:	53                   	push   ebx
c00129cb:	e8 90 db fe ff       	call   c0000560 <strlen>
c00129d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00129d3:	89 c6                	mov    esi,eax
c00129d5:	e8 86 db fe ff       	call   c0000560 <strlen>
c00129da:	83 c4 10             	add    esp,0x10
c00129dd:	39 c6                	cmp    esi,eax
c00129df:	7d 06                	jge    c00129e7 <string_ends_with(char const*, char const*)+0x2b>
c00129e1:	5b                   	pop    ebx
c00129e2:	31 c0                	xor    eax,eax
c00129e4:	5e                   	pop    esi
c00129e5:	5f                   	pop    edi
c00129e6:	c3                   	ret    
c00129e7:	83 ec 08             	sub    esp,0x8
c00129ea:	29 c6                	sub    esi,eax
c00129ec:	57                   	push   edi
c00129ed:	01 f3                	add    ebx,esi
c00129ef:	53                   	push   ebx
c00129f0:	e8 0b dd fe ff       	call   c0000700 <strcmp>
c00129f5:	83 c4 10             	add    esp,0x10
c00129f8:	85 c0                	test   eax,eax
c00129fa:	5b                   	pop    ebx
c00129fb:	0f 94 c0             	sete   al
c00129fe:	5e                   	pop    esi
c00129ff:	25 ff 00 00 00       	and    eax,0xff
c0012a04:	5f                   	pop    edi
c0012a05:	c3                   	ret    

c0012a06 <sysCallOpen(regs*)>:
c0012a06:	56                   	push   esi
c0012a07:	53                   	push   ebx
c0012a08:	81 ec 04 01 00 00    	sub    esp,0x104
c0012a0e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012a15:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012a18:	85 c9                	test   ecx,ecx
c0012a1a:	0f 84 b9 01 00 00    	je     c0012bd9 <sysCallOpen(regs*)+0x1d3>
c0012a20:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a23:	85 c0                	test   eax,eax
c0012a25:	0f 84 ae 01 00 00    	je     c0012bd9 <sysCallOpen(regs*)+0x1d3>
c0012a2b:	52                   	push   edx
c0012a2c:	68 85 fc 01 c0       	push   0xc001fc85
c0012a31:	50                   	push   eax
c0012a32:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012a36:	56                   	push   esi
c0012a37:	e8 80 92 ff ff       	call   c000bcbc <Fs::standardiseFiles(char*, char const*, char const*)>
c0012a3c:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a3f:	e8 1c db fe ff       	call   c0000560 <strlen>
c0012a44:	83 c4 10             	add    esp,0x10
c0012a47:	48                   	dec    eax
c0012a48:	74 1d                	je     c0012a67 <sysCallOpen(regs*)+0x61>
c0012a4a:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0012a4d:	eb 0f                	jmp    c0012a5e <sysCallOpen(regs*)+0x58>
c0012a4f:	80 fa 3a             	cmp    dl,0x3a
c0012a52:	74 0f                	je     c0012a63 <sysCallOpen(regs*)+0x5d>
c0012a54:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012a58:	48                   	dec    eax
c0012a59:	74 0c                	je     c0012a67 <sysCallOpen(regs*)+0x61>
c0012a5b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0012a5e:	80 fa 2e             	cmp    dl,0x2e
c0012a61:	75 ec                	jne    c0012a4f <sysCallOpen(regs*)+0x49>
c0012a63:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012a67:	83 ec 08             	sub    esp,0x8
c0012a6a:	68 89 fc 01 c0       	push   0xc001fc89
c0012a6f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a72:	50                   	push   eax
c0012a73:	e8 44 ff ff ff       	call   c00129bc <string_ends_with(char const*, char const*)>
c0012a78:	83 c4 10             	add    esp,0x10
c0012a7b:	85 c0                	test   eax,eax
c0012a7d:	74 1d                	je     c0012a9c <sysCallOpen(regs*)+0x96>
c0012a7f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a82:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012a88:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012a8f:	81 c4 04 01 00 00    	add    esp,0x104
c0012a95:	31 c0                	xor    eax,eax
c0012a97:	31 d2                	xor    edx,edx
c0012a99:	5b                   	pop    ebx
c0012a9a:	5e                   	pop    esi
c0012a9b:	c3                   	ret    
c0012a9c:	83 ec 08             	sub    esp,0x8
c0012a9f:	68 8e fc 01 c0       	push   0xc001fc8e
c0012aa4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012aa7:	50                   	push   eax
c0012aa8:	e8 0f ff ff ff       	call   c00129bc <string_ends_with(char const*, char const*)>
c0012aad:	83 c4 10             	add    esp,0x10
c0012ab0:	85 c0                	test   eax,eax
c0012ab2:	75 cb                	jne    c0012a7f <sysCallOpen(regs*)+0x79>
c0012ab4:	83 ec 08             	sub    esp,0x8
c0012ab7:	68 8a fc 01 c0       	push   0xc001fc8a
c0012abc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012abf:	50                   	push   eax
c0012ac0:	e8 3b dc fe ff       	call   c0000700 <strcmp>
c0012ac5:	83 c4 10             	add    esp,0x10
c0012ac8:	85 c0                	test   eax,eax
c0012aca:	74 b3                	je     c0012a7f <sysCallOpen(regs*)+0x79>
c0012acc:	83 ec 08             	sub    esp,0x8
c0012acf:	68 89 fc 01 c0       	push   0xc001fc89
c0012ad4:	56                   	push   esi
c0012ad5:	e8 e2 fe ff ff       	call   c00129bc <string_ends_with(char const*, char const*)>
c0012ada:	83 c4 10             	add    esp,0x10
c0012add:	85 c0                	test   eax,eax
c0012adf:	75 9e                	jne    c0012a7f <sysCallOpen(regs*)+0x79>
c0012ae1:	83 ec 08             	sub    esp,0x8
c0012ae4:	68 93 fc 01 c0       	push   0xc001fc93
c0012ae9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012aec:	50                   	push   eax
c0012aed:	e8 ca fe ff ff       	call   c00129bc <string_ends_with(char const*, char const*)>
c0012af2:	83 c4 10             	add    esp,0x10
c0012af5:	85 c0                	test   eax,eax
c0012af7:	0f 85 ef 00 00 00    	jne    c0012bec <sysCallOpen(regs*)+0x1e6>
c0012afd:	83 ec 08             	sub    esp,0x8
c0012b00:	68 98 fc 01 c0       	push   0xc001fc98
c0012b05:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012b08:	50                   	push   eax
c0012b09:	e8 ae fe ff ff       	call   c00129bc <string_ends_with(char const*, char const*)>
c0012b0e:	83 c4 10             	add    esp,0x10
c0012b11:	85 c0                	test   eax,eax
c0012b13:	0f 85 d3 00 00 00    	jne    c0012bec <sysCallOpen(regs*)+0x1e6>
c0012b19:	83 ec 08             	sub    esp,0x8
c0012b1c:	68 94 fc 01 c0       	push   0xc001fc94
c0012b21:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012b24:	51                   	push   ecx
c0012b25:	e8 d6 db fe ff       	call   c0000700 <strcmp>
c0012b2a:	83 c4 10             	add    esp,0x10
c0012b2d:	85 c0                	test   eax,eax
c0012b2f:	0f 84 b7 00 00 00    	je     c0012bec <sysCallOpen(regs*)+0x1e6>
c0012b35:	83 ec 08             	sub    esp,0x8
c0012b38:	68 93 fc 01 c0       	push   0xc001fc93
c0012b3d:	56                   	push   esi
c0012b3e:	e8 79 fe ff ff       	call   c00129bc <string_ends_with(char const*, char const*)>
c0012b43:	83 c4 10             	add    esp,0x10
c0012b46:	85 c0                	test   eax,eax
c0012b48:	0f 85 9e 00 00 00    	jne    c0012bec <sysCallOpen(regs*)+0x1e6>
c0012b4e:	83 ec 0c             	sub    esp,0xc
c0012b51:	68 14 01 00 00       	push   0x114
c0012b56:	e8 06 60 ff ff       	call   c0008b61 <malloc>
c0012b5b:	83 c4 0c             	add    esp,0xc
c0012b5e:	89 c6                	mov    esi,eax
c0012b60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b68:	50                   	push   eax
c0012b69:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012b6c:	52                   	push   edx
c0012b6d:	56                   	push   esi
c0012b6e:	e8 f3 92 ff ff       	call   c000be66 <File::File(char const*, Process*)>
c0012b73:	83 c4 10             	add    esp,0x10
c0012b76:	85 f6                	test   esi,esi
c0012b78:	74 5f                	je     c0012bd9 <sysCallOpen(regs*)+0x1d3>
c0012b7a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012b7d:	89 d0                	mov    eax,edx
c0012b7f:	25 ff 00 00 00       	and    eax,0xff
c0012b84:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012b87:	89 d0                	mov    eax,edx
c0012b89:	83 e0 01             	and    eax,0x1
c0012b8c:	f6 c2 02             	test   dl,0x2
c0012b8f:	74 03                	je     c0012b94 <sysCallOpen(regs*)+0x18e>
c0012b91:	83 c8 02             	or     eax,0x2
c0012b94:	f6 c2 04             	test   dl,0x4
c0012b97:	74 03                	je     c0012b9c <sysCallOpen(regs*)+0x196>
c0012b99:	83 c8 04             	or     eax,0x4
c0012b9c:	f6 c2 08             	test   dl,0x8
c0012b9f:	74 03                	je     c0012ba4 <sysCallOpen(regs*)+0x19e>
c0012ba1:	83 c8 0a             	or     eax,0xa
c0012ba4:	83 e2 10             	and    edx,0x10
c0012ba7:	74 03                	je     c0012bac <sysCallOpen(regs*)+0x1a6>
c0012ba9:	83 c8 12             	or     eax,0x12
c0012bac:	83 ec 08             	sub    esp,0x8
c0012baf:	50                   	push   eax
c0012bb0:	56                   	push   esi
c0012bb1:	e8 70 93 ff ff       	call   c000bf26 <File::open(FileOpenMode)>
c0012bb6:	83 c4 10             	add    esp,0x10
c0012bb9:	85 c0                	test   eax,eax
c0012bbb:	75 1c                	jne    c0012bd9 <sysCallOpen(regs*)+0x1d3>
c0012bbd:	83 ec 0c             	sub    esp,0xc
c0012bc0:	56                   	push   esi
c0012bc1:	e8 8c 76 ff ff       	call   c000a252 <UnixFile::getFileDescriptor()>
c0012bc6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012bc9:	83 c4 10             	add    esp,0x10
c0012bcc:	89 02                	mov    DWORD PTR [edx],eax
c0012bce:	c1 f8 1f             	sar    eax,0x1f
c0012bd1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012bd4:	e9 b6 fe ff ff       	jmp    c0012a8f <sysCallOpen(regs*)+0x89>
c0012bd9:	81 c4 04 01 00 00    	add    esp,0x104
c0012bdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012be4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012be9:	5b                   	pop    ebx
c0012bea:	5e                   	pop    esi
c0012beb:	c3                   	ret    
c0012bec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012bef:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012bf5:	e9 8e fe ff ff       	jmp    c0012a88 <sysCallOpen(regs*)+0x82>

c0012bfa <Sys::loadSyscalls()>:
c0012bfa:	c7 05 e0 47 02 c0 d6 1f 01 c0 	mov    DWORD PTR ds:0xc00247e0,0xc0011fd6
c0012c04:	c7 05 e4 47 02 c0 cd 1b 01 c0 	mov    DWORD PTR ds:0xc00247e4,0xc0011bcd
c0012c0e:	c7 05 e8 47 02 c0 bc 1d 01 c0 	mov    DWORD PTR ds:0xc00247e8,0xc0011dbc
c0012c18:	c7 05 ec 47 02 c0 0c 1f 01 c0 	mov    DWORD PTR ds:0xc00247ec,0xc0011f0c
c0012c22:	c7 05 f0 47 02 c0 54 1d 01 c0 	mov    DWORD PTR ds:0xc00247f0,0xc0011d54
c0012c2c:	c7 05 f4 47 02 c0 04 1c 01 c0 	mov    DWORD PTR ds:0xc00247f4,0xc0011c04
c0012c36:	c7 05 f8 47 02 c0 e5 1b 01 c0 	mov    DWORD PTR ds:0xc00247f8,0xc0011be5
c0012c40:	c7 05 fc 47 02 c0 11 1e 01 c0 	mov    DWORD PTR ds:0xc00247fc,0xc0011e11
c0012c4a:	c7 05 04 48 02 c0 a0 24 01 c0 	mov    DWORD PTR ds:0xc0024804,0xc00124a0
c0012c54:	c7 05 00 48 02 c0 06 2a 01 c0 	mov    DWORD PTR ds:0xc0024800,0xc0012a06
c0012c5e:	c7 05 08 48 02 c0 00 25 01 c0 	mov    DWORD PTR ds:0xc0024808,0xc0012500
c0012c68:	c7 05 0c 48 02 c0 d4 21 01 c0 	mov    DWORD PTR ds:0xc002480c,0xc00121d4
c0012c72:	c7 05 10 48 02 c0 fb 1f 01 c0 	mov    DWORD PTR ds:0xc0024810,0xc0011ffb
c0012c7c:	c7 05 14 48 02 c0 00 20 01 c0 	mov    DWORD PTR ds:0xc0024814,0xc0012000
c0012c86:	c7 05 18 48 02 c0 cb 25 01 c0 	mov    DWORD PTR ds:0xc0024818,0xc00125cb
c0012c90:	c7 05 1c 48 02 c0 77 25 01 c0 	mov    DWORD PTR ds:0xc002481c,0xc0012577
c0012c9a:	c7 05 20 48 02 c0 b0 22 01 c0 	mov    DWORD PTR ds:0xc0024820,0xc00122b0
c0012ca4:	c7 05 24 48 02 c0 09 23 01 c0 	mov    DWORD PTR ds:0xc0024824,0xc0012309
c0012cae:	c7 05 28 48 02 c0 78 23 01 c0 	mov    DWORD PTR ds:0xc0024828,0xc0012378
c0012cb8:	c7 05 2c 48 02 c0 05 20 01 c0 	mov    DWORD PTR ds:0xc002482c,0xc0012005
c0012cc2:	c7 05 30 48 02 c0 3d 26 01 c0 	mov    DWORD PTR ds:0xc0024830,0xc001263d
c0012ccc:	c7 05 34 48 02 c0 5a 26 01 c0 	mov    DWORD PTR ds:0xc0024834,0xc001265a
c0012cd6:	c7 05 38 48 02 c0 5a 26 01 c0 	mov    DWORD PTR ds:0xc0024838,0xc001265a
c0012ce0:	c7 05 3c 48 02 c0 90 26 01 c0 	mov    DWORD PTR ds:0xc002483c,0xc0012690
c0012cea:	c7 05 40 48 02 c0 f7 26 01 c0 	mov    DWORD PTR ds:0xc0024840,0xc00126f7
c0012cf4:	c7 05 44 48 02 c0 0f 20 01 c0 	mov    DWORD PTR ds:0xc0024844,0xc001200f
c0012cfe:	c7 05 48 48 02 c0 5e 27 01 c0 	mov    DWORD PTR ds:0xc0024848,0xc001275e
c0012d08:	c7 05 4c 48 02 c0 91 21 01 c0 	mov    DWORD PTR ds:0xc002484c,0xc0012191
c0012d12:	c7 05 50 48 02 c0 1f 20 01 c0 	mov    DWORD PTR ds:0xc0024850,0xc001201f
c0012d1c:	c7 05 54 48 02 c0 54 22 01 c0 	mov    DWORD PTR ds:0xc0024854,0xc0012254
c0012d26:	c7 05 58 48 02 c0 ab 27 01 c0 	mov    DWORD PTR ds:0xc0024858,0xc00127ab
c0012d30:	c7 05 5c 48 02 c0 ed 23 01 c0 	mov    DWORD PTR ds:0xc002485c,0xc00123ed
c0012d3a:	c7 05 60 48 02 c0 d4 27 01 c0 	mov    DWORD PTR ds:0xc0024860,0xc00127d4
c0012d44:	c7 05 64 48 02 c0 3d 28 01 c0 	mov    DWORD PTR ds:0xc0024864,0xc001283d
c0012d4e:	c7 05 6c 48 02 c0 27 20 01 c0 	mov    DWORD PTR ds:0xc002486c,0xc0012027
c0012d58:	c7 05 70 48 02 c0 94 20 01 c0 	mov    DWORD PTR ds:0xc0024870,0xc0012094
c0012d62:	c7 05 74 48 02 c0 de 20 01 c0 	mov    DWORD PTR ds:0xc0024874,0xc00120de
c0012d6c:	c7 05 78 48 02 c0 ec 28 01 c0 	mov    DWORD PTR ds:0xc0024878,0xc00128ec
c0012d76:	c7 05 7c 48 02 c0 75 26 01 c0 	mov    DWORD PTR ds:0xc002487c,0xc0012675
c0012d80:	c7 05 80 48 02 c0 33 21 01 c0 	mov    DWORD PTR ds:0xc0024880,0xc0012133
c0012d8a:	c7 05 84 48 02 c0 63 29 01 c0 	mov    DWORD PTR ds:0xc0024884,0xc0012963
c0012d94:	c7 05 88 48 02 c0 a8 29 01 c0 	mov    DWORD PTR ds:0xc0024888,0xc00129a8
c0012d9e:	c7 05 8c 48 02 c0 ac 1c 01 c0 	mov    DWORD PTR ds:0xc002488c,0xc0011cac
c0012da8:	c7 05 90 48 02 c0 2d 1e 01 c0 	mov    DWORD PTR ds:0xc0024890,0xc0011e2d
c0012db2:	c7 05 94 48 02 c0 c2 1e 01 c0 	mov    DWORD PTR ds:0xc0024894,0xc0011ec2
c0012dbc:	c7 05 98 48 02 c0 97 1b 01 c0 	mov    DWORD PTR ds:0xc0024898,0xc0011b97
c0012dc6:	c7 05 9c 48 02 c0 74 1f 01 c0 	mov    DWORD PTR ds:0xc002489c,0xc0011f74
c0012dd0:	c7 05 a0 48 02 c0 10 1c 01 c0 	mov    DWORD PTR ds:0xc00248a0,0xc0011c10
c0012dda:	c7 05 a4 48 02 c0 2a 1c 01 c0 	mov    DWORD PTR ds:0xc00248a4,0xc0011c2a
c0012de4:	c3                   	ret    

c0012de5 <Sys::systemCall(regs*, void*)>:
c0012de5:	53                   	push   ebx
c0012de6:	83 ec 08             	sub    esp,0x8
c0012de9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ded:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012df0:	83 f8 7f             	cmp    eax,0x7f
c0012df3:	77 16                	ja     c0012e0b <Sys::systemCall(regs*, void*)+0x26>
c0012df5:	8b 14 85 e0 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb820]
c0012dfc:	85 d2                	test   edx,edx
c0012dfe:	74 0b                	je     c0012e0b <Sys::systemCall(regs*, void*)+0x26>
c0012e00:	83 ec 0c             	sub    esp,0xc
c0012e03:	53                   	push   ebx
c0012e04:	ff d2                	call   edx
c0012e06:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012e09:	eb 0d                	jmp    c0012e18 <Sys::systemCall(regs*, void*)+0x33>
c0012e0b:	52                   	push   edx
c0012e0c:	52                   	push   edx
c0012e0d:	50                   	push   eax
c0012e0e:	68 9d fc 01 c0       	push   0xc001fc9d
c0012e13:	e8 d8 8a ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0012e18:	83 c4 10             	add    esp,0x10
c0012e1b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012e20:	31 d2                	xor    edx,edx
c0012e22:	83 c4 08             	add    esp,0x8
c0012e25:	5b                   	pop    ebx
c0012e26:	c3                   	ret    

c0012e27 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0012e27:	55                   	push   ebp
c0012e28:	57                   	push   edi
c0012e29:	56                   	push   esi
c0012e2a:	53                   	push   ebx
c0012e2b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0012e31:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0012e39:	0f 95 c2             	setne  dl
c0012e3c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0012e44:	0f 94 c0             	sete   al
c0012e47:	84 c2                	test   dl,al
c0012e49:	74 34                	je     c0012e7f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012e4b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0012e56:	74 27                	je     c0012e7f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012e58:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0012e5f:	05 00 10 00 00       	add    eax,0x1000
c0012e64:	89 c1                	mov    ecx,eax
c0012e66:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012e6b:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0012e71:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0012e78:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0012e7f:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0012e86:	83 ec 0c             	sub    esp,0xc
c0012e89:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012e8f:	6a 01                	push   0x1
c0012e91:	e8 07 78 ff ff       	call   c000a69d <Virt::allocateKernelVirtualPages(int)>
c0012e96:	83 c4 10             	add    esp,0x10
c0012e99:	89 c3                	mov    ebx,eax
c0012e9b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012ea1:	0f 86 25 01 00 00    	jbe    c0012fcc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0012ea7:	c1 ee 0c             	shr    esi,0xc
c0012eaa:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012eb1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0012eb5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012ebd:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0012ec4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ec8:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0012ecf:	29 ef                	sub    edi,ebp
c0012ed1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0012ed5:	0f 83 f8 00 00 00    	jae    c0012fd3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0012edb:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0012ee1:	76 05                	jbe    c0012ee8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0012ee3:	bf 00 10 00 00       	mov    edi,0x1000
c0012ee8:	83 ec 0c             	sub    esp,0xc
c0012eeb:	31 d2                	xor    edx,edx
c0012eed:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012ef4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ef6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012efa:	50                   	push   eax
c0012efb:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012eff:	56                   	push   esi
c0012f00:	52                   	push   edx
c0012f01:	57                   	push   edi
c0012f02:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0012f09:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012f0c:	83 c4 20             	add    esp,0x20
c0012f0f:	85 c0                	test   eax,eax
c0012f11:	75 06                	jne    c0012f19 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0012f13:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012f17:	74 13                	je     c0012f2c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0012f19:	83 ec 0c             	sub    esp,0xc
c0012f1c:	53                   	push   ebx
c0012f1d:	e8 ab 7a ff ff       	call   c000a9cd <Virt::freeKernelVirtualPages(unsigned long)>
c0012f22:	83 c4 10             	add    esp,0x10
c0012f25:	31 c0                	xor    eax,eax
c0012f27:	e9 7c 01 00 00       	jmp    c00130a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0012f2c:	fa                   	cli    
c0012f2d:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0012f33:	e8 f6 5f ff ff       	call   c0008f2e <Phys::allocatePage()>
c0012f38:	6a 07                	push   0x7
c0012f3a:	89 c7                	mov    edi,eax
c0012f3c:	53                   	push   ebx
c0012f3d:	50                   	push   eax
c0012f3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f46:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f4c:	e8 e1 7d ff ff       	call   c000ad32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012f51:	83 c4 0c             	add    esp,0xc
c0012f54:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012f5b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f61:	6a 00                	push   0x0
c0012f63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f6b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f71:	e8 2e 7c ff ff       	call   c000aba4 <VAS::mapOtherVASIn(bool, VAS*)>
c0012f76:	58                   	pop    eax
c0012f77:	5a                   	pop    edx
c0012f78:	68 07 0c 00 00       	push   0xc07
c0012f7d:	55                   	push   ebp
c0012f7e:	57                   	push   edi
c0012f7f:	89 df                	mov    edi,ebx
c0012f81:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012f88:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f8e:	6a 00                	push   0x0
c0012f90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f98:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f9e:	e8 4f 81 ff ff       	call   c000b0f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012fa3:	b9 00 10 00 00       	mov    ecx,0x1000
c0012fa8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012faa:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0012faf:	83 c4 20             	add    esp,0x20
c0012fb2:	48                   	dec    eax
c0012fb3:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0012fb8:	85 c0                	test   eax,eax
c0012fba:	75 01                	jne    c0012fbd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0012fbc:	fb                   	sti    
c0012fbd:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012fc3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0012fc7:	e9 f1 fe ff ff       	jmp    c0012ebd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012fcc:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012fd3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012fda:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012fe0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012fe6:	0f 86 ae 00 00 00    	jbe    c001309a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012fec:	fa                   	cli    
c0012fed:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0012ff3:	c1 ee 0c             	shr    esi,0xc
c0012ff6:	51                   	push   ecx
c0012ff7:	31 ff                	xor    edi,edi
c0012ff9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013000:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013006:	6a 00                	push   0x0
c0013008:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001300d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013010:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013016:	e8 89 7b ff ff       	call   c000aba4 <VAS::mapOtherVASIn(bool, VAS*)>
c001301b:	83 c4 10             	add    esp,0x10
c001301e:	e8 0b 5f ff ff       	call   c0008f2e <Phys::allocatePage()>
c0013023:	47                   	inc    edi
c0013024:	6a 07                	push   0x7
c0013026:	53                   	push   ebx
c0013027:	50                   	push   eax
c0013028:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001302c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013032:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013035:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001303b:	e8 f2 7c ff ff       	call   c000ad32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013040:	58                   	pop    eax
c0013041:	5a                   	pop    edx
c0013042:	68 07 0c 00 00       	push   0xc07
c0013047:	55                   	push   ebp
c0013048:	81 c5 00 10 00 00    	add    ebp,0x1000
c001304e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013052:	50                   	push   eax
c0013053:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001305a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013060:	6a 00                	push   0x0
c0013062:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013067:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001306a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013070:	e8 7d 80 ff ff       	call   c000b0f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013075:	83 c4 1c             	add    esp,0x1c
c0013078:	68 00 10 00 00       	push   0x1000
c001307d:	6a 00                	push   0x0
c001307f:	53                   	push   ebx
c0013080:	e8 6b d4 fe ff       	call   c00004f0 <memset>
c0013085:	83 c4 10             	add    esp,0x10
c0013088:	39 fe                	cmp    esi,edi
c001308a:	77 92                	ja     c001301e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c001308c:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0013091:	48                   	dec    eax
c0013092:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0013097:	75 01                	jne    c001309a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0013099:	fb                   	sti    
c001309a:	83 ec 0c             	sub    esp,0xc
c001309d:	53                   	push   ebx
c001309e:	e8 2a 79 ff ff       	call   c000a9cd <Virt::freeKernelVirtualPages(unsigned long)>
c00130a3:	83 c4 10             	add    esp,0x10
c00130a6:	b0 01                	mov    al,0x1
c00130a8:	81 c4 2c 10 00 00    	add    esp,0x102c
c00130ae:	5b                   	pop    ebx
c00130af:	5e                   	pop    esi
c00130b0:	5f                   	pop    edi
c00130b1:	5d                   	pop    ebp
c00130b2:	c3                   	ret    

c00130b3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00130b3:	55                   	push   ebp
c00130b4:	57                   	push   edi
c00130b5:	56                   	push   esi
c00130b6:	53                   	push   ebx
c00130b7:	83 ec 48             	sub    esp,0x48
c00130ba:	68 14 01 00 00       	push   0x114
c00130bf:	e8 9d 5a ff ff       	call   c0008b61 <malloc>
c00130c4:	83 c4 0c             	add    esp,0xc
c00130c7:	89 c6                	mov    esi,eax
c00130c9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00130cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130d1:	50                   	push   eax
c00130d2:	e8 8f 8d ff ff       	call   c000be66 <File::File(char const*, Process*)>
c00130d7:	58                   	pop    eax
c00130d8:	5a                   	pop    edx
c00130d9:	6a 01                	push   0x1
c00130db:	56                   	push   esi
c00130dc:	e8 45 8e ff ff       	call   c000bf26 <File::open(FileOpenMode)>
c00130e1:	83 c4 10             	add    esp,0x10
c00130e4:	85 c0                	test   eax,eax
c00130e6:	0f 85 47 01 00 00    	jne    c0013233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00130ec:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00130f4:	83 ec 0c             	sub    esp,0xc
c00130f7:	6a 34                	push   0x34
c00130f9:	e8 63 5a ff ff       	call   c0008b61 <malloc>
c00130fe:	89 c3                	mov    ebx,eax
c0013100:	58                   	pop    eax
c0013101:	8b 06                	mov    eax,DWORD PTR [esi]
c0013103:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013107:	57                   	push   edi
c0013108:	53                   	push   ebx
c0013109:	6a 00                	push   0x0
c001310b:	6a 34                	push   0x34
c001310d:	56                   	push   esi
c001310e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013111:	83 c4 20             	add    esp,0x20
c0013114:	85 c0                	test   eax,eax
c0013116:	0f 85 17 01 00 00    	jne    c0013233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001311c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013122:	0f 85 0b 01 00 00    	jne    c0013233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013128:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001312b:	85 c0                	test   eax,eax
c001312d:	0f 84 00 01 00 00    	je     c0013233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013133:	31 d2                	xor    edx,edx
c0013135:	55                   	push   ebp
c0013136:	52                   	push   edx
c0013137:	50                   	push   eax
c0013138:	56                   	push   esi
c0013139:	e8 a6 8e ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c001313e:	83 c4 10             	add    esp,0x10
c0013141:	85 c0                	test   eax,eax
c0013143:	0f 85 ea 00 00 00    	jne    c0013233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013149:	83 ec 0c             	sub    esp,0xc
c001314c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001314f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013157:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001315b:	0f af c2             	imul   eax,edx
c001315e:	50                   	push   eax
c001315f:	e8 fd 59 ff ff       	call   c0008b61 <malloc>
c0013164:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013166:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001316a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001316d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013171:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013175:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013179:	0f af c2             	imul   eax,edx
c001317c:	99                   	cdq    
c001317d:	52                   	push   edx
c001317e:	50                   	push   eax
c001317f:	56                   	push   esi
c0013180:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013183:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013186:	83 c4 20             	add    esp,0x20
c0013189:	85 c0                	test   eax,eax
c001318b:	0f 84 a2 00 00 00    	je     c0013233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013191:	31 d2                	xor    edx,edx
c0013193:	51                   	push   ecx
c0013194:	52                   	push   edx
c0013195:	50                   	push   eax
c0013196:	56                   	push   esi
c0013197:	e8 48 8e ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c001319c:	83 c4 10             	add    esp,0x10
c001319f:	85 c0                	test   eax,eax
c00131a1:	0f 85 8c 00 00 00    	jne    c0013233 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00131a7:	83 ec 0c             	sub    esp,0xc
c00131aa:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00131ae:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00131b2:	31 ed                	xor    ebp,ebp
c00131b4:	0f af c2             	imul   eax,edx
c00131b7:	50                   	push   eax
c00131b8:	e8 a4 59 ff ff       	call   c0008b61 <malloc>
c00131bd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00131bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00131c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00131c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131ca:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00131ce:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00131d2:	0f af c2             	imul   eax,edx
c00131d5:	99                   	cdq    
c00131d6:	52                   	push   edx
c00131d7:	50                   	push   eax
c00131d8:	56                   	push   esi
c00131d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00131dc:	83 c4 20             	add    esp,0x20
c00131df:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00131e7:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00131eb:	0f 86 80 00 00 00    	jbe    c0013271 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00131f1:	0f b7 fd             	movzx  edi,bp
c00131f4:	c1 e7 05             	shl    edi,0x5
c00131f7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00131fb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00131fe:	75 6b                	jne    c001326b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0013200:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013203:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013207:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001320a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001320e:	52                   	push   edx
c001320f:	31 d2                	xor    edx,edx
c0013211:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013214:	52                   	push   edx
c0013215:	50                   	push   eax
c0013216:	56                   	push   esi
c0013217:	e8 c8 8d ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c001321c:	83 c4 10             	add    esp,0x10
c001321f:	85 c0                	test   eax,eax
c0013221:	74 17                	je     c001323a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0013223:	83 ec 0c             	sub    esp,0xc
c0013226:	68 b1 fc 01 c0       	push   0xc001fcb1
c001322b:	e8 c0 86 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0013230:	83 c4 10             	add    esp,0x10
c0013233:	31 c0                	xor    eax,eax
c0013235:	e9 87 00 00 00       	jmp    c00132c1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001323a:	83 ec 0c             	sub    esp,0xc
c001323d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013240:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013243:	50                   	push   eax
c0013244:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013248:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001324c:	56                   	push   esi
c001324d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013251:	e8 d1 fb ff ff       	call   c0012e27 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013256:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001325a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001325e:	83 c4 20             	add    esp,0x20
c0013261:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013265:	73 04                	jae    c001326b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0013267:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001326b:	45                   	inc    ebp
c001326c:	e9 76 ff ff ff       	jmp    c00131e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013271:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013275:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013279:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001327d:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013283:	83 ec 0c             	sub    esp,0xc
c0013286:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c001328c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013291:	05 00 10 00 00       	add    eax,0x1000
c0013296:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013299:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001329d:	e8 cf 58 ff ff       	call   c0008b71 <free>
c00132a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00132a5:	e8 c7 58 ff ff       	call   c0008b71 <free>
c00132aa:	58                   	pop    eax
c00132ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132af:	e8 bd 58 ff ff       	call   c0008b71 <free>
c00132b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00132b7:	e8 c8 8c ff ff       	call   c000bf84 <File::close()>
c00132bc:	83 c4 10             	add    esp,0x10
c00132bf:	b0 01                	mov    al,0x1
c00132c1:	83 c4 3c             	add    esp,0x3c
c00132c4:	5b                   	pop    ebx
c00132c5:	5e                   	pop    esi
c00132c6:	5f                   	pop    edi
c00132c7:	5d                   	pop    ebp
c00132c8:	c3                   	ret    

c00132c9 <Thr::runtimeReferenceHelper()>:
c00132c9:	83 ec 18             	sub    esp,0x18
c00132cc:	68 b9 fc 01 c0       	push   0xc001fcb9
c00132d1:	e8 1a 86 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c00132d6:	fa                   	cli    
c00132d7:	83 c4 10             	add    esp,0x10
c00132da:	eb fe                	jmp    c00132da <Thr::runtimeReferenceHelper()+0x11>

c00132dc <Thr::getAddressOfKernelSymbol(char const*)>:
c00132dc:	57                   	push   edi
c00132dd:	56                   	push   esi
c00132de:	53                   	push   ebx
c00132df:	31 db                	xor    ebx,ebx
c00132e1:	39 1d 80 51 02 c0    	cmp    DWORD PTR ds:0xc0025180,ebx
c00132e7:	7e 3c                	jle    c0013325 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00132e9:	8b 34 9d 00 51 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaf00]
c00132f0:	31 ff                	xor    edi,edi
c00132f2:	39 3c 9d 00 50 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb000],edi
c00132f9:	7e 27                	jle    c0013322 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00132fb:	50                   	push   eax
c00132fc:	50                   	push   eax
c00132fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013301:	8b 06                	mov    eax,DWORD PTR [esi]
c0013303:	03 04 9d 80 50 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdaf80]
c001330a:	50                   	push   eax
c001330b:	e8 f0 d3 fe ff       	call   c0000700 <strcmp>
c0013310:	83 c4 10             	add    esp,0x10
c0013313:	85 c0                	test   eax,eax
c0013315:	75 05                	jne    c001331c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013317:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001331a:	eb 0b                	jmp    c0013327 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001331c:	83 c6 10             	add    esi,0x10
c001331f:	47                   	inc    edi
c0013320:	eb d0                	jmp    c00132f2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013322:	43                   	inc    ebx
c0013323:	eb bc                	jmp    c00132e1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013325:	31 c0                	xor    eax,eax
c0013327:	5b                   	pop    ebx
c0013328:	5e                   	pop    esi
c0013329:	5f                   	pop    edi
c001332a:	c3                   	ret    

c001332b <Thr::loadKernelSymbolTable(char const*)>:
c001332b:	55                   	push   ebp
c001332c:	57                   	push   edi
c001332d:	56                   	push   esi
c001332e:	53                   	push   ebx
c001332f:	83 ec 68             	sub    esp,0x68
c0013332:	8b 35 d0 51 02 c0    	mov    esi,DWORD PTR ds:0xc00251d0
c0013338:	68 14 01 00 00       	push   0x114
c001333d:	e8 1f 58 ff ff       	call   c0008b61 <malloc>
c0013342:	83 c4 0c             	add    esp,0xc
c0013345:	89 c3                	mov    ebx,eax
c0013347:	56                   	push   esi
c0013348:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001334c:	50                   	push   eax
c001334d:	e8 14 8b ff ff       	call   c000be66 <File::File(char const*, Process*)>
c0013352:	5e                   	pop    esi
c0013353:	5f                   	pop    edi
c0013354:	6a 01                	push   0x1
c0013356:	53                   	push   ebx
c0013357:	e8 ca 8b ff ff       	call   c000bf26 <File::open(FileOpenMode)>
c001335c:	83 c4 10             	add    esp,0x10
c001335f:	85 c0                	test   eax,eax
c0013361:	74 0a                	je     c001336d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013363:	83 ec 0c             	sub    esp,0xc
c0013366:	68 db fc 01 c0       	push   0xc001fcdb
c001336b:	eb 34                	jmp    c00133a1 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001336d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013375:	83 ec 0c             	sub    esp,0xc
c0013378:	6a 34                	push   0x34
c001337a:	e8 e2 57 ff ff       	call   c0008b61 <malloc>
c001337f:	59                   	pop    ecx
c0013380:	89 c7                	mov    edi,eax
c0013382:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013386:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013388:	56                   	push   esi
c0013389:	57                   	push   edi
c001338a:	6a 00                	push   0x0
c001338c:	6a 34                	push   0x34
c001338e:	53                   	push   ebx
c001338f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013392:	83 c4 20             	add    esp,0x20
c0013395:	85 c0                	test   eax,eax
c0013397:	74 17                	je     c00133b0 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013399:	83 ec 0c             	sub    esp,0xc
c001339c:	68 f2 fc 01 c0       	push   0xc001fcf2
c00133a1:	e8 99 e0 ff ff       	call   c001143f <Krnl::panic(char const*)>
c00133a6:	83 c4 10             	add    esp,0x10
c00133a9:	31 c0                	xor    eax,eax
c00133ab:	e9 31 02 00 00       	jmp    c00135e1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00133b0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00133b6:	75 e1                	jne    c0013399 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00133b8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00133bb:	85 c0                	test   eax,eax
c00133bd:	74 da                	je     c0013399 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00133bf:	52                   	push   edx
c00133c0:	31 d2                	xor    edx,edx
c00133c2:	52                   	push   edx
c00133c3:	50                   	push   eax
c00133c4:	53                   	push   ebx
c00133c5:	e8 1a 8c ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c00133ca:	83 c4 10             	add    esp,0x10
c00133cd:	85 c0                	test   eax,eax
c00133cf:	75 c8                	jne    c0013399 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00133d1:	83 ec 0c             	sub    esp,0xc
c00133d4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00133d8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00133dc:	31 ed                	xor    ebp,ebp
c00133de:	0f af c2             	imul   eax,edx
c00133e1:	50                   	push   eax
c00133e2:	e8 7a 57 ff ff       	call   c0008b61 <malloc>
c00133e7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00133e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00133f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00133f4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00133f8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00133fc:	0f af c2             	imul   eax,edx
c00133ff:	99                   	cdq    
c0013400:	52                   	push   edx
c0013401:	50                   	push   eax
c0013402:	53                   	push   ebx
c0013403:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013406:	83 c4 20             	add    esp,0x20
c0013409:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013411:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013419:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013421:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013429:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001342d:	0f 86 aa 00 00 00    	jbe    c00134dd <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013433:	0f b7 f5             	movzx  esi,bp
c0013436:	6b f6 28             	imul   esi,esi,0x28
c0013439:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001343d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013444:	50                   	push   eax
c0013445:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013449:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001344d:	8b 16                	mov    edx,DWORD PTR [esi]
c001344f:	6b c0 28             	imul   eax,eax,0x28
c0013452:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013456:	89 d0                	mov    eax,edx
c0013458:	31 d2                	xor    edx,edx
c001345a:	52                   	push   edx
c001345b:	50                   	push   eax
c001345c:	53                   	push   ebx
c001345d:	e8 82 8b ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c0013462:	83 c4 0c             	add    esp,0xc
c0013465:	6a 20                	push   0x20
c0013467:	6a 00                	push   0x0
c0013469:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001346d:	52                   	push   edx
c001346e:	e8 7d d0 fe ff       	call   c00004f0 <memset>
c0013473:	58                   	pop    eax
c0013474:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013476:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001347a:	51                   	push   ecx
c001347b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001347f:	52                   	push   edx
c0013480:	6a 00                	push   0x0
c0013482:	6a 1f                	push   0x1f
c0013484:	53                   	push   ebx
c0013485:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013488:	83 c4 18             	add    esp,0x18
c001348b:	68 09 fd 01 c0       	push   0xc001fd09
c0013490:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013494:	52                   	push   edx
c0013495:	e8 66 d2 fe ff       	call   c0000700 <strcmp>
c001349a:	83 c4 10             	add    esp,0x10
c001349d:	85 c0                	test   eax,eax
c001349f:	75 0f                	jne    c00134b0 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00134a1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00134a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00134a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134b0:	50                   	push   eax
c00134b1:	50                   	push   eax
c00134b2:	68 11 fd 01 c0       	push   0xc001fd11
c00134b7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00134bb:	50                   	push   eax
c00134bc:	e8 3f d2 fe ff       	call   c0000700 <strcmp>
c00134c1:	83 c4 10             	add    esp,0x10
c00134c4:	85 c0                	test   eax,eax
c00134c6:	75 0f                	jne    c00134d7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00134c8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00134cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134d7:	45                   	inc    ebp
c00134d8:	e9 4c ff ff ff       	jmp    c0013429 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00134dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00134e2:	75 10                	jne    c00134f4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00134e4:	83 ec 0c             	sub    esp,0xc
c00134e7:	68 19 fd 01 c0       	push   0xc001fd19
c00134ec:	e8 4e df ff ff       	call   c001143f <Krnl::panic(char const*)>
c00134f1:	83 c4 10             	add    esp,0x10
c00134f4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00134f9:	75 10                	jne    c001350b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00134fb:	83 ec 0c             	sub    esp,0xc
c00134fe:	68 19 fd 01 c0       	push   0xc001fd19
c0013503:	e8 37 df ff ff       	call   c001143f <Krnl::panic(char const*)>
c0013508:	83 c4 10             	add    esp,0x10
c001350b:	31 d2                	xor    edx,edx
c001350d:	50                   	push   eax
c001350e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013512:	52                   	push   edx
c0013513:	50                   	push   eax
c0013514:	53                   	push   ebx
c0013515:	e8 ca 8a ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c001351a:	5a                   	pop    edx
c001351b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001351f:	e8 3d 56 ff ff       	call   c0008b61 <malloc>
c0013524:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013528:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001352c:	31 c9                	xor    ecx,ecx
c001352e:	5e                   	pop    esi
c001352f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013531:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013535:	55                   	push   ebp
c0013536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001353a:	51                   	push   ecx
c001353b:	52                   	push   edx
c001353c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013540:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013544:	53                   	push   ebx
c0013545:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013548:	83 c4 14             	add    esp,0x14
c001354b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001354f:	e8 0d 56 ff ff       	call   c0008b61 <malloc>
c0013554:	89 c6                	mov    esi,eax
c0013556:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013558:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001355b:	56                   	push   esi
c001355c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013560:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013564:	51                   	push   ecx
c0013565:	52                   	push   edx
c0013566:	53                   	push   ebx
c0013567:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001356a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001356e:	8b 15 80 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025180
c0013574:	83 c4 1c             	add    esp,0x1c
c0013577:	c1 e8 04             	shr    eax,0x4
c001357a:	89 04 95 00 50 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb000],eax
c0013581:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013585:	31 d2                	xor    edx,edx
c0013587:	52                   	push   edx
c0013588:	50                   	push   eax
c0013589:	53                   	push   ebx
c001358a:	e8 55 8a ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c001358f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013591:	31 d2                	xor    edx,edx
c0013593:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013596:	56                   	push   esi
c0013597:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001359b:	52                   	push   edx
c001359c:	50                   	push   eax
c001359d:	53                   	push   ebx
c001359e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00135a1:	83 c4 14             	add    esp,0x14
c00135a4:	53                   	push   ebx
c00135a5:	e8 da 89 ff ff       	call   c000bf84 <File::close()>
c00135aa:	5d                   	pop    ebp
c00135ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00135af:	e8 bd 55 ff ff       	call   c0008b71 <free>
c00135b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00135b7:	e8 b5 55 ff ff       	call   c0008b71 <free>
c00135bc:	a1 80 51 02 c0       	mov    eax,ds:0xc0025180
c00135c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00135c5:	8d 50 01             	lea    edx,[eax+0x1]
c00135c8:	89 0c 85 00 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf00],ecx
c00135cf:	89 34 85 80 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf80],esi
c00135d6:	89 15 80 51 02 c0    	mov    DWORD PTR ds:0xc0025180,edx
c00135dc:	83 c4 10             	add    esp,0x10
c00135df:	b0 01                	mov    al,0x1
c00135e1:	83 c4 5c             	add    esp,0x5c
c00135e4:	5b                   	pop    ebx
c00135e5:	5e                   	pop    esi
c00135e6:	5f                   	pop    edi
c00135e7:	5d                   	pop    ebp
c00135e8:	c3                   	ret    

c00135e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00135e9:	55                   	push   ebp
c00135ea:	57                   	push   edi
c00135eb:	56                   	push   esi
c00135ec:	53                   	push   ebx
c00135ed:	81 ec 68 03 00 00    	sub    esp,0x368
c00135f3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00135fa:	8b 1d d0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251d0
c0013600:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0013604:	68 14 01 00 00       	push   0x114
c0013609:	e8 53 55 ff ff       	call   c0008b61 <malloc>
c001360e:	83 c4 0c             	add    esp,0xc
c0013611:	89 c5                	mov    ebp,eax
c0013613:	53                   	push   ebx
c0013614:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001361b:	50                   	push   eax
c001361c:	e8 45 88 ff ff       	call   c000be66 <File::File(char const*, Process*)>
c0013621:	5e                   	pop    esi
c0013622:	5f                   	pop    edi
c0013623:	6a 01                	push   0x1
c0013625:	55                   	push   ebp
c0013626:	e8 fb 88 ff ff       	call   c000bf26 <File::open(FileOpenMode)>
c001362b:	83 c4 10             	add    esp,0x10
c001362e:	85 c0                	test   eax,eax
c0013630:	0f 85 a7 06 00 00    	jne    c0013cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013636:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001363e:	83 ec 0c             	sub    esp,0xc
c0013641:	6a 34                	push   0x34
c0013643:	e8 19 55 ff ff       	call   c0008b61 <malloc>
c0013648:	5b                   	pop    ebx
c0013649:	89 c7                	mov    edi,eax
c001364b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001364f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013652:	53                   	push   ebx
c0013653:	57                   	push   edi
c0013654:	6a 00                	push   0x0
c0013656:	6a 34                	push   0x34
c0013658:	55                   	push   ebp
c0013659:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001365c:	83 c4 20             	add    esp,0x20
c001365f:	85 c0                	test   eax,eax
c0013661:	0f 85 76 06 00 00    	jne    c0013cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013667:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001366d:	0f 85 6a 06 00 00    	jne    c0013cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013673:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013676:	85 c0                	test   eax,eax
c0013678:	0f 84 5f 06 00 00    	je     c0013cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001367e:	31 d2                	xor    edx,edx
c0013680:	51                   	push   ecx
c0013681:	52                   	push   edx
c0013682:	50                   	push   eax
c0013683:	55                   	push   ebp
c0013684:	e8 5b 89 ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c0013689:	83 c4 10             	add    esp,0x10
c001368c:	85 c0                	test   eax,eax
c001368e:	0f 85 49 06 00 00    	jne    c0013cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013694:	83 ec 0c             	sub    esp,0xc
c0013697:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001369a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001369e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00136a2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00136a6:	0f af c2             	imul   eax,edx
c00136a9:	50                   	push   eax
c00136aa:	e8 b2 54 ff ff       	call   c0008b61 <malloc>
c00136af:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00136b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00136b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136bd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00136c1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00136c5:	0f af c2             	imul   eax,edx
c00136c8:	99                   	cdq    
c00136c9:	52                   	push   edx
c00136ca:	50                   	push   eax
c00136cb:	55                   	push   ebp
c00136cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00136cf:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00136d2:	83 c4 20             	add    esp,0x20
c00136d5:	85 c0                	test   eax,eax
c00136d7:	0f 84 00 06 00 00    	je     c0013cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00136dd:	52                   	push   edx
c00136de:	31 d2                	xor    edx,edx
c00136e0:	52                   	push   edx
c00136e1:	50                   	push   eax
c00136e2:	55                   	push   ebp
c00136e3:	e8 fc 88 ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c00136e8:	83 c4 10             	add    esp,0x10
c00136eb:	85 c0                	test   eax,eax
c00136ed:	0f 85 ea 05 00 00    	jne    c0013cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00136f3:	83 ec 0c             	sub    esp,0xc
c00136f6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00136fa:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00136fe:	31 f6                	xor    esi,esi
c0013700:	0f af c2             	imul   eax,edx
c0013703:	50                   	push   eax
c0013704:	e8 58 54 ff ff       	call   c0008b61 <malloc>
c0013709:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001370c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013710:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013713:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013717:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001371b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001371f:	0f af c2             	imul   eax,edx
c0013722:	99                   	cdq    
c0013723:	52                   	push   edx
c0013724:	50                   	push   eax
c0013725:	55                   	push   ebp
c0013726:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013729:	83 c4 20             	add    esp,0x20
c001372c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0013730:	0f 86 8a 00 00 00    	jbe    c00137c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0013736:	0f b7 de             	movzx  ebx,si
c0013739:	c1 e3 05             	shl    ebx,0x5
c001373c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0013740:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0013743:	75 75                	jne    c00137ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0013745:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013748:	31 d2                	xor    edx,edx
c001374a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001374e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013751:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013755:	50                   	push   eax
c0013756:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013759:	52                   	push   edx
c001375a:	50                   	push   eax
c001375b:	55                   	push   ebp
c001375c:	e8 83 88 ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c0013761:	83 c4 10             	add    esp,0x10
c0013764:	85 c0                	test   eax,eax
c0013766:	0f 85 71 05 00 00    	jne    c0013cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001376c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013773:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013776:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001377a:	31 d2                	xor    edx,edx
c001377c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013780:	83 ec 0c             	sub    esp,0xc
c0013783:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013787:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001378e:	50                   	push   eax
c001378f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013797:	52                   	push   edx
c0013798:	50                   	push   eax
c0013799:	55                   	push   ebp
c001379a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001379d:	83 c4 1c             	add    esp,0x1c
c00137a0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00137a3:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00137a6:	50                   	push   eax
c00137a7:	6a 00                	push   0x0
c00137a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ad:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00137b1:	50                   	push   eax
c00137b2:	e8 39 cd fe ff       	call   c00004f0 <memset>
c00137b7:	83 c4 10             	add    esp,0x10
c00137ba:	46                   	inc    esi
c00137bb:	e9 6c ff ff ff       	jmp    c001372c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00137c0:	53                   	push   ebx
c00137c1:	31 db                	xor    ebx,ebx
c00137c3:	68 00 01 00 00       	push   0x100
c00137c8:	6a 00                	push   0x0
c00137ca:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00137ce:	50                   	push   eax
c00137cf:	e8 1c cd fe ff       	call   c00004f0 <memset>
c00137d4:	83 c4 0c             	add    esp,0xc
c00137d7:	68 00 01 00 00       	push   0x100
c00137dc:	6a 00                	push   0x0
c00137de:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00137e5:	50                   	push   eax
c00137e6:	e8 05 cd fe ff       	call   c00004f0 <memset>
c00137eb:	83 c4 10             	add    esp,0x10
c00137ee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00137f6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00137fe:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0013806:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001380e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013816:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001381a:	0f 86 30 01 00 00    	jbe    c0013950 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0013820:	0f b7 f3             	movzx  esi,bx
c0013823:	6b f6 28             	imul   esi,esi,0x28
c0013826:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001382a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001382d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013831:	52                   	push   edx
c0013832:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013836:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001383a:	8b 06                	mov    eax,DWORD PTR [esi]
c001383c:	6b d2 28             	imul   edx,edx,0x28
c001383f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0013843:	31 d2                	xor    edx,edx
c0013845:	52                   	push   edx
c0013846:	50                   	push   eax
c0013847:	55                   	push   ebp
c0013848:	e8 97 87 ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c001384d:	83 c4 0c             	add    esp,0xc
c0013850:	6a 20                	push   0x20
c0013852:	6a 00                	push   0x0
c0013854:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001385b:	51                   	push   ecx
c001385c:	e8 8f cc fe ff       	call   c00004f0 <memset>
c0013861:	59                   	pop    ecx
c0013862:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013865:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013869:	52                   	push   edx
c001386a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0013871:	51                   	push   ecx
c0013872:	6a 00                	push   0x0
c0013874:	6a 1f                	push   0x1f
c0013876:	55                   	push   ebp
c0013877:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001387a:	83 c4 1c             	add    esp,0x1c
c001387d:	6a 09                	push   0x9
c001387f:	68 33 fd 01 c0       	push   0xc001fd33
c0013884:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001388b:	51                   	push   ecx
c001388c:	e8 1f cb fe ff       	call   c00003b0 <memcmp>
c0013891:	83 c4 10             	add    esp,0x10
c0013894:	85 c0                	test   eax,eax
c0013896:	75 21                	jne    c00138b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0013898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001389c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00138a0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00138a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00138a8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00138ab:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00138b2:	89 d0                	mov    eax,edx
c00138b4:	40                   	inc    eax
c00138b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00138b9:	50                   	push   eax
c00138ba:	6a 09                	push   0x9
c00138bc:	68 3d fd 01 c0       	push   0xc001fd3d
c00138c1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00138c8:	50                   	push   eax
c00138c9:	e8 e2 ca fe ff       	call   c00003b0 <memcmp>
c00138ce:	83 c4 10             	add    esp,0x10
c00138d1:	85 c0                	test   eax,eax
c00138d3:	75 21                	jne    c00138f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00138d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00138dd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00138e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00138e5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00138e8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00138ef:	89 d0                	mov    eax,edx
c00138f1:	40                   	inc    eax
c00138f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00138f6:	50                   	push   eax
c00138f7:	50                   	push   eax
c00138f8:	68 09 fd 01 c0       	push   0xc001fd09
c00138fd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013904:	50                   	push   eax
c0013905:	e8 f6 cd fe ff       	call   c0000700 <strcmp>
c001390a:	83 c4 10             	add    esp,0x10
c001390d:	85 c0                	test   eax,eax
c001390f:	75 0f                	jne    c0013920 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0013911:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013914:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013918:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001391c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013920:	50                   	push   eax
c0013921:	50                   	push   eax
c0013922:	68 11 fd 01 c0       	push   0xc001fd11
c0013927:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001392e:	50                   	push   eax
c001392f:	e8 cc cd fe ff       	call   c0000700 <strcmp>
c0013934:	83 c4 10             	add    esp,0x10
c0013937:	85 c0                	test   eax,eax
c0013939:	75 0f                	jne    c001394a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001393b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001393e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013946:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001394a:	43                   	inc    ebx
c001394b:	e9 c6 fe ff ff       	jmp    c0013816 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0013950:	31 d2                	xor    edx,edx
c0013952:	50                   	push   eax
c0013953:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013957:	52                   	push   edx
c0013958:	50                   	push   eax
c0013959:	55                   	push   ebp
c001395a:	e8 85 86 ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c001395f:	58                   	pop    eax
c0013960:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013964:	e8 f8 51 ff ff       	call   c0008b61 <malloc>
c0013969:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001396c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013970:	31 d2                	xor    edx,edx
c0013972:	58                   	pop    eax
c0013973:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013977:	53                   	push   ebx
c0013978:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001397c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013980:	52                   	push   edx
c0013981:	50                   	push   eax
c0013982:	55                   	push   ebp
c0013983:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013986:	83 c4 14             	add    esp,0x14
c0013989:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001398d:	e8 cf 51 ff ff       	call   c0008b61 <malloc>
c0013992:	31 d2                	xor    edx,edx
c0013994:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013998:	83 c4 0c             	add    esp,0xc
c001399b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001399f:	52                   	push   edx
c00139a0:	50                   	push   eax
c00139a1:	55                   	push   ebp
c00139a2:	e8 3d 86 ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c00139a7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00139aa:	31 d2                	xor    edx,edx
c00139ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00139b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00139b7:	52                   	push   edx
c00139b8:	50                   	push   eax
c00139b9:	55                   	push   ebp
c00139ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139bd:	83 c4 20             	add    esp,0x20
c00139c0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00139c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00139cc:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00139d0:	0f 84 0b 03 00 00    	je     c0013ce1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00139d6:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00139dd:	31 d2                	xor    edx,edx
c00139df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139e3:	c1 e8 03             	shr    eax,0x3
c00139e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00139ea:	51                   	push   ecx
c00139eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139ef:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00139f3:	52                   	push   edx
c00139f4:	50                   	push   eax
c00139f5:	55                   	push   ebp
c00139f6:	e8 e9 85 ff ff       	call   c000bfe4 <File::seek(unsigned long long)>
c00139fb:	5b                   	pop    ebx
c00139fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a00:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0013a07:	e8 55 51 ff ff       	call   c0008b61 <malloc>
c0013a0c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013a0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a13:	31 d2                	xor    edx,edx
c0013a15:	5e                   	pop    esi
c0013a16:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013a1a:	50                   	push   eax
c0013a1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013a23:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0013a2a:	52                   	push   edx
c0013a2b:	50                   	push   eax
c0013a2c:	55                   	push   ebp
c0013a2d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a30:	83 c4 20             	add    esp,0x20
c0013a33:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013a3b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013a3f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0013a43:	0f 8d 7c 02 00 00    	jge    c0013cc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0013a49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a51:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0013a56:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0013a59:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013a5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a61:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0013a65:	89 d8                	mov    eax,ebx
c0013a67:	c1 e8 08             	shr    eax,0x8
c0013a6a:	89 c6                	mov    esi,eax
c0013a6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013a70:	c1 e6 04             	shl    esi,0x4
c0013a73:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013a77:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0013a7a:	85 d2                	test   edx,edx
c0013a7c:	0f 85 bf 00 00 00    	jne    c0013b41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013a82:	83 ec 0c             	sub    esp,0xc
c0013a85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013a89:	03 06                	add    eax,DWORD PTR [esi]
c0013a8b:	50                   	push   eax
c0013a8c:	e8 4b f8 ff ff       	call   c00132dc <Thr::getAddressOfKernelSymbol(char const*)>
c0013a91:	83 c4 10             	add    esp,0x10
c0013a94:	89 c2                	mov    edx,eax
c0013a96:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0013a9b:	85 c0                	test   eax,eax
c0013a9d:	0f 85 9e 00 00 00    	jne    c0013b41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013aa3:	83 ec 0c             	sub    esp,0xc
c0013aa6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013aaa:	03 06                	add    eax,DWORD PTR [esi]
c0013aac:	50                   	push   eax
c0013aad:	e8 96 41 ff ff       	call   c0007c48 <Krnl::resolveCompatibilitySymbol(char*)>
c0013ab2:	83 c4 10             	add    esp,0x10
c0013ab5:	89 c2                	mov    edx,eax
c0013ab7:	85 c0                	test   eax,eax
c0013ab9:	0f 85 82 00 00 00    	jne    c0013b41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013abf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013ac3:	50                   	push   eax
c0013ac4:	50                   	push   eax
c0013ac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ac9:	03 06                	add    eax,DWORD PTR [esi]
c0013acb:	50                   	push   eax
c0013acc:	68 47 fd 01 c0       	push   0xc001fd47
c0013ad1:	e8 1a 7e ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0013ad6:	58                   	pop    eax
c0013ad7:	5a                   	pop    edx
c0013ad8:	68 61 fd 01 c0       	push   0xc001fd61
c0013add:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013ae4:	50                   	push   eax
c0013ae5:	e8 36 cb fe ff       	call   c0000620 <strcpy>
c0013aea:	59                   	pop    ecx
c0013aeb:	58                   	pop    eax
c0013aec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013af0:	03 06                	add    eax,DWORD PTR [esi]
c0013af2:	50                   	push   eax
c0013af3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013afa:	50                   	push   eax
c0013afb:	e8 e0 cc fe ff       	call   c00007e0 <strcat>
c0013b00:	58                   	pop    eax
c0013b01:	5a                   	pop    edx
c0013b02:	68 f7 fd 01 c0       	push   0xc001fdf7
c0013b07:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013b0e:	50                   	push   eax
c0013b0f:	e8 cc cc fe ff       	call   c00007e0 <strcat>
c0013b14:	83 c4 10             	add    esp,0x10
c0013b17:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013b1c:	0f 84 5d 01 00 00    	je     c0013c7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013b22:	83 ec 0c             	sub    esp,0xc
c0013b25:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013b2c:	50                   	push   eax
c0013b2d:	e8 0d d9 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0013b32:	83 c4 10             	add    esp,0x10
c0013b35:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0013b39:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013b3d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0013b41:	80 fb 01             	cmp    bl,0x1
c0013b44:	0f 85 88 00 00 00    	jne    c0013bd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0013b4a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0013b51:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013b55:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0013b59:	01 ce                	add    esi,ecx
c0013b5b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0013b61:	0f 94 c0             	sete   al
c0013b64:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013b6a:	0f 94 c3             	sete   bl
c0013b6d:	09 c3                	or     ebx,eax
c0013b6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b71:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013b76:	74 41                	je     c0013bb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0013b78:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013b7b:	84 db                	test   bl,bl
c0013b7d:	75 15                	jne    c0013b94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0013b7f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013b83:	66 83 f8 0c          	cmp    ax,0xc
c0013b87:	76 05                	jbe    c0013b8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0013b89:	b8 0c 00 00 00       	mov    eax,0xc
c0013b8e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013b92:	76 37                	jbe    c0013bcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013b94:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0013b98:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013b9d:	0f 84 dc 00 00 00    	je     c0013c7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013ba3:	83 ec 0c             	sub    esp,0xc
c0013ba6:	68 78 fd 01 c0       	push   0xc001fd78
c0013bab:	e8 8f d8 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0013bb0:	83 c4 10             	add    esp,0x10
c0013bb3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013bb7:	eb 12                	jmp    c0013bcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013bb9:	01 c1                	add    ecx,eax
c0013bbb:	84 db                	test   bl,bl
c0013bbd:	75 0c                	jne    c0013bcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013bbf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013bc3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013bc7:	77 02                	ja     c0013bcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013bc9:	01 d1                	add    ecx,edx
c0013bcb:	89 0e                	mov    DWORD PTR [esi],ecx
c0013bcd:	e9 ea 00 00 00       	jmp    c0013cbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013bd2:	80 fb 02             	cmp    bl,0x2
c0013bd5:	75 7c                	jne    c0013c53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0013bd7:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0013bde:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0013be2:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0013be6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0013bec:	74 20                	je     c0013c0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013bee:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013bf4:	74 18                	je     c0013c0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013bf6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013bfa:	b9 0a 00 00 00       	mov    ecx,0xa
c0013bff:	66 83 f8 0e          	cmp    ax,0xe
c0013c03:	77 03                	ja     c0013c08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0013c05:	8d 48 fc             	lea    ecx,[eax-0x4]
c0013c08:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0013c0c:	76 1f                	jbe    c0013c2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0013c0e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0013c12:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013c17:	74 66                	je     c0013c7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013c19:	83 ec 0c             	sub    esp,0xc
c0013c1c:	68 94 fd 01 c0       	push   0xc001fd94
c0013c21:	e8 19 d8 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0013c26:	83 c4 10             	add    esp,0x10
c0013c29:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013c2d:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c2f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013c34:	74 13                	je     c0013c49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0013c36:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013c3a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0013c41:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0013c45:	01 c8                	add    eax,ecx
c0013c47:	eb 04                	jmp    c0013c4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0013c49:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013c4d:	01 c2                	add    edx,eax
c0013c4f:	89 16                	mov    DWORD PTR [esi],edx
c0013c51:	eb 69                	jmp    c0013cbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013c53:	0f b6 db             	movzx  ebx,bl
c0013c56:	50                   	push   eax
c0013c57:	50                   	push   eax
c0013c58:	53                   	push   ebx
c0013c59:	68 b0 fd 01 c0       	push   0xc001fdb0
c0013c5e:	e8 8d 7c ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0013c63:	83 c4 10             	add    esp,0x10
c0013c66:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013c6b:	74 12                	je     c0013c7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013c6d:	83 ec 0c             	sub    esp,0xc
c0013c70:	68 bb fd 01 c0       	push   0xc001fdbb
c0013c75:	e8 c5 d7 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0013c7a:	83 c4 10             	add    esp,0x10
c0013c7d:	eb 3d                	jmp    c0013cbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013c7f:	83 ec 0c             	sub    esp,0xc
c0013c82:	55                   	push   ebp
c0013c83:	e8 fc 82 ff ff       	call   c000bf84 <File::close()>
c0013c88:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013c8b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013c8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c91:	59                   	pop    ecx
c0013c92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c96:	e8 d6 4e ff ff       	call   c0008b71 <free>
c0013c9b:	5b                   	pop    ebx
c0013c9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013ca0:	e8 cc 4e ff ff       	call   c0008b71 <free>
c0013ca5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013ca8:	e8 c4 4e ff ff       	call   c0008b71 <free>
c0013cad:	5e                   	pop    esi
c0013cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cb2:	e8 ba 4e ff ff       	call   c0008b71 <free>
c0013cb7:	83 c4 10             	add    esp,0x10
c0013cba:	eb 21                	jmp    c0013cdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013cbc:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0013cc0:	e9 76 fd ff ff       	jmp    c0013a3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0013cc5:	83 ec 0c             	sub    esp,0xc
c0013cc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ccc:	e8 a0 4e ff ff       	call   c0008b71 <free>
c0013cd1:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0013cd5:	83 c4 10             	add    esp,0x10
c0013cd8:	e9 eb fc ff ff       	jmp    c00139c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0013cdd:	31 c0                	xor    eax,eax
c0013cdf:	eb 33                	jmp    c0013d14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0013ce1:	83 ec 0c             	sub    esp,0xc
c0013ce4:	55                   	push   ebp
c0013ce5:	e8 9a 82 ff ff       	call   c000bf84 <File::close()>
c0013cea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ced:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013cf0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cf3:	58                   	pop    eax
c0013cf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013cf8:	e8 74 4e ff ff       	call   c0008b71 <free>
c0013cfd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013d00:	e8 6c 4e ff ff       	call   c0008b71 <free>
c0013d05:	5a                   	pop    edx
c0013d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d0a:	e8 62 4e ff ff       	call   c0008b71 <free>
c0013d0f:	83 c4 10             	add    esp,0x10
c0013d12:	b0 01                	mov    al,0x1
c0013d14:	81 c4 5c 03 00 00    	add    esp,0x35c
c0013d1a:	5b                   	pop    ebx
c0013d1b:	5e                   	pop    esi
c0013d1c:	5f                   	pop    edi
c0013d1d:	5d                   	pop    ebp
c0013d1e:	c3                   	ret    

c0013d1f <Thr::getDriverBaseFromAddress(unsigned long)>:
c0013d1f:	56                   	push   esi
c0013d20:	31 d2                	xor    edx,edx
c0013d22:	53                   	push   ebx
c0013d23:	8b 1d e0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249e0
c0013d29:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d2d:	39 d3                	cmp    ebx,edx
c0013d2f:	7e 1b                	jle    c0013d4c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0013d31:	8b 04 95 00 4c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb400]
c0013d38:	39 c8                	cmp    eax,ecx
c0013d3a:	77 0d                	ja     c0013d49 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0013d3c:	8b 34 95 00 4a 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb600]
c0013d43:	01 c6                	add    esi,eax
c0013d45:	39 ce                	cmp    esi,ecx
c0013d47:	77 05                	ja     c0013d4e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0013d49:	42                   	inc    edx
c0013d4a:	eb e1                	jmp    c0013d2d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0013d4c:	31 c0                	xor    eax,eax
c0013d4e:	5b                   	pop    ebx
c0013d4f:	5e                   	pop    esi
c0013d50:	c3                   	ret    

c0013d51 <Thr::getDriverNameFromAddress(unsigned long)>:
c0013d51:	53                   	push   ebx
c0013d52:	31 c0                	xor    eax,eax
c0013d54:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013d58:	8b 1d e0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249e0
c0013d5e:	39 c3                	cmp    ebx,eax
c0013d60:	7e 22                	jle    c0013d84 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0013d62:	8b 14 85 00 4c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb400]
c0013d69:	39 ca                	cmp    edx,ecx
c0013d6b:	77 14                	ja     c0013d81 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013d6d:	03 14 85 00 4a 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb600]
c0013d74:	39 ca                	cmp    edx,ecx
c0013d76:	76 09                	jbe    c0013d81 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013d78:	8b 04 85 00 4e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb200]
c0013d7f:	eb 05                	jmp    c0013d86 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0013d81:	40                   	inc    eax
c0013d82:	eb da                	jmp    c0013d5e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0013d84:	31 c0                	xor    eax,eax
c0013d86:	5b                   	pop    ebx
c0013d87:	c3                   	ret    

c0013d88 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0013d88:	53                   	push   ebx
c0013d89:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0013d8d:	53                   	push   ebx
c0013d8e:	e8 8c ff ff ff       	call   c0013d1f <Thr::getDriverBaseFromAddress(unsigned long)>
c0013d93:	5a                   	pop    edx
c0013d94:	31 d2                	xor    edx,edx
c0013d96:	85 c0                	test   eax,eax
c0013d98:	74 04                	je     c0013d9e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0013d9a:	89 da                	mov    edx,ebx
c0013d9c:	29 c2                	sub    edx,eax
c0013d9e:	89 d0                	mov    eax,edx
c0013da0:	5b                   	pop    ebx
c0013da1:	c3                   	ret    

c0013da2 <Thr::loadDLL(char const*, bool)>:
c0013da2:	55                   	push   ebp
c0013da3:	57                   	push   edi
c0013da4:	56                   	push   esi
c0013da5:	53                   	push   ebx
c0013da6:	81 ec 34 01 00 00    	sub    esp,0x134
c0013dac:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0013db3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0013dba:	56                   	push   esi
c0013dbb:	68 d3 fd 01 c0       	push   0xc001fdd3
c0013dc0:	e8 2b 7b ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0013dc5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013dcc:	e8 90 4d ff ff       	call   c0008b61 <malloc>
c0013dd1:	83 c4 0c             	add    esp,0xc
c0013dd4:	89 c3                	mov    ebx,eax
c0013dd6:	ff 35 d0 51 02 c0    	push   DWORD PTR ds:0xc00251d0
c0013ddc:	56                   	push   esi
c0013ddd:	50                   	push   eax
c0013dde:	e8 83 80 ff ff       	call   c000be66 <File::File(char const*, Process*)>
c0013de3:	83 c4 10             	add    esp,0x10
c0013de6:	85 db                	test   ebx,ebx
c0013de8:	75 3c                	jne    c0013e26 <Thr::loadDLL(char const*, bool)+0x84>
c0013dea:	89 f8                	mov    eax,edi
c0013dec:	84 c0                	test   al,al
c0013dee:	0f 84 d2 01 00 00    	je     c0013fc6 <Thr::loadDLL(char const*, bool)+0x224>
c0013df4:	55                   	push   ebp
c0013df5:	55                   	push   ebp
c0013df6:	68 e4 fd 01 c0       	push   0xc001fde4
c0013dfb:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0013dff:	55                   	push   ebp
c0013e00:	e8 1b c8 fe ff       	call   c0000620 <strcpy>
c0013e05:	58                   	pop    eax
c0013e06:	5a                   	pop    edx
c0013e07:	56                   	push   esi
c0013e08:	55                   	push   ebp
c0013e09:	e8 d2 c9 fe ff       	call   c00007e0 <strcat>
c0013e0e:	59                   	pop    ecx
c0013e0f:	58                   	pop    eax
c0013e10:	68 f7 fd 01 c0       	push   0xc001fdf7
c0013e15:	55                   	push   ebp
c0013e16:	e8 c5 c9 fe ff       	call   c00007e0 <strcat>
c0013e1b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013e1e:	e8 1c d6 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0013e23:	83 c4 10             	add    esp,0x10
c0013e26:	51                   	push   ecx
c0013e27:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0013e2b:	50                   	push   eax
c0013e2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013e30:	50                   	push   eax
c0013e31:	53                   	push   ebx
c0013e32:	e8 9b 83 ff ff       	call   c000c1d2 <File::stat(unsigned long long*, bool*)>
c0013e37:	83 c4 10             	add    esp,0x10
c0013e3a:	85 db                	test   ebx,ebx
c0013e3c:	74 0c                	je     c0013e4a <Thr::loadDLL(char const*, bool)+0xa8>
c0013e3e:	83 ec 0c             	sub    esp,0xc
c0013e41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e43:	53                   	push   ebx
c0013e44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013e47:	83 c4 10             	add    esp,0x10
c0013e4a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0013e4f:	75 0a                	jne    c0013e5b <Thr::loadDLL(char const*, bool)+0xb9>
c0013e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e55:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0013e59:	75 3c                	jne    c0013e97 <Thr::loadDLL(char const*, bool)+0xf5>
c0013e5b:	89 f8                	mov    eax,edi
c0013e5d:	84 c0                	test   al,al
c0013e5f:	0f 84 49 01 00 00    	je     c0013fae <Thr::loadDLL(char const*, bool)+0x20c>
c0013e65:	51                   	push   ecx
c0013e66:	51                   	push   ecx
c0013e67:	68 e4 fd 01 c0       	push   0xc001fde4
c0013e6c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0013e70:	53                   	push   ebx
c0013e71:	e8 aa c7 fe ff       	call   c0000620 <strcpy>
c0013e76:	5d                   	pop    ebp
c0013e77:	58                   	pop    eax
c0013e78:	56                   	push   esi
c0013e79:	53                   	push   ebx
c0013e7a:	e8 61 c9 fe ff       	call   c00007e0 <strcat>
c0013e7f:	58                   	pop    eax
c0013e80:	5a                   	pop    edx
c0013e81:	68 f7 fd 01 c0       	push   0xc001fdf7
c0013e86:	53                   	push   ebx
c0013e87:	e8 54 c9 fe ff       	call   c00007e0 <strcat>
c0013e8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e8f:	e8 ab d5 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0013e94:	83 c4 10             	add    esp,0x10
c0013e97:	52                   	push   edx
c0013e98:	6a 03                	push   0x3
c0013e9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e9e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013ea2:	05 ff 0f 00 00       	add    eax,0xfff
c0013ea7:	83 d2 00             	adc    edx,0x0
c0013eaa:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013eae:	50                   	push   eax
c0013eaf:	ff 35 d0 1d 02 c0    	push   DWORD PTR ds:0xc0021dd0
c0013eb5:	e8 7c 6f ff ff       	call   c000ae36 <VAS::allocatePages(int, int)>
c0013eba:	59                   	pop    ecx
c0013ebb:	89 c3                	mov    ebx,eax
c0013ebd:	5d                   	pop    ebp
c0013ebe:	50                   	push   eax
c0013ebf:	68 de eb 01 c0       	push   0xc001ebde
c0013ec4:	e8 27 7a ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0013ec9:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ecc:	e8 8f c6 fe ff       	call   c0000560 <strlen>
c0013ed1:	8b 2d e0 49 02 c0    	mov    ebp,DWORD PTR ds:0xc00249e0
c0013ed7:	40                   	inc    eax
c0013ed8:	89 04 24             	mov    DWORD PTR [esp],eax
c0013edb:	e8 81 4c ff ff       	call   c0008b61 <malloc>
c0013ee0:	89 04 ad 00 4e 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb200],eax
c0013ee7:	58                   	pop    eax
c0013ee8:	a1 e0 49 02 c0       	mov    eax,ds:0xc00249e0
c0013eed:	5a                   	pop    edx
c0013eee:	56                   	push   esi
c0013eef:	ff 34 85 00 4e 02 c0 	push   DWORD PTR [eax*4-0x3ffdb200]
c0013ef6:	e8 25 c7 fe ff       	call   c0000620 <strcpy>
c0013efb:	a1 e0 49 02 c0       	mov    eax,ds:0xc00249e0
c0013f00:	8d 50 01             	lea    edx,[eax+0x1]
c0013f03:	89 1c 85 00 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb400],ebx
c0013f0a:	89 15 e0 49 02 c0    	mov    DWORD PTR ds:0xc00249e0,edx
c0013f10:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f14:	83 c4 0c             	add    esp,0xc
c0013f17:	89 14 85 00 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb600],edx
c0013f1e:	6a 01                	push   0x1
c0013f20:	53                   	push   ebx
c0013f21:	56                   	push   esi
c0013f22:	e8 c2 f6 ff ff       	call   c00135e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0013f27:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013f2b:	83 c4 10             	add    esp,0x10
c0013f2e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013f33:	0f 85 89 00 00 00    	jne    c0013fc2 <Thr::loadDLL(char const*, bool)+0x220>
c0013f39:	89 f8                	mov    eax,edi
c0013f3b:	84 c0                	test   al,al
c0013f3d:	74 73                	je     c0013fb2 <Thr::loadDLL(char const*, bool)+0x210>
c0013f3f:	83 ec 0c             	sub    esp,0xc
c0013f42:	68 f9 fd 01 c0       	push   0xc001fdf9
c0013f47:	e8 f3 d4 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0013f4c:	83 c4 10             	add    esp,0x10
c0013f4f:	eb 61                	jmp    c0013fb2 <Thr::loadDLL(char const*, bool)+0x210>
c0013f51:	50                   	push   eax
c0013f52:	50                   	push   eax
c0013f53:	89 e8                	mov    eax,ebp
c0013f55:	c1 e0 0c             	shl    eax,0xc
c0013f58:	01 d8                	add    eax,ebx
c0013f5a:	50                   	push   eax
c0013f5b:	ff 35 d0 1d 02 c0    	push   DWORD PTR ds:0xc0021dd0
c0013f61:	e8 48 6a ff ff       	call   c000a9ae <VAS::getPageTableEntry(unsigned long)>
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f6b:	a8 60                	test   al,0x60
c0013f6d:	75 11                	jne    c0013f80 <Thr::loadDLL(char const*, bool)+0x1de>
c0013f6f:	83 ec 0c             	sub    esp,0xc
c0013f72:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013f77:	50                   	push   eax
c0013f78:	e8 4f 4f ff ff       	call   c0008ecc <Phys::freePage(unsigned long)>
c0013f7d:	83 c4 10             	add    esp,0x10
c0013f80:	45                   	inc    ebp
c0013f81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f85:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013f89:	05 ff 0f 00 00       	add    eax,0xfff
c0013f8e:	bf 00 00 00 00       	mov    edi,0x0
c0013f93:	83 d2 00             	adc    edx,0x0
c0013f96:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013f9a:	c1 ea 0c             	shr    edx,0xc
c0013f9d:	39 c5                	cmp    ebp,eax
c0013f9f:	89 d1                	mov    ecx,edx
c0013fa1:	89 f8                	mov    eax,edi
c0013fa3:	19 c8                	sbb    eax,ecx
c0013fa5:	72 aa                	jb     c0013f51 <Thr::loadDLL(char const*, bool)+0x1af>
c0013fa7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013fac:	75 18                	jne    c0013fc6 <Thr::loadDLL(char const*, bool)+0x224>
c0013fae:	31 db                	xor    ebx,ebx
c0013fb0:	eb 14                	jmp    c0013fc6 <Thr::loadDLL(char const*, bool)+0x224>
c0013fb2:	83 ec 0c             	sub    esp,0xc
c0013fb5:	68 18 fe 01 c0       	push   0xc001fe18
c0013fba:	e8 80 d4 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0013fbf:	83 c4 10             	add    esp,0x10
c0013fc2:	31 ed                	xor    ebp,ebp
c0013fc4:	eb bb                	jmp    c0013f81 <Thr::loadDLL(char const*, bool)+0x1df>
c0013fc6:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013fcc:	89 d8                	mov    eax,ebx
c0013fce:	5b                   	pop    ebx
c0013fcf:	5e                   	pop    esi
c0013fd0:	5f                   	pop    edi
c0013fd1:	5d                   	pop    ebp
c0013fd2:	c3                   	ret    

c0013fd3 <Thr::executeDLL(unsigned long, void*)>:
c0013fd3:	56                   	push   esi
c0013fd4:	53                   	push   ebx
c0013fd5:	52                   	push   edx
c0013fd6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fda:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013fde:	85 db                	test   ebx,ebx
c0013fe0:	75 10                	jne    c0013ff2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0013fe2:	83 ec 0c             	sub    esp,0xc
c0013fe5:	68 34 fe 01 c0       	push   0xc001fe34
c0013fea:	e8 50 d4 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0013fef:	83 c4 10             	add    esp,0x10
c0013ff2:	50                   	push   eax
c0013ff3:	50                   	push   eax
c0013ff4:	53                   	push   ebx
c0013ff5:	68 5e fe 01 c0       	push   0xc001fe5e
c0013ffa:	e8 f1 78 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0013fff:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014003:	89 d8                	mov    eax,ebx
c0014005:	83 c4 14             	add    esp,0x14
c0014008:	5b                   	pop    ebx
c0014009:	5e                   	pop    esi
c001400a:	ff e0                	jmp    eax

c001400c <userModeEntryPoint(void*)>:
c001400c:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0014011:	48                   	dec    eax
c0014012:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0014017:	75 03                	jne    c001401c <userModeEntryPoint(void*)+0x10>
c0014019:	fb                   	sti    
c001401a:	66 90                	xchg   ax,ax
c001401c:	fb                   	sti    
c001401d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014022:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014025:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001402b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001402f:	e9 2b c2 fe ff       	jmp    c000025f <goToUsermode>

c0014034 <changeTSS>:
c0014034:	83 ec 14             	sub    esp,0x14
c0014037:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001403c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001403f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014044:	c1 e2 15             	shl    edx,0x15
c0014047:	29 d0                	sub    eax,edx
c0014049:	50                   	push   eax
c001404a:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c001404f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014055:	05 7c 11 00 00       	add    eax,0x117c
c001405a:	50                   	push   eax
c001405b:	e8 90 5f ff ff       	call   c0009ff0 <TSS::setESP(unsigned long)>
c0014060:	83 c4 1c             	add    esp,0x1c
c0014063:	c3                   	ret    

c0014064 <switchToThread(ThreadControlBlock*)>:
c0014064:	57                   	push   edi
c0014065:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c001406a:	56                   	push   esi
c001406b:	85 c0                	test   eax,eax
c001406d:	53                   	push   ebx
c001406e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014072:	0f 85 90 00 00 00    	jne    c0014108 <switchToThread(ThreadControlBlock*)+0xa4>
c0014078:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c001407b:	80 fa ff             	cmp    dl,0xff
c001407e:	0f 84 80 00 00 00    	je     c0014104 <switchToThread(ThreadControlBlock*)+0xa0>
c0014084:	81 e2 ff 00 00 00    	and    edx,0xff
c001408a:	b8 00 04 00 00       	mov    eax,0x400
c001408f:	29 d0                	sub    eax,edx
c0014091:	d1 f8                	sar    eax,1
c0014093:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0014096:	66 90                	xchg   ax,ax
c0014098:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001409b:	e8 7b 24 00 00       	call   c001651b <HalQueryPerformanceCounter()>
c00140a0:	a3 e8 51 02 c0       	mov    ds:0xc00251e8,eax
c00140a5:	89 15 ec 51 02 c0    	mov    DWORD PTR ds:0xc00251ec,edx
c00140ab:	89 c6                	mov    esi,eax
c00140ad:	89 d7                	mov    edi,edx
c00140af:	2b 35 d8 51 02 c0    	sub    esi,DWORD PTR ds:0xc00251d8
c00140b5:	a3 d8 51 02 c0       	mov    ds:0xc00251d8,eax
c00140ba:	1b 3d dc 51 02 c0    	sbb    edi,DWORD PTR ds:0xc00251dc
c00140c0:	89 35 e0 51 02 c0    	mov    DWORD PTR ds:0xc00251e0,esi
c00140c6:	89 3d e4 51 02 c0    	mov    DWORD PTR ds:0xc00251e4,edi
c00140cc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00140d2:	89 15 dc 51 02 c0    	mov    DWORD PTR ds:0xc00251dc,edx
c00140d8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00140db:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00140de:	01 c6                	add    esi,eax
c00140e0:	11 d7                	adc    edi,edx
c00140e2:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00140e5:	83 ec 0c             	sub    esp,0xc
c00140e8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00140eb:	53                   	push   ebx
c00140ec:	e8 a6 c1 fe ff       	call   c0000297 <switchToThreadASM>
c00140f1:	0f 20 c0             	mov    eax,cr0
c00140f4:	83 c8 08             	or     eax,0x8
c00140f7:	0f 22 c0             	mov    cr0,eax
c00140fa:	83 c4 10             	add    esp,0x10
c00140fd:	5b                   	pop    ebx
c00140fe:	5e                   	pop    esi
c00140ff:	5f                   	pop    edi
c0014100:	c3                   	ret    
c0014101:	8d 76 00             	lea    esi,[esi+0x0]
c0014104:	31 c0                	xor    eax,eax
c0014106:	eb 90                	jmp    c0014098 <switchToThread(ThreadControlBlock*)+0x34>
c0014108:	5b                   	pop    ebx
c0014109:	c7 05 a0 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00251a0,0x1
c0014113:	5e                   	pop    esi
c0014114:	5f                   	pop    edi
c0014115:	c3                   	ret    
c0014116:	66 90                	xchg   ax,ax

c0014118 <Process::addArgs(char**)>:
c0014118:	57                   	push   edi
c0014119:	56                   	push   esi
c001411a:	53                   	push   ebx
c001411b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001411f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014123:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c001412d:	85 ff                	test   edi,edi
c001412f:	74 43                	je     c0014174 <Process::addArgs(char**)+0x5c>
c0014131:	8b 07                	mov    eax,DWORD PTR [edi]
c0014133:	85 c0                	test   eax,eax
c0014135:	74 3d                	je     c0014174 <Process::addArgs(char**)+0x5c>
c0014137:	31 db                	xor    ebx,ebx
c0014139:	8d 76 00             	lea    esi,[esi+0x0]
c001413c:	83 ec 0c             	sub    esp,0xc
c001413f:	50                   	push   eax
c0014140:	e8 1b c4 fe ff       	call   c0000560 <strlen>
c0014145:	40                   	inc    eax
c0014146:	89 04 24             	mov    DWORD PTR [esp],eax
c0014149:	e8 13 4a ff ff       	call   c0008b61 <malloc>
c001414e:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014155:	5a                   	pop    edx
c0014156:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014159:	59                   	pop    ecx
c001415a:	43                   	inc    ebx
c001415b:	52                   	push   edx
c001415c:	50                   	push   eax
c001415d:	e8 be c4 fe ff       	call   c0000620 <strcpy>
c0014162:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0014168:	83 c4 10             	add    esp,0x10
c001416b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001416e:	85 c0                	test   eax,eax
c0014170:	75 ca                	jne    c001413c <Process::addArgs(char**)+0x24>
c0014172:	66 90                	xchg   ax,ax
c0014174:	5b                   	pop    ebx
c0014175:	5e                   	pop    esi
c0014176:	5f                   	pop    edi
c0014177:	c3                   	ret    

c0014178 <Process::Process(char const*, Process*, char**)>:
c0014178:	56                   	push   esi
c0014179:	53                   	push   ebx
c001417a:	83 ec 14             	sub    esp,0x14
c001417d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014181:	05 0c 02 00 00       	add    eax,0x20c
c0014186:	bb 07 00 00 00       	mov    ebx,0x7
c001418b:	89 c6                	mov    esi,eax
c001418d:	8d 76 00             	lea    esi,[esi+0x0]
c0014190:	85 db                	test   ebx,ebx
c0014192:	78 14                	js     c00141a8 <Process::Process(char const*, Process*, char**)+0x30>
c0014194:	83 ec 0c             	sub    esp,0xc
c0014197:	56                   	push   esi
c0014198:	e8 cf 9c 00 00       	call   c001de6c <ThreadControlBlock::ThreadControlBlock()>
c001419d:	83 c4 10             	add    esp,0x10
c00141a0:	83 c6 5f             	add    esi,0x5f
c00141a3:	4b                   	dec    ebx
c00141a4:	eb ea                	jmp    c0014190 <Process::Process(char const*, Process*, char**)+0x18>
c00141a6:	66 90                	xchg   ax,ax
c00141a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141ac:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00141b3:	83 ec 0c             	sub    esp,0xc
c00141b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141ba:	e8 09 d1 ff ff       	call   c00112c8 <Krnl::newProcessEnv(Process*)>
c00141bf:	83 c4 10             	add    esp,0x10
c00141c2:	89 c2                	mov    edx,eax
c00141c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141c8:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00141ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141d2:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00141db:	a1 d0 0c 02 c0       	mov    eax,ds:0xc0020cd0
c00141e0:	8d 50 01             	lea    edx,[eax+0x1]
c00141e3:	89 15 d0 0c 02 c0    	mov    DWORD PTR ds:0xc0020cd0,edx
c00141e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141ed:	89 02                	mov    DWORD PTR [edx],eax
c00141ef:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00141f7:	83 ec 0c             	sub    esp,0xc
c00141fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141fe:	e8 5e 49 ff ff       	call   c0008b61 <malloc>
c0014203:	83 c4 10             	add    esp,0x10
c0014206:	89 c3                	mov    ebx,eax
c0014208:	83 ec 08             	sub    esp,0x8
c001420b:	6a 00                	push   0x0
c001420d:	53                   	push   ebx
c001420e:	e8 cd 6f ff ff       	call   c000b1e0 <VAS::VAS(bool)>
c0014213:	83 c4 10             	add    esp,0x10
c0014216:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001421a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014224:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001422e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014232:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014236:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001423c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014240:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014246:	85 c0                	test   eax,eax
c0014248:	74 42                	je     c001428c <Process::Process(char const*, Process*, char**)+0x114>
c001424a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001424e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014254:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001425a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001425e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014268:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001426e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014278:	05 0c 01 00 00       	add    eax,0x10c
c001427d:	83 ec 08             	sub    esp,0x8
c0014280:	52                   	push   edx
c0014281:	50                   	push   eax
c0014282:	e8 99 c3 fe ff       	call   c0000620 <strcpy>
c0014287:	83 c4 10             	add    esp,0x10
c001428a:	eb 64                	jmp    c00142f0 <Process::Process(char const*, Process*, char**)+0x178>
c001428c:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0014294:	83 ec 0c             	sub    esp,0xc
c0014297:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001429b:	e8 c1 48 ff ff       	call   c0008b61 <malloc>
c00142a0:	83 c4 10             	add    esp,0x10
c00142a3:	89 c3                	mov    ebx,eax
c00142a5:	83 ec 08             	sub    esp,0x8
c00142a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142ac:	53                   	push   ebx
c00142ad:	e8 e2 5a ff ff       	call   c0009d94 <VgaText::VgaText(char const*)>
c00142b2:	83 c4 10             	add    esp,0x10
c00142b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142b9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00142bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142c9:	83 ec 0c             	sub    esp,0xc
c00142cc:	50                   	push   eax
c00142cd:	e8 62 53 ff ff       	call   c0009634 <addToTerminalCycle(VgaText*)>
c00142d2:	83 c4 10             	add    esp,0x10
c00142d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142d9:	05 0c 01 00 00       	add    eax,0x10c
c00142de:	83 ec 08             	sub    esp,0x8
c00142e1:	68 7d fe 01 c0       	push   0xc001fe7d
c00142e6:	50                   	push   eax
c00142e7:	e8 34 c3 fe ff       	call   c0000620 <strcpy>
c00142ec:	83 c4 10             	add    esp,0x10
c00142ef:	90                   	nop
c00142f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142f4:	83 c0 0c             	add    eax,0xc
c00142f7:	83 ec 08             	sub    esp,0x8
c00142fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142fe:	50                   	push   eax
c00142ff:	e8 1c c3 fe ff       	call   c0000620 <strcpy>
c0014304:	83 c4 10             	add    esp,0x10
c0014307:	83 ec 08             	sub    esp,0x8
c001430a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001430e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014312:	e8 01 fe ff ff       	call   c0014118 <Process::addArgs(char**)>
c0014317:	83 c4 10             	add    esp,0x10
c001431a:	83 ec 08             	sub    esp,0x8
c001431d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014321:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014325:	e8 89 ed ff ff       	call   c00130b3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001432a:	83 c4 10             	add    esp,0x10
c001432d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014331:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014335:	83 f0 01             	xor    eax,0x1
c0014338:	88 c2                	mov    dl,al
c001433a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001433e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014344:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014348:	25 ff 00 00 00       	and    eax,0xff
c001434d:	83 ec 08             	sub    esp,0x8
c0014350:	50                   	push   eax
c0014351:	68 d4 fe 01 c0       	push   0xc001fed4
c0014356:	e8 95 75 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001435b:	83 c4 10             	add    esp,0x10
c001435e:	90                   	nop
c001435f:	83 c4 14             	add    esp,0x14
c0014362:	5b                   	pop    ebx
c0014363:	5e                   	pop    esi
c0014364:	c3                   	ret    
c0014365:	90                   	nop
c0014366:	66 90                	xchg   ax,ax

c0014368 <Process::Process(bool, char const*, Process*, char**)>:
c0014368:	56                   	push   esi
c0014369:	53                   	push   ebx
c001436a:	83 ec 24             	sub    esp,0x24
c001436d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014371:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014375:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014379:	05 0c 02 00 00       	add    eax,0x20c
c001437e:	bb 07 00 00 00       	mov    ebx,0x7
c0014383:	89 c6                	mov    esi,eax
c0014385:	8d 76 00             	lea    esi,[esi+0x0]
c0014388:	85 db                	test   ebx,ebx
c001438a:	78 14                	js     c00143a0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001438c:	83 ec 0c             	sub    esp,0xc
c001438f:	56                   	push   esi
c0014390:	e8 d7 9a 00 00       	call   c001de6c <ThreadControlBlock::ThreadControlBlock()>
c0014395:	83 c4 10             	add    esp,0x10
c0014398:	83 c6 5f             	add    esi,0x5f
c001439b:	4b                   	dec    ebx
c001439c:	eb ea                	jmp    c0014388 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001439e:	66 90                	xchg   ax,ax
c00143a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143a4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00143ab:	83 ec 0c             	sub    esp,0xc
c00143ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00143b2:	e8 11 cf ff ff       	call   c00112c8 <Krnl::newProcessEnv(Process*)>
c00143b7:	83 c4 10             	add    esp,0x10
c00143ba:	89 c2                	mov    edx,eax
c00143bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143c0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00143c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143ca:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00143d3:	a1 d0 0c 02 c0       	mov    eax,ds:0xc0020cd0
c00143d8:	8d 50 01             	lea    edx,[eax+0x1]
c00143db:	89 15 d0 0c 02 c0    	mov    DWORD PTR ds:0xc0020cd0,edx
c00143e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00143e5:	89 02                	mov    DWORD PTR [edx],eax
c00143e7:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00143ef:	83 ec 0c             	sub    esp,0xc
c00143f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00143f6:	e8 66 47 ff ff       	call   c0008b61 <malloc>
c00143fb:	83 c4 10             	add    esp,0x10
c00143fe:	89 c3                	mov    ebx,eax
c0014400:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014404:	25 ff 00 00 00       	and    eax,0xff
c0014409:	83 ec 08             	sub    esp,0x8
c001440c:	50                   	push   eax
c001440d:	53                   	push   ebx
c001440e:	e8 cd 6d ff ff       	call   c000b1e0 <VAS::VAS(bool)>
c0014413:	83 c4 10             	add    esp,0x10
c0014416:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001441a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014420:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014424:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001442e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014432:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014436:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001443c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014440:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014446:	85 c0                	test   eax,eax
c0014448:	74 42                	je     c001448c <Process::Process(bool, char const*, Process*, char**)+0x124>
c001444a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001444e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014454:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001445a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001445e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014464:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014468:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001446e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014474:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014478:	05 0c 01 00 00       	add    eax,0x10c
c001447d:	83 ec 08             	sub    esp,0x8
c0014480:	52                   	push   edx
c0014481:	50                   	push   eax
c0014482:	e8 99 c1 fe ff       	call   c0000620 <strcpy>
c0014487:	83 c4 10             	add    esp,0x10
c001448a:	eb 64                	jmp    c00144f0 <Process::Process(bool, char const*, Process*, char**)+0x188>
c001448c:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0014494:	83 ec 0c             	sub    esp,0xc
c0014497:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001449b:	e8 c1 46 ff ff       	call   c0008b61 <malloc>
c00144a0:	83 c4 10             	add    esp,0x10
c00144a3:	89 c3                	mov    ebx,eax
c00144a5:	83 ec 08             	sub    esp,0x8
c00144a8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00144ac:	53                   	push   ebx
c00144ad:	e8 e2 58 ff ff       	call   c0009d94 <VgaText::VgaText(char const*)>
c00144b2:	83 c4 10             	add    esp,0x10
c00144b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144b9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00144bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00144c9:	83 ec 0c             	sub    esp,0xc
c00144cc:	50                   	push   eax
c00144cd:	e8 62 51 ff ff       	call   c0009634 <addToTerminalCycle(VgaText*)>
c00144d2:	83 c4 10             	add    esp,0x10
c00144d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144d9:	05 0c 01 00 00       	add    eax,0x10c
c00144de:	83 ec 08             	sub    esp,0x8
c00144e1:	68 7d fe 01 c0       	push   0xc001fe7d
c00144e6:	50                   	push   eax
c00144e7:	e8 34 c1 fe ff       	call   c0000620 <strcpy>
c00144ec:	83 c4 10             	add    esp,0x10
c00144ef:	90                   	nop
c00144f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144f4:	83 c0 0c             	add    eax,0xc
c00144f7:	83 ec 08             	sub    esp,0x8
c00144fa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00144fe:	50                   	push   eax
c00144ff:	e8 1c c1 fe ff       	call   c0000620 <strcpy>
c0014504:	83 c4 10             	add    esp,0x10
c0014507:	83 ec 08             	sub    esp,0x8
c001450a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001450e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014512:	e8 01 fc ff ff       	call   c0014118 <Process::addArgs(char**)>
c0014517:	83 c4 10             	add    esp,0x10
c001451a:	90                   	nop
c001451b:	83 c4 24             	add    esp,0x24
c001451e:	5b                   	pop    ebx
c001451f:	5e                   	pop    esi
c0014520:	c3                   	ret    
c0014521:	8d 76 00             	lea    esi,[esi+0x0]

c0014524 <taskStartupFunction>:
c0014524:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014529:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001452c:	c3                   	ret    
c001452d:	90                   	nop
c001452e:	66 90                	xchg   ax,ax

c0014530 <Semaphore::Semaphore(int)>:
c0014530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014534:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014538:	89 10                	mov    DWORD PTR [eax],edx
c001453a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001453e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014549:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014554:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001455b:	90                   	nop
c001455c:	c3                   	ret    
c001455d:	90                   	nop
c001455e:	66 90                	xchg   ax,ax

c0014560 <Mutex::Mutex()>:
c0014560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014564:	6a 01                	push   0x1
c0014566:	50                   	push   eax
c0014567:	e8 c4 ff ff ff       	call   c0014530 <Semaphore::Semaphore(int)>
c001456c:	83 c4 08             	add    esp,0x8
c001456f:	90                   	nop
c0014570:	c3                   	ret    
c0014571:	90                   	nop
c0014572:	66 90                	xchg   ax,ax

c0014574 <Process::createThread(void (*)(void*), void*, int)>:
c0014574:	57                   	push   edi
c0014575:	31 c9                	xor    ecx,ecx
c0014577:	56                   	push   esi
c0014578:	53                   	push   ebx
c0014579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001457d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014584:	89 f2                	mov    edx,esi
c0014586:	66 90                	xchg   ax,ax
c0014588:	31 c0                	xor    eax,eax
c001458a:	66 89 d0             	mov    ax,dx
c001458d:	83 e2 01             	and    edx,0x1
c0014590:	74 12                	je     c00145a4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014592:	d1 f8                	sar    eax,1
c0014594:	41                   	inc    ecx
c0014595:	89 c2                	mov    edx,eax
c0014597:	83 f9 10             	cmp    ecx,0x10
c001459a:	75 ec                	jne    c0014588 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001459c:	31 db                	xor    ebx,ebx
c001459e:	89 d8                	mov    eax,ebx
c00145a0:	5b                   	pop    ebx
c00145a1:	5e                   	pop    esi
c00145a2:	5f                   	pop    edi
c00145a3:	c3                   	ret    
c00145a4:	b8 01 00 00 00       	mov    eax,0x1
c00145a9:	d3 e0                	shl    eax,cl
c00145ab:	09 c6                	or     esi,eax
c00145ad:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00145b0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00145b7:	01 c0                	add    eax,eax
c00145b9:	01 c8                	add    eax,ecx
c00145bb:	8d 04 80             	lea    eax,[eax+eax*4]
c00145be:	01 d8                	add    eax,ebx
c00145c0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00145c7:	75 0b                	jne    c00145d4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00145c9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00145d3:	90                   	nop
c00145d4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00145da:	83 ec 08             	sub    esp,0x8
c00145dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00145e0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00145e3:	01 c0                	add    eax,eax
c00145e5:	01 c8                	add    eax,ecx
c00145e7:	8d 3c 80             	lea    edi,[eax+eax*4]
c00145ea:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00145ed:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00145f3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00145f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145fd:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014603:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014609:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0014610:	89 ca                	mov    edx,ecx
c0014612:	f7 da                	neg    edx
c0014614:	c1 e2 15             	shl    edx,0x15
c0014617:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001461d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014623:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014627:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014631:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014637:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001463b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014641:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001464b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014655:	53                   	push   ebx
c0014656:	68 c4 51 02 c0       	push   0xc00251c4
c001465b:	e8 ac 95 00 00       	call   c001dc0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014660:	83 c4 10             	add    esp,0x10
c0014663:	89 d8                	mov    eax,ebx
c0014665:	5b                   	pop    ebx
c0014666:	5e                   	pop    esi
c0014667:	5f                   	pop    edi
c0014668:	c3                   	ret    
c0014669:	90                   	nop
c001466a:	66 90                	xchg   ax,ax

c001466c <Process::createUserThread()>:
c001466c:	83 ec 0c             	sub    esp,0xc
c001466f:	68 80 00 00 00       	push   0x80
c0014674:	6a 00                	push   0x0
c0014676:	68 0c 40 01 c0       	push   0xc001400c
c001467b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001467f:	50                   	push   eax
c0014680:	e8 ef fe ff ff       	call   c0014574 <Process::createThread(void (*)(void*), void*, int)>
c0014685:	83 c4 1c             	add    esp,0x1c
c0014688:	c3                   	ret    
c0014689:	8d 76 00             	lea    esi,[esi+0x0]

c001468c <setupMultitasking(void (*)())>:
c001468c:	56                   	push   esi
c001468d:	53                   	push   ebx
c001468e:	53                   	push   ebx
c001468f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014693:	eb 13                	jmp    c00146a8 <setupMultitasking(void (*)())+0x1c>
c0014695:	8d 76 00             	lea    esi,[esi+0x0]
c0014698:	83 ec 0c             	sub    esp,0xc
c001469b:	68 c4 51 02 c0       	push   0xc00251c4
c00146a0:	e8 af 94 00 00       	call   c001db54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00146a5:	83 c4 10             	add    esp,0x10
c00146a8:	83 ec 0c             	sub    esp,0xc
c00146ab:	68 c4 51 02 c0       	push   0xc00251c4
c00146b0:	e8 7b 94 00 00       	call   c001db30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00146b5:	83 c4 10             	add    esp,0x10
c00146b8:	84 c0                	test   al,al
c00146ba:	74 dc                	je     c0014698 <setupMultitasking(void (*)())+0xc>
c00146bc:	83 ec 0c             	sub    esp,0xc
c00146bf:	68 1f 07 00 00       	push   0x71f
c00146c4:	e8 98 44 ff ff       	call   c0008b61 <malloc>
c00146c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00146d0:	89 c3                	mov    ebx,eax
c00146d2:	6a 00                	push   0x0
c00146d4:	68 81 fe 01 c0       	push   0xc001fe81
c00146d9:	6a 01                	push   0x1
c00146db:	50                   	push   eax
c00146dc:	e8 87 fc ff ff       	call   c0014368 <Process::Process(bool, char const*, Process*, char**)>
c00146e1:	83 c4 14             	add    esp,0x14
c00146e4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00146ea:	89 1d d0 51 02 c0    	mov    DWORD PTR ds:0xc00251d0,ebx
c00146f0:	50                   	push   eax
c00146f1:	e8 9b 51 ff ff       	call   c0009891 <setActiveTerminal(VgaText*)>
c00146f6:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00146fe:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014708:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001470e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014711:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001471b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014721:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014727:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014731:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001473b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014745:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001474b:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014751:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001475b:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014761:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001476b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0014771:	5a                   	pop    edx
c0014772:	59                   	pop    ecx
c0014773:	68 7d fe 01 c0       	push   0xc001fe7d
c0014778:	50                   	push   eax
c0014779:	e8 a2 be fe ff       	call   c0000620 <strcpy>
c001477e:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0014785:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014789:	83 c4 14             	add    esp,0x14
c001478c:	5b                   	pop    ebx
c001478d:	5e                   	pop    esi
c001478e:	e9 f6 ba fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0014793:	90                   	nop

c0014794 <schedule()>:
c0014794:	8b 15 a4 51 02 c0    	mov    edx,DWORD PTR ds:0xc00251a4
c001479a:	85 d2                	test   edx,edx
c001479c:	74 0e                	je     c00147ac <schedule()+0x18>
c001479e:	c7 05 a0 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00251a0,0x1
c00147a8:	c3                   	ret    
c00147a9:	8d 76 00             	lea    esi,[esi+0x0]
c00147ac:	53                   	push   ebx
c00147ad:	83 ec 14             	sub    esp,0x14
c00147b0:	68 c4 51 02 c0       	push   0xc00251c4
c00147b5:	e8 76 93 00 00       	call   c001db30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00147ba:	83 c4 10             	add    esp,0x10
c00147bd:	84 c0                	test   al,al
c00147bf:	75 3b                	jne    c00147fc <schedule()+0x68>
c00147c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00147c9:	4a                   	dec    edx
c00147ca:	74 38                	je     c0014804 <schedule()+0x70>
c00147cc:	83 ec 0c             	sub    esp,0xc
c00147cf:	68 c4 51 02 c0       	push   0xc00251c4
c00147d4:	e8 73 93 00 00       	call   c001db4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00147d9:	c7 04 24 c4 51 02 c0 	mov    DWORD PTR [esp],0xc00251c4
c00147e0:	89 c3                	mov    ebx,eax
c00147e2:	e8 6d 93 00 00       	call   c001db54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00147e7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00147ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147f1:	e8 6e f8 ff ff       	call   c0014064 <switchToThread(ThreadControlBlock*)>
c00147f6:	83 c4 10             	add    esp,0x10
c00147f9:	8d 76 00             	lea    esi,[esi+0x0]
c00147fc:	83 c4 08             	add    esp,0x8
c00147ff:	5b                   	pop    ebx
c0014800:	c3                   	ret    
c0014801:	8d 76 00             	lea    esi,[esi+0x0]
c0014804:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001480b:	83 ec 08             	sub    esp,0x8
c001480e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014813:	50                   	push   eax
c0014814:	68 c4 51 02 c0       	push   0xc00251c4
c0014819:	e8 ee 93 00 00       	call   c001dc0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001481e:	83 c4 10             	add    esp,0x10
c0014821:	eb a9                	jmp    c00147cc <schedule()+0x38>
c0014823:	90                   	nop

c0014824 <Semaphore::tryAcquire()>:
c0014824:	53                   	push   ebx
c0014825:	83 ec 08             	sub    esp,0x8
c0014828:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001482c:	fa                   	cli    
c001482d:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0014832:	8d 50 01             	lea    edx,[eax+0x1]
c0014835:	89 15 a8 51 02 c0    	mov    DWORD PTR ds:0xc00251a8,edx
c001483b:	8b 15 a4 51 02 c0    	mov    edx,DWORD PTR ds:0xc00251a4
c0014841:	8d 5a 01             	lea    ebx,[edx+0x1]
c0014844:	89 1d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,ebx
c001484a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001484d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001484f:	7c 33                	jl     c0014884 <Semaphore::tryAcquire()+0x60>
c0014851:	89 15 a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,edx
c0014857:	85 d2                	test   edx,edx
c0014859:	75 0d                	jne    c0014868 <Semaphore::tryAcquire()+0x44>
c001485b:	8b 15 a0 51 02 c0    	mov    edx,DWORD PTR ds:0xc00251a0
c0014861:	85 d2                	test   edx,edx
c0014863:	75 6b                	jne    c00148d0 <Semaphore::tryAcquire()+0xac>
c0014865:	8d 76 00             	lea    esi,[esi+0x0]
c0014868:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c001486d:	85 c0                	test   eax,eax
c001486f:	74 0b                	je     c001487c <Semaphore::tryAcquire()+0x58>
c0014871:	8d 76 00             	lea    esi,[esi+0x0]
c0014874:	31 c0                	xor    eax,eax
c0014876:	83 c4 08             	add    esp,0x8
c0014879:	5b                   	pop    ebx
c001487a:	c3                   	ret    
c001487b:	90                   	nop
c001487c:	fb                   	sti    
c001487d:	83 c4 08             	add    esp,0x8
c0014880:	5b                   	pop    ebx
c0014881:	c3                   	ret    
c0014882:	66 90                	xchg   ax,ax
c0014884:	43                   	inc    ebx
c0014885:	89 15 a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,edx
c001488b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001488e:	85 d2                	test   edx,edx
c0014890:	75 22                	jne    c00148b4 <Semaphore::tryAcquire()+0x90>
c0014892:	8b 0d a0 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251a0
c0014898:	85 c9                	test   ecx,ecx
c001489a:	74 18                	je     c00148b4 <Semaphore::tryAcquire()+0x90>
c001489c:	c7 05 a0 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251a0,0x0
c00148a6:	e8 e9 fe ff ff       	call   c0014794 <schedule()>
c00148ab:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c00148b0:	48                   	dec    eax
c00148b1:	8d 76 00             	lea    esi,[esi+0x0]
c00148b4:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c00148b9:	85 c0                	test   eax,eax
c00148bb:	75 0b                	jne    c00148c8 <Semaphore::tryAcquire()+0xa4>
c00148bd:	fb                   	sti    
c00148be:	b0 01                	mov    al,0x1
c00148c0:	83 c4 08             	add    esp,0x8
c00148c3:	5b                   	pop    ebx
c00148c4:	c3                   	ret    
c00148c5:	8d 76 00             	lea    esi,[esi+0x0]
c00148c8:	b0 01                	mov    al,0x1
c00148ca:	83 c4 08             	add    esp,0x8
c00148cd:	5b                   	pop    ebx
c00148ce:	c3                   	ret    
c00148cf:	90                   	nop
c00148d0:	c7 05 a0 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251a0,0x0
c00148da:	e8 b5 fe ff ff       	call   c0014794 <schedule()>
c00148df:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c00148e4:	48                   	dec    eax
c00148e5:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c00148ea:	85 c0                	test   eax,eax
c00148ec:	75 86                	jne    c0014874 <Semaphore::tryAcquire()+0x50>
c00148ee:	eb 8c                	jmp    c001487c <Semaphore::tryAcquire()+0x58>

c00148f0 <Semaphore::assertLocked(char const*)>:
c00148f0:	83 ec 0c             	sub    esp,0xc
c00148f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00148f7:	fa                   	cli    
c00148f8:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c00148fe:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c0014903:	8d 48 01             	lea    ecx,[eax+0x1]
c0014906:	89 0d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,ecx
c001490c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001490e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0014911:	7c 29                	jl     c001493c <Semaphore::assertLocked(char const*)+0x4c>
c0014913:	90                   	nop
c0014914:	a3 a4 51 02 c0       	mov    ds:0xc00251a4,eax
c0014919:	85 c0                	test   eax,eax
c001491b:	75 0b                	jne    c0014928 <Semaphore::assertLocked(char const*)+0x38>
c001491d:	a1 a0 51 02 c0       	mov    eax,ds:0xc00251a0
c0014922:	85 c0                	test   eax,eax
c0014924:	75 2e                	jne    c0014954 <Semaphore::assertLocked(char const*)+0x64>
c0014926:	66 90                	xchg   ax,ax
c0014928:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c001492d:	48                   	dec    eax
c001492e:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0014933:	75 03                	jne    c0014938 <Semaphore::assertLocked(char const*)+0x48>
c0014935:	fb                   	sti    
c0014936:	66 90                	xchg   ax,ax
c0014938:	83 c4 0c             	add    esp,0xc
c001493b:	c3                   	ret    
c001493c:	83 ec 0c             	sub    esp,0xc
c001493f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014943:	52                   	push   edx
c0014944:	e8 f6 ca ff ff       	call   c001143f <Krnl::panic(char const*)>
c0014949:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c001494e:	83 c4 10             	add    esp,0x10
c0014951:	48                   	dec    eax
c0014952:	eb c0                	jmp    c0014914 <Semaphore::assertLocked(char const*)+0x24>
c0014954:	c7 05 a0 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251a0,0x0
c001495e:	e8 31 fe ff ff       	call   c0014794 <schedule()>
c0014963:	eb c3                	jmp    c0014928 <Semaphore::assertLocked(char const*)+0x38>
c0014965:	8d 76 00             	lea    esi,[esi+0x0]

c0014968 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0014968:	83 ec 0c             	sub    esp,0xc
c001496b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014970:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014974:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014977:	e8 18 fe ff ff       	call   c0014794 <schedule()>
c001497c:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0014981:	48                   	dec    eax
c0014982:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0014987:	75 03                	jne    c001498c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0014989:	fb                   	sti    
c001498a:	66 90                	xchg   ax,ax
c001498c:	83 c4 0c             	add    esp,0xc
c001498f:	c3                   	ret    

c0014990 <blockTask(TaskState)>:
c0014990:	83 ec 0c             	sub    esp,0xc
c0014993:	fa                   	cli    
c0014994:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c001499a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001499e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00149a6:	e8 e9 fd ff ff       	call   c0014794 <schedule()>
c00149ab:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c00149b0:	48                   	dec    eax
c00149b1:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c00149b6:	75 04                	jne    c00149bc <blockTask(TaskState)+0x2c>
c00149b8:	fb                   	sti    
c00149b9:	8d 76 00             	lea    esi,[esi+0x0]
c00149bc:	83 c4 0c             	add    esp,0xc
c00149bf:	c3                   	ret    

c00149c0 <waitTask(int, int*, int)>:
c00149c0:	83 ec 18             	sub    esp,0x18
c00149c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00149cc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00149cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149d8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00149db:	6a 07                	push   0x7
c00149dd:	e8 ae ff ff ff       	call   c0014990 <blockTask(TaskState)>
c00149e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149e7:	83 c4 10             	add    esp,0x10
c00149ea:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00149ed:	85 d2                	test   edx,edx
c00149ef:	74 0b                	je     c00149fc <waitTask(int, int*, int)+0x3c>
c00149f1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00149f4:	89 02                	mov    DWORD PTR [edx],eax
c00149f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149fb:	90                   	nop
c00149fc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00149ff:	83 c4 0c             	add    esp,0xc
c0014a02:	c3                   	ret    
c0014a03:	90                   	nop

c0014a04 <milliTenthSleepUntil(unsigned int)>:
c0014a04:	83 ec 0c             	sub    esp,0xc
c0014a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a0b:	39 05 ac 42 02 c0    	cmp    DWORD PTR ds:0xc00242ac,eax
c0014a11:	76 05                	jbe    c0014a18 <milliTenthSleepUntil(unsigned int)+0x14>
c0014a13:	90                   	nop
c0014a14:	83 c4 0c             	add    esp,0xc
c0014a17:	c3                   	ret    
c0014a18:	fa                   	cli    
c0014a19:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0014a1f:	83 ec 08             	sub    esp,0x8
c0014a22:	ff 05 a4 51 02 c0    	inc    DWORD PTR ds:0xc00251a4
c0014a28:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a2e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0014a31:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a37:	52                   	push   edx
c0014a38:	68 b8 51 02 c0       	push   0xc00251b8
c0014a3d:	e8 ca 91 00 00       	call   c001dc0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014a42:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014a49:	e8 42 ff ff ff       	call   c0014990 <blockTask(TaskState)>
c0014a4e:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c0014a53:	83 c4 10             	add    esp,0x10
c0014a56:	48                   	dec    eax
c0014a57:	a3 a4 51 02 c0       	mov    ds:0xc00251a4,eax
c0014a5c:	85 c0                	test   eax,eax
c0014a5e:	75 0c                	jne    c0014a6c <milliTenthSleepUntil(unsigned int)+0x68>
c0014a60:	a1 a0 51 02 c0       	mov    eax,ds:0xc00251a0
c0014a65:	85 c0                	test   eax,eax
c0014a67:	75 17                	jne    c0014a80 <milliTenthSleepUntil(unsigned int)+0x7c>
c0014a69:	8d 76 00             	lea    esi,[esi+0x0]
c0014a6c:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0014a71:	48                   	dec    eax
c0014a72:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0014a77:	75 9b                	jne    c0014a14 <milliTenthSleepUntil(unsigned int)+0x10>
c0014a79:	fb                   	sti    
c0014a7a:	83 c4 0c             	add    esp,0xc
c0014a7d:	c3                   	ret    
c0014a7e:	66 90                	xchg   ax,ax
c0014a80:	c7 05 a0 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251a0,0x0
c0014a8a:	e8 05 fd ff ff       	call   c0014794 <schedule()>
c0014a8f:	eb db                	jmp    c0014a6c <milliTenthSleepUntil(unsigned int)+0x68>
c0014a91:	8d 76 00             	lea    esi,[esi+0x0]

c0014a94 <milliTenthSleep(unsigned int)>:
c0014a94:	a1 ac 42 02 c0       	mov    eax,ds:0xc00242ac
c0014a99:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0014a9d:	e9 62 ff ff ff       	jmp    c0014a04 <milliTenthSleepUntil(unsigned int)>
c0014aa2:	66 90                	xchg   ax,ax

c0014aa4 <sleep(unsigned int)>:
c0014aa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014aa8:	8d 04 80             	lea    eax,[eax+eax*4]
c0014aab:	8d 04 80             	lea    eax,[eax+eax*4]
c0014aae:	8d 04 80             	lea    eax,[eax+eax*4]
c0014ab1:	8d 04 80             	lea    eax,[eax+eax*4]
c0014ab4:	c1 e0 04             	shl    eax,0x4
c0014ab7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014abb:	eb d7                	jmp    c0014a94 <milliTenthSleep(unsigned int)>
c0014abd:	90                   	nop
c0014abe:	66 90                	xchg   ax,ax

c0014ac0 <Semaphore::acquire()>:
c0014ac0:	83 ec 0c             	sub    esp,0xc
c0014ac3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014ac7:	fa                   	cli    
c0014ac8:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c0014acd:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0014ad3:	8d 48 01             	lea    ecx,[eax+0x1]
c0014ad6:	89 0d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,ecx
c0014adc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0014adf:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0014ae1:	7d 2d                	jge    c0014b10 <Semaphore::acquire()+0x50>
c0014ae3:	41                   	inc    ecx
c0014ae4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0014ae7:	90                   	nop
c0014ae8:	a3 a4 51 02 c0       	mov    ds:0xc00251a4,eax
c0014aed:	85 c0                	test   eax,eax
c0014aef:	75 0b                	jne    c0014afc <Semaphore::acquire()+0x3c>
c0014af1:	a1 a0 51 02 c0       	mov    eax,ds:0xc00251a0
c0014af6:	85 c0                	test   eax,eax
c0014af8:	75 62                	jne    c0014b5c <Semaphore::acquire()+0x9c>
c0014afa:	66 90                	xchg   ax,ax
c0014afc:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0014b01:	48                   	dec    eax
c0014b02:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0014b07:	75 03                	jne    c0014b0c <Semaphore::acquire()+0x4c>
c0014b09:	fb                   	sti    
c0014b0a:	66 90                	xchg   ax,ax
c0014b0c:	83 c4 0c             	add    esp,0xc
c0014b0f:	c3                   	ret    
c0014b10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b15:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0014b1c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014b1f:	85 c9                	test   ecx,ecx
c0014b21:	74 4d                	je     c0014b70 <Semaphore::acquire()+0xb0>
c0014b23:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0014b26:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b2c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0014b2f:	90                   	nop
c0014b30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b35:	83 ec 0c             	sub    esp,0xc
c0014b38:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0014b3b:	68 fc fe 01 c0       	push   0xc001fefc
c0014b40:	e8 ab 6d ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0014b45:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0014b4c:	e8 3f fe ff ff       	call   c0014990 <blockTask(TaskState)>
c0014b51:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c0014b56:	83 c4 10             	add    esp,0x10
c0014b59:	48                   	dec    eax
c0014b5a:	eb 8c                	jmp    c0014ae8 <Semaphore::acquire()+0x28>
c0014b5c:	c7 05 a0 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251a0,0x0
c0014b66:	e8 29 fc ff ff       	call   c0014794 <schedule()>
c0014b6b:	eb 8f                	jmp    c0014afc <Semaphore::acquire()+0x3c>
c0014b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0014b70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b75:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014b78:	eb b6                	jmp    c0014b30 <Semaphore::acquire()+0x70>
c0014b7a:	66 90                	xchg   ax,ax

c0014b7c <taskReturned>:
c0014b7c:	83 ec 18             	sub    esp,0x18
c0014b7f:	68 1c ff 01 c0       	push   0xc001ff1c
c0014b84:	e8 b6 c8 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0014b89:	83 c4 10             	add    esp,0x10
c0014b8c:	83 ec 0c             	sub    esp,0xc
c0014b8f:	6a 02                	push   0x2
c0014b91:	e8 fa fd ff ff       	call   c0014990 <blockTask(TaskState)>
c0014b96:	fa                   	cli    
c0014b97:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0014b9d:	e8 f2 fb ff ff       	call   c0014794 <schedule()>
c0014ba2:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0014ba7:	83 c4 10             	add    esp,0x10
c0014baa:	48                   	dec    eax
c0014bab:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0014bb0:	85 c0                	test   eax,eax
c0014bb2:	75 d8                	jne    c0014b8c <taskReturned+0x10>
c0014bb4:	fb                   	sti    
c0014bb5:	eb d5                	jmp    c0014b8c <taskReturned+0x10>
c0014bb7:	90                   	nop

c0014bb8 <Thr::processFromPID(int)>:
c0014bb8:	57                   	push   edi
c0014bb9:	56                   	push   esi
c0014bba:	53                   	push   ebx
c0014bbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bbf:	fa                   	cli    
c0014bc0:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0014bc6:	83 ec 0c             	sub    esp,0xc
c0014bc9:	68 c4 51 02 c0       	push   0xc00251c4
c0014bce:	e8 79 8f 00 00       	call   c001db4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014bd3:	83 c4 10             	add    esp,0x10
c0014bd6:	89 c7                	mov    edi,eax
c0014bd8:	eb 16                	jmp    c0014bf0 <Thr::processFromPID(int)+0x38>
c0014bda:	66 90                	xchg   ax,ax
c0014bdc:	83 ec 0c             	sub    esp,0xc
c0014bdf:	68 c4 51 02 c0       	push   0xc00251c4
c0014be4:	e8 63 8f 00 00       	call   c001db4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014be9:	83 c4 10             	add    esp,0x10
c0014bec:	39 f8                	cmp    eax,edi
c0014bee:	74 4c                	je     c0014c3c <Thr::processFromPID(int)+0x84>
c0014bf0:	83 ec 0c             	sub    esp,0xc
c0014bf3:	68 c4 51 02 c0       	push   0xc00251c4
c0014bf8:	e8 4f 8f 00 00       	call   c001db4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014bfd:	c7 04 24 c4 51 02 c0 	mov    DWORD PTR [esp],0xc00251c4
c0014c04:	89 c3                	mov    ebx,eax
c0014c06:	e8 49 8f 00 00       	call   c001db54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014c0b:	58                   	pop    eax
c0014c0c:	5a                   	pop    edx
c0014c0d:	53                   	push   ebx
c0014c0e:	68 c4 51 02 c0       	push   0xc00251c4
c0014c13:	e8 f4 8f 00 00       	call   c001dc0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014c18:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014c1b:	83 c4 10             	add    esp,0x10
c0014c1e:	39 30                	cmp    DWORD PTR [eax],esi
c0014c20:	75 ba                	jne    c0014bdc <Thr::processFromPID(int)+0x24>
c0014c22:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0014c27:	48                   	dec    eax
c0014c28:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0014c2d:	74 09                	je     c0014c38 <Thr::processFromPID(int)+0x80>
c0014c2f:	90                   	nop
c0014c30:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014c33:	5b                   	pop    ebx
c0014c34:	5e                   	pop    esi
c0014c35:	5f                   	pop    edi
c0014c36:	c3                   	ret    
c0014c37:	90                   	nop
c0014c38:	fb                   	sti    
c0014c39:	eb f5                	jmp    c0014c30 <Thr::processFromPID(int)+0x78>
c0014c3b:	90                   	nop
c0014c3c:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0014c41:	48                   	dec    eax
c0014c42:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0014c47:	75 07                	jne    c0014c50 <Thr::processFromPID(int)+0x98>
c0014c49:	fb                   	sti    
c0014c4a:	5b                   	pop    ebx
c0014c4b:	5e                   	pop    esi
c0014c4c:	5f                   	pop    edi
c0014c4d:	c3                   	ret    
c0014c4e:	66 90                	xchg   ax,ax
c0014c50:	5b                   	pop    ebx
c0014c51:	31 c0                	xor    eax,eax
c0014c53:	5e                   	pop    esi
c0014c54:	5f                   	pop    edi
c0014c55:	c3                   	ret    
c0014c56:	66 90                	xchg   ax,ax

c0014c58 <unblockTask(ThreadControlBlock*)>:
c0014c58:	53                   	push   ebx
c0014c59:	83 ec 08             	sub    esp,0x8
c0014c5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c60:	fa                   	cli    
c0014c61:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0014c67:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014c6a:	85 c0                	test   eax,eax
c0014c6c:	74 66                	je     c0014cd4 <unblockTask(ThreadControlBlock*)+0x7c>
c0014c6e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014c71:	48                   	dec    eax
c0014c72:	74 38                	je     c0014cac <unblockTask(ThreadControlBlock*)+0x54>
c0014c74:	83 ec 0c             	sub    esp,0xc
c0014c77:	68 c4 51 02 c0       	push   0xc00251c4
c0014c7c:	e8 cb 8e 00 00       	call   c001db4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014c81:	83 c4 10             	add    esp,0x10
c0014c84:	85 c0                	test   eax,eax
c0014c86:	75 1c                	jne    c0014ca4 <unblockTask(ThreadControlBlock*)+0x4c>
c0014c88:	eb 5e                	jmp    c0014ce8 <unblockTask(ThreadControlBlock*)+0x90>
c0014c8a:	66 90                	xchg   ax,ax
c0014c8c:	83 ec 08             	sub    esp,0x8
c0014c8f:	50                   	push   eax
c0014c90:	68 c4 51 02 c0       	push   0xc00251c4
c0014c95:	e8 62 92 00 00       	call   c001defc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014c9a:	83 c4 10             	add    esp,0x10
c0014c9d:	85 c0                	test   eax,eax
c0014c9f:	74 47                	je     c0014ce8 <unblockTask(ThreadControlBlock*)+0x90>
c0014ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ca4:	39 c3                	cmp    ebx,eax
c0014ca6:	75 e4                	jne    c0014c8c <unblockTask(ThreadControlBlock*)+0x34>
c0014ca8:	eb 12                	jmp    c0014cbc <unblockTask(ThreadControlBlock*)+0x64>
c0014caa:	66 90                	xchg   ax,ax
c0014cac:	83 ec 0c             	sub    esp,0xc
c0014caf:	68 9f fe 01 c0       	push   0xc001fe9f
c0014cb4:	e8 37 6c ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0014cb9:	83 c4 10             	add    esp,0x10
c0014cbc:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0014cc1:	48                   	dec    eax
c0014cc2:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0014cc7:	75 03                	jne    c0014ccc <unblockTask(ThreadControlBlock*)+0x74>
c0014cc9:	fb                   	sti    
c0014cca:	66 90                	xchg   ax,ax
c0014ccc:	83 c4 08             	add    esp,0x8
c0014ccf:	5b                   	pop    ebx
c0014cd0:	c3                   	ret    
c0014cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0014cd4:	83 ec 0c             	sub    esp,0xc
c0014cd7:	68 88 fe 01 c0       	push   0xc001fe88
c0014cdc:	e8 0f 6c ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0014ce1:	83 c4 10             	add    esp,0x10
c0014ce4:	eb d6                	jmp    c0014cbc <unblockTask(ThreadControlBlock*)+0x64>
c0014ce6:	66 90                	xchg   ax,ax
c0014ce8:	83 ec 08             	sub    esp,0x8
c0014ceb:	53                   	push   ebx
c0014cec:	68 c4 51 02 c0       	push   0xc00251c4
c0014cf1:	e8 16 8f 00 00       	call   c001dc0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014cf6:	83 c4 10             	add    esp,0x10
c0014cf9:	eb c1                	jmp    c0014cbc <unblockTask(ThreadControlBlock*)+0x64>
c0014cfb:	90                   	nop

c0014cfc <cleanupTerminatedTask(ThreadControlBlock*)>:
c0014cfc:	55                   	push   ebp
c0014cfd:	57                   	push   edi
c0014cfe:	56                   	push   esi
c0014cff:	53                   	push   ebx
c0014d00:	83 ec 1c             	sub    esp,0x1c
c0014d03:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014d07:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014d0a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0014d10:	85 ed                	test   ebp,ebp
c0014d12:	7e 24                	jle    c0014d38 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0014d14:	31 f6                	xor    esi,esi
c0014d16:	66 90                	xchg   ax,ax
c0014d18:	83 ec 0c             	sub    esp,0xc
c0014d1b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0014d22:	46                   	inc    esi
c0014d23:	57                   	push   edi
c0014d24:	e8 48 3e ff ff       	call   c0008b71 <free>
c0014d29:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014d2c:	83 c4 10             	add    esp,0x10
c0014d2f:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0014d35:	7f e1                	jg     c0014d18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0014d37:	90                   	nop
c0014d38:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014d42:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014d47:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0014d4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0014d4d:	d3 c0                	rol    eax,cl
c0014d4f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0014d56:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014d59:	89 f7                	mov    edi,esi
c0014d5b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0014d63:	0f 85 77 01 00 00    	jne    c0014ee0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014d69:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0014d6f:	85 ed                	test   ebp,ebp
c0014d71:	74 1d                	je     c0014d90 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0014d73:	83 ec 0c             	sub    esp,0xc
c0014d76:	55                   	push   ebp
c0014d77:	e8 68 c4 ff ff       	call   c00111e4 <EnvVarContainer::~EnvVarContainer()>
c0014d7c:	59                   	pop    ecx
c0014d7d:	5e                   	pop    esi
c0014d7e:	6a 0c                	push   0xc
c0014d80:	55                   	push   ebp
c0014d81:	e8 74 6a ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c0014d86:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014d89:	83 c4 10             	add    esp,0x10
c0014d8c:	89 f7                	mov    edi,esi
c0014d8e:	66 90                	xchg   ax,ax
c0014d90:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014d96:	85 c0                	test   eax,eax
c0014d98:	0f 84 b6 00 00 00    	je     c0014e54 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014d9e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0014da1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014da5:	31 c9                	xor    ecx,ecx
c0014da7:	eb 17                	jmp    c0014dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0014da9:	8d 76 00             	lea    esi,[esi+0x0]
c0014dac:	41                   	inc    ecx
c0014dad:	83 f9 10             	cmp    ecx,0x10
c0014db0:	0f 84 9e 00 00 00    	je     c0014e54 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014db6:	66 90                	xchg   ax,ax
c0014db8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014dbe:	66 90                	xchg   ax,ax
c0014dc0:	31 d2                	xor    edx,edx
c0014dc2:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0014dc9:	d3 fa                	sar    edx,cl
c0014dcb:	83 e2 01             	and    edx,0x1
c0014dce:	74 dc                	je     c0014dac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014dd0:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0014dd3:	01 d2                	add    edx,edx
c0014dd5:	01 ca                	add    edx,ecx
c0014dd7:	8d 14 92             	lea    edx,[edx+edx*4]
c0014dda:	01 d0                	add    eax,edx
c0014ddc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0014de2:	83 fd 07             	cmp    ebp,0x7
c0014de5:	75 c5                	jne    c0014dac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014de7:	05 40 02 00 00       	add    eax,0x240
c0014dec:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0014def:	83 fd ff             	cmp    ebp,0xffffffff
c0014df2:	0f 8c f0 00 00 00    	jl     c0014ee8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0014df8:	0f 84 ae 01 00 00    	je     c0014fac <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0014dfe:	85 ed                	test   ebp,ebp
c0014e00:	0f 84 92 01 00 00    	je     c0014f98 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0014e06:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0014e08:	75 a2                	jne    c0014dac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014e0a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014e10:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014e14:	01 d0                	add    eax,edx
c0014e16:	66 90                	xchg   ax,ax
c0014e18:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014e1c:	83 ec 0c             	sub    esp,0xc
c0014e1f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0014e25:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014e28:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e2e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0014e35:	50                   	push   eax
c0014e36:	e8 1d fe ff ff       	call   c0014c58 <unblockTask(ThreadControlBlock*)>
c0014e3b:	83 c4 10             	add    esp,0x10
c0014e3e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014e41:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014e45:	89 f7                	mov    edi,esi
c0014e47:	41                   	inc    ecx
c0014e48:	83 f9 10             	cmp    ecx,0x10
c0014e4b:	0f 85 67 ff ff ff    	jne    c0014db8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0014e51:	8d 76 00             	lea    esi,[esi+0x0]
c0014e54:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0014e5a:	85 c0                	test   eax,eax
c0014e5c:	74 62                	je     c0014ec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014e5e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0014e64:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0014e6a:	74 54                	je     c0014ec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014e6c:	83 ec 0c             	sub    esp,0xc
c0014e6f:	68 c4 51 02 c0       	push   0xc00251c4
c0014e74:	e8 d3 8c 00 00       	call   c001db4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014e79:	c7 04 24 c4 51 02 c0 	mov    DWORD PTR [esp],0xc00251c4
c0014e80:	89 c7                	mov    edi,eax
c0014e82:	e8 a9 8c 00 00       	call   c001db30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014e87:	83 c4 10             	add    esp,0x10
c0014e8a:	84 c0                	test   al,al
c0014e8c:	0f 84 ce 00 00 00    	je     c0014f60 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0014e92:	66 90                	xchg   ax,ax
c0014e94:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014e97:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014e9d:	85 d2                	test   edx,edx
c0014e9f:	74 0f                	je     c0014eb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014ea1:	83 ec 0c             	sub    esp,0xc
c0014ea4:	8b 02                	mov    eax,DWORD PTR [edx]
c0014ea6:	52                   	push   edx
c0014ea7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014eaa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014ead:	83 c4 10             	add    esp,0x10
c0014eb0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0014eba:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0014ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0014ec0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0014ec6:	85 db                	test   ebx,ebx
c0014ec8:	74 16                	je     c0014ee0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014eca:	83 ec 0c             	sub    esp,0xc
c0014ecd:	53                   	push   ebx
c0014ece:	e8 fb 5c ff ff       	call   c000abce <VAS::~VAS()>
c0014ed3:	58                   	pop    eax
c0014ed4:	5a                   	pop    edx
c0014ed5:	6a 14                	push   0x14
c0014ed7:	53                   	push   ebx
c0014ed8:	e8 1d 69 ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c0014edd:	83 c4 10             	add    esp,0x10
c0014ee0:	83 c4 1c             	add    esp,0x1c
c0014ee3:	5b                   	pop    ebx
c0014ee4:	5e                   	pop    esi
c0014ee5:	5f                   	pop    edi
c0014ee6:	5d                   	pop    ebp
c0014ee7:	c3                   	ret    
c0014ee8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014eec:	83 ec 0c             	sub    esp,0xc
c0014eef:	68 50 ff 01 c0       	push   0xc001ff50
c0014ef4:	e8 46 c5 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0014ef9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014efc:	83 c4 10             	add    esp,0x10
c0014eff:	89 f7                	mov    edi,esi
c0014f01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014f05:	e9 a2 fe ff ff       	jmp    c0014dac <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014f0a:	66 90                	xchg   ax,ax
c0014f0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f12:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0014f18:	75 1e                	jne    c0014f38 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014f1a:	83 ec 0c             	sub    esp,0xc
c0014f1d:	68 b8 ff 01 c0       	push   0xc001ffb8
c0014f22:	e8 c9 69 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0014f27:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014f2e:	e8 5d fa ff ff       	call   c0014990 <blockTask(TaskState)>
c0014f33:	83 c4 10             	add    esp,0x10
c0014f36:	66 90                	xchg   ax,ax
c0014f38:	83 ec 08             	sub    esp,0x8
c0014f3b:	56                   	push   esi
c0014f3c:	68 c4 51 02 c0       	push   0xc00251c4
c0014f41:	e8 c6 8c 00 00       	call   c001dc0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f46:	c7 04 24 c4 51 02 c0 	mov    DWORD PTR [esp],0xc00251c4
c0014f4d:	e8 fa 8b 00 00       	call   c001db4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014f52:	83 c4 10             	add    esp,0x10
c0014f55:	39 f8                	cmp    eax,edi
c0014f57:	0f 84 37 ff ff ff    	je     c0014e94 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0014f60:	83 ec 0c             	sub    esp,0xc
c0014f63:	68 c4 51 02 c0       	push   0xc00251c4
c0014f68:	e8 df 8b 00 00       	call   c001db4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014f6d:	c7 04 24 c4 51 02 c0 	mov    DWORD PTR [esp],0xc00251c4
c0014f74:	89 c6                	mov    esi,eax
c0014f76:	e8 d9 8b 00 00       	call   c001db54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f7b:	83 c4 10             	add    esp,0x10
c0014f7e:	39 f3                	cmp    ebx,esi
c0014f80:	74 b6                	je     c0014f38 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014f82:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014f85:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014f88:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0014f8e:	75 a8                	jne    c0014f38 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014f90:	e9 77 ff ff ff       	jmp    c0014f0c <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014f95:	8d 76 00             	lea    esi,[esi+0x0]
c0014f98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014f9c:	83 ec 0c             	sub    esp,0xc
c0014f9f:	68 84 ff 01 c0       	push   0xc001ff84
c0014fa4:	e9 4b ff ff ff       	jmp    c0014ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0014fac:	8b 36                	mov    esi,DWORD PTR [esi]
c0014fae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014fb2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014fb5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014fb8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014fbe:	01 d7                	add    edi,edx
c0014fc0:	89 f8                	mov    eax,edi
c0014fc2:	e9 51 fe ff ff       	jmp    c0014e18 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0014fc7:	90                   	nop

c0014fc8 <cleanerTaskFunction(void*)>:
c0014fc8:	53                   	push   ebx
c0014fc9:	83 ec 08             	sub    esp,0x8
c0014fcc:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0014fd1:	48                   	dec    eax
c0014fd2:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0014fd7:	75 03                	jne    c0014fdc <cleanerTaskFunction(void*)+0x14>
c0014fd9:	fb                   	sti    
c0014fda:	66 90                	xchg   ax,ax
c0014fdc:	fa                   	cli    
c0014fdd:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0014fe2:	80 3d 8c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002518c,0x0
c0014fe9:	8d 50 01             	lea    edx,[eax+0x1]
c0014fec:	89 15 a8 51 02 c0    	mov    DWORD PTR ds:0xc00251a8,edx
c0014ff2:	0f 84 ac 00 00 00    	je     c00150a4 <cleanerTaskFunction(void*)+0xdc>
c0014ff8:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0014ffd:	85 c0                	test   eax,eax
c0014fff:	75 03                	jne    c0015004 <cleanerTaskFunction(void*)+0x3c>
c0015001:	fb                   	sti    
c0015002:	66 90                	xchg   ax,ax
c0015004:	c6 05 8c 51 02 c0 00 	mov    BYTE PTR ds:0xc002518c,0x0
c001500b:	fa                   	cli    
c001500c:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0015012:	ff 05 a4 51 02 c0    	inc    DWORD PTR ds:0xc00251a4
c0015018:	fa                   	cli    
c0015019:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c001501f:	eb 2b                	jmp    c001504c <cleanerTaskFunction(void*)+0x84>
c0015021:	8d 76 00             	lea    esi,[esi+0x0]
c0015024:	83 ec 0c             	sub    esp,0xc
c0015027:	68 ac 51 02 c0       	push   0xc00251ac
c001502c:	e8 1b 8b 00 00       	call   c001db4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015031:	c7 04 24 ac 51 02 c0 	mov    DWORD PTR [esp],0xc00251ac
c0015038:	89 c3                	mov    ebx,eax
c001503a:	e8 15 8b 00 00       	call   c001db54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001503f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015042:	e8 b5 fc ff ff       	call   c0014cfc <cleanupTerminatedTask(ThreadControlBlock*)>
c0015047:	83 c4 10             	add    esp,0x10
c001504a:	66 90                	xchg   ax,ax
c001504c:	83 ec 0c             	sub    esp,0xc
c001504f:	68 ac 51 02 c0       	push   0xc00251ac
c0015054:	e8 d7 8a 00 00       	call   c001db30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015059:	83 c4 10             	add    esp,0x10
c001505c:	84 c0                	test   al,al
c001505e:	74 c4                	je     c0015024 <cleanerTaskFunction(void*)+0x5c>
c0015060:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0015065:	48                   	dec    eax
c0015066:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c001506b:	75 03                	jne    c0015070 <cleanerTaskFunction(void*)+0xa8>
c001506d:	fb                   	sti    
c001506e:	66 90                	xchg   ax,ax
c0015070:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c0015075:	48                   	dec    eax
c0015076:	a3 a4 51 02 c0       	mov    ds:0xc00251a4,eax
c001507b:	0f 85 4b ff ff ff    	jne    c0014fcc <cleanerTaskFunction(void*)+0x4>
c0015081:	a1 a0 51 02 c0       	mov    eax,ds:0xc00251a0
c0015086:	85 c0                	test   eax,eax
c0015088:	0f 84 3e ff ff ff    	je     c0014fcc <cleanerTaskFunction(void*)+0x4>
c001508e:	c7 05 a0 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251a0,0x0
c0015098:	e8 f7 f6 ff ff       	call   c0014794 <schedule()>
c001509d:	e9 2a ff ff ff       	jmp    c0014fcc <cleanerTaskFunction(void*)+0x4>
c00150a2:	66 90                	xchg   ax,ax
c00150a4:	83 ec 0c             	sub    esp,0xc
c00150a7:	6a 02                	push   0x2
c00150a9:	e8 ba f8 ff ff       	call   c0014968 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00150ae:	83 c4 10             	add    esp,0x10
c00150b1:	e9 4e ff ff ff       	jmp    c0015004 <cleanerTaskFunction(void*)+0x3c>
c00150b6:	66 90                	xchg   ax,ax

c00150b8 <terminateTask(int)>:
c00150b8:	83 ec 14             	sub    esp,0x14
c00150bb:	fa                   	cli    
c00150bc:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c00150c2:	ff 05 a4 51 02 c0    	inc    DWORD PTR ds:0xc00251a4
c00150c8:	fa                   	cli    
c00150c9:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c00150cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00150d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150d8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00150db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00150e3:	50                   	push   eax
c00150e4:	68 ac 51 02 c0       	push   0xc00251ac
c00150e9:	e8 1e 8b 00 00       	call   c001dc0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00150ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150f3:	83 c4 10             	add    esp,0x10
c00150f6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00150fd:	a1 88 51 02 c0       	mov    eax,ds:0xc0025188
c0015102:	85 c0                	test   eax,eax
c0015104:	74 5e                	je     c0015164 <terminateTask(int)+0xac>
c0015106:	83 ec 0c             	sub    esp,0xc
c0015109:	c6 05 8c 51 02 c0 01 	mov    BYTE PTR ds:0xc002518c,0x1
c0015110:	50                   	push   eax
c0015111:	e8 42 fb ff ff       	call   c0014c58 <unblockTask(ThreadControlBlock*)>
c0015116:	83 c4 10             	add    esp,0x10
c0015119:	8d 76 00             	lea    esi,[esi+0x0]
c001511c:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0015121:	48                   	dec    eax
c0015122:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0015127:	75 03                	jne    c001512c <terminateTask(int)+0x74>
c0015129:	fb                   	sti    
c001512a:	66 90                	xchg   ax,ax
c001512c:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c0015131:	48                   	dec    eax
c0015132:	a3 a4 51 02 c0       	mov    ds:0xc00251a4,eax
c0015137:	75 0b                	jne    c0015144 <terminateTask(int)+0x8c>
c0015139:	83 3d a0 51 02 c0 00 	cmp    DWORD PTR ds:0xc00251a0,0x0
c0015140:	75 36                	jne    c0015178 <terminateTask(int)+0xc0>
c0015142:	66 90                	xchg   ax,ax
c0015144:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0015149:	48                   	dec    eax
c001514a:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c001514f:	75 03                	jne    c0015154 <terminateTask(int)+0x9c>
c0015151:	fb                   	sti    
c0015152:	66 90                	xchg   ax,ax
c0015154:	fa                   	cli    
c0015155:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c001515b:	90                   	nop
c001515c:	e8 33 f6 ff ff       	call   c0014794 <schedule()>
c0015161:	eb e1                	jmp    c0015144 <terminateTask(int)+0x8c>
c0015163:	90                   	nop
c0015164:	83 ec 0c             	sub    esp,0xc
c0015167:	68 b6 fe 01 c0       	push   0xc001feb6
c001516c:	e8 7f 67 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0015171:	83 c4 10             	add    esp,0x10
c0015174:	eb a6                	jmp    c001511c <terminateTask(int)+0x64>
c0015176:	66 90                	xchg   ax,ax
c0015178:	c7 05 a0 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251a0,0x0
c0015182:	eb d8                	jmp    c001515c <terminateTask(int)+0xa4>

c0015184 <Thr::terminateFromIRQ(int)>:
c0015184:	83 ec 18             	sub    esp,0x18
c0015187:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001518b:	50                   	push   eax
c001518c:	e8 27 ff ff ff       	call   c00150b8 <terminateTask(int)>
c0015191:	90                   	nop
c0015192:	66 90                	xchg   ax,ax

c0015194 <Semaphore::release()>:
c0015194:	83 ec 0c             	sub    esp,0xc
c0015197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001519b:	fa                   	cli    
c001519c:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c00151a1:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c00151a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00151aa:	89 0d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,ecx
c00151b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00151b3:	85 c9                	test   ecx,ecx
c00151b5:	74 41                	je     c00151f8 <Semaphore::release()+0x64>
c00151b7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00151ba:	83 ec 0c             	sub    esp,0xc
c00151bd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00151c0:	51                   	push   ecx
c00151c1:	e8 92 fa ff ff       	call   c0014c58 <unblockTask(ThreadControlBlock*)>
c00151c6:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c00151cb:	83 c4 10             	add    esp,0x10
c00151ce:	48                   	dec    eax
c00151cf:	90                   	nop
c00151d0:	a3 a4 51 02 c0       	mov    ds:0xc00251a4,eax
c00151d5:	85 c0                	test   eax,eax
c00151d7:	75 0b                	jne    c00151e4 <Semaphore::release()+0x50>
c00151d9:	a1 a0 51 02 c0       	mov    eax,ds:0xc00251a0
c00151de:	85 c0                	test   eax,eax
c00151e0:	75 1e                	jne    c0015200 <Semaphore::release()+0x6c>
c00151e2:	66 90                	xchg   ax,ax
c00151e4:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c00151e9:	48                   	dec    eax
c00151ea:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c00151ef:	75 03                	jne    c00151f4 <Semaphore::release()+0x60>
c00151f1:	fb                   	sti    
c00151f2:	66 90                	xchg   ax,ax
c00151f4:	83 c4 0c             	add    esp,0xc
c00151f7:	c3                   	ret    
c00151f8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00151fb:	eb d3                	jmp    c00151d0 <Semaphore::release()+0x3c>
c00151fd:	8d 76 00             	lea    esi,[esi+0x0]
c0015200:	c7 05 a0 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251a0,0x0
c001520a:	e8 85 f5 ff ff       	call   c0014794 <schedule()>
c001520f:	eb d3                	jmp    c00151e4 <Semaphore::release()+0x50>
c0015211:	8d 76 00             	lea    esi,[esi+0x0]

c0015214 <__static_initialization_and_destruction_0(int, int)>:
c0015214:	83 ec 0c             	sub    esp,0xc
c0015217:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001521c:	0f 85 8e 00 00 00    	jne    c00152b0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015222:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001522a:	0f 85 80 00 00 00    	jne    c00152b0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015230:	83 ec 0c             	sub    esp,0xc
c0015233:	68 c4 51 02 c0       	push   0xc00251c4
c0015238:	e8 7b 8c 00 00       	call   c001deb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001523d:	83 c4 10             	add    esp,0x10
c0015240:	83 ec 04             	sub    esp,0x4
c0015243:	68 70 0a 02 c0       	push   0xc0020a70
c0015248:	68 c4 51 02 c0       	push   0xc00251c4
c001524d:	68 68 de 01 c0       	push   0xc001de68
c0015252:	e8 53 65 ff ff       	call   c000b7aa <__cxa_atexit>
c0015257:	83 c4 10             	add    esp,0x10
c001525a:	83 ec 0c             	sub    esp,0xc
c001525d:	68 b8 51 02 c0       	push   0xc00251b8
c0015262:	e8 51 8c 00 00       	call   c001deb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015267:	83 c4 10             	add    esp,0x10
c001526a:	83 ec 04             	sub    esp,0x4
c001526d:	68 70 0a 02 c0       	push   0xc0020a70
c0015272:	68 b8 51 02 c0       	push   0xc00251b8
c0015277:	68 68 de 01 c0       	push   0xc001de68
c001527c:	e8 29 65 ff ff       	call   c000b7aa <__cxa_atexit>
c0015281:	83 c4 10             	add    esp,0x10
c0015284:	83 ec 0c             	sub    esp,0xc
c0015287:	68 ac 51 02 c0       	push   0xc00251ac
c001528c:	e8 27 8c 00 00       	call   c001deb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015291:	83 c4 10             	add    esp,0x10
c0015294:	83 ec 04             	sub    esp,0x4
c0015297:	68 70 0a 02 c0       	push   0xc0020a70
c001529c:	68 ac 51 02 c0       	push   0xc00251ac
c00152a1:	68 68 de 01 c0       	push   0xc001de68
c00152a6:	e8 ff 64 ff ff       	call   c000b7aa <__cxa_atexit>
c00152ab:	83 c4 10             	add    esp,0x10
c00152ae:	66 90                	xchg   ax,ax
c00152b0:	90                   	nop
c00152b1:	83 c4 0c             	add    esp,0xc
c00152b4:	c3                   	ret    
c00152b5:	8d 76 00             	lea    esi,[esi+0x0]

c00152b8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00152b8:	83 ec 0c             	sub    esp,0xc
c00152bb:	83 ec 08             	sub    esp,0x8
c00152be:	68 ff ff 00 00       	push   0xffff
c00152c3:	6a 01                	push   0x1
c00152c5:	e8 4a ff ff ff       	call   c0015214 <__static_initialization_and_destruction_0(int, int)>
c00152ca:	83 c4 10             	add    esp,0x10
c00152cd:	83 c4 0c             	add    esp,0xc
c00152d0:	c3                   	ret    

c00152d1 <Vm::inbv(unsigned short)>:
c00152d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00152d5:	66 81 fa fe fe       	cmp    dx,0xfefe
c00152da:	75 06                	jne    c00152e2 <Vm::inbv(unsigned short)+0x11>
c00152dc:	a0 0c 52 02 c0       	mov    al,ds:0xc002520c
c00152e1:	c3                   	ret    
c00152e2:	ec                   	in     al,dx
c00152e3:	c3                   	ret    

c00152e4 <Vm::outbv(unsigned short, unsigned char)>:
c00152e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00152e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00152ec:	66 81 fa fe fe       	cmp    dx,0xfefe
c00152f1:	75 25                	jne    c0015318 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00152f3:	8b 0d 0c 52 02 c0    	mov    ecx,DWORD PTR ds:0xc002520c
c00152f9:	8d 51 01             	lea    edx,[ecx+0x1]
c00152fc:	88 81 20 52 02 c0    	mov    BYTE PTR [ecx-0x3ffdade0],al
c0015302:	89 15 0c 52 02 c0    	mov    DWORD PTR ds:0xc002520c,edx
c0015308:	83 fa 20             	cmp    edx,0x20
c001530b:	75 0c                	jne    c0015319 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001530d:	c7 05 0c 52 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002520c,0x1f
c0015317:	c3                   	ret    
c0015318:	ee                   	out    dx,al
c0015319:	c3                   	ret    

c001531a <Vm::realToLinear(unsigned short, unsigned short)>:
c001531a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001531f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015324:	c1 e0 04             	shl    eax,0x4
c0015327:	01 d0                	add    eax,edx
c0015329:	c3                   	ret    

c001532a <Vm::getSegment(unsigned int)>:
c001532a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001532e:	c1 e8 10             	shr    eax,0x10
c0015331:	c3                   	ret    

c0015332 <Vm::getOffset(unsigned int)>:
c0015332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015336:	c3                   	ret    

c0015337 <Vm::mainloop2()>:
c0015337:	83 ec 18             	sub    esp,0x18
c001533a:	fa                   	cli    
c001533b:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0015341:	6a 02                	push   0x2
c0015343:	c6 05 05 52 02 c0 01 	mov    BYTE PTR ds:0xc0025205,0x1
c001534a:	e8 19 f6 ff ff       	call   c0014968 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001534f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015354:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015358:	52                   	push   edx
c0015359:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001535d:	52                   	push   edx
c001535e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015362:	52                   	push   edx
c0015363:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015367:	50                   	push   eax
c0015368:	e8 c2 ae fe ff       	call   c000022f <goToVM86>
c001536d:	83 c4 2c             	add    esp,0x2c
c0015370:	c3                   	ret    

c0015371 <Vm::mainVm8086Loop(void*)>:
c0015371:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0015376:	48                   	dec    eax
c0015377:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c001537c:	75 01                	jne    c001537f <Vm::mainVm8086Loop(void*)+0xe>
c001537e:	fb                   	sti    
c001537f:	eb b6                	jmp    c0015337 <Vm::mainloop2()>

c0015381 <Vm::mainloop3(unsigned long)>:
c0015381:	83 ec 18             	sub    esp,0x18
c0015384:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015388:	fa                   	cli    
c0015389:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c001538f:	6a 02                	push   0x2
c0015391:	c6 05 04 52 02 c0 01 	mov    BYTE PTR ds:0xc0025204,0x1
c0015398:	a3 00 52 02 c0       	mov    ds:0xc0025200,eax
c001539d:	e8 c6 f5 ff ff       	call   c0014968 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00153a2:	83 c4 1c             	add    esp,0x1c
c00153a5:	eb 90                	jmp    c0015337 <Vm::mainloop2()>

c00153a7 <Vm::initialise8086()>:
c00153a7:	83 ec 0c             	sub    esp,0xc
c00153aa:	68 80 00 00 00       	push   0x80
c00153af:	6a 00                	push   0x0
c00153b1:	68 71 53 01 c0       	push   0xc0015371
c00153b6:	ff 35 d0 51 02 c0    	push   DWORD PTR ds:0xc00251d0
c00153bc:	e8 b3 f1 ff ff       	call   c0014574 <Process::createThread(void (*)(void*), void*, int)>
c00153c1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00153c8:	a3 08 52 02 c0       	mov    ds:0xc0025208,eax
c00153cd:	68 00 01 00 00       	push   0x100
c00153d2:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c00153d7:	6a 00                	push   0x0
c00153d9:	6a 00                	push   0x0
c00153db:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00153e1:	e8 46 5c ff ff       	call   c000b02c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00153e6:	83 c4 2c             	add    esp,0x2c
c00153e9:	c3                   	ret    

c00153ea <Vm::finish8086()>:
c00153ea:	53                   	push   ebx
c00153eb:	83 ec 08             	sub    esp,0x8
c00153ee:	fa                   	cli    
c00153ef:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c00153f5:	80 3d 04 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025204,0x0
c00153fc:	75 15                	jne    c0015413 <Vm::finish8086()+0x29>
c00153fe:	e8 91 f3 ff ff       	call   c0014794 <schedule()>
c0015403:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0015408:	48                   	dec    eax
c0015409:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c001540e:	75 de                	jne    c00153ee <Vm::finish8086()+0x4>
c0015410:	fb                   	sti    
c0015411:	eb db                	jmp    c00153ee <Vm::finish8086()+0x4>
c0015413:	83 ec 0c             	sub    esp,0xc
c0015416:	8b 1d 00 52 02 c0    	mov    ebx,DWORD PTR ds:0xc0025200
c001541c:	ff 35 08 52 02 c0    	push   DWORD PTR ds:0xc0025208
c0015422:	c6 05 04 52 02 c0 00 	mov    BYTE PTR ds:0xc0025204,0x0
c0015429:	e8 2a f8 ff ff       	call   c0014c58 <unblockTask(ThreadControlBlock*)>
c001542e:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0015433:	83 c4 10             	add    esp,0x10
c0015436:	8d 50 ff             	lea    edx,[eax-0x1]
c0015439:	89 15 a8 51 02 c0    	mov    DWORD PTR ds:0xc00251a8,edx
c001543f:	85 d2                	test   edx,edx
c0015441:	75 01                	jne    c0015444 <Vm::finish8086()+0x5a>
c0015443:	fb                   	sti    
c0015444:	89 d8                	mov    eax,ebx
c0015446:	83 c4 08             	add    esp,0x8
c0015449:	5b                   	pop    ebx
c001544a:	c3                   	ret    

c001544b <Vm::getOutput8086(unsigned char*)>:
c001544b:	57                   	push   edi
c001544c:	8b 0d 0c 52 02 c0    	mov    ecx,DWORD PTR ds:0xc002520c
c0015452:	56                   	push   esi
c0015453:	be 20 52 02 c0       	mov    esi,0xc0025220
c0015458:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001545c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001545e:	a1 0c 52 02 c0       	mov    eax,ds:0xc002520c
c0015463:	5e                   	pop    esi
c0015464:	c7 05 0c 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002520c,0x0
c001546e:	5f                   	pop    edi
c001546f:	c3                   	ret    

c0015470 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015470:	55                   	push   ebp
c0015471:	57                   	push   edi
c0015472:	56                   	push   esi
c0015473:	53                   	push   ebx
c0015474:	83 ec 0c             	sub    esp,0xc
c0015477:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001547b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001547f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015483:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015487:	fa                   	cli    
c0015488:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c001548e:	80 3d 05 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025205,0x0
c0015495:	75 15                	jne    c00154ac <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015497:	e8 f8 f2 ff ff       	call   c0014794 <schedule()>
c001549c:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c00154a1:	48                   	dec    eax
c00154a2:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c00154a7:	75 de                	jne    c0015487 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00154a9:	fb                   	sti    
c00154aa:	eb db                	jmp    c0015487 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00154ac:	a1 08 52 02 c0       	mov    eax,ds:0xc0025208
c00154b1:	c7 05 0c 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002520c,0x0
c00154bb:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00154bf:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00154c3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00154c7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00154cb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00154cf:	0f b7 ff             	movzx  edi,di
c00154d2:	0f b7 f6             	movzx  esi,si
c00154d5:	50                   	push   eax
c00154d6:	6a 20                	push   0x20
c00154d8:	6a 00                	push   0x0
c00154da:	68 20 52 02 c0       	push   0xc0025220
c00154df:	e8 0c b0 fe ff       	call   c00004f0 <memset>
c00154e4:	5a                   	pop    edx
c00154e5:	59                   	pop    ecx
c00154e6:	57                   	push   edi
c00154e7:	56                   	push   esi
c00154e8:	e8 2d fe ff ff       	call   c001531a <Vm::realToLinear(unsigned short, unsigned short)>
c00154ed:	83 c4 10             	add    esp,0x10
c00154f0:	89 c7                	mov    edi,eax
c00154f2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00154f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00154fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00154fc:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0015501:	c6 05 05 52 02 c0 00 	mov    BYTE PTR ds:0xc0025205,0x0
c0015508:	48                   	dec    eax
c0015509:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c001550e:	75 01                	jne    c0015511 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015510:	fb                   	sti    
c0015511:	83 ec 0c             	sub    esp,0xc
c0015514:	ff 35 08 52 02 c0    	push   DWORD PTR ds:0xc0025208
c001551a:	e8 39 f7 ff ff       	call   c0014c58 <unblockTask(ThreadControlBlock*)>
c001551f:	83 c4 1c             	add    esp,0x1c
c0015522:	b0 01                	mov    al,0x1
c0015524:	5b                   	pop    ebx
c0015525:	5e                   	pop    esi
c0015526:	5f                   	pop    edi
c0015527:	5d                   	pop    ebp
c0015528:	c3                   	ret    

c0015529 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015529:	55                   	push   ebp
c001552a:	57                   	push   edi
c001552b:	56                   	push   esi
c001552c:	53                   	push   ebx
c001552d:	83 ec 2c             	sub    esp,0x2c
c0015530:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0015534:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015538:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001553c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015540:	fa                   	cli    
c0015541:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c0015547:	0f b6 35 05 52 02 c0 	movzx  esi,BYTE PTR ds:0xc0025205
c001554e:	89 f0                	mov    eax,esi
c0015550:	84 c0                	test   al,al
c0015552:	75 1d                	jne    c0015571 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0015554:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015558:	e8 37 f2 ff ff       	call   c0014794 <schedule()>
c001555d:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0015562:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015566:	48                   	dec    eax
c0015567:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c001556c:	75 d2                	jne    c0015540 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001556e:	fb                   	sti    
c001556f:	eb cf                	jmp    c0015540 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015571:	a1 08 52 02 c0       	mov    eax,ds:0xc0025208
c0015576:	c7 05 0c 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002520c,0x0
c0015580:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015584:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015588:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001558c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0015590:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015594:	50                   	push   eax
c0015595:	6a 20                	push   0x20
c0015597:	6a 00                	push   0x0
c0015599:	68 20 52 02 c0       	push   0xc0025220
c001559e:	e8 4d af fe ff       	call   c00004f0 <memset>
c00155a3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00155aa:	e8 b2 35 ff ff       	call   c0008b61 <malloc>
c00155af:	83 c4 0c             	add    esp,0xc
c00155b2:	89 c3                	mov    ebx,eax
c00155b4:	ff 35 d0 51 02 c0    	push   DWORD PTR ds:0xc00251d0
c00155ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00155be:	50                   	push   eax
c00155bf:	e8 a2 68 ff ff       	call   c000be66 <File::File(char const*, Process*)>
c00155c4:	83 c4 10             	add    esp,0x10
c00155c7:	85 db                	test   ebx,ebx
c00155c9:	75 0a                	jne    c00155d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00155cb:	83 ec 0c             	sub    esp,0xc
c00155ce:	68 e0 ff 01 c0       	push   0xc001ffe0
c00155d3:	eb 3e                	jmp    c0015613 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00155d5:	50                   	push   eax
c00155d6:	8d 44 24 17          	lea    eax,[esp+0x17]
c00155da:	50                   	push   eax
c00155db:	8d 44 24 20          	lea    eax,[esp+0x20]
c00155df:	50                   	push   eax
c00155e0:	53                   	push   ebx
c00155e1:	e8 ec 6b ff ff       	call   c000c1d2 <File::stat(unsigned long long*, bool*)>
c00155e6:	83 c4 10             	add    esp,0x10
c00155e9:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00155ee:	74 0a                	je     c00155fa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00155f0:	83 ec 0c             	sub    esp,0xc
c00155f3:	68 f4 ff 01 c0       	push   0xc001fff4
c00155f8:	eb 19                	jmp    c0015613 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00155fa:	51                   	push   ecx
c00155fb:	51                   	push   ecx
c00155fc:	6a 01                	push   0x1
c00155fe:	53                   	push   ebx
c00155ff:	e8 22 69 ff ff       	call   c000bf26 <File::open(FileOpenMode)>
c0015604:	83 c4 10             	add    esp,0x10
c0015607:	85 c0                	test   eax,eax
c0015609:	74 24                	je     c001562f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001560b:	83 ec 0c             	sub    esp,0xc
c001560e:	68 0d 00 02 c0       	push   0xc002000d
c0015613:	e8 27 be ff ff       	call   c001143f <Krnl::panic(char const*)>
c0015618:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c001561d:	83 c4 10             	add    esp,0x10
c0015620:	48                   	dec    eax
c0015621:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0015626:	85 c0                	test   eax,eax
c0015628:	75 01                	jne    c001562b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001562a:	fb                   	sti    
c001562b:	31 f6                	xor    esi,esi
c001562d:	eb 58                	jmp    c0015687 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001562f:	0f b7 ed             	movzx  ebp,bp
c0015632:	50                   	push   eax
c0015633:	0f b7 ff             	movzx  edi,di
c0015636:	50                   	push   eax
c0015637:	55                   	push   ebp
c0015638:	57                   	push   edi
c0015639:	e8 dc fc ff ff       	call   c001531a <Vm::realToLinear(unsigned short, unsigned short)>
c001563e:	5a                   	pop    edx
c001563f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015641:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015645:	51                   	push   ecx
c0015646:	50                   	push   eax
c0015647:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001564b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001564f:	53                   	push   ebx
c0015650:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015653:	83 c4 14             	add    esp,0x14
c0015656:	53                   	push   ebx
c0015657:	e8 28 69 ff ff       	call   c000bf84 <File::close()>
c001565c:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0015661:	83 c4 10             	add    esp,0x10
c0015664:	48                   	dec    eax
c0015665:	c6 05 05 52 02 c0 00 	mov    BYTE PTR ds:0xc0025205,0x0
c001566c:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0015671:	85 c0                	test   eax,eax
c0015673:	75 01                	jne    c0015676 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0015675:	fb                   	sti    
c0015676:	83 ec 0c             	sub    esp,0xc
c0015679:	ff 35 08 52 02 c0    	push   DWORD PTR ds:0xc0025208
c001567f:	e8 d4 f5 ff ff       	call   c0014c58 <unblockTask(ThreadControlBlock*)>
c0015684:	83 c4 10             	add    esp,0x10
c0015687:	83 c4 2c             	add    esp,0x2c
c001568a:	89 f0                	mov    eax,esi
c001568c:	5b                   	pop    ebx
c001568d:	5e                   	pop    esi
c001568e:	5f                   	pop    edi
c001568f:	5d                   	pop    ebp
c0015690:	c3                   	ret    

c0015691 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015691:	57                   	push   edi
c0015692:	56                   	push   esi
c0015693:	53                   	push   ebx
c0015694:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001569c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00156a0:	83 e8 06             	sub    eax,0x6
c00156a3:	0f b7 c0             	movzx  eax,ax
c00156a6:	50                   	push   eax
c00156a7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00156ac:	50                   	push   eax
c00156ad:	e8 68 fc ff ff       	call   c001531a <Vm::realToLinear(unsigned short, unsigned short)>
c00156b2:	5a                   	pop    edx
c00156b3:	5e                   	pop    esi
c00156b4:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00156b7:	8d 56 fa             	lea    edx,[esi-0x6]
c00156ba:	81 e2 ff ff 00 00    	and    edx,0xffff
c00156c0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00156c3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00156c6:	83 c2 02             	add    edx,0x2
c00156c9:	66 89 10             	mov    WORD PTR [eax],dx
c00156cc:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00156cf:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00156d3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00156d6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00156da:	89 d6                	mov    esi,edx
c00156dc:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00156e2:	66 81 e6 ff fd       	and    si,0xfdff
c00156e7:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00156eb:	74 07                	je     c00156f4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00156ed:	89 d6                	mov    esi,edx
c00156ef:	66 81 ce 00 02       	or     si,0x200
c00156f4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00156f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156fd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015701:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0015709:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001570c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0015714:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0015717:	5b                   	pop    ebx
c0015718:	5e                   	pop    esi
c0015719:	5f                   	pop    edi
c001571a:	c3                   	ret    

c001571b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001571b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015720:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015725:	c1 e0 04             	shl    eax,0x4
c0015728:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001572b:	c3                   	ret    

c001572c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001572c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015731:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015736:	c1 e0 04             	shl    eax,0x4
c0015739:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001573d:	c3                   	ret    

c001573e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001573e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015743:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015748:	c1 e0 04             	shl    eax,0x4
c001574b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001574e:	c3                   	ret    

c001574f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001574f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015754:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015759:	c1 e0 04             	shl    eax,0x4
c001575c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015760:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0015763:	c3                   	ret    

c0015764 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0015764:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015769:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001576e:	c1 e0 04             	shl    eax,0x4
c0015771:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015775:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0015779:	c3                   	ret    

c001577a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001577a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001577f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015784:	c1 e0 04             	shl    eax,0x4
c0015787:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001578b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001578e:	c3                   	ret    

c001578f <Vm::faultHandler(regs*)>:
c001578f:	55                   	push   ebp
c0015790:	57                   	push   edi
c0015791:	56                   	push   esi
c0015792:	53                   	push   ebx
c0015793:	83 ec 1c             	sub    esp,0x1c
c0015796:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001579a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001579d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00157a1:	0f b7 f8             	movzx  edi,ax
c00157a4:	52                   	push   edx
c00157a5:	0f b7 c0             	movzx  eax,ax
c00157a8:	50                   	push   eax
c00157a9:	e8 6c fb ff ff       	call   c001531a <Vm::realToLinear(unsigned short, unsigned short)>
c00157ae:	5a                   	pop    edx
c00157af:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00157b2:	59                   	pop    ecx
c00157b3:	89 c1                	mov    ecx,eax
c00157b5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00157b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00157bc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00157c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00157c5:	0f b7 c5             	movzx  eax,bp
c00157c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00157cc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00157d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00157d4:	e8 41 fb ff ff       	call   c001531a <Vm::realToLinear(unsigned short, unsigned short)>
c00157d9:	5e                   	pop    esi
c00157da:	be 06 00 00 00       	mov    esi,0x6
c00157df:	5a                   	pop    edx
c00157e0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00157e5:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00157ea:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00157ed:	80 fa 9d             	cmp    dl,0x9d
c00157f0:	0f 84 2c 02 00 00    	je     c0015a22 <Vm::faultHandler(regs*)+0x293>
c00157f6:	0f 87 91 00 00 00    	ja     c001588d <Vm::faultHandler(regs*)+0xfe>
c00157fc:	80 fa 66             	cmp    dl,0x66
c00157ff:	0f 84 98 01 00 00    	je     c001599d <Vm::faultHandler(regs*)+0x20e>
c0015805:	77 47                	ja     c001584e <Vm::faultHandler(regs*)+0xbf>
c0015807:	80 fa 36             	cmp    dl,0x36
c001580a:	0f 84 80 01 00 00    	je     c0015990 <Vm::faultHandler(regs*)+0x201>
c0015810:	77 1a                	ja     c001582c <Vm::faultHandler(regs*)+0x9d>
c0015812:	80 fa 26             	cmp    dl,0x26
c0015815:	0f 84 4e 01 00 00    	je     c0015969 <Vm::faultHandler(regs*)+0x1da>
c001581b:	80 fa 2e             	cmp    dl,0x2e
c001581e:	0f 85 e2 05 00 00    	jne    c0015e06 <Vm::faultHandler(regs*)+0x677>
c0015824:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015827:	31 f6                	xor    esi,esi
c0015829:	41                   	inc    ecx
c001582a:	eb be                	jmp    c00157ea <Vm::faultHandler(regs*)+0x5b>
c001582c:	80 fa 64             	cmp    dl,0x64
c001582f:	0f 84 41 01 00 00    	je     c0015976 <Vm::faultHandler(regs*)+0x1e7>
c0015835:	0f 87 48 01 00 00    	ja     c0015983 <Vm::faultHandler(regs*)+0x1f4>
c001583b:	80 fa 3e             	cmp    dl,0x3e
c001583e:	0f 85 c2 05 00 00    	jne    c0015e06 <Vm::faultHandler(regs*)+0x677>
c0015844:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015847:	be 01 00 00 00       	mov    esi,0x1
c001584c:	eb db                	jmp    c0015829 <Vm::faultHandler(regs*)+0x9a>
c001584e:	80 fa 6d             	cmp    dl,0x6d
c0015851:	0f 84 ec 02 00 00    	je     c0015b43 <Vm::faultHandler(regs*)+0x3b4>
c0015857:	77 17                	ja     c0015870 <Vm::faultHandler(regs*)+0xe1>
c0015859:	80 fa 67             	cmp    dl,0x67
c001585c:	0f 84 48 01 00 00    	je     c00159aa <Vm::faultHandler(regs*)+0x21b>
c0015862:	80 fa 6c             	cmp    dl,0x6c
c0015865:	0f 84 69 02 00 00    	je     c0015ad4 <Vm::faultHandler(regs*)+0x345>
c001586b:	e9 96 05 00 00       	jmp    c0015e06 <Vm::faultHandler(regs*)+0x677>
c0015870:	80 fa 6f             	cmp    dl,0x6f
c0015873:	0f 84 f4 03 00 00    	je     c0015c6d <Vm::faultHandler(regs*)+0x4de>
c0015879:	0f 82 59 03 00 00    	jb     c0015bd8 <Vm::faultHandler(regs*)+0x449>
c001587f:	80 fa 9c             	cmp    dl,0x9c
c0015882:	0f 84 2f 01 00 00    	je     c00159b7 <Vm::faultHandler(regs*)+0x228>
c0015888:	e9 79 05 00 00       	jmp    c0015e06 <Vm::faultHandler(regs*)+0x677>
c001588d:	80 fa ec             	cmp    dl,0xec
c0015890:	0f 84 14 05 00 00    	je     c0015daa <Vm::faultHandler(regs*)+0x61b>
c0015896:	77 7b                	ja     c0015913 <Vm::faultHandler(regs*)+0x184>
c0015898:	80 fa e4             	cmp    dl,0xe4
c001589b:	0f 84 93 04 00 00    	je     c0015d34 <Vm::faultHandler(regs*)+0x5a5>
c00158a1:	77 53                	ja     c00158f6 <Vm::faultHandler(regs*)+0x167>
c00158a3:	80 fa cd             	cmp    dl,0xcd
c00158a6:	0f 84 d9 01 00 00    	je     c0015a85 <Vm::faultHandler(regs*)+0x2f6>
c00158ac:	80 fa cf             	cmp    dl,0xcf
c00158af:	0f 85 51 05 00 00    	jne    c0015e06 <Vm::faultHandler(regs*)+0x677>
c00158b5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00158b8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00158bb:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00158bf:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00158c2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00158c6:	81 ca 00 02 02 00    	or     edx,0x20200
c00158cc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00158cf:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00158d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00158d9:	66 c1 e8 09          	shr    ax,0x9
c00158dd:	83 e0 01             	and    eax,0x1
c00158e0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00158e3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00158e6:	83 c0 06             	add    eax,0x6
c00158e9:	25 ff ff 00 00       	and    eax,0xffff
c00158ee:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00158f1:	e9 0c 05 00 00       	jmp    c0015e02 <Vm::faultHandler(regs*)+0x673>
c00158f6:	80 fa e6             	cmp    dl,0xe6
c00158f9:	0f 84 7f 04 00 00    	je     c0015d7e <Vm::faultHandler(regs*)+0x5ef>
c00158ff:	0f 82 4b 04 00 00    	jb     c0015d50 <Vm::faultHandler(regs*)+0x5c1>
c0015905:	80 fa e7             	cmp    dl,0xe7
c0015908:	0f 84 87 04 00 00    	je     c0015d95 <Vm::faultHandler(regs*)+0x606>
c001590e:	e9 f3 04 00 00       	jmp    c0015e06 <Vm::faultHandler(regs*)+0x677>
c0015913:	80 fa ef             	cmp    dl,0xef
c0015916:	0f 84 d1 04 00 00    	je     c0015ded <Vm::faultHandler(regs*)+0x65e>
c001591c:	77 28                	ja     c0015946 <Vm::faultHandler(regs*)+0x1b7>
c001591e:	80 fa ed             	cmp    dl,0xed
c0015921:	0f 84 9f 04 00 00    	je     c0015dc6 <Vm::faultHandler(regs*)+0x637>
c0015927:	80 fa ee             	cmp    dl,0xee
c001592a:	0f 85 d6 04 00 00    	jne    c0015e06 <Vm::faultHandler(regs*)+0x677>
c0015930:	50                   	push   eax
c0015931:	50                   	push   eax
c0015932:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015936:	50                   	push   eax
c0015937:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001593b:	50                   	push   eax
c001593c:	e8 a3 f9 ff ff       	call   c00152e4 <Vm::outbv(unsigned short, unsigned char)>
c0015941:	e9 9f 04 00 00       	jmp    c0015de5 <Vm::faultHandler(regs*)+0x656>
c0015946:	80 fa fa             	cmp    dl,0xfa
c0015949:	0f 84 69 01 00 00    	je     c0015ab8 <Vm::faultHandler(regs*)+0x329>
c001594f:	80 fa fb             	cmp    dl,0xfb
c0015952:	0f 84 6e 01 00 00    	je     c0015ac6 <Vm::faultHandler(regs*)+0x337>
c0015958:	80 fa f3             	cmp    dl,0xf3
c001595b:	0f 85 a5 04 00 00    	jne    c0015e06 <Vm::faultHandler(regs*)+0x677>
c0015961:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015964:	e9 c0 fe ff ff       	jmp    c0015829 <Vm::faultHandler(regs*)+0x9a>
c0015969:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001596c:	be 02 00 00 00       	mov    esi,0x2
c0015971:	e9 b3 fe ff ff       	jmp    c0015829 <Vm::faultHandler(regs*)+0x9a>
c0015976:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015979:	be 03 00 00 00       	mov    esi,0x3
c001597e:	e9 a6 fe ff ff       	jmp    c0015829 <Vm::faultHandler(regs*)+0x9a>
c0015983:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015986:	be 04 00 00 00       	mov    esi,0x4
c001598b:	e9 99 fe ff ff       	jmp    c0015829 <Vm::faultHandler(regs*)+0x9a>
c0015990:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015993:	be 05 00 00 00       	mov    esi,0x5
c0015998:	e9 8c fe ff ff       	jmp    c0015829 <Vm::faultHandler(regs*)+0x9a>
c001599d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00159a0:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00159a5:	e9 7f fe ff ff       	jmp    c0015829 <Vm::faultHandler(regs*)+0x9a>
c00159aa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00159ad:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00159b2:	e9 72 fe ff ff       	jmp    c0015829 <Vm::faultHandler(regs*)+0x9a>
c00159b7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00159ba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00159be:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00159c3:	74 30                	je     c00159f5 <Vm::faultHandler(regs*)+0x266>
c00159c5:	83 e9 04             	sub    ecx,0x4
c00159c8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00159ce:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00159d4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00159d7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00159da:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00159e0:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00159e4:	0f 84 15 04 00 00    	je     c0015dff <Vm::faultHandler(regs*)+0x670>
c00159ea:	80 ce 02             	or     dh,0x2
c00159ed:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00159f0:	e9 0a 04 00 00       	jmp    c0015dff <Vm::faultHandler(regs*)+0x670>
c00159f5:	83 e9 02             	sub    ecx,0x2
c00159f8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00159fe:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015a01:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015a05:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015a0b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015a0f:	74 05                	je     c0015a16 <Vm::faultHandler(regs*)+0x287>
c0015a11:	80 ce 02             	or     dh,0x2
c0015a14:	eb 03                	jmp    c0015a19 <Vm::faultHandler(regs*)+0x28a>
c0015a16:	80 e6 fd             	and    dh,0xfd
c0015a19:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015a1d:	e9 dd 03 00 00       	jmp    c0015dff <Vm::faultHandler(regs*)+0x670>
c0015a22:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015a27:	74 2a                	je     c0015a53 <Vm::faultHandler(regs*)+0x2c4>
c0015a29:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a2b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015a31:	81 ca 00 02 02 00    	or     edx,0x20200
c0015a37:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015a3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015a42:	c1 e8 09             	shr    eax,0x9
c0015a45:	83 e0 01             	and    eax,0x1
c0015a48:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015a4b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015a4e:	83 c0 04             	add    eax,0x4
c0015a51:	eb 25                	jmp    c0015a78 <Vm::faultHandler(regs*)+0x2e9>
c0015a53:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015a56:	81 ca 00 02 02 00    	or     edx,0x20200
c0015a5c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015a5f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0015a62:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015a68:	66 c1 e8 09          	shr    ax,0x9
c0015a6c:	83 e0 01             	and    eax,0x1
c0015a6f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015a72:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015a75:	83 c0 02             	add    eax,0x2
c0015a78:	25 ff ff 00 00       	and    eax,0xffff
c0015a7d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015a80:	e9 7a 03 00 00       	jmp    c0015dff <Vm::faultHandler(regs*)+0x670>
c0015a85:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015a89:	3c ee                	cmp    al,0xee
c0015a8b:	75 10                	jne    c0015a9d <Vm::faultHandler(regs*)+0x30e>
c0015a8d:	83 ec 0c             	sub    esp,0xc
c0015a90:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0015a93:	e8 e9 f8 ff ff       	call   c0015381 <Vm::mainloop3(unsigned long)>
c0015a98:	e9 4b 03 00 00       	jmp    c0015de8 <Vm::faultHandler(regs*)+0x659>
c0015a9d:	83 ec 0c             	sub    esp,0xc
c0015aa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015aa8:	51                   	push   ecx
c0015aa9:	50                   	push   eax
c0015aaa:	53                   	push   ebx
c0015aab:	e8 e1 fb ff ff       	call   c0015691 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0015ab0:	83 c4 20             	add    esp,0x20
c0015ab3:	e9 4a 03 00 00       	jmp    c0015e02 <Vm::faultHandler(regs*)+0x673>
c0015ab8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015abd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015ac1:	e9 39 03 00 00       	jmp    c0015dff <Vm::faultHandler(regs*)+0x670>
c0015ac6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015acb:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0015acf:	e9 2b 03 00 00       	jmp    c0015dff <Vm::faultHandler(regs*)+0x670>
c0015ad4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015ad7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015adc:	74 2b                	je     c0015b09 <Vm::faultHandler(regs*)+0x37a>
c0015ade:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0015ae5:	76 22                	jbe    c0015b09 <Vm::faultHandler(regs*)+0x37a>
c0015ae7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015aeb:	50                   	push   eax
c0015aec:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015af0:	50                   	push   eax
c0015af1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015af5:	50                   	push   eax
c0015af6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015afa:	50                   	push   eax
c0015afb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015aff:	50                   	push   eax
c0015b00:	6a 6c                	push   0x6c
c0015b02:	6a 6c                	push   0x6c
c0015b04:	e9 b9 01 00 00       	jmp    c0015cc2 <Vm::faultHandler(regs*)+0x533>
c0015b09:	83 ec 0c             	sub    esp,0xc
c0015b0c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015b10:	0f b7 f6             	movzx  esi,si
c0015b13:	50                   	push   eax
c0015b14:	e8 b8 f7 ff ff       	call   c00152d1 <Vm::inbv(unsigned short)>
c0015b19:	83 c4 0c             	add    esp,0xc
c0015b1c:	0f b6 c0             	movzx  eax,al
c0015b1f:	50                   	push   eax
c0015b20:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0015b24:	50                   	push   eax
c0015b25:	56                   	push   esi
c0015b26:	e8 24 fc ff ff       	call   c001574f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0015b2b:	83 c4 10             	add    esp,0x10
c0015b2e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015b31:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015b35:	74 03                	je     c0015b3a <Vm::faultHandler(regs*)+0x3ab>
c0015b37:	48                   	dec    eax
c0015b38:	eb 01                	jmp    c0015b3b <Vm::faultHandler(regs*)+0x3ac>
c0015b3a:	40                   	inc    eax
c0015b3b:	0f b7 c0             	movzx  eax,ax
c0015b3e:	e9 8d 00 00 00       	jmp    c0015bd0 <Vm::faultHandler(regs*)+0x441>
c0015b43:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015b46:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015b49:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015b4e:	74 29                	je     c0015b79 <Vm::faultHandler(regs*)+0x3ea>
c0015b50:	3d ff ff 00 00       	cmp    eax,0xffff
c0015b55:	76 22                	jbe    c0015b79 <Vm::faultHandler(regs*)+0x3ea>
c0015b57:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015b5b:	50                   	push   eax
c0015b5c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015b60:	50                   	push   eax
c0015b61:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015b65:	50                   	push   eax
c0015b66:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015b6a:	50                   	push   eax
c0015b6b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015b6f:	50                   	push   eax
c0015b70:	6a 6d                	push   0x6d
c0015b72:	6a 6d                	push   0x6d
c0015b74:	e9 49 01 00 00       	jmp    c0015cc2 <Vm::faultHandler(regs*)+0x533>
c0015b79:	0f b7 c8             	movzx  ecx,ax
c0015b7c:	0f b7 f6             	movzx  esi,si
c0015b7f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015b82:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015b87:	74 20                	je     c0015ba9 <Vm::faultHandler(regs*)+0x41a>
c0015b89:	ed                   	in     eax,dx
c0015b8a:	55                   	push   ebp
c0015b8b:	50                   	push   eax
c0015b8c:	51                   	push   ecx
c0015b8d:	56                   	push   esi
c0015b8e:	e8 e7 fb ff ff       	call   c001577a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0015b93:	83 c4 10             	add    esp,0x10
c0015b96:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015b99:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015b9d:	74 05                	je     c0015ba4 <Vm::faultHandler(regs*)+0x415>
c0015b9f:	83 e8 04             	sub    eax,0x4
c0015ba2:	eb 27                	jmp    c0015bcb <Vm::faultHandler(regs*)+0x43c>
c0015ba4:	83 c0 04             	add    eax,0x4
c0015ba7:	eb 22                	jmp    c0015bcb <Vm::faultHandler(regs*)+0x43c>
c0015ba9:	66 ed                	in     ax,dx
c0015bab:	0f b7 c0             	movzx  eax,ax
c0015bae:	57                   	push   edi
c0015baf:	50                   	push   eax
c0015bb0:	51                   	push   ecx
c0015bb1:	56                   	push   esi
c0015bb2:	e8 ad fb ff ff       	call   c0015764 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0015bb7:	83 c4 10             	add    esp,0x10
c0015bba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015bbd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015bc1:	74 05                	je     c0015bc8 <Vm::faultHandler(regs*)+0x439>
c0015bc3:	83 e8 02             	sub    eax,0x2
c0015bc6:	eb 03                	jmp    c0015bcb <Vm::faultHandler(regs*)+0x43c>
c0015bc8:	83 c0 02             	add    eax,0x2
c0015bcb:	25 ff ff 00 00       	and    eax,0xffff
c0015bd0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0015bd3:	e9 27 02 00 00       	jmp    c0015dff <Vm::faultHandler(regs*)+0x670>
c0015bd8:	8d 46 ff             	lea    eax,[esi-0x1]
c0015bdb:	3c 05                	cmp    al,0x5
c0015bdd:	77 24                	ja     c0015c03 <Vm::faultHandler(regs*)+0x474>
c0015bdf:	0f b6 c0             	movzx  eax,al
c0015be2:	ff 24 85 80 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff80]
c0015be9:	0f b7 fd             	movzx  edi,bp
c0015bec:	eb 15                	jmp    c0015c03 <Vm::faultHandler(regs*)+0x474>
c0015bee:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0015bf2:	eb 0f                	jmp    c0015c03 <Vm::faultHandler(regs*)+0x474>
c0015bf4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0015bf8:	eb 09                	jmp    c0015c03 <Vm::faultHandler(regs*)+0x474>
c0015bfa:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0015bfe:	eb 03                	jmp    c0015c03 <Vm::faultHandler(regs*)+0x474>
c0015c00:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0015c03:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015c06:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015c0b:	74 29                	je     c0015c36 <Vm::faultHandler(regs*)+0x4a7>
c0015c0d:	3d ff ff 00 00       	cmp    eax,0xffff
c0015c12:	76 22                	jbe    c0015c36 <Vm::faultHandler(regs*)+0x4a7>
c0015c14:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015c18:	50                   	push   eax
c0015c19:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015c1d:	50                   	push   eax
c0015c1e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015c22:	50                   	push   eax
c0015c23:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015c27:	50                   	push   eax
c0015c28:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015c2c:	50                   	push   eax
c0015c2d:	6a 6e                	push   0x6e
c0015c2f:	6a 6e                	push   0x6e
c0015c31:	e9 8c 00 00 00       	jmp    c0015cc2 <Vm::faultHandler(regs*)+0x533>
c0015c36:	0f b7 c0             	movzx  eax,ax
c0015c39:	52                   	push   edx
c0015c3a:	52                   	push   edx
c0015c3b:	50                   	push   eax
c0015c3c:	57                   	push   edi
c0015c3d:	e8 d9 fa ff ff       	call   c001571b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0015c42:	59                   	pop    ecx
c0015c43:	0f b6 c0             	movzx  eax,al
c0015c46:	5e                   	pop    esi
c0015c47:	50                   	push   eax
c0015c48:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015c4c:	50                   	push   eax
c0015c4d:	e8 92 f6 ff ff       	call   c00152e4 <Vm::outbv(unsigned short, unsigned char)>
c0015c52:	83 c4 10             	add    esp,0x10
c0015c55:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015c58:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015c5c:	74 03                	je     c0015c61 <Vm::faultHandler(regs*)+0x4d2>
c0015c5e:	48                   	dec    eax
c0015c5f:	eb 01                	jmp    c0015c62 <Vm::faultHandler(regs*)+0x4d3>
c0015c61:	40                   	inc    eax
c0015c62:	0f b7 c0             	movzx  eax,ax
c0015c65:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0015c68:	e9 92 01 00 00       	jmp    c0015dff <Vm::faultHandler(regs*)+0x670>
c0015c6d:	8d 46 ff             	lea    eax,[esi-0x1]
c0015c70:	3c 05                	cmp    al,0x5
c0015c72:	77 1f                	ja     c0015c93 <Vm::faultHandler(regs*)+0x504>
c0015c74:	0f b6 c0             	movzx  eax,al
c0015c77:	ff 24 85 98 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff68]
c0015c7e:	89 ef                	mov    edi,ebp
c0015c80:	eb 11                	jmp    c0015c93 <Vm::faultHandler(regs*)+0x504>
c0015c82:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0015c85:	eb 0c                	jmp    c0015c93 <Vm::faultHandler(regs*)+0x504>
c0015c87:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0015c8a:	eb 07                	jmp    c0015c93 <Vm::faultHandler(regs*)+0x504>
c0015c8c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0015c8f:	eb 02                	jmp    c0015c93 <Vm::faultHandler(regs*)+0x504>
c0015c91:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0015c93:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0015c96:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015c9b:	74 37                	je     c0015cd4 <Vm::faultHandler(regs*)+0x545>
c0015c9d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0015ca3:	76 2f                	jbe    c0015cd4 <Vm::faultHandler(regs*)+0x545>
c0015ca5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015ca9:	50                   	push   eax
c0015caa:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015cae:	50                   	push   eax
c0015caf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015cb3:	50                   	push   eax
c0015cb4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015cb8:	50                   	push   eax
c0015cb9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015cbd:	50                   	push   eax
c0015cbe:	6a 6f                	push   0x6f
c0015cc0:	6a 6f                	push   0x6f
c0015cc2:	68 26 00 02 c0       	push   0xc0020026
c0015cc7:	e8 24 5c ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0015ccc:	83 c4 20             	add    esp,0x20
c0015ccf:	e9 86 01 00 00       	jmp    c0015e5a <Vm::faultHandler(regs*)+0x6cb>
c0015cd4:	0f b7 d7             	movzx  edx,di
c0015cd7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0015cda:	0f b7 c6             	movzx  eax,si
c0015cdd:	81 e1 00 04 00 00    	and    ecx,0x400
c0015ce3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0015ce6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015ceb:	74 1d                	je     c0015d0a <Vm::faultHandler(regs*)+0x57b>
c0015ced:	55                   	push   ebp
c0015cee:	55                   	push   ebp
c0015cef:	50                   	push   eax
c0015cf0:	52                   	push   edx
c0015cf1:	e8 48 fa ff ff       	call   c001573e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0015cf6:	83 c4 10             	add    esp,0x10
c0015cf9:	89 fa                	mov    edx,edi
c0015cfb:	ef                   	out    dx,eax
c0015cfc:	85 c9                	test   ecx,ecx
c0015cfe:	74 05                	je     c0015d05 <Vm::faultHandler(regs*)+0x576>
c0015d00:	83 ee 04             	sub    esi,0x4
c0015d03:	eb 21                	jmp    c0015d26 <Vm::faultHandler(regs*)+0x597>
c0015d05:	83 c6 04             	add    esi,0x4
c0015d08:	eb 1c                	jmp    c0015d26 <Vm::faultHandler(regs*)+0x597>
c0015d0a:	55                   	push   ebp
c0015d0b:	55                   	push   ebp
c0015d0c:	50                   	push   eax
c0015d0d:	52                   	push   edx
c0015d0e:	e8 19 fa ff ff       	call   c001572c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0015d13:	83 c4 10             	add    esp,0x10
c0015d16:	89 fa                	mov    edx,edi
c0015d18:	66 ef                	out    dx,ax
c0015d1a:	85 c9                	test   ecx,ecx
c0015d1c:	74 05                	je     c0015d23 <Vm::faultHandler(regs*)+0x594>
c0015d1e:	83 ee 02             	sub    esi,0x2
c0015d21:	eb 03                	jmp    c0015d26 <Vm::faultHandler(regs*)+0x597>
c0015d23:	83 c6 02             	add    esi,0x2
c0015d26:	81 e6 ff ff 00 00    	and    esi,0xffff
c0015d2c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0015d2f:	e9 cb 00 00 00       	jmp    c0015dff <Vm::faultHandler(regs*)+0x670>
c0015d34:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015d3b:	83 ec 0c             	sub    esp,0xc
c0015d3e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015d42:	50                   	push   eax
c0015d43:	e8 89 f5 ff ff       	call   c00152d1 <Vm::inbv(unsigned short)>
c0015d48:	0f b6 c0             	movzx  eax,al
c0015d4b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015d4e:	eb 3f                	jmp    c0015d8f <Vm::faultHandler(regs*)+0x600>
c0015d50:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015d55:	74 07                	je     c0015d5e <Vm::faultHandler(regs*)+0x5cf>
c0015d57:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015d5b:	ed                   	in     eax,dx
c0015d5c:	eb 14                	jmp    c0015d72 <Vm::faultHandler(regs*)+0x5e3>
c0015d5e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0015d61:	66 31 f6             	xor    si,si
c0015d64:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0015d67:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015d6b:	66 ed                	in     ax,dx
c0015d6d:	0f b7 c0             	movzx  eax,ax
c0015d70:	09 f0                	or     eax,esi
c0015d72:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015d75:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015d79:	e9 84 00 00 00       	jmp    c0015e02 <Vm::faultHandler(regs*)+0x673>
c0015d7e:	52                   	push   edx
c0015d7f:	52                   	push   edx
c0015d80:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015d84:	50                   	push   eax
c0015d85:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015d89:	50                   	push   eax
c0015d8a:	e8 55 f5 ff ff       	call   c00152e4 <Vm::outbv(unsigned short, unsigned char)>
c0015d8f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015d93:	eb 53                	jmp    c0015de8 <Vm::faultHandler(regs*)+0x659>
c0015d95:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015d98:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015d9c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015da1:	74 03                	je     c0015da6 <Vm::faultHandler(regs*)+0x617>
c0015da3:	ef                   	out    dx,eax
c0015da4:	eb cf                	jmp    c0015d75 <Vm::faultHandler(regs*)+0x5e6>
c0015da6:	66 ef                	out    dx,ax
c0015da8:	eb cb                	jmp    c0015d75 <Vm::faultHandler(regs*)+0x5e6>
c0015daa:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015db1:	83 ec 0c             	sub    esp,0xc
c0015db4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015db8:	50                   	push   eax
c0015db9:	e8 13 f5 ff ff       	call   c00152d1 <Vm::inbv(unsigned short)>
c0015dbe:	0f b6 c0             	movzx  eax,al
c0015dc1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015dc4:	eb 1f                	jmp    c0015de5 <Vm::faultHandler(regs*)+0x656>
c0015dc6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015dc9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015dce:	74 03                	je     c0015dd3 <Vm::faultHandler(regs*)+0x644>
c0015dd0:	ed                   	in     eax,dx
c0015dd1:	eb 0d                	jmp    c0015de0 <Vm::faultHandler(regs*)+0x651>
c0015dd3:	66 ed                	in     ax,dx
c0015dd5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0015dd8:	0f b7 c0             	movzx  eax,ax
c0015ddb:	66 31 d2             	xor    dx,dx
c0015dde:	09 d0                	or     eax,edx
c0015de0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015de3:	eb 1a                	jmp    c0015dff <Vm::faultHandler(regs*)+0x670>
c0015de5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015de8:	83 c4 10             	add    esp,0x10
c0015deb:	eb 15                	jmp    c0015e02 <Vm::faultHandler(regs*)+0x673>
c0015ded:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015df0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015df3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015df8:	74 03                	je     c0015dfd <Vm::faultHandler(regs*)+0x66e>
c0015dfa:	ef                   	out    dx,eax
c0015dfb:	eb 02                	jmp    c0015dff <Vm::faultHandler(regs*)+0x670>
c0015dfd:	66 ef                	out    dx,ax
c0015dff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015e02:	b0 01                	mov    al,0x1
c0015e04:	eb 56                	jmp    c0015e5c <Vm::faultHandler(regs*)+0x6cd>
c0015e06:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015e0a:	50                   	push   eax
c0015e0b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015e0f:	50                   	push   eax
c0015e10:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015e14:	50                   	push   eax
c0015e15:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015e19:	50                   	push   eax
c0015e1a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015e1e:	50                   	push   eax
c0015e1f:	52                   	push   edx
c0015e20:	52                   	push   edx
c0015e21:	68 53 00 02 c0       	push   0xc0020053
c0015e26:	e8 c5 5a ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0015e2b:	83 c4 20             	add    esp,0x20
c0015e2e:	83 ec 0c             	sub    esp,0xc
c0015e31:	6a 60                	push   0x60
c0015e33:	e8 99 f4 ff ff       	call   c00152d1 <Vm::inbv(unsigned short)>
c0015e38:	83 c4 10             	add    esp,0x10
c0015e3b:	3c 1c                	cmp    al,0x1c
c0015e3d:	74 04                	je     c0015e43 <Vm::faultHandler(regs*)+0x6b4>
c0015e3f:	3c 5a                	cmp    al,0x5a
c0015e41:	75 eb                	jne    c0015e2e <Vm::faultHandler(regs*)+0x69f>
c0015e43:	3c 5a                	cmp    al,0x5a
c0015e45:	74 04                	je     c0015e4b <Vm::faultHandler(regs*)+0x6bc>
c0015e47:	3c 1c                	cmp    al,0x1c
c0015e49:	75 0f                	jne    c0015e5a <Vm::faultHandler(regs*)+0x6cb>
c0015e4b:	83 ec 0c             	sub    esp,0xc
c0015e4e:	6a 60                	push   0x60
c0015e50:	e8 7c f4 ff ff       	call   c00152d1 <Vm::inbv(unsigned short)>
c0015e55:	83 c4 10             	add    esp,0x10
c0015e58:	eb e9                	jmp    c0015e43 <Vm::faultHandler(regs*)+0x6b4>
c0015e5a:	31 c0                	xor    eax,eax
c0015e5c:	83 c4 1c             	add    esp,0x1c
c0015e5f:	5b                   	pop    ebx
c0015e60:	5e                   	pop    esi
c0015e61:	5f                   	pop    edi
c0015e62:	5d                   	pop    ebp
c0015e63:	c3                   	ret    

c0015e64 <noCopro(unsigned long)>:
c0015e64:	c3                   	ret    

c0015e65 <nmiHandler(regs*, void*)>:
c0015e65:	83 ec 0c             	sub    esp,0xc
c0015e68:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c0015e6d:	83 ec 0c             	sub    esp,0xc
c0015e70:	50                   	push   eax
c0015e71:	e8 10 25 ff ff       	call   c0008386 <Computer::handleNMI()>
c0015e76:	83 c4 10             	add    esp,0x10
c0015e79:	90                   	nop
c0015e7a:	83 c4 0c             	add    esp,0xc
c0015e7d:	c3                   	ret    

c0015e7e <doubleFault(regs*, void*)>:
c0015e7e:	55                   	push   ebp
c0015e7f:	89 e5                	mov    ebp,esp
c0015e81:	83 ec 08             	sub    esp,0x8
c0015e84:	83 ec 0c             	sub    esp,0xc
c0015e87:	68 b0 00 02 c0       	push   0xc00200b0
c0015e8c:	e8 ae b5 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0015e91:	83 c4 10             	add    esp,0x10
c0015e94:	90                   	nop
c0015e95:	c9                   	leave  
c0015e96:	c3                   	ret    

c0015e97 <displayDebugInfo(regs*)>:
c0015e97:	83 ec 1c             	sub    esp,0x1c
c0015e9a:	0f 20 c0             	mov    eax,cr0
c0015e9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ea1:	0f 20 d0             	mov    eax,cr2
c0015ea4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015ea8:	0f 20 d8             	mov    eax,cr3
c0015eab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015eaf:	0f 20 e0             	mov    eax,cr4
c0015eb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0015eb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eb9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015ebc:	83 ec 08             	sub    esp,0x8
c0015ebf:	50                   	push   eax
c0015ec0:	68 cc 00 02 c0       	push   0xc00200cc
c0015ec5:	e8 26 5a ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0015eca:	83 c4 10             	add    esp,0x10
c0015ecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ed1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015ed4:	83 ec 08             	sub    esp,0x8
c0015ed7:	50                   	push   eax
c0015ed8:	68 bd 00 02 c0       	push   0xc00200bd
c0015edd:	e8 0e 5a ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0015ee2:	83 c4 10             	add    esp,0x10
c0015ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ee9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015eec:	83 ec 08             	sub    esp,0x8
c0015eef:	50                   	push   eax
c0015ef0:	68 c8 00 02 c0       	push   0xc00200c8
c0015ef5:	e8 f6 59 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0015efa:	83 c4 10             	add    esp,0x10
c0015efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f01:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015f04:	83 ec 08             	sub    esp,0x8
c0015f07:	50                   	push   eax
c0015f08:	68 d7 00 02 c0       	push   0xc00200d7
c0015f0d:	e8 de 59 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0015f12:	83 c4 10             	add    esp,0x10
c0015f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f19:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0015f1c:	83 ec 08             	sub    esp,0x8
c0015f1f:	50                   	push   eax
c0015f20:	68 e2 00 02 c0       	push   0xc00200e2
c0015f25:	e8 c6 59 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0015f2a:	83 c4 10             	add    esp,0x10
c0015f2d:	83 ec 08             	sub    esp,0x8
c0015f30:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f34:	68 ed 00 02 c0       	push   0xc00200ed
c0015f39:	e8 b2 59 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0015f3e:	83 c4 10             	add    esp,0x10
c0015f41:	83 ec 08             	sub    esp,0x8
c0015f44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015f48:	68 f8 00 02 c0       	push   0xc00200f8
c0015f4d:	e8 9e 59 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0015f52:	83 c4 10             	add    esp,0x10
c0015f55:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0015f5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f60:	83 ec 0c             	sub    esp,0xc
c0015f63:	50                   	push   eax
c0015f64:	e8 28 39 ff ff       	call   c0009891 <setActiveTerminal(VgaText*)>
c0015f69:	83 c4 10             	add    esp,0x10
c0015f6c:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0015f71:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f77:	83 ec 08             	sub    esp,0x8
c0015f7a:	68 03 01 02 c0       	push   0xc0020103
c0015f7f:	50                   	push   eax
c0015f80:	e8 4b 3c ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c0015f85:	83 c4 10             	add    esp,0x10
c0015f88:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0015f8d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f93:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015f98:	8b 12                	mov    edx,DWORD PTR [edx]
c0015f9a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015f9d:	83 c2 0c             	add    edx,0xc
c0015fa0:	83 ec 08             	sub    esp,0x8
c0015fa3:	52                   	push   edx
c0015fa4:	50                   	push   eax
c0015fa5:	e8 26 3c ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c0015faa:	83 c4 10             	add    esp,0x10
c0015fad:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0015fb2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fb8:	83 ec 08             	sub    esp,0x8
c0015fbb:	68 0c 01 02 c0       	push   0xc002010c
c0015fc0:	50                   	push   eax
c0015fc1:	e8 0a 3c ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c0015fc6:	83 c4 10             	add    esp,0x10
c0015fc9:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0015fce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fd4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015fd8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015fdb:	83 ec 08             	sub    esp,0x8
c0015fde:	52                   	push   edx
c0015fdf:	50                   	push   eax
c0015fe0:	e8 a5 3b ff ff       	call   c0009b8a <VgaText::putx(unsigned int)>
c0015fe5:	83 c4 10             	add    esp,0x10
c0015fe8:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0015fed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ff3:	83 ec 08             	sub    esp,0x8
c0015ff6:	68 14 01 02 c0       	push   0xc0020114
c0015ffb:	50                   	push   eax
c0015ffc:	e8 cf 3b ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c0016001:	83 c4 10             	add    esp,0x10
c0016004:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0016009:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001600f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016013:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016016:	83 ec 08             	sub    esp,0x8
c0016019:	52                   	push   edx
c001601a:	50                   	push   eax
c001601b:	e8 6a 3b ff ff       	call   c0009b8a <VgaText::putx(unsigned int)>
c0016020:	83 c4 10             	add    esp,0x10
c0016023:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0016028:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001602e:	83 ec 08             	sub    esp,0x8
c0016031:	68 1c 01 02 c0       	push   0xc002011c
c0016036:	50                   	push   eax
c0016037:	e8 94 3b ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c001603c:	83 c4 10             	add    esp,0x10
c001603f:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0016044:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001604a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001604e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016051:	83 ec 08             	sub    esp,0x8
c0016054:	52                   	push   edx
c0016055:	50                   	push   eax
c0016056:	e8 2f 3b ff ff       	call   c0009b8a <VgaText::putx(unsigned int)>
c001605b:	83 c4 10             	add    esp,0x10
c001605e:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0016063:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016069:	83 ec 08             	sub    esp,0x8
c001606c:	68 24 01 02 c0       	push   0xc0020124
c0016071:	50                   	push   eax
c0016072:	e8 59 3b ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c0016077:	83 c4 10             	add    esp,0x10
c001607a:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c001607f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016085:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016089:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001608c:	83 ec 08             	sub    esp,0x8
c001608f:	52                   	push   edx
c0016090:	50                   	push   eax
c0016091:	e8 f4 3a ff ff       	call   c0009b8a <VgaText::putx(unsigned int)>
c0016096:	83 c4 10             	add    esp,0x10
c0016099:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c001609e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00160a4:	83 ec 08             	sub    esp,0x8
c00160a7:	68 2c 01 02 c0       	push   0xc002012c
c00160ac:	50                   	push   eax
c00160ad:	e8 1e 3b ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c00160b2:	83 c4 10             	add    esp,0x10
c00160b5:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c00160ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00160c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00160c4:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00160c7:	83 ec 08             	sub    esp,0x8
c00160ca:	52                   	push   edx
c00160cb:	50                   	push   eax
c00160cc:	e8 b9 3a ff ff       	call   c0009b8a <VgaText::putx(unsigned int)>
c00160d1:	83 c4 10             	add    esp,0x10
c00160d4:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c00160d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00160df:	83 ec 08             	sub    esp,0x8
c00160e2:	68 34 01 02 c0       	push   0xc0020134
c00160e7:	50                   	push   eax
c00160e8:	e8 e3 3a ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c00160ed:	83 c4 10             	add    esp,0x10
c00160f0:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c00160f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00160fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00160ff:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016102:	83 ec 08             	sub    esp,0x8
c0016105:	52                   	push   edx
c0016106:	50                   	push   eax
c0016107:	e8 7e 3a ff ff       	call   c0009b8a <VgaText::putx(unsigned int)>
c001610c:	83 c4 10             	add    esp,0x10
c001610f:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0016114:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001611a:	83 ec 08             	sub    esp,0x8
c001611d:	68 3c 01 02 c0       	push   0xc002013c
c0016122:	50                   	push   eax
c0016123:	e8 a8 3a ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c0016128:	83 c4 10             	add    esp,0x10
c001612b:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0016130:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016136:	83 ec 08             	sub    esp,0x8
c0016139:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001613d:	50                   	push   eax
c001613e:	e8 47 3a ff ff       	call   c0009b8a <VgaText::putx(unsigned int)>
c0016143:	83 c4 10             	add    esp,0x10
c0016146:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c001614b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016151:	83 ec 08             	sub    esp,0x8
c0016154:	68 45 01 02 c0       	push   0xc0020145
c0016159:	50                   	push   eax
c001615a:	e8 71 3a ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c001615f:	83 c4 10             	add    esp,0x10
c0016162:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0016167:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001616d:	83 ec 08             	sub    esp,0x8
c0016170:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016174:	50                   	push   eax
c0016175:	e8 10 3a ff ff       	call   c0009b8a <VgaText::putx(unsigned int)>
c001617a:	83 c4 10             	add    esp,0x10
c001617d:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0016182:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016188:	83 ec 08             	sub    esp,0x8
c001618b:	68 4d 01 02 c0       	push   0xc002014d
c0016190:	50                   	push   eax
c0016191:	e8 3a 3a ff ff       	call   c0009bd0 <VgaText::puts(char const*)>
c0016196:	83 c4 10             	add    esp,0x10
c0016199:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c001619e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161a4:	83 ec 08             	sub    esp,0x8
c00161a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00161ab:	50                   	push   eax
c00161ac:	e8 d9 39 ff ff       	call   c0009b8a <VgaText::putx(unsigned int)>
c00161b1:	83 c4 10             	add    esp,0x10
c00161b4:	fa                   	cli    
c00161b5:	f4                   	hlt    
c00161b6:	eb fe                	jmp    c00161b6 <displayDebugInfo(regs*)+0x31f>

c00161b8 <displayProgramFault(char const*)>:
c00161b8:	83 ec 0c             	sub    esp,0xc
c00161bb:	83 ec 0c             	sub    esp,0xc
c00161be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161c2:	e8 29 57 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c00161c7:	83 c4 10             	add    esp,0x10
c00161ca:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00161cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00161d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00161d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161da:	85 c0                	test   eax,eax
c00161dc:	74 21                	je     c00161ff <displayProgramFault(char const*)+0x47>
c00161de:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00161e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00161e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00161e8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161ee:	6a 04                	push   0x4
c00161f0:	6a 0f                	push   0xf
c00161f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161f6:	50                   	push   eax
c00161f7:	e8 46 3a ff ff       	call   c0009c42 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00161fc:	83 c4 10             	add    esp,0x10
c00161ff:	90                   	nop
c0016200:	83 c4 0c             	add    esp,0xc
c0016203:	c3                   	ret    

c0016204 <gpFault(regs*, void*)>:
c0016204:	83 ec 1c             	sub    esp,0x1c
c0016207:	c7 05 50 52 02 c0 8f 57 01 c0 	mov    DWORD PTR ds:0xc0025250,0xc001578f
c0016211:	a1 50 52 02 c0       	mov    eax,ds:0xc0025250
c0016216:	85 c0                	test   eax,eax
c0016218:	74 1c                	je     c0016236 <gpFault(regs*, void*)+0x32>
c001621a:	a1 50 52 02 c0       	mov    eax,ds:0xc0025250
c001621f:	83 ec 0c             	sub    esp,0xc
c0016222:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016226:	ff d0                	call   eax
c0016228:	83 c4 10             	add    esp,0x10
c001622b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001622f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0016234:	75 2e                	jne    c0016264 <gpFault(regs*, void*)+0x60>
c0016236:	83 ec 0c             	sub    esp,0xc
c0016239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001623d:	e8 55 fc ff ff       	call   c0015e97 <displayDebugInfo(regs*)>
c0016242:	83 c4 10             	add    esp,0x10
c0016245:	83 ec 0c             	sub    esp,0xc
c0016248:	68 55 01 02 c0       	push   0xc0020155
c001624d:	e8 66 ff ff ff       	call   c00161b8 <displayProgramFault(char const*)>
c0016252:	83 c4 10             	add    esp,0x10
c0016255:	83 ec 0c             	sub    esp,0xc
c0016258:	6a 00                	push   0x0
c001625a:	e8 25 ef ff ff       	call   c0015184 <Thr::terminateFromIRQ(int)>
c001625f:	83 c4 10             	add    esp,0x10
c0016262:	eb 01                	jmp    c0016265 <gpFault(regs*, void*)+0x61>
c0016264:	90                   	nop
c0016265:	83 c4 1c             	add    esp,0x1c
c0016268:	c3                   	ret    

c0016269 <pgFault(regs*, void*)>:
c0016269:	83 ec 1c             	sub    esp,0x1c
c001626c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016270:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016273:	0f 20 d0             	mov    eax,cr2
c0016276:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001627a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001627e:	83 ec 04             	sub    esp,0x4
c0016281:	52                   	push   edx
c0016282:	50                   	push   eax
c0016283:	68 c0 01 02 c0       	push   0xc00201c0
c0016288:	e8 63 56 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001628d:	83 c4 10             	add    esp,0x10
c0016290:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016295:	8b 00                	mov    eax,DWORD PTR [eax]
c0016297:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001629a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00162a0:	0f 20 d2             	mov    edx,cr2
c00162a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00162a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162ab:	83 ec 08             	sub    esp,0x8
c00162ae:	52                   	push   edx
c00162af:	50                   	push   eax
c00162b0:	e8 6d 52 ff ff       	call   c000b522 <VAS::tryLoadBackOffDisk(unsigned long)>
c00162b5:	83 c4 10             	add    esp,0x10
c00162b8:	84 c0                	test   al,al
c00162ba:	75 2e                	jne    c00162ea <pgFault(regs*, void*)+0x81>
c00162bc:	83 ec 0c             	sub    esp,0xc
c00162bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162c3:	e8 cf fb ff ff       	call   c0015e97 <displayDebugInfo(regs*)>
c00162c8:	83 c4 10             	add    esp,0x10
c00162cb:	83 ec 0c             	sub    esp,0xc
c00162ce:	68 6e 01 02 c0       	push   0xc002016e
c00162d3:	e8 e0 fe ff ff       	call   c00161b8 <displayProgramFault(char const*)>
c00162d8:	83 c4 10             	add    esp,0x10
c00162db:	83 ec 0c             	sub    esp,0xc
c00162de:	6a 00                	push   0x0
c00162e0:	e8 9f ee ff ff       	call   c0015184 <Thr::terminateFromIRQ(int)>
c00162e5:	83 c4 10             	add    esp,0x10
c00162e8:	eb 01                	jmp    c00162eb <pgFault(regs*, void*)+0x82>
c00162ea:	90                   	nop
c00162eb:	83 c4 1c             	add    esp,0x1c
c00162ee:	c3                   	ret    

c00162ef <otherISRHandler(regs*, void*)>:
c00162ef:	83 ec 0c             	sub    esp,0xc
c00162f2:	83 ec 0c             	sub    esp,0xc
c00162f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162f9:	e8 99 fb ff ff       	call   c0015e97 <displayDebugInfo(regs*)>
c00162fe:	83 c4 10             	add    esp,0x10
c0016301:	83 ec 0c             	sub    esp,0xc
c0016304:	68 e8 01 02 c0       	push   0xc00201e8
c0016309:	e8 aa fe ff ff       	call   c00161b8 <displayProgramFault(char const*)>
c001630e:	83 c4 10             	add    esp,0x10
c0016311:	83 ec 0c             	sub    esp,0xc
c0016314:	6a 00                	push   0x0
c0016316:	e8 69 ee ff ff       	call   c0015184 <Thr::terminateFromIRQ(int)>
c001631b:	83 c4 10             	add    esp,0x10
c001631e:	90                   	nop
c001631f:	83 c4 0c             	add    esp,0xc
c0016322:	c3                   	ret    

c0016323 <opcodeFault(regs*, void*)>:
c0016323:	55                   	push   ebp
c0016324:	89 e5                	mov    ebp,esp
c0016326:	83 ec 08             	sub    esp,0x8
c0016329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001632c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001632f:	83 ec 08             	sub    esp,0x8
c0016332:	50                   	push   eax
c0016333:	68 79 01 02 c0       	push   0xc0020179
c0016338:	e8 b3 55 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001633d:	83 c4 10             	add    esp,0x10
c0016340:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c0016345:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001634b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016351:	84 c0                	test   al,al
c0016353:	74 21                	je     c0016376 <opcodeFault(regs*, void*)+0x53>
c0016355:	83 ec 0c             	sub    esp,0xc
c0016358:	68 10 02 02 c0       	push   0xc0020210
c001635d:	e8 8e 55 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0016362:	83 c4 10             	add    esp,0x10
c0016365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016368:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001636b:	8d 50 19             	lea    edx,[eax+0x19]
c001636e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016371:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016374:	eb 2b                	jmp    c00163a1 <opcodeFault(regs*, void*)+0x7e>
c0016376:	83 ec 0c             	sub    esp,0xc
c0016379:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001637c:	e8 16 fb ff ff       	call   c0015e97 <displayDebugInfo(regs*)>
c0016381:	83 c4 10             	add    esp,0x10
c0016384:	83 ec 0c             	sub    esp,0xc
c0016387:	68 87 01 02 c0       	push   0xc0020187
c001638c:	e8 27 fe ff ff       	call   c00161b8 <displayProgramFault(char const*)>
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	83 ec 0c             	sub    esp,0xc
c0016397:	6a 00                	push   0x0
c0016399:	e8 e6 ed ff ff       	call   c0015184 <Thr::terminateFromIRQ(int)>
c001639e:	83 c4 10             	add    esp,0x10
c00163a1:	c9                   	leave  
c00163a2:	c3                   	ret    

c00163a3 <i386SaveCoprocessor(void*)>:
c00163a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163a7:	83 c0 3f             	add    eax,0x3f
c00163aa:	83 e0 c0             	and    eax,0xffffffc0
c00163ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163b1:	ff 25 4c 52 02 c0    	jmp    DWORD PTR ds:0xc002524c

c00163b7 <i386LoadCoprocessor(void*)>:
c00163b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163bb:	83 c0 3f             	add    eax,0x3f
c00163be:	83 e0 c0             	and    eax,0xffffffc0
c00163c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163c5:	ff 25 48 52 02 c0    	jmp    DWORD PTR ds:0xc0025248

c00163cb <x87EmulHandler(regs*, void*)>:
c00163cb:	53                   	push   ebx
c00163cc:	83 ec 08             	sub    esp,0x8
c00163cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00163d8:	74 10                	je     c00163ea <x87EmulHandler(regs*, void*)+0x1f>
c00163da:	83 ec 0c             	sub    esp,0xc
c00163dd:	68 94 01 02 c0       	push   0xc0020194
c00163e2:	e8 58 b0 ff ff       	call   c001143f <Krnl::panic(char const*)>
c00163e7:	83 c4 10             	add    esp,0x10
c00163ea:	0f 20 c0             	mov    eax,cr0
c00163ed:	a8 08                	test   al,0x8
c00163ef:	74 59                	je     c001644a <x87EmulHandler(regs*, void*)+0x7f>
c00163f1:	0f 06                	clts   
c00163f3:	a1 44 52 02 c0       	mov    eax,ds:0xc0025244
c00163f8:	85 c0                	test   eax,eax
c00163fa:	74 0e                	je     c001640a <x87EmulHandler(regs*, void*)+0x3f>
c00163fc:	83 ec 0c             	sub    esp,0xc
c00163ff:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016402:	e8 9c ff ff ff       	call   c00163a3 <i386SaveCoprocessor(void*)>
c0016407:	83 c4 10             	add    esp,0x10
c001640a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016410:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016414:	75 12                	jne    c0016428 <x87EmulHandler(regs*, void*)+0x5d>
c0016416:	83 ec 0c             	sub    esp,0xc
c0016419:	68 40 02 00 00       	push   0x240
c001641e:	e8 3e 27 ff ff       	call   c0008b61 <malloc>
c0016423:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016426:	eb 10                	jmp    c0016438 <x87EmulHandler(regs*, void*)+0x6d>
c0016428:	83 ec 0c             	sub    esp,0xc
c001642b:	a1 44 52 02 c0       	mov    eax,ds:0xc0025244
c0016430:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016433:	e8 7f ff ff ff       	call   c00163b7 <i386LoadCoprocessor(void*)>
c0016438:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001643d:	83 c4 10             	add    esp,0x10
c0016440:	a3 44 52 02 c0       	mov    ds:0xc0025244,eax
c0016445:	83 c4 08             	add    esp,0x8
c0016448:	5b                   	pop    ebx
c0016449:	c3                   	ret    
c001644a:	83 ec 0c             	sub    esp,0xc
c001644d:	68 a8 01 02 c0       	push   0xc00201a8
c0016452:	e8 99 54 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0016457:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001645f:	83 c4 18             	add    esp,0x18
c0016462:	5b                   	pop    ebx
c0016463:	e9 1c ed ff ff       	jmp    c0015184 <Thr::terminateFromIRQ(int)>

c0016468 <HalInitialiseCoprocessor()>:
c0016468:	83 ec 10             	sub    esp,0x10
c001646b:	c7 05 44 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025244,0x0
c0016475:	6a 00                	push   0x0
c0016477:	68 cb 63 01 c0       	push   0xc00163cb
c001647c:	6a 07                	push   0x7
c001647e:	e8 e1 6d ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016483:	e8 d8 6a 00 00       	call   c001cf60 <avxDetect>
c0016488:	83 c4 10             	add    esp,0x10
c001648b:	85 c0                	test   eax,eax
c001648d:	74 1c                	je     c00164ab <HalInitialiseCoprocessor()+0x43>
c001648f:	c7 05 4c 52 02 c0 8a cf 01 c0 	mov    DWORD PTR ds:0xc002524c,0xc001cf8a
c0016499:	c7 05 48 52 02 c0 9b cf 01 c0 	mov    DWORD PTR ds:0xc0025248,0xc001cf9b
c00164a3:	83 c4 0c             	add    esp,0xc
c00164a6:	e9 01 6b 00 00       	jmp    c001cfac <avxInit>
c00164ab:	e8 30 6d 00 00       	call   c001d1e0 <absolutelyNoChanceInHell>
c00164b0:	85 c0                	test   eax,eax
c00164b2:	74 1c                	je     c00164d0 <HalInitialiseCoprocessor()+0x68>
c00164b4:	c7 05 4c 52 02 c0 f8 d1 01 c0 	mov    DWORD PTR ds:0xc002524c,0xc001d1f8
c00164be:	c7 05 48 52 02 c0 00 d2 01 c0 	mov    DWORD PTR ds:0xc0025248,0xc001d200
c00164c8:	83 c4 0c             	add    esp,0xc
c00164cb:	e9 38 6d 00 00       	jmp    c001d208 <sseInit>
c00164d0:	e8 51 6d 00 00       	call   c001d226 <x87Detect>
c00164d5:	85 c0                	test   eax,eax
c00164d7:	74 1c                	je     c00164f5 <HalInitialiseCoprocessor()+0x8d>
c00164d9:	c7 05 4c 52 02 c0 41 d2 01 c0 	mov    DWORD PTR ds:0xc002524c,0xc001d241
c00164e3:	c7 05 48 52 02 c0 48 d2 01 c0 	mov    DWORD PTR ds:0xc0025248,0xc001d248
c00164ed:	83 c4 0c             	add    esp,0xc
c00164f0:	e9 5a 6d 00 00       	jmp    c001d24f <x87Init>
c00164f5:	c7 05 4c 52 02 c0 64 5e 01 c0 	mov    DWORD PTR ds:0xc002524c,0xc0015e64
c00164ff:	c7 05 48 52 02 c0 64 5e 01 c0 	mov    DWORD PTR ds:0xc0025248,0xc0015e64
c0016509:	0f 20 c0             	mov    eax,cr0
c001650c:	83 c8 04             	or     eax,0x4
c001650f:	0f 22 c0             	mov    cr0,eax
c0016512:	83 c4 0c             	add    esp,0xc
c0016515:	c3                   	ret    

c0016516 <HalPanic(char const*)>:
c0016516:	e9 24 af ff ff       	jmp    c001143f <Krnl::panic(char const*)>

c001651b <HalQueryPerformanceCounter()>:
c001651b:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c0016520:	31 d2                	xor    edx,edx
c0016522:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016528:	31 c0                	xor    eax,eax
c001652a:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0016531:	74 02                	je     c0016535 <HalQueryPerformanceCounter()+0x1a>
c0016533:	0f 31                	rdtsc  
c0016535:	c3                   	ret    

c0016536 <HalInitialise()>:
c0016536:	53                   	push   ebx
c0016537:	83 ec 08             	sub    esp,0x8
c001653a:	e8 58 6f ff ff       	call   c000d497 <setupINTS()>
c001653f:	80 3d a0 45 02 c0 00 	cmp    BYTE PTR ds:0xc00245a0,0x0
c0016546:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c001654b:	75 07                	jne    c0016554 <HalInitialise()+0x1e>
c001654d:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016554:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001655a:	83 e0 01             	and    eax,0x1
c001655d:	a2 40 52 02 c0       	mov    ds:0xc0025240,al
c0016562:	e8 a9 02 00 00       	call   c0016810 <picOpen()>
c0016567:	80 3d 40 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025240,0x0
c001656e:	74 0a                	je     c001657a <HalInitialise()+0x44>
c0016570:	e8 e3 01 00 00       	call   c0016758 <picDisable()>
c0016575:	e8 5e 63 00 00       	call   c001c8d8 <apicOpen()>
c001657a:	bb 0f 00 00 00       	mov    ebx,0xf
c001657f:	50                   	push   eax
c0016580:	6a 00                	push   0x0
c0016582:	68 ef 62 01 c0       	push   0xc00162ef
c0016587:	6a 00                	push   0x0
c0016589:	e8 d6 6c ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001658e:	83 c4 0c             	add    esp,0xc
c0016591:	6a 00                	push   0x0
c0016593:	68 ef 62 01 c0       	push   0xc00162ef
c0016598:	6a 01                	push   0x1
c001659a:	e8 c5 6c ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001659f:	83 c4 0c             	add    esp,0xc
c00165a2:	6a 00                	push   0x0
c00165a4:	68 65 5e 01 c0       	push   0xc0015e65
c00165a9:	6a 02                	push   0x2
c00165ab:	e8 b4 6c ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165b0:	83 c4 0c             	add    esp,0xc
c00165b3:	6a 00                	push   0x0
c00165b5:	68 ef 62 01 c0       	push   0xc00162ef
c00165ba:	6a 03                	push   0x3
c00165bc:	e8 a3 6c ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165c1:	83 c4 0c             	add    esp,0xc
c00165c4:	6a 00                	push   0x0
c00165c6:	68 ef 62 01 c0       	push   0xc00162ef
c00165cb:	6a 04                	push   0x4
c00165cd:	e8 92 6c ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165d2:	83 c4 0c             	add    esp,0xc
c00165d5:	6a 00                	push   0x0
c00165d7:	68 ef 62 01 c0       	push   0xc00162ef
c00165dc:	6a 05                	push   0x5
c00165de:	e8 81 6c ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165e3:	83 c4 0c             	add    esp,0xc
c00165e6:	6a 00                	push   0x0
c00165e8:	68 23 63 01 c0       	push   0xc0016323
c00165ed:	6a 06                	push   0x6
c00165ef:	e8 70 6c ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165f4:	83 c4 0c             	add    esp,0xc
c00165f7:	6a 00                	push   0x0
c00165f9:	68 7e 5e 01 c0       	push   0xc0015e7e
c00165fe:	6a 08                	push   0x8
c0016600:	e8 5f 6c ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016605:	83 c4 0c             	add    esp,0xc
c0016608:	6a 00                	push   0x0
c001660a:	68 ef 62 01 c0       	push   0xc00162ef
c001660f:	6a 09                	push   0x9
c0016611:	e8 4e 6c ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016616:	83 c4 0c             	add    esp,0xc
c0016619:	6a 00                	push   0x0
c001661b:	68 ef 62 01 c0       	push   0xc00162ef
c0016620:	6a 0a                	push   0xa
c0016622:	e8 3d 6c ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016627:	83 c4 0c             	add    esp,0xc
c001662a:	6a 00                	push   0x0
c001662c:	68 ef 62 01 c0       	push   0xc00162ef
c0016631:	6a 0b                	push   0xb
c0016633:	e8 2c 6c ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016638:	83 c4 0c             	add    esp,0xc
c001663b:	6a 00                	push   0x0
c001663d:	68 04 62 01 c0       	push   0xc0016204
c0016642:	6a 0d                	push   0xd
c0016644:	e8 1b 6c ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016649:	83 c4 0c             	add    esp,0xc
c001664c:	6a 00                	push   0x0
c001664e:	68 69 62 01 c0       	push   0xc0016269
c0016653:	6a 0e                	push   0xe
c0016655:	e8 0a 6c ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001665a:	83 c4 10             	add    esp,0x10
c001665d:	50                   	push   eax
c001665e:	6a 00                	push   0x0
c0016660:	68 ef 62 01 c0       	push   0xc00162ef
c0016665:	53                   	push   ebx
c0016666:	43                   	inc    ebx
c0016667:	e8 f8 6b ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001666c:	83 c4 10             	add    esp,0x10
c001666f:	83 fb 1e             	cmp    ebx,0x1e
c0016672:	75 e9                	jne    c001665d <HalInitialise()+0x127>
c0016674:	50                   	push   eax
c0016675:	6a 00                	push   0x0
c0016677:	68 e5 2d 01 c0       	push   0xc0012de5
c001667c:	6a 60                	push   0x60
c001667e:	e8 e1 6b ff ff       	call   c000d264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016683:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c0016688:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0016692:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0016699:	e8 c3 24 ff ff       	call   c0008b61 <malloc>
c001669e:	89 04 24             	mov    DWORD PTR [esp],eax
c00166a1:	89 c3                	mov    ebx,eax
c00166a3:	e8 30 09 00 00       	call   c0016fd8 <RTC::RTC()>
c00166a8:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00166b2:	5a                   	pop    edx
c00166b3:	59                   	pop    ecx
c00166b4:	53                   	push   ebx
c00166b5:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c00166bb:	e8 70 66 ff ff       	call   c000cd30 <Device::addChild(Device*)>
c00166c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166c2:	6a 00                	push   0x0
c00166c4:	6a 00                	push   0x0
c00166c6:	6a 00                	push   0x0
c00166c8:	53                   	push   ebx
c00166c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166cc:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c00166d1:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00166d7:	83 c4 28             	add    esp,0x28
c00166da:	5b                   	pop    ebx
c00166db:	c3                   	ret    

c00166dc <HalMakeBeep(int)>:
c00166dc:	53                   	push   ebx
c00166dd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00166e1:	85 db                	test   ebx,ebx
c00166e3:	75 07                	jne    c00166ec <HalMakeBeep(int)+0x10>
c00166e5:	e4 61                	in     al,0x61
c00166e7:	83 e0 fc             	and    eax,0xfffffffc
c00166ea:	eb 26                	jmp    c0016712 <HalMakeBeep(int)+0x36>
c00166ec:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00166f1:	99                   	cdq    
c00166f2:	f7 fb                	idiv   ebx
c00166f4:	89 c1                	mov    ecx,eax
c00166f6:	b0 b6                	mov    al,0xb6
c00166f8:	e6 43                	out    0x43,al
c00166fa:	88 c8                	mov    al,cl
c00166fc:	e6 42                	out    0x42,al
c00166fe:	89 c8                	mov    eax,ecx
c0016700:	c1 e8 08             	shr    eax,0x8
c0016703:	e6 42                	out    0x42,al
c0016705:	e4 61                	in     al,0x61
c0016707:	88 c2                	mov    dl,al
c0016709:	83 ca 03             	or     edx,0x3
c001670c:	38 c2                	cmp    dl,al
c001670e:	74 04                	je     c0016714 <HalMakeBeep(int)+0x38>
c0016710:	88 d0                	mov    al,dl
c0016712:	e6 61                	out    0x61,al
c0016714:	5b                   	pop    ebx
c0016715:	c3                   	ret    

c0016716 <HalGetRand()>:
c0016716:	31 c0                	xor    eax,eax
c0016718:	c3                   	ret    

c0016719 <HalEndOfInterrupt(int)>:
c0016719:	80 3d 40 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025240,0x0
c0016720:	74 23                	je     c0016745 <HalEndOfInterrupt(int)+0x2c>
c0016722:	83 ec 14             	sub    esp,0x14
c0016725:	6a 1b                	push   0x1b
c0016727:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c001672d:	e8 6c 1a ff ff       	call   c000819e <Computer::rdmsr(unsigned int)>
c0016732:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016737:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0016741:	83 c4 1c             	add    esp,0x1c
c0016744:	c3                   	ret    
c0016745:	e9 56 02 00 00       	jmp    c00169a0 <picEOI(int)>

c001674a <HalRestart()>:
c001674a:	c3                   	ret    

c001674b <HalShutdown()>:
c001674b:	c3                   	ret    

c001674c <HalSleep()>:
c001674c:	c3                   	ret    
c001674d:	66 90                	xchg   ax,ax
c001674f:	90                   	nop

c0016750 <picIoWait()>:
c0016750:	eb 00                	jmp    c0016752 <picIoWait()+0x2>
c0016752:	eb 00                	jmp    c0016754 <picIoWait()+0x4>
c0016754:	90                   	nop
c0016755:	c3                   	ret    
c0016756:	66 90                	xchg   ax,ax

c0016758 <picDisable()>:
c0016758:	83 ec 10             	sub    esp,0x10
c001675b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0016762:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0016767:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001676b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016770:	ee                   	out    dx,al
c0016771:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0016778:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001677d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016781:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016786:	ee                   	out    dx,al
c0016787:	90                   	nop
c0016788:	83 c4 10             	add    esp,0x10
c001678b:	c3                   	ret    

c001678c <picGetIRQReg(int)>:
c001678c:	83 ec 10             	sub    esp,0x10
c001678f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016793:	25 ff 00 00 00       	and    eax,0xff
c0016798:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001679f:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00167a3:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00167a7:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00167ac:	ee                   	out    dx,al
c00167ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00167b1:	25 ff 00 00 00       	and    eax,0xff
c00167b6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00167bd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00167c1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00167c5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00167ca:	ee                   	out    dx,al
c00167cb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00167d2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00167d7:	89 c2                	mov    edx,eax
c00167d9:	ec                   	in     al,dx
c00167da:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00167de:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00167e2:	25 ff 00 00 00       	and    eax,0xff
c00167e7:	c1 e0 08             	shl    eax,0x8
c00167ea:	89 c1                	mov    ecx,eax
c00167ec:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00167f3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00167f8:	89 c2                	mov    edx,eax
c00167fa:	ec                   	in     al,dx
c00167fb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00167ff:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016803:	25 ff 00 00 00       	and    eax,0xff
c0016808:	09 c8                	or     eax,ecx
c001680a:	83 c4 10             	add    esp,0x10
c001680d:	c3                   	ret    
c001680e:	66 90                	xchg   ax,ax

c0016810 <picOpen()>:
c0016810:	83 ec 50             	sub    esp,0x50
c0016813:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001681a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001681f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016823:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016827:	ee                   	out    dx,al
c0016828:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001682f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016834:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016838:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001683c:	ee                   	out    dx,al
c001683d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0016845:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001684d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0016854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016858:	89 c2                	mov    edx,eax
c001685a:	ec                   	in     al,dx
c001685b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001685f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016863:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0016867:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001686e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016872:	89 c2                	mov    edx,eax
c0016874:	ec                   	in     al,dx
c0016875:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016879:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001687d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0016881:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0016888:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001688d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0016891:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016895:	ee                   	out    dx,al
c0016896:	e8 b5 fe ff ff       	call   c0016750 <picIoWait()>
c001689b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00168a2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00168a7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00168ab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00168af:	ee                   	out    dx,al
c00168b0:	e8 9b fe ff ff       	call   c0016750 <picIoWait()>
c00168b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00168b9:	25 ff 00 00 00       	and    eax,0xff
c00168be:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00168c5:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00168c9:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00168cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00168d1:	ee                   	out    dx,al
c00168d2:	e8 79 fe ff ff       	call   c0016750 <picIoWait()>
c00168d7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00168db:	25 ff 00 00 00       	and    eax,0xff
c00168e0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00168e7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00168eb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00168ef:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00168f3:	ee                   	out    dx,al
c00168f4:	e8 57 fe ff ff       	call   c0016750 <picIoWait()>
c00168f9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0016900:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0016905:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0016909:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001690d:	ee                   	out    dx,al
c001690e:	e8 3d fe ff ff       	call   c0016750 <picIoWait()>
c0016913:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001691a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001691f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0016923:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016927:	ee                   	out    dx,al
c0016928:	e8 23 fe ff ff       	call   c0016750 <picIoWait()>
c001692d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0016934:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0016939:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001693d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016941:	ee                   	out    dx,al
c0016942:	e8 09 fe ff ff       	call   c0016750 <picIoWait()>
c0016947:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001694e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0016953:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0016957:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001695b:	ee                   	out    dx,al
c001695c:	e8 ef fd ff ff       	call   c0016750 <picIoWait()>
c0016961:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0016965:	25 ff 00 00 00       	and    eax,0xff
c001696a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0016971:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0016975:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0016979:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001697d:	ee                   	out    dx,al
c001697e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0016982:	25 ff 00 00 00       	and    eax,0xff
c0016987:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001698e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0016992:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0016996:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001699a:	ee                   	out    dx,al
c001699b:	90                   	nop
c001699c:	83 c4 50             	add    esp,0x50
c001699f:	c3                   	ret    

c00169a0 <picEOI(int)>:
c00169a0:	83 ec 10             	sub    esp,0x10
c00169a3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00169a8:	75 22                	jne    c00169cc <picEOI(int)+0x2c>
c00169aa:	6a 0b                	push   0xb
c00169ac:	e8 db fd ff ff       	call   c001678c <picGetIRQReg(int)>
c00169b1:	83 c4 04             	add    esp,0x4
c00169b4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00169b9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00169be:	25 ff ff 00 00       	and    eax,0xffff
c00169c3:	25 80 00 00 00       	and    eax,0x80
c00169c8:	74 72                	je     c0016a3c <picEOI(int)+0x9c>
c00169ca:	66 90                	xchg   ax,ax
c00169cc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00169d1:	75 31                	jne    c0016a04 <picEOI(int)+0x64>
c00169d3:	6a 0b                	push   0xb
c00169d5:	e8 b2 fd ff ff       	call   c001678c <picGetIRQReg(int)>
c00169da:	83 c4 04             	add    esp,0x4
c00169dd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00169e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169e6:	66 85 c0             	test   ax,ax
c00169e9:	78 19                	js     c0016a04 <picEOI(int)+0x64>
c00169eb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00169f2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00169f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00169fb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016a00:	ee                   	out    dx,al
c0016a01:	eb 3d                	jmp    c0016a40 <picEOI(int)+0xa0>
c0016a03:	90                   	nop
c0016a04:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016a09:	7e 19                	jle    c0016a24 <picEOI(int)+0x84>
c0016a0b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016a12:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0016a17:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016a1b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016a20:	ee                   	out    dx,al
c0016a21:	8d 76 00             	lea    esi,[esi+0x0]
c0016a24:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016a2b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0016a30:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016a34:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016a39:	ee                   	out    dx,al
c0016a3a:	eb 04                	jmp    c0016a40 <picEOI(int)+0xa0>
c0016a3c:	90                   	nop
c0016a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a40:	83 c4 10             	add    esp,0x10
c0016a43:	c3                   	ret    

c0016a44 <RTC::open(int, int, void*)>:
c0016a44:	31 c0                	xor    eax,eax
c0016a46:	c3                   	ret    
c0016a47:	90                   	nop

c0016a48 <RTC::close(int, int, void*)>:
c0016a48:	31 c0                	xor    eax,eax
c0016a4a:	c3                   	ret    
c0016a4b:	90                   	nop

c0016a4c <RTC::timeInSecondsUTC()>:
c0016a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a50:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016a56:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016a5c:	c3                   	ret    
c0016a5d:	90                   	nop

c0016a5e <RTC::timeInDatetimeUTC()>:
c0016a5e:	53                   	push   ebx
c0016a5f:	83 ec 14             	sub    esp,0x14
c0016a62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016a66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a6c:	50                   	push   eax
c0016a6d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016a70:	83 c4 0c             	add    esp,0xc
c0016a73:	52                   	push   edx
c0016a74:	50                   	push   eax
c0016a75:	53                   	push   ebx
c0016a76:	e8 29 60 ff ff       	call   c000caa4 <secondsToDatetime(unsigned long long)>
c0016a7b:	89 d8                	mov    eax,ebx
c0016a7d:	83 c4 14             	add    esp,0x14
c0016a80:	5b                   	pop    ebx
c0016a81:	c2 04 00             	ret    0x4

c0016a84 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0016a84:	56                   	push   esi
c0016a85:	53                   	push   ebx
c0016a86:	83 ec 14             	sub    esp,0x14
c0016a89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016a8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a8f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0016a92:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016a96:	52                   	push   edx
c0016a97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a9f:	50                   	push   eax
c0016aa0:	e8 ff 5f ff ff       	call   c000caa4 <secondsToDatetime(unsigned long long)>
c0016aa5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016aa9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016aad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ab1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0016ab5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016ab9:	89 f0                	mov    eax,esi
c0016abb:	83 c4 20             	add    esp,0x20
c0016abe:	5b                   	pop    ebx
c0016abf:	5e                   	pop    esi
c0016ac0:	ff e0                	jmp    eax

c0016ac2 <RTC::~RTC()>:
c0016ac2:	83 ec 0c             	sub    esp,0xc
c0016ac5:	ba 50 02 02 c0       	mov    edx,0xc0020250
c0016aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ace:	89 10                	mov    DWORD PTR [eax],edx
c0016ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ad4:	83 ec 0c             	sub    esp,0xc
c0016ad7:	50                   	push   eax
c0016ad8:	e8 4b 5d ff ff       	call   c000c828 <Clock::~Clock()>
c0016add:	83 c4 10             	add    esp,0x10
c0016ae0:	90                   	nop
c0016ae1:	83 c4 0c             	add    esp,0xc
c0016ae4:	c3                   	ret    
c0016ae5:	90                   	nop

c0016ae6 <RTC::~RTC()>:
c0016ae6:	83 ec 0c             	sub    esp,0xc
c0016ae9:	83 ec 0c             	sub    esp,0xc
c0016aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016af0:	e8 cd ff ff ff       	call   c0016ac2 <RTC::~RTC()>
c0016af5:	83 c4 10             	add    esp,0x10
c0016af8:	83 ec 08             	sub    esp,0x8
c0016afb:	68 60 01 00 00       	push   0x160
c0016b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b04:	e8 f1 4c ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c0016b09:	83 c4 10             	add    esp,0x10
c0016b0c:	83 c4 0c             	add    esp,0xc
c0016b0f:	c3                   	ret    

c0016b10 <RTC::get_update_in_progress_flag()>:
c0016b10:	83 ec 14             	sub    esp,0x14
c0016b13:	6a 0a                	push   0xa
c0016b15:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016b1b:	e8 32 17 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016b20:	83 c4 1c             	add    esp,0x1c
c0016b23:	c0 e8 07             	shr    al,0x7
c0016b26:	c3                   	ret    
c0016b27:	90                   	nop

c0016b28 <RTC::completeRTCRefresh()>:
c0016b28:	55                   	push   ebp
c0016b29:	57                   	push   edi
c0016b2a:	56                   	push   esi
c0016b2b:	53                   	push   ebx
c0016b2c:	83 ec 2c             	sub    esp,0x2c
c0016b2f:	8b 1d ac 42 02 c0    	mov    ebx,DWORD PTR ds:0xc00242ac
c0016b35:	83 ec 0c             	sub    esp,0xc
c0016b38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016b3c:	e8 cf ff ff ff       	call   c0016b10 <RTC::get_update_in_progress_flag()>
c0016b41:	83 c4 10             	add    esp,0x10
c0016b44:	84 c0                	test   al,al
c0016b46:	74 0e                	je     c0016b56 <RTC::completeRTCRefresh()+0x2e>
c0016b48:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0016b4e:	3b 05 ac 42 02 c0    	cmp    eax,DWORD PTR ds:0xc00242ac
c0016b54:	73 df                	jae    c0016b35 <RTC::completeRTCRefresh()+0xd>
c0016b56:	55                   	push   ebp
c0016b57:	55                   	push   ebp
c0016b58:	6a 00                	push   0x0
c0016b5a:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016b60:	e8 ed 16 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016b65:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016b69:	58                   	pop    eax
c0016b6a:	5a                   	pop    edx
c0016b6b:	6a 02                	push   0x2
c0016b6d:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016b73:	e8 da 16 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016b78:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0016b7c:	59                   	pop    ecx
c0016b7d:	5b                   	pop    ebx
c0016b7e:	6a 04                	push   0x4
c0016b80:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016b86:	e8 c7 16 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016b8b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0016b8f:	5e                   	pop    esi
c0016b90:	5f                   	pop    edi
c0016b91:	6a 07                	push   0x7
c0016b93:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016b99:	e8 b4 16 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016b9e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0016ba2:	5d                   	pop    ebp
c0016ba3:	58                   	pop    eax
c0016ba4:	6a 08                	push   0x8
c0016ba6:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016bac:	e8 a1 16 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016bb1:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0016bb5:	58                   	pop    eax
c0016bb6:	5a                   	pop    edx
c0016bb7:	6a 09                	push   0x9
c0016bb9:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016bbf:	e8 8e 16 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016bc4:	83 c4 10             	add    esp,0x10
c0016bc7:	0f b6 e8             	movzx  ebp,al
c0016bca:	8b 1d ac 42 02 c0    	mov    ebx,DWORD PTR ds:0xc00242ac
c0016bd0:	83 ec 0c             	sub    esp,0xc
c0016bd3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016bd7:	e8 34 ff ff ff       	call   c0016b10 <RTC::get_update_in_progress_flag()>
c0016bdc:	83 c4 10             	add    esp,0x10
c0016bdf:	84 c0                	test   al,al
c0016be1:	74 0e                	je     c0016bf1 <RTC::completeRTCRefresh()+0xc9>
c0016be3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0016be9:	3b 05 ac 42 02 c0    	cmp    eax,DWORD PTR ds:0xc00242ac
c0016bef:	73 df                	jae    c0016bd0 <RTC::completeRTCRefresh()+0xa8>
c0016bf1:	50                   	push   eax
c0016bf2:	50                   	push   eax
c0016bf3:	6a 00                	push   0x0
c0016bf5:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016bfb:	e8 52 16 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016c00:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0016c04:	58                   	pop    eax
c0016c05:	5a                   	pop    edx
c0016c06:	6a 02                	push   0x2
c0016c08:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016c0e:	e8 3f 16 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016c13:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016c17:	59                   	pop    ecx
c0016c18:	5b                   	pop    ebx
c0016c19:	6a 04                	push   0x4
c0016c1b:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016c21:	e8 2c 16 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016c26:	5e                   	pop    esi
c0016c27:	88 c3                	mov    bl,al
c0016c29:	5f                   	pop    edi
c0016c2a:	6a 07                	push   0x7
c0016c2c:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016c32:	e8 1b 16 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016c37:	89 c6                	mov    esi,eax
c0016c39:	58                   	pop    eax
c0016c3a:	5a                   	pop    edx
c0016c3b:	6a 08                	push   0x8
c0016c3d:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016c43:	e8 0a 16 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016c48:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0016c4c:	59                   	pop    ecx
c0016c4d:	5f                   	pop    edi
c0016c4e:	6a 09                	push   0x9
c0016c50:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016c56:	e8 f7 15 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016c5b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0016c5f:	0f b6 f8             	movzx  edi,al
c0016c62:	83 c4 10             	add    esp,0x10
c0016c65:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0016c69:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0016c6d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0016c71:	89 f1                	mov    ecx,esi
c0016c73:	0f 94 c0             	sete   al
c0016c76:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0016c7a:	0f 94 c2             	sete   dl
c0016c7d:	21 d0                	and    eax,edx
c0016c7f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0016c83:	0f 94 c2             	sete   dl
c0016c86:	21 c2                	and    edx,eax
c0016c88:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0016c8c:	0f 94 c0             	sete   al
c0016c8f:	21 d0                	and    eax,edx
c0016c91:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016c95:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0016c99:	0f 94 c1             	sete   cl
c0016c9c:	84 c8                	test   al,cl
c0016c9e:	75 29                	jne    c0016cc9 <RTC::completeRTCRefresh()+0x1a1>
c0016ca0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016ca4:	89 fd                	mov    ebp,edi
c0016ca6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0016caa:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0016cae:	89 f0                	mov    eax,esi
c0016cb0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0016cb4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016cb8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016cbc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0016cc0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016cc4:	e9 01 ff ff ff       	jmp    c0016bca <RTC::completeRTCRefresh()+0xa2>
c0016cc9:	39 fd                	cmp    ebp,edi
c0016ccb:	75 d3                	jne    c0016ca0 <RTC::completeRTCRefresh()+0x178>
c0016ccd:	55                   	push   ebp
c0016cce:	55                   	push   ebp
c0016ccf:	6a 0b                	push   0xb
c0016cd1:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016cd7:	e8 76 15 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016cdc:	83 c4 10             	add    esp,0x10
c0016cdf:	89 c5                	mov    ebp,eax
c0016ce1:	a8 04                	test   al,0x4
c0016ce3:	75 78                	jne    c0016d5d <RTC::completeRTCRefresh()+0x235>
c0016ce5:	b1 0a                	mov    cl,0xa
c0016ce7:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0016ceb:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0016cef:	83 e2 0f             	and    edx,0xf
c0016cf2:	c0 e8 04             	shr    al,0x4
c0016cf5:	c1 ef 04             	shr    edi,0x4
c0016cf8:	f6 e1                	mul    cl
c0016cfa:	6b ff 0a             	imul   edi,edi,0xa
c0016cfd:	01 d0                	add    eax,edx
c0016cff:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0016d03:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0016d07:	83 e2 0f             	and    edx,0xf
c0016d0a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016d0e:	c0 e8 04             	shr    al,0x4
c0016d11:	f6 e1                	mul    cl
c0016d13:	01 d0                	add    eax,edx
c0016d15:	88 da                	mov    dl,bl
c0016d17:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016d1b:	83 e2 0f             	and    edx,0xf
c0016d1e:	88 d8                	mov    al,bl
c0016d20:	83 e3 80             	and    ebx,0xffffff80
c0016d23:	c0 e8 04             	shr    al,0x4
c0016d26:	83 e0 07             	and    eax,0x7
c0016d29:	f6 e1                	mul    cl
c0016d2b:	01 d0                	add    eax,edx
c0016d2d:	89 f2                	mov    edx,esi
c0016d2f:	09 c3                	or     ebx,eax
c0016d31:	83 e2 0f             	and    edx,0xf
c0016d34:	89 f0                	mov    eax,esi
c0016d36:	c0 e8 04             	shr    al,0x4
c0016d39:	f6 e1                	mul    cl
c0016d3b:	8d 34 02             	lea    esi,[edx+eax*1]
c0016d3e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016d42:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016d46:	83 e2 0f             	and    edx,0xf
c0016d49:	c0 e8 04             	shr    al,0x4
c0016d4c:	f6 e1                	mul    cl
c0016d4e:	01 d0                	add    eax,edx
c0016d50:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016d54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d58:	83 e0 0f             	and    eax,0xf
c0016d5b:	01 c7                	add    edi,eax
c0016d5d:	83 e5 02             	and    ebp,0x2
c0016d60:	75 14                	jne    c0016d76 <RTC::completeRTCRefresh()+0x24e>
c0016d62:	84 db                	test   bl,bl
c0016d64:	79 10                	jns    c0016d76 <RTC::completeRTCRefresh()+0x24e>
c0016d66:	83 e3 7f             	and    ebx,0x7f
c0016d69:	b9 18 00 00 00       	mov    ecx,0x18
c0016d6e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016d71:	99                   	cdq    
c0016d72:	f7 f9                	idiv   ecx
c0016d74:	88 d3                	mov    bl,dl
c0016d76:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0016d7c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0016d82:	77 06                	ja     c0016d8a <RTC::completeRTCRefresh()+0x262>
c0016d84:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0016d8a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0016d8f:	31 d2                	xor    edx,edx
c0016d91:	c1 e1 10             	shl    ecx,0x10
c0016d94:	89 d7                	mov    edi,edx
c0016d96:	c1 e5 10             	shl    ebp,0x10
c0016d99:	31 c0                	xor    eax,eax
c0016d9b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016da1:	09 cf                	or     edi,ecx
c0016da3:	89 fa                	mov    edx,edi
c0016da5:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0016da9:	88 da                	mov    dl,bl
c0016dab:	89 f3                	mov    ebx,esi
c0016dad:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0016db1:	88 d8                	mov    al,bl
c0016db3:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0016db7:	0f b7 c8             	movzx  ecx,ax
c0016dba:	09 e9                	or     ecx,ebp
c0016dbc:	89 c8                	mov    eax,ecx
c0016dbe:	51                   	push   ecx
c0016dbf:	51                   	push   ecx
c0016dc0:	52                   	push   edx
c0016dc1:	50                   	push   eax
c0016dc2:	e8 50 5b ff ff       	call   c000c917 <datetimeToSeconds(datetime_t)>
c0016dc7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016dcb:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0016dd1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0016dd7:	83 c4 3c             	add    esp,0x3c
c0016dda:	5b                   	pop    ebx
c0016ddb:	5e                   	pop    esi
c0016ddc:	5f                   	pop    edi
c0016ddd:	5d                   	pop    ebp
c0016dde:	c3                   	ret    
c0016ddf:	90                   	nop

c0016de0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0016de0:	55                   	push   ebp
c0016de1:	57                   	push   edi
c0016de2:	56                   	push   esi
c0016de3:	53                   	push   ebx
c0016de4:	83 ec 30             	sub    esp,0x30
c0016de7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016deb:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016def:	6a 00                	push   0x0
c0016df1:	6a 00                	push   0x0
c0016df3:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016df9:	e8 6a 15 ff ff       	call   c0008368 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016dfe:	83 c4 0c             	add    esp,0xc
c0016e01:	6a 00                	push   0x0
c0016e03:	6a 02                	push   0x2
c0016e05:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016e0b:	e8 58 15 ff ff       	call   c0008368 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016e10:	31 d2                	xor    edx,edx
c0016e12:	89 f9                	mov    ecx,edi
c0016e14:	89 f8                	mov    eax,edi
c0016e16:	c1 e9 10             	shr    ecx,0x10
c0016e19:	0f b6 c4             	movzx  eax,ah
c0016e1c:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016e20:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016e24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e28:	b9 64 00 00 00       	mov    ecx,0x64
c0016e2d:	89 f0                	mov    eax,esi
c0016e2f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016e33:	89 f0                	mov    eax,esi
c0016e35:	0f b6 c4             	movzx  eax,ah
c0016e38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e3c:	89 f0                	mov    eax,esi
c0016e3e:	c1 e8 10             	shr    eax,0x10
c0016e41:	66 f7 f1             	div    cx
c0016e44:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016e49:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0016e4e:	59                   	pop    ecx
c0016e4f:	5b                   	pop    ebx
c0016e50:	89 fb                	mov    ebx,edi
c0016e52:	6a 0b                	push   0xb
c0016e54:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016e5a:	e8 f3 13 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016e5f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0016e63:	83 c4 10             	add    esp,0x10
c0016e66:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0016e6b:	75 74                	jne    c0016ee1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016e6d:	b2 0a                	mov    dl,0xa
c0016e6f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016e73:	0f b6 c1             	movzx  eax,cl
c0016e76:	f6 f2                	div    dl
c0016e78:	88 c3                	mov    bl,al
c0016e7a:	88 e0                	mov    al,ah
c0016e7c:	c1 e3 04             	shl    ebx,0x4
c0016e7f:	09 c3                	or     ebx,eax
c0016e81:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016e86:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016e8a:	f6 f2                	div    dl
c0016e8c:	88 c1                	mov    cl,al
c0016e8e:	88 e0                	mov    al,ah
c0016e90:	c1 e1 04             	shl    ecx,0x4
c0016e93:	09 c1                	or     ecx,eax
c0016e95:	89 f8                	mov    eax,edi
c0016e97:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016e9b:	0f b6 c0             	movzx  eax,al
c0016e9e:	f6 f2                	div    dl
c0016ea0:	88 c3                	mov    bl,al
c0016ea2:	88 e0                	mov    al,ah
c0016ea4:	c1 e3 04             	shl    ebx,0x4
c0016ea7:	09 c3                	or     ebx,eax
c0016ea9:	89 f0                	mov    eax,esi
c0016eab:	0f b6 c0             	movzx  eax,al
c0016eae:	f6 f2                	div    dl
c0016eb0:	88 c1                	mov    cl,al
c0016eb2:	88 e0                	mov    al,ah
c0016eb4:	c1 e1 04             	shl    ecx,0x4
c0016eb7:	09 c1                	or     ecx,eax
c0016eb9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016ebe:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0016ec2:	f6 f2                	div    dl
c0016ec4:	88 c1                	mov    cl,al
c0016ec6:	88 e0                	mov    al,ah
c0016ec8:	c1 e1 04             	shl    ecx,0x4
c0016ecb:	09 c1                	or     ecx,eax
c0016ecd:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0016ed2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0016ed6:	f6 f2                	div    dl
c0016ed8:	89 c5                	mov    ebp,eax
c0016eda:	88 e0                	mov    al,ah
c0016edc:	c1 e5 04             	shl    ebp,0x4
c0016edf:	09 c5                	or     ebp,eax
c0016ee1:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0016ee6:	75 17                	jne    c0016eff <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016ee8:	80 fb 0b             	cmp    bl,0xb
c0016eeb:	76 0c                	jbe    c0016ef9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016eed:	80 eb 0c             	sub    bl,0xc
c0016ef0:	75 02                	jne    c0016ef4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0016ef2:	b3 0c                	mov    bl,0xc
c0016ef4:	83 cb 80             	or     ebx,0xffffff80
c0016ef7:	eb 06                	jmp    c0016eff <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016ef9:	84 db                	test   bl,bl
c0016efb:	75 02                	jne    c0016eff <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016efd:	b3 0c                	mov    bl,0xc
c0016eff:	0f b6 db             	movzx  ebx,bl
c0016f02:	50                   	push   eax
c0016f03:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016f08:	50                   	push   eax
c0016f09:	6a 00                	push   0x0
c0016f0b:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016f11:	e8 52 14 ff ff       	call   c0008368 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f16:	83 c4 0c             	add    esp,0xc
c0016f19:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016f1e:	50                   	push   eax
c0016f1f:	6a 02                	push   0x2
c0016f21:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016f27:	e8 3c 14 ff ff       	call   c0008368 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f2c:	83 c4 0c             	add    esp,0xc
c0016f2f:	53                   	push   ebx
c0016f30:	6a 04                	push   0x4
c0016f32:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016f38:	e8 2b 14 ff ff       	call   c0008368 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f3d:	83 c4 0c             	add    esp,0xc
c0016f40:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016f45:	50                   	push   eax
c0016f46:	6a 07                	push   0x7
c0016f48:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016f4e:	e8 15 14 ff ff       	call   c0008368 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f53:	83 c4 0c             	add    esp,0xc
c0016f56:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0016f5b:	50                   	push   eax
c0016f5c:	6a 08                	push   0x8
c0016f5e:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016f64:	e8 ff 13 ff ff       	call   c0008368 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f69:	83 c4 0c             	add    esp,0xc
c0016f6c:	89 e8                	mov    eax,ebp
c0016f6e:	0f b6 e8             	movzx  ebp,al
c0016f71:	55                   	push   ebp
c0016f72:	6a 09                	push   0x9
c0016f74:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016f7a:	e8 e9 13 ff ff       	call   c0008368 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f7f:	5a                   	pop    edx
c0016f80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016f84:	e8 9f fb ff ff       	call   c0016b28 <RTC::completeRTCRefresh()>
c0016f89:	83 c4 3c             	add    esp,0x3c
c0016f8c:	b0 01                	mov    al,0x1
c0016f8e:	5b                   	pop    ebx
c0016f8f:	5e                   	pop    esi
c0016f90:	5f                   	pop    edi
c0016f91:	5d                   	pop    ebp
c0016f92:	c3                   	ret    

c0016f93 <rtcIRQHandler(regs*, void*)>:
c0016f93:	53                   	push   ebx
c0016f94:	83 ec 10             	sub    esp,0x10
c0016f97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016f9b:	6a 0c                	push   0xc
c0016f9d:	ff 35 e8 1c 02 c0    	push   DWORD PTR ds:0xc0021ce8
c0016fa3:	e8 aa 12 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0016fa8:	83 c4 10             	add    esp,0x10
c0016fab:	84 c0                	test   al,al
c0016fad:	79 24                	jns    c0016fd3 <rtcIRQHandler(regs*, void*)+0x40>
c0016faf:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0016fb6:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016fbd:	66 ff 05 54 52 02 c0 	inc    WORD PTR ds:0xc0025254
c0016fc4:	75 0d                	jne    c0016fd3 <rtcIRQHandler(regs*, void*)+0x40>
c0016fc6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016fca:	83 c4 08             	add    esp,0x8
c0016fcd:	5b                   	pop    ebx
c0016fce:	e9 55 fb ff ff       	jmp    c0016b28 <RTC::completeRTCRefresh()>
c0016fd3:	83 c4 08             	add    esp,0x8
c0016fd6:	5b                   	pop    ebx
c0016fd7:	c3                   	ret    

c0016fd8 <RTC::RTC()>:
c0016fd8:	83 ec 1c             	sub    esp,0x1c
c0016fdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fdf:	83 ec 08             	sub    esp,0x8
c0016fe2:	68 33 02 02 c0       	push   0xc0020233
c0016fe7:	50                   	push   eax
c0016fe8:	e8 05 58 ff ff       	call   c000c7f2 <Clock::Clock(char const*)>
c0016fed:	83 c4 10             	add    esp,0x10
c0016ff0:	ba 50 02 02 c0       	mov    edx,0xc0020250
c0016ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff9:	89 10                	mov    DWORD PTR [eax],edx
c0016ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fff:	83 ec 0c             	sub    esp,0xc
c0017002:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017006:	6a 01                	push   0x1
c0017008:	68 93 6f 01 c0       	push   0xc0016f93
c001700d:	6a 08                	push   0x8
c001700f:	50                   	push   eax
c0017010:	e8 c7 5c ff ff       	call   c000ccdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017015:	83 c4 20             	add    esp,0x20
c0017018:	89 c2                	mov    edx,eax
c001701a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017024:	fa                   	cli    
c0017025:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c001702a:	40                   	inc    eax
c001702b:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0017030:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c0017035:	83 ec 08             	sub    esp,0x8
c0017038:	6a 0b                	push   0xb
c001703a:	50                   	push   eax
c001703b:	e8 12 12 ff ff       	call   c0008252 <Computer::readCMOS(unsigned char)>
c0017040:	83 c4 10             	add    esp,0x10
c0017043:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017047:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c001704c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017050:	83 ca 10             	or     edx,0x10
c0017053:	81 e2 ff 00 00 00    	and    edx,0xff
c0017059:	83 ec 04             	sub    esp,0x4
c001705c:	52                   	push   edx
c001705d:	6a 0b                	push   0xb
c001705f:	50                   	push   eax
c0017060:	e8 03 13 ff ff       	call   c0008368 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017065:	83 c4 10             	add    esp,0x10
c0017068:	83 ec 0c             	sub    esp,0xc
c001706b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001706f:	e8 b4 fa ff ff       	call   c0016b28 <RTC::completeRTCRefresh()>
c0017074:	83 c4 10             	add    esp,0x10
c0017077:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c001707c:	48                   	dec    eax
c001707d:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0017082:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c0017087:	85 c0                	test   eax,eax
c0017089:	75 01                	jne    c001708c <RTC::RTC()+0xb4>
c001708b:	fb                   	sti    
c001708c:	90                   	nop
c001708d:	83 c4 1c             	add    esp,0x1c
c0017090:	c3                   	ret    
c0017091:	66 90                	xchg   ax,ax
c0017093:	90                   	nop

c0017094 <HalConsoleScroll(int, int)>:
c0017094:	83 ec 10             	sub    esp,0x10
c0017097:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001709f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00170a7:	90                   	nop
c00170a8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00170ad:	0f 8f e1 00 00 00    	jg     c0017194 <HalConsoleScroll(int, int)+0x100>
c00170b3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00170bb:	90                   	nop
c00170bc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00170c4:	0f 8f be 00 00 00    	jg     c0017188 <HalConsoleScroll(int, int)+0xf4>
c00170ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170ce:	89 d0                	mov    eax,edx
c00170d0:	c1 e0 02             	shl    eax,0x2
c00170d3:	01 d0                	add    eax,edx
c00170d5:	c1 e0 05             	shl    eax,0x5
c00170d8:	89 c2                	mov    edx,eax
c00170da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170de:	01 d0                	add    eax,edx
c00170e0:	89 c2                	mov    edx,eax
c00170e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170e6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00170e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170ed:	89 d0                	mov    eax,edx
c00170ef:	c1 e0 02             	shl    eax,0x2
c00170f2:	01 d0                	add    eax,edx
c00170f4:	c1 e0 05             	shl    eax,0x5
c00170f7:	89 c2                	mov    edx,eax
c00170f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170fd:	01 d0                	add    eax,edx
c00170ff:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017105:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017109:	01 c2                	add    edx,eax
c001710b:	8a 01                	mov    al,BYTE PTR [ecx]
c001710d:	88 02                	mov    BYTE PTR [edx],al
c001710f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017114:	75 66                	jne    c001717c <HalConsoleScroll(int, int)+0xe8>
c0017116:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001711a:	83 e0 01             	and    eax,0x1
c001711d:	74 39                	je     c0017158 <HalConsoleScroll(int, int)+0xc4>
c001711f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017123:	83 e0 0f             	and    eax,0xf
c0017126:	88 c2                	mov    dl,al
c0017128:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001712c:	c1 e0 04             	shl    eax,0x4
c001712f:	88 d1                	mov    cl,dl
c0017131:	09 c1                	or     ecx,eax
c0017133:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017137:	89 d0                	mov    eax,edx
c0017139:	c1 e0 02             	shl    eax,0x2
c001713c:	01 d0                	add    eax,edx
c001713e:	c1 e0 05             	shl    eax,0x5
c0017141:	89 c2                	mov    edx,eax
c0017143:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017147:	01 d0                	add    eax,edx
c0017149:	89 c2                	mov    edx,eax
c001714b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001714f:	01 d0                	add    eax,edx
c0017151:	88 ca                	mov    dl,cl
c0017153:	88 10                	mov    BYTE PTR [eax],dl
c0017155:	eb 25                	jmp    c001717c <HalConsoleScroll(int, int)+0xe8>
c0017157:	90                   	nop
c0017158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001715c:	89 d0                	mov    eax,edx
c001715e:	c1 e0 02             	shl    eax,0x2
c0017161:	01 d0                	add    eax,edx
c0017163:	c1 e0 05             	shl    eax,0x5
c0017166:	89 c2                	mov    edx,eax
c0017168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001716c:	01 d0                	add    eax,edx
c001716e:	89 c2                	mov    edx,eax
c0017170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017174:	01 d0                	add    eax,edx
c0017176:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017179:	8d 76 00             	lea    esi,[esi+0x0]
c001717c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0017180:	e9 37 ff ff ff       	jmp    c00170bc <HalConsoleScroll(int, int)+0x28>
c0017185:	8d 76 00             	lea    esi,[esi+0x0]
c0017188:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001718c:	e9 17 ff ff ff       	jmp    c00170a8 <HalConsoleScroll(int, int)+0x14>
c0017191:	8d 76 00             	lea    esi,[esi+0x0]
c0017194:	90                   	nop
c0017195:	83 c4 10             	add    esp,0x10
c0017198:	c3                   	ret    
c0017199:	8d 76 00             	lea    esi,[esi+0x0]

c001719c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001719c:	83 ec 14             	sub    esp,0x14
c001719f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171a3:	88 04 24             	mov    BYTE PTR [esp],al
c00171a6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00171a9:	25 ff 00 00 00       	and    eax,0xff
c00171ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00171b2:	89 d1                	mov    ecx,edx
c00171b4:	83 e1 0f             	and    ecx,0xf
c00171b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00171bb:	c1 e2 04             	shl    edx,0x4
c00171be:	81 e2 ff 00 00 00    	and    edx,0xff
c00171c4:	09 ca                	or     edx,ecx
c00171c6:	c1 e2 08             	shl    edx,0x8
c00171c9:	09 d0                	or     eax,edx
c00171cb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00171d0:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00171d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00171dc:	89 d0                	mov    eax,edx
c00171de:	c1 e0 02             	shl    eax,0x2
c00171e1:	01 d0                	add    eax,edx
c00171e3:	c1 e0 04             	shl    eax,0x4
c00171e6:	89 c2                	mov    edx,eax
c00171e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171ec:	01 d0                	add    eax,edx
c00171ee:	01 c0                	add    eax,eax
c00171f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00171f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00171f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00171fd:	66 89 02             	mov    WORD PTR [edx],ax
c0017200:	90                   	nop
c0017201:	83 c4 14             	add    esp,0x14
c0017204:	c3                   	ret    
c0017205:	8d 76 00             	lea    esi,[esi+0x0]

c0017208 <HalConsoleCursorUpdate(int, int)>:
c0017208:	83 ec 20             	sub    esp,0x20
c001720b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001720f:	89 c2                	mov    edx,eax
c0017211:	89 d0                	mov    eax,edx
c0017213:	c1 e0 02             	shl    eax,0x2
c0017216:	01 d0                	add    eax,edx
c0017218:	c1 e0 04             	shl    eax,0x4
c001721b:	89 c2                	mov    edx,eax
c001721d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017221:	01 d0                	add    eax,edx
c0017223:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017228:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001722f:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017234:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017238:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001723c:	ee                   	out    dx,al
c001723d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017242:	25 ff 00 00 00       	and    eax,0xff
c0017247:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001724e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017252:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017256:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001725a:	ee                   	out    dx,al
c001725b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017262:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017267:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001726b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001726f:	ee                   	out    dx,al
c0017270:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017275:	66 c1 e8 08          	shr    ax,0x8
c0017279:	25 ff 00 00 00       	and    eax,0xff
c001727e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017285:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017289:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001728d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017291:	ee                   	out    dx,al
c0017292:	90                   	nop
c0017293:	83 c4 20             	add    esp,0x20
c0017296:	c3                   	ret    
c0017297:	90                   	nop

c0017298 <FAT::getName()>:
c0017298:	b8 84 02 02 c0       	mov    eax,0xc0020284
c001729d:	c3                   	ret    
c001729e:	66 90                	xchg   ax,ax

c00172a0 <FAT::tell(void*, unsigned long long*)>:
c00172a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00172a5:	75 09                	jne    c00172b0 <FAT::tell(void*, unsigned long long*)+0x10>
c00172a7:	b8 04 00 00 00       	mov    eax,0x4
c00172ac:	c3                   	ret    
c00172ad:	8d 76 00             	lea    esi,[esi+0x0]
c00172b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00172b5:	75 09                	jne    c00172c0 <FAT::tell(void*, unsigned long long*)+0x20>
c00172b7:	b8 04 00 00 00       	mov    eax,0x4
c00172bc:	c3                   	ret    
c00172bd:	8d 76 00             	lea    esi,[esi+0x0]
c00172c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00172c7:	ba 00 00 00 00       	mov    edx,0x0
c00172cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172d0:	89 01                	mov    DWORD PTR [ecx],eax
c00172d2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00172d5:	b8 00 00 00 00       	mov    eax,0x0
c00172da:	c3                   	ret    
c00172db:	90                   	nop

c00172dc <FAT::stat(void*, unsigned long long*)>:
c00172dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00172e1:	75 09                	jne    c00172ec <FAT::stat(void*, unsigned long long*)+0x10>
c00172e3:	b8 04 00 00 00       	mov    eax,0x4
c00172e8:	c3                   	ret    
c00172e9:	8d 76 00             	lea    esi,[esi+0x0]
c00172ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00172f1:	75 09                	jne    c00172fc <FAT::stat(void*, unsigned long long*)+0x20>
c00172f3:	b8 04 00 00 00       	mov    eax,0x4
c00172f8:	c3                   	ret    
c00172f9:	8d 76 00             	lea    esi,[esi+0x0]
c00172fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017300:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017303:	ba 00 00 00 00       	mov    edx,0x0
c0017308:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001730c:	89 01                	mov    DWORD PTR [ecx],eax
c001730e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017311:	b8 00 00 00 00       	mov    eax,0x0
c0017316:	c3                   	ret    
c0017317:	90                   	nop

c0017318 <FAT::~FAT()>:
c0017318:	83 ec 0c             	sub    esp,0xc
c001731b:	ba d0 02 02 c0       	mov    edx,0xc00202d0
c0017320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017324:	89 10                	mov    DWORD PTR [eax],edx
c0017326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001732a:	83 ec 0c             	sub    esp,0xc
c001732d:	50                   	push   eax
c001732e:	e8 03 49 ff ff       	call   c000bc36 <Filesystem::~Filesystem()>
c0017333:	83 c4 10             	add    esp,0x10
c0017336:	90                   	nop
c0017337:	83 c4 0c             	add    esp,0xc
c001733a:	c3                   	ret    
c001733b:	90                   	nop

c001733c <FAT::~FAT()>:
c001733c:	83 ec 0c             	sub    esp,0xc
c001733f:	83 ec 0c             	sub    esp,0xc
c0017342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017346:	e8 cd ff ff ff       	call   c0017318 <FAT::~FAT()>
c001734b:	83 c4 10             	add    esp,0x10
c001734e:	83 ec 08             	sub    esp,0x8
c0017351:	6a 08                	push   0x8
c0017353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017357:	e8 9e 44 ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001735c:	83 c4 10             	add    esp,0x10
c001735f:	83 c4 0c             	add    esp,0xc
c0017362:	c3                   	ret    
c0017363:	90                   	nop

c0017364 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017364:	83 ec 1c             	sub    esp,0x1c
c0017367:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001736e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017373:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017377:	8b 04 85 80 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdad80]
c001737e:	83 f8 ff             	cmp    eax,0xffffffff
c0017381:	75 35                	jne    c00173b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017383:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017387:	88 c2                	mov    dl,al
c0017389:	a1 60 52 02 c0       	mov    eax,ds:0xc0025260
c001738e:	01 d0                	add    eax,edx
c0017390:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017394:	8b 15 60 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025260
c001739a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001739e:	89 14 85 80 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad80],edx
c00173a5:	a1 60 52 02 c0       	mov    eax,ds:0xc0025260
c00173aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173ae:	89 14 85 00 53 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad00],edx
c00173b5:	eb 19                	jmp    c00173d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00173b7:	90                   	nop
c00173b8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00173bc:	88 c2                	mov    dl,al
c00173be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173c2:	8b 04 85 80 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdad80]
c00173c9:	01 d0                	add    eax,edx
c00173cb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00173cf:	90                   	nop
c00173d0:	83 ec 04             	sub    esp,0x4
c00173d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00173d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00173db:	8d 44 24 15          	lea    eax,[esp+0x15]
c00173df:	50                   	push   eax
c00173e0:	e8 8f da fe ff       	call   c0004e74 <f_getlabel>
c00173e5:	83 c4 10             	add    esp,0x10
c00173e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00173f1:	75 09                	jne    c00173fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00173f3:	b8 00 00 00 00       	mov    eax,0x0
c00173f8:	eb 0a                	jmp    c0017404 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00173fa:	66 90                	xchg   ax,ax
c00173fc:	b8 01 00 00 00       	mov    eax,0x1
c0017401:	8d 76 00             	lea    esi,[esi+0x0]
c0017404:	83 c4 1c             	add    esp,0x1c
c0017407:	c3                   	ret    

c0017408 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017408:	57                   	push   edi
c0017409:	83 ec 58             	sub    esp,0x58
c001740c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017414:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017418:	b8 00 00 00 00       	mov    eax,0x0
c001741d:	b9 0f 00 00 00       	mov    ecx,0xf
c0017422:	fc                   	cld    
c0017423:	89 d7                	mov    edi,edx
c0017425:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0017427:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001742b:	8b 04 85 80 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdad80]
c0017432:	83 f8 ff             	cmp    eax,0xffffffff
c0017435:	75 35                	jne    c001746c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0017437:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001743b:	88 c2                	mov    dl,al
c001743d:	a1 60 52 02 c0       	mov    eax,ds:0xc0025260
c0017442:	01 d0                	add    eax,edx
c0017444:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017448:	8b 15 60 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025260
c001744e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017452:	89 14 85 80 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad80],edx
c0017459:	a1 60 52 02 c0       	mov    eax,ds:0xc0025260
c001745e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017462:	89 14 85 00 53 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad00],edx
c0017469:	eb 19                	jmp    c0017484 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001746b:	90                   	nop
c001746c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017470:	88 c2                	mov    dl,al
c0017472:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017476:	8b 04 85 80 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdad80]
c001747d:	01 d0                	add    eax,edx
c001747f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017483:	90                   	nop
c0017484:	83 ec 08             	sub    esp,0x8
c0017487:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001748b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001748f:	50                   	push   eax
c0017490:	e8 4b 93 fe ff       	call   c00007e0 <strcat>
c0017495:	83 c4 10             	add    esp,0x10
c0017498:	83 ec 0c             	sub    esp,0xc
c001749b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001749f:	50                   	push   eax
c00174a0:	e8 20 db fe ff       	call   c0004fc5 <f_setlabel>
c00174a5:	83 c4 10             	add    esp,0x10
c00174a8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174ac:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00174b1:	75 09                	jne    c00174bc <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00174b3:	b8 00 00 00 00       	mov    eax,0x0
c00174b8:	eb 0a                	jmp    c00174c4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00174ba:	66 90                	xchg   ax,ax
c00174bc:	b8 01 00 00 00       	mov    eax,0x1
c00174c1:	8d 76 00             	lea    esi,[esi+0x0]
c00174c4:	83 c4 58             	add    esp,0x58
c00174c7:	5f                   	pop    edi
c00174c8:	c3                   	ret    
c00174c9:	90                   	nop
c00174ca:	66 90                	xchg   ax,ax

c00174cc <FAT::format(LogicalDisk*, int, char const*, int)>:
c00174cc:	83 ec 2c             	sub    esp,0x2c
c00174cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00174d7:	83 ec 08             	sub    esp,0x8
c00174da:	68 a8 02 02 c0       	push   0xc00202a8
c00174df:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00174e3:	e8 18 92 fe ff       	call   c0000700 <strcmp>
c00174e8:	83 c4 10             	add    esp,0x10
c00174eb:	85 c0                	test   eax,eax
c00174ed:	0f 94 c0             	sete   al
c00174f0:	84 c0                	test   al,al
c00174f2:	74 10                	je     c0017504 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00174f4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00174fc:	e9 b3 00 00 00       	jmp    c00175b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017501:	8d 76 00             	lea    esi,[esi+0x0]
c0017504:	83 ec 08             	sub    esp,0x8
c0017507:	68 9a 02 02 c0       	push   0xc002029a
c001750c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017510:	e8 eb 91 fe ff       	call   c0000700 <strcmp>
c0017515:	83 c4 10             	add    esp,0x10
c0017518:	85 c0                	test   eax,eax
c001751a:	0f 94 c0             	sete   al
c001751d:	84 c0                	test   al,al
c001751f:	74 0f                	je     c0017530 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0017521:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017529:	e9 86 00 00 00       	jmp    c00175b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001752e:	66 90                	xchg   ax,ax
c0017530:	83 ec 08             	sub    esp,0x8
c0017533:	68 a0 02 02 c0       	push   0xc00202a0
c0017538:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001753c:	e8 bf 91 fe ff       	call   c0000700 <strcmp>
c0017541:	83 c4 10             	add    esp,0x10
c0017544:	85 c0                	test   eax,eax
c0017546:	0f 94 c0             	sete   al
c0017549:	84 c0                	test   al,al
c001754b:	74 0b                	je     c0017558 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001754d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017555:	eb 5d                	jmp    c00175b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017557:	90                   	nop
c0017558:	83 ec 08             	sub    esp,0x8
c001755b:	68 5c e3 01 c0       	push   0xc001e35c
c0017560:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017564:	e8 97 91 fe ff       	call   c0000700 <strcmp>
c0017569:	83 c4 10             	add    esp,0x10
c001756c:	85 c0                	test   eax,eax
c001756e:	0f 94 c0             	sete   al
c0017571:	84 c0                	test   al,al
c0017573:	74 0b                	je     c0017580 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0017575:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001757d:	eb 35                	jmp    c00175b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001757f:	90                   	nop
c0017580:	83 ec 08             	sub    esp,0x8
c0017583:	68 a6 02 02 c0       	push   0xc00202a6
c0017588:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001758c:	e8 6f 91 fe ff       	call   c0000700 <strcmp>
c0017591:	83 c4 10             	add    esp,0x10
c0017594:	85 c0                	test   eax,eax
c0017596:	0f 94 c0             	sete   al
c0017599:	84 c0                	test   al,al
c001759b:	74 0b                	je     c00175a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001759d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00175a5:	eb 0d                	jmp    c00175b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00175a7:	90                   	nop
c00175a8:	b8 08 00 00 00       	mov    eax,0x8
c00175ad:	e9 ea 00 00 00       	jmp    c001769c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00175b2:	66 90                	xchg   ax,ax
c00175b4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00175bb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00175c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175c4:	8b 04 85 80 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdad80]
c00175cb:	83 f8 ff             	cmp    eax,0xffffffff
c00175ce:	75 34                	jne    c0017604 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00175d0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00175d4:	88 c2                	mov    dl,al
c00175d6:	a1 60 52 02 c0       	mov    eax,ds:0xc0025260
c00175db:	01 d0                	add    eax,edx
c00175dd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00175e1:	8b 15 60 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025260
c00175e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175eb:	89 14 85 80 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad80],edx
c00175f2:	a1 60 52 02 c0       	mov    eax,ds:0xc0025260
c00175f7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00175fb:	89 14 85 00 53 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad00],edx
c0017602:	eb 18                	jmp    c001761c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0017604:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017608:	88 c2                	mov    dl,al
c001760a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001760e:	8b 04 85 80 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdad80]
c0017615:	01 d0                	add    eax,edx
c0017617:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001761b:	90                   	nop
c001761c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017620:	88 04 24             	mov    BYTE PTR [esp],al
c0017623:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017627:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001762b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017633:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0017638:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017640:	83 ec 0c             	sub    esp,0xc
c0017643:	68 00 20 00 00       	push   0x2000
c0017648:	e8 14 15 ff ff       	call   c0008b61 <malloc>
c001764d:	83 c4 10             	add    esp,0x10
c0017650:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017654:	68 00 20 00 00       	push   0x2000
c0017659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001765d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017661:	50                   	push   eax
c0017662:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0017666:	50                   	push   eax
c0017667:	e8 49 dc fe ff       	call   c00052b5 <f_mkfs>
c001766c:	83 c4 10             	add    esp,0x10
c001766f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017673:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017678:	75 0a                	jne    c0017684 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001767a:	b8 00 00 00 00       	mov    eax,0x0
c001767f:	eb 1b                	jmp    c001769c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017681:	8d 76 00             	lea    esi,[esi+0x0]
c0017684:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0017689:	75 09                	jne    c0017694 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001768b:	b8 09 00 00 00       	mov    eax,0x9
c0017690:	eb 0a                	jmp    c001769c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017692:	66 90                	xchg   ax,ax
c0017694:	b8 01 00 00 00       	mov    eax,0x1
c0017699:	8d 76 00             	lea    esi,[esi+0x0]
c001769c:	83 c4 2c             	add    esp,0x2c
c001769f:	c3                   	ret    

c00176a0 <FAT::tryMount(LogicalDisk*, int)>:
c00176a0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00176a6:	a1 60 52 02 c0       	mov    eax,ds:0xc0025260
c00176ab:	83 f8 14             	cmp    eax,0x14
c00176ae:	75 18                	jne    c00176c8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00176b0:	83 ec 0c             	sub    esp,0xc
c00176b3:	68 ac 02 02 c0       	push   0xc00202ac
c00176b8:	e8 82 9d ff ff       	call   c001143f <Krnl::panic(char const*)>
c00176bd:	83 c4 10             	add    esp,0x10
c00176c0:	b0 00                	mov    al,0x0
c00176c2:	e9 e9 01 00 00       	jmp    c00178b0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00176c7:	90                   	nop
c00176c8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00176cf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00176d5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00176db:	3d 00 02 00 00       	cmp    eax,0x200
c00176e0:	74 0a                	je     c00176ec <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00176e2:	b0 00                	mov    al,0x0
c00176e4:	e9 c7 01 00 00       	jmp    c00178b0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00176e9:	8d 76 00             	lea    esi,[esi+0x0]
c00176ec:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00176f4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00176fb:	8b 04 85 80 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdad80]
c0017702:	83 f8 ff             	cmp    eax,0xffffffff
c0017705:	74 09                	je     c0017710 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0017707:	b0 01                	mov    al,0x1
c0017709:	e9 a2 01 00 00       	jmp    c00178b0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001770e:	66 90                	xchg   ax,ax
c0017710:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001771a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0017722:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0017729:	88 c2                	mov    dl,al
c001772b:	a1 60 52 02 c0       	mov    eax,ds:0xc0025260
c0017730:	01 d0                	add    eax,edx
c0017732:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0017739:	8b 15 60 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025260
c001773f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017746:	89 14 85 80 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad80],edx
c001774d:	a1 60 52 02 c0       	mov    eax,ds:0xc0025260
c0017752:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0017759:	89 14 85 00 53 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad00],edx
c0017760:	83 ec 0c             	sub    esp,0xc
c0017763:	68 34 02 00 00       	push   0x234
c0017768:	e8 f4 13 ff ff       	call   c0008b61 <malloc>
c001776d:	83 c4 10             	add    esp,0x10
c0017770:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0017777:	83 ec 04             	sub    esp,0x4
c001777a:	6a 00                	push   0x0
c001777c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017783:	50                   	push   eax
c0017784:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001778b:	e8 4b c3 fe ff       	call   c0003adb <f_mount>
c0017790:	83 c4 10             	add    esp,0x10
c0017793:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001779a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00177a2:	74 1c                	je     c00177c0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00177a4:	83 ec 0c             	sub    esp,0xc
c00177a7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00177ae:	e8 ce 13 ff ff       	call   c0008b81 <rfree>
c00177b3:	83 c4 10             	add    esp,0x10
c00177b6:	b0 00                	mov    al,0x0
c00177b8:	e9 f3 00 00 00       	jmp    c00178b0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00177bd:	8d 76 00             	lea    esi,[esi+0x0]
c00177c0:	83 ec 04             	sub    esp,0x4
c00177c3:	68 00 01 00 00       	push   0x100
c00177c8:	6a 00                	push   0x0
c00177ca:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00177d1:	50                   	push   eax
c00177d2:	e8 19 8d fe ff       	call   c00004f0 <memset>
c00177d7:	83 c4 10             	add    esp,0x10
c00177da:	83 ec 08             	sub    esp,0x8
c00177dd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00177e4:	50                   	push   eax
c00177e5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00177ec:	50                   	push   eax
c00177ed:	e8 ee 8f fe ff       	call   c00007e0 <strcat>
c00177f2:	83 c4 10             	add    esp,0x10
c00177f5:	83 ec 08             	sub    esp,0x8
c00177f8:	68 ba 02 02 c0       	push   0xc00202ba
c00177fd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017804:	50                   	push   eax
c0017805:	e8 d6 8f fe ff       	call   c00007e0 <strcat>
c001780a:	83 c4 10             	add    esp,0x10
c001780d:	83 ec 04             	sub    esp,0x4
c0017810:	6a 01                	push   0x1
c0017812:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0017819:	50                   	push   eax
c001781a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001781e:	50                   	push   eax
c001781f:	e8 19 c3 fe ff       	call   c0003b3d <f_open>
c0017824:	83 c4 10             	add    esp,0x10
c0017827:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001782e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0017835:	85 c0                	test   eax,eax
c0017837:	74 0b                	je     c0017844 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0017839:	78 31                	js     c001786c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001783b:	83 e8 04             	sub    eax,0x4
c001783e:	83 f8 01             	cmp    eax,0x1
c0017841:	77 29                	ja     c001786c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017843:	90                   	nop
c0017844:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001784c:	83 ec 0c             	sub    esp,0xc
c001784f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017853:	50                   	push   eax
c0017854:	e8 97 ca fe ff       	call   c00042f0 <f_close>
c0017859:	83 c4 10             	add    esp,0x10
c001785c:	90                   	nop
c001785d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0017865:	74 41                	je     c00178a8 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0017867:	eb 33                	jmp    c001789c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0017869:	8d 76 00             	lea    esi,[esi+0x0]
c001786c:	83 ec 0c             	sub    esp,0xc
c001786f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017876:	e8 06 13 ff ff       	call   c0008b81 <rfree>
c001787b:	83 c4 10             	add    esp,0x10
c001787e:	83 ec 04             	sub    esp,0x4
c0017881:	6a 00                	push   0x0
c0017883:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001788a:	50                   	push   eax
c001788b:	6a 00                	push   0x0
c001788d:	e8 49 c2 fe ff       	call   c0003adb <f_mount>
c0017892:	83 c4 10             	add    esp,0x10
c0017895:	b0 00                	mov    al,0x0
c0017897:	eb 17                	jmp    c00178b0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017899:	8d 76 00             	lea    esi,[esi+0x0]
c001789c:	a1 60 52 02 c0       	mov    eax,ds:0xc0025260
c00178a1:	40                   	inc    eax
c00178a2:	a3 60 52 02 c0       	mov    ds:0xc0025260,eax
c00178a7:	90                   	nop
c00178a8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00178af:	90                   	nop
c00178b0:	81 c4 4c 03 00 00    	add    esp,0x34c
c00178b6:	c3                   	ret    
c00178b7:	90                   	nop

c00178b8 <FAT::allocateSwapfile(char const*, int)>:
c00178b8:	55                   	push   ebp
c00178b9:	57                   	push   edi
c00178ba:	56                   	push   esi
c00178bb:	53                   	push   ebx
c00178bc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00178c2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00178cd:	83 ec 0c             	sub    esp,0xc
c00178d0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00178d7:	e8 85 12 ff ff       	call   c0008b61 <malloc>
c00178dc:	83 c4 10             	add    esp,0x10
c00178df:	89 c7                	mov    edi,eax
c00178e1:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c00178e6:	83 ec 04             	sub    esp,0x4
c00178e9:	50                   	push   eax
c00178ea:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00178f1:	57                   	push   edi
c00178f2:	e8 6f 45 ff ff       	call   c000be66 <File::File(char const*, Process*)>
c00178f7:	83 c4 10             	add    esp,0x10
c00178fa:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0017901:	83 ec 04             	sub    esp,0x4
c0017904:	8d 44 24 13          	lea    eax,[esp+0x13]
c0017908:	50                   	push   eax
c0017909:	8d 44 24 18          	lea    eax,[esp+0x18]
c001790d:	50                   	push   eax
c001790e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017915:	e8 b8 48 ff ff       	call   c000c1d2 <File::stat(unsigned long long*, bool*)>
c001791a:	83 c4 10             	add    esp,0x10
c001791d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017924:	c1 e0 14             	shl    eax,0x14
c0017927:	89 c7                	mov    edi,eax
c0017929:	89 c5                	mov    ebp,eax
c001792b:	c1 fd 1f             	sar    ebp,0x1f
c001792e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017932:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017936:	89 f9                	mov    ecx,edi
c0017938:	31 c1                	xor    ecx,eax
c001793a:	89 cb                	mov    ebx,ecx
c001793c:	89 e9                	mov    ecx,ebp
c001793e:	31 d1                	xor    ecx,edx
c0017940:	89 ce                	mov    esi,ecx
c0017942:	89 f0                	mov    eax,esi
c0017944:	09 d8                	or     eax,ebx
c0017946:	0f 84 9c 00 00 00    	je     c00179e8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001794c:	83 ec 0c             	sub    esp,0xc
c001794f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017956:	e8 43 47 ff ff       	call   c000c09e <File::unlink()>
c001795b:	83 c4 10             	add    esp,0x10
c001795e:	83 ec 08             	sub    esp,0x8
c0017961:	6a 12                	push   0x12
c0017963:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001796a:	e8 b7 45 ff ff       	call   c000bf26 <File::open(FileOpenMode)>
c001796f:	83 c4 10             	add    esp,0x10
c0017972:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017979:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001797f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017986:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001798d:	c1 e0 14             	shl    eax,0x14
c0017990:	83 ec 04             	sub    esp,0x4
c0017993:	6a 01                	push   0x1
c0017995:	50                   	push   eax
c0017996:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001799d:	e8 b3 d7 fe ff       	call   c0005155 <f_expand>
c00179a2:	83 c4 10             	add    esp,0x10
c00179a5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00179ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00179ae:	83 c0 10             	add    eax,0x10
c00179b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00179b3:	83 ec 0c             	sub    esp,0xc
c00179b6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00179ba:	52                   	push   edx
c00179bb:	8d 54 24 30          	lea    edx,[esp+0x30]
c00179bf:	52                   	push   edx
c00179c0:	6a 00                	push   0x0
c00179c2:	68 00 04 00 00       	push   0x400
c00179c7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00179ce:	ff d0                	call   eax
c00179d0:	83 c4 20             	add    esp,0x20
c00179d3:	83 ec 0c             	sub    esp,0xc
c00179d6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00179dd:	e8 a2 45 ff ff       	call   c000bf84 <File::close()>
c00179e2:	83 c4 10             	add    esp,0x10
c00179e5:	8d 76 00             	lea    esi,[esi+0x0]
c00179e8:	83 ec 08             	sub    esp,0x8
c00179eb:	6a 01                	push   0x1
c00179ed:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00179f4:	e8 2d 45 ff ff       	call   c000bf26 <File::open(FileOpenMode)>
c00179f9:	83 c4 10             	add    esp,0x10
c00179fc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017a03:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a05:	83 c0 0c             	add    eax,0xc
c0017a08:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a0a:	83 ec 0c             	sub    esp,0xc
c0017a0d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017a11:	52                   	push   edx
c0017a12:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0017a16:	52                   	push   edx
c0017a17:	6a 00                	push   0x0
c0017a19:	6a 04                	push   0x4
c0017a1b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017a22:	ff d0                	call   eax
c0017a24:	83 c4 20             	add    esp,0x20
c0017a27:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017a2e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017a34:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017a3b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0017a42:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017a45:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0017a4c:	83 ec 0c             	sub    esp,0xc
c0017a4f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017a56:	e8 29 45 ff ff       	call   c000bf84 <File::close()>
c0017a5b:	83 c4 10             	add    esp,0x10
c0017a5e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0017a65:	ba 00 00 00 00       	mov    edx,0x0
c0017a6a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0017a70:	5b                   	pop    ebx
c0017a71:	5e                   	pop    esi
c0017a72:	5f                   	pop    edi
c0017a73:	5d                   	pop    ebp
c0017a74:	c3                   	ret    
c0017a75:	90                   	nop
c0017a76:	66 90                	xchg   ax,ax

c0017a78 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0017a78:	57                   	push   edi
c0017a79:	56                   	push   esi
c0017a7a:	53                   	push   ebx
c0017a7b:	81 ec 50 02 00 00    	sub    esp,0x250
c0017a81:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0017a89:	74 0d                	je     c0017a98 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0017a8b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0017a93:	75 0f                	jne    c0017aa4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0017a95:	8d 76 00             	lea    esi,[esi+0x0]
c0017a98:	b8 04 00 00 00       	mov    eax,0x4
c0017a9d:	e9 36 01 00 00       	jmp    c0017bd8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017aa2:	66 90                	xchg   ax,ax
c0017aa4:	83 ec 08             	sub    esp,0x8
c0017aa7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017aae:	50                   	push   eax
c0017aaf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0017ab6:	e8 f8 ca fe ff       	call   c00045b3 <f_readdir>
c0017abb:	83 c4 10             	add    esp,0x10
c0017abe:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0017ac5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0017acc:	83 ec 0c             	sub    esp,0xc
c0017acf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017ad6:	83 c0 16             	add    eax,0x16
c0017ad9:	50                   	push   eax
c0017ada:	e8 81 8a fe ff       	call   c0000560 <strlen>
c0017adf:	83 c4 10             	add    esp,0x10
c0017ae2:	ba 00 00 00 00       	mov    edx,0x0
c0017ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017aeb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017aef:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0017af6:	25 ff 00 00 00       	and    eax,0xff
c0017afb:	83 e0 10             	and    eax,0x10
c0017afe:	74 08                	je     c0017b08 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0017b00:	b8 02 00 00 00       	mov    eax,0x2
c0017b05:	eb 09                	jmp    c0017b10 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0017b07:	90                   	nop
c0017b08:	b8 01 00 00 00       	mov    eax,0x1
c0017b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0017b10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b14:	83 ec 08             	sub    esp,0x8
c0017b17:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017b1e:	83 c0 16             	add    eax,0x16
c0017b21:	50                   	push   eax
c0017b22:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017b26:	83 c0 10             	add    eax,0x10
c0017b29:	50                   	push   eax
c0017b2a:	e8 f1 8a fe ff       	call   c0000620 <strcpy>
c0017b2f:	83 c4 10             	add    esp,0x10
c0017b32:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0017b39:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0017b40:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017b44:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0017b4b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0017b52:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0017b59:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0017b60:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0017b67:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0017b6e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0017b75:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0017b7c:	89 c6                	mov    esi,eax
c0017b7e:	89 d7                	mov    edi,edx
c0017b80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017b82:	89 c8                	mov    eax,ecx
c0017b84:	89 fa                	mov    edx,edi
c0017b86:	89 f3                	mov    ebx,esi
c0017b88:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0017b8f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0017b96:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0017b9d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0017ba4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0017baa:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0017bb1:	84 c0                	test   al,al
c0017bb3:	75 07                	jne    c0017bbc <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0017bb5:	b8 07 00 00 00       	mov    eax,0x7
c0017bba:	eb 1c                	jmp    c0017bd8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017bbc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0017bc3:	85 c0                	test   eax,eax
c0017bc5:	75 09                	jne    c0017bd0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0017bc7:	b8 00 00 00 00       	mov    eax,0x0
c0017bcc:	eb 0a                	jmp    c0017bd8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017bce:	66 90                	xchg   ax,ax
c0017bd0:	b8 01 00 00 00       	mov    eax,0x1
c0017bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0017bd8:	81 c4 50 02 00 00    	add    esp,0x250
c0017bde:	5b                   	pop    ebx
c0017bdf:	5e                   	pop    esi
c0017be0:	5f                   	pop    edi
c0017be1:	c3                   	ret    
c0017be2:	66 90                	xchg   ax,ax

c0017be4 <FAT::read(void*, unsigned long, void*, int*)>:
c0017be4:	83 ec 1c             	sub    esp,0x1c
c0017be7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017bec:	74 0a                	je     c0017bf8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0017bee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0017bf3:	75 0b                	jne    c0017c00 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0017bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0017bf8:	b8 04 00 00 00       	mov    eax,0x4
c0017bfd:	eb 41                	jmp    c0017c40 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0017bff:	90                   	nop
c0017c00:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c04:	50                   	push   eax
c0017c05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c0d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017c11:	e8 f2 c1 fe ff       	call   c0003e08 <f_read>
c0017c16:	83 c4 10             	add    esp,0x10
c0017c19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c21:	89 c2                	mov    edx,eax
c0017c23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c27:	89 10                	mov    DWORD PTR [eax],edx
c0017c29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c2d:	85 c0                	test   eax,eax
c0017c2f:	75 07                	jne    c0017c38 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0017c31:	b8 00 00 00 00       	mov    eax,0x0
c0017c36:	eb 08                	jmp    c0017c40 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0017c38:	b8 01 00 00 00       	mov    eax,0x1
c0017c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0017c40:	83 c4 1c             	add    esp,0x1c
c0017c43:	c3                   	ret    

c0017c44 <FAT::write(void*, unsigned long, void*, int*)>:
c0017c44:	83 ec 1c             	sub    esp,0x1c
c0017c47:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017c4c:	74 0a                	je     c0017c58 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0017c4e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0017c53:	75 0b                	jne    c0017c60 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0017c55:	8d 76 00             	lea    esi,[esi+0x0]
c0017c58:	b8 04 00 00 00       	mov    eax,0x4
c0017c5d:	eb 41                	jmp    c0017ca0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0017c5f:	90                   	nop
c0017c60:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c64:	50                   	push   eax
c0017c65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017c71:	e8 91 c3 fe ff       	call   c0004007 <f_write>
c0017c76:	83 c4 10             	add    esp,0x10
c0017c79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c81:	89 c2                	mov    edx,eax
c0017c83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c87:	89 10                	mov    DWORD PTR [eax],edx
c0017c89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c8d:	85 c0                	test   eax,eax
c0017c8f:	75 07                	jne    c0017c98 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0017c91:	b8 00 00 00 00       	mov    eax,0x0
c0017c96:	eb 08                	jmp    c0017ca0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0017c98:	b8 01 00 00 00       	mov    eax,0x1
c0017c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0017ca0:	83 c4 1c             	add    esp,0x1c
c0017ca3:	c3                   	ret    

c0017ca4 <FAT::close(void*)>:
c0017ca4:	83 ec 1c             	sub    esp,0x1c
c0017ca7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017cac:	75 0a                	jne    c0017cb8 <FAT::close(void*)+0x14>
c0017cae:	b8 04 00 00 00       	mov    eax,0x4
c0017cb3:	eb 3f                	jmp    c0017cf4 <FAT::close(void*)+0x50>
c0017cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0017cb8:	83 ec 0c             	sub    esp,0xc
c0017cbb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017cbf:	e8 2c c6 fe ff       	call   c00042f0 <f_close>
c0017cc4:	83 c4 10             	add    esp,0x10
c0017cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ccb:	83 ec 0c             	sub    esp,0xc
c0017cce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017cd2:	e8 9a 0e ff ff       	call   c0008b71 <free>
c0017cd7:	83 c4 10             	add    esp,0x10
c0017cda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cde:	85 c0                	test   eax,eax
c0017ce0:	75 0a                	jne    c0017cec <FAT::close(void*)+0x48>
c0017ce2:	b8 00 00 00 00       	mov    eax,0x0
c0017ce7:	eb 0b                	jmp    c0017cf4 <FAT::close(void*)+0x50>
c0017ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0017cec:	b8 01 00 00 00       	mov    eax,0x1
c0017cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0017cf4:	83 c4 1c             	add    esp,0x1c
c0017cf7:	c3                   	ret    

c0017cf8 <FAT::closeDir(void*)>:
c0017cf8:	83 ec 1c             	sub    esp,0x1c
c0017cfb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017d00:	75 0a                	jne    c0017d0c <FAT::closeDir(void*)+0x14>
c0017d02:	b8 04 00 00 00       	mov    eax,0x4
c0017d07:	eb 3f                	jmp    c0017d48 <FAT::closeDir(void*)+0x50>
c0017d09:	8d 76 00             	lea    esi,[esi+0x0]
c0017d0c:	83 ec 0c             	sub    esp,0xc
c0017d0f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017d13:	e8 79 c8 fe ff       	call   c0004591 <f_closedir>
c0017d18:	83 c4 10             	add    esp,0x10
c0017d1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d1f:	83 ec 0c             	sub    esp,0xc
c0017d22:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017d26:	e8 46 0e ff ff       	call   c0008b71 <free>
c0017d2b:	83 c4 10             	add    esp,0x10
c0017d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d32:	85 c0                	test   eax,eax
c0017d34:	75 0a                	jne    c0017d40 <FAT::closeDir(void*)+0x48>
c0017d36:	b8 00 00 00 00       	mov    eax,0x0
c0017d3b:	eb 0b                	jmp    c0017d48 <FAT::closeDir(void*)+0x50>
c0017d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d40:	b8 01 00 00 00       	mov    eax,0x1
c0017d45:	8d 76 00             	lea    esi,[esi+0x0]
c0017d48:	83 c4 1c             	add    esp,0x1c
c0017d4b:	c3                   	ret    

c0017d4c <FAT::seek(void*, unsigned long long)>:
c0017d4c:	83 ec 2c             	sub    esp,0x2c
c0017d4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017d53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d5f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017d64:	75 0a                	jne    c0017d70 <FAT::seek(void*, unsigned long long)+0x24>
c0017d66:	b8 04 00 00 00       	mov    eax,0x4
c0017d6b:	eb 33                	jmp    c0017da0 <FAT::seek(void*, unsigned long long)+0x54>
c0017d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d74:	83 ec 08             	sub    esp,0x8
c0017d77:	50                   	push   eax
c0017d78:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017d7c:	e8 9e c5 fe ff       	call   c000431f <f_lseek>
c0017d81:	83 c4 10             	add    esp,0x10
c0017d84:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d8c:	85 c0                	test   eax,eax
c0017d8e:	75 08                	jne    c0017d98 <FAT::seek(void*, unsigned long long)+0x4c>
c0017d90:	b8 00 00 00 00       	mov    eax,0x0
c0017d95:	eb 09                	jmp    c0017da0 <FAT::seek(void*, unsigned long long)+0x54>
c0017d97:	90                   	nop
c0017d98:	b8 01 00 00 00       	mov    eax,0x1
c0017d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0017da0:	83 c4 2c             	add    esp,0x2c
c0017da3:	c3                   	ret    

c0017da4 <fatWrapperReadDisk>:
c0017da4:	53                   	push   ebx
c0017da5:	83 ec 18             	sub    esp,0x18
c0017da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017db0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017db4:	25 ff 00 00 00       	and    eax,0xff
c0017db9:	8b 0c 85 40 42 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbdc0]
c0017dc0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017dc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dc8:	ba 00 00 00 00       	mov    edx,0x0
c0017dcd:	83 ec 0c             	sub    esp,0xc
c0017dd0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017dd4:	53                   	push   ebx
c0017dd5:	52                   	push   edx
c0017dd6:	50                   	push   eax
c0017dd7:	51                   	push   ecx
c0017dd8:	e8 fb 61 ff ff       	call   c000dfd8 <LogicalDisk::read(unsigned long long, int, void*)>
c0017ddd:	83 c4 20             	add    esp,0x20
c0017de0:	83 c4 18             	add    esp,0x18
c0017de3:	5b                   	pop    ebx
c0017de4:	c3                   	ret    
c0017de5:	8d 76 00             	lea    esi,[esi+0x0]

c0017de8 <fatWrapperWriteDisk>:
c0017de8:	53                   	push   ebx
c0017de9:	83 ec 18             	sub    esp,0x18
c0017dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017df0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017df4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017df8:	25 ff 00 00 00       	and    eax,0xff
c0017dfd:	8b 0c 85 40 42 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbdc0]
c0017e04:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017e08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e0c:	ba 00 00 00 00       	mov    edx,0x0
c0017e11:	83 ec 0c             	sub    esp,0xc
c0017e14:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017e18:	53                   	push   ebx
c0017e19:	52                   	push   edx
c0017e1a:	50                   	push   eax
c0017e1b:	51                   	push   ecx
c0017e1c:	e8 23 62 ff ff       	call   c000e044 <LogicalDisk::write(unsigned long long, int, void*)>
c0017e21:	83 c4 20             	add    esp,0x20
c0017e24:	83 c4 18             	add    esp,0x18
c0017e27:	5b                   	pop    ebx
c0017e28:	c3                   	ret    
c0017e29:	8d 76 00             	lea    esi,[esi+0x0]

c0017e2c <fatWrapperIoctl>:
c0017e2c:	53                   	push   ebx
c0017e2d:	83 ec 28             	sub    esp,0x28
c0017e30:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017e34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e38:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017e3c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017e40:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017e45:	75 35                	jne    c0017e7c <fatWrapperIoctl+0x50>
c0017e47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017e4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e4f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017e53:	25 ff 00 00 00       	and    eax,0xff
c0017e58:	8b 04 85 40 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbdc0]
c0017e5f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017e65:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017e6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e6f:	66 89 02             	mov    WORD PTR [edx],ax
c0017e72:	b8 00 00 00 00       	mov    eax,0x0
c0017e77:	e9 c4 00 00 00       	jmp    c0017f40 <fatWrapperIoctl+0x114>
c0017e7c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017e81:	75 75                	jne    c0017ef8 <fatWrapperIoctl+0xcc>
c0017e83:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017e87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e8b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017e8f:	25 ff 00 00 00       	and    eax,0xff
c0017e94:	8b 04 85 40 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbdc0]
c0017e9b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017ea1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017ea7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017ead:	89 c8                	mov    eax,ecx
c0017eaf:	89 da                	mov    edx,ebx
c0017eb1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017eb5:	c1 e0 0a             	shl    eax,0xa
c0017eb8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017ebc:	81 e1 ff 00 00 00    	and    ecx,0xff
c0017ec2:	8b 0c 8d 40 42 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbdc0]
c0017ec9:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017ecf:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0017ed5:	89 cb                	mov    ebx,ecx
c0017ed7:	c1 fb 1f             	sar    ebx,0x1f
c0017eda:	53                   	push   ebx
c0017edb:	51                   	push   ecx
c0017edc:	52                   	push   edx
c0017edd:	50                   	push   eax
c0017ede:	e8 7d 56 00 00       	call   c001d560 <__udivdi3>
c0017ee3:	83 c4 10             	add    esp,0x10
c0017ee6:	89 c2                	mov    edx,eax
c0017ee8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017eec:	89 10                	mov    DWORD PTR [eax],edx
c0017eee:	b8 00 00 00 00       	mov    eax,0x0
c0017ef3:	eb 4b                	jmp    c0017f40 <fatWrapperIoctl+0x114>
c0017ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ef8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017efd:	75 09                	jne    c0017f08 <fatWrapperIoctl+0xdc>
c0017eff:	b8 00 00 00 00       	mov    eax,0x0
c0017f04:	eb 3a                	jmp    c0017f40 <fatWrapperIoctl+0x114>
c0017f06:	66 90                	xchg   ax,ax
c0017f08:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017f0d:	75 19                	jne    c0017f28 <fatWrapperIoctl+0xfc>
c0017f0f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017f13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f1b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017f21:	b8 00 00 00 00       	mov    eax,0x0
c0017f26:	eb 18                	jmp    c0017f40 <fatWrapperIoctl+0x114>
c0017f28:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017f2d:	75 09                	jne    c0017f38 <fatWrapperIoctl+0x10c>
c0017f2f:	b8 00 00 00 00       	mov    eax,0x0
c0017f34:	eb 0a                	jmp    c0017f40 <fatWrapperIoctl+0x114>
c0017f36:	66 90                	xchg   ax,ax
c0017f38:	b8 04 00 00 00       	mov    eax,0x4
c0017f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f40:	83 c4 28             	add    esp,0x28
c0017f43:	5b                   	pop    ebx
c0017f44:	c3                   	ret    
c0017f45:	90                   	nop
c0017f46:	66 90                	xchg   ax,ax

c0017f48 <FAT::FAT()>:
c0017f48:	83 ec 1c             	sub    esp,0x1c
c0017f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4f:	83 ec 0c             	sub    esp,0xc
c0017f52:	50                   	push   eax
c0017f53:	e8 ba 3c ff ff       	call   c000bc12 <Filesystem::Filesystem()>
c0017f58:	83 c4 10             	add    esp,0x10
c0017f5b:	ba d0 02 02 c0       	mov    edx,0xc00202d0
c0017f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f64:	89 10                	mov    DWORD PTR [eax],edx
c0017f66:	c7 05 60 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025260,0x0
c0017f70:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f78:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017f7d:	7f 15                	jg     c0017f94 <FAT::FAT()+0x4c>
c0017f7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f83:	c7 04 85 80 52 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdad80],0xffffffff
c0017f8e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017f92:	eb e4                	jmp    c0017f78 <FAT::FAT()+0x30>
c0017f94:	90                   	nop
c0017f95:	83 c4 1c             	add    esp,0x1c
c0017f98:	c3                   	ret    
c0017f99:	90                   	nop
c0017f9a:	66 90                	xchg   ax,ax

c0017f9c <FAT::fixFilepath(char*)>:
c0017f9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fa0:	8a 00                	mov    al,BYTE PTR [eax]
c0017fa2:	3c 40                	cmp    al,0x40
c0017fa4:	7e 2e                	jle    c0017fd4 <FAT::fixFilepath(char*)+0x38>
c0017fa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017faa:	8a 00                	mov    al,BYTE PTR [eax]
c0017fac:	83 e8 41             	sub    eax,0x41
c0017faf:	88 c2                	mov    dl,al
c0017fb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fb5:	88 10                	mov    BYTE PTR [eax],dl
c0017fb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fbb:	8a 00                	mov    al,BYTE PTR [eax]
c0017fbd:	0f be c0             	movsx  eax,al
c0017fc0:	8b 04 85 80 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdad80]
c0017fc7:	83 c0 30             	add    eax,0x30
c0017fca:	88 c2                	mov    dl,al
c0017fcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fd0:	88 10                	mov    BYTE PTR [eax],dl
c0017fd2:	66 90                	xchg   ax,ax
c0017fd4:	90                   	nop
c0017fd5:	c3                   	ret    
c0017fd6:	66 90                	xchg   ax,ax

c0017fd8 <FAT::open(char const*, void**, FileOpenMode)>:
c0017fd8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017fde:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017fe6:	74 0c                	je     c0017ff4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017fe8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017ff0:	75 0e                	jne    c0018000 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0017ff2:	66 90                	xchg   ax,ax
c0017ff4:	b8 04 00 00 00       	mov    eax,0x4
c0017ff9:	e9 0a 01 00 00       	jmp    c0018108 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017ffe:	66 90                	xchg   ax,ax
c0018000:	83 ec 08             	sub    esp,0x8
c0018003:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001800a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001800e:	50                   	push   eax
c001800f:	e8 0c 86 fe ff       	call   c0000620 <strcpy>
c0018014:	83 c4 10             	add    esp,0x10
c0018017:	83 ec 08             	sub    esp,0x8
c001801a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001801e:	50                   	push   eax
c001801f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018026:	e8 71 ff ff ff       	call   c0017f9c <FAT::fixFilepath(char*)>
c001802b:	83 c4 10             	add    esp,0x10
c001802e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018036:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001803d:	83 e0 01             	and    eax,0x1
c0018040:	74 0a                	je     c001804c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0018042:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001804a:	66 90                	xchg   ax,ax
c001804c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018053:	83 e0 04             	and    eax,0x4
c0018056:	74 10                	je     c0018068 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0018058:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0018060:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0018068:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001806f:	83 e0 02             	and    eax,0x2
c0018072:	74 08                	je     c001807c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0018074:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001807c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018083:	83 e0 08             	and    eax,0x8
c0018086:	74 08                	je     c0018090 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0018088:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0018090:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018097:	83 e0 10             	and    eax,0x10
c001809a:	74 08                	je     c00180a4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001809c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00180a4:	83 ec 0c             	sub    esp,0xc
c00180a7:	68 28 02 00 00       	push   0x228
c00180ac:	e8 b0 0a ff ff       	call   c0008b61 <malloc>
c00180b1:	83 c4 10             	add    esp,0x10
c00180b4:	89 c2                	mov    edx,eax
c00180b6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00180bd:	89 10                	mov    DWORD PTR [eax],edx
c00180bf:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00180c6:	31 d2                	xor    edx,edx
c00180c8:	88 c2                	mov    dl,al
c00180ca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00180d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00180d3:	83 ec 04             	sub    esp,0x4
c00180d6:	52                   	push   edx
c00180d7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00180db:	52                   	push   edx
c00180dc:	50                   	push   eax
c00180dd:	e8 5b ba fe ff       	call   c0003b3d <f_open>
c00180e2:	83 c4 10             	add    esp,0x10
c00180e5:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00180ec:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00180f4:	74 0a                	je     c0018100 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00180f6:	b8 01 00 00 00       	mov    eax,0x1
c00180fb:	eb 0b                	jmp    c0018108 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00180fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018100:	b8 00 00 00 00       	mov    eax,0x0
c0018105:	8d 76 00             	lea    esi,[esi+0x0]
c0018108:	81 c4 1c 01 00 00    	add    esp,0x11c
c001810e:	c3                   	ret    
c001810f:	90                   	nop

c0018110 <FAT::openDir(char const*, void**)>:
c0018110:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018116:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001811e:	74 0c                	je     c001812c <FAT::openDir(char const*, void**)+0x1c>
c0018120:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018128:	75 0e                	jne    c0018138 <FAT::openDir(char const*, void**)+0x28>
c001812a:	66 90                	xchg   ax,ax
c001812c:	b8 04 00 00 00       	mov    eax,0x4
c0018131:	e9 82 00 00 00       	jmp    c00181b8 <FAT::openDir(char const*, void**)+0xa8>
c0018136:	66 90                	xchg   ax,ax
c0018138:	83 ec 08             	sub    esp,0x8
c001813b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018142:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018146:	50                   	push   eax
c0018147:	e8 d4 84 fe ff       	call   c0000620 <strcpy>
c001814c:	83 c4 10             	add    esp,0x10
c001814f:	83 ec 08             	sub    esp,0x8
c0018152:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018156:	50                   	push   eax
c0018157:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001815e:	e8 39 fe ff ff       	call   c0017f9c <FAT::fixFilepath(char*)>
c0018163:	83 c4 10             	add    esp,0x10
c0018166:	83 ec 0c             	sub    esp,0xc
c0018169:	6a 30                	push   0x30
c001816b:	e8 f1 09 ff ff       	call   c0008b61 <malloc>
c0018170:	83 c4 10             	add    esp,0x10
c0018173:	89 c2                	mov    edx,eax
c0018175:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001817c:	89 10                	mov    DWORD PTR [eax],edx
c001817e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018185:	8b 00                	mov    eax,DWORD PTR [eax]
c0018187:	83 ec 08             	sub    esp,0x8
c001818a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001818e:	52                   	push   edx
c001818f:	50                   	push   eax
c0018190:	e8 31 c3 fe ff       	call   c00044c6 <f_opendir>
c0018195:	83 c4 10             	add    esp,0x10
c0018198:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001819f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00181a7:	74 07                	je     c00181b0 <FAT::openDir(char const*, void**)+0xa0>
c00181a9:	b8 01 00 00 00       	mov    eax,0x1
c00181ae:	eb 08                	jmp    c00181b8 <FAT::openDir(char const*, void**)+0xa8>
c00181b0:	b8 00 00 00 00       	mov    eax,0x0
c00181b5:	8d 76 00             	lea    esi,[esi+0x0]
c00181b8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00181be:	c3                   	ret    
c00181bf:	90                   	nop

c00181c0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00181c0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00181c6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00181ce:	75 0c                	jne    c00181dc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00181d0:	b8 04 00 00 00       	mov    eax,0x4
c00181d5:	e9 d6 00 00 00       	jmp    c00182b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00181da:	66 90                	xchg   ax,ax
c00181dc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00181e4:	75 0a                	jne    c00181f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00181e6:	b8 04 00 00 00       	mov    eax,0x4
c00181eb:	e9 c0 00 00 00       	jmp    c00182b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00181f0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00181f8:	75 0a                	jne    c0018204 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00181fa:	b8 04 00 00 00       	mov    eax,0x4
c00181ff:	e9 ac 00 00 00       	jmp    c00182b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018204:	83 ec 08             	sub    esp,0x8
c0018207:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001820e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018215:	50                   	push   eax
c0018216:	e8 05 84 fe ff       	call   c0000620 <strcpy>
c001821b:	83 c4 10             	add    esp,0x10
c001821e:	83 ec 08             	sub    esp,0x8
c0018221:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018228:	50                   	push   eax
c0018229:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018230:	e8 67 fd ff ff       	call   c0017f9c <FAT::fixFilepath(char*)>
c0018235:	83 c4 10             	add    esp,0x10
c0018238:	83 ec 08             	sub    esp,0x8
c001823b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001823f:	50                   	push   eax
c0018240:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018247:	50                   	push   eax
c0018248:	e8 f8 c3 fe ff       	call   c0004645 <f_stat>
c001824d:	83 c4 10             	add    esp,0x10
c0018250:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018257:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001825e:	85 c0                	test   eax,eax
c0018260:	74 0a                	je     c001826c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018262:	83 f8 04             	cmp    eax,0x4
c0018265:	74 39                	je     c00182a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018267:	eb 3f                	jmp    c00182a8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018269:	8d 76 00             	lea    esi,[esi+0x0]
c001826c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018270:	25 ff 00 00 00       	and    eax,0xff
c0018275:	83 e0 10             	and    eax,0x10
c0018278:	0f 95 c2             	setne  dl
c001827b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018282:	88 10                	mov    BYTE PTR [eax],dl
c0018284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018288:	ba 00 00 00 00       	mov    edx,0x0
c001828d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018294:	89 01                	mov    DWORD PTR [ecx],eax
c0018296:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018299:	b8 00 00 00 00       	mov    eax,0x0
c001829e:	eb 10                	jmp    c00182b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00182a0:	b8 02 00 00 00       	mov    eax,0x2
c00182a5:	eb 09                	jmp    c00182b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00182a7:	90                   	nop
c00182a8:	b8 01 00 00 00       	mov    eax,0x1
c00182ad:	8d 76 00             	lea    esi,[esi+0x0]
c00182b0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00182b6:	c3                   	ret    
c00182b7:	90                   	nop

c00182b8 <FAT::unlink(char const*)>:
c00182b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00182be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00182c6:	75 08                	jne    c00182d0 <FAT::unlink(char const*)+0x18>
c00182c8:	b8 04 00 00 00       	mov    eax,0x4
c00182cd:	eb 61                	jmp    c0018330 <FAT::unlink(char const*)+0x78>
c00182cf:	90                   	nop
c00182d0:	83 ec 08             	sub    esp,0x8
c00182d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00182da:	8d 44 24 18          	lea    eax,[esp+0x18]
c00182de:	50                   	push   eax
c00182df:	e8 3c 83 fe ff       	call   c0000620 <strcpy>
c00182e4:	83 c4 10             	add    esp,0x10
c00182e7:	83 ec 08             	sub    esp,0x8
c00182ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00182ee:	50                   	push   eax
c00182ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00182f6:	e8 a1 fc ff ff       	call   c0017f9c <FAT::fixFilepath(char*)>
c00182fb:	83 c4 10             	add    esp,0x10
c00182fe:	83 ec 0c             	sub    esp,0xc
c0018301:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018305:	50                   	push   eax
c0018306:	e8 9f c5 fe ff       	call   c00048aa <f_unlink>
c001830b:	83 c4 10             	add    esp,0x10
c001830e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018315:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001831c:	85 c0                	test   eax,eax
c001831e:	75 08                	jne    c0018328 <FAT::unlink(char const*)+0x70>
c0018320:	b8 00 00 00 00       	mov    eax,0x0
c0018325:	eb 09                	jmp    c0018330 <FAT::unlink(char const*)+0x78>
c0018327:	90                   	nop
c0018328:	b8 01 00 00 00       	mov    eax,0x1
c001832d:	8d 76 00             	lea    esi,[esi+0x0]
c0018330:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018336:	c3                   	ret    
c0018337:	90                   	nop

c0018338 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018338:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001833e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0018345:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001834c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018350:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018354:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001835c:	75 0a                	jne    c0018368 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001835e:	b8 04 00 00 00       	mov    eax,0x4
c0018363:	e9 54 01 00 00       	jmp    c00184bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0018368:	83 ec 08             	sub    esp,0x8
c001836b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018372:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018376:	50                   	push   eax
c0018377:	e8 a4 82 fe ff       	call   c0000620 <strcpy>
c001837c:	83 c4 10             	add    esp,0x10
c001837f:	83 ec 08             	sub    esp,0x8
c0018382:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018386:	50                   	push   eax
c0018387:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001838e:	e8 09 fc ff ff       	call   c0017f9c <FAT::fixFilepath(char*)>
c0018393:	83 c4 10             	add    esp,0x10
c0018396:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001839e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00183a6:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183aa:	25 ff 00 00 00       	and    eax,0xff
c00183af:	83 e0 01             	and    eax,0x1
c00183b2:	74 08                	je     c00183bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00183b4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00183bc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183c0:	25 ff 00 00 00       	and    eax,0xff
c00183c5:	83 e0 02             	and    eax,0x2
c00183c8:	74 0a                	je     c00183d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00183ca:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00183d2:	66 90                	xchg   ax,ax
c00183d4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183d8:	25 ff 00 00 00       	and    eax,0xff
c00183dd:	83 e0 04             	and    eax,0x4
c00183e0:	74 0a                	je     c00183ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00183e2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00183ea:	66 90                	xchg   ax,ax
c00183ec:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183f0:	25 ff 00 00 00       	and    eax,0xff
c00183f5:	83 e0 08             	and    eax,0x8
c00183f8:	74 0a                	je     c0018404 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00183fa:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0018402:	66 90                	xchg   ax,ax
c0018404:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018408:	25 ff 00 00 00       	and    eax,0xff
c001840d:	83 e0 01             	and    eax,0x1
c0018410:	74 0a                	je     c001841c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0018412:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001841a:	66 90                	xchg   ax,ax
c001841c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018420:	25 ff 00 00 00       	and    eax,0xff
c0018425:	83 e0 02             	and    eax,0x2
c0018428:	74 0a                	je     c0018434 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001842a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0018432:	66 90                	xchg   ax,ax
c0018434:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018438:	25 ff 00 00 00       	and    eax,0xff
c001843d:	83 e0 04             	and    eax,0x4
c0018440:	74 0a                	je     c001844c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0018442:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001844a:	66 90                	xchg   ax,ax
c001844c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018450:	25 ff 00 00 00       	and    eax,0xff
c0018455:	83 e0 08             	and    eax,0x8
c0018458:	74 0a                	je     c0018464 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001845a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0018462:	66 90                	xchg   ax,ax
c0018464:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001846b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0018472:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018479:	31 d2                	xor    edx,edx
c001847b:	88 c2                	mov    dl,al
c001847d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018484:	25 ff 00 00 00       	and    eax,0xff
c0018489:	83 ec 04             	sub    esp,0x4
c001848c:	52                   	push   edx
c001848d:	50                   	push   eax
c001848e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018492:	50                   	push   eax
c0018493:	e8 85 c8 fe ff       	call   c0004d1d <f_chmod>
c0018498:	83 c4 10             	add    esp,0x10
c001849b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00184a2:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00184a9:	85 c0                	test   eax,eax
c00184ab:	75 07                	jne    c00184b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00184ad:	b8 00 00 00 00       	mov    eax,0x0
c00184b2:	eb 08                	jmp    c00184bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00184b4:	b8 01 00 00 00       	mov    eax,0x1
c00184b9:	8d 76 00             	lea    esi,[esi+0x0]
c00184bc:	81 c4 2c 01 00 00    	add    esp,0x12c
c00184c2:	c3                   	ret    
c00184c3:	90                   	nop

c00184c4 <FAT::rename(char const*, char const*)>:
c00184c4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00184ca:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00184d2:	74 0c                	je     c00184e0 <FAT::rename(char const*, char const*)+0x1c>
c00184d4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00184dc:	75 0e                	jne    c00184ec <FAT::rename(char const*, char const*)+0x28>
c00184de:	66 90                	xchg   ax,ax
c00184e0:	b8 04 00 00 00       	mov    eax,0x4
c00184e5:	e9 9e 00 00 00       	jmp    c0018588 <FAT::rename(char const*, char const*)+0xc4>
c00184ea:	66 90                	xchg   ax,ax
c00184ec:	83 ec 08             	sub    esp,0x8
c00184ef:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00184f6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00184fd:	50                   	push   eax
c00184fe:	e8 1d 81 fe ff       	call   c0000620 <strcpy>
c0018503:	83 c4 10             	add    esp,0x10
c0018506:	83 ec 08             	sub    esp,0x8
c0018509:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0018510:	50                   	push   eax
c0018511:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018518:	e8 7f fa ff ff       	call   c0017f9c <FAT::fixFilepath(char*)>
c001851d:	83 c4 10             	add    esp,0x10
c0018520:	83 ec 08             	sub    esp,0x8
c0018523:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001852a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001852e:	50                   	push   eax
c001852f:	e8 ec 80 fe ff       	call   c0000620 <strcpy>
c0018534:	83 c4 10             	add    esp,0x10
c0018537:	83 ec 08             	sub    esp,0x8
c001853a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001853e:	50                   	push   eax
c001853f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018546:	e8 51 fa ff ff       	call   c0017f9c <FAT::fixFilepath(char*)>
c001854b:	83 c4 10             	add    esp,0x10
c001854e:	83 ec 08             	sub    esp,0x8
c0018551:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018555:	50                   	push   eax
c0018556:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001855d:	50                   	push   eax
c001855e:	e8 04 c6 fe ff       	call   c0004b67 <f_rename>
c0018563:	83 c4 10             	add    esp,0x10
c0018566:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001856d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0018574:	85 c0                	test   eax,eax
c0018576:	75 08                	jne    c0018580 <FAT::rename(char const*, char const*)+0xbc>
c0018578:	b8 00 00 00 00       	mov    eax,0x0
c001857d:	eb 09                	jmp    c0018588 <FAT::rename(char const*, char const*)+0xc4>
c001857f:	90                   	nop
c0018580:	b8 01 00 00 00       	mov    eax,0x1
c0018585:	8d 76 00             	lea    esi,[esi+0x0]
c0018588:	81 c4 1c 02 00 00    	add    esp,0x21c
c001858e:	c3                   	ret    
c001858f:	90                   	nop

c0018590 <FAT::mkdir(char const*)>:
c0018590:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018596:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001859e:	75 08                	jne    c00185a8 <FAT::mkdir(char const*)+0x18>
c00185a0:	b8 04 00 00 00       	mov    eax,0x4
c00185a5:	eb 61                	jmp    c0018608 <FAT::mkdir(char const*)+0x78>
c00185a7:	90                   	nop
c00185a8:	83 ec 08             	sub    esp,0x8
c00185ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00185b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00185b6:	50                   	push   eax
c00185b7:	e8 64 80 fe ff       	call   c0000620 <strcpy>
c00185bc:	83 c4 10             	add    esp,0x10
c00185bf:	83 ec 08             	sub    esp,0x8
c00185c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00185c6:	50                   	push   eax
c00185c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00185ce:	e8 c9 f9 ff ff       	call   c0017f9c <FAT::fixFilepath(char*)>
c00185d3:	83 c4 10             	add    esp,0x10
c00185d6:	83 ec 0c             	sub    esp,0xc
c00185d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00185dd:	50                   	push   eax
c00185de:	e8 e9 c3 fe ff       	call   c00049cc <f_mkdir>
c00185e3:	83 c4 10             	add    esp,0x10
c00185e6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00185ed:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00185f4:	85 c0                	test   eax,eax
c00185f6:	75 08                	jne    c0018600 <FAT::mkdir(char const*)+0x70>
c00185f8:	b8 00 00 00 00       	mov    eax,0x0
c00185fd:	eb 09                	jmp    c0018608 <FAT::mkdir(char const*)+0x78>
c00185ff:	90                   	nop
c0018600:	b8 01 00 00 00       	mov    eax,0x1
c0018605:	8d 76 00             	lea    esi,[esi+0x0]
c0018608:	81 c4 1c 01 00 00    	add    esp,0x11c
c001860e:	c3                   	ret    
c001860f:	90                   	nop

c0018610 <FAT::exists(char const*)>:
c0018610:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018616:	83 ec 08             	sub    esp,0x8
c0018619:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018620:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018624:	50                   	push   eax
c0018625:	e8 f6 7f fe ff       	call   c0000620 <strcpy>
c001862a:	83 c4 10             	add    esp,0x10
c001862d:	83 ec 08             	sub    esp,0x8
c0018630:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018634:	50                   	push   eax
c0018635:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001863c:	e8 5b f9 ff ff       	call   c0017f9c <FAT::fixFilepath(char*)>
c0018641:	83 c4 10             	add    esp,0x10
c0018644:	83 ec 08             	sub    esp,0x8
c0018647:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001864e:	50                   	push   eax
c001864f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018653:	50                   	push   eax
c0018654:	e8 ec bf fe ff       	call   c0004645 <f_stat>
c0018659:	83 c4 10             	add    esp,0x10
c001865c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018663:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001866a:	85 c0                	test   eax,eax
c001866c:	75 06                	jne    c0018674 <FAT::exists(char const*)+0x64>
c001866e:	b0 01                	mov    al,0x1
c0018670:	eb 06                	jmp    c0018678 <FAT::exists(char const*)+0x68>
c0018672:	66 90                	xchg   ax,ax
c0018674:	b0 00                	mov    al,0x0
c0018676:	66 90                	xchg   ax,ax
c0018678:	81 c4 2c 02 00 00    	add    esp,0x22c
c001867e:	c3                   	ret    
c001867f:	90                   	nop

c0018680 <isoReadDiscSectorHelper>:
c0018680:	83 ec 2c             	sub    esp,0x2c
c0018683:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018687:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001868b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0018690:	83 e8 41             	sub    eax,0x41
c0018693:	8b 0c 85 40 42 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbdc0]
c001869a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001869e:	ba 00 00 00 00       	mov    edx,0x0
c00186a3:	83 ec 0c             	sub    esp,0xc
c00186a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00186aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00186ae:	52                   	push   edx
c00186af:	50                   	push   eax
c00186b0:	51                   	push   ecx
c00186b1:	e8 22 59 ff ff       	call   c000dfd8 <LogicalDisk::read(unsigned long long, int, void*)>
c00186b6:	83 c4 20             	add    esp,0x20
c00186b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00186bd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00186c2:	74 0c                	je     c00186d0 <isoReadDiscSectorHelper+0x50>
c00186c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00186c8:	c1 e0 0b             	shl    eax,0xb
c00186cb:	eb 0b                	jmp    c00186d8 <isoReadDiscSectorHelper+0x58>
c00186cd:	8d 76 00             	lea    esi,[esi+0x0]
c00186d0:	b8 00 00 00 00       	mov    eax,0x0
c00186d5:	8d 76 00             	lea    esi,[esi+0x0]
c00186d8:	83 c4 2c             	add    esp,0x2c
c00186db:	c3                   	ret    

c00186dc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00186dc:	b8 08 00 00 00       	mov    eax,0x8
c00186e1:	c3                   	ret    

c00186e2 <ISO9660::seek(void*, unsigned long long)>:
c00186e2:	53                   	push   ebx
c00186e3:	b8 04 00 00 00       	mov    eax,0x4
c00186e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00186ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00186f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00186f4:	85 d2                	test   edx,edx
c00186f6:	74 17                	je     c001870f <ISO9660::seek(void*, unsigned long long)+0x2d>
c00186f8:	89 c8                	mov    eax,ecx
c00186fa:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00186fd:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0018700:	b8 01 00 00 00       	mov    eax,0x1
c0018705:	73 08                	jae    c001870f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0018707:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001870a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001870d:	31 c0                	xor    eax,eax
c001870f:	5b                   	pop    ebx
c0018710:	c3                   	ret    
c0018711:	90                   	nop

c0018712 <ISO9660::tell(void*, unsigned long long*)>:
c0018712:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018716:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001871a:	85 d2                	test   edx,edx
c001871c:	74 12                	je     c0018730 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001871e:	85 c0                	test   eax,eax
c0018720:	74 0e                	je     c0018730 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0018722:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018725:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0018728:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001872b:	89 10                	mov    DWORD PTR [eax],edx
c001872d:	31 c0                	xor    eax,eax
c001872f:	c3                   	ret    
c0018730:	b8 04 00 00 00       	mov    eax,0x4
c0018735:	c3                   	ret    

c0018736 <ISO9660::getName()>:
c0018736:	b8 30 03 02 c0       	mov    eax,0xc0020330
c001873b:	c3                   	ret    

c001873c <ISO9660::stat(void*, unsigned long long*)>:
c001873c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018740:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018744:	85 d2                	test   edx,edx
c0018746:	74 12                	je     c001875a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0018748:	85 c0                	test   eax,eax
c001874a:	74 0e                	je     c001875a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001874c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001874f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0018752:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0018755:	89 10                	mov    DWORD PTR [eax],edx
c0018757:	31 c0                	xor    eax,eax
c0018759:	c3                   	ret    
c001875a:	b8 04 00 00 00       	mov    eax,0x4
c001875f:	c3                   	ret    

c0018760 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0018760:	b8 01 00 00 00       	mov    eax,0x1
c0018765:	c3                   	ret    

c0018766 <ISO9660::unlink(char const*)>:
c0018766:	b8 01 00 00 00       	mov    eax,0x1
c001876b:	c3                   	ret    

c001876c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001876c:	b8 01 00 00 00       	mov    eax,0x1
c0018771:	c3                   	ret    

c0018772 <ISO9660::rename(char const*, char const*)>:
c0018772:	b8 01 00 00 00       	mov    eax,0x1
c0018777:	c3                   	ret    

c0018778 <ISO9660::mkdir(char const*)>:
c0018778:	b8 01 00 00 00       	mov    eax,0x1
c001877d:	c3                   	ret    

c001877e <ISO9660::close(void*)>:
c001877e:	83 ec 0c             	sub    esp,0xc
c0018781:	b8 04 00 00 00       	mov    eax,0x4
c0018786:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001878a:	85 d2                	test   edx,edx
c001878c:	74 0e                	je     c001879c <ISO9660::close(void*)+0x1e>
c001878e:	83 ec 0c             	sub    esp,0xc
c0018791:	52                   	push   edx
c0018792:	e8 da 03 ff ff       	call   c0008b71 <free>
c0018797:	83 c4 10             	add    esp,0x10
c001879a:	31 c0                	xor    eax,eax
c001879c:	83 c4 0c             	add    esp,0xc
c001879f:	c3                   	ret    

c00187a0 <ISO9660::closeDir(void*)>:
c00187a0:	83 ec 0c             	sub    esp,0xc
c00187a3:	b8 04 00 00 00       	mov    eax,0x4
c00187a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00187ac:	85 d2                	test   edx,edx
c00187ae:	74 0e                	je     c00187be <ISO9660::closeDir(void*)+0x1e>
c00187b0:	83 ec 0c             	sub    esp,0xc
c00187b3:	52                   	push   edx
c00187b4:	e8 b8 03 ff ff       	call   c0008b71 <free>
c00187b9:	83 c4 10             	add    esp,0x10
c00187bc:	31 c0                	xor    eax,eax
c00187be:	83 c4 0c             	add    esp,0xc
c00187c1:	c3                   	ret    

c00187c2 <ISO9660::~ISO9660()>:
c00187c2:	83 ec 0c             	sub    esp,0xc
c00187c5:	ba a8 03 02 c0       	mov    edx,0xc00203a8
c00187ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187ce:	89 10                	mov    DWORD PTR [eax],edx
c00187d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187d4:	83 ec 0c             	sub    esp,0xc
c00187d7:	50                   	push   eax
c00187d8:	e8 59 34 ff ff       	call   c000bc36 <Filesystem::~Filesystem()>
c00187dd:	83 c4 10             	add    esp,0x10
c00187e0:	90                   	nop
c00187e1:	83 c4 0c             	add    esp,0xc
c00187e4:	c3                   	ret    
c00187e5:	90                   	nop

c00187e6 <ISO9660::~ISO9660()>:
c00187e6:	83 ec 0c             	sub    esp,0xc
c00187e9:	83 ec 0c             	sub    esp,0xc
c00187ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187f0:	e8 cd ff ff ff       	call   c00187c2 <ISO9660::~ISO9660()>
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	83 ec 08             	sub    esp,0x8
c00187fb:	6a 08                	push   0x8
c00187fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018801:	e8 f4 2f ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c0018806:	83 c4 10             	add    esp,0x10
c0018809:	83 c4 0c             	add    esp,0xc
c001880c:	c3                   	ret    

c001880d <__memmem(unsigned char*, int, unsigned char*, int)>:
c001880d:	55                   	push   ebp
c001880e:	31 c9                	xor    ecx,ecx
c0018810:	57                   	push   edi
c0018811:	56                   	push   esi
c0018812:	53                   	push   ebx
c0018813:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0018817:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001881b:	89 eb                	mov    ebx,ebp
c001881d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0018821:	39 ce                	cmp    esi,ecx
c0018823:	7e 17                	jle    c001883c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0018825:	31 d2                	xor    edx,edx
c0018827:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001882b:	7d 13                	jge    c0018840 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001882d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018831:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0018834:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0018837:	75 0d                	jne    c0018846 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0018839:	42                   	inc    edx
c001883a:	eb eb                	jmp    c0018827 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001883c:	31 c0                	xor    eax,eax
c001883e:	eb 0a                	jmp    c001884a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0018840:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0018844:	eb 04                	jmp    c001884a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0018846:	41                   	inc    ecx
c0018847:	43                   	inc    ebx
c0018848:	eb d7                	jmp    c0018821 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001884a:	5b                   	pop    ebx
c001884b:	5e                   	pop    esi
c001884c:	5f                   	pop    edi
c001884d:	5d                   	pop    ebp
c001884e:	c3                   	ret    

c001884f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001884f:	57                   	push   edi
c0018850:	56                   	push   esi
c0018851:	53                   	push   ebx
c0018852:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018856:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001885a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001885e:	39 35 60 53 02 c0    	cmp    DWORD PTR ds:0xc0025360,esi
c0018864:	75 08                	jne    c001886e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0018866:	38 1d d4 0c 02 c0    	cmp    BYTE PTR ds:0xc0020cd4,bl
c001886c:	74 59                	je     c00188c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c001886e:	83 ec 0c             	sub    esp,0xc
c0018871:	31 d2                	xor    edx,edx
c0018873:	68 80 53 02 c0       	push   0xc0025380
c0018878:	0f be c3             	movsx  eax,bl
c001887b:	6a 01                	push   0x1
c001887d:	52                   	push   edx
c001887e:	56                   	push   esi
c001887f:	ff 34 85 3c 41 02 c0 	push   DWORD PTR [eax*4-0x3ffdbec4]
c0018886:	e8 4d 57 ff ff       	call   c000dfd8 <LogicalDisk::read(unsigned long long, int, void*)>
c001888b:	83 c4 20             	add    esp,0x20
c001888e:	85 c0                	test   eax,eax
c0018890:	75 0e                	jne    c00188a0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0018892:	89 35 60 53 02 c0    	mov    DWORD PTR ds:0xc0025360,esi
c0018898:	88 1d d4 0c 02 c0    	mov    BYTE PTR ds:0xc0020cd4,bl
c001889e:	eb 27                	jmp    c00188c7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c00188a0:	83 ec 0c             	sub    esp,0xc
c00188a3:	68 4b 03 02 c0       	push   0xc002034b
c00188a8:	e8 43 30 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c00188ad:	83 c4 0c             	add    esp,0xc
c00188b0:	68 00 08 00 00       	push   0x800
c00188b5:	6a 00                	push   0x0
c00188b7:	57                   	push   edi
c00188b8:	e8 33 7c fe ff       	call   c00004f0 <memset>
c00188bd:	83 c4 10             	add    esp,0x10
c00188c0:	b8 01 00 00 00       	mov    eax,0x1
c00188c5:	eb 0e                	jmp    c00188d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c00188c7:	be 80 53 02 c0       	mov    esi,0xc0025380
c00188cc:	b9 00 08 00 00       	mov    ecx,0x800
c00188d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00188d3:	31 c0                	xor    eax,eax
c00188d5:	5b                   	pop    ebx
c00188d6:	5e                   	pop    esi
c00188d7:	5f                   	pop    edi
c00188d8:	c3                   	ret    
c00188d9:	90                   	nop

c00188da <ISO9660::tryMount(LogicalDisk*, int)>:
c00188da:	81 ec 10 08 00 00    	sub    esp,0x810
c00188e0:	c7 05 60 53 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0025360,0xdeadbeef
c00188ea:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00188f1:	83 c0 41             	add    eax,0x41
c00188f4:	0f be c0             	movsx  eax,al
c00188f7:	50                   	push   eax
c00188f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00188fc:	50                   	push   eax
c00188fd:	6a 10                	push   0x10
c00188ff:	e8 4b ff ff ff       	call   c001884f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0018904:	83 c4 10             	add    esp,0x10
c0018907:	31 d2                	xor    edx,edx
c0018909:	85 c0                	test   eax,eax
c001890b:	75 24                	jne    c0018931 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001890d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0018912:	75 1d                	jne    c0018931 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0018914:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0018919:	75 16                	jne    c0018931 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001891b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0018920:	75 0f                	jne    c0018931 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0018922:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0018927:	75 08                	jne    c0018931 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0018929:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001892e:	0f 94 c2             	sete   dl
c0018931:	88 d0                	mov    al,dl
c0018933:	81 c4 0c 08 00 00    	add    esp,0x80c
c0018939:	c3                   	ret    

c001893a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001893a:	55                   	push   ebp
c001893b:	57                   	push   edi
c001893c:	56                   	push   esi
c001893d:	53                   	push   ebx
c001893e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0018944:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001894b:	85 ed                	test   ebp,ebp
c001894d:	0f 84 da 01 00 00    	je     c0018b2d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0018953:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001895b:	0f 84 cc 01 00 00    	je     c0018b2d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0018961:	b8 01 00 00 00       	mov    eax,0x1
c0018966:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001896a:	0f 85 c2 01 00 00    	jne    c0018b32 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0018970:	31 d2                	xor    edx,edx
c0018972:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0018979:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001897c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001897f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0018982:	89 04 24             	mov    DWORD PTR [esp],eax
c0018985:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018989:	01 c8                	add    eax,ecx
c001898b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001898e:	11 da                	adc    edx,ebx
c0018990:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0018994:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0018998:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001899c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00189a0:	19 d7                	sbb    edi,edx
c00189a2:	72 11                	jb     c00189b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00189a4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00189a7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00189ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00189af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00189b3:	eb 0c                	jmp    c00189c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00189b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00189b9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00189bd:	29 ce                	sub    esi,ecx
c00189bf:	19 df                	sbb    edi,ebx
c00189c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00189c4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00189c7:	0f a4 c2 0b          	shld   edx,eax,0xb
c00189cb:	c1 e0 0b             	shl    eax,0xb
c00189ce:	01 c8                	add    eax,ecx
c00189d0:	11 da                	adc    edx,ebx
c00189d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00189d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00189d9:	51                   	push   ecx
c00189da:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00189de:	50                   	push   eax
c00189df:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00189e3:	53                   	push   ebx
c00189e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00189e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00189ec:	0f ac d0 0b          	shrd   eax,edx,0xb
c00189f0:	50                   	push   eax
c00189f1:	e8 59 fe ff ff       	call   c001884f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00189f6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00189f9:	b8 00 08 00 00       	mov    eax,0x800
c00189fe:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0018a04:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0018a08:	29 d0                	sub    eax,edx
c0018a0a:	83 c4 10             	add    esp,0x10
c0018a0d:	89 f9                	mov    ecx,edi
c0018a0f:	39 c6                	cmp    esi,eax
c0018a11:	83 d9 00             	sbb    ecx,0x0
c0018a14:	7d 1b                	jge    c0018a31 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0018a16:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018a1b:	75 12                	jne    c0018a2f <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0018a1d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0018a24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018a2a:	e9 fa 00 00 00       	jmp    c0018b29 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0018a2f:	89 f0                	mov    eax,esi
c0018a31:	01 d3                	add    ebx,edx
c0018a33:	31 d2                	xor    edx,edx
c0018a35:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0018a39:	39 c2                	cmp    edx,eax
c0018a3b:	7d 14                	jge    c0018a51 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0018a3d:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0018a44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018a48:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0018a4b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0018a4e:	42                   	inc    edx
c0018a4f:	eb e8                	jmp    c0018a39 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0018a51:	89 c2                	mov    edx,eax
c0018a53:	85 c0                	test   eax,eax
c0018a55:	79 02                	jns    c0018a59 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0018a57:	31 d2                	xor    edx,edx
c0018a59:	01 c2                	add    edx,eax
c0018a5b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0018a5e:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0018a65:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0018a69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0018a6d:	99                   	cdq    
c0018a6e:	01 c1                	add    ecx,eax
c0018a70:	11 d3                	adc    ebx,edx
c0018a72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0018a76:	29 c6                	sub    esi,eax
c0018a78:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0018a7c:	19 d7                	sbb    edi,edx
c0018a7e:	89 34 24             	mov    DWORD PTR [esp],esi
c0018a81:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0018a85:	b8 ff 07 00 00       	mov    eax,0x7ff
c0018a8a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0018a8d:	b8 00 00 00 00       	mov    eax,0x0
c0018a92:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0018a96:	7d 43                	jge    c0018adb <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0018a98:	52                   	push   edx
c0018a99:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0018a9d:	50                   	push   eax
c0018a9e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018aa2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018aa6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018aaa:	0f ac d0 0b          	shrd   eax,edx,0xb
c0018aae:	50                   	push   eax
c0018aaf:	e8 9b fd ff ff       	call   c001884f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0018ab4:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0018abc:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0018ac1:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0018ac9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0018ad1:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0018ad6:	83 c4 10             	add    esp,0x10
c0018ad9:	eb aa                	jmp    c0018a85 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0018adb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018adf:	0b 04 24             	or     eax,DWORD PTR [esp]
c0018ae2:	74 2a                	je     c0018b0e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0018ae4:	50                   	push   eax
c0018ae5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0018ae9:	50                   	push   eax
c0018aea:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018aee:	56                   	push   esi
c0018aef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018af3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018af7:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0018afb:	51                   	push   ecx
c0018afc:	e8 4e fd ff ff       	call   c001884f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0018b01:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0018b05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018b09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b0b:	83 c4 10             	add    esp,0x10
c0018b0e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0018b15:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018b19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b1d:	89 18                	mov    DWORD PTR [eax],ebx
c0018b1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b23:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0018b26:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0018b29:	31 c0                	xor    eax,eax
c0018b2b:	eb 05                	jmp    c0018b32 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0018b2d:	b8 04 00 00 00       	mov    eax,0x4
c0018b32:	81 c4 2c 08 00 00    	add    esp,0x82c
c0018b38:	5b                   	pop    ebx
c0018b39:	5e                   	pop    esi
c0018b3a:	5f                   	pop    edi
c0018b3b:	5d                   	pop    ebp
c0018b3c:	c3                   	ret    
c0018b3d:	90                   	nop

c0018b3e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0018b3e:	55                   	push   ebp
c0018b3f:	57                   	push   edi
c0018b40:	56                   	push   esi
c0018b41:	53                   	push   ebx
c0018b42:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0018b48:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0018b4f:	85 ed                	test   ebp,ebp
c0018b51:	0f 84 4f 02 00 00    	je     c0018da6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0018b57:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0018b5f:	0f 84 41 02 00 00    	je     c0018da6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0018b65:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018b68:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0018b6b:	75 0a                	jne    c0018b77 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0018b6d:	b8 07 00 00 00       	mov    eax,0x7
c0018b72:	e9 34 02 00 00       	jmp    c0018dab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0018b77:	50                   	push   eax
c0018b78:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0018b7c:	50                   	push   eax
c0018b7d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0018b84:	53                   	push   ebx
c0018b85:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b88:	c1 e0 0b             	shl    eax,0xb
c0018b8b:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0018b8e:	c1 e8 0b             	shr    eax,0xb
c0018b91:	50                   	push   eax
c0018b92:	e8 b8 fc ff ff       	call   c001884f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0018b97:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018b9a:	83 c4 10             	add    esp,0x10
c0018b9d:	89 c1                	mov    ecx,eax
c0018b9f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0018ba2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0018ba8:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0018bab:	84 db                	test   bl,bl
c0018bad:	0f 85 8b 00 00 00    	jne    c0018c3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0018bb3:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0018bb9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0018bbc:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0018bc2:	29 c6                	sub    esi,eax
c0018bc4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0018bc8:	89 f3                	mov    ebx,esi
c0018bca:	89 f1                	mov    ecx,esi
c0018bcc:	c1 fb 1f             	sar    ebx,0x1f
c0018bcf:	01 f0                	add    eax,esi
c0018bd1:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0018bd4:	11 da                	adc    edx,ebx
c0018bd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0018bd9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018bdd:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0018be0:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0018be3:	89 d8                	mov    eax,ebx
c0018be5:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0018be9:	ba 00 00 00 00       	mov    edx,0x0
c0018bee:	19 f8                	sbb    eax,edi
c0018bf0:	b8 00 00 00 00       	mov    eax,0x0
c0018bf5:	73 08                	jae    c0018bff <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0018bf7:	89 f0                	mov    eax,esi
c0018bf9:	89 fa                	mov    edx,edi
c0018bfb:	29 c8                	sub    eax,ecx
c0018bfd:	19 da                	sbb    edx,ebx
c0018bff:	89 d7                	mov    edi,edx
c0018c01:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0018c04:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0018c07:	09 c7                	or     edi,eax
c0018c09:	0f 84 5e ff ff ff    	je     c0018b6d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0018c0f:	57                   	push   edi
c0018c10:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0018c14:	50                   	push   eax
c0018c15:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0018c1c:	53                   	push   ebx
c0018c1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c20:	c1 e0 0b             	shl    eax,0xb
c0018c23:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0018c27:	c1 e8 0b             	shr    eax,0xb
c0018c2a:	50                   	push   eax
c0018c2b:	e8 1f fc ff ff       	call   c001884f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0018c30:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018c33:	83 c4 10             	add    esp,0x10
c0018c36:	25 ff 07 00 00       	and    eax,0x7ff
c0018c3b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0018c3e:	31 ff                	xor    edi,edi
c0018c40:	56                   	push   esi
c0018c41:	6a 28                	push   0x28
c0018c43:	6a 00                	push   0x0
c0018c45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018c49:	50                   	push   eax
c0018c4a:	e8 a1 78 fe ff       	call   c00004f0 <memset>
c0018c4f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018c52:	25 ff 07 00 00       	and    eax,0x7ff
c0018c57:	89 c6                	mov    esi,eax
c0018c59:	83 c6 21             	add    esi,0x21
c0018c5c:	83 d7 00             	adc    edi,0x0
c0018c5f:	83 c4 10             	add    esp,0x10
c0018c62:	31 c9                	xor    ecx,ecx
c0018c64:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0018c6b:	83 f9 28             	cmp    ecx,0x28
c0018c6e:	88 04 24             	mov    BYTE PTR [esp],al
c0018c71:	0f 94 c2             	sete   dl
c0018c74:	88 d0                	mov    al,dl
c0018c76:	ba ff 07 00 00       	mov    edx,0x7ff
c0018c7b:	39 f2                	cmp    edx,esi
c0018c7d:	ba 00 00 00 00       	mov    edx,0x0
c0018c82:	19 fa                	sbb    edx,edi
c0018c84:	0f 92 c2             	setb   dl
c0018c87:	09 c2                	or     edx,eax
c0018c89:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0018c8d:	0f 94 c0             	sete   al
c0018c90:	08 d0                	or     al,dl
c0018c92:	75 16                	jne    c0018caa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0018c94:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0018c98:	74 10                	je     c0018caa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0018c9a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018c9d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0018ca1:	41                   	inc    ecx
c0018ca2:	83 c6 01             	add    esi,0x1
c0018ca5:	83 d7 00             	adc    edi,0x0
c0018ca8:	eb ba                	jmp    c0018c64 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0018caa:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0018cb1:	83 ec 0c             	sub    esp,0xc
c0018cb4:	8d 74 24 24          	lea    esi,[esp+0x24]
c0018cb8:	56                   	push   esi
c0018cb9:	e8 a2 78 fe ff       	call   c0000560 <strlen>
c0018cbe:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0018cc5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018cc9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0018cd1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018cd4:	5a                   	pop    edx
c0018cd5:	25 ff 07 00 00       	and    eax,0x7ff
c0018cda:	59                   	pop    ecx
c0018cdb:	01 f8                	add    eax,edi
c0018cdd:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c0018ce4:	0f 95 c0             	setne  al
c0018ce7:	0f b6 c0             	movzx  eax,al
c0018cea:	40                   	inc    eax
c0018ceb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018cef:	56                   	push   esi
c0018cf0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0018cf4:	50                   	push   eax
c0018cf5:	e8 26 79 fe ff       	call   c0000620 <strcpy>
c0018cfa:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0018cfe:	83 c4 10             	add    esp,0x10
c0018d01:	84 c0                	test   al,al
c0018d03:	75 21                	jne    c0018d26 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1e8>
c0018d05:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0018d0d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0018d15:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0018d1d:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0018d24:	eb 28                	jmp    c0018d4e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0018d26:	fe c8                	dec    al
c0018d28:	75 24                	jne    c0018d4e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0018d2a:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0018d32:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0018d3a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0018d42:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0018d49:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0018d4e:	8d 74 24 40          	lea    esi,[esp+0x40]
c0018d52:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0018d59:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0018d60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d62:	0f b6 f3             	movzx  esi,bl
c0018d65:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0018d6c:	31 db                	xor    ebx,ebx
c0018d6e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018d74:	89 df                	mov    edi,ebx
c0018d76:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0018d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d7c:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0018d7f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018d82:	39 c6                	cmp    esi,eax
c0018d84:	19 d7                	sbb    edi,edx
c0018d86:	72 10                	jb     c0018d98 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25a>
c0018d88:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0018d8f:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0018d96:	eb 0a                	jmp    c0018da2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x264>
c0018d98:	29 f0                	sub    eax,esi
c0018d9a:	19 da                	sbb    edx,ebx
c0018d9c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0018d9f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0018da2:	31 c0                	xor    eax,eax
c0018da4:	eb 05                	jmp    c0018dab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0018da6:	b8 04 00 00 00       	mov    eax,0x4
c0018dab:	81 c4 5c 09 00 00    	add    esp,0x95c
c0018db1:	5b                   	pop    ebx
c0018db2:	5e                   	pop    esi
c0018db3:	5f                   	pop    edi
c0018db4:	5d                   	pop    ebp
c0018db5:	c3                   	ret    

c0018db6 <readRoot(unsigned int*, unsigned int*, char)>:
c0018db6:	57                   	push   edi
c0018db7:	56                   	push   esi
c0018db8:	81 ec 38 08 00 00    	sub    esp,0x838
c0018dbe:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0018dc6:	50                   	push   eax
c0018dc7:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018dcb:	50                   	push   eax
c0018dcc:	6a 10                	push   0x10
c0018dce:	e8 7c fa ff ff       	call   c001884f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0018dd3:	83 c4 10             	add    esp,0x10
c0018dd6:	85 c0                	test   eax,eax
c0018dd8:	74 14                	je     c0018dee <readRoot(unsigned int*, unsigned int*, char)+0x38>
c0018dda:	83 ec 0c             	sub    esp,0xc
c0018ddd:	68 66 03 02 c0       	push   0xc0020366
c0018de2:	e8 09 2b ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0018de7:	83 c4 10             	add    esp,0x10
c0018dea:	31 c0                	xor    eax,eax
c0018dec:	eb 2e                	jmp    c0018e1c <readRoot(unsigned int*, unsigned int*, char)+0x66>
c0018dee:	8d b4 24 cc 00 00 00 	lea    esi,[esp+0xcc]
c0018df5:	8d 7c 24 0e          	lea    edi,[esp+0xe]
c0018df9:	b9 22 00 00 00       	mov    ecx,0x22
c0018dfe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e00:	8b 84 24 40 08 00 00 	mov    eax,DWORD PTR [esp+0x840]
c0018e07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e0b:	89 10                	mov    DWORD PTR [eax],edx
c0018e0d:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0018e14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018e18:	89 10                	mov    DWORD PTR [eax],edx
c0018e1a:	b0 01                	mov    al,0x1
c0018e1c:	81 c4 34 08 00 00    	add    esp,0x834
c0018e22:	5e                   	pop    esi
c0018e23:	5f                   	pop    edi
c0018e24:	c3                   	ret    

c0018e25 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0018e25:	55                   	push   ebp
c0018e26:	57                   	push   edi
c0018e27:	56                   	push   esi
c0018e28:	53                   	push   ebx
c0018e29:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e2f:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0018e36:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0018e3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e41:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018e45:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018e49:	31 c0                	xor    eax,eax
c0018e4b:	85 db                	test   ebx,ebx
c0018e4d:	0f 84 b0 01 00 00    	je     c0019003 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1de>
c0018e53:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0018e56:	0f 84 a7 01 00 00    	je     c0019003 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1de>
c0018e5c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0018e60:	75 03                	jne    c0018e65 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x40>
c0018e62:	83 c3 02             	add    ebx,0x2
c0018e65:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0018e68:	75 03                	jne    c0018e6d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x48>
c0018e6a:	43                   	inc    ebx
c0018e6b:	eb f8                	jmp    c0018e65 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x40>
c0018e6d:	52                   	push   edx
c0018e6e:	68 00 01 00 00       	push   0x100
c0018e73:	6a 00                	push   0x0
c0018e75:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018e79:	50                   	push   eax
c0018e7a:	e8 71 76 fe ff       	call   c00004f0 <memset>
c0018e7f:	83 c4 10             	add    esp,0x10
c0018e82:	31 d2                	xor    edx,edx
c0018e84:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0018e87:	84 c0                	test   al,al
c0018e89:	74 21                	je     c0018eac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x87>
c0018e8b:	3c 2f                	cmp    al,0x2f
c0018e8d:	75 0b                	jne    c0018e9a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x75>
c0018e8f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0018e93:	bd 01 00 00 00       	mov    ebp,0x1
c0018e98:	eb 14                	jmp    c0018eae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x89>
c0018e9a:	8d 48 9f             	lea    ecx,[eax-0x61]
c0018e9d:	80 f9 19             	cmp    cl,0x19
c0018ea0:	77 03                	ja     c0018ea5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x80>
c0018ea2:	83 e8 20             	sub    eax,0x20
c0018ea5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0018ea9:	42                   	inc    edx
c0018eaa:	eb d8                	jmp    c0018e84 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x5f>
c0018eac:	31 ed                	xor    ebp,ebp
c0018eae:	83 ec 0c             	sub    esp,0xc
c0018eb1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0018eb8:	e8 a4 fc fe ff       	call   c0008b61 <malloc>
c0018ebd:	89 c6                	mov    esi,eax
c0018ebf:	89 c2                	mov    edx,eax
c0018ec1:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018ec8:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0018ece:	c1 ef 0b             	shr    edi,0xb
c0018ed1:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0018ed8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0018edc:	83 c4 10             	add    esp,0x10
c0018edf:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0018ee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ee8:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c0018eef:	74 29                	je     c0018f1a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xf5>
c0018ef1:	50                   	push   eax
c0018ef2:	57                   	push   edi
c0018ef3:	52                   	push   edx
c0018ef4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0018ef8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0018eff:	e8 4b f9 ff ff       	call   c001884f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0018f04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f08:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0018f0f:	81 c2 00 08 00 00    	add    edx,0x800
c0018f15:	83 c4 10             	add    esp,0x10
c0018f18:	eb ca                	jmp    c0018ee4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xbf>
c0018f1a:	83 ec 0c             	sub    esp,0xc
c0018f1d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0018f21:	57                   	push   edi
c0018f22:	e8 39 76 fe ff       	call   c0000560 <strlen>
c0018f27:	50                   	push   eax
c0018f28:	57                   	push   edi
c0018f29:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0018f30:	56                   	push   esi
c0018f31:	e8 d7 f8 ff ff       	call   c001880d <__memmem(unsigned char*, int, unsigned char*, int)>
c0018f36:	83 c4 20             	add    esp,0x20
c0018f39:	85 c0                	test   eax,eax
c0018f3b:	75 13                	jne    c0018f50 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x12b>
c0018f3d:	83 ec 0c             	sub    esp,0xc
c0018f40:	56                   	push   esi
c0018f41:	e8 2b fc fe ff       	call   c0008b71 <free>
c0018f46:	83 c4 10             	add    esp,0x10
c0018f49:	31 c0                	xor    eax,eax
c0018f4b:	e9 b3 00 00 00       	jmp    c0019003 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1de>
c0018f50:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0018f54:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0018f58:	c1 e7 08             	shl    edi,0x8
c0018f5b:	c1 e2 10             	shl    edx,0x10
c0018f5e:	09 d7                	or     edi,edx
c0018f60:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0018f64:	09 d7                	or     edi,edx
c0018f66:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0018f6a:	c1 e2 18             	shl    edx,0x18
c0018f6d:	09 d7                	or     edi,edx
c0018f6f:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0018f73:	89 d1                	mov    ecx,edx
c0018f75:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0018f79:	c1 e1 08             	shl    ecx,0x8
c0018f7c:	c1 e2 10             	shl    edx,0x10
c0018f7f:	09 ca                	or     edx,ecx
c0018f81:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0018f85:	09 ca                	or     edx,ecx
c0018f87:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0018f8b:	c1 e1 18             	shl    ecx,0x18
c0018f8e:	09 ca                	or     edx,ecx
c0018f90:	89 e9                	mov    ecx,ebp
c0018f92:	84 c9                	test   cl,cl
c0018f94:	74 3c                	je     c0018fd2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1ad>
c0018f96:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018f9a:	83 ec 0c             	sub    esp,0xc
c0018f9d:	56                   	push   esi
c0018f9e:	e8 ce fb fe ff       	call   c0008b71 <free>
c0018fa3:	83 c4 0c             	add    esp,0xc
c0018fa6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018fad:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0018fb2:	50                   	push   eax
c0018fb3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018fba:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018fc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018fc5:	52                   	push   edx
c0018fc6:	57                   	push   edi
c0018fc7:	53                   	push   ebx
c0018fc8:	e8 58 fe ff ff       	call   c0018e25 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0018fcd:	83 c4 20             	add    esp,0x20
c0018fd0:	eb 31                	jmp    c0019003 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1de>
c0018fd2:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0018fd5:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0018fdc:	d0 e8                	shr    al,1
c0018fde:	89 3b                	mov    DWORD PTR [ebx],edi
c0018fe0:	83 e0 01             	and    eax,0x1
c0018fe3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0018fea:	83 ec 0c             	sub    esp,0xc
c0018fed:	89 13                	mov    DWORD PTR [ebx],edx
c0018fef:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0018ff6:	89 03                	mov    DWORD PTR [ebx],eax
c0018ff8:	56                   	push   esi
c0018ff9:	e8 73 fb fe ff       	call   c0008b71 <free>
c0018ffe:	83 c4 10             	add    esp,0x10
c0019001:	b0 01                	mov    al,0x1
c0019003:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019009:	5b                   	pop    ebx
c001900a:	5e                   	pop    esi
c001900b:	5f                   	pop    edi
c001900c:	5d                   	pop    ebp
c001900d:	c3                   	ret    

c001900e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001900e:	55                   	push   ebp
c001900f:	57                   	push   edi
c0019010:	56                   	push   esi
c0019011:	53                   	push   ebx
c0019012:	83 ec 20             	sub    esp,0x20
c0019015:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019019:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001901d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019025:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001902d:	c7 45 00 ff ff ff ff 	mov    DWORD PTR [ebp+0x0],0xffffffff
c0019034:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0019039:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001903f:	57                   	push   edi
c0019040:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019044:	50                   	push   eax
c0019045:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019049:	50                   	push   eax
c001904a:	e8 67 fd ff ff       	call   c0018db6 <readRoot(unsigned int*, unsigned int*, char)>
c001904f:	83 c4 10             	add    esp,0x10
c0019052:	88 c3                	mov    bl,al
c0019054:	84 c0                	test   al,al
c0019056:	75 12                	jne    c001906a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x5c>
c0019058:	83 ec 0c             	sub    esp,0xc
c001905b:	68 76 03 02 c0       	push   0xc0020376
c0019060:	e8 8b 28 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0019065:	83 c4 10             	add    esp,0x10
c0019068:	eb 4b                	jmp    c00190b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0xa7>
c001906a:	83 ec 0c             	sub    esp,0xc
c001906d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019071:	e8 ea 74 fe ff       	call   c0000560 <strlen>
c0019076:	83 c4 10             	add    esp,0x10
c0019079:	83 f8 03             	cmp    eax,0x3
c001907c:	77 19                	ja     c0019097 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x89>
c001907e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019082:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019085:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019089:	89 06                	mov    DWORD PTR [esi],eax
c001908b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001908f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019095:	eb 1e                	jmp    c00190b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0xa7>
c0019097:	50                   	push   eax
c0019098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001909c:	57                   	push   edi
c001909d:	56                   	push   esi
c001909e:	55                   	push   ebp
c001909f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00190a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00190a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00190ab:	e8 75 fd ff ff       	call   c0018e25 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00190b0:	83 c4 20             	add    esp,0x20
c00190b3:	88 c3                	mov    bl,al
c00190b5:	83 c4 1c             	add    esp,0x1c
c00190b8:	88 d8                	mov    al,bl
c00190ba:	5b                   	pop    ebx
c00190bb:	5e                   	pop    esi
c00190bc:	5f                   	pop    edi
c00190bd:	5d                   	pop    ebp
c00190be:	c3                   	ret    
c00190bf:	90                   	nop

c00190c0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00190c0:	57                   	push   edi
c00190c1:	56                   	push   esi
c00190c2:	53                   	push   ebx
c00190c3:	83 ec 10             	sub    esp,0x10
c00190c6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00190ca:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00190ce:	85 ff                	test   edi,edi
c00190d0:	0f 84 9f 00 00 00    	je     c0019175 <ISO9660::open(char const*, void**, FileOpenMode)+0xb5>
c00190d6:	85 f6                	test   esi,esi
c00190d8:	0f 84 97 00 00 00    	je     c0019175 <ISO9660::open(char const*, void**, FileOpenMode)+0xb5>
c00190de:	b8 03 00 00 00       	mov    eax,0x3
c00190e3:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00190e8:	0f 85 8c 00 00 00    	jne    c001917a <ISO9660::open(char const*, void**, FileOpenMode)+0xba>
c00190ee:	83 ec 0c             	sub    esp,0xc
c00190f1:	6a 1c                	push   0x1c
c00190f3:	e8 69 fa fe ff       	call   c0008b61 <malloc>
c00190f8:	89 07                	mov    DWORD PTR [edi],eax
c00190fa:	89 c3                	mov    ebx,eax
c00190fc:	58                   	pop    eax
c00190fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019101:	50                   	push   eax
c0019102:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0019105:	50                   	push   eax
c0019106:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001910a:	50                   	push   eax
c001910b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001910f:	50                   	push   eax
c0019110:	56                   	push   esi
c0019111:	e8 f8 fe ff ff       	call   c001900e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0019116:	83 c4 20             	add    esp,0x20
c0019119:	84 c0                	test   al,al
c001911b:	74 07                	je     c0019124 <ISO9660::open(char const*, void**, FileOpenMode)+0x64>
c001911d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019122:	74 1b                	je     c001913f <ISO9660::open(char const*, void**, FileOpenMode)+0x7f>
c0019124:	83 ec 0c             	sub    esp,0xc
c0019127:	68 89 03 02 c0       	push   0xc0020389
c001912c:	e8 bf 27 ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c0019131:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0019135:	83 c4 10             	add    esp,0x10
c0019138:	b8 01 00 00 00       	mov    eax,0x1
c001913d:	eb 3b                	jmp    c001917a <ISO9660::open(char const*, void**, FileOpenMode)+0xba>
c001913f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019143:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0019147:	89 03                	mov    DWORD PTR [ebx],eax
c0019149:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0019150:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019154:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001915b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019162:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019165:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001916c:	8a 06                	mov    al,BYTE PTR [esi]
c001916e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0019171:	31 c0                	xor    eax,eax
c0019173:	eb 05                	jmp    c001917a <ISO9660::open(char const*, void**, FileOpenMode)+0xba>
c0019175:	b8 04 00 00 00       	mov    eax,0x4
c001917a:	83 c4 10             	add    esp,0x10
c001917d:	5b                   	pop    ebx
c001917e:	5e                   	pop    esi
c001917f:	5f                   	pop    edi
c0019180:	c3                   	ret    
c0019181:	90                   	nop

c0019182 <ISO9660::exists(char const*)>:
c0019182:	83 ec 28             	sub    esp,0x28
c0019185:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019189:	8d 54 24 18          	lea    edx,[esp+0x18]
c001918d:	52                   	push   edx
c001918e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0019191:	52                   	push   edx
c0019192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0019196:	52                   	push   edx
c0019197:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001919b:	52                   	push   edx
c001919c:	50                   	push   eax
c001919d:	e8 6c fe ff ff       	call   c001900e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00191a2:	83 c4 3c             	add    esp,0x3c
c00191a5:	c3                   	ret    

c00191a6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00191a6:	56                   	push   esi
c00191a7:	53                   	push   ebx
c00191a8:	83 ec 14             	sub    esp,0x14
c00191ab:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00191af:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00191b3:	85 db                	test   ebx,ebx
c00191b5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00191b9:	0f 94 c2             	sete   dl
c00191bc:	85 f6                	test   esi,esi
c00191be:	0f 94 c0             	sete   al
c00191c1:	08 c2                	or     dl,al
c00191c3:	75 68                	jne    c001922d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00191c5:	85 c9                	test   ecx,ecx
c00191c7:	74 64                	je     c001922d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00191c9:	83 ec 0c             	sub    esp,0xc
c00191cc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00191cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191d3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00191d9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00191e0:	50                   	push   eax
c00191e1:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00191e4:	50                   	push   eax
c00191e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00191e9:	50                   	push   eax
c00191ea:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00191ee:	50                   	push   eax
c00191ef:	51                   	push   ecx
c00191f0:	e8 19 fe ff ff       	call   c001900e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00191f5:	83 c4 20             	add    esp,0x20
c00191f8:	ba 01 00 00 00       	mov    edx,0x1
c00191fd:	84 c0                	test   al,al
c00191ff:	74 31                	je     c0019232 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0019201:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019205:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001920c:	89 03                	mov    DWORD PTR [ebx],eax
c001920e:	ba 00 00 00 00       	mov    edx,0x0
c0019213:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019217:	85 c0                	test   eax,eax
c0019219:	0f 95 06             	setne  BYTE PTR [esi]
c001921c:	74 14                	je     c0019232 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001921e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019224:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001922b:	eb 05                	jmp    c0019232 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001922d:	ba 04 00 00 00       	mov    edx,0x4
c0019232:	83 c4 14             	add    esp,0x14
c0019235:	89 d0                	mov    eax,edx
c0019237:	5b                   	pop    ebx
c0019238:	5e                   	pop    esi
c0019239:	c3                   	ret    

c001923a <ISO9660::openDir(char const*, void**)>:
c001923a:	57                   	push   edi
c001923b:	56                   	push   esi
c001923c:	53                   	push   ebx
c001923d:	83 ec 10             	sub    esp,0x10
c0019240:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019244:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019248:	85 ff                	test   edi,edi
c001924a:	74 7b                	je     c00192c7 <ISO9660::openDir(char const*, void**)+0x8d>
c001924c:	85 f6                	test   esi,esi
c001924e:	74 77                	je     c00192c7 <ISO9660::openDir(char const*, void**)+0x8d>
c0019250:	83 ec 0c             	sub    esp,0xc
c0019253:	6a 1c                	push   0x1c
c0019255:	e8 07 f9 fe ff       	call   c0008b61 <malloc>
c001925a:	89 07                	mov    DWORD PTR [edi],eax
c001925c:	89 c3                	mov    ebx,eax
c001925e:	58                   	pop    eax
c001925f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019263:	50                   	push   eax
c0019264:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0019267:	50                   	push   eax
c0019268:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001926c:	50                   	push   eax
c001926d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019271:	50                   	push   eax
c0019272:	56                   	push   esi
c0019273:	e8 96 fd ff ff       	call   c001900e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0019278:	83 c4 20             	add    esp,0x20
c001927b:	84 c0                	test   al,al
c001927d:	74 07                	je     c0019286 <ISO9660::openDir(char const*, void**)+0x4c>
c001927f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019284:	75 0b                	jne    c0019291 <ISO9660::openDir(char const*, void**)+0x57>
c0019286:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001928a:	b8 01 00 00 00       	mov    eax,0x1
c001928f:	eb 3b                	jmp    c00192cc <ISO9660::openDir(char const*, void**)+0x92>
c0019291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019295:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0019299:	89 03                	mov    DWORD PTR [ebx],eax
c001929b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00192a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192a6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00192ad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00192b4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00192b7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00192be:	8a 06                	mov    al,BYTE PTR [esi]
c00192c0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00192c3:	31 c0                	xor    eax,eax
c00192c5:	eb 05                	jmp    c00192cc <ISO9660::openDir(char const*, void**)+0x92>
c00192c7:	b8 04 00 00 00       	mov    eax,0x4
c00192cc:	83 c4 10             	add    esp,0x10
c00192cf:	5b                   	pop    ebx
c00192d0:	5e                   	pop    esi
c00192d1:	5f                   	pop    edi
c00192d2:	c3                   	ret    
c00192d3:	90                   	nop

c00192d4 <ISO9660::ISO9660()>:
c00192d4:	83 ec 0c             	sub    esp,0xc
c00192d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192db:	83 ec 0c             	sub    esp,0xc
c00192de:	50                   	push   eax
c00192df:	e8 2e 29 ff ff       	call   c000bc12 <Filesystem::Filesystem()>
c00192e4:	83 c4 10             	add    esp,0x10
c00192e7:	ba a8 03 02 c0       	mov    edx,0xc00203a8
c00192ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192f0:	89 10                	mov    DWORD PTR [eax],edx
c00192f2:	90                   	nop
c00192f3:	83 c4 0c             	add    esp,0xc
c00192f6:	c3                   	ret    
c00192f7:	90                   	nop

c00192f8 <SoundCard::beginPlayback()>:
c00192f8:	c7 44 24 04 08 04 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020408
c0019300:	e9 3a 81 ff ff       	jmp    c001143f <Krnl::panic(char const*)>
c0019305:	90                   	nop

c0019306 <SoundCard::stopPlayback()>:
c0019306:	c7 44 24 04 08 04 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020408
c001930e:	e9 2c 81 ff ff       	jmp    c001143f <Krnl::panic(char const*)>
c0019313:	90                   	nop

c0019314 <SoundCard::SoundCard(char const*)>:
c0019314:	83 ec 1c             	sub    esp,0x1c
c0019317:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001931b:	83 ec 08             	sub    esp,0x8
c001931e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019322:	50                   	push   eax
c0019323:	e8 a0 3b ff ff       	call   c000cec8 <Device::Device(char const*)>
c0019328:	83 c4 10             	add    esp,0x10
c001932b:	ba 54 04 02 c0       	mov    edx,0xc0020454
c0019330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019334:	89 10                	mov    DWORD PTR [eax],edx
c0019336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001933a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019345:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001934f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019353:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001935d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019361:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001936b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001936f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019379:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019381:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019386:	7f 19                	jg     c00193a1 <SoundCard::SoundCard(char const*)+0x8d>
c0019388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001938c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019390:	83 c2 54             	add    edx,0x54
c0019393:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001939b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001939f:	eb e0                	jmp    c0019381 <SoundCard::SoundCard(char const*)+0x6d>
c00193a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193a5:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00193ac:	90                   	nop
c00193ad:	83 c4 1c             	add    esp,0x1c
c00193b0:	c3                   	ret    
c00193b1:	90                   	nop

c00193b2 <SoundCard::~SoundCard()>:
c00193b2:	83 ec 0c             	sub    esp,0xc
c00193b5:	ba 54 04 02 c0       	mov    edx,0xc0020454
c00193ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193be:	89 10                	mov    DWORD PTR [eax],edx
c00193c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193c4:	83 ec 0c             	sub    esp,0xc
c00193c7:	50                   	push   eax
c00193c8:	e8 65 38 ff ff       	call   c000cc32 <Device::~Device()>
c00193cd:	83 c4 10             	add    esp,0x10
c00193d0:	90                   	nop
c00193d1:	83 c4 0c             	add    esp,0xc
c00193d4:	c3                   	ret    
c00193d5:	90                   	nop

c00193d6 <SoundCard::~SoundCard()>:
c00193d6:	83 ec 0c             	sub    esp,0xc
c00193d9:	83 ec 0c             	sub    esp,0xc
c00193dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193e0:	e8 cd ff ff ff       	call   c00193b2 <SoundCard::~SoundCard()>
c00193e5:	83 c4 10             	add    esp,0x10
c00193e8:	83 ec 08             	sub    esp,0x8
c00193eb:	68 e8 01 00 00       	push   0x1e8
c00193f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193f4:	e8 01 24 ff ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c00193f9:	83 c4 10             	add    esp,0x10
c00193fc:	83 c4 0c             	add    esp,0xc
c00193ff:	c3                   	ret    

c0019400 <SoundCard::configureRates(int, int, int)>:
c0019400:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019404:	31 c0                	xor    eax,eax
c0019406:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001940d:	75 20                	jne    c001942f <SoundCard::configureRates(int, int, int)+0x2f>
c001940f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019413:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019419:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001941d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019427:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001942d:	b0 01                	mov    al,0x1
c001942f:	c3                   	ret    

c0019430 <SoundCard::getSamples16(int, short*)>:
c0019430:	55                   	push   ebp
c0019431:	57                   	push   edi
c0019432:	31 ff                	xor    edi,edi
c0019434:	56                   	push   esi
c0019435:	53                   	push   ebx
c0019436:	31 db                	xor    ebx,ebx
c0019438:	83 ec 10             	sub    esp,0x10
c001943b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001943f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019443:	8d 04 36             	lea    eax,[esi+esi*1]
c0019446:	50                   	push   eax
c0019447:	6a 00                	push   0x0
c0019449:	55                   	push   ebp
c001944a:	e8 a1 70 fe ff       	call   c00004f0 <memset>
c001944f:	83 c4 10             	add    esp,0x10
c0019452:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019456:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001945d:	85 c0                	test   eax,eax
c001945f:	74 1b                	je     c001947c <SoundCard::getSamples16(int, short*)+0x4c>
c0019461:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019465:	75 15                	jne    c001947c <SoundCard::getSamples16(int, short*)+0x4c>
c0019467:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001946b:	55                   	push   ebp
c001946c:	56                   	push   esi
c001946d:	50                   	push   eax
c001946e:	e8 ed 02 00 00       	call   c0019760 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019473:	83 c4 10             	add    esp,0x10
c0019476:	39 c7                	cmp    edi,eax
c0019478:	7d 02                	jge    c001947c <SoundCard::getSamples16(int, short*)+0x4c>
c001947a:	89 c7                	mov    edi,eax
c001947c:	43                   	inc    ebx
c001947d:	83 fb 20             	cmp    ebx,0x20
c0019480:	75 d0                	jne    c0019452 <SoundCard::getSamples16(int, short*)+0x22>
c0019482:	83 c4 0c             	add    esp,0xc
c0019485:	89 f8                	mov    eax,edi
c0019487:	5b                   	pop    ebx
c0019488:	5e                   	pop    esi
c0019489:	5f                   	pop    edi
c001948a:	5d                   	pop    ebp
c001948b:	c3                   	ret    

c001948c <SoundCard::getSamples32(int, int*)>:
c001948c:	55                   	push   ebp
c001948d:	57                   	push   edi
c001948e:	31 ff                	xor    edi,edi
c0019490:	56                   	push   esi
c0019491:	31 f6                	xor    esi,esi
c0019493:	53                   	push   ebx
c0019494:	83 ec 10             	sub    esp,0x10
c0019497:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001949b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001949f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00194a3:	c1 e0 02             	shl    eax,0x2
c00194a6:	50                   	push   eax
c00194a7:	6a 00                	push   0x0
c00194a9:	55                   	push   ebp
c00194aa:	e8 41 70 fe ff       	call   c00004f0 <memset>
c00194af:	83 c4 10             	add    esp,0x10
c00194b2:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00194b9:	85 c0                	test   eax,eax
c00194bb:	74 1b                	je     c00194d8 <SoundCard::getSamples32(int, int*)+0x4c>
c00194bd:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00194c1:	75 15                	jne    c00194d8 <SoundCard::getSamples32(int, int*)+0x4c>
c00194c3:	53                   	push   ebx
c00194c4:	55                   	push   ebp
c00194c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194c9:	50                   	push   eax
c00194ca:	e8 55 03 00 00       	call   c0019824 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00194cf:	83 c4 10             	add    esp,0x10
c00194d2:	39 c6                	cmp    esi,eax
c00194d4:	7d 02                	jge    c00194d8 <SoundCard::getSamples32(int, int*)+0x4c>
c00194d6:	89 c6                	mov    esi,eax
c00194d8:	47                   	inc    edi
c00194d9:	83 ff 20             	cmp    edi,0x20
c00194dc:	75 d4                	jne    c00194b2 <SoundCard::getSamples32(int, int*)+0x26>
c00194de:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00194e4:	85 f6                	test   esi,esi
c00194e6:	75 0f                	jne    c00194f7 <SoundCard::getSamples32(int, int*)+0x6b>
c00194e8:	84 c0                	test   al,al
c00194ea:	74 1b                	je     c0019507 <SoundCard::getSamples32(int, int*)+0x7b>
c00194ec:	83 ec 0c             	sub    esp,0xc
c00194ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00194f1:	53                   	push   ebx
c00194f2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00194f5:	eb 0d                	jmp    c0019504 <SoundCard::getSamples32(int, int*)+0x78>
c00194f7:	84 c0                	test   al,al
c00194f9:	75 0c                	jne    c0019507 <SoundCard::getSamples32(int, int*)+0x7b>
c00194fb:	83 ec 0c             	sub    esp,0xc
c00194fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019500:	53                   	push   ebx
c0019501:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019504:	83 c4 10             	add    esp,0x10
c0019507:	83 c4 0c             	add    esp,0xc
c001950a:	89 f0                	mov    eax,esi
c001950c:	5b                   	pop    ebx
c001950d:	5e                   	pop    esi
c001950e:	5f                   	pop    edi
c001950f:	5d                   	pop    ebp
c0019510:	c3                   	ret    
c0019511:	90                   	nop

c0019512 <SoundCard::addChannel(SoundPort*)>:
c0019512:	83 ec 0c             	sub    esp,0xc
c0019515:	31 c0                	xor    eax,eax
c0019517:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001951b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019523:	74 1b                	je     c0019540 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019525:	40                   	inc    eax
c0019526:	83 f8 20             	cmp    eax,0x20
c0019529:	75 f0                	jne    c001951b <SoundCard::addChannel(SoundPort*)+0x9>
c001952b:	83 ec 0c             	sub    esp,0xc
c001952e:	68 2d 04 02 c0       	push   0xc002042d
c0019533:	e8 07 7f ff ff       	call   c001143f <Krnl::panic(char const*)>
c0019538:	83 c4 10             	add    esp,0x10
c001953b:	83 c8 ff             	or     eax,0xffffffff
c001953e:	eb 0b                	jmp    c001954b <SoundCard::addChannel(SoundPort*)+0x39>
c0019540:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019544:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001954b:	83 c4 0c             	add    esp,0xc
c001954e:	c3                   	ret    
c001954f:	90                   	nop

c0019550 <SoundCard::removeChannel(int)>:
c0019550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019554:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019558:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019563:	c3                   	ret    

c0019564 <SoundPort::SoundPort(int, int, int, int)>:
c0019564:	83 ec 0c             	sub    esp,0xc
c0019567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001956b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019576:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001957a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001957e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019582:	89 10                	mov    DWORD PTR [eax],edx
c0019584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019588:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001958c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001958f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019593:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019597:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001959a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001959f:	75 13                	jne    c00195b4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00195a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00195a7:	05 a0 0f 00 00       	add    eax,0xfa0
c00195ac:	01 c0                	add    eax,eax
c00195ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00195b2:	66 90                	xchg   ax,ax
c00195b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00195bc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00195bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195c3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00195ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00195d1:	c1 e0 02             	shl    eax,0x2
c00195d4:	83 ec 0c             	sub    esp,0xc
c00195d7:	50                   	push   eax
c00195d8:	e8 84 f5 fe ff       	call   c0008b61 <malloc>
c00195dd:	83 c4 10             	add    esp,0x10
c00195e0:	89 c2                	mov    edx,eax
c00195e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195e6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00195e9:	90                   	nop
c00195ea:	83 c4 0c             	add    esp,0xc
c00195ed:	c3                   	ret    
c00195ee:	66 90                	xchg   ax,ax

c00195f0 <SoundPort::~SoundPort()>:
c00195f0:	83 ec 0c             	sub    esp,0xc
c00195f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00195fa:	85 c0                	test   eax,eax
c00195fc:	74 1e                	je     c001961c <SoundPort::~SoundPort()+0x2c>
c00195fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019602:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019605:	83 ec 0c             	sub    esp,0xc
c0019608:	50                   	push   eax
c0019609:	e8 63 f5 fe ff       	call   c0008b71 <free>
c001960e:	83 c4 10             	add    esp,0x10
c0019611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019615:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001961c:	90                   	nop
c001961d:	83 c4 0c             	add    esp,0xc
c0019620:	c3                   	ret    
c0019621:	90                   	nop
c0019622:	66 90                	xchg   ax,ax

c0019624 <SoundPort::unpause()>:
c0019624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019628:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001962c:	c3                   	ret    
c001962d:	90                   	nop
c001962e:	66 90                	xchg   ax,ax

c0019630 <SoundPort::pause()>:
c0019630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019634:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019638:	c3                   	ret    
c0019639:	90                   	nop
c001963a:	66 90                	xchg   ax,ax

c001963c <SoundPort::getBufferUsed()>:
c001963c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019640:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019643:	c3                   	ret    

c0019644 <SoundPort::getBufferSize()>:
c0019644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019648:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001964b:	c3                   	ret    

c001964c <SoundPort::buffer16(short*, int)>:
c001964c:	55                   	push   ebp
c001964d:	57                   	push   edi
c001964e:	56                   	push   esi
c001964f:	53                   	push   ebx
c0019650:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019654:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019658:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001965b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001965e:	74 68                	je     c00196c8 <SoundPort::buffer16(short*, int)+0x7c>
c0019660:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019664:	85 c9                	test   ecx,ecx
c0019666:	7e 60                	jle    c00196c8 <SoundPort::buffer16(short*, int)+0x7c>
c0019668:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001966c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001966f:	c1 e1 0f             	shl    ecx,0xf
c0019672:	8d 70 01             	lea    esi,[eax+0x1]
c0019675:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019678:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001967b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001967e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019681:	74 4d                	je     c00196d0 <SoundPort::buffer16(short*, int)+0x84>
c0019683:	31 f6                	xor    esi,esi
c0019685:	eb 21                	jmp    c00196a8 <SoundPort::buffer16(short*, int)+0x5c>
c0019687:	90                   	nop
c0019688:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001968d:	8d 79 01             	lea    edi,[ecx+0x1]
c0019690:	c1 e3 0f             	shl    ebx,0xf
c0019693:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019696:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019699:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001969c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001969f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00196a2:	74 1c                	je     c00196c0 <SoundPort::buffer16(short*, int)+0x74>
c00196a4:	89 c6                	mov    esi,eax
c00196a6:	66 90                	xchg   ax,ax
c00196a8:	8d 46 01             	lea    eax,[esi+0x1]
c00196ab:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00196af:	75 d7                	jne    c0019688 <SoundPort::buffer16(short*, int)+0x3c>
c00196b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00196b5:	8d 76 00             	lea    esi,[esi+0x0]
c00196b8:	5b                   	pop    ebx
c00196b9:	5e                   	pop    esi
c00196ba:	5f                   	pop    edi
c00196bb:	5d                   	pop    ebp
c00196bc:	c3                   	ret    
c00196bd:	8d 76 00             	lea    esi,[esi+0x0]
c00196c0:	5b                   	pop    ebx
c00196c1:	8d 46 02             	lea    eax,[esi+0x2]
c00196c4:	5e                   	pop    esi
c00196c5:	5f                   	pop    edi
c00196c6:	5d                   	pop    ebp
c00196c7:	c3                   	ret    
c00196c8:	5b                   	pop    ebx
c00196c9:	31 c0                	xor    eax,eax
c00196cb:	5e                   	pop    esi
c00196cc:	5f                   	pop    edi
c00196cd:	5d                   	pop    ebp
c00196ce:	c3                   	ret    
c00196cf:	90                   	nop
c00196d0:	b8 01 00 00 00       	mov    eax,0x1
c00196d5:	eb e1                	jmp    c00196b8 <SoundPort::buffer16(short*, int)+0x6c>
c00196d7:	90                   	nop

c00196d8 <SoundPort::buffer32(int*, int)>:
c00196d8:	55                   	push   ebp
c00196d9:	57                   	push   edi
c00196da:	56                   	push   esi
c00196db:	53                   	push   ebx
c00196dc:	51                   	push   ecx
c00196dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00196e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196e5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00196e8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00196ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00196ef:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00196f2:	74 5c                	je     c0019750 <SoundPort::buffer32(int*, int)+0x78>
c00196f4:	85 c0                	test   eax,eax
c00196f6:	7e 58                	jle    c0019750 <SoundPort::buffer32(int*, int)+0x78>
c00196f8:	8d 71 01             	lea    esi,[ecx+0x1]
c00196fb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00196fe:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019701:	8b 37                	mov    esi,DWORD PTR [edi]
c0019703:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019706:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019709:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001970c:	74 4a                	je     c0019758 <SoundPort::buffer32(int*, int)+0x80>
c001970e:	31 f6                	xor    esi,esi
c0019710:	eb 1e                	jmp    c0019730 <SoundPort::buffer32(int*, int)+0x58>
c0019712:	66 90                	xchg   ax,ax
c0019714:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019717:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001971a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001971d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019720:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019724:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019727:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001972a:	74 18                	je     c0019744 <SoundPort::buffer32(int*, int)+0x6c>
c001972c:	89 de                	mov    esi,ebx
c001972e:	66 90                	xchg   ax,ax
c0019730:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019733:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019736:	75 dc                	jne    c0019714 <SoundPort::buffer32(int*, int)+0x3c>
c0019738:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001973b:	90                   	nop
c001973c:	5a                   	pop    edx
c001973d:	5b                   	pop    ebx
c001973e:	5e                   	pop    esi
c001973f:	5f                   	pop    edi
c0019740:	5d                   	pop    ebp
c0019741:	c3                   	ret    
c0019742:	66 90                	xchg   ax,ax
c0019744:	5a                   	pop    edx
c0019745:	8d 46 02             	lea    eax,[esi+0x2]
c0019748:	5b                   	pop    ebx
c0019749:	5e                   	pop    esi
c001974a:	5f                   	pop    edi
c001974b:	5d                   	pop    ebp
c001974c:	c3                   	ret    
c001974d:	8d 76 00             	lea    esi,[esi+0x0]
c0019750:	5a                   	pop    edx
c0019751:	31 c0                	xor    eax,eax
c0019753:	5b                   	pop    ebx
c0019754:	5e                   	pop    esi
c0019755:	5f                   	pop    edi
c0019756:	5d                   	pop    ebp
c0019757:	c3                   	ret    
c0019758:	b8 01 00 00 00       	mov    eax,0x1
c001975d:	eb dd                	jmp    c001973c <SoundPort::buffer32(int*, int)+0x64>
c001975f:	90                   	nop

c0019760 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019760:	57                   	push   edi
c0019761:	56                   	push   esi
c0019762:	53                   	push   ebx
c0019763:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019767:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001976b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0019771:	39 03                	cmp    DWORD PTR [ebx],eax
c0019773:	74 13                	je     c0019788 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0019775:	83 ec 0c             	sub    esp,0xc
c0019778:	68 80 04 02 c0       	push   0xc0020480
c001977d:	e8 bd 7c ff ff       	call   c001143f <Krnl::panic(char const*)>
c0019782:	83 c4 10             	add    esp,0x10
c0019785:	8d 76 00             	lea    esi,[esi+0x0]
c0019788:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001978e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019791:	74 11                	je     c00197a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0019793:	83 ec 0c             	sub    esp,0xc
c0019796:	68 bf 04 02 c0       	push   0xc00204bf
c001979b:	e8 9f 7c ff ff       	call   c001143f <Krnl::panic(char const*)>
c00197a0:	83 c4 10             	add    esp,0x10
c00197a3:	90                   	nop
c00197a4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00197aa:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00197ad:	74 11                	je     c00197c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00197af:	83 ec 0c             	sub    esp,0xc
c00197b2:	68 bf 04 02 c0       	push   0xc00204bf
c00197b7:	e8 83 7c ff ff       	call   c001143f <Krnl::panic(char const*)>
c00197bc:	83 c4 10             	add    esp,0x10
c00197bf:	90                   	nop
c00197c0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00197c3:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00197c7:	7e 07                	jle    c00197d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00197c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00197cd:	8d 76 00             	lea    esi,[esi+0x0]
c00197d0:	85 f6                	test   esi,esi
c00197d2:	7e 2c                	jle    c0019800 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00197d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00197d8:	8d 3c 36             	lea    edi,[esi+esi*1]
c00197db:	31 c9                	xor    ecx,ecx
c00197dd:	01 d7                	add    edi,edx
c00197df:	90                   	nop
c00197e0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00197e3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00197e6:	85 c0                	test   eax,eax
c00197e8:	79 06                	jns    c00197f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00197ea:	05 ff 7f 00 00       	add    eax,0x7fff
c00197ef:	90                   	nop
c00197f0:	c1 f8 0f             	sar    eax,0xf
c00197f3:	83 c1 04             	add    ecx,0x4
c00197f6:	66 01 02             	add    WORD PTR [edx],ax
c00197f9:	83 c2 02             	add    edx,0x2
c00197fc:	39 d7                	cmp    edi,edx
c00197fe:	75 e0                	jne    c00197e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0019800:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019803:	50                   	push   eax
c0019804:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019807:	29 f0                	sub    eax,esi
c0019809:	c1 e0 02             	shl    eax,0x2
c001980c:	50                   	push   eax
c001980d:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019810:	50                   	push   eax
c0019811:	52                   	push   edx
c0019812:	e8 e9 6b fe ff       	call   c0000400 <memmove>
c0019817:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001981a:	83 c4 10             	add    esp,0x10
c001981d:	89 f0                	mov    eax,esi
c001981f:	5b                   	pop    ebx
c0019820:	5e                   	pop    esi
c0019821:	5f                   	pop    edi
c0019822:	c3                   	ret    
c0019823:	90                   	nop

c0019824 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019824:	57                   	push   edi
c0019825:	56                   	push   esi
c0019826:	53                   	push   ebx
c0019827:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001982b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001982f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019833:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0019839:	39 06                	cmp    DWORD PTR [esi],eax
c001983b:	74 13                	je     c0019850 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001983d:	83 ec 0c             	sub    esp,0xc
c0019840:	68 a0 04 02 c0       	push   0xc00204a0
c0019845:	e8 f5 7b ff ff       	call   c001143f <Krnl::panic(char const*)>
c001984a:	83 c4 10             	add    esp,0x10
c001984d:	8d 76 00             	lea    esi,[esi+0x0]
c0019850:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0019856:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0019859:	74 11                	je     c001986c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001985b:	83 ec 0c             	sub    esp,0xc
c001985e:	68 db 04 02 c0       	push   0xc00204db
c0019863:	e8 d7 7b ff ff       	call   c001143f <Krnl::panic(char const*)>
c0019868:	83 c4 10             	add    esp,0x10
c001986b:	90                   	nop
c001986c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0019872:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0019875:	74 11                	je     c0019888 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0019877:	83 ec 0c             	sub    esp,0xc
c001987a:	68 db 04 02 c0       	push   0xc00204db
c001987f:	e8 bb 7b ff ff       	call   c001143f <Krnl::panic(char const*)>
c0019884:	83 c4 10             	add    esp,0x10
c0019887:	90                   	nop
c0019888:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001988b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001988f:	7e 07                	jle    c0019898 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0019891:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019895:	8d 76 00             	lea    esi,[esi+0x0]
c0019898:	85 ff                	test   edi,edi
c001989a:	7e 1c                	jle    c00198b8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001989c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00198a3:	31 c0                	xor    eax,eax
c00198a5:	8d 76 00             	lea    esi,[esi+0x0]
c00198a8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00198ab:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00198ae:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00198b1:	83 c0 04             	add    eax,0x4
c00198b4:	39 c1                	cmp    ecx,eax
c00198b6:	75 f0                	jne    c00198a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00198b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00198bb:	50                   	push   eax
c00198bc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00198bf:	29 f8                	sub    eax,edi
c00198c1:	c1 e0 02             	shl    eax,0x2
c00198c4:	50                   	push   eax
c00198c5:	8d 04 ba             	lea    eax,[edx+edi*4]
c00198c8:	50                   	push   eax
c00198c9:	52                   	push   edx
c00198ca:	e8 31 6b fe ff       	call   c0000400 <memmove>
c00198cf:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00198d2:	83 c4 10             	add    esp,0x10
c00198d5:	89 f8                	mov    eax,edi
c00198d7:	5b                   	pop    ebx
c00198d8:	5e                   	pop    esi
c00198d9:	5f                   	pop    edi
c00198da:	c3                   	ret    
c00198db:	90                   	nop

c00198dc <PCI::open(int, int, void*)>:
c00198dc:	83 ec 18             	sub    esp,0x18
c00198df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00198e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00198e7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00198ed:	8b 10                	mov    edx,DWORD PTR [eax]
c00198ef:	50                   	push   eax
c00198f0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00198f3:	31 c0                	xor    eax,eax
c00198f5:	83 c4 1c             	add    esp,0x1c
c00198f8:	c3                   	ret    
c00198f9:	90                   	nop

c00198fa <PCI::close(int, int, void*)>:
c00198fa:	31 c0                	xor    eax,eax
c00198fc:	c3                   	ret    
c00198fd:	90                   	nop

c00198fe <PCI::PCI()>:
c00198fe:	83 ec 0c             	sub    esp,0xc
c0019901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019905:	83 ec 08             	sub    esp,0x8
c0019908:	68 f7 04 02 c0       	push   0xc00204f7
c001990d:	50                   	push   eax
c001990e:	e8 71 2d ff ff       	call   c000c684 <Bus::Bus(char const*)>
c0019913:	83 c4 10             	add    esp,0x10
c0019916:	ba a0 05 02 c0       	mov    edx,0xc00205a0
c001991b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001991f:	89 10                	mov    DWORD PTR [eax],edx
c0019921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019925:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001992f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019933:	a3 80 5b 02 c0       	mov    ds:0xc0025b80,eax
c0019938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001993c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019942:	31 d2                	xor    edx,edx
c0019944:	88 c2                	mov    dl,al
c0019946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001994a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0019951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019955:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001995b:	31 d2                	xor    edx,edx
c001995d:	88 c2                	mov    dl,al
c001995f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019963:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0019968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001996c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019972:	8d 50 01             	lea    edx,[eax+0x1]
c0019975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019979:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001997f:	31 d2                	xor    edx,edx
c0019981:	88 c2                	mov    dl,al
c0019983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019987:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001998b:	83 c9 c0             	or     ecx,0xffffffc0
c001998e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0019992:	90                   	nop
c0019993:	83 c4 0c             	add    esp,0xc
c0019996:	c3                   	ret    
c0019997:	90                   	nop

c0019998 <PCI::readBAR8(unsigned int, int)>:
c0019998:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001999c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199a0:	f6 c2 01             	test   dl,0x1
c00199a3:	74 07                	je     c00199ac <PCI::readBAR8(unsigned int, int)+0x14>
c00199a5:	83 e2 fc             	and    edx,0xfffffffc
c00199a8:	01 c2                	add    edx,eax
c00199aa:	ec                   	in     al,dx
c00199ab:	c3                   	ret    
c00199ac:	83 e2 f0             	and    edx,0xfffffff0
c00199af:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00199b2:	c3                   	ret    
c00199b3:	90                   	nop

c00199b4 <PCI::readBAR16(unsigned int, int)>:
c00199b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00199b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199bc:	f6 c2 01             	test   dl,0x1
c00199bf:	74 08                	je     c00199c9 <PCI::readBAR16(unsigned int, int)+0x15>
c00199c1:	83 e2 fc             	and    edx,0xfffffffc
c00199c4:	01 c2                	add    edx,eax
c00199c6:	66 ed                	in     ax,dx
c00199c8:	c3                   	ret    
c00199c9:	83 e2 f0             	and    edx,0xfffffff0
c00199cc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00199d0:	c3                   	ret    
c00199d1:	90                   	nop

c00199d2 <PCI::readBAR32(unsigned int, int)>:
c00199d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00199d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199da:	f6 c2 01             	test   dl,0x1
c00199dd:	74 07                	je     c00199e6 <PCI::readBAR32(unsigned int, int)+0x14>
c00199df:	83 e2 fc             	and    edx,0xfffffffc
c00199e2:	01 c2                	add    edx,eax
c00199e4:	ed                   	in     eax,dx
c00199e5:	c3                   	ret    
c00199e6:	83 e2 f0             	and    edx,0xfffffff0
c00199e9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00199ec:	c3                   	ret    
c00199ed:	90                   	nop

c00199ee <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00199ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00199f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00199fa:	f6 c2 01             	test   dl,0x1
c00199fd:	74 07                	je     c0019a06 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00199ff:	83 e2 fc             	and    edx,0xfffffffc
c0019a02:	01 ca                	add    edx,ecx
c0019a04:	ee                   	out    dx,al
c0019a05:	c3                   	ret    
c0019a06:	83 e2 f0             	and    edx,0xfffffff0
c0019a09:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0019a0c:	c3                   	ret    
c0019a0d:	90                   	nop

c0019a0e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0019a0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019a1a:	f6 c2 01             	test   dl,0x1
c0019a1d:	74 08                	je     c0019a27 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0019a1f:	83 e2 fc             	and    edx,0xfffffffc
c0019a22:	01 ca                	add    edx,ecx
c0019a24:	66 ef                	out    dx,ax
c0019a26:	c3                   	ret    
c0019a27:	83 e2 f0             	and    edx,0xfffffff0
c0019a2a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0019a2e:	c3                   	ret    
c0019a2f:	90                   	nop

c0019a30 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0019a30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019a3c:	f6 c2 01             	test   dl,0x1
c0019a3f:	74 07                	je     c0019a48 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0019a41:	83 e2 fc             	and    edx,0xfffffffc
c0019a44:	01 ca                	add    edx,ecx
c0019a46:	ef                   	out    dx,eax
c0019a47:	c3                   	ret    
c0019a48:	83 e2 f0             	and    edx,0xfffffff0
c0019a4b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0019a4e:	c3                   	ret    
c0019a4f:	90                   	nop

c0019a50 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019a50:	55                   	push   ebp
c0019a51:	57                   	push   edi
c0019a52:	56                   	push   esi
c0019a53:	53                   	push   ebx
c0019a54:	83 ec 0c             	sub    esp,0xc
c0019a57:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019a5b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0019a5f:	89 f0                	mov    eax,esi
c0019a61:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0019a65:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019a69:	3c 07                	cmp    al,0x7
c0019a6b:	76 10                	jbe    c0019a7d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0019a6d:	83 ec 0c             	sub    esp,0xc
c0019a70:	68 ff 04 02 c0       	push   0xc00204ff
c0019a75:	e8 c5 79 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0019a7a:	83 c4 10             	add    esp,0x10
c0019a7d:	80 fb 0f             	cmp    bl,0xf
c0019a80:	76 10                	jbe    c0019a92 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0019a82:	83 ec 0c             	sub    esp,0xc
c0019a85:	68 2f 05 02 c0       	push   0xc002052f
c0019a8a:	e8 b0 79 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0019a8f:	83 c4 10             	add    esp,0x10
c0019a92:	8d 04 36             	lea    eax,[esi+esi*1]
c0019a95:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019a9a:	83 c8 f0             	or     eax,0xfffffff0
c0019a9d:	ee                   	out    dx,al
c0019a9e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0019aa3:	89 e8                	mov    eax,ebp
c0019aa5:	ee                   	out    dx,al
c0019aa6:	83 c4 0c             	add    esp,0xc
c0019aa9:	89 d8                	mov    eax,ebx
c0019aab:	66 81 e7 fc 00       	and    di,0xfc
c0019ab0:	5b                   	pop    ebx
c0019ab1:	c1 e0 08             	shl    eax,0x8
c0019ab4:	5e                   	pop    esi
c0019ab5:	09 f8                	or     eax,edi
c0019ab7:	5f                   	pop    edi
c0019ab8:	66 0d 00 c0          	or     ax,0xc000
c0019abc:	5d                   	pop    ebp
c0019abd:	c3                   	ret    

c0019abe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019abe:	57                   	push   edi
c0019abf:	56                   	push   esi
c0019ac0:	53                   	push   ebx
c0019ac1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ac5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ac9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0019acf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019ad3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019ad7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019adb:	83 ff 01             	cmp    edi,0x1
c0019ade:	75 3e                	jne    c0019b1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0019ae0:	89 de                	mov    esi,ebx
c0019ae2:	0f b6 c0             	movzx  eax,al
c0019ae5:	81 e6 fc 00 00 00    	and    esi,0xfc
c0019aeb:	c1 e0 10             	shl    eax,0x10
c0019aee:	0f b6 c9             	movzx  ecx,cl
c0019af1:	09 f0                	or     eax,esi
c0019af3:	c1 e1 08             	shl    ecx,0x8
c0019af6:	0f b6 d2             	movzx  edx,dl
c0019af9:	09 c8                	or     eax,ecx
c0019afb:	c1 e2 0b             	shl    edx,0xb
c0019afe:	09 d0                	or     eax,edx
c0019b00:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019b05:	0d 00 00 00 80       	or     eax,0x80000000
c0019b0a:	ef                   	out    dx,eax
c0019b0b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019b10:	ed                   	in     eax,dx
c0019b11:	83 e3 02             	and    ebx,0x2
c0019b14:	0f b6 cb             	movzx  ecx,bl
c0019b17:	c1 e1 03             	shl    ecx,0x3
c0019b1a:	d3 e8                	shr    eax,cl
c0019b1c:	eb 43                	jmp    c0019b61 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0019b1e:	83 ff 02             	cmp    edi,0x2
c0019b21:	75 2c                	jne    c0019b4f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0019b23:	83 ec 0c             	sub    esp,0xc
c0019b26:	0f b6 c9             	movzx  ecx,cl
c0019b29:	0f b6 d2             	movzx  edx,dl
c0019b2c:	0f b6 fb             	movzx  edi,bl
c0019b2f:	0f b6 c0             	movzx  eax,al
c0019b32:	57                   	push   edi
c0019b33:	51                   	push   ecx
c0019b34:	52                   	push   edx
c0019b35:	50                   	push   eax
c0019b36:	56                   	push   esi
c0019b37:	e8 14 ff ff ff       	call   c0019a50 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019b3c:	89 c2                	mov    edx,eax
c0019b3e:	ed                   	in     eax,dx
c0019b3f:	83 e3 02             	and    ebx,0x2
c0019b42:	83 c4 20             	add    esp,0x20
c0019b45:	0f b6 cb             	movzx  ecx,bl
c0019b48:	c1 e1 03             	shl    ecx,0x3
c0019b4b:	d3 e8                	shr    eax,cl
c0019b4d:	eb 12                	jmp    c0019b61 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0019b4f:	83 ec 0c             	sub    esp,0xc
c0019b52:	68 5f 05 02 c0       	push   0xc002055f
c0019b57:	e8 e3 78 ff ff       	call   c001143f <Krnl::panic(char const*)>
c0019b5c:	83 c4 10             	add    esp,0x10
c0019b5f:	31 c0                	xor    eax,eax
c0019b61:	5b                   	pop    ebx
c0019b62:	5e                   	pop    esi
c0019b63:	5f                   	pop    edi
c0019b64:	c3                   	ret    
c0019b65:	90                   	nop

c0019b66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0019b66:	83 ec 18             	sub    esp,0x18
c0019b69:	6a 00                	push   0x0
c0019b6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b70:	50                   	push   eax
c0019b71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b76:	50                   	push   eax
c0019b77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b7c:	50                   	push   eax
c0019b7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019b81:	e8 38 ff ff ff       	call   c0019abe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019b86:	83 c4 2c             	add    esp,0x2c
c0019b89:	c3                   	ret    

c0019b8a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0019b8a:	83 ec 18             	sub    esp,0x18
c0019b8d:	6a 0e                	push   0xe
c0019b8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b94:	50                   	push   eax
c0019b95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b9a:	50                   	push   eax
c0019b9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019ba0:	50                   	push   eax
c0019ba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019ba5:	e8 14 ff ff ff       	call   c0019abe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019baa:	83 c4 2c             	add    esp,0x2c
c0019bad:	0f b6 c0             	movzx  eax,al
c0019bb0:	c3                   	ret    
c0019bb1:	90                   	nop

c0019bb2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0019bb2:	55                   	push   ebp
c0019bb3:	57                   	push   edi
c0019bb4:	56                   	push   esi
c0019bb5:	53                   	push   ebx
c0019bb6:	83 ec 18             	sub    esp,0x18
c0019bb9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0019bbe:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0019bc3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0019bc8:	6a 0a                	push   0xa
c0019bca:	56                   	push   esi
c0019bcb:	55                   	push   ebp
c0019bcc:	57                   	push   edi
c0019bcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019bd1:	e8 e8 fe ff ff       	call   c0019abe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019bd6:	83 c4 14             	add    esp,0x14
c0019bd9:	89 c3                	mov    ebx,eax
c0019bdb:	6a 0a                	push   0xa
c0019bdd:	0f b6 db             	movzx  ebx,bl
c0019be0:	56                   	push   esi
c0019be1:	55                   	push   ebp
c0019be2:	57                   	push   edi
c0019be3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019be7:	e8 d2 fe ff ff       	call   c0019abe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019bec:	83 c4 2c             	add    esp,0x2c
c0019bef:	25 00 ff 00 00       	and    eax,0xff00
c0019bf4:	09 d8                	or     eax,ebx
c0019bf6:	5b                   	pop    ebx
c0019bf7:	5e                   	pop    esi
c0019bf8:	5f                   	pop    edi
c0019bf9:	5d                   	pop    ebp
c0019bfa:	c3                   	ret    
c0019bfb:	90                   	nop

c0019bfc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0019bfc:	83 ec 18             	sub    esp,0x18
c0019bff:	6a 08                	push   0x8
c0019c01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c06:	50                   	push   eax
c0019c07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c0c:	50                   	push   eax
c0019c0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c12:	50                   	push   eax
c0019c13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c17:	e8 a2 fe ff ff       	call   c0019abe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c1c:	83 c4 2c             	add    esp,0x2c
c0019c1f:	0f b6 c4             	movzx  eax,ah
c0019c22:	c3                   	ret    
c0019c23:	90                   	nop

c0019c24 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0019c24:	83 ec 18             	sub    esp,0x18
c0019c27:	6a 08                	push   0x8
c0019c29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c2e:	50                   	push   eax
c0019c2f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c34:	50                   	push   eax
c0019c35:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c3a:	50                   	push   eax
c0019c3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c3f:	e8 7a fe ff ff       	call   c0019abe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c44:	83 c4 2c             	add    esp,0x2c
c0019c47:	c3                   	ret    

c0019c48 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0019c48:	83 ec 18             	sub    esp,0x18
c0019c4b:	6a 3c                	push   0x3c
c0019c4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c52:	50                   	push   eax
c0019c53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c58:	50                   	push   eax
c0019c59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c5e:	50                   	push   eax
c0019c5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c63:	e8 56 fe ff ff       	call   c0019abe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c68:	83 c4 2c             	add    esp,0x2c
c0019c6b:	c3                   	ret    

c0019c6c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0019c6c:	83 ec 18             	sub    esp,0x18
c0019c6f:	6a 18                	push   0x18
c0019c71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c76:	50                   	push   eax
c0019c77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c7c:	50                   	push   eax
c0019c7d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c82:	50                   	push   eax
c0019c83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c87:	e8 32 fe ff ff       	call   c0019abe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c8c:	83 c4 2c             	add    esp,0x2c
c0019c8f:	0f b6 c4             	movzx  eax,ah
c0019c92:	c3                   	ret    
c0019c93:	90                   	nop

c0019c94 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019c94:	55                   	push   ebp
c0019c95:	57                   	push   edi
c0019c96:	56                   	push   esi
c0019c97:	53                   	push   ebx
c0019c98:	83 ec 28             	sub    esp,0x28
c0019c9b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0019c9f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0019ca4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0019ca9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0019cae:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0019cb5:	8d 43 12             	lea    eax,[ebx+0x12]
c0019cb8:	83 c3 10             	add    ebx,0x10
c0019cbb:	0f b6 c0             	movzx  eax,al
c0019cbe:	0f b6 db             	movzx  ebx,bl
c0019cc1:	50                   	push   eax
c0019cc2:	51                   	push   ecx
c0019cc3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0019cc7:	57                   	push   edi
c0019cc8:	55                   	push   ebp
c0019cc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019ccd:	e8 ec fd ff ff       	call   c0019abe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019cd2:	83 c4 14             	add    esp,0x14
c0019cd5:	89 c6                	mov    esi,eax
c0019cd7:	53                   	push   ebx
c0019cd8:	c1 e6 10             	shl    esi,0x10
c0019cdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019cdf:	51                   	push   ecx
c0019ce0:	57                   	push   edi
c0019ce1:	55                   	push   ebp
c0019ce2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019ce6:	e8 d3 fd ff ff       	call   c0019abe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019ceb:	83 c4 3c             	add    esp,0x3c
c0019cee:	0f b7 c0             	movzx  eax,ax
c0019cf1:	5b                   	pop    ebx
c0019cf2:	09 f0                	or     eax,esi
c0019cf4:	5e                   	pop    esi
c0019cf5:	5f                   	pop    edi
c0019cf6:	5d                   	pop    ebp
c0019cf7:	c3                   	ret    

c0019cf8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0019cf8:	55                   	push   ebp
c0019cf9:	57                   	push   edi
c0019cfa:	56                   	push   esi
c0019cfb:	53                   	push   ebx
c0019cfc:	83 ec 0c             	sub    esp,0xc
c0019cff:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019d03:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d07:	89 f5                	mov    ebp,esi
c0019d09:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0019d0f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019d17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d1b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d1f:	83 f9 01             	cmp    ecx,0x1
c0019d22:	75 5d                	jne    c0019d81 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0019d24:	0f b6 c8             	movzx  ecx,al
c0019d27:	0f b6 d2             	movzx  edx,dl
c0019d2a:	c1 e1 10             	shl    ecx,0x10
c0019d2d:	c1 e2 0b             	shl    edx,0xb
c0019d30:	89 f0                	mov    eax,esi
c0019d32:	25 fc 00 00 00       	and    eax,0xfc
c0019d37:	09 c1                	or     ecx,eax
c0019d39:	89 e8                	mov    eax,ebp
c0019d3b:	0f b6 c0             	movzx  eax,al
c0019d3e:	c1 e0 08             	shl    eax,0x8
c0019d41:	09 c1                	or     ecx,eax
c0019d43:	09 d1                	or     ecx,edx
c0019d45:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019d4a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0019d50:	89 c8                	mov    eax,ecx
c0019d52:	ef                   	out    dx,eax
c0019d53:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019d58:	ed                   	in     eax,dx
c0019d59:	0f b7 db             	movzx  ebx,bx
c0019d5c:	83 e6 02             	and    esi,0x2
c0019d5f:	74 0a                	je     c0019d6b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0019d61:	0f b7 d0             	movzx  edx,ax
c0019d64:	c1 e3 10             	shl    ebx,0x10
c0019d67:	09 d3                	or     ebx,edx
c0019d69:	eb 05                	jmp    c0019d70 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0019d6b:	66 31 c0             	xor    ax,ax
c0019d6e:	09 c3                	or     ebx,eax
c0019d70:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019d75:	89 c8                	mov    eax,ecx
c0019d77:	ef                   	out    dx,eax
c0019d78:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019d7d:	89 d8                	mov    eax,ebx
c0019d7f:	eb 41                	jmp    c0019dc2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019d81:	83 f9 02             	cmp    ecx,0x2
c0019d84:	75 45                	jne    c0019dcb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0019d86:	83 ec 0c             	sub    esp,0xc
c0019d89:	0f b6 d2             	movzx  edx,dl
c0019d8c:	89 f1                	mov    ecx,esi
c0019d8e:	0f b6 c0             	movzx  eax,al
c0019d91:	0f b6 f1             	movzx  esi,cl
c0019d94:	89 e9                	mov    ecx,ebp
c0019d96:	56                   	push   esi
c0019d97:	0f b6 c9             	movzx  ecx,cl
c0019d9a:	51                   	push   ecx
c0019d9b:	52                   	push   edx
c0019d9c:	50                   	push   eax
c0019d9d:	57                   	push   edi
c0019d9e:	e8 ad fc ff ff       	call   c0019a50 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019da3:	89 c2                	mov    edx,eax
c0019da5:	ed                   	in     eax,dx
c0019da6:	83 c4 20             	add    esp,0x20
c0019da9:	0f b7 db             	movzx  ebx,bx
c0019dac:	f6 c2 02             	test   dl,0x2
c0019daf:	74 0c                	je     c0019dbd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0019db1:	0f b7 c8             	movzx  ecx,ax
c0019db4:	89 d8                	mov    eax,ebx
c0019db6:	c1 e0 10             	shl    eax,0x10
c0019db9:	09 c8                	or     eax,ecx
c0019dbb:	eb 05                	jmp    c0019dc2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019dbd:	66 31 c0             	xor    ax,ax
c0019dc0:	09 d8                	or     eax,ebx
c0019dc2:	ef                   	out    dx,eax
c0019dc3:	83 c4 0c             	add    esp,0xc
c0019dc6:	5b                   	pop    ebx
c0019dc7:	5e                   	pop    esi
c0019dc8:	5f                   	pop    edi
c0019dc9:	5d                   	pop    ebp
c0019dca:	c3                   	ret    
c0019dcb:	c7 44 24 20 5f 05 02 c0 	mov    DWORD PTR [esp+0x20],0xc002055f
c0019dd3:	83 c4 0c             	add    esp,0xc
c0019dd6:	5b                   	pop    ebx
c0019dd7:	5e                   	pop    esi
c0019dd8:	5f                   	pop    edi
c0019dd9:	5d                   	pop    ebp
c0019dda:	e9 60 76 ff ff       	jmp    c001143f <Krnl::panic(char const*)>
c0019ddf:	90                   	nop

c0019de0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0019de0:	55                   	push   ebp
c0019de1:	57                   	push   edi
c0019de2:	56                   	push   esi
c0019de3:	53                   	push   ebx
c0019de4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019dea:	80 3d 8c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b8c,0x0
c0019df1:	0f 85 84 00 00 00    	jne    c0019e7b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0019df7:	83 ec 0c             	sub    esp,0xc
c0019dfa:	68 14 01 00 00       	push   0x114
c0019dff:	e8 5d ed fe ff       	call   c0008b61 <malloc>
c0019e04:	83 c4 0c             	add    esp,0xc
c0019e07:	89 c3                	mov    ebx,eax
c0019e09:	ff 35 d0 51 02 c0    	push   DWORD PTR ds:0xc00251d0
c0019e0f:	68 65 05 02 c0       	push   0xc0020565
c0019e14:	50                   	push   eax
c0019e15:	e8 4c 20 ff ff       	call   c000be66 <File::File(char const*, Process*)>
c0019e1a:	5a                   	pop    edx
c0019e1b:	59                   	pop    ecx
c0019e1c:	6a 01                	push   0x1
c0019e1e:	53                   	push   ebx
c0019e1f:	e8 02 21 ff ff       	call   c000bf26 <File::open(FileOpenMode)>
c0019e24:	83 c4 0c             	add    esp,0xc
c0019e27:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0019e2b:	50                   	push   eax
c0019e2c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019e30:	50                   	push   eax
c0019e31:	53                   	push   ebx
c0019e32:	e8 9b 23 ff ff       	call   c000c1d2 <File::stat(unsigned long long*, bool*)>
c0019e37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e3b:	40                   	inc    eax
c0019e3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e3f:	e8 1d ed fe ff       	call   c0008b61 <malloc>
c0019e44:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019e48:	a3 88 5b 02 c0       	mov    ds:0xc0025b88,eax
c0019e4d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0019e51:	5e                   	pop    esi
c0019e52:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019e54:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0019e58:	51                   	push   ecx
c0019e59:	50                   	push   eax
c0019e5a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019e5e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019e62:	53                   	push   ebx
c0019e63:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019e66:	83 c4 14             	add    esp,0x14
c0019e69:	53                   	push   ebx
c0019e6a:	e8 15 21 ff ff       	call   c000bf84 <File::close()>
c0019e6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e73:	83 c4 10             	add    esp,0x10
c0019e76:	a3 84 5b 02 c0       	mov    ds:0xc0025b84,eax
c0019e7b:	a1 84 5b 02 c0       	mov    eax,ds:0xc0025b84
c0019e80:	8b 15 88 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b88
c0019e86:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e89:	31 ff                	xor    edi,edi
c0019e8b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0019e93:	31 f6                	xor    esi,esi
c0019e95:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0019e9a:	31 db                	xor    ebx,ebx
c0019e9c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0019ea4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0019ea9:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0019eb0:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0019eb4:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0019ebb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019ebf:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019ec2:	0f 8e 6b 01 00 00    	jle    c001a033 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0019ec8:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019ecb:	d4 40                	aam    0x40
c0019ecd:	d5 39                	aad    0x39
c0019ecf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ed3:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0019ed7:	d4 40                	aam    0x40
c0019ed9:	d5 39                	aad    0x39
c0019edb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019edf:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0019ee3:	d4 40                	aam    0x40
c0019ee5:	d5 39                	aad    0x39
c0019ee7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019eeb:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0019eef:	d4 40                	aam    0x40
c0019ef1:	d5 39                	aad    0x39
c0019ef3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019ef7:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0019efb:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019eff:	3c 56                	cmp    al,0x56
c0019f01:	74 45                	je     c0019f48 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0019f03:	d4 40                	aam    0x40
c0019f05:	d5 39                	aad    0x39
c0019f07:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019f0a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0019f0e:	0f b6 c9             	movzx  ecx,cl
c0019f11:	c1 e1 04             	shl    ecx,0x4
c0019f14:	d4 40                	aam    0x40
c0019f16:	d5 39                	aad    0x39
c0019f18:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019f1b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0019f1f:	0f b6 db             	movzx  ebx,bl
c0019f22:	09 cb                	or     ebx,ecx
c0019f24:	c1 e3 04             	shl    ebx,0x4
c0019f27:	d4 40                	aam    0x40
c0019f29:	d5 39                	aad    0x39
c0019f2b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019f2e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0019f32:	0f b6 c9             	movzx  ecx,cl
c0019f35:	09 cb                	or     ebx,ecx
c0019f37:	c1 e3 04             	shl    ebx,0x4
c0019f3a:	89 d9                	mov    ecx,ebx
c0019f3c:	d4 40                	aam    0x40
c0019f3e:	d5 39                	aad    0x39
c0019f40:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019f43:	0f b6 db             	movzx  ebx,bl
c0019f46:	09 cb                	or     ebx,ecx
c0019f48:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0019f4c:	80 f9 44             	cmp    cl,0x44
c0019f4f:	74 47                	je     c0019f98 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0019f51:	88 c8                	mov    al,cl
c0019f53:	d4 40                	aam    0x40
c0019f55:	d5 39                	aad    0x39
c0019f57:	83 e8 30             	sub    eax,0x30
c0019f5a:	0f b6 e8             	movzx  ebp,al
c0019f5d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0019f61:	c1 e5 04             	shl    ebp,0x4
c0019f64:	d4 40                	aam    0x40
c0019f66:	d5 39                	aad    0x39
c0019f68:	83 e8 30             	sub    eax,0x30
c0019f6b:	0f b6 f0             	movzx  esi,al
c0019f6e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0019f72:	09 ee                	or     esi,ebp
c0019f74:	c1 e6 04             	shl    esi,0x4
c0019f77:	d4 40                	aam    0x40
c0019f79:	d5 39                	aad    0x39
c0019f7b:	83 e8 30             	sub    eax,0x30
c0019f7e:	0f b6 e8             	movzx  ebp,al
c0019f81:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0019f85:	09 ee                	or     esi,ebp
c0019f87:	c1 e6 04             	shl    esi,0x4
c0019f8a:	89 f5                	mov    ebp,esi
c0019f8c:	d4 40                	aam    0x40
c0019f8e:	d5 39                	aad    0x39
c0019f90:	83 e8 30             	sub    eax,0x30
c0019f93:	0f b6 f0             	movzx  esi,al
c0019f96:	09 ee                	or     esi,ebp
c0019f98:	83 c7 10             	add    edi,0x10
c0019f9b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0019f9f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019fa2:	3c 0a                	cmp    al,0xa
c0019fa4:	74 09                	je     c0019faf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0019fa6:	45                   	inc    ebp
c0019fa7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019faa:	75 16                	jne    c0019fc2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0019fac:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0019faf:	3c 0a                	cmp    al,0xa
c0019fb1:	0f 94 c0             	sete   al
c0019fb4:	0f b6 c0             	movzx  eax,al
c0019fb7:	01 c7                	add    edi,eax
c0019fb9:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0019fbe:	75 0c                	jne    c0019fcc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0019fc0:	eb 15                	jmp    c0019fd7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0019fc2:	47                   	inc    edi
c0019fc3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0019fc6:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0019fca:	eb d3                	jmp    c0019f9f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0019fcc:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0019fd1:	0f 85 e8 fe ff ff    	jne    c0019ebf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0019fd7:	80 f9 44             	cmp    cl,0x44
c0019fda:	74 0b                	je     c0019fe7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0019fdc:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0019fe1:	0f 85 d8 fe ff ff    	jne    c0019ebf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0019fe7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0019feb:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019fef:	c1 e1 04             	shl    ecx,0x4
c0019ff2:	83 e8 30             	sub    eax,0x30
c0019ff5:	09 c8                	or     eax,ecx
c0019ff7:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0019ffb:	0f 85 be fe ff ff    	jne    c0019ebf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001a001:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001a005:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a009:	c1 e1 04             	shl    ecx,0x4
c001a00c:	83 e8 30             	sub    eax,0x30
c001a00f:	09 c8                	or     eax,ecx
c001a011:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001a015:	0f 85 a4 fe ff ff    	jne    c0019ebf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001a01b:	50                   	push   eax
c001a01c:	50                   	push   eax
c001a01d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a021:	50                   	push   eax
c001a022:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001a029:	e8 f2 65 fe ff       	call   c0000620 <strcpy>
c001a02e:	83 c4 10             	add    esp,0x10
c001a031:	eb 15                	jmp    c001a048 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001a033:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001a03a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001a045:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a048:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001a04f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a055:	5b                   	pop    ebx
c001a056:	5e                   	pop    esi
c001a057:	5f                   	pop    edi
c001a058:	5d                   	pop    ebp
c001a059:	c3                   	ret    

c001a05a <PCI::checkBus(unsigned char)>:
c001a05a:	56                   	push   esi
c001a05b:	53                   	push   ebx
c001a05c:	31 f6                	xor    esi,esi
c001a05e:	51                   	push   ecx
c001a05f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001a063:	0f b6 c3             	movzx  eax,bl
c001a066:	52                   	push   edx
c001a067:	56                   	push   esi
c001a068:	46                   	inc    esi
c001a069:	50                   	push   eax
c001a06a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a06e:	e8 f3 02 00 00       	call   c001a366 <PCI::checkDevice(unsigned char, unsigned char)>
c001a073:	83 c4 10             	add    esp,0x10
c001a076:	83 fe 20             	cmp    esi,0x20
c001a079:	75 e8                	jne    c001a063 <PCI::checkBus(unsigned char)+0x9>
c001a07b:	58                   	pop    eax
c001a07c:	5b                   	pop    ebx
c001a07d:	5e                   	pop    esi
c001a07e:	c3                   	ret    
c001a07f:	90                   	nop

c001a080 <PCI::foundDevice(PCIDeviceInfo)>:
c001a080:	55                   	push   ebp
c001a081:	57                   	push   edi
c001a082:	56                   	push   esi
c001a083:	53                   	push   ebx
c001a084:	83 ec 1c             	sub    esp,0x1c
c001a087:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a08b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001a091:	0f 84 52 01 00 00    	je     c001a1e9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001a097:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001a09b:	66 81 f9 06 04       	cmp    cx,0x406
c001a0a0:	75 2c                	jne    c001a0ce <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001a0a2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a0a7:	50                   	push   eax
c001a0a8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a0ad:	50                   	push   eax
c001a0ae:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a0b3:	50                   	push   eax
c001a0b4:	56                   	push   esi
c001a0b5:	e8 b2 fb ff ff       	call   c0019c6c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a0ba:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a0be:	0f b6 c0             	movzx  eax,al
c001a0c1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a0c5:	83 c4 2c             	add    esp,0x2c
c001a0c8:	5b                   	pop    ebx
c001a0c9:	5e                   	pop    esi
c001a0ca:	5f                   	pop    edi
c001a0cb:	5d                   	pop    ebp
c001a0cc:	eb 8c                	jmp    c001a05a <PCI::checkBus(unsigned char)>
c001a0ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a0d2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001a0d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a0dc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a0e0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001a0e4:	88 d3                	mov    bl,dl
c001a0e6:	85 c0                	test   eax,eax
c001a0e8:	74 33                	je     c001a11d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a0ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a0ed:	85 d2                	test   edx,edx
c001a0ef:	74 28                	je     c001a119 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a0f1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001a0f7:	31 ef                	xor    edi,ebp
c001a0f9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001a0ff:	75 18                	jne    c001a119 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a101:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a105:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001a10b:	75 0c                	jne    c001a119 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a10d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001a113:	0f 84 d0 00 00 00    	je     c001a1e9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001a119:	8b 00                	mov    eax,DWORD PTR [eax]
c001a11b:	eb c9                	jmp    c001a0e6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001a11d:	66 81 f9 01 06       	cmp    cx,0x601
c001a122:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001a126:	75 19                	jne    c001a141 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001a128:	83 ec 0c             	sub    esp,0xc
c001a12b:	68 64 01 00 00       	push   0x164
c001a130:	e8 2c ea fe ff       	call   c0008b61 <malloc>
c001a135:	89 c5                	mov    ebp,eax
c001a137:	89 04 24             	mov    DWORD PTR [esp],eax
c001a13a:	e8 47 0e 00 00       	call   c001af86 <SATABus::SATABus()>
c001a13f:	eb 1e                	jmp    c001a15f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001a141:	66 81 f9 01 01       	cmp    cx,0x101
c001a146:	75 60                	jne    c001a1a8 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001a148:	83 ec 0c             	sub    esp,0xc
c001a14b:	68 70 02 00 00       	push   0x270
c001a150:	e8 0c ea fe ff       	call   c0008b61 <malloc>
c001a155:	89 c5                	mov    ebp,eax
c001a157:	89 04 24             	mov    DWORD PTR [esp],eax
c001a15a:	e8 cb 02 00 00       	call   c001a42a <IDE::IDE()>
c001a15f:	58                   	pop    eax
c001a160:	5a                   	pop    edx
c001a161:	55                   	push   ebp
c001a162:	56                   	push   esi
c001a163:	e8 c8 2b ff ff       	call   c000cd30 <Device::addChild(Device*)>
c001a168:	83 ec 1c             	sub    esp,0x1c
c001a16b:	b9 09 00 00 00       	mov    ecx,0x9
c001a170:	fc                   	cld    
c001a171:	89 e7                	mov    edi,esp
c001a173:	89 de                	mov    esi,ebx
c001a175:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a177:	55                   	push   ebp
c001a178:	e8 f9 2a ff ff       	call   c000cc76 <Device::preOpenPCI(PCIDeviceInfo)>
c001a17d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a180:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a184:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a18c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a194:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a19c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001a19f:	83 c4 4c             	add    esp,0x4c
c001a1a2:	5b                   	pop    ebx
c001a1a3:	5e                   	pop    esi
c001a1a4:	5f                   	pop    edi
c001a1a5:	5d                   	pop    ebp
c001a1a6:	ff e0                	jmp    eax
c001a1a8:	83 ec 0c             	sub    esp,0xc
c001a1ab:	68 58 01 00 00       	push   0x158
c001a1b0:	e8 ac e9 fe ff       	call   c0008b61 <malloc>
c001a1b5:	89 c5                	mov    ebp,eax
c001a1b7:	58                   	pop    eax
c001a1b8:	5a                   	pop    edx
c001a1b9:	68 7e 05 02 c0       	push   0xc002057e
c001a1be:	55                   	push   ebp
c001a1bf:	e8 0a 2e ff ff       	call   c000cfce <DriverlessDevice::DriverlessDevice(char const*)>
c001a1c4:	59                   	pop    ecx
c001a1c5:	5f                   	pop    edi
c001a1c6:	55                   	push   ebp
c001a1c7:	56                   	push   esi
c001a1c8:	e8 63 2b ff ff       	call   c000cd30 <Device::addChild(Device*)>
c001a1cd:	b9 09 00 00 00       	mov    ecx,0x9
c001a1d2:	fc                   	cld    
c001a1d3:	89 df                	mov    edi,ebx
c001a1d5:	89 de                	mov    esi,ebx
c001a1d7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a1d9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001a1dd:	83 c4 2c             	add    esp,0x2c
c001a1e0:	5b                   	pop    ebx
c001a1e1:	5e                   	pop    esi
c001a1e2:	5f                   	pop    edi
c001a1e3:	5d                   	pop    ebp
c001a1e4:	e9 8d 2a ff ff       	jmp    c000cc76 <Device::preOpenPCI(PCIDeviceInfo)>
c001a1e9:	83 c4 1c             	add    esp,0x1c
c001a1ec:	5b                   	pop    ebx
c001a1ed:	5e                   	pop    esi
c001a1ee:	5f                   	pop    edi
c001a1ef:	5d                   	pop    ebp
c001a1f0:	c3                   	ret    
c001a1f1:	90                   	nop

c001a1f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a1f2:	55                   	push   ebp
c001a1f3:	57                   	push   edi
c001a1f4:	56                   	push   esi
c001a1f5:	53                   	push   ebx
c001a1f6:	83 ec 68             	sub    esp,0x68
c001a1f9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a1fd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a204:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a208:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a20f:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001a214:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a218:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a21f:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c001a224:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a228:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a22d:	6a 0c                	push   0xc
c001a22f:	57                   	push   edi
c001a230:	53                   	push   ebx
c001a231:	56                   	push   esi
c001a232:	55                   	push   ebp
c001a233:	e8 86 f8 ff ff       	call   c0019abe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a238:	83 c4 20             	add    esp,0x20
c001a23b:	57                   	push   edi
c001a23c:	53                   	push   ebx
c001a23d:	56                   	push   esi
c001a23e:	55                   	push   ebp
c001a23f:	e8 6e f9 ff ff       	call   c0019bb2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a244:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001a249:	57                   	push   edi
c001a24a:	53                   	push   ebx
c001a24b:	56                   	push   esi
c001a24c:	55                   	push   ebp
c001a24d:	e8 f6 f9 ff ff       	call   c0019c48 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a252:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001a256:	83 c4 14             	add    esp,0x14
c001a259:	6a 3c                	push   0x3c
c001a25b:	57                   	push   edi
c001a25c:	53                   	push   ebx
c001a25d:	56                   	push   esi
c001a25e:	55                   	push   ebp
c001a25f:	e8 5a f8 ff ff       	call   c0019abe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a264:	0f b6 c4             	movzx  eax,ah
c001a267:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a26b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001a26f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a273:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c001a278:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001a27e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001a284:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a288:	83 c4 20             	add    esp,0x20
c001a28b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a290:	74 30                	je     c001a2c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a292:	31 c0                	xor    eax,eax
c001a294:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a298:	7e 28                	jle    c001a2c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a29a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001a2a2:	39 cb                	cmp    ebx,ecx
c001a2a4:	75 19                	jne    c001a2bf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a2a6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001a2ae:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001a2b2:	75 0b                	jne    c001a2bf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a2b4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001a2bb:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c001a2bf:	40                   	inc    eax
c001a2c0:	eb d2                	jmp    c001a294 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001a2c2:	31 d2                	xor    edx,edx
c001a2c4:	83 ec 0c             	sub    esp,0xc
c001a2c7:	57                   	push   edi
c001a2c8:	53                   	push   ebx
c001a2c9:	56                   	push   esi
c001a2ca:	52                   	push   edx
c001a2cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001a2cf:	55                   	push   ebp
c001a2d0:	e8 bf f9 ff ff       	call   c0019c94 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a2d9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001a2dd:	42                   	inc    edx
c001a2de:	83 c4 20             	add    esp,0x20
c001a2e1:	83 fa 06             	cmp    edx,0x6
c001a2e4:	75 de                	jne    c001a2c4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001a2e6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a2eb:	83 ec 0c             	sub    esp,0xc
c001a2ee:	86 e0                	xchg   al,ah
c001a2f0:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001a2f5:	6a 02                	push   0x2
c001a2f7:	57                   	push   edi
c001a2f8:	53                   	push   ebx
c001a2f9:	56                   	push   esi
c001a2fa:	55                   	push   ebp
c001a2fb:	e8 be f7 ff ff       	call   c0019abe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a300:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001a305:	83 c4 20             	add    esp,0x20
c001a308:	57                   	push   edi
c001a309:	53                   	push   ebx
c001a30a:	56                   	push   esi
c001a30b:	55                   	push   ebp
c001a30c:	e8 eb f8 ff ff       	call   c0019bfc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001a311:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a315:	57                   	push   edi
c001a316:	53                   	push   ebx
c001a317:	56                   	push   esi
c001a318:	55                   	push   ebp
c001a319:	e8 48 f8 ff ff       	call   c0019b66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a31e:	b9 09 00 00 00       	mov    ecx,0x9
c001a323:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001a328:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001a32c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001a330:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a334:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001a338:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001a33c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001a340:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001a344:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001a348:	83 ec 0c             	sub    esp,0xc
c001a34b:	fc                   	cld    
c001a34c:	89 e7                	mov    edi,esp
c001a34e:	8d 74 24 58          	lea    esi,[esp+0x58]
c001a352:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a354:	55                   	push   ebp
c001a355:	e8 26 fd ff ff       	call   c001a080 <PCI::foundDevice(PCIDeviceInfo)>
c001a35a:	81 c4 8c 00 00 00    	add    esp,0x8c
c001a360:	5b                   	pop    ebx
c001a361:	5e                   	pop    esi
c001a362:	5f                   	pop    edi
c001a363:	5d                   	pop    ebp
c001a364:	c3                   	ret    
c001a365:	90                   	nop

c001a366 <PCI::checkDevice(unsigned char, unsigned char)>:
c001a366:	55                   	push   ebp
c001a367:	57                   	push   edi
c001a368:	56                   	push   esi
c001a369:	53                   	push   ebx
c001a36a:	83 ec 0c             	sub    esp,0xc
c001a36d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a371:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a376:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a37b:	6a 00                	push   0x0
c001a37d:	56                   	push   esi
c001a37e:	57                   	push   edi
c001a37f:	55                   	push   ebp
c001a380:	e8 e1 f7 ff ff       	call   c0019b66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a385:	6a 00                	push   0x0
c001a387:	56                   	push   esi
c001a388:	57                   	push   edi
c001a389:	55                   	push   ebp
c001a38a:	e8 63 fe ff ff       	call   c001a1f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a38f:	83 c4 20             	add    esp,0x20
c001a392:	6a 00                	push   0x0
c001a394:	56                   	push   esi
c001a395:	57                   	push   edi
c001a396:	55                   	push   ebp
c001a397:	e8 ee f7 ff ff       	call   c0019b8a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a39c:	83 c4 10             	add    esp,0x10
c001a39f:	84 c0                	test   al,al
c001a3a1:	79 27                	jns    c001a3ca <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001a3a3:	bb 01 00 00 00       	mov    ebx,0x1
c001a3a8:	53                   	push   ebx
c001a3a9:	56                   	push   esi
c001a3aa:	57                   	push   edi
c001a3ab:	55                   	push   ebp
c001a3ac:	e8 b5 f7 ff ff       	call   c0019b66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a3b1:	83 c4 10             	add    esp,0x10
c001a3b4:	66 40                	inc    ax
c001a3b6:	74 0c                	je     c001a3c4 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001a3b8:	53                   	push   ebx
c001a3b9:	56                   	push   esi
c001a3ba:	57                   	push   edi
c001a3bb:	55                   	push   ebp
c001a3bc:	e8 31 fe ff ff       	call   c001a1f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a3c1:	83 c4 10             	add    esp,0x10
c001a3c4:	43                   	inc    ebx
c001a3c5:	83 fb 08             	cmp    ebx,0x8
c001a3c8:	75 de                	jne    c001a3a8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001a3ca:	83 c4 0c             	add    esp,0xc
c001a3cd:	5b                   	pop    ebx
c001a3ce:	5e                   	pop    esi
c001a3cf:	5f                   	pop    edi
c001a3d0:	5d                   	pop    ebp
c001a3d1:	c3                   	ret    

c001a3d2 <PCI::detect()>:
c001a3d2:	56                   	push   esi
c001a3d3:	53                   	push   ebx
c001a3d4:	53                   	push   ebx
c001a3d5:	31 db                	xor    ebx,ebx
c001a3d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a3db:	6a 00                	push   0x0
c001a3dd:	6a 00                	push   0x0
c001a3df:	6a 00                	push   0x0
c001a3e1:	56                   	push   esi
c001a3e2:	e8 a3 f7 ff ff       	call   c0019b8a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a3e7:	83 c4 10             	add    esp,0x10
c001a3ea:	a8 80                	test   al,0x80
c001a3ec:	75 21                	jne    c001a40f <PCI::detect()+0x3d>
c001a3ee:	51                   	push   ecx
c001a3ef:	51                   	push   ecx
c001a3f0:	6a 00                	push   0x0
c001a3f2:	56                   	push   esi
c001a3f3:	e8 62 fc ff ff       	call   c001a05a <PCI::checkBus(unsigned char)>
c001a3f8:	83 c4 10             	add    esp,0x10
c001a3fb:	eb 24                	jmp    c001a421 <PCI::detect()+0x4f>
c001a3fd:	52                   	push   edx
c001a3fe:	52                   	push   edx
c001a3ff:	53                   	push   ebx
c001a400:	43                   	inc    ebx
c001a401:	56                   	push   esi
c001a402:	e8 53 fc ff ff       	call   c001a05a <PCI::checkBus(unsigned char)>
c001a407:	83 c4 10             	add    esp,0x10
c001a40a:	83 fb 08             	cmp    ebx,0x8
c001a40d:	74 12                	je     c001a421 <PCI::detect()+0x4f>
c001a40f:	53                   	push   ebx
c001a410:	6a 00                	push   0x0
c001a412:	6a 00                	push   0x0
c001a414:	56                   	push   esi
c001a415:	e8 4c f7 ff ff       	call   c0019b66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a41a:	83 c4 10             	add    esp,0x10
c001a41d:	66 40                	inc    ax
c001a41f:	74 dc                	je     c001a3fd <PCI::detect()+0x2b>
c001a421:	58                   	pop    eax
c001a422:	5b                   	pop    ebx
c001a423:	5e                   	pop    esi
c001a424:	c3                   	ret    
c001a425:	90                   	nop

c001a426 <IDE::close(int, int, void*)>:
c001a426:	83 c8 ff             	or     eax,0xffffffff
c001a429:	c3                   	ret    

c001a42a <IDE::IDE()>:
c001a42a:	83 ec 0c             	sub    esp,0xc
c001a42d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a431:	83 ec 08             	sub    esp,0x8
c001a434:	68 c4 05 02 c0       	push   0xc00205c4
c001a439:	50                   	push   eax
c001a43a:	e8 35 2c ff ff       	call   c000d074 <HardDiskController::HardDiskController(char const*)>
c001a43f:	83 c4 10             	add    esp,0x10
c001a442:	ba 54 06 02 c0       	mov    edx,0xc0020654
c001a447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a44b:	89 10                	mov    DWORD PTR [eax],edx
c001a44d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a451:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001a458:	90                   	nop
c001a459:	83 c4 0c             	add    esp,0xc
c001a45c:	c3                   	ret    
c001a45d:	90                   	nop

c001a45e <IDE::prepareInterrupt(unsigned char)>:
c001a45e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a463:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a467:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001a46f:	c3                   	ret    

c001a470 <selectDrive(unsigned char, unsigned char)>:
c001a470:	c3                   	ret    
c001a471:	90                   	nop

c001a472 <IDE::getBase(unsigned char)>:
c001a472:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001a477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a47b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001a483:	c3                   	ret    

c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001a484:	55                   	push   ebp
c001a485:	57                   	push   edi
c001a486:	56                   	push   esi
c001a487:	53                   	push   ebx
c001a488:	83 ec 1c             	sub    esp,0x1c
c001a48b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a48f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a493:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001a496:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a49a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a49e:	80 f9 03             	cmp    cl,0x3
c001a4a1:	77 51                	ja     c001a4f4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001a4a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4a7:	0f b6 f2             	movzx  esi,dl
c001a4aa:	0f b6 db             	movzx  ebx,bl
c001a4ad:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a4b0:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001a4b4:	83 ca 80             	or     edx,0xffffff80
c001a4b7:	0f b6 d2             	movzx  edx,dl
c001a4ba:	52                   	push   edx
c001a4bb:	6a 0c                	push   0xc
c001a4bd:	56                   	push   esi
c001a4be:	57                   	push   edi
c001a4bf:	e8 c0 ff ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4c4:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001a4c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4cd:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001a4d1:	ee                   	out    dx,al
c001a4d2:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001a4d7:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001a4db:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001a4df:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a4e3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a4eb:	83 c4 2c             	add    esp,0x2c
c001a4ee:	5b                   	pop    ebx
c001a4ef:	5e                   	pop    esi
c001a4f0:	5f                   	pop    edi
c001a4f1:	5d                   	pop    ebp
c001a4f2:	eb 90                	jmp    c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4f4:	80 fb 07             	cmp    bl,0x7
c001a4f7:	77 12                	ja     c001a50b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001a4f9:	0f b6 d2             	movzx  edx,dl
c001a4fc:	0f b6 db             	movzx  ebx,bl
c001a4ff:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001a507:	89 da                	mov    edx,ebx
c001a509:	eb 2f                	jmp    c001a53a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a50b:	80 fb 0d             	cmp    bl,0xd
c001a50e:	77 13                	ja     c001a523 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001a510:	0f b6 d2             	movzx  edx,dl
c001a513:	0f b6 db             	movzx  ebx,bl
c001a516:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001a51d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001a521:	eb 17                	jmp    c001a53a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a523:	80 fb 15             	cmp    bl,0x15
c001a526:	77 13                	ja     c001a53b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001a528:	0f b6 d2             	movzx  edx,dl
c001a52b:	0f b6 db             	movzx  ebx,bl
c001a52e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001a536:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001a53a:	ee                   	out    dx,al
c001a53b:	83 c4 1c             	add    esp,0x1c
c001a53e:	5b                   	pop    ebx
c001a53f:	5e                   	pop    esi
c001a540:	5f                   	pop    edi
c001a541:	5d                   	pop    ebp
c001a542:	c3                   	ret    
c001a543:	90                   	nop

c001a544 <IDE::read(unsigned char, unsigned char)>:
c001a544:	55                   	push   ebp
c001a545:	57                   	push   edi
c001a546:	56                   	push   esi
c001a547:	53                   	push   ebx
c001a548:	83 ec 1c             	sub    esp,0x1c
c001a54b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a54f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a553:	8d 43 f8             	lea    eax,[ebx-0x8]
c001a556:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a55a:	3c 03                	cmp    al,0x3
c001a55c:	77 43                	ja     c001a5a1 <IDE::read(unsigned char, unsigned char)+0x5d>
c001a55e:	0f b6 f2             	movzx  esi,dl
c001a561:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a564:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001a568:	83 c8 80             	or     eax,0xffffff80
c001a56b:	0f b6 c0             	movzx  eax,al
c001a56e:	50                   	push   eax
c001a56f:	6a 0c                	push   0xc
c001a571:	56                   	push   esi
c001a572:	57                   	push   edi
c001a573:	e8 0c ff ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a578:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001a57d:	0f b6 c3             	movzx  eax,bl
c001a580:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001a584:	ec                   	in     al,dx
c001a585:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a589:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001a58e:	52                   	push   edx
c001a58f:	6a 0c                	push   0xc
c001a591:	56                   	push   esi
c001a592:	57                   	push   edi
c001a593:	e8 ec fe ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a598:	83 c4 20             	add    esp,0x20
c001a59b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a59f:	eb 49                	jmp    c001a5ea <IDE::read(unsigned char, unsigned char)+0xa6>
c001a5a1:	80 fb 07             	cmp    bl,0x7
c001a5a4:	77 12                	ja     c001a5b8 <IDE::read(unsigned char, unsigned char)+0x74>
c001a5a6:	0f b6 d2             	movzx  edx,dl
c001a5a9:	0f b6 c3             	movzx  eax,bl
c001a5ac:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001a5b4:	89 c2                	mov    edx,eax
c001a5b6:	eb 31                	jmp    c001a5e9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a5b8:	80 fb 0d             	cmp    bl,0xd
c001a5bb:	77 13                	ja     c001a5d0 <IDE::read(unsigned char, unsigned char)+0x8c>
c001a5bd:	0f b6 d2             	movzx  edx,dl
c001a5c0:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001a5c7:	0f b6 d3             	movzx  edx,bl
c001a5ca:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001a5ce:	eb 19                	jmp    c001a5e9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a5d0:	31 c0                	xor    eax,eax
c001a5d2:	80 fb 15             	cmp    bl,0x15
c001a5d5:	77 13                	ja     c001a5ea <IDE::read(unsigned char, unsigned char)+0xa6>
c001a5d7:	0f b6 d2             	movzx  edx,dl
c001a5da:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001a5e2:	0f b6 d3             	movzx  edx,bl
c001a5e5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001a5e9:	ec                   	in     al,dx
c001a5ea:	83 c4 1c             	add    esp,0x1c
c001a5ed:	5b                   	pop    ebx
c001a5ee:	5e                   	pop    esi
c001a5ef:	5f                   	pop    edi
c001a5f0:	5d                   	pop    ebp
c001a5f1:	c3                   	ret    

c001a5f2 <IDE::waitInterrupt(unsigned char)>:
c001a5f2:	57                   	push   edi
c001a5f3:	56                   	push   esi
c001a5f4:	31 f6                	xor    esi,esi
c001a5f6:	53                   	push   ebx
c001a5f7:	83 ec 10             	sub    esp,0x10
c001a5fa:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a5fe:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a602:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a606:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a60b:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001a612:	84 db                	test   bl,bl
c001a614:	75 33                	jne    c001a649 <IDE::waitInterrupt(unsigned char)+0x57>
c001a616:	52                   	push   edx
c001a617:	6a 0c                	push   0xc
c001a619:	50                   	push   eax
c001a61a:	57                   	push   edi
c001a61b:	e8 24 ff ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001a620:	83 c4 10             	add    esp,0x10
c001a623:	a8 01                	test   al,0x1
c001a625:	75 2a                	jne    c001a651 <IDE::waitInterrupt(unsigned char)+0x5f>
c001a627:	f7 c6 04 00 00 00    	test   esi,0x4
c001a62d:	75 12                	jne    c001a641 <IDE::waitInterrupt(unsigned char)+0x4f>
c001a62f:	83 fe 32             	cmp    esi,0x32
c001a632:	7e 0d                	jle    c001a641 <IDE::waitInterrupt(unsigned char)+0x4f>
c001a634:	83 ec 0c             	sub    esp,0xc
c001a637:	6a 64                	push   0x64
c001a639:	e8 56 a4 ff ff       	call   c0014a94 <milliTenthSleep(unsigned int)>
c001a63e:	83 c4 10             	add    esp,0x10
c001a641:	83 fe 3c             	cmp    esi,0x3c
c001a644:	74 0b                	je     c001a651 <IDE::waitInterrupt(unsigned char)+0x5f>
c001a646:	46                   	inc    esi
c001a647:	eb bd                	jmp    c001a606 <IDE::waitInterrupt(unsigned char)+0x14>
c001a649:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001a651:	83 c4 10             	add    esp,0x10
c001a654:	88 d8                	mov    al,bl
c001a656:	5b                   	pop    ebx
c001a657:	5e                   	pop    esi
c001a658:	5f                   	pop    edi
c001a659:	c3                   	ret    

c001a65a <ideChannel0IRQHandler(regs*, void*)>:
c001a65a:	83 ec 10             	sub    esp,0x10
c001a65d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a661:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001a668:	6a 07                	push   0x7
c001a66a:	6a 00                	push   0x0
c001a66c:	50                   	push   eax
c001a66d:	e8 d2 fe ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001a672:	83 c4 1c             	add    esp,0x1c
c001a675:	c3                   	ret    

c001a676 <ideChannel1IRQHandler(regs*, void*)>:
c001a676:	83 ec 10             	sub    esp,0x10
c001a679:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a67d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001a684:	6a 07                	push   0x7
c001a686:	6a 01                	push   0x1
c001a688:	50                   	push   eax
c001a689:	e8 b6 fe ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001a68e:	83 c4 1c             	add    esp,0x1c
c001a691:	c3                   	ret    

c001a692 <IDE::enableIRQs(unsigned char, bool)>:
c001a692:	57                   	push   edi
c001a693:	56                   	push   esi
c001a694:	be 04 00 00 00       	mov    esi,0x4
c001a699:	53                   	push   ebx
c001a69a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a69f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a6a3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001a6a8:	0f 94 c0             	sete   al
c001a6ab:	01 c0                	add    eax,eax
c001a6ad:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001a6b4:	0f b6 c0             	movzx  eax,al
c001a6b7:	50                   	push   eax
c001a6b8:	6a 0c                	push   0xc
c001a6ba:	57                   	push   edi
c001a6bb:	53                   	push   ebx
c001a6bc:	e8 c3 fd ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6c1:	83 c4 10             	add    esp,0x10
c001a6c4:	50                   	push   eax
c001a6c5:	6a 0c                	push   0xc
c001a6c7:	57                   	push   edi
c001a6c8:	53                   	push   ebx
c001a6c9:	e8 76 fe ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001a6ce:	83 c4 10             	add    esp,0x10
c001a6d1:	4e                   	dec    esi
c001a6d2:	75 f0                	jne    c001a6c4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001a6d4:	5b                   	pop    ebx
c001a6d5:	5e                   	pop    esi
c001a6d6:	5f                   	pop    edi
c001a6d7:	c3                   	ret    

c001a6d8 <IDE::open(int, int, void*)>:
c001a6d8:	55                   	push   ebp
c001a6d9:	57                   	push   edi
c001a6da:	56                   	push   esi
c001a6db:	53                   	push   ebx
c001a6dc:	83 ec 1c             	sub    esp,0x1c
c001a6df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a6e3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001a6ec:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001a6f5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001a6fc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001a703:	0f 85 b0 02 00 00    	jne    c001a9b9 <IDE::open(int, int, void*)+0x2e1>
c001a709:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001a70f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001a713:	83 e0 7f             	and    eax,0x7f
c001a716:	3c 05                	cmp    al,0x5
c001a718:	74 04                	je     c001a71e <IDE::open(int, int, void*)+0x46>
c001a71a:	3c 0f                	cmp    al,0xf
c001a71c:	75 32                	jne    c001a750 <IDE::open(int, int, void*)+0x78>
c001a71e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001a724:	83 e0 fc             	and    eax,0xfffffffc
c001a727:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a72e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001a734:	83 e0 fc             	and    eax,0xfffffffc
c001a737:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a73e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001a744:	83 e0 fc             	and    eax,0xfffffffc
c001a747:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a74e:	eb 14                	jmp    c001a764 <IDE::open(int, int, void*)+0x8c>
c001a750:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001a75a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001a764:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001a76b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001a772:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a776:	89 c6                	mov    esi,eax
c001a778:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a77d:	c1 e6 10             	shl    esi,0x10
c001a780:	89 e8                	mov    eax,ebp
c001a782:	89 fa                	mov    edx,edi
c001a784:	c1 e0 0b             	shl    eax,0xb
c001a787:	09 f0                	or     eax,esi
c001a789:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001a790:	c1 e6 08             	shl    esi,0x8
c001a793:	09 c6                	or     esi,eax
c001a795:	89 f0                	mov    eax,esi
c001a797:	0d 08 00 00 80       	or     eax,0x80000008
c001a79c:	ef                   	out    dx,eax
c001a79d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001a7a2:	89 ca                	mov    edx,ecx
c001a7a4:	ed                   	in     eax,dx
c001a7a5:	c1 e8 10             	shr    eax,0x10
c001a7a8:	3d ff ff 00 00       	cmp    eax,0xffff
c001a7ad:	0f 84 f5 00 00 00    	je     c001a8a8 <IDE::open(int, int, void*)+0x1d0>
c001a7b3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001a7b9:	89 fa                	mov    edx,edi
c001a7bb:	89 f0                	mov    eax,esi
c001a7bd:	ef                   	out    dx,eax
c001a7be:	b0 fe                	mov    al,0xfe
c001a7c0:	89 ca                	mov    edx,ecx
c001a7c2:	ee                   	out    dx,al
c001a7c3:	89 f0                	mov    eax,esi
c001a7c5:	89 fa                	mov    edx,edi
c001a7c7:	ef                   	out    dx,eax
c001a7c8:	89 ca                	mov    edx,ecx
c001a7ca:	ed                   	in     eax,dx
c001a7cb:	3c fe                	cmp    al,0xfe
c001a7cd:	0f 85 a9 00 00 00    	jne    c001a87c <IDE::open(int, int, void*)+0x1a4>
c001a7d3:	8b 15 e8 1c 02 c0    	mov    edx,DWORD PTR ds:0xc0021ce8
c001a7d9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001a7e0:	74 33                	je     c001a815 <IDE::open(int, int, void*)+0x13d>
c001a7e2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001a7e8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001a7ec:	40                   	inc    eax
c001a7ed:	83 ec 0c             	sub    esp,0xc
c001a7f0:	0f b6 c0             	movzx  eax,al
c001a7f3:	50                   	push   eax
c001a7f4:	55                   	push   ebp
c001a7f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7f9:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001a7ff:	51                   	push   ecx
c001a800:	e8 b7 52 ff ff       	call   c000fabc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001a805:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001a80a:	83 c4 1c             	add    esp,0x1c
c001a80d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a813:	eb 0a                	jmp    c001a81f <IDE::open(int, int, void*)+0x147>
c001a815:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001a81f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001a826:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001a82d:	c1 e1 10             	shl    ecx,0x10
c001a830:	c1 e0 08             	shl    eax,0x8
c001a833:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a838:	09 c1                	or     ecx,eax
c001a83a:	89 fa                	mov    edx,edi
c001a83c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001a843:	c1 e0 0b             	shl    eax,0xb
c001a846:	09 c1                	or     ecx,eax
c001a848:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001a84e:	89 c8                	mov    eax,ecx
c001a850:	ef                   	out    dx,eax
c001a851:	be fc 0c 00 00       	mov    esi,0xcfc
c001a856:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001a85c:	89 f2                	mov    edx,esi
c001a85e:	ee                   	out    dx,al
c001a85f:	89 c8                	mov    eax,ecx
c001a861:	89 fa                	mov    edx,edi
c001a863:	ef                   	out    dx,eax
c001a864:	89 f2                	mov    edx,esi
c001a866:	ed                   	in     eax,dx
c001a867:	0f b6 c0             	movzx  eax,al
c001a86a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001a870:	74 46                	je     c001a8b8 <IDE::open(int, int, void*)+0x1e0>
c001a872:	83 ec 0c             	sub    esp,0xc
c001a875:	68 dc 05 02 c0       	push   0xc00205dc
c001a87a:	eb 34                	jmp    c001a8b0 <IDE::open(int, int, void*)+0x1d8>
c001a87c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001a885:	75 17                	jne    c001a89e <IDE::open(int, int, void*)+0x1c6>
c001a887:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001a88c:	74 07                	je     c001a895 <IDE::open(int, int, void*)+0x1bd>
c001a88e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001a893:	75 09                	jne    c001a89e <IDE::open(int, int, void*)+0x1c6>
c001a895:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a89c:	eb 1a                	jmp    c001a8b8 <IDE::open(int, int, void*)+0x1e0>
c001a89e:	83 ec 0c             	sub    esp,0xc
c001a8a1:	68 e4 05 02 c0       	push   0xc00205e4
c001a8a6:	eb 08                	jmp    c001a8b0 <IDE::open(int, int, void*)+0x1d8>
c001a8a8:	83 ec 0c             	sub    esp,0xc
c001a8ab:	68 15 06 02 c0       	push   0xc0020615
c001a8b0:	e8 8a 6b ff ff       	call   c001143f <Krnl::panic(char const*)>
c001a8b5:	83 c4 10             	add    esp,0x10
c001a8b8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001a8bf:	79 1a                	jns    c001a8db <IDE::open(int, int, void*)+0x203>
c001a8c1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001a8c7:	83 e0 fc             	and    eax,0xfffffffc
c001a8ca:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001a8d1:	83 c0 08             	add    eax,0x8
c001a8d4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001a8db:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001a8e1:	89 c2                	mov    edx,eax
c001a8e3:	83 e2 0f             	and    edx,0xf
c001a8e6:	66 83 fa 08          	cmp    dx,0x8
c001a8ea:	75 0a                	jne    c001a8f6 <IDE::open(int, int, void*)+0x21e>
c001a8ec:	83 e8 02             	sub    eax,0x2
c001a8ef:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a8f6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001a8fc:	89 c2                	mov    edx,eax
c001a8fe:	83 e2 0f             	and    edx,0xf
c001a901:	66 83 fa 08          	cmp    dx,0x8
c001a905:	75 0a                	jne    c001a911 <IDE::open(int, int, void*)+0x239>
c001a907:	83 e8 02             	sub    eax,0x2
c001a90a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a911:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001a918:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001a91f:	89 d0                	mov    eax,edx
c001a921:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a924:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a928:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001a92c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001a92f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a934:	0f b6 c9             	movzx  ecx,cl
c001a937:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001a93e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a941:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a945:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001a949:	8d 50 02             	lea    edx,[eax+0x2]
c001a94c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a951:	0f b6 d2             	movzx  edx,dl
c001a954:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001a95a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a95d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a961:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001a965:	8d 48 03             	lea    ecx,[eax+0x3]
c001a968:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a96d:	0f b6 c9             	movzx  ecx,cl
c001a970:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001a976:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a979:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a97d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001a981:	8d 50 04             	lea    edx,[eax+0x4]
c001a984:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001a98a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a98f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001a996:	66 85 f6             	test   si,si
c001a999:	74 5b                	je     c001a9f6 <IDE::open(int, int, void*)+0x31e>
c001a99b:	0f b6 d2             	movzx  edx,dl
c001a99e:	83 c0 05             	add    eax,0x5
c001a9a1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a9a4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a9a8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001a9ac:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001a9b2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a9b7:	eb 3d                	jmp    c001a9f6 <IDE::open(int, int, void*)+0x31e>
c001a9b9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001a9bf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a9c6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a9cd:	66 05 06 02          	add    ax,0x206
c001a9d1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a9d8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001a9df:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a9e6:	66 05 06 02          	add    ax,0x206
c001a9ea:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a9f1:	e9 e5 fe ff ff       	jmp    c001a8db <IDE::open(int, int, void*)+0x203>
c001a9f6:	50                   	push   eax
c001a9f7:	50                   	push   eax
c001a9f8:	6a 00                	push   0x0
c001a9fa:	53                   	push   ebx
c001a9fb:	e8 5e fa ff ff       	call   c001a45e <IDE::prepareInterrupt(unsigned char)>
c001aa00:	5a                   	pop    edx
c001aa01:	59                   	pop    ecx
c001aa02:	6a 01                	push   0x1
c001aa04:	53                   	push   ebx
c001aa05:	e8 54 fa ff ff       	call   c001a45e <IDE::prepareInterrupt(unsigned char)>
c001aa0a:	83 c4 0c             	add    esp,0xc
c001aa0d:	6a 00                	push   0x0
c001aa0f:	6a 00                	push   0x0
c001aa11:	53                   	push   ebx
c001aa12:	e8 7b fc ff ff       	call   c001a692 <IDE::enableIRQs(unsigned char, bool)>
c001aa17:	83 c4 0c             	add    esp,0xc
c001aa1a:	6a 00                	push   0x0
c001aa1c:	6a 01                	push   0x1
c001aa1e:	53                   	push   ebx
c001aa1f:	e8 6e fc ff ff       	call   c001a692 <IDE::enableIRQs(unsigned char, bool)>
c001aa24:	83 c4 10             	add    esp,0x10
c001aa27:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001aa2e:	74 34                	je     c001aa64 <IDE::open(int, int, void*)+0x38c>
c001aa30:	83 ec 0c             	sub    esp,0xc
c001aa33:	53                   	push   ebx
c001aa34:	6a 01                	push   0x1
c001aa36:	68 5a a6 01 c0       	push   0xc001a65a
c001aa3b:	6a 0e                	push   0xe
c001aa3d:	53                   	push   ebx
c001aa3e:	e8 99 22 ff ff       	call   c000ccdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001aa43:	83 c4 14             	add    esp,0x14
c001aa46:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001aa4c:	53                   	push   ebx
c001aa4d:	6a 01                	push   0x1
c001aa4f:	68 76 a6 01 c0       	push   0xc001a676
c001aa54:	6a 0f                	push   0xf
c001aa56:	53                   	push   ebx
c001aa57:	e8 80 22 ff ff       	call   c000ccdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001aa5c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001aa62:	eb 38                	jmp    c001aa9c <IDE::open(int, int, void*)+0x3c4>
c001aa64:	83 ec 0c             	sub    esp,0xc
c001aa67:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001aa71:	53                   	push   ebx
c001aa72:	6a 00                	push   0x0
c001aa74:	68 5a a6 01 c0       	push   0xc001a65a
c001aa79:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001aa7f:	53                   	push   ebx
c001aa80:	e8 57 22 ff ff       	call   c000ccdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001aa85:	83 c4 14             	add    esp,0x14
c001aa88:	53                   	push   ebx
c001aa89:	6a 00                	push   0x0
c001aa8b:	68 76 a6 01 c0       	push   0xc001a676
c001aa90:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001aa96:	53                   	push   ebx
c001aa97:	e8 40 22 ff ff       	call   c000ccdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001aa9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa9e:	83 c4 20             	add    esp,0x20
c001aaa1:	83 ec 0c             	sub    esp,0xc
c001aaa4:	53                   	push   ebx
c001aaa5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001aaa8:	83 c4 0c             	add    esp,0xc
c001aaab:	6a 07                	push   0x7
c001aaad:	6a 00                	push   0x0
c001aaaf:	53                   	push   ebx
c001aab0:	e8 8f fa ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001aab5:	83 c4 0c             	add    esp,0xc
c001aab8:	6a 07                	push   0x7
c001aaba:	6a 01                	push   0x1
c001aabc:	53                   	push   ebx
c001aabd:	e8 82 fa ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001aac2:	83 c4 0c             	add    esp,0xc
c001aac5:	6a 01                	push   0x1
c001aac7:	6a 00                	push   0x0
c001aac9:	53                   	push   ebx
c001aaca:	e8 c3 fb ff ff       	call   c001a692 <IDE::enableIRQs(unsigned char, bool)>
c001aacf:	83 c4 0c             	add    esp,0xc
c001aad2:	6a 01                	push   0x1
c001aad4:	6a 01                	push   0x1
c001aad6:	53                   	push   ebx
c001aad7:	e8 b6 fb ff ff       	call   c001a692 <IDE::enableIRQs(unsigned char, bool)>
c001aadc:	83 c4 2c             	add    esp,0x2c
c001aadf:	31 c0                	xor    eax,eax
c001aae1:	5b                   	pop    ebx
c001aae2:	5e                   	pop    esi
c001aae3:	5f                   	pop    edi
c001aae4:	5d                   	pop    ebp
c001aae5:	c3                   	ret    

c001aae6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001aae6:	55                   	push   ebp
c001aae7:	57                   	push   edi
c001aae8:	56                   	push   esi
c001aae9:	53                   	push   ebx
c001aaea:	83 ec 1c             	sub    esp,0x1c
c001aaed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaf1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001aaf5:	8d 50 f8             	lea    edx,[eax-0x8]
c001aaf8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001aafc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ab00:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ab04:	80 fa 03             	cmp    dl,0x3
c001ab07:	77 5d                	ja     c001ab66 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ab09:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ab0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab11:	0f b6 db             	movzx  ebx,bl
c001ab14:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ab17:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ab1b:	83 ca 80             	or     edx,0xffffff80
c001ab1e:	0f b6 d2             	movzx  edx,dl
c001ab21:	52                   	push   edx
c001ab22:	6a 0c                	push   0xc
c001ab24:	53                   	push   ebx
c001ab25:	56                   	push   esi
c001ab26:	e8 59 f9 ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab2b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ab30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ab38:	0f b6 c0             	movzx  eax,al
c001ab3b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ab3f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ab41:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ab46:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ab4a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ab4e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ab52:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ab5a:	83 c4 2c             	add    esp,0x2c
c001ab5d:	5b                   	pop    ebx
c001ab5e:	5e                   	pop    esi
c001ab5f:	5f                   	pop    edi
c001ab60:	5d                   	pop    ebp
c001ab61:	e9 1e f9 ff ff       	jmp    c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab66:	3c 07                	cmp    al,0x7
c001ab68:	77 10                	ja     c001ab7a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ab6a:	0f b6 db             	movzx  ebx,bl
c001ab6d:	0f b6 d0             	movzx  edx,al
c001ab70:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ab78:	eb 2d                	jmp    c001aba7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ab7a:	3c 0d                	cmp    al,0xd
c001ab7c:	77 13                	ja     c001ab91 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ab7e:	0f b6 db             	movzx  ebx,bl
c001ab81:	0f b6 c0             	movzx  eax,al
c001ab84:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ab8b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ab8f:	eb 16                	jmp    c001aba7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ab91:	3c 15                	cmp    al,0x15
c001ab93:	77 14                	ja     c001aba9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ab95:	0f b6 db             	movzx  ebx,bl
c001ab98:	0f b6 c0             	movzx  eax,al
c001ab9b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001aba3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001aba7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001aba9:	83 c4 1c             	add    esp,0x1c
c001abac:	5b                   	pop    ebx
c001abad:	5e                   	pop    esi
c001abae:	5f                   	pop    edi
c001abaf:	5d                   	pop    ebp
c001abb0:	c3                   	ret    
c001abb1:	90                   	nop

c001abb2 <IDE::detect()>:
c001abb2:	55                   	push   ebp
c001abb3:	57                   	push   edi
c001abb4:	56                   	push   esi
c001abb5:	53                   	push   ebx
c001abb6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001abbc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001abc3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001abca:	0f 85 97 02 00 00    	jne    c001ae67 <IDE::detect()+0x2b5>
c001abd0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001abd7:	31 f6                	xor    esi,esi
c001abd9:	31 ed                	xor    ebp,ebp
c001abdb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001abe3:	89 e8                	mov    eax,ebp
c001abe5:	c1 e0 06             	shl    eax,0x6
c001abe8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001abf0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001abf4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001abf8:	c1 e0 04             	shl    eax,0x4
c001abfb:	83 c8 a0             	or     eax,0xffffffa0
c001abfe:	0f b6 c0             	movzx  eax,al
c001ac01:	50                   	push   eax
c001ac02:	6a 06                	push   0x6
c001ac04:	56                   	push   esi
c001ac05:	53                   	push   ebx
c001ac06:	e8 79 f8 ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac0b:	83 c4 0c             	add    esp,0xc
c001ac0e:	6a 0c                	push   0xc
c001ac10:	56                   	push   esi
c001ac11:	53                   	push   ebx
c001ac12:	e8 2d f9 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001ac17:	83 c4 0c             	add    esp,0xc
c001ac1a:	6a 0c                	push   0xc
c001ac1c:	56                   	push   esi
c001ac1d:	53                   	push   ebx
c001ac1e:	e8 21 f9 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001ac23:	83 c4 0c             	add    esp,0xc
c001ac26:	6a 0c                	push   0xc
c001ac28:	56                   	push   esi
c001ac29:	53                   	push   ebx
c001ac2a:	e8 15 f9 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001ac2f:	83 c4 0c             	add    esp,0xc
c001ac32:	6a 0c                	push   0xc
c001ac34:	56                   	push   esi
c001ac35:	53                   	push   ebx
c001ac36:	e8 09 f9 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001ac3b:	68 ec 00 00 00       	push   0xec
c001ac40:	6a 07                	push   0x7
c001ac42:	56                   	push   esi
c001ac43:	53                   	push   ebx
c001ac44:	e8 3b f8 ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac49:	83 c4 1c             	add    esp,0x1c
c001ac4c:	6a 0c                	push   0xc
c001ac4e:	56                   	push   esi
c001ac4f:	53                   	push   ebx
c001ac50:	e8 ef f8 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001ac55:	83 c4 0c             	add    esp,0xc
c001ac58:	6a 0c                	push   0xc
c001ac5a:	56                   	push   esi
c001ac5b:	53                   	push   ebx
c001ac5c:	e8 e3 f8 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001ac61:	83 c4 0c             	add    esp,0xc
c001ac64:	6a 0c                	push   0xc
c001ac66:	56                   	push   esi
c001ac67:	53                   	push   ebx
c001ac68:	e8 d7 f8 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001ac6d:	83 c4 0c             	add    esp,0xc
c001ac70:	6a 0c                	push   0xc
c001ac72:	56                   	push   esi
c001ac73:	53                   	push   ebx
c001ac74:	e8 cb f8 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001ac79:	83 c4 0c             	add    esp,0xc
c001ac7c:	6a 0c                	push   0xc
c001ac7e:	56                   	push   esi
c001ac7f:	53                   	push   ebx
c001ac80:	e8 bf f8 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001ac85:	83 c4 10             	add    esp,0x10
c001ac88:	84 c0                	test   al,al
c001ac8a:	0f 84 5f 01 00 00    	je     c001adef <IDE::detect()+0x23d>
c001ac90:	31 ff                	xor    edi,edi
c001ac92:	50                   	push   eax
c001ac93:	6a 0c                	push   0xc
c001ac95:	56                   	push   esi
c001ac96:	53                   	push   ebx
c001ac97:	e8 a8 f8 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001ac9c:	83 c4 10             	add    esp,0x10
c001ac9f:	a8 01                	test   al,0x1
c001aca1:	0f 85 69 01 00 00    	jne    c001ae10 <IDE::detect()+0x25e>
c001aca7:	84 c0                	test   al,al
c001aca9:	78 04                	js     c001acaf <IDE::detect()+0xfd>
c001acab:	a8 08                	test   al,0x8
c001acad:	75 23                	jne    c001acd2 <IDE::detect()+0x120>
c001acaf:	47                   	inc    edi
c001acb0:	81 ff 17 01 00 00    	cmp    edi,0x117
c001acb6:	7e da                	jle    c001ac92 <IDE::detect()+0xe0>
c001acb8:	83 ec 0c             	sub    esp,0xc
c001acbb:	6a 32                	push   0x32
c001acbd:	e8 d2 9d ff ff       	call   c0014a94 <milliTenthSleep(unsigned int)>
c001acc2:	83 c4 10             	add    esp,0x10
c001acc5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001accb:	75 c5                	jne    c001ac92 <IDE::detect()+0xe0>
c001accd:	e9 3e 01 00 00       	jmp    c001ae10 <IDE::detect()+0x25e>
c001acd2:	31 c9                	xor    ecx,ecx
c001acd4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001acd8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001acdc:	83 ec 0c             	sub    esp,0xc
c001acdf:	68 80 00 00 00       	push   0x80
c001ace4:	57                   	push   edi
c001ace5:	6a 00                	push   0x0
c001ace7:	56                   	push   esi
c001ace8:	53                   	push   ebx
c001ace9:	e8 f8 fd ff ff       	call   c001aae6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001acee:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001acf3:	89 e8                	mov    eax,ebp
c001acf5:	89 d1                	mov    ecx,edx
c001acf7:	c1 e0 06             	shl    eax,0x6
c001acfa:	01 d8                	add    eax,ebx
c001acfc:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ad03:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ad0a:	89 f2                	mov    edx,esi
c001ad0c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ad12:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ad16:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ad1c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ad20:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ad27:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ad2f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ad36:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ad3e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ad44:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ad4b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ad51:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ad55:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ad59:	83 c4 20             	add    esp,0x20
c001ad5c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ad5f:	83 c0 02             	add    eax,0x2
c001ad62:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001ad68:	83 c7 02             	add    edi,0x2
c001ad6b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001ad6e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001ad74:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001ad78:	75 e2                	jne    c001ad5c <IDE::detect()+0x1aa>
c001ad7a:	89 e8                	mov    eax,ebp
c001ad7c:	c1 e0 06             	shl    eax,0x6
c001ad7f:	01 d8                	add    eax,ebx
c001ad81:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001ad87:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001ad8e:	66 c1 ea 09          	shr    dx,0x9
c001ad92:	83 e2 01             	and    edx,0x1
c001ad95:	84 c9                	test   cl,cl
c001ad97:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001ad9d:	75 22                	jne    c001adc1 <IDE::detect()+0x20f>
c001ad9f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001ada6:	74 46                	je     c001adee <IDE::detect()+0x23c>
c001ada8:	83 ec 0c             	sub    esp,0xc
c001adab:	68 7c 01 00 00       	push   0x17c
c001adb0:	e8 ac dd fe ff       	call   c0008b61 <malloc>
c001adb5:	89 c7                	mov    edi,eax
c001adb7:	89 04 24             	mov    DWORD PTR [esp],eax
c001adba:	e8 11 05 00 00       	call   c001b2d0 <ATA::ATA()>
c001adbf:	eb 17                	jmp    c001add8 <IDE::detect()+0x226>
c001adc1:	83 ec 0c             	sub    esp,0xc
c001adc4:	68 84 01 00 00       	push   0x184
c001adc9:	e8 93 dd fe ff       	call   c0008b61 <malloc>
c001adce:	89 c7                	mov    edi,eax
c001add0:	89 04 24             	mov    DWORD PTR [esp],eax
c001add3:	e8 f0 0a 00 00       	call   c001b8c8 <ATAPI::ATAPI()>
c001add8:	5a                   	pop    edx
c001add9:	59                   	pop    ecx
c001adda:	57                   	push   edi
c001addb:	53                   	push   ebx
c001addc:	e8 4f 1f ff ff       	call   c000cd30 <Device::addChild(Device*)>
c001ade1:	8b 07                	mov    eax,DWORD PTR [edi]
c001ade3:	53                   	push   ebx
c001ade4:	55                   	push   ebp
c001ade5:	6a 00                	push   0x0
c001ade7:	57                   	push   edi
c001ade8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adeb:	83 c4 20             	add    esp,0x20
c001adee:	45                   	inc    ebp
c001adef:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001adf4:	74 0d                	je     c001ae03 <IDE::detect()+0x251>
c001adf6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001adfe:	e9 e0 fd ff ff       	jmp    c001abe3 <IDE::detect()+0x31>
c001ae03:	4e                   	dec    esi
c001ae04:	74 61                	je     c001ae67 <IDE::detect()+0x2b5>
c001ae06:	be 01 00 00 00       	mov    esi,0x1
c001ae0b:	e9 cb fd ff ff       	jmp    c001abdb <IDE::detect()+0x29>
c001ae10:	50                   	push   eax
c001ae11:	6a 04                	push   0x4
c001ae13:	56                   	push   esi
c001ae14:	53                   	push   ebx
c001ae15:	e8 2a f7 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001ae1a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ae1e:	83 c4 0c             	add    esp,0xc
c001ae21:	6a 05                	push   0x5
c001ae23:	56                   	push   esi
c001ae24:	53                   	push   ebx
c001ae25:	e8 1a f7 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001ae2a:	83 c4 10             	add    esp,0x10
c001ae2d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ae31:	80 fa 14             	cmp    dl,0x14
c001ae34:	75 04                	jne    c001ae3a <IDE::detect()+0x288>
c001ae36:	3c eb                	cmp    al,0xeb
c001ae38:	eb 07                	jmp    c001ae41 <IDE::detect()+0x28f>
c001ae3a:	3c 96                	cmp    al,0x96
c001ae3c:	75 b1                	jne    c001adef <IDE::detect()+0x23d>
c001ae3e:	80 fa 69             	cmp    dl,0x69
c001ae41:	75 ac                	jne    c001adef <IDE::detect()+0x23d>
c001ae43:	68 a1 00 00 00       	push   0xa1
c001ae48:	6a 07                	push   0x7
c001ae4a:	56                   	push   esi
c001ae4b:	53                   	push   ebx
c001ae4c:	e8 33 f6 ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ae51:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ae58:	e8 37 9c ff ff       	call   c0014a94 <milliTenthSleep(unsigned int)>
c001ae5d:	83 c4 10             	add    esp,0x10
c001ae60:	b1 01                	mov    cl,0x1
c001ae62:	e9 6d fe ff ff       	jmp    c001acd4 <IDE::detect()+0x122>
c001ae67:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ae6d:	5b                   	pop    ebx
c001ae6e:	5e                   	pop    esi
c001ae6f:	5f                   	pop    edi
c001ae70:	5d                   	pop    ebp
c001ae71:	c3                   	ret    

c001ae72 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ae72:	55                   	push   ebp
c001ae73:	57                   	push   edi
c001ae74:	56                   	push   esi
c001ae75:	53                   	push   ebx
c001ae76:	83 ec 1c             	sub    esp,0x1c
c001ae79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ae7d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ae81:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ae85:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001ae89:	88 c3                	mov    bl,al
c001ae8b:	84 c0                	test   al,al
c001ae8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae91:	0f 84 81 00 00 00    	je     c001af18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ae97:	83 ec 0c             	sub    esp,0xc
c001ae9a:	68 3f 06 02 c0       	push   0xc002063f
c001ae9f:	e8 4c 0a ff ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001aea4:	83 c4 10             	add    esp,0x10
c001aea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aeab:	3c 01                	cmp    al,0x1
c001aead:	74 63                	je     c001af12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001aeaf:	3c 02                	cmp    al,0x2
c001aeb1:	75 53                	jne    c001af06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001aeb3:	01 f6                	add    esi,esi
c001aeb5:	09 ee                	or     esi,ebp
c001aeb7:	50                   	push   eax
c001aeb8:	89 f0                	mov    eax,esi
c001aeba:	6a 01                	push   0x1
c001aebc:	0f b6 f0             	movzx  esi,al
c001aebf:	c1 e6 06             	shl    esi,0x6
c001aec2:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001aeca:	50                   	push   eax
c001aecb:	57                   	push   edi
c001aecc:	e8 73 f6 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001aed1:	83 c4 10             	add    esp,0x10
c001aed4:	a8 01                	test   al,0x1
c001aed6:	74 02                	je     c001aeda <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001aed8:	b3 07                	mov    bl,0x7
c001aeda:	a8 02                	test   al,0x2
c001aedc:	74 02                	je     c001aee0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001aede:	b3 03                	mov    bl,0x3
c001aee0:	a8 04                	test   al,0x4
c001aee2:	74 02                	je     c001aee6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001aee4:	b3 14                	mov    bl,0x14
c001aee6:	a8 08                	test   al,0x8
c001aee8:	74 02                	je     c001aeec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001aeea:	b3 03                	mov    bl,0x3
c001aeec:	a8 10                	test   al,0x10
c001aeee:	74 02                	je     c001aef2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001aef0:	b3 15                	mov    bl,0x15
c001aef2:	a8 20                	test   al,0x20
c001aef4:	74 02                	je     c001aef8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001aef6:	b3 03                	mov    bl,0x3
c001aef8:	a8 40                	test   al,0x40
c001aefa:	74 02                	je     c001aefe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001aefc:	b3 16                	mov    bl,0x16
c001aefe:	84 c0                	test   al,al
c001af00:	79 16                	jns    c001af18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001af02:	b3 0d                	mov    bl,0xd
c001af04:	eb 12                	jmp    c001af18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001af06:	3c 03                	cmp    al,0x3
c001af08:	74 0c                	je     c001af16 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001af0a:	3c 04                	cmp    al,0x4
c001af0c:	75 0a                	jne    c001af18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001af0e:	b3 08                	mov    bl,0x8
c001af10:	eb 06                	jmp    c001af18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001af12:	b3 13                	mov    bl,0x13
c001af14:	eb 02                	jmp    c001af18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001af16:	b3 17                	mov    bl,0x17
c001af18:	83 c4 1c             	add    esp,0x1c
c001af1b:	88 d8                	mov    al,bl
c001af1d:	5b                   	pop    ebx
c001af1e:	5e                   	pop    esi
c001af1f:	5f                   	pop    edi
c001af20:	5d                   	pop    ebp
c001af21:	c3                   	ret    

c001af22 <IDE::polling(unsigned char, unsigned int)>:
c001af22:	55                   	push   ebp
c001af23:	bd 04 00 00 00       	mov    ebp,0x4
c001af28:	57                   	push   edi
c001af29:	56                   	push   esi
c001af2a:	53                   	push   ebx
c001af2b:	83 ec 0c             	sub    esp,0xc
c001af2e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001af32:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001af36:	0f b6 f3             	movzx  esi,bl
c001af39:	52                   	push   edx
c001af3a:	6a 0c                	push   0xc
c001af3c:	56                   	push   esi
c001af3d:	57                   	push   edi
c001af3e:	e8 01 f6 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001af43:	83 c4 10             	add    esp,0x10
c001af46:	4d                   	dec    ebp
c001af47:	75 ed                	jne    c001af36 <IDE::polling(unsigned char, unsigned int)+0x14>
c001af49:	bb a0 86 01 00       	mov    ebx,0x186a0
c001af4e:	50                   	push   eax
c001af4f:	6a 0c                	push   0xc
c001af51:	56                   	push   esi
c001af52:	57                   	push   edi
c001af53:	e8 ec f5 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001af58:	83 c4 10             	add    esp,0x10
c001af5b:	a8 01                	test   al,0x1
c001af5d:	75 17                	jne    c001af76 <IDE::polling(unsigned char, unsigned int)+0x54>
c001af5f:	a8 20                	test   al,0x20
c001af61:	75 0f                	jne    c001af72 <IDE::polling(unsigned char, unsigned int)+0x50>
c001af63:	4b                   	dec    ebx
c001af64:	74 10                	je     c001af76 <IDE::polling(unsigned char, unsigned int)+0x54>
c001af66:	84 c0                	test   al,al
c001af68:	78 e4                	js     c001af4e <IDE::polling(unsigned char, unsigned int)+0x2c>
c001af6a:	a8 08                	test   al,0x8
c001af6c:	74 e0                	je     c001af4e <IDE::polling(unsigned char, unsigned int)+0x2c>
c001af6e:	31 c0                	xor    eax,eax
c001af70:	eb 06                	jmp    c001af78 <IDE::polling(unsigned char, unsigned int)+0x56>
c001af72:	b0 01                	mov    al,0x1
c001af74:	eb 02                	jmp    c001af78 <IDE::polling(unsigned char, unsigned int)+0x56>
c001af76:	b0 02                	mov    al,0x2
c001af78:	83 c4 0c             	add    esp,0xc
c001af7b:	5b                   	pop    ebx
c001af7c:	5e                   	pop    esi
c001af7d:	5f                   	pop    edi
c001af7e:	5d                   	pop    ebp
c001af7f:	c3                   	ret    

c001af80 <SATABus::close(int, int, void*)>:
c001af80:	31 c0                	xor    eax,eax
c001af82:	c3                   	ret    
c001af83:	90                   	nop

c001af84 <SATABus::detect()>:
c001af84:	c3                   	ret    
c001af85:	90                   	nop

c001af86 <SATABus::SATABus()>:
c001af86:	83 ec 0c             	sub    esp,0xc
c001af89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af8d:	83 ec 08             	sub    esp,0x8
c001af90:	68 78 06 02 c0       	push   0xc0020678
c001af95:	50                   	push   eax
c001af96:	e8 d9 20 ff ff       	call   c000d074 <HardDiskController::HardDiskController(char const*)>
c001af9b:	83 c4 10             	add    esp,0x10
c001af9e:	ba a4 06 02 c0       	mov    edx,0xc00206a4
c001afa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afa7:	89 10                	mov    DWORD PTR [eax],edx
c001afa9:	83 ec 0c             	sub    esp,0xc
c001afac:	6a 50                	push   0x50
c001afae:	e8 39 e0 fe ff       	call   c0008fec <Phys::allocateContiguousPages(int)>
c001afb3:	83 c4 10             	add    esp,0x10
c001afb6:	89 c2                	mov    edx,eax
c001afb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afbc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001afc2:	83 ec 0c             	sub    esp,0xc
c001afc5:	6a 50                	push   0x50
c001afc7:	e8 d1 f6 fe ff       	call   c000a69d <Virt::allocateKernelVirtualPages(int)>
c001afcc:	83 c4 10             	add    esp,0x10
c001afcf:	89 c2                	mov    edx,eax
c001afd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afd5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001afdb:	a1 d0 1d 02 c0       	mov    eax,ds:0xc0021dd0
c001afe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afe4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001afea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afee:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001aff4:	83 ec 0c             	sub    esp,0xc
c001aff7:	6a 03                	push   0x3
c001aff9:	6a 50                	push   0x50
c001affb:	51                   	push   ecx
c001affc:	52                   	push   edx
c001affd:	50                   	push   eax
c001affe:	e8 29 00 ff ff       	call   c000b02c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b003:	83 c4 20             	add    esp,0x20
c001b006:	90                   	nop
c001b007:	83 c4 0c             	add    esp,0xc
c001b00a:	c3                   	ret    
c001b00b:	90                   	nop

c001b00c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b010:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b013:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b016:	09 c2                	or     edx,eax
c001b018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b01c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b022:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b024:	31 c0                	xor    eax,eax
c001b026:	c1 e9 08             	shr    ecx,0x8
c001b029:	83 e1 0f             	and    ecx,0xf
c001b02c:	39 c8                	cmp    eax,ecx
c001b02e:	74 0a                	je     c001b03a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b030:	f6 c2 01             	test   dl,0x1
c001b033:	74 08                	je     c001b03d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b035:	d1 ea                	shr    edx,1
c001b037:	40                   	inc    eax
c001b038:	eb f2                	jmp    c001b02c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b03a:	83 c8 ff             	or     eax,0xffffffff
c001b03d:	c3                   	ret    

c001b03e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b03e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b042:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b045:	89 c2                	mov    edx,eax
c001b047:	c1 ea 08             	shr    edx,0x8
c001b04a:	83 e2 0f             	and    edx,0xf
c001b04d:	fe ca                	dec    dl
c001b04f:	75 31                	jne    c001b082 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b051:	83 e0 0f             	and    eax,0xf
c001b054:	3c 03                	cmp    al,0x3
c001b056:	75 2a                	jne    c001b082 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b058:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b05b:	b8 02 00 00 00       	mov    eax,0x2
c001b060:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b066:	74 1c                	je     c001b084 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b068:	b8 04 00 00 00       	mov    eax,0x4
c001b06d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b073:	74 0f                	je     c001b084 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b075:	31 c0                	xor    eax,eax
c001b077:	83 fa 03             	cmp    edx,0x3
c001b07a:	0f 94 c0             	sete   al
c001b07d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b081:	c3                   	ret    
c001b082:	31 c0                	xor    eax,eax
c001b084:	c3                   	ret    
c001b085:	90                   	nop

c001b086 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b086:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b08a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b08d:	0f ba e2 0f          	bt     edx,0xf
c001b091:	72 f7                	jb     c001b08a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b093:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b096:	83 ca 10             	or     edx,0x10
c001b099:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b09c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b09f:	83 ca 01             	or     edx,0x1
c001b0a2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b0a5:	c3                   	ret    

c001b0a6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b0a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0aa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b0ad:	83 e2 fe             	and    edx,0xfffffffe
c001b0b0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b0b3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b0b6:	83 e2 ef             	and    edx,0xffffffef
c001b0b9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b0bc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b0bf:	0f ba e2 0e          	bt     edx,0xe
c001b0c3:	72 f7                	jb     c001b0bc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b0c5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b0c8:	0f ba e2 0f          	bt     edx,0xf
c001b0cc:	72 ee                	jb     c001b0bc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b0ce:	c3                   	ret    
c001b0cf:	90                   	nop

c001b0d0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b0d0:	55                   	push   ebp
c001b0d1:	57                   	push   edi
c001b0d2:	56                   	push   esi
c001b0d3:	53                   	push   ebx
c001b0d4:	83 ec 1c             	sub    esp,0x1c
c001b0d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b0db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0df:	53                   	push   ebx
c001b0e0:	56                   	push   esi
c001b0e1:	e8 c0 ff ff ff       	call   c001b0a6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b0e6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b0ea:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b0f0:	83 ec 0c             	sub    esp,0xc
c001b0f3:	c1 e5 0a             	shl    ebp,0xa
c001b0f6:	01 e8                	add    eax,ebp
c001b0f8:	89 03                	mov    DWORD PTR [ebx],eax
c001b0fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b0fc:	68 00 04 00 00       	push   0x400
c001b101:	6a 00                	push   0x0
c001b103:	50                   	push   eax
c001b104:	e8 e7 53 fe ff       	call   c00004f0 <memset>
c001b109:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001b10f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b113:	01 e8                	add    eax,ebp
c001b115:	83 c4 1c             	add    esp,0x1c
c001b118:	89 03                	mov    DWORD PTR [ebx],eax
c001b11a:	c1 e2 08             	shl    edx,0x8
c001b11d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b124:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001b12a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b130:	01 f8                	add    eax,edi
c001b132:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b135:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b138:	68 00 01 00 00       	push   0x100
c001b13d:	6a 00                	push   0x0
c001b13f:	50                   	push   eax
c001b140:	e8 ab 53 fe ff       	call   c00004f0 <memset>
c001b145:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001b14b:	01 fa                	add    edx,edi
c001b14d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b151:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001b154:	c1 e7 0d             	shl    edi,0xd
c001b157:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b15e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001b164:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001b16a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b16e:	31 ff                	xor    edi,edi
c001b170:	83 c4 10             	add    esp,0x10
c001b173:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001b179:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b17d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001b183:	83 c5 20             	add    ebp,0x20
c001b186:	01 f8                	add    eax,edi
c001b188:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b18b:	52                   	push   edx
c001b18c:	68 00 01 00 00       	push   0x100
c001b191:	6a 00                	push   0x0
c001b193:	50                   	push   eax
c001b194:	e8 57 53 fe ff       	call   c00004f0 <memset>
c001b199:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b19d:	83 c4 10             	add    esp,0x10
c001b1a0:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001b1a6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001b1ad:	01 f8                	add    eax,edi
c001b1af:	81 c7 00 01 00 00    	add    edi,0x100
c001b1b5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b1b8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001b1be:	75 b3                	jne    c001b173 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001b1c0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b1c7:	50                   	push   eax
c001b1c8:	50                   	push   eax
c001b1c9:	53                   	push   ebx
c001b1ca:	56                   	push   esi
c001b1cb:	e8 b6 fe ff ff       	call   c001b086 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b1d0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b1d7:	83 c4 2c             	add    esp,0x2c
c001b1da:	5b                   	pop    ebx
c001b1db:	5e                   	pop    esi
c001b1dc:	5f                   	pop    edi
c001b1dd:	5d                   	pop    ebp
c001b1de:	c3                   	ret    
c001b1df:	90                   	nop

c001b1e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b1e0:	55                   	push   ebp
c001b1e1:	57                   	push   edi
c001b1e2:	56                   	push   esi
c001b1e3:	53                   	push   ebx
c001b1e4:	31 db                	xor    ebx,ebx
c001b1e6:	83 ec 0c             	sub    esp,0xc
c001b1e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b1ed:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b1f1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b1f4:	f7 c7 01 00 00 00    	test   edi,0x1
c001b1fa:	74 7a                	je     c001b276 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b1fc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b200:	89 d8                	mov    eax,ebx
c001b202:	c1 e0 07             	shl    eax,0x7
c001b205:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b20c:	55                   	push   ebp
c001b20d:	56                   	push   esi
c001b20e:	e8 2b fe ff ff       	call   c001b03e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b213:	5a                   	pop    edx
c001b214:	83 f8 01             	cmp    eax,0x1
c001b217:	59                   	pop    ecx
c001b218:	75 21                	jne    c001b23b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b21a:	50                   	push   eax
c001b21b:	53                   	push   ebx
c001b21c:	55                   	push   ebp
c001b21d:	56                   	push   esi
c001b21e:	e8 ad fe ff ff       	call   c001b0d0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b223:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b22a:	e8 32 d9 fe ff       	call   c0008b61 <malloc>
c001b22f:	89 c5                	mov    ebp,eax
c001b231:	89 04 24             	mov    DWORD PTR [esp],eax
c001b234:	e8 43 0d 00 00       	call   c001bf7c <SATA::SATA()>
c001b239:	eb 24                	jmp    c001b25f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b23b:	83 f8 04             	cmp    eax,0x4
c001b23e:	75 36                	jne    c001b276 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b240:	51                   	push   ecx
c001b241:	53                   	push   ebx
c001b242:	55                   	push   ebp
c001b243:	56                   	push   esi
c001b244:	e8 87 fe ff ff       	call   c001b0d0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b249:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b250:	e8 0c d9 fe ff       	call   c0008b61 <malloc>
c001b255:	89 c5                	mov    ebp,eax
c001b257:	89 04 24             	mov    DWORD PTR [esp],eax
c001b25a:	e8 71 11 00 00       	call   c001c3d0 <SATAPI::SATAPI()>
c001b25f:	58                   	pop    eax
c001b260:	5a                   	pop    edx
c001b261:	55                   	push   ebp
c001b262:	56                   	push   esi
c001b263:	e8 c8 1a ff ff       	call   c000cd30 <Device::addChild(Device*)>
c001b268:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b26b:	56                   	push   esi
c001b26c:	6a 00                	push   0x0
c001b26e:	53                   	push   ebx
c001b26f:	55                   	push   ebp
c001b270:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b273:	83 c4 20             	add    esp,0x20
c001b276:	d1 ef                	shr    edi,1
c001b278:	43                   	inc    ebx
c001b279:	83 fb 20             	cmp    ebx,0x20
c001b27c:	0f 85 72 ff ff ff    	jne    c001b1f4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001b282:	83 c4 0c             	add    esp,0xc
c001b285:	5b                   	pop    ebx
c001b286:	5e                   	pop    esi
c001b287:	5f                   	pop    edi
c001b288:	5d                   	pop    ebp
c001b289:	c3                   	ret    

c001b28a <SATABus::open(int, int, void*)>:
c001b28a:	83 ec 14             	sub    esp,0x14
c001b28d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b291:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001b297:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b29d:	52                   	push   edx
c001b29e:	50                   	push   eax
c001b29f:	e8 3c ff ff ff       	call   c001b1e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001b2a4:	31 c0                	xor    eax,eax
c001b2a6:	83 c4 1c             	add    esp,0x1c
c001b2a9:	c3                   	ret    

c001b2aa <ATA::close(int, int, void*)>:
c001b2aa:	83 ec 0c             	sub    esp,0xc
c001b2ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b2b7:	85 c0                	test   eax,eax
c001b2b9:	74 0c                	je     c001b2c7 <ATA::close(int, int, void*)+0x1d>
c001b2bb:	83 ec 0c             	sub    esp,0xc
c001b2be:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2c0:	50                   	push   eax
c001b2c1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b2c4:	83 c4 10             	add    esp,0x10
c001b2c7:	31 c0                	xor    eax,eax
c001b2c9:	83 c4 0c             	add    esp,0xc
c001b2cc:	c3                   	ret    
c001b2cd:	90                   	nop

c001b2ce <ATA::powerSaving(PowerSavingLevel)>:
c001b2ce:	c3                   	ret    
c001b2cf:	90                   	nop

c001b2d0 <ATA::ATA()>:
c001b2d0:	83 ec 0c             	sub    esp,0xc
c001b2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2d7:	83 ec 04             	sub    esp,0x4
c001b2da:	68 00 02 00 00       	push   0x200
c001b2df:	68 71 07 02 c0       	push   0xc0020771
c001b2e4:	50                   	push   eax
c001b2e5:	e8 14 1e ff ff       	call   c000d0fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b2ea:	83 c4 10             	add    esp,0x10
c001b2ed:	ba e4 06 02 c0       	mov    edx,0xc00206e4
c001b2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2f6:	89 10                	mov    DWORD PTR [eax],edx
c001b2f8:	90                   	nop
c001b2f9:	83 c4 0c             	add    esp,0xc
c001b2fc:	c3                   	ret    
c001b2fd:	90                   	nop

c001b2fe <ATA::flush(bool)>:
c001b2fe:	53                   	push   ebx
c001b2ff:	83 ec 08             	sub    esp,0x8
c001b302:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001b307:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b30b:	19 c0                	sbb    eax,eax
c001b30d:	83 e0 fd             	and    eax,0xfffffffd
c001b310:	05 ea 00 00 00       	add    eax,0xea
c001b315:	50                   	push   eax
c001b316:	6a 07                	push   0x7
c001b318:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b31f:	50                   	push   eax
c001b320:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b326:	e8 59 f1 ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b32b:	83 c4 0c             	add    esp,0xc
c001b32e:	6a 00                	push   0x0
c001b330:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b337:	50                   	push   eax
c001b338:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b33e:	e8 df fb ff ff       	call   c001af22 <IDE::polling(unsigned char, unsigned int)>
c001b343:	83 c4 18             	add    esp,0x18
c001b346:	5b                   	pop    ebx
c001b347:	c3                   	ret    

c001b348 <ATA::readyForCommand()>:
c001b348:	56                   	push   esi
c001b349:	53                   	push   ebx
c001b34a:	53                   	push   ebx
c001b34b:	31 db                	xor    ebx,ebx
c001b34d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b351:	51                   	push   ecx
c001b352:	6a 0c                	push   0xc
c001b354:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b35b:	50                   	push   eax
c001b35c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b362:	e8 dd f1 ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001b367:	83 c4 10             	add    esp,0x10
c001b36a:	a8 88                	test   al,0x88
c001b36c:	74 1f                	je     c001b38d <ATA::readyForCommand()+0x45>
c001b36e:	43                   	inc    ebx
c001b36f:	83 fb 63             	cmp    ebx,0x63
c001b372:	7e dd                	jle    c001b351 <ATA::readyForCommand()+0x9>
c001b374:	83 ec 0c             	sub    esp,0xc
c001b377:	6a 0a                	push   0xa
c001b379:	e8 16 97 ff ff       	call   c0014a94 <milliTenthSleep(unsigned int)>
c001b37e:	83 c4 10             	add    esp,0x10
c001b381:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001b387:	75 c8                	jne    c001b351 <ATA::readyForCommand()+0x9>
c001b389:	31 c0                	xor    eax,eax
c001b38b:	eb 02                	jmp    c001b38f <ATA::readyForCommand()+0x47>
c001b38d:	b0 01                	mov    al,0x1
c001b38f:	5a                   	pop    edx
c001b390:	5b                   	pop    ebx
c001b391:	5e                   	pop    esi
c001b392:	c3                   	ret    
c001b393:	90                   	nop

c001b394 <ATA::access(unsigned long long, int, void*, bool)>:
c001b394:	55                   	push   ebp
c001b395:	57                   	push   edi
c001b396:	56                   	push   esi
c001b397:	53                   	push   ebx
c001b398:	83 ec 2c             	sub    esp,0x2c
c001b39b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001b39f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b3a3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001b3a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b3ab:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b3af:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b3b3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b3b7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b3bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3c1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b3c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b3cb:	c1 e0 06             	shl    eax,0x6
c001b3ce:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001b3d6:	74 5d                	je     c001b435 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001b3d8:	89 fa                	mov    edx,edi
c001b3da:	89 f0                	mov    eax,esi
c001b3dc:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001b3e0:	c1 ea 1c             	shr    edx,0x1c
c001b3e3:	89 d1                	mov    ecx,edx
c001b3e5:	09 c1                	or     ecx,eax
c001b3e7:	74 25                	je     c001b40e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001b3e9:	31 ed                	xor    ebp,ebp
c001b3eb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001b3f2:	89 fa                	mov    edx,edi
c001b3f4:	89 f0                	mov    eax,esi
c001b3f6:	0f ad d0             	shrd   eax,edx,cl
c001b3f9:	d3 ea                	shr    edx,cl
c001b3fb:	f6 c1 20             	test   cl,0x20
c001b3fe:	74 02                	je     c001b402 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001b400:	89 d0                	mov    eax,edx
c001b402:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001b406:	45                   	inc    ebp
c001b407:	83 fd 06             	cmp    ebp,0x6
c001b40a:	75 df                	jne    c001b3eb <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001b40c:	eb 76                	jmp    c001b484 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001b40e:	89 f0                	mov    eax,esi
c001b410:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001b415:	89 fa                	mov    edx,edi
c001b417:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b41e:	0f ac d0 10          	shrd   eax,edx,0x10
c001b422:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b427:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b42b:	c1 ee 18             	shr    esi,0x18
c001b42e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001b433:	eb 56                	jmp    c001b48b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001b435:	6a 00                	push   0x0
c001b437:	6a 3f                	push   0x3f
c001b439:	57                   	push   edi
c001b43a:	56                   	push   esi
c001b43b:	e8 20 22 00 00       	call   c001d660 <__umoddi3>
c001b440:	83 c4 10             	add    esp,0x10
c001b443:	40                   	inc    eax
c001b444:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001b448:	6a 00                	push   0x0
c001b44a:	68 f0 03 00 00       	push   0x3f0
c001b44f:	57                   	push   edi
c001b450:	56                   	push   esi
c001b451:	e8 0a 21 00 00       	call   c001d560 <__udivdi3>
c001b456:	83 c4 10             	add    esp,0x10
c001b459:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001b45e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b465:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b46a:	6a 00                	push   0x0
c001b46c:	6a 3f                	push   0x3f
c001b46e:	57                   	push   edi
c001b46f:	56                   	push   esi
c001b470:	e8 eb 20 00 00       	call   c001d560 <__udivdi3>
c001b475:	83 c4 10             	add    esp,0x10
c001b478:	89 c6                	mov    esi,eax
c001b47a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001b47f:	83 e6 0f             	and    esi,0xf
c001b482:	eb 07                	jmp    c001b48b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001b484:	31 f6                	xor    esi,esi
c001b486:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001b48b:	bf 01 00 00 00       	mov    edi,0x1
c001b490:	50                   	push   eax
c001b491:	6a 00                	push   0x0
c001b493:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b49a:	50                   	push   eax
c001b49b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b49f:	e8 ee f1 ff ff       	call   c001a692 <IDE::enableIRQs(unsigned char, bool)>
c001b4a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4a7:	e8 9c fe ff ff       	call   c001b348 <ATA::readyForCommand()>
c001b4ac:	83 c4 10             	add    esp,0x10
c001b4af:	84 c0                	test   al,al
c001b4b1:	0f 84 4e 02 00 00    	je     c001b705 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b4b7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001b4bd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b4c3:	c1 e0 04             	shl    eax,0x4
c001b4c6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001b4cd:	09 c6                	or     esi,eax
c001b4cf:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001b4d4:	75 05                	jne    c001b4db <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001b4d6:	83 ce a0             	or     esi,0xffffffa0
c001b4d9:	eb 03                	jmp    c001b4de <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001b4db:	83 ce e0             	or     esi,0xffffffe0
c001b4de:	89 f0                	mov    eax,esi
c001b4e0:	0f b6 f0             	movzx  esi,al
c001b4e3:	56                   	push   esi
c001b4e4:	6a 06                	push   0x6
c001b4e6:	51                   	push   ecx
c001b4e7:	52                   	push   edx
c001b4e8:	e8 97 ef ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4ed:	83 c4 10             	add    esp,0x10
c001b4f0:	6a 00                	push   0x0
c001b4f2:	6a 01                	push   0x1
c001b4f4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b4fb:	50                   	push   eax
c001b4fc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b502:	e8 7d ef ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b507:	83 c4 10             	add    esp,0x10
c001b50a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b50f:	75 6e                	jne    c001b57f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001b511:	6a 00                	push   0x0
c001b513:	6a 08                	push   0x8
c001b515:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b51c:	50                   	push   eax
c001b51d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b523:	e8 5c ef ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b528:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001b52d:	50                   	push   eax
c001b52e:	6a 09                	push   0x9
c001b530:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b537:	50                   	push   eax
c001b538:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b53e:	e8 41 ef ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b543:	83 c4 20             	add    esp,0x20
c001b546:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001b54b:	50                   	push   eax
c001b54c:	6a 0a                	push   0xa
c001b54e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b555:	50                   	push   eax
c001b556:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b55c:	e8 23 ef ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b561:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001b566:	50                   	push   eax
c001b567:	6a 0b                	push   0xb
c001b569:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b570:	50                   	push   eax
c001b571:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b577:	e8 08 ef ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b57c:	83 c4 20             	add    esp,0x20
c001b57f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001b584:	50                   	push   eax
c001b585:	6a 02                	push   0x2
c001b587:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b58e:	50                   	push   eax
c001b58f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b595:	e8 ea ee ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b59a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001b59f:	50                   	push   eax
c001b5a0:	6a 03                	push   0x3
c001b5a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b5a9:	50                   	push   eax
c001b5aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b5b0:	e8 cf ee ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5b5:	83 c4 20             	add    esp,0x20
c001b5b8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001b5bd:	50                   	push   eax
c001b5be:	6a 04                	push   0x4
c001b5c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b5c7:	50                   	push   eax
c001b5c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b5ce:	e8 b1 ee ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5d8:	50                   	push   eax
c001b5d9:	6a 05                	push   0x5
c001b5db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b5e2:	50                   	push   eax
c001b5e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b5e9:	e8 96 ee ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5ee:	83 c4 20             	add    esp,0x20
c001b5f1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b5f6:	0f 94 c0             	sete   al
c001b5f9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b5fe:	74 09                	je     c001b609 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001b600:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001b607:	eb 07                	jmp    c001b610 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001b609:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001b610:	0f b6 c0             	movzx  eax,al
c001b613:	50                   	push   eax
c001b614:	6a 07                	push   0x7
c001b616:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b61d:	50                   	push   eax
c001b61e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b624:	e8 5b ee ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b629:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001b62d:	83 c4 10             	add    esp,0x10
c001b630:	85 f6                	test   esi,esi
c001b632:	0f 84 ae 00 00 00    	je     c001b6e6 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001b638:	50                   	push   eax
c001b639:	6a 01                	push   0x1
c001b63b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b642:	50                   	push   eax
c001b643:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b649:	e8 d4 f8 ff ff       	call   c001af22 <IDE::polling(unsigned char, unsigned int)>
c001b64e:	83 c4 10             	add    esp,0x10
c001b651:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b657:	84 c0                	test   al,al
c001b659:	74 20                	je     c001b67b <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001b65b:	0f b6 f8             	movzx  edi,al
c001b65e:	0f b6 d2             	movzx  edx,dl
c001b661:	57                   	push   edi
c001b662:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001b669:	50                   	push   eax
c001b66a:	52                   	push   edx
c001b66b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b671:	e8 fc f7 ff ff       	call   c001ae72 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001b676:	e9 87 00 00 00       	jmp    c001b702 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001b67b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b680:	74 33                	je     c001b6b5 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001b682:	31 ed                	xor    ebp,ebp
c001b684:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b688:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001b68c:	50                   	push   eax
c001b68d:	50                   	push   eax
c001b68e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b695:	50                   	push   eax
c001b696:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b69c:	e8 d1 ed ff ff       	call   c001a472 <IDE::getBase(unsigned char)>
c001b6a1:	89 c2                	mov    edx,eax
c001b6a3:	89 f8                	mov    eax,edi
c001b6a5:	66 ef                	out    dx,ax
c001b6a7:	45                   	inc    ebp
c001b6a8:	83 c4 10             	add    esp,0x10
c001b6ab:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001b6b1:	75 d1                	jne    c001b684 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001b6b3:	eb 23                	jmp    c001b6d8 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001b6b5:	0f b6 d2             	movzx  edx,dl
c001b6b8:	51                   	push   ecx
c001b6b9:	51                   	push   ecx
c001b6ba:	52                   	push   edx
c001b6bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b6c1:	e8 ac ed ff ff       	call   c001a472 <IDE::getBase(unsigned char)>
c001b6c6:	b9 00 01 00 00       	mov    ecx,0x100
c001b6cb:	89 c2                	mov    edx,eax
c001b6cd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001b6d1:	fc                   	cld    
c001b6d2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001b6d5:	83 c4 10             	add    esp,0x10
c001b6d8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001b6e0:	4e                   	dec    esi
c001b6e1:	e9 4a ff ff ff       	jmp    c001b630 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001b6e6:	31 ff                	xor    edi,edi
c001b6e8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b6ed:	74 16                	je     c001b705 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b6ef:	50                   	push   eax
c001b6f0:	50                   	push   eax
c001b6f1:	31 c0                	xor    eax,eax
c001b6f3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001b6f8:	0f 94 c0             	sete   al
c001b6fb:	50                   	push   eax
c001b6fc:	53                   	push   ebx
c001b6fd:	e8 fc fb ff ff       	call   c001b2fe <ATA::flush(bool)>
c001b702:	83 c4 10             	add    esp,0x10
c001b705:	83 c4 2c             	add    esp,0x2c
c001b708:	89 f8                	mov    eax,edi
c001b70a:	5b                   	pop    ebx
c001b70b:	5e                   	pop    esi
c001b70c:	5f                   	pop    edi
c001b70d:	5d                   	pop    ebp
c001b70e:	c3                   	ret    
c001b70f:	90                   	nop

c001b710 <ATA::read(unsigned long long, int, void*)>:
c001b710:	57                   	push   edi
c001b711:	b8 04 00 00 00       	mov    eax,0x4
c001b716:	56                   	push   esi
c001b717:	53                   	push   ebx
c001b718:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b71c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b720:	8d 7a ff             	lea    edi,[edx-0x1]
c001b723:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b727:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b72b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b731:	77 25                	ja     c001b758 <ATA::read(unsigned long long, int, void*)+0x48>
c001b733:	b8 06 00 00 00       	mov    eax,0x6
c001b738:	85 f6                	test   esi,esi
c001b73a:	74 1c                	je     c001b758 <ATA::read(unsigned long long, int, void*)+0x48>
c001b73c:	50                   	push   eax
c001b73d:	50                   	push   eax
c001b73e:	6a 00                	push   0x0
c001b740:	56                   	push   esi
c001b741:	52                   	push   edx
c001b742:	53                   	push   ebx
c001b743:	51                   	push   ecx
c001b744:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b748:	e8 47 fc ff ff       	call   c001b394 <ATA::access(unsigned long long, int, void*, bool)>
c001b74d:	83 c4 20             	add    esp,0x20
c001b750:	85 c0                	test   eax,eax
c001b752:	0f 95 c0             	setne  al
c001b755:	0f b6 c0             	movzx  eax,al
c001b758:	5b                   	pop    ebx
c001b759:	5e                   	pop    esi
c001b75a:	5f                   	pop    edi
c001b75b:	c3                   	ret    

c001b75c <ATA::write(unsigned long long, int, void*)>:
c001b75c:	57                   	push   edi
c001b75d:	b8 04 00 00 00       	mov    eax,0x4
c001b762:	56                   	push   esi
c001b763:	53                   	push   ebx
c001b764:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b768:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b76c:	8d 7a ff             	lea    edi,[edx-0x1]
c001b76f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b773:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b777:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b77d:	77 25                	ja     c001b7a4 <ATA::write(unsigned long long, int, void*)+0x48>
c001b77f:	b8 06 00 00 00       	mov    eax,0x6
c001b784:	85 f6                	test   esi,esi
c001b786:	74 1c                	je     c001b7a4 <ATA::write(unsigned long long, int, void*)+0x48>
c001b788:	50                   	push   eax
c001b789:	50                   	push   eax
c001b78a:	6a 01                	push   0x1
c001b78c:	56                   	push   esi
c001b78d:	52                   	push   edx
c001b78e:	53                   	push   ebx
c001b78f:	51                   	push   ecx
c001b790:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b794:	e8 fb fb ff ff       	call   c001b394 <ATA::access(unsigned long long, int, void*, bool)>
c001b799:	83 c4 20             	add    esp,0x20
c001b79c:	85 c0                	test   eax,eax
c001b79e:	0f 95 c0             	setne  al
c001b7a1:	0f b6 c0             	movzx  eax,al
c001b7a4:	5b                   	pop    ebx
c001b7a5:	5e                   	pop    esi
c001b7a6:	5f                   	pop    edi
c001b7a7:	c3                   	ret    

c001b7a8 <ATA::detectCHS()>:
c001b7a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b7ac:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001b7b2:	c1 e0 06             	shl    eax,0x6
c001b7b5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001b7bb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001b7c5:	c7 44 24 04 c8 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc00206c8
c001b7cd:	e9 6d 5c ff ff       	jmp    c001143f <Krnl::panic(char const*)>

c001b7d2 <ATA::open(int, int, void*)>:
c001b7d2:	53                   	push   ebx
c001b7d3:	83 ec 08             	sub    esp,0x8
c001b7d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b7de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b7e2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001b7e8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001b7ee:	c1 e0 06             	shl    eax,0x6
c001b7f1:	01 d0                	add    eax,edx
c001b7f3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001b7fa:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001b800:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001b807:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001b811:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001b817:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001b81e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001b825:	75 0c                	jne    c001b833 <ATA::open(int, int, void*)+0x61>
c001b827:	83 ec 0c             	sub    esp,0xc
c001b82a:	53                   	push   ebx
c001b82b:	e8 78 ff ff ff       	call   c001b7a8 <ATA::detectCHS()>
c001b830:	83 c4 10             	add    esp,0x10
c001b833:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b839:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b83f:	c1 e0 06             	shl    eax,0x6
c001b842:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001b849:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b853:	d1 e8                	shr    eax,1
c001b855:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001b85b:	6a 04                	push   0x4
c001b85d:	6a 0c                	push   0xc
c001b85f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b866:	50                   	push   eax
c001b867:	52                   	push   edx
c001b868:	e8 17 ec ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b86d:	90                   	nop
c001b86e:	90                   	nop
c001b86f:	6a 00                	push   0x0
c001b871:	6a 0c                	push   0xc
c001b873:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b87a:	50                   	push   eax
c001b87b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b881:	e8 fe eb ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b886:	83 c4 14             	add    esp,0x14
c001b889:	53                   	push   ebx
c001b88a:	e8 d7 18 ff ff       	call   c000d166 <PhysicalDisk::startCache()>
c001b88f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b892:	e8 47 29 ff ff       	call   c000e1de <createPartitionsForDisk(PhysicalDisk*)>
c001b897:	31 c0                	xor    eax,eax
c001b899:	83 c4 18             	add    esp,0x18
c001b89c:	5b                   	pop    ebx
c001b89d:	c3                   	ret    

c001b89e <ATAPI::write(unsigned long long, int, void*)>:
c001b89e:	b8 03 00 00 00       	mov    eax,0x3
c001b8a3:	c3                   	ret    

c001b8a4 <ATAPI::close(int, int, void*)>:
c001b8a4:	83 ec 0c             	sub    esp,0xc
c001b8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b8b1:	85 c0                	test   eax,eax
c001b8b3:	74 0c                	je     c001b8c1 <ATAPI::close(int, int, void*)+0x1d>
c001b8b5:	83 ec 0c             	sub    esp,0xc
c001b8b8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8ba:	50                   	push   eax
c001b8bb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b8be:	83 c4 10             	add    esp,0x10
c001b8c1:	31 c0                	xor    eax,eax
c001b8c3:	83 c4 0c             	add    esp,0xc
c001b8c6:	c3                   	ret    
c001b8c7:	90                   	nop

c001b8c8 <ATAPI::ATAPI()>:
c001b8c8:	83 ec 0c             	sub    esp,0xc
c001b8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8cf:	83 ec 04             	sub    esp,0x4
c001b8d2:	68 00 08 00 00       	push   0x800
c001b8d7:	68 35 08 02 c0       	push   0xc0020835
c001b8dc:	50                   	push   eax
c001b8dd:	e8 1c 18 ff ff       	call   c000d0fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b8e2:	83 c4 10             	add    esp,0x10
c001b8e5:	ba 2c 07 02 c0       	mov    edx,0xc002072c
c001b8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ee:	89 10                	mov    DWORD PTR [eax],edx
c001b8f0:	90                   	nop
c001b8f1:	83 c4 0c             	add    esp,0xc
c001b8f4:	c3                   	ret    
c001b8f5:	90                   	nop

c001b8f6 <ATAPI::readyForCommand()>:
c001b8f6:	56                   	push   esi
c001b8f7:	53                   	push   ebx
c001b8f8:	53                   	push   ebx
c001b8f9:	31 db                	xor    ebx,ebx
c001b8fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b8ff:	51                   	push   ecx
c001b900:	6a 0c                	push   0xc
c001b902:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b909:	50                   	push   eax
c001b90a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b910:	e8 2f ec ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001b915:	83 c4 10             	add    esp,0x10
c001b918:	a8 88                	test   al,0x88
c001b91a:	74 25                	je     c001b941 <ATAPI::readyForCommand()+0x4b>
c001b91c:	43                   	inc    ebx
c001b91d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001b923:	7e da                	jle    c001b8ff <ATAPI::readyForCommand()+0x9>
c001b925:	83 ec 0c             	sub    esp,0xc
c001b928:	68 5e 01 00 00       	push   0x15e
c001b92d:	e8 62 91 ff ff       	call   c0014a94 <milliTenthSleep(unsigned int)>
c001b932:	83 c4 10             	add    esp,0x10
c001b935:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001b93b:	75 c2                	jne    c001b8ff <ATAPI::readyForCommand()+0x9>
c001b93d:	31 c0                	xor    eax,eax
c001b93f:	eb 02                	jmp    c001b943 <ATAPI::readyForCommand()+0x4d>
c001b941:	b0 01                	mov    al,0x1
c001b943:	5a                   	pop    edx
c001b944:	5b                   	pop    ebx
c001b945:	5e                   	pop    esi
c001b946:	c3                   	ret    
c001b947:	90                   	nop

c001b948 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001b948:	55                   	push   ebp
c001b949:	57                   	push   edi
c001b94a:	56                   	push   esi
c001b94b:	53                   	push   ebx
c001b94c:	83 ec 20             	sub    esp,0x20
c001b94f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b953:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001b957:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001b95b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b95f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b963:	6a 01                	push   0x1
c001b965:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b96c:	50                   	push   eax
c001b96d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b973:	e8 1a ed ff ff       	call   c001a692 <IDE::enableIRQs(unsigned char, bool)>
c001b978:	5e                   	pop    esi
c001b979:	58                   	pop    eax
c001b97a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b981:	50                   	push   eax
c001b982:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b988:	e8 d1 ea ff ff       	call   c001a45e <IDE::prepareInterrupt(unsigned char)>
c001b98d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b990:	e8 61 ff ff ff       	call   c001b8f6 <ATAPI::readyForCommand()>
c001b995:	83 c4 10             	add    esp,0x10
c001b998:	84 c0                	test   al,al
c001b99a:	75 0a                	jne    c001b9a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001b99c:	bb 01 00 00 00       	mov    ebx,0x1
c001b9a1:	e9 57 02 00 00       	jmp    c001bbfd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001b9a6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001b9ac:	c1 e0 04             	shl    eax,0x4
c001b9af:	0f b6 c0             	movzx  eax,al
c001b9b2:	50                   	push   eax
c001b9b3:	6a 06                	push   0x6
c001b9b5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b9bc:	50                   	push   eax
c001b9bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b9c3:	e8 bc ea ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9c8:	6a 00                	push   0x0
c001b9ca:	6a 01                	push   0x1
c001b9cc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b9d3:	50                   	push   eax
c001b9d4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b9da:	e8 a5 ea ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9df:	83 c4 20             	add    esp,0x20
c001b9e2:	0f b6 c3             	movzx  eax,bl
c001b9e5:	0f b6 df             	movzx  ebx,bh
c001b9e8:	50                   	push   eax
c001b9e9:	6a 04                	push   0x4
c001b9eb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b9f2:	50                   	push   eax
c001b9f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b9f9:	e8 86 ea ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9fe:	53                   	push   ebx
c001b9ff:	6a 05                	push   0x5
c001ba01:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba08:	50                   	push   eax
c001ba09:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba0f:	e8 70 ea ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba14:	83 c4 20             	add    esp,0x20
c001ba17:	68 a0 00 00 00       	push   0xa0
c001ba1c:	6a 07                	push   0x7
c001ba1e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba25:	50                   	push   eax
c001ba26:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba2c:	e8 53 ea ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba31:	83 c4 0c             	add    esp,0xc
c001ba34:	6a 01                	push   0x1
c001ba36:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba3d:	50                   	push   eax
c001ba3e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba44:	e8 d9 f4 ff ff       	call   c001af22 <IDE::polling(unsigned char, unsigned int)>
c001ba49:	83 c4 10             	add    esp,0x10
c001ba4c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ba52:	84 c0                	test   al,al
c001ba54:	74 23                	je     c001ba79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ba56:	0f b6 d8             	movzx  ebx,al
c001ba59:	0f b6 d2             	movzx  edx,dl
c001ba5c:	53                   	push   ebx
c001ba5d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ba64:	50                   	push   eax
c001ba65:	52                   	push   edx
c001ba66:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba6c:	e8 01 f4 ff ff       	call   c001ae72 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ba71:	83 c4 10             	add    esp,0x10
c001ba74:	e9 84 01 00 00       	jmp    c001bbfd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ba79:	0f b6 d2             	movzx  edx,dl
c001ba7c:	53                   	push   ebx
c001ba7d:	53                   	push   ebx
c001ba7e:	52                   	push   edx
c001ba7f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba85:	e8 e8 e9 ff ff       	call   c001a472 <IDE::getBase(unsigned char)>
c001ba8a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ba8e:	b9 06 00 00 00       	mov    ecx,0x6
c001ba93:	89 c2                	mov    edx,eax
c001ba95:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ba98:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ba9c:	83 c4 10             	add    esp,0x10
c001ba9f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001baa5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001baac:	85 db                	test   ebx,ebx
c001baae:	0f 84 ec 00 00 00    	je     c001bba0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001bab4:	51                   	push   ecx
c001bab5:	51                   	push   ecx
c001bab6:	52                   	push   edx
c001bab7:	50                   	push   eax
c001bab8:	e8 35 eb ff ff       	call   c001a5f2 <IDE::waitInterrupt(unsigned char)>
c001babd:	83 c4 10             	add    esp,0x10
c001bac0:	84 c0                	test   al,al
c001bac2:	0f 84 d4 fe ff ff    	je     c001b99c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001bac8:	56                   	push   esi
c001bac9:	56                   	push   esi
c001baca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bad1:	50                   	push   eax
c001bad2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bad8:	e8 81 e9 ff ff       	call   c001a45e <IDE::prepareInterrupt(unsigned char)>
c001badd:	83 c4 0c             	add    esp,0xc
c001bae0:	6a 04                	push   0x4
c001bae2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bae9:	50                   	push   eax
c001baea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001baf0:	e8 4f ea ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001baf5:	83 c4 0c             	add    esp,0xc
c001baf8:	89 c6                	mov    esi,eax
c001bafa:	6a 05                	push   0x5
c001bafc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bb03:	50                   	push   eax
c001bb04:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bb0a:	e8 35 ea ff ff       	call   c001a544 <IDE::read(unsigned char, unsigned char)>
c001bb0f:	89 f1                	mov    ecx,esi
c001bb11:	0f b6 c0             	movzx  eax,al
c001bb14:	0f b6 f1             	movzx  esi,cl
c001bb17:	c1 e0 08             	shl    eax,0x8
c001bb1a:	09 c6                	or     esi,eax
c001bb1c:	d1 fe                	sar    esi,1
c001bb1e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001bb22:	83 c4 10             	add    esp,0x10
c001bb25:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001bb2a:	74 41                	je     c001bb6d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001bb2c:	31 c9                	xor    ecx,ecx
c001bb2e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bb34:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bb3b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001bb3f:	75 0a                	jne    c001bb4b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001bb41:	01 c9                	add    ecx,ecx
c001bb43:	01 cd                	add    ebp,ecx
c001bb45:	4b                   	dec    ebx
c001bb46:	e9 54 ff ff ff       	jmp    c001ba9f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001bb4b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001bb50:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bb54:	51                   	push   ecx
c001bb55:	51                   	push   ecx
c001bb56:	52                   	push   edx
c001bb57:	50                   	push   eax
c001bb58:	e8 15 e9 ff ff       	call   c001a472 <IDE::getBase(unsigned char)>
c001bb5d:	89 c2                	mov    edx,eax
c001bb5f:	89 f0                	mov    eax,esi
c001bb61:	66 ef                	out    dx,ax
c001bb63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bb67:	83 c4 10             	add    esp,0x10
c001bb6a:	41                   	inc    ecx
c001bb6b:	eb c1                	jmp    c001bb2e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001bb6d:	31 f6                	xor    esi,esi
c001bb6f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bb75:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bb7c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001bb80:	75 06                	jne    c001bb88 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001bb82:	01 f6                	add    esi,esi
c001bb84:	01 f5                	add    ebp,esi
c001bb86:	eb bd                	jmp    c001bb45 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001bb88:	51                   	push   ecx
c001bb89:	51                   	push   ecx
c001bb8a:	52                   	push   edx
c001bb8b:	50                   	push   eax
c001bb8c:	e8 e1 e8 ff ff       	call   c001a472 <IDE::getBase(unsigned char)>
c001bb91:	89 c2                	mov    edx,eax
c001bb93:	66 ed                	in     ax,dx
c001bb95:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001bb9a:	83 c4 10             	add    esp,0x10
c001bb9d:	46                   	inc    esi
c001bb9e:	eb cf                	jmp    c001bb6f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001bba0:	51                   	push   ecx
c001bba1:	51                   	push   ecx
c001bba2:	52                   	push   edx
c001bba3:	50                   	push   eax
c001bba4:	e8 49 ea ff ff       	call   c001a5f2 <IDE::waitInterrupt(unsigned char)>
c001bba9:	83 c4 10             	add    esp,0x10
c001bbac:	84 c0                	test   al,al
c001bbae:	0f 84 e8 fd ff ff    	je     c001b99c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001bbb4:	bb a0 86 01 00       	mov    ebx,0x186a0
c001bbb9:	52                   	push   edx
c001bbba:	52                   	push   edx
c001bbbb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bbc2:	50                   	push   eax
c001bbc3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bbc9:	e8 90 e8 ff ff       	call   c001a45e <IDE::prepareInterrupt(unsigned char)>
c001bbce:	83 c4 10             	add    esp,0x10
c001bbd1:	50                   	push   eax
c001bbd2:	50                   	push   eax
c001bbd3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bbda:	50                   	push   eax
c001bbdb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bbe1:	e8 8c e8 ff ff       	call   c001a472 <IDE::getBase(unsigned char)>
c001bbe6:	8d 50 07             	lea    edx,[eax+0x7]
c001bbe9:	ec                   	in     al,dx
c001bbea:	83 c4 10             	add    esp,0x10
c001bbed:	a8 88                	test   al,0x88
c001bbef:	74 0a                	je     c001bbfb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001bbf1:	4b                   	dec    ebx
c001bbf2:	75 dd                	jne    c001bbd1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001bbf4:	bb 02 00 00 00       	mov    ebx,0x2
c001bbf9:	eb 02                	jmp    c001bbfd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001bbfb:	31 db                	xor    ebx,ebx
c001bbfd:	83 c4 1c             	add    esp,0x1c
c001bc00:	89 d8                	mov    eax,ebx
c001bc02:	5b                   	pop    ebx
c001bc03:	5e                   	pop    esi
c001bc04:	5f                   	pop    edi
c001bc05:	5d                   	pop    ebp
c001bc06:	c3                   	ret    
c001bc07:	90                   	nop

c001bc08 <ATAPI::diskRemoved()>:
c001bc08:	53                   	push   ebx
c001bc09:	83 ec 14             	sub    esp,0x14
c001bc0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bc10:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001bc17:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001bc1d:	e8 3c 23 ff ff       	call   c000df5e <LogicalDisk::unmount()>
c001bc22:	58                   	pop    eax
c001bc23:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001bc29:	e8 76 2c ff ff       	call   c000e8a4 <VCache::writeWriteBuffer()>
c001bc2e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001bc34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bc38:	83 c4 18             	add    esp,0x18
c001bc3b:	5b                   	pop    ebx
c001bc3c:	e9 53 2c ff ff       	jmp    c000e894 <VCache::invalidateReadBuffer()>
c001bc41:	90                   	nop

c001bc42 <ATAPI::eject()>:
c001bc42:	57                   	push   edi
c001bc43:	b9 03 00 00 00       	mov    ecx,0x3
c001bc48:	53                   	push   ebx
c001bc49:	83 ec 14             	sub    esp,0x14
c001bc4c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc50:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bc54:	fc                   	cld    
c001bc55:	31 c0                	xor    eax,eax
c001bc57:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bc59:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001bc5e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001bc63:	50                   	push   eax
c001bc64:	50                   	push   eax
c001bc65:	6a 00                	push   0x0
c001bc67:	6a 00                	push   0x0
c001bc69:	6a 00                	push   0x0
c001bc6b:	6a 02                	push   0x2
c001bc6d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bc71:	50                   	push   eax
c001bc72:	53                   	push   ebx
c001bc73:	e8 d0 fc ff ff       	call   c001b948 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bc78:	83 c4 14             	add    esp,0x14
c001bc7b:	53                   	push   ebx
c001bc7c:	e8 87 ff ff ff       	call   c001bc08 <ATAPI::diskRemoved()>
c001bc81:	83 c4 24             	add    esp,0x24
c001bc84:	31 c0                	xor    eax,eax
c001bc86:	5b                   	pop    ebx
c001bc87:	5f                   	pop    edi
c001bc88:	c3                   	ret    
c001bc89:	90                   	nop

c001bc8a <ATAPI::diskInserted()>:
c001bc8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc8e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001bc95:	c3                   	ret    

c001bc96 <ATAPI::detectMedia()>:
c001bc96:	56                   	push   esi
c001bc97:	53                   	push   ebx
c001bc98:	83 ec 28             	sub    esp,0x28
c001bc9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bc9f:	6a 0c                	push   0xc
c001bca1:	6a 00                	push   0x0
c001bca3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001bca7:	56                   	push   esi
c001bca8:	e8 43 48 fe ff       	call   c00004f0 <memset>
c001bcad:	58                   	pop    eax
c001bcae:	5a                   	pop    edx
c001bcaf:	6a 00                	push   0x0
c001bcb1:	6a 00                	push   0x0
c001bcb3:	6a 00                	push   0x0
c001bcb5:	6a 00                	push   0x0
c001bcb7:	56                   	push   esi
c001bcb8:	53                   	push   ebx
c001bcb9:	e8 8a fc ff ff       	call   c001b948 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bcbe:	83 c4 1c             	add    esp,0x1c
c001bcc1:	6a 0c                	push   0xc
c001bcc3:	6a 00                	push   0x0
c001bcc5:	56                   	push   esi
c001bcc6:	e8 25 48 fe ff       	call   c00004f0 <memset>
c001bccb:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001bcd0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001bcd5:	59                   	pop    ecx
c001bcd6:	58                   	pop    eax
c001bcd7:	6a 01                	push   0x1
c001bcd9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001bcdd:	50                   	push   eax
c001bcde:	6a 00                	push   0x0
c001bce0:	6a 12                	push   0x12
c001bce2:	56                   	push   esi
c001bce3:	53                   	push   ebx
c001bce4:	e8 5f fc ff ff       	call   c001b948 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bce9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001bced:	83 c4 20             	add    esp,0x20
c001bcf0:	83 e0 7f             	and    eax,0x7f
c001bcf3:	3c 70                	cmp    al,0x70
c001bcf5:	74 15                	je     c001bd0c <ATAPI::detectMedia()+0x76>
c001bcf7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bcfe:	75 0c                	jne    c001bd0c <ATAPI::detectMedia()+0x76>
c001bd00:	83 ec 0c             	sub    esp,0xc
c001bd03:	53                   	push   ebx
c001bd04:	e8 81 ff ff ff       	call   c001bc8a <ATAPI::diskInserted()>
c001bd09:	83 c4 10             	add    esp,0x10
c001bd0c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001bd10:	83 e0 0f             	and    eax,0xf
c001bd13:	3c 02                	cmp    al,0x2
c001bd15:	75 1b                	jne    c001bd32 <ATAPI::detectMedia()+0x9c>
c001bd17:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001bd1c:	75 2d                	jne    c001bd4b <ATAPI::detectMedia()+0xb5>
c001bd1e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bd25:	74 24                	je     c001bd4b <ATAPI::detectMedia()+0xb5>
c001bd27:	83 ec 0c             	sub    esp,0xc
c001bd2a:	53                   	push   ebx
c001bd2b:	e8 d8 fe ff ff       	call   c001bc08 <ATAPI::diskRemoved()>
c001bd30:	eb 16                	jmp    c001bd48 <ATAPI::detectMedia()+0xb2>
c001bd32:	84 c0                	test   al,al
c001bd34:	75 15                	jne    c001bd4b <ATAPI::detectMedia()+0xb5>
c001bd36:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bd3d:	75 0c                	jne    c001bd4b <ATAPI::detectMedia()+0xb5>
c001bd3f:	83 ec 0c             	sub    esp,0xc
c001bd42:	53                   	push   ebx
c001bd43:	e8 42 ff ff ff       	call   c001bc8a <ATAPI::diskInserted()>
c001bd48:	83 c4 10             	add    esp,0x10
c001bd4b:	83 c4 24             	add    esp,0x24
c001bd4e:	5b                   	pop    ebx
c001bd4f:	5e                   	pop    esi
c001bd50:	c3                   	ret    
c001bd51:	90                   	nop

c001bd52 <ATAPI::open(int, int, void*)>:
c001bd52:	56                   	push   esi
c001bd53:	53                   	push   ebx
c001bd54:	50                   	push   eax
c001bd55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd5d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bd61:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bd67:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bd6d:	c1 e0 06             	shl    eax,0x6
c001bd70:	01 d0                	add    eax,edx
c001bd72:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001bd79:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001bd7f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001bd86:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001bd90:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001bd96:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001bd9d:	6a 04                	push   0x4
c001bd9f:	6a 0c                	push   0xc
c001bda1:	51                   	push   ecx
c001bda2:	52                   	push   edx
c001bda3:	e8 dc e6 ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bda8:	90                   	nop
c001bda9:	90                   	nop
c001bdaa:	6a 00                	push   0x0
c001bdac:	6a 0c                	push   0xc
c001bdae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdb5:	50                   	push   eax
c001bdb6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdbc:	e8 c3 e6 ff ff       	call   c001a484 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdc1:	83 c4 14             	add    esp,0x14
c001bdc4:	68 74 01 00 00       	push   0x174
c001bdc9:	e8 93 cd fe ff       	call   c0008b61 <malloc>
c001bdce:	83 c4 0c             	add    esp,0xc
c001bdd1:	89 c6                	mov    esi,eax
c001bdd3:	6a 00                	push   0x0
c001bdd5:	68 ff ff ff 7f       	push   0x7fffffff
c001bdda:	6a 00                	push   0x0
c001bddc:	6a 00                	push   0x0
c001bdde:	53                   	push   ebx
c001bddf:	68 27 08 02 c0       	push   0xc0020827
c001bde4:	50                   	push   eax
c001bde5:	e8 c0 1f ff ff       	call   c000ddaa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001bdea:	83 c4 14             	add    esp,0x14
c001bded:	56                   	push   esi
c001bdee:	e8 6d 20 ff ff       	call   c000de60 <LogicalDisk::assignDriveLetter()>
c001bdf3:	5a                   	pop    edx
c001bdf4:	0f be c0             	movsx  eax,al
c001bdf7:	59                   	pop    ecx
c001bdf8:	50                   	push   eax
c001bdf9:	68 14 07 02 c0       	push   0xc0020714
c001bdfe:	e8 ed fa fe ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001be03:	58                   	pop    eax
c001be04:	5a                   	pop    edx
c001be05:	56                   	push   esi
c001be06:	53                   	push   ebx
c001be07:	e8 24 0f ff ff       	call   c000cd30 <Device::addChild(Device*)>
c001be0c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001be12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be15:	e8 4c 13 ff ff       	call   c000d166 <PhysicalDisk::startCache()>
c001be1a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001be21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be24:	e8 6d fe ff ff       	call   c001bc96 <ATAPI::detectMedia()>
c001be29:	83 c4 14             	add    esp,0x14
c001be2c:	31 c0                	xor    eax,eax
c001be2e:	5b                   	pop    ebx
c001be2f:	5e                   	pop    esi
c001be30:	c3                   	ret    
c001be31:	90                   	nop

c001be32 <ATAPI::read(unsigned long long, int, void*)>:
c001be32:	55                   	push   ebp
c001be33:	57                   	push   edi
c001be34:	56                   	push   esi
c001be35:	53                   	push   ebx
c001be36:	83 ec 1c             	sub    esp,0x1c
c001be39:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001be3d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001be41:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001be45:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001be4c:	74 3c                	je     c001be8a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001be4e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001be52:	b9 03 00 00 00       	mov    ecx,0x3
c001be57:	fc                   	cld    
c001be58:	31 c0                	xor    eax,eax
c001be5a:	0f ce                	bswap  esi
c001be5c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001be5e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001be63:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001be67:	89 e8                	mov    eax,ebp
c001be69:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001be6d:	50                   	push   eax
c001be6e:	50                   	push   eax
c001be6f:	55                   	push   ebp
c001be70:	c1 e5 0b             	shl    ebp,0xb
c001be73:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001be77:	6a 00                	push   0x0
c001be79:	55                   	push   ebp
c001be7a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001be7e:	50                   	push   eax
c001be7f:	53                   	push   ebx
c001be80:	e8 c3 fa ff ff       	call   c001b948 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001be85:	83 c4 20             	add    esp,0x20
c001be88:	eb 1a                	jmp    c001bea4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001be8a:	83 ec 0c             	sub    esp,0xc
c001be8d:	53                   	push   ebx
c001be8e:	e8 03 fe ff ff       	call   c001bc96 <ATAPI::detectMedia()>
c001be93:	83 c4 10             	add    esp,0x10
c001be96:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001be9d:	75 af                	jne    c001be4e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001be9f:	b8 02 00 00 00       	mov    eax,0x2
c001bea4:	83 c4 1c             	add    esp,0x1c
c001bea7:	5b                   	pop    ebx
c001bea8:	5e                   	pop    esi
c001bea9:	5f                   	pop    edi
c001beaa:	5d                   	pop    ebp
c001beab:	c3                   	ret    

c001beac <SATA::close(int, int, void*)>:
c001beac:	83 ec 0c             	sub    esp,0xc
c001beaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beb3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001beb9:	85 c0                	test   eax,eax
c001bebb:	74 0c                	je     c001bec9 <SATA::close(int, int, void*)+0x1d>
c001bebd:	83 ec 0c             	sub    esp,0xc
c001bec0:	8b 10                	mov    edx,DWORD PTR [eax]
c001bec2:	50                   	push   eax
c001bec3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bec6:	83 c4 10             	add    esp,0x10
c001bec9:	31 c0                	xor    eax,eax
c001becb:	83 c4 0c             	add    esp,0xc
c001bece:	c3                   	ret    
c001becf:	90                   	nop

c001bed0 <SATA::powerSaving(PowerSavingLevel)>:
c001bed0:	c3                   	ret    
c001bed1:	90                   	nop

c001bed2 <SATA::open(int, int, void*)>:
c001bed2:	56                   	push   esi
c001bed3:	53                   	push   ebx
c001bed4:	50                   	push   eax
c001bed5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bed9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bedd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bee7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001beed:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001bef7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001befb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bf05:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001bf0b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bf12:	e8 17 d0 fe ff       	call   c0008f2e <Phys::allocatePage()>
c001bf17:	89 c6                	mov    esi,eax
c001bf19:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001bf1f:	81 c6 00 10 00 00    	add    esi,0x1000
c001bf25:	e8 04 d0 fe ff       	call   c0008f2e <Phys::allocatePage()>
c001bf2a:	39 c6                	cmp    esi,eax
c001bf2c:	74 10                	je     c001bf3e <SATA::open(int, int, void*)+0x6c>
c001bf2e:	83 ec 0c             	sub    esp,0xc
c001bf31:	68 5c 07 02 c0       	push   0xc002075c
c001bf36:	e8 04 55 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001bf3b:	83 c4 10             	add    esp,0x10
c001bf3e:	83 ec 0c             	sub    esp,0xc
c001bf41:	6a 02                	push   0x2
c001bf43:	e8 55 e7 fe ff       	call   c000a69d <Virt::allocateKernelVirtualPages(int)>
c001bf48:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bf4e:	6a 03                	push   0x3
c001bf50:	50                   	push   eax
c001bf51:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001bf57:	ff 35 d0 1d 02 c0    	push   DWORD PTR ds:0xc0021dd0
c001bf5d:	e8 d0 ed fe ff       	call   c000ad32 <VAS::mapPage(unsigned long, unsigned long, int)>
c001bf62:	83 c4 14             	add    esp,0x14
c001bf65:	53                   	push   ebx
c001bf66:	e8 fb 11 ff ff       	call   c000d166 <PhysicalDisk::startCache()>
c001bf6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf6e:	e8 6b 22 ff ff       	call   c000e1de <createPartitionsForDisk(PhysicalDisk*)>
c001bf73:	83 c4 14             	add    esp,0x14
c001bf76:	31 c0                	xor    eax,eax
c001bf78:	5b                   	pop    ebx
c001bf79:	5e                   	pop    esi
c001bf7a:	c3                   	ret    
c001bf7b:	90                   	nop

c001bf7c <SATA::SATA()>:
c001bf7c:	83 ec 0c             	sub    esp,0xc
c001bf7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf83:	83 ec 04             	sub    esp,0x4
c001bf86:	68 00 02 00 00       	push   0x200
c001bf8b:	68 70 07 02 c0       	push   0xc0020770
c001bf90:	50                   	push   eax
c001bf91:	e8 68 11 ff ff       	call   c000d0fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bf96:	83 c4 10             	add    esp,0x10
c001bf99:	ba e0 07 02 c0       	mov    edx,0xc00207e0
c001bf9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfa2:	89 10                	mov    DWORD PTR [eax],edx
c001bfa4:	90                   	nop
c001bfa5:	83 c4 0c             	add    esp,0xc
c001bfa8:	c3                   	ret    
c001bfa9:	90                   	nop

c001bfaa <SATA::access(unsigned long long, int, void*, bool)>:
c001bfaa:	55                   	push   ebp
c001bfab:	57                   	push   edi
c001bfac:	56                   	push   esi
c001bfad:	53                   	push   ebx
c001bfae:	83 ec 2c             	sub    esp,0x2c
c001bfb1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bfb5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bfb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bfbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001bfc1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bfc5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001bfca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfce:	7e 10                	jle    c001bfe0 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001bfd0:	83 ec 0c             	sub    esp,0xc
c001bfd3:	68 80 07 02 c0       	push   0xc0020780
c001bfd8:	e8 62 54 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001bfdd:	83 c4 10             	add    esp,0x10
c001bfe0:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bfe6:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001bfec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bff6:	89 d0                	mov    eax,edx
c001bff8:	c1 e0 07             	shl    eax,0x7
c001bffb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001bfff:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c009:	51                   	push   ecx
c001c00a:	8d 42 02             	lea    eax,[edx+0x2]
c001c00d:	51                   	push   ecx
c001c00e:	c1 e0 07             	shl    eax,0x7
c001c011:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c015:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c019:	50                   	push   eax
c001c01a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001c020:	e8 e7 ef ff ff       	call   c001b00c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c025:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c029:	83 c4 10             	add    esp,0x10
c001c02c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001c031:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c035:	0f 84 4f 01 00 00    	je     c001c18a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c03b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c03f:	c1 e0 09             	shl    eax,0x9
c001c042:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c047:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c04b:	74 0e                	je     c001c05b <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001c04d:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001c053:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001c057:	89 c1                	mov    ecx,eax
c001c059:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c05b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c05f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c065:	8d 42 02             	lea    eax,[edx+0x2]
c001c068:	c1 e0 07             	shl    eax,0x7
c001c06b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c06f:	8b 00                	mov    eax,DWORD PTR [eax]
c001c071:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001c077:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001c07d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c081:	c1 e1 05             	shl    ecx,0x5
c001c084:	01 c8                	add    eax,ecx
c001c086:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001c08a:	83 e1 01             	and    ecx,0x1
c001c08d:	89 ce                	mov    esi,ecx
c001c08f:	8a 08                	mov    cl,BYTE PTR [eax]
c001c091:	c1 e6 06             	shl    esi,0x6
c001c094:	83 e1 bf             	and    ecx,0xffffffbf
c001c097:	09 f1                	or     ecx,esi
c001c099:	88 08                	mov    BYTE PTR [eax],cl
c001c09b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c09d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001c0a3:	81 c9 05 00 01 00    	or     ecx,0x10005
c001c0a9:	89 08                	mov    DWORD PTR [eax],ecx
c001c0ab:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c0b1:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001c0b7:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001c0bd:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001c0c0:	50                   	push   eax
c001c0c1:	68 90 00 00 00       	push   0x90
c001c0c6:	6a 00                	push   0x0
c001c0c8:	56                   	push   esi
c001c0c9:	e8 22 44 fe ff       	call   c00004f0 <memset>
c001c0ce:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c0d4:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001c0d8:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001c0de:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001c0e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c0e6:	83 c4 10             	add    esp,0x10
c001c0e9:	48                   	dec    eax
c001c0ea:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c0ef:	89 c1                	mov    ecx,eax
c001c0f1:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001c0f7:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c0fc:	09 c8                	or     eax,ecx
c001c0fe:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001c104:	66 8b 06             	mov    ax,WORD PTR [esi]
c001c107:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001c10e:	66 25 00 7f          	and    ax,0x7f00
c001c112:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c116:	66 0d 27 80          	or     ax,0x8027
c001c11a:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001c11f:	66 89 06             	mov    WORD PTR [esi],ax
c001c122:	19 c0                	sbb    eax,eax
c001c124:	83 e0 f0             	and    eax,0xfffffff0
c001c127:	83 c0 35             	add    eax,0x35
c001c12a:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001c12d:	89 e8                	mov    eax,ebp
c001c12f:	c1 e8 10             	shr    eax,0x10
c001c132:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001c135:	89 e8                	mov    eax,ebp
c001c137:	c1 e8 18             	shr    eax,0x18
c001c13a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001c13d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c141:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001c144:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c148:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001c14b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c14f:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001c153:	89 d6                	mov    esi,edx
c001c155:	31 c0                	xor    eax,eax
c001c157:	c1 e6 07             	shl    esi,0x7
c001c15a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c15e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001c164:	80 e1 88             	and    cl,0x88
c001c167:	74 0a                	je     c001c173 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001c169:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c16e:	74 0a                	je     c001c17a <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001c170:	40                   	inc    eax
c001c171:	eb eb                	jmp    c001c15e <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001c173:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c178:	75 17                	jne    c001c191 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001c17a:	83 ec 0c             	sub    esp,0xc
c001c17d:	68 b9 07 02 c0       	push   0xc00207b9
c001c182:	e8 69 f7 fe ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001c187:	83 c4 10             	add    esp,0x10
c001c18a:	b8 01 00 00 00       	mov    eax,0x1
c001c18f:	eb 5d                	jmp    c001c1ee <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c191:	b8 01 00 00 00       	mov    eax,0x1
c001c196:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c19a:	c1 e2 07             	shl    edx,0x7
c001c19d:	d3 e0                	shl    eax,cl
c001c19f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001c1a3:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001c1a9:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001c1af:	85 c8                	test   eax,ecx
c001c1b1:	74 16                	je     c001c1c9 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001c1b3:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001c1b9:	0f ba e1 1e          	bt     ecx,0x1e
c001c1bd:	73 ea                	jae    c001c1a9 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001c1bf:	83 ec 0c             	sub    esp,0xc
c001c1c2:	68 c7 07 02 c0       	push   0xc00207c7
c001c1c7:	eb b9                	jmp    c001c182 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001c1c9:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001c1cf:	0f ba e0 1e          	bt     eax,0x1e
c001c1d3:	72 b5                	jb     c001c18a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c1d5:	31 c0                	xor    eax,eax
c001c1d7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c1dc:	75 10                	jne    c001c1ee <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c1de:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001c1e4:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c1e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c1ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c1ee:	83 c4 2c             	add    esp,0x2c
c001c1f1:	5b                   	pop    ebx
c001c1f2:	5e                   	pop    esi
c001c1f3:	5f                   	pop    edi
c001c1f4:	5d                   	pop    ebp
c001c1f5:	c3                   	ret    

c001c1f6 <SATA::read(unsigned long long, int, void*)>:
c001c1f6:	57                   	push   edi
c001c1f7:	b8 04 00 00 00       	mov    eax,0x4
c001c1fc:	56                   	push   esi
c001c1fd:	53                   	push   ebx
c001c1fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c202:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c206:	8d 7a ff             	lea    edi,[edx-0x1]
c001c209:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c20d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c211:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c217:	77 25                	ja     c001c23e <SATA::read(unsigned long long, int, void*)+0x48>
c001c219:	b8 06 00 00 00       	mov    eax,0x6
c001c21e:	85 f6                	test   esi,esi
c001c220:	74 1c                	je     c001c23e <SATA::read(unsigned long long, int, void*)+0x48>
c001c222:	50                   	push   eax
c001c223:	50                   	push   eax
c001c224:	6a 00                	push   0x0
c001c226:	56                   	push   esi
c001c227:	52                   	push   edx
c001c228:	53                   	push   ebx
c001c229:	51                   	push   ecx
c001c22a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c22e:	e8 77 fd ff ff       	call   c001bfaa <SATA::access(unsigned long long, int, void*, bool)>
c001c233:	83 c4 20             	add    esp,0x20
c001c236:	85 c0                	test   eax,eax
c001c238:	0f 95 c0             	setne  al
c001c23b:	0f b6 c0             	movzx  eax,al
c001c23e:	5b                   	pop    ebx
c001c23f:	5e                   	pop    esi
c001c240:	5f                   	pop    edi
c001c241:	c3                   	ret    

c001c242 <SATA::write(unsigned long long, int, void*)>:
c001c242:	55                   	push   ebp
c001c243:	b8 04 00 00 00       	mov    eax,0x4
c001c248:	57                   	push   edi
c001c249:	56                   	push   esi
c001c24a:	53                   	push   ebx
c001c24b:	83 ec 0c             	sub    esp,0xc
c001c24e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c252:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c256:	8d 73 ff             	lea    esi,[ebx-0x1]
c001c259:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c25d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c261:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001c267:	77 3d                	ja     c001c2a6 <SATA::write(unsigned long long, int, void*)+0x64>
c001c269:	b8 06 00 00 00       	mov    eax,0x6
c001c26e:	85 ed                	test   ebp,ebp
c001c270:	74 34                	je     c001c2a6 <SATA::write(unsigned long long, int, void*)+0x64>
c001c272:	c1 e3 09             	shl    ebx,0x9
c001c275:	01 eb                	add    ebx,ebp
c001c277:	89 d6                	mov    esi,edx
c001c279:	89 cf                	mov    edi,ecx
c001c27b:	83 c6 01             	add    esi,0x1
c001c27e:	83 d7 00             	adc    edi,0x0
c001c281:	50                   	push   eax
c001c282:	50                   	push   eax
c001c283:	6a 01                	push   0x1
c001c285:	55                   	push   ebp
c001c286:	81 c5 00 02 00 00    	add    ebp,0x200
c001c28c:	6a 01                	push   0x1
c001c28e:	51                   	push   ecx
c001c28f:	52                   	push   edx
c001c290:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c294:	e8 11 fd ff ff       	call   c001bfaa <SATA::access(unsigned long long, int, void*, bool)>
c001c299:	83 c4 20             	add    esp,0x20
c001c29c:	89 f2                	mov    edx,esi
c001c29e:	89 f9                	mov    ecx,edi
c001c2a0:	39 dd                	cmp    ebp,ebx
c001c2a2:	75 d3                	jne    c001c277 <SATA::write(unsigned long long, int, void*)+0x35>
c001c2a4:	31 c0                	xor    eax,eax
c001c2a6:	83 c4 0c             	add    esp,0xc
c001c2a9:	5b                   	pop    ebx
c001c2aa:	5e                   	pop    esi
c001c2ab:	5f                   	pop    edi
c001c2ac:	5d                   	pop    ebp
c001c2ad:	c3                   	ret    

c001c2ae <SATAPI::write(unsigned long long, int, void*)>:
c001c2ae:	b8 03 00 00 00       	mov    eax,0x3
c001c2b3:	c3                   	ret    

c001c2b4 <SATAPI::close(int, int, void*)>:
c001c2b4:	83 ec 0c             	sub    esp,0xc
c001c2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c2c1:	85 c0                	test   eax,eax
c001c2c3:	74 0c                	je     c001c2d1 <SATAPI::close(int, int, void*)+0x1d>
c001c2c5:	83 ec 0c             	sub    esp,0xc
c001c2c8:	8b 10                	mov    edx,DWORD PTR [eax]
c001c2ca:	50                   	push   eax
c001c2cb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c2ce:	83 c4 10             	add    esp,0x10
c001c2d1:	31 c0                	xor    eax,eax
c001c2d3:	83 c4 0c             	add    esp,0xc
c001c2d6:	c3                   	ret    
c001c2d7:	90                   	nop

c001c2d8 <SATAPI::open(int, int, void*)>:
c001c2d8:	56                   	push   esi
c001c2d9:	53                   	push   ebx
c001c2da:	51                   	push   ecx
c001c2db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2e3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c2ed:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c2f3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c2fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c301:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c30b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c311:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c318:	e8 11 cc fe ff       	call   c0008f2e <Phys::allocatePage()>
c001c31d:	89 c6                	mov    esi,eax
c001c31f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001c325:	81 c6 00 10 00 00    	add    esi,0x1000
c001c32b:	e8 fe cb fe ff       	call   c0008f2e <Phys::allocatePage()>
c001c330:	39 c6                	cmp    esi,eax
c001c332:	74 10                	je     c001c344 <SATAPI::open(int, int, void*)+0x6c>
c001c334:	83 ec 0c             	sub    esp,0xc
c001c337:	68 10 08 02 c0       	push   0xc0020810
c001c33c:	e8 fe 50 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001c341:	83 c4 10             	add    esp,0x10
c001c344:	83 ec 0c             	sub    esp,0xc
c001c347:	6a 02                	push   0x2
c001c349:	e8 4f e3 fe ff       	call   c000a69d <Virt::allocateKernelVirtualPages(int)>
c001c34e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001c354:	6a 03                	push   0x3
c001c356:	50                   	push   eax
c001c357:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001c35d:	ff 35 d0 1d 02 c0    	push   DWORD PTR ds:0xc0021dd0
c001c363:	e8 ca e9 fe ff       	call   c000ad32 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c368:	83 c4 14             	add    esp,0x14
c001c36b:	68 74 01 00 00       	push   0x174
c001c370:	e8 ec c7 fe ff       	call   c0008b61 <malloc>
c001c375:	83 c4 0c             	add    esp,0xc
c001c378:	89 c6                	mov    esi,eax
c001c37a:	6a 00                	push   0x0
c001c37c:	68 ff ff ff 7f       	push   0x7fffffff
c001c381:	6a 00                	push   0x0
c001c383:	6a 00                	push   0x0
c001c385:	53                   	push   ebx
c001c386:	68 26 08 02 c0       	push   0xc0020826
c001c38b:	50                   	push   eax
c001c38c:	e8 19 1a ff ff       	call   c000ddaa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c391:	83 c4 14             	add    esp,0x14
c001c394:	56                   	push   esi
c001c395:	e8 c6 1a ff ff       	call   c000de60 <LogicalDisk::assignDriveLetter()>
c001c39a:	5a                   	pop    edx
c001c39b:	0f be c0             	movsx  eax,al
c001c39e:	59                   	pop    ecx
c001c39f:	50                   	push   eax
c001c3a0:	68 14 07 02 c0       	push   0xc0020714
c001c3a5:	e8 46 f5 fe ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001c3aa:	58                   	pop    eax
c001c3ab:	5a                   	pop    edx
c001c3ac:	56                   	push   esi
c001c3ad:	53                   	push   ebx
c001c3ae:	e8 7d 09 ff ff       	call   c000cd30 <Device::addChild(Device*)>
c001c3b3:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001c3b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3bc:	e8 a5 0d ff ff       	call   c000d166 <PhysicalDisk::startCache()>
c001c3c1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001c3c8:	31 c0                	xor    eax,eax
c001c3ca:	83 c4 14             	add    esp,0x14
c001c3cd:	5b                   	pop    ebx
c001c3ce:	5e                   	pop    esi
c001c3cf:	c3                   	ret    

c001c3d0 <SATAPI::SATAPI()>:
c001c3d0:	83 ec 0c             	sub    esp,0xc
c001c3d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3d7:	83 ec 04             	sub    esp,0x4
c001c3da:	68 00 08 00 00       	push   0x800
c001c3df:	68 34 08 02 c0       	push   0xc0020834
c001c3e4:	50                   	push   eax
c001c3e5:	e8 14 0d ff ff       	call   c000d0fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c3ea:	83 c4 10             	add    esp,0x10
c001c3ed:	ba 70 09 02 c0       	mov    edx,0xc0020970
c001c3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f6:	89 10                	mov    DWORD PTR [eax],edx
c001c3f8:	90                   	nop
c001c3f9:	83 c4 0c             	add    esp,0xc
c001c3fc:	c3                   	ret    
c001c3fd:	90                   	nop

c001c3fe <SATAPI::diskRemoved()>:
c001c3fe:	c3                   	ret    
c001c3ff:	90                   	nop

c001c400 <SATAPI::diskInserted()>:
c001c400:	83 ec 18             	sub    esp,0x18
c001c403:	68 40 08 02 c0       	push   0xc0020840
c001c408:	e8 e3 f4 fe ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001c40d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c411:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001c418:	83 c4 1c             	add    esp,0x1c
c001c41b:	c3                   	ret    

c001c41c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001c41c:	55                   	push   ebp
c001c41d:	57                   	push   edi
c001c41e:	56                   	push   esi
c001c41f:	53                   	push   ebx
c001c420:	83 ec 38             	sub    esp,0x38
c001c423:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001c427:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001c42b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c42f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c433:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c437:	68 58 08 02 c0       	push   0xc0020858
c001c43c:	e8 af f4 fe ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001c441:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001c447:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c44d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c451:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001c457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c45b:	c1 e0 07             	shl    eax,0x7
c001c45e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c462:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c466:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c470:	58                   	pop    eax
c001c471:	5a                   	pop    edx
c001c472:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c476:	8d 58 02             	lea    ebx,[eax+0x2]
c001c479:	c1 e3 07             	shl    ebx,0x7
c001c47c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c480:	53                   	push   ebx
c001c481:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001c487:	e8 80 eb ff ff       	call   c001b00c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c48c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c490:	83 c4 10             	add    esp,0x10
c001c493:	b8 01 00 00 00       	mov    eax,0x1
c001c498:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001c49d:	0f 84 4c 02 00 00    	je     c001c6ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001c4a3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001c4a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4ab:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001c4b1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001c4b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c4bb:	c1 e1 05             	shl    ecx,0x5
c001c4be:	01 c8                	add    eax,ecx
c001c4c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c4c2:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001c4c8:	81 c9 25 00 01 00    	or     ecx,0x10025
c001c4ce:	89 08                	mov    DWORD PTR [eax],ecx
c001c4d0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001c4d6:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001c4dc:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001c4e2:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001c4e5:	8d 7b 40             	lea    edi,[ebx+0x40]
c001c4e8:	50                   	push   eax
c001c4e9:	68 90 00 00 00       	push   0x90
c001c4ee:	6a 00                	push   0x0
c001c4f0:	53                   	push   ebx
c001c4f1:	e8 fa 3f fe ff       	call   c00004f0 <memset>
c001c4f6:	b9 0c 00 00 00       	mov    ecx,0xc
c001c4fb:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001c4ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c501:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001c507:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001c50b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001c511:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001c515:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001c519:	48                   	dec    eax
c001c51a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c51f:	89 c1                	mov    ecx,eax
c001c521:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001c527:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c52c:	09 c8                	or     eax,ecx
c001c52e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001c534:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001c537:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001c53e:	66 25 00 7f          	and    ax,0x7f00
c001c542:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c546:	66 0d 27 80          	or     ax,0x8027
c001c54a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001c54e:	66 89 03             	mov    WORD PTR [ebx],ax
c001c551:	89 d0                	mov    eax,edx
c001c553:	c1 ea 18             	shr    edx,0x18
c001c556:	c1 e8 10             	shr    eax,0x10
c001c559:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001c55c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001c55f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001c563:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001c566:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c56a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001c56d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001c571:	83 c4 10             	add    esp,0x10
c001c574:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001c578:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c57c:	31 c0                	xor    eax,eax
c001c57e:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001c584:	80 e1 88             	and    cl,0x88
c001c587:	74 0a                	je     c001c593 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001c589:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c58e:	74 0a                	je     c001c59a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001c590:	40                   	inc    eax
c001c591:	eb eb                	jmp    c001c57e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001c593:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c598:	75 16                	jne    c001c5b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001c59a:	83 ec 0c             	sub    esp,0xc
c001c59d:	68 72 08 02 c0       	push   0xc0020872
c001c5a2:	e8 49 f3 fe ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001c5a7:	5f                   	pop    edi
c001c5a8:	5d                   	pop    ebp
c001c5a9:	68 87 08 02 c0       	push   0xc0020887
c001c5ae:	eb 4f                	jmp    c001c5ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001c5b0:	be 01 00 00 00       	mov    esi,0x1
c001c5b5:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c5b9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c5bd:	d3 e6                	shl    esi,cl
c001c5bf:	c1 e7 07             	shl    edi,0x7
c001c5c2:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001c5c8:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001c5cd:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001c5d1:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001c5d7:	85 c6                	test   esi,eax
c001c5d9:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001c5df:	0f 84 cb 00 00 00    	je     c001c6b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001c5e5:	0f ba e0 1e          	bt     eax,0x1e
c001c5e9:	73 2c                	jae    c001c617 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001c5eb:	83 ec 0c             	sub    esp,0xc
c001c5ee:	68 99 08 02 c0       	push   0xc0020899
c001c5f3:	e8 f8 f2 fe ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001c5f8:	5b                   	pop    ebx
c001c5f9:	5e                   	pop    esi
c001c5fa:	68 ac 08 02 c0       	push   0xc00208ac
c001c5ff:	ff 35 34 1d 02 c0    	push   DWORD PTR ds:0xc0021d34
c001c605:	e8 c6 d5 fe ff       	call   c0009bd0 <VgaText::puts(char const*)>
c001c60a:	83 c4 10             	add    esp,0x10
c001c60d:	b8 01 00 00 00       	mov    eax,0x1
c001c612:	e9 d8 00 00 00       	jmp    c001c6ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001c617:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001c61d:	83 f8 0d             	cmp    eax,0xd
c001c620:	77 0a                	ja     c001c62c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001c622:	83 ec 0c             	sub    esp,0xc
c001c625:	68 c8 00 00 00       	push   0xc8
c001c62a:	eb 28                	jmp    c001c654 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001c62c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001c632:	83 f8 0d             	cmp    eax,0xd
c001c635:	77 0a                	ja     c001c641 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001c637:	83 ec 0c             	sub    esp,0xc
c001c63a:	68 58 02 00 00       	push   0x258
c001c63f:	eb 13                	jmp    c001c654 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001c641:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001c647:	83 f8 06             	cmp    eax,0x6
c001c64a:	77 10                	ja     c001c65c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001c64c:	83 ec 0c             	sub    esp,0xc
c001c64f:	68 dc 05 00 00       	push   0x5dc
c001c654:	e8 3b 84 ff ff       	call   c0014a94 <milliTenthSleep(unsigned int)>
c001c659:	83 c4 10             	add    esp,0x10
c001c65c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001c660:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001c663:	75 06                	jne    c001c66b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001c665:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001c669:	74 15                	je     c001c680 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001c66b:	83 fb 06             	cmp    ebx,0x6
c001c66e:	77 10                	ja     c001c680 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001c670:	83 ec 0c             	sub    esp,0xc
c001c673:	68 c4 09 00 00       	push   0x9c4
c001c678:	e8 17 84 ff ff       	call   c0014a94 <milliTenthSleep(unsigned int)>
c001c67d:	83 c4 10             	add    esp,0x10
c001c680:	43                   	inc    ebx
c001c681:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001c687:	0f 85 44 ff ff ff    	jne    c001c5d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001c68d:	51                   	push   ecx
c001c68e:	51                   	push   ecx
c001c68f:	68 bd 08 02 c0       	push   0xc00208bd
c001c694:	ff 35 34 1d 02 c0    	push   DWORD PTR ds:0xc0021d34
c001c69a:	e8 31 d5 fe ff       	call   c0009bd0 <VgaText::puts(char const*)>
c001c69f:	c7 04 24 cd 08 02 c0 	mov    DWORD PTR [esp],0xc00208cd
c001c6a6:	e8 45 f2 fe ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001c6ab:	e9 5a ff ff ff       	jmp    c001c60a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001c6b0:	0f ba e0 1e          	bt     eax,0x1e
c001c6b4:	73 19                	jae    c001c6cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001c6b6:	83 ec 0c             	sub    esp,0xc
c001c6b9:	68 e1 08 02 c0       	push   0xc00208e1
c001c6be:	e8 2d f2 fe ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001c6c3:	58                   	pop    eax
c001c6c4:	5a                   	pop    edx
c001c6c5:	68 f6 08 02 c0       	push   0xc00208f6
c001c6ca:	e9 30 ff ff ff       	jmp    c001c5ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001c6cf:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001c6d4:	74 17                	je     c001c6ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001c6d6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001c6db:	74 10                	je     c001c6ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001c6dd:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001c6e3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001c6e7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001c6eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c6ed:	31 c0                	xor    eax,eax
c001c6ef:	83 c4 2c             	add    esp,0x2c
c001c6f2:	5b                   	pop    ebx
c001c6f3:	5e                   	pop    esi
c001c6f4:	5f                   	pop    edi
c001c6f5:	5d                   	pop    ebp
c001c6f6:	c3                   	ret    
c001c6f7:	90                   	nop

c001c6f8 <SATAPI::eject()>:
c001c6f8:	57                   	push   edi
c001c6f9:	b9 03 00 00 00       	mov    ecx,0x3
c001c6fe:	83 ec 18             	sub    esp,0x18
c001c701:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c705:	fc                   	cld    
c001c706:	31 c0                	xor    eax,eax
c001c708:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c70a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c70f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c714:	50                   	push   eax
c001c715:	6a 00                	push   0x0
c001c717:	6a 00                	push   0x0
c001c719:	6a 00                	push   0x0
c001c71b:	6a 00                	push   0x0
c001c71d:	6a 02                	push   0x2
c001c71f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c723:	50                   	push   eax
c001c724:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c728:	e8 ef fc ff ff       	call   c001c41c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001c72d:	31 c0                	xor    eax,eax
c001c72f:	83 c4 38             	add    esp,0x38
c001c732:	5f                   	pop    edi
c001c733:	c3                   	ret    

c001c734 <SATAPI::read(unsigned long long, int, void*)>:
c001c734:	57                   	push   edi
c001c735:	56                   	push   esi
c001c736:	53                   	push   ebx
c001c737:	83 ec 3c             	sub    esp,0x3c
c001c73a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c73e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001c742:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c746:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001c74a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c74e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c752:	68 09 09 02 c0       	push   0xc0020909
c001c757:	e8 94 f1 fe ff       	call   c000b8f0 <Dbg::kprintf(char const*, ...)>
c001c75c:	83 c4 10             	add    esp,0x10
c001c75f:	83 fe 04             	cmp    esi,0x4
c001c762:	7e 10                	jle    c001c774 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001c764:	83 ec 0c             	sub    esp,0xc
c001c767:	68 1a 09 02 c0       	push   0xc002091a
c001c76c:	e8 ce 4c ff ff       	call   c001143f <Krnl::panic(char const*)>
c001c771:	83 c4 10             	add    esp,0x10
c001c774:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c77a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c780:	51                   	push   ecx
c001c781:	50                   	push   eax
c001c782:	83 c0 02             	add    eax,0x2
c001c785:	c1 e0 07             	shl    eax,0x7
c001c788:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001c78e:	50                   	push   eax
c001c78f:	52                   	push   edx
c001c790:	e8 3b e9 ff ff       	call   c001b0d0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c795:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001c799:	b9 03 00 00 00       	mov    ecx,0x3
c001c79e:	fc                   	cld    
c001c79f:	31 c0                	xor    eax,eax
c001c7a1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c7a3:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001c7a8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001c7ad:	83 c4 0c             	add    esp,0xc
c001c7b0:	6a 00                	push   0x0
c001c7b2:	6a 00                	push   0x0
c001c7b4:	6a 00                	push   0x0
c001c7b6:	6a 00                	push   0x0
c001c7b8:	6a 02                	push   0x2
c001c7ba:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c7be:	50                   	push   eax
c001c7bf:	53                   	push   ebx
c001c7c0:	e8 57 fc ff ff       	call   c001c41c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001c7c5:	83 c4 20             	add    esp,0x20
c001c7c8:	85 c0                	test   eax,eax
c001c7ca:	74 1f                	je     c001c7eb <SATAPI::read(unsigned long long, int, void*)+0xb7>
c001c7cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7d0:	50                   	push   eax
c001c7d1:	50                   	push   eax
c001c7d2:	68 44 09 02 c0       	push   0xc0020944
c001c7d7:	ff 35 34 1d 02 c0    	push   DWORD PTR ds:0xc0021d34
c001c7dd:	e8 ee d3 fe ff       	call   c0009bd0 <VgaText::puts(char const*)>
c001c7e2:	58                   	pop    eax
c001c7e3:	5a                   	pop    edx
c001c7e4:	68 4c 09 02 c0       	push   0xc002094c
c001c7e9:	eb 61                	jmp    c001c84c <SATAPI::read(unsigned long long, int, void*)+0x118>
c001c7eb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001c7ef:	b9 03 00 00 00       	mov    ecx,0x3
c001c7f4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c7f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c7fa:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001c7ff:	0f c8                	bswap  eax
c001c801:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001c805:	89 f0                	mov    eax,esi
c001c807:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c80b:	57                   	push   edi
c001c80c:	56                   	push   esi
c001c80d:	c1 e6 0b             	shl    esi,0xb
c001c810:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001c814:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c818:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c81c:	56                   	push   esi
c001c81d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c821:	50                   	push   eax
c001c822:	53                   	push   ebx
c001c823:	e8 f4 fb ff ff       	call   c001c41c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001c828:	83 c4 20             	add    esp,0x20
c001c82b:	85 c0                	test   eax,eax
c001c82d:	74 2f                	je     c001c85e <SATAPI::read(unsigned long long, int, void*)+0x12a>
c001c82f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c833:	50                   	push   eax
c001c834:	50                   	push   eax
c001c835:	68 56 09 02 c0       	push   0xc0020956
c001c83a:	ff 35 34 1d 02 c0    	push   DWORD PTR ds:0xc0021d34
c001c840:	e8 8b d3 fe ff       	call   c0009bd0 <VgaText::puts(char const*)>
c001c845:	5a                   	pop    edx
c001c846:	59                   	pop    ecx
c001c847:	68 5e 09 02 c0       	push   0xc002095e
c001c84c:	ff 35 34 1d 02 c0    	push   DWORD PTR ds:0xc0021d34
c001c852:	e8 79 d3 fe ff       	call   c0009bd0 <VgaText::puts(char const*)>
c001c857:	83 c4 10             	add    esp,0x10
c001c85a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c85e:	83 c4 30             	add    esp,0x30
c001c861:	5b                   	pop    ebx
c001c862:	5e                   	pop    esi
c001c863:	5f                   	pop    edi
c001c864:	c3                   	ret    
c001c865:	90                   	nop

c001c866 <SATAPI::detectMedia()>:
c001c866:	c3                   	ret    
c001c867:	90                   	nop

c001c868 <IOAPIC::close(int, int, void*)>:
c001c868:	b8 00 00 00 00       	mov    eax,0x0
c001c86d:	c3                   	ret    

c001c86e <apicGetBase()>:
c001c86e:	55                   	push   ebp
c001c86f:	89 e5                	mov    ebp,esp
c001c871:	83 ec 18             	sub    esp,0x18
c001c874:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c001c879:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001c87f:	83 e0 08             	and    eax,0x8
c001c882:	84 c0                	test   al,al
c001c884:	75 07                	jne    c001c88d <apicGetBase()+0x1f>
c001c886:	b8 00 00 00 00       	mov    eax,0x0
c001c88b:	eb 21                	jmp    c001c8ae <apicGetBase()+0x40>
c001c88d:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c001c892:	83 ec 08             	sub    esp,0x8
c001c895:	6a 1b                	push   0x1b
c001c897:	50                   	push   eax
c001c898:	e8 01 b9 fe ff       	call   c000819e <Computer::rdmsr(unsigned int)>
c001c89d:	83 c4 10             	add    esp,0x10
c001c8a0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001c8a3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001c8a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c8a9:	25 00 00 ff ff       	and    eax,0xffff0000
c001c8ae:	c9                   	leave  
c001c8af:	c3                   	ret    

c001c8b0 <IOAPIC::IOAPIC()>:
c001c8b0:	83 ec 0c             	sub    esp,0xc
c001c8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b7:	83 ec 08             	sub    esp,0x8
c001c8ba:	68 a0 09 02 c0       	push   0xc00209a0
c001c8bf:	50                   	push   eax
c001c8c0:	e8 03 06 ff ff       	call   c000cec8 <Device::Device(char const*)>
c001c8c5:	83 c4 10             	add    esp,0x10
c001c8c8:	ba b0 09 02 c0       	mov    edx,0xc00209b0
c001c8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d1:	89 10                	mov    DWORD PTR [eax],edx
c001c8d3:	90                   	nop
c001c8d4:	83 c4 0c             	add    esp,0xc
c001c8d7:	c3                   	ret    

c001c8d8 <apicOpen()>:
c001c8d8:	55                   	push   ebp
c001c8d9:	89 e5                	mov    ebp,esp
c001c8db:	53                   	push   ebx
c001c8dc:	83 ec 34             	sub    esp,0x34
c001c8df:	a0 e0 5b 02 c0       	mov    al,ds:0xc0025be0
c001c8e4:	83 f0 01             	xor    eax,0x1
c001c8e7:	84 c0                	test   al,al
c001c8e9:	0f 84 9d 00 00 00    	je     c001c98c <apicOpen()+0xb4>
c001c8ef:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001c8f3:	a0 a0 45 02 c0       	mov    al,ds:0xc00245a0
c001c8f8:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001c8fb:	0f 83 84 00 00 00    	jae    c001c985 <apicOpen()+0xad>
c001c901:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001c908:	83 ec 0c             	sub    esp,0xc
c001c90b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001c90e:	e8 4e c2 fe ff       	call   c0008b61 <malloc>
c001c913:	83 c4 10             	add    esp,0x10
c001c916:	89 c3                	mov    ebx,eax
c001c918:	83 ec 0c             	sub    esp,0xc
c001c91b:	53                   	push   ebx
c001c91c:	e8 8f ff ff ff       	call   c001c8b0 <IOAPIC::IOAPIC()>
c001c921:	83 c4 10             	add    esp,0x10
c001c924:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001c927:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001c92a:	25 ff 00 00 00       	and    eax,0xff
c001c92f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001c932:	89 14 85 c0 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda440],edx
c001c939:	a1 a0 5b 02 c0       	mov    eax,ds:0xc0025ba0
c001c93e:	40                   	inc    eax
c001c93f:	a3 a0 5b 02 c0       	mov    ds:0xc0025ba0,eax
c001c944:	a1 e8 1c 02 c0       	mov    eax,ds:0xc0021ce8
c001c949:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001c94f:	83 ec 08             	sub    esp,0x8
c001c952:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001c955:	50                   	push   eax
c001c956:	e8 d5 03 ff ff       	call   c000cd30 <Device::addChild(Device*)>
c001c95b:	83 c4 10             	add    esp,0x10
c001c95e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001c961:	8b 00                	mov    eax,DWORD PTR [eax]
c001c963:	83 c0 08             	add    eax,0x8
c001c966:	8b 10                	mov    edx,DWORD PTR [eax]
c001c968:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001c96b:	25 ff 00 00 00       	and    eax,0xff
c001c970:	6a 00                	push   0x0
c001c972:	6a 00                	push   0x0
c001c974:	50                   	push   eax
c001c975:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001c978:	ff d2                	call   edx
c001c97a:	83 c4 10             	add    esp,0x10
c001c97d:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001c980:	e9 6e ff ff ff       	jmp    c001c8f3 <apicOpen()+0x1b>
c001c985:	c6 05 e0 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025be0,0x1
c001c98c:	e8 dd fe ff ff       	call   c001c86e <apicGetBase()>
c001c991:	05 f0 00 00 00       	add    eax,0xf0
c001c996:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c999:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001c99c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c99e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001c9a1:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001c9a8:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001c9af:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001c9b2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001c9b5:	89 10                	mov    DWORD PTR [eax],edx
c001c9b7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001c9be:	a1 f0 44 02 c0       	mov    eax,ds:0xc00244f0
c001c9c3:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001c9c6:	7d 70                	jge    c001ca38 <apicOpen()+0x160>
c001c9c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c9cb:	8b 04 85 00 45 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbb00]
c001c9d2:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001c9d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c9d8:	8b 04 85 00 45 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbb00]
c001c9df:	c1 e8 08             	shr    eax,0x8
c001c9e2:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001c9e6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c9e9:	8b 04 85 00 45 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbb00]
c001c9f0:	c1 e8 18             	shr    eax,0x18
c001c9f3:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001c9f6:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001c9fa:	75 37                	jne    c001ca33 <apicOpen()+0x15b>
c001c9fc:	e8 6d fe ff ff       	call   c001c86e <apicGetBase()>
c001ca01:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001ca05:	75 07                	jne    c001ca0e <apicOpen()+0x136>
c001ca07:	ba 60 03 00 00       	mov    edx,0x360
c001ca0c:	eb 05                	jmp    c001ca13 <apicOpen()+0x13b>
c001ca0e:	ba 50 03 00 00       	mov    edx,0x350
c001ca13:	01 d0                	add    eax,edx
c001ca15:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ca18:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ca1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca1d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ca20:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ca27:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ca2b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ca2e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ca31:	89 10                	mov    DWORD PTR [eax],edx
c001ca33:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001ca36:	eb 86                	jmp    c001c9be <apicOpen()+0xe6>
c001ca38:	90                   	nop
c001ca39:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ca3c:	c9                   	leave  
c001ca3d:	c3                   	ret    

c001ca3e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ca3e:	55                   	push   ebp
c001ca3f:	89 e5                	mov    ebp,esp
c001ca41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ca44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ca4a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ca4d:	72 1d                	jb     c001ca6c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ca4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ca52:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ca58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ca5b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ca61:	01 d0                	add    eax,edx
c001ca63:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ca66:	73 04                	jae    c001ca6c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ca68:	b0 01                	mov    al,0x1
c001ca6a:	eb 02                	jmp    c001ca6e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ca6c:	b0 00                	mov    al,0x0
c001ca6e:	5d                   	pop    ebp
c001ca6f:	c3                   	ret    

c001ca70 <IOAPIC::read(int)>:
c001ca70:	55                   	push   ebp
c001ca71:	89 e5                	mov    ebp,esp
c001ca73:	83 ec 10             	sub    esp,0x10
c001ca76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ca79:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ca7f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ca82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ca85:	31 d2                	xor    edx,edx
c001ca87:	88 c2                	mov    dl,al
c001ca89:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ca8c:	89 10                	mov    DWORD PTR [eax],edx
c001ca8e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ca91:	83 c0 10             	add    eax,0x10
c001ca94:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca96:	c9                   	leave  
c001ca97:	c3                   	ret    

c001ca98 <IOAPIC::open(int, int, void*)>:
c001ca98:	55                   	push   ebp
c001ca99:	89 e5                	mov    ebp,esp
c001ca9b:	57                   	push   edi
c001ca9c:	56                   	push   esi
c001ca9d:	53                   	push   ebx
c001ca9e:	83 ec 04             	sub    esp,0x4
c001caa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001caa4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001caa7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001caad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cab0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cab6:	8b 14 85 e0 45 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdba20]
c001cabd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cac0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001cac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cac9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cacf:	8b 14 85 60 46 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb9a0]
c001cad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cad9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cadf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cae2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001caeb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001caf1:	89 c6                	mov    esi,eax
c001caf3:	81 e6 ff 00 00 00    	and    esi,0xff
c001caf9:	89 d0                	mov    eax,edx
c001cafb:	ba 00 00 00 00       	mov    edx,0x0
c001cb00:	89 c7                	mov    edi,eax
c001cb02:	83 e7 ff             	and    edi,0xffffffff
c001cb05:	89 f9                	mov    ecx,edi
c001cb07:	89 d0                	mov    eax,edx
c001cb09:	25 ff 00 00 00       	and    eax,0xff
c001cb0e:	89 c3                	mov    ebx,eax
c001cb10:	89 c8                	mov    eax,ecx
c001cb12:	89 da                	mov    edx,ebx
c001cb14:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001cb17:	8d 5e 08             	lea    ebx,[esi+0x8]
c001cb1a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001cb1e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001cb22:	83 e0 00             	and    eax,0x0
c001cb25:	09 d0                	or     eax,edx
c001cb27:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001cb2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cb2e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001cb34:	8d 50 01             	lea    edx,[eax+0x1]
c001cb37:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001cb3a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001cb40:	31 d2                	xor    edx,edx
c001cb42:	88 c2                	mov    dl,al
c001cb44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cb47:	83 c2 08             	add    edx,0x8
c001cb4a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001cb4e:	81 e1 ff 00 00 00    	and    ecx,0xff
c001cb54:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001cb5a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001cb5e:	6a 01                	push   0x1
c001cb60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cb63:	e8 08 ff ff ff       	call   c001ca70 <IOAPIC::read(int)>
c001cb68:	83 c4 08             	add    esp,0x8
c001cb6b:	c1 f8 10             	sar    eax,0x10
c001cb6e:	25 ff 00 00 00       	and    eax,0xff
c001cb73:	8d 50 01             	lea    edx,[eax+0x1]
c001cb76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cb79:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001cb7f:	b8 00 00 00 00       	mov    eax,0x0
c001cb84:	8d 65 f4             	lea    esp,[ebp-0xc]
c001cb87:	5b                   	pop    ebx
c001cb88:	5e                   	pop    esi
c001cb89:	5f                   	pop    edi
c001cb8a:	5d                   	pop    ebp
c001cb8b:	c3                   	ret    

c001cb8c <IOAPIC::write(int, int)>:
c001cb8c:	55                   	push   ebp
c001cb8d:	89 e5                	mov    ebp,esp
c001cb8f:	83 ec 10             	sub    esp,0x10
c001cb92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cb95:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cb9b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001cb9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cba1:	31 d2                	xor    edx,edx
c001cba3:	88 c2                	mov    dl,al
c001cba5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001cba8:	89 10                	mov    DWORD PTR [eax],edx
c001cbaa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001cbad:	8d 50 10             	lea    edx,[eax+0x10]
c001cbb0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cbb3:	89 02                	mov    DWORD PTR [edx],eax
c001cbb5:	90                   	nop
c001cbb6:	c9                   	leave  
c001cbb7:	c3                   	ret    

c001cbb8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001cbb8:	55                   	push   ebp
c001cbb9:	89 e5                	mov    ebp,esp
c001cbbb:	53                   	push   ebx
c001cbbc:	83 ec 2c             	sub    esp,0x2c
c001cbbf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cbc2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001cbc5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001cbc8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001cbcb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001cbce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cbd1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001cbd4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001cbd7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001cbda:	88 d8                	mov    al,bl
c001cbdc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001cbdf:	88 c8                	mov    al,cl
c001cbe1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001cbe4:	88 d0                	mov    al,dl
c001cbe6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001cbe9:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001cbec:	25 ff 00 00 00       	and    eax,0xff
c001cbf1:	83 c0 08             	add    eax,0x8
c001cbf4:	01 c0                	add    eax,eax
c001cbf6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001cbf9:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001cbfc:	25 ff 00 00 00       	and    eax,0xff
c001cc01:	83 c0 08             	add    eax,0x8
c001cc04:	01 c0                	add    eax,eax
c001cc06:	40                   	inc    eax
c001cc07:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001cc0a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001cc0d:	50                   	push   eax
c001cc0e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cc11:	e8 5a fe ff ff       	call   c001ca70 <IOAPIC::read(int)>
c001cc16:	83 c4 08             	add    esp,0x8
c001cc19:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cc1c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001cc23:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001cc26:	c1 e0 18             	shl    eax,0x18
c001cc29:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001cc2c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001cc2f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001cc32:	52                   	push   edx
c001cc33:	50                   	push   eax
c001cc34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cc37:	e8 50 ff ff ff       	call   c001cb8c <IOAPIC::write(int, int)>
c001cc3c:	83 c4 0c             	add    esp,0xc
c001cc3f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cc42:	50                   	push   eax
c001cc43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cc46:	e8 25 fe ff ff       	call   c001ca70 <IOAPIC::read(int)>
c001cc4b:	83 c4 08             	add    esp,0x8
c001cc4e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001cc51:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001cc58:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001cc5f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001cc66:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001cc6a:	74 09                	je     c001cc75 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001cc6c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001cc73:	eb 07                	jmp    c001cc7c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001cc75:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001cc7c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001cc80:	74 09                	je     c001cc8b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001cc82:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001cc89:	eb 07                	jmp    c001cc92 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001cc8b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001cc92:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001cc99:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001cc9c:	25 ff 00 00 00       	and    eax,0xff
c001cca1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001cca4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001cca7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ccaa:	52                   	push   edx
c001ccab:	50                   	push   eax
c001ccac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ccaf:	e8 d8 fe ff ff       	call   c001cb8c <IOAPIC::write(int, int)>
c001ccb4:	83 c4 0c             	add    esp,0xc
c001ccb7:	90                   	nop
c001ccb8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ccbb:	c9                   	leave  
c001ccbc:	c3                   	ret    
c001ccbd:	66 90                	xchg   ax,ax
c001ccbf:	90                   	nop

c001ccc0 <APICTimer::close(int, int, void*)>:
c001ccc0:	b8 00 00 00 00       	mov    eax,0x0
c001ccc5:	c3                   	ret    
c001ccc6:	66 90                	xchg   ax,ax

c001ccc8 <apicTimerHandler(regs*, void*)>:
c001ccc8:	83 ec 0c             	sub    esp,0xc
c001cccb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cccf:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ccd1:	b8 10 27 00 00       	mov    eax,0x2710
c001ccd6:	ba 00 00 00 00       	mov    edx,0x0
c001ccdb:	f7 f1                	div    ecx
c001ccdd:	83 ec 0c             	sub    esp,0xc
c001cce0:	50                   	push   eax
c001cce1:	e8 de 18 ff ff       	call   c000e5c4 <timerHandler(unsigned int)>
c001cce6:	83 c4 10             	add    esp,0x10
c001cce9:	90                   	nop
c001ccea:	83 c4 0c             	add    esp,0xc
c001cced:	c3                   	ret    
c001ccee:	66 90                	xchg   ax,ax

c001ccf0 <APICTimer::open(int, int, void*)>:
c001ccf0:	83 ec 0c             	sub    esp,0xc
c001ccf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf7:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccf9:	83 c0 24             	add    eax,0x24
c001ccfc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccfe:	83 ec 08             	sub    esp,0x8
c001cd01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd09:	ff d0                	call   eax
c001cd0b:	83 c4 10             	add    esp,0x10
c001cd0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd12:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cd16:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001cd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cd24:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001cd2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cd2e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001cd34:	83 ec 0c             	sub    esp,0xc
c001cd37:	51                   	push   ecx
c001cd38:	6a 01                	push   0x1
c001cd3a:	68 c8 cc 01 c0       	push   0xc001ccc8
c001cd3f:	52                   	push   edx
c001cd40:	50                   	push   eax
c001cd41:	e8 96 ff fe ff       	call   c000ccdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd46:	83 c4 20             	add    esp,0x20
c001cd49:	89 c2                	mov    edx,eax
c001cd4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd4f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001cd55:	b8 00 00 00 00       	mov    eax,0x0
c001cd5a:	83 c4 0c             	add    esp,0xc
c001cd5d:	c3                   	ret    
c001cd5e:	66 90                	xchg   ax,ax

c001cd60 <APICTimer::write(int)>:
c001cd60:	83 ec 0c             	sub    esp,0xc
c001cd63:	83 ec 0c             	sub    esp,0xc
c001cd66:	68 d4 09 02 c0       	push   0xc00209d4
c001cd6b:	e8 cf 46 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001cd70:	83 c4 10             	add    esp,0x10
c001cd73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd7b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cd81:	90                   	nop
c001cd82:	83 c4 0c             	add    esp,0xc
c001cd85:	c3                   	ret    
c001cd86:	66 90                	xchg   ax,ax

c001cd88 <APICTimer::APICTimer()>:
c001cd88:	83 ec 0c             	sub    esp,0xc
c001cd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd8f:	83 ec 08             	sub    esp,0x8
c001cd92:	68 e4 09 02 c0       	push   0xc00209e4
c001cd97:	50                   	push   eax
c001cd98:	e8 5b 17 ff ff       	call   c000e4f8 <Timer::Timer(char const*)>
c001cd9d:	83 c4 10             	add    esp,0x10
c001cda0:	ba f8 09 02 c0       	mov    edx,0xc00209f8
c001cda5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cda9:	89 10                	mov    DWORD PTR [eax],edx
c001cdab:	90                   	nop
c001cdac:	83 c4 0c             	add    esp,0xc
c001cdaf:	c3                   	ret    

c001cdb0 <PIT::write(int)>:
c001cdb0:	83 ec 10             	sub    esp,0x10
c001cdb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cdb7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cdbb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cdc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdc5:	a3 e4 5b 02 c0       	mov    ds:0xc0025be4,eax
c001cdca:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001cdcf:	99                   	cdq    
c001cdd0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001cdd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cdd8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001cddf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001cde4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001cde8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001cded:	ee                   	out    dx,al
c001cdee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cdf2:	25 ff 00 00 00       	and    eax,0xff
c001cdf7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001cdfe:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ce02:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ce06:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ce0b:	ee                   	out    dx,al
c001ce0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce10:	c1 f8 08             	sar    eax,0x8
c001ce13:	25 ff 00 00 00       	and    eax,0xff
c001ce18:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ce1f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ce23:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ce27:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ce2c:	ee                   	out    dx,al
c001ce2d:	90                   	nop
c001ce2e:	83 c4 10             	add    esp,0x10
c001ce31:	c3                   	ret    
c001ce32:	66 90                	xchg   ax,ax

c001ce34 <pitHandler(regs*, void*)>:
c001ce34:	83 ec 0c             	sub    esp,0xc
c001ce37:	8b 0d e4 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025be4
c001ce3d:	b8 10 27 00 00       	mov    eax,0x2710
c001ce42:	99                   	cdq    
c001ce43:	f7 f9                	idiv   ecx
c001ce45:	83 ec 0c             	sub    esp,0xc
c001ce48:	50                   	push   eax
c001ce49:	e8 76 17 ff ff       	call   c000e5c4 <timerHandler(unsigned int)>
c001ce4e:	83 c4 10             	add    esp,0x10
c001ce51:	90                   	nop
c001ce52:	83 c4 0c             	add    esp,0xc
c001ce55:	c3                   	ret    
c001ce56:	66 90                	xchg   ax,ax

c001ce58 <PIT::open(int, int, void*)>:
c001ce58:	83 ec 0c             	sub    esp,0xc
c001ce5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce61:	83 c0 24             	add    eax,0x24
c001ce64:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce66:	83 ec 08             	sub    esp,0x8
c001ce69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce71:	ff d0                	call   eax
c001ce73:	83 c4 10             	add    esp,0x10
c001ce76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce7a:	83 ec 0c             	sub    esp,0xc
c001ce7d:	6a 00                	push   0x0
c001ce7f:	6a 01                	push   0x1
c001ce81:	68 34 ce 01 c0       	push   0xc001ce34
c001ce86:	6a 00                	push   0x0
c001ce88:	50                   	push   eax
c001ce89:	e8 4e fe fe ff       	call   c000ccdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce8e:	83 c4 20             	add    esp,0x20
c001ce91:	89 c2                	mov    edx,eax
c001ce93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce97:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ce9d:	b8 00 00 00 00       	mov    eax,0x0
c001cea2:	83 c4 0c             	add    esp,0xc
c001cea5:	c3                   	ret    
c001cea6:	66 90                	xchg   ax,ax

c001cea8 <PIT::close(int, int, void*)>:
c001cea8:	83 ec 0c             	sub    esp,0xc
c001ceab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceaf:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ceb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cebd:	6a 01                	push   0x1
c001cebf:	68 34 ce 01 c0       	push   0xc001ce34
c001cec4:	6a 00                	push   0x0
c001cec6:	50                   	push   eax
c001cec7:	e8 46 fe fe ff       	call   c000cd12 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001cecc:	83 c4 10             	add    esp,0x10
c001cecf:	b8 00 00 00 00       	mov    eax,0x0
c001ced4:	83 c4 0c             	add    esp,0xc
c001ced7:	c3                   	ret    

c001ced8 <PIT::PIT()>:
c001ced8:	83 ec 0c             	sub    esp,0xc
c001cedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cedf:	83 ec 08             	sub    esp,0x8
c001cee2:	68 20 0a 02 c0       	push   0xc0020a20
c001cee7:	50                   	push   eax
c001cee8:	e8 0b 16 ff ff       	call   c000e4f8 <Timer::Timer(char const*)>
c001ceed:	83 c4 10             	add    esp,0x10
c001cef0:	ba 48 0a 02 c0       	mov    edx,0xc0020a48
c001cef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cef9:	89 10                	mov    DWORD PTR [eax],edx
c001cefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cf05:	31 d2                	xor    edx,edx
c001cf07:	88 c2                	mov    dl,al
c001cf09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf0d:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001cf14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf18:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cf1e:	31 d2                	xor    edx,edx
c001cf20:	88 c2                	mov    dl,al
c001cf22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf26:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001cf2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf2f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cf35:	8d 50 01             	lea    edx,[eax+0x1]
c001cf38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cf3c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001cf42:	31 d2                	xor    edx,edx
c001cf44:	88 c2                	mov    dl,al
c001cf46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf4a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cf4e:	83 e1 3f             	and    ecx,0x3f
c001cf51:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cf55:	90                   	nop
c001cf56:	83 c4 0c             	add    esp,0xc
c001cf59:	c3                   	ret    
c001cf5a:	66 90                	xchg   ax,ax
c001cf5c:	66 90                	xchg   ax,ax
c001cf5e:	66 90                	xchg   ax,ax

c001cf60 <avxDetect>:
c001cf60:	b8 01 00 00 00       	mov    eax,0x1
c001cf65:	0f a2                	cpuid  
c001cf67:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001cf6d:	74 15                	je     c001cf84 <avxDetect.noAVX>
c001cf6f:	b8 01 00 00 00       	mov    eax,0x1
c001cf74:	0f a2                	cpuid  
c001cf76:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001cf7c:	74 06                	je     c001cf84 <avxDetect.noAVX>
c001cf7e:	b8 01 00 00 00       	mov    eax,0x1
c001cf83:	c3                   	ret    

c001cf84 <avxDetect.noAVX>:
c001cf84:	b8 00 00 00 00       	mov    eax,0x0
c001cf89:	c3                   	ret    

c001cf8a <avxSave>:
c001cf8a:	53                   	push   ebx
c001cf8b:	52                   	push   edx
c001cf8c:	31 c0                	xor    eax,eax
c001cf8e:	48                   	dec    eax
c001cf8f:	89 c2                	mov    edx,eax
c001cf91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001cf95:	0f ae 23             	xsave  [ebx]
c001cf98:	5a                   	pop    edx
c001cf99:	5b                   	pop    ebx
c001cf9a:	c3                   	ret    

c001cf9b <avxLoad>:
c001cf9b:	53                   	push   ebx
c001cf9c:	52                   	push   edx
c001cf9d:	31 c0                	xor    eax,eax
c001cf9f:	48                   	dec    eax
c001cfa0:	89 c2                	mov    edx,eax
c001cfa2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001cfa6:	0f ae 2b             	xrstor [ebx]
c001cfa9:	5a                   	pop    edx
c001cfaa:	5b                   	pop    ebx
c001cfab:	c3                   	ret    

c001cfac <avxInit>:
c001cfac:	e8 57 02 00 00       	call   c001d208 <sseInit>
c001cfb1:	50                   	push   eax
c001cfb2:	51                   	push   ecx
c001cfb3:	0f 20 e0             	mov    eax,cr4
c001cfb6:	0d 00 00 04 00       	or     eax,0x40000
c001cfbb:	0f 22 e0             	mov    cr4,eax
c001cfbe:	31 c9                	xor    ecx,ecx
c001cfc0:	0f 01 d0             	xgetbv 
c001cfc3:	0d 07 00 00 00       	or     eax,0x7
c001cfc8:	0f 01 d1             	xsetbv 
c001cfcb:	59                   	pop    ecx
c001cfcc:	58                   	pop    eax
c001cfcd:	c3                   	ret    

c001cfce <avxClose>:
c001cfce:	c3                   	ret    

c001cfcf <wouldSheSayYes>:
c001cfcf:	c3                   	ret    
c001cfd0:	49                   	dec    ecx
c001cfd1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001cfd5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001cfd9:	75 20                	jne    c001cffb <isr0+0xb>
c001cfdb:	4e                   	dec    esi
c001cfdc:	79 61                	jns    c001d03f <isr7+0x3>
c001cfde:	68 2e 2e 2e 00       	push   0x2e2e2e
c001cfe3:	66 90                	xchg   ax,ax
c001cfe5:	66 90                	xchg   ax,ax
c001cfe7:	66 90                	xchg   ax,ax
c001cfe9:	66 90                	xchg   ax,ax
c001cfeb:	66 90                	xchg   ax,ax
c001cfed:	66 90                	xchg   ax,ax
c001cfef:	90                   	nop

c001cff0 <isr0>:
c001cff0:	fa                   	cli    
c001cff1:	68 00 00 00 00       	push   0x0
c001cff6:	68 00 00 00 00       	push   0x0
c001cffb:	e9 44 01 00 00       	jmp    c001d144 <int_common_stub>

c001d000 <isr1>:
c001d000:	fa                   	cli    
c001d001:	6a 00                	push   0x0
c001d003:	6a 01                	push   0x1
c001d005:	e9 3a 01 00 00       	jmp    c001d144 <int_common_stub>

c001d00a <isr2>:
c001d00a:	fa                   	cli    
c001d00b:	6a 00                	push   0x0
c001d00d:	6a 02                	push   0x2
c001d00f:	e9 30 01 00 00       	jmp    c001d144 <int_common_stub>

c001d014 <isr3>:
c001d014:	fa                   	cli    
c001d015:	6a 00                	push   0x0
c001d017:	6a 03                	push   0x3
c001d019:	e9 26 01 00 00       	jmp    c001d144 <int_common_stub>

c001d01e <isr4>:
c001d01e:	fa                   	cli    
c001d01f:	6a 00                	push   0x0
c001d021:	6a 04                	push   0x4
c001d023:	e9 1c 01 00 00       	jmp    c001d144 <int_common_stub>

c001d028 <isr5>:
c001d028:	fa                   	cli    
c001d029:	6a 00                	push   0x0
c001d02b:	6a 05                	push   0x5
c001d02d:	e9 12 01 00 00       	jmp    c001d144 <int_common_stub>

c001d032 <isr6>:
c001d032:	fa                   	cli    
c001d033:	6a 00                	push   0x0
c001d035:	6a 06                	push   0x6
c001d037:	e9 08 01 00 00       	jmp    c001d144 <int_common_stub>

c001d03c <isr7>:
c001d03c:	fa                   	cli    
c001d03d:	6a 00                	push   0x0
c001d03f:	6a 07                	push   0x7
c001d041:	e9 fe 00 00 00       	jmp    c001d144 <int_common_stub>

c001d046 <isr8>:
c001d046:	fa                   	cli    
c001d047:	6a 08                	push   0x8
c001d049:	e9 f6 00 00 00       	jmp    c001d144 <int_common_stub>

c001d04e <isr9>:
c001d04e:	fa                   	cli    
c001d04f:	6a 00                	push   0x0
c001d051:	6a 09                	push   0x9
c001d053:	e9 ec 00 00 00       	jmp    c001d144 <int_common_stub>

c001d058 <isr10>:
c001d058:	fa                   	cli    
c001d059:	6a 0a                	push   0xa
c001d05b:	e9 e4 00 00 00       	jmp    c001d144 <int_common_stub>

c001d060 <isr11>:
c001d060:	fa                   	cli    
c001d061:	6a 0b                	push   0xb
c001d063:	e9 dc 00 00 00       	jmp    c001d144 <int_common_stub>

c001d068 <isr12>:
c001d068:	fa                   	cli    
c001d069:	6a 0c                	push   0xc
c001d06b:	e9 d4 00 00 00       	jmp    c001d144 <int_common_stub>

c001d070 <isr13>:
c001d070:	fa                   	cli    
c001d071:	6a 0d                	push   0xd
c001d073:	e9 cc 00 00 00       	jmp    c001d144 <int_common_stub>

c001d078 <isr14>:
c001d078:	fa                   	cli    
c001d079:	6a 0e                	push   0xe
c001d07b:	e9 c4 00 00 00       	jmp    c001d144 <int_common_stub>

c001d080 <isr15>:
c001d080:	fa                   	cli    
c001d081:	6a 00                	push   0x0
c001d083:	6a 0f                	push   0xf
c001d085:	e9 ba 00 00 00       	jmp    c001d144 <int_common_stub>

c001d08a <isr16>:
c001d08a:	fa                   	cli    
c001d08b:	6a 00                	push   0x0
c001d08d:	6a 10                	push   0x10
c001d08f:	e9 b0 00 00 00       	jmp    c001d144 <int_common_stub>

c001d094 <isr17>:
c001d094:	fa                   	cli    
c001d095:	6a 00                	push   0x0
c001d097:	6a 11                	push   0x11
c001d099:	e9 a6 00 00 00       	jmp    c001d144 <int_common_stub>

c001d09e <isr18>:
c001d09e:	fa                   	cli    
c001d09f:	6a 00                	push   0x0
c001d0a1:	6a 12                	push   0x12
c001d0a3:	e9 9c 00 00 00       	jmp    c001d144 <int_common_stub>

c001d0a8 <irq3>:
c001d0a8:	fa                   	cli    
c001d0a9:	6a 00                	push   0x0
c001d0ab:	6a 23                	push   0x23
c001d0ad:	e9 92 00 00 00       	jmp    c001d144 <int_common_stub>

c001d0b2 <irq4>:
c001d0b2:	fa                   	cli    
c001d0b3:	6a 00                	push   0x0
c001d0b5:	6a 24                	push   0x24
c001d0b7:	e9 88 00 00 00       	jmp    c001d144 <int_common_stub>

c001d0bc <irq5>:
c001d0bc:	fa                   	cli    
c001d0bd:	6a 00                	push   0x0
c001d0bf:	6a 25                	push   0x25
c001d0c1:	e9 7e 00 00 00       	jmp    c001d144 <int_common_stub>

c001d0c6 <irq6>:
c001d0c6:	fa                   	cli    
c001d0c7:	6a 00                	push   0x0
c001d0c9:	6a 26                	push   0x26
c001d0cb:	e9 74 00 00 00       	jmp    c001d144 <int_common_stub>

c001d0d0 <irq7>:
c001d0d0:	fa                   	cli    
c001d0d1:	6a 00                	push   0x0
c001d0d3:	6a 27                	push   0x27
c001d0d5:	e9 6a 00 00 00       	jmp    c001d144 <int_common_stub>

c001d0da <irq8>:
c001d0da:	fa                   	cli    
c001d0db:	6a 00                	push   0x0
c001d0dd:	6a 28                	push   0x28
c001d0df:	e9 60 00 00 00       	jmp    c001d144 <int_common_stub>

c001d0e4 <irq9>:
c001d0e4:	fa                   	cli    
c001d0e5:	6a 00                	push   0x0
c001d0e7:	6a 29                	push   0x29
c001d0e9:	e9 56 00 00 00       	jmp    c001d144 <int_common_stub>

c001d0ee <irq10>:
c001d0ee:	fa                   	cli    
c001d0ef:	6a 00                	push   0x0
c001d0f1:	6a 2a                	push   0x2a
c001d0f3:	e9 4c 00 00 00       	jmp    c001d144 <int_common_stub>

c001d0f8 <irq11>:
c001d0f8:	fa                   	cli    
c001d0f9:	6a 00                	push   0x0
c001d0fb:	6a 2b                	push   0x2b
c001d0fd:	e9 42 00 00 00       	jmp    c001d144 <int_common_stub>

c001d102 <irq12>:
c001d102:	fa                   	cli    
c001d103:	6a 00                	push   0x0
c001d105:	6a 2c                	push   0x2c
c001d107:	e9 38 00 00 00       	jmp    c001d144 <int_common_stub>

c001d10c <irq13>:
c001d10c:	fa                   	cli    
c001d10d:	6a 00                	push   0x0
c001d10f:	6a 2d                	push   0x2d
c001d111:	e9 2e 00 00 00       	jmp    c001d144 <int_common_stub>

c001d116 <irq14>:
c001d116:	fa                   	cli    
c001d117:	6a 00                	push   0x0
c001d119:	6a 2e                	push   0x2e
c001d11b:	e9 24 00 00 00       	jmp    c001d144 <int_common_stub>

c001d120 <irq15>:
c001d120:	fa                   	cli    
c001d121:	6a 00                	push   0x0
c001d123:	6a 2f                	push   0x2f
c001d125:	e9 1a 00 00 00       	jmp    c001d144 <int_common_stub>

c001d12a <irq1>:
c001d12a:	fa                   	cli    
c001d12b:	6a 00                	push   0x0
c001d12d:	6a 21                	push   0x21
c001d12f:	eb 13                	jmp    c001d144 <int_common_stub>

c001d131 <irq2>:
c001d131:	fa                   	cli    
c001d132:	6a 00                	push   0x0
c001d134:	6a 22                	push   0x22
c001d136:	eb 0c                	jmp    c001d144 <int_common_stub>

c001d138 <isr96>:
c001d138:	6a 00                	push   0x0
c001d13a:	6a 60                	push   0x60
c001d13c:	fb                   	sti    
c001d13d:	eb 05                	jmp    c001d144 <int_common_stub>

c001d13f <irq0>:
c001d13f:	fa                   	cli    
c001d140:	6a 00                	push   0x0
c001d142:	6a 20                	push   0x20

c001d144 <int_common_stub>:
c001d144:	60                   	pusha  
c001d145:	1e                   	push   ds
c001d146:	06                   	push   es
c001d147:	0f a0                	push   fs
c001d149:	0f a8                	push   gs
c001d14b:	66 b8 10 00          	mov    ax,0x10
c001d14f:	66 8e d8             	mov    ds,ax
c001d152:	66 8e c0             	mov    es,ax
c001d155:	66 8e e0             	mov    fs,ax
c001d158:	66 8e e8             	mov    gs,ax
c001d15b:	54                   	push   esp
c001d15c:	fc                   	cld    
c001d15d:	e8 7a 00 ff ff       	call   c000d1dc <int_handler>
c001d162:	81 c4 04 00 00 00    	add    esp,0x4
c001d168:	0f a9                	pop    gs
c001d16a:	0f a1                	pop    fs
c001d16c:	07                   	pop    es
c001d16d:	1f                   	pop    ds
c001d16e:	61                   	popa   
c001d16f:	81 c4 08 00 00 00    	add    esp,0x8
c001d175:	cf                   	iret   

c001d176 <irq16>:
c001d176:	fa                   	cli    
c001d177:	6a 00                	push   0x0
c001d179:	6a 30                	push   0x30
c001d17b:	e9 c4 ff ff ff       	jmp    c001d144 <int_common_stub>

c001d180 <irq17>:
c001d180:	fa                   	cli    
c001d181:	6a 00                	push   0x0
c001d183:	6a 31                	push   0x31
c001d185:	e9 ba ff ff ff       	jmp    c001d144 <int_common_stub>

c001d18a <irq18>:
c001d18a:	fa                   	cli    
c001d18b:	6a 00                	push   0x0
c001d18d:	6a 32                	push   0x32
c001d18f:	e9 b0 ff ff ff       	jmp    c001d144 <int_common_stub>

c001d194 <irq19>:
c001d194:	fa                   	cli    
c001d195:	6a 00                	push   0x0
c001d197:	6a 33                	push   0x33
c001d199:	e9 a6 ff ff ff       	jmp    c001d144 <int_common_stub>

c001d19e <irq20>:
c001d19e:	fa                   	cli    
c001d19f:	6a 00                	push   0x0
c001d1a1:	6a 34                	push   0x34
c001d1a3:	e9 9c ff ff ff       	jmp    c001d144 <int_common_stub>

c001d1a8 <irq21>:
c001d1a8:	fa                   	cli    
c001d1a9:	6a 00                	push   0x0
c001d1ab:	6a 35                	push   0x35
c001d1ad:	e9 92 ff ff ff       	jmp    c001d144 <int_common_stub>

c001d1b2 <irq22>:
c001d1b2:	fa                   	cli    
c001d1b3:	6a 00                	push   0x0
c001d1b5:	6a 36                	push   0x36
c001d1b7:	e9 88 ff ff ff       	jmp    c001d144 <int_common_stub>

c001d1bc <irq23>:
c001d1bc:	fa                   	cli    
c001d1bd:	6a 00                	push   0x0
c001d1bf:	6a 37                	push   0x37
c001d1c1:	e9 7e ff ff ff       	jmp    c001d144 <int_common_stub>
c001d1c6:	66 90                	xchg   ax,ax
c001d1c8:	66 90                	xchg   ax,ax
c001d1ca:	66 90                	xchg   ax,ax
c001d1cc:	66 90                	xchg   ax,ax
c001d1ce:	66 90                	xchg   ax,ax

c001d1d0 <i386GetRDRAND>:
c001d1d0:	b9 64 00 00 00       	mov    ecx,0x64

c001d1d5 <retry>:
c001d1d5:	0f c7 f0             	rdrand eax
c001d1d8:	72 05                	jb     c001d1df <retry.done>
c001d1da:	e2 f9                	loop   c001d1d5 <retry>

c001d1dc <retry.fail>:
c001d1dc:	31 c0                	xor    eax,eax
c001d1de:	c3                   	ret    

c001d1df <retry.done>:
c001d1df:	c3                   	ret    

c001d1e0 <absolutelyNoChanceInHell>:
c001d1e0:	b8 01 00 00 00       	mov    eax,0x1
c001d1e5:	0f a2                	cpuid  
c001d1e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001d1ed:	74 06                	je     c001d1f5 <sseDetect.noSSE>
c001d1ef:	b8 01 00 00 00       	mov    eax,0x1
c001d1f4:	c3                   	ret    

c001d1f5 <sseDetect.noSSE>:
c001d1f5:	31 c0                	xor    eax,eax
c001d1f7:	c3                   	ret    

c001d1f8 <sseSave>:
c001d1f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1fc:	0f ae 00             	fxsave [eax]
c001d1ff:	c3                   	ret    

c001d200 <sseLoad>:
c001d200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d204:	0f ae 08             	fxrstor [eax]
c001d207:	c3                   	ret    

c001d208 <sseInit>:
c001d208:	e8 42 00 00 00       	call   c001d24f <x87Init>
c001d20d:	0f 20 e0             	mov    eax,cr4
c001d210:	66 0d 00 06          	or     ax,0x600
c001d214:	0f 22 e0             	mov    cr4,eax
c001d217:	c3                   	ret    

c001d218 <sseClose>:
c001d218:	c3                   	ret    
c001d219:	66 90                	xchg   ax,ax
c001d21b:	66 90                	xchg   ax,ax
c001d21d:	66 90                	xchg   ax,ax
c001d21f:	90                   	nop

c001d220 <value_37F>:
c001d220:	7f 03                	jg     c001d225 <value_37A+0x1>

c001d222 <value_37E>:
c001d222:	7e 03                	jle    c001d227 <x87Detect+0x1>

c001d224 <value_37A>:
c001d224:	7a 03                	jp     c001d229 <x87Detect+0x3>

c001d226 <x87Detect>:
c001d226:	b8 01 00 00 00       	mov    eax,0x1
c001d22b:	0f a2                	cpuid  
c001d22d:	f7 c2 01 00 00 00    	test   edx,0x1
c001d233:	74 06                	je     c001d23b <x87Detect.nox87>
c001d235:	b8 01 00 00 00       	mov    eax,0x1
c001d23a:	c3                   	ret    

c001d23b <x87Detect.nox87>:
c001d23b:	b8 00 00 00 00       	mov    eax,0x0
c001d240:	c3                   	ret    

c001d241 <x87Save>:
c001d241:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d245:	dd 30                	fnsave [eax]
c001d247:	c3                   	ret    

c001d248 <x87Load>:
c001d248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d24c:	dd 20                	frstor [eax]
c001d24e:	c3                   	ret    

c001d24f <x87Init>:
c001d24f:	0f 20 c0             	mov    eax,cr0
c001d252:	66 25 fb ff          	and    ax,0xfffb
c001d256:	66 0d 22 00          	or     ax,0x22
c001d25a:	0f 22 c0             	mov    cr0,eax
c001d25d:	db e3                	fninit 
c001d25f:	0f 06                	clts   
c001d261:	d9 2d 24 d2 01 c0    	fldcw  WORD PTR ds:0xc001d224
c001d267:	c3                   	ret    

c001d268 <x87Close>:
c001d268:	c3                   	ret    
c001d269:	66 90                	xchg   ax,ax
c001d26b:	90                   	nop

c001d26c <__do_global_ctors_aux>:
c001d26c:	a1 1c e2 01 c0       	mov    eax,ds:0xc001e21c
c001d271:	83 f8 ff             	cmp    eax,0xffffffff
c001d274:	74 1a                	je     c001d290 <__do_global_ctors_aux+0x24>
c001d276:	55                   	push   ebp
c001d277:	89 e5                	mov    ebp,esp
c001d279:	53                   	push   ebx
c001d27a:	52                   	push   edx
c001d27b:	bb 1c e2 01 c0       	mov    ebx,0xc001e21c
c001d280:	ff d0                	call   eax
c001d282:	83 eb 04             	sub    ebx,0x4
c001d285:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d287:	83 f8 ff             	cmp    eax,0xffffffff
c001d28a:	75 f4                	jne    c001d280 <__do_global_ctors_aux+0x14>
c001d28c:	58                   	pop    eax
c001d28d:	5b                   	pop    ebx
c001d28e:	5d                   	pop    ebp
c001d28f:	c3                   	ret    
c001d290:	c3                   	ret    
c001d291:	66 90                	xchg   ax,ax
c001d293:	90                   	nop

c001d294 <__divdi3>:
c001d294:	55                   	push   ebp
c001d295:	57                   	push   edi
c001d296:	56                   	push   esi
c001d297:	53                   	push   ebx
c001d298:	83 ec 1c             	sub    esp,0x1c
c001d29b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d29f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d2a3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001d2a6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001d2aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d2ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d2b2:	85 db                	test   ebx,ebx
c001d2b4:	0f 88 8e 00 00 00    	js     c001d348 <__divdi3+0xb4>
c001d2ba:	89 dd                	mov    ebp,ebx
c001d2bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d2c4:	89 d3                	mov    ebx,edx
c001d2c6:	85 d2                	test   edx,edx
c001d2c8:	79 0d                	jns    c001d2d7 <__divdi3+0x43>
c001d2ca:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001d2ce:	f7 d8                	neg    eax
c001d2d0:	83 d2 00             	adc    edx,0x0
c001d2d3:	f7 da                	neg    edx
c001d2d5:	89 d3                	mov    ebx,edx
c001d2d7:	89 c7                	mov    edi,eax
c001d2d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d2dc:	85 db                	test   ebx,ebx
c001d2de:	75 48                	jne    c001d328 <__divdi3+0x94>
c001d2e0:	39 ef                	cmp    edi,ebp
c001d2e2:	76 24                	jbe    c001d308 <__divdi3+0x74>
c001d2e4:	89 ea                	mov    edx,ebp
c001d2e6:	f7 f7                	div    edi
c001d2e8:	89 c1                	mov    ecx,eax
c001d2ea:	31 f6                	xor    esi,esi
c001d2ec:	89 c8                	mov    eax,ecx
c001d2ee:	89 f2                	mov    edx,esi
c001d2f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d2f4:	85 c9                	test   ecx,ecx
c001d2f6:	74 07                	je     c001d2ff <__divdi3+0x6b>
c001d2f8:	f7 d8                	neg    eax
c001d2fa:	83 d2 00             	adc    edx,0x0
c001d2fd:	f7 da                	neg    edx
c001d2ff:	83 c4 1c             	add    esp,0x1c
c001d302:	5b                   	pop    ebx
c001d303:	5e                   	pop    esi
c001d304:	5f                   	pop    edi
c001d305:	5d                   	pop    ebp
c001d306:	c3                   	ret    
c001d307:	90                   	nop
c001d308:	85 ff                	test   edi,edi
c001d30a:	75 0b                	jne    c001d317 <__divdi3+0x83>
c001d30c:	b8 01 00 00 00       	mov    eax,0x1
c001d311:	31 d2                	xor    edx,edx
c001d313:	f7 f3                	div    ebx
c001d315:	89 c7                	mov    edi,eax
c001d317:	31 d2                	xor    edx,edx
c001d319:	89 e8                	mov    eax,ebp
c001d31b:	f7 f7                	div    edi
c001d31d:	89 c6                	mov    esi,eax
c001d31f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d322:	f7 f7                	div    edi
c001d324:	89 c1                	mov    ecx,eax
c001d326:	eb c4                	jmp    c001d2ec <__divdi3+0x58>
c001d328:	39 eb                	cmp    ebx,ebp
c001d32a:	77 3c                	ja     c001d368 <__divdi3+0xd4>
c001d32c:	0f bd f3             	bsr    esi,ebx
c001d32f:	83 f6 1f             	xor    esi,0x1f
c001d332:	75 40                	jne    c001d374 <__divdi3+0xe0>
c001d334:	39 eb                	cmp    ebx,ebp
c001d336:	72 09                	jb     c001d341 <__divdi3+0xad>
c001d338:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001d33b:	0f 87 97 00 00 00    	ja     c001d3d8 <__divdi3+0x144>
c001d341:	b9 01 00 00 00       	mov    ecx,0x1
c001d346:	eb a4                	jmp    c001d2ec <__divdi3+0x58>
c001d348:	f7 d9                	neg    ecx
c001d34a:	83 d3 00             	adc    ebx,0x0
c001d34d:	f7 db                	neg    ebx
c001d34f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001d352:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001d356:	89 dd                	mov    ebp,ebx
c001d358:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001d360:	e9 5f ff ff ff       	jmp    c001d2c4 <__divdi3+0x30>
c001d365:	8d 76 00             	lea    esi,[esi+0x0]
c001d368:	31 f6                	xor    esi,esi
c001d36a:	31 c9                	xor    ecx,ecx
c001d36c:	e9 7b ff ff ff       	jmp    c001d2ec <__divdi3+0x58>
c001d371:	8d 76 00             	lea    esi,[esi+0x0]
c001d374:	b8 20 00 00 00       	mov    eax,0x20
c001d379:	29 f0                	sub    eax,esi
c001d37b:	89 f1                	mov    ecx,esi
c001d37d:	d3 e3                	shl    ebx,cl
c001d37f:	89 fa                	mov    edx,edi
c001d381:	88 c1                	mov    cl,al
c001d383:	d3 ea                	shr    edx,cl
c001d385:	09 da                	or     edx,ebx
c001d387:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d38b:	89 f1                	mov    ecx,esi
c001d38d:	d3 e7                	shl    edi,cl
c001d38f:	89 eb                	mov    ebx,ebp
c001d391:	88 c1                	mov    cl,al
c001d393:	d3 eb                	shr    ebx,cl
c001d395:	89 f1                	mov    ecx,esi
c001d397:	d3 e5                	shl    ebp,cl
c001d399:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001d39c:	88 c1                	mov    cl,al
c001d39e:	d3 ea                	shr    edx,cl
c001d3a0:	09 d5                	or     ebp,edx
c001d3a2:	89 e8                	mov    eax,ebp
c001d3a4:	89 da                	mov    edx,ebx
c001d3a6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001d3aa:	89 d3                	mov    ebx,edx
c001d3ac:	89 c5                	mov    ebp,eax
c001d3ae:	f7 e7                	mul    edi
c001d3b0:	39 d3                	cmp    ebx,edx
c001d3b2:	72 18                	jb     c001d3cc <__divdi3+0x138>
c001d3b4:	74 0a                	je     c001d3c0 <__divdi3+0x12c>
c001d3b6:	89 e9                	mov    ecx,ebp
c001d3b8:	31 f6                	xor    esi,esi
c001d3ba:	e9 2d ff ff ff       	jmp    c001d2ec <__divdi3+0x58>
c001d3bf:	90                   	nop
c001d3c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d3c3:	89 f1                	mov    ecx,esi
c001d3c5:	d3 e7                	shl    edi,cl
c001d3c7:	39 c7                	cmp    edi,eax
c001d3c9:	73 eb                	jae    c001d3b6 <__divdi3+0x122>
c001d3cb:	90                   	nop
c001d3cc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001d3cf:	31 f6                	xor    esi,esi
c001d3d1:	e9 16 ff ff ff       	jmp    c001d2ec <__divdi3+0x58>
c001d3d6:	66 90                	xchg   ax,ax
c001d3d8:	31 c9                	xor    ecx,ecx
c001d3da:	e9 0d ff ff ff       	jmp    c001d2ec <__divdi3+0x58>
c001d3df:	90                   	nop

c001d3e0 <__moddi3>:
c001d3e0:	55                   	push   ebp
c001d3e1:	57                   	push   edi
c001d3e2:	56                   	push   esi
c001d3e3:	53                   	push   ebx
c001d3e4:	83 ec 2c             	sub    esp,0x2c
c001d3e7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d3eb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001d3ef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d3f3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001d3f7:	85 db                	test   ebx,ebx
c001d3f9:	0f 88 85 00 00 00    	js     c001d484 <__moddi3+0xa4>
c001d3ff:	89 de                	mov    esi,ebx
c001d401:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d409:	89 d7                	mov    edi,edx
c001d40b:	85 d2                	test   edx,edx
c001d40d:	79 09                	jns    c001d418 <__moddi3+0x38>
c001d40f:	f7 d8                	neg    eax
c001d411:	83 d2 00             	adc    edx,0x0
c001d414:	f7 da                	neg    edx
c001d416:	89 d7                	mov    edi,edx
c001d418:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d41c:	89 cd                	mov    ebp,ecx
c001d41e:	85 ff                	test   edi,edi
c001d420:	75 52                	jne    c001d474 <__moddi3+0x94>
c001d422:	89 c3                	mov    ebx,eax
c001d424:	39 f0                	cmp    eax,esi
c001d426:	76 24                	jbe    c001d44c <__moddi3+0x6c>
c001d428:	89 c8                	mov    eax,ecx
c001d42a:	89 f2                	mov    edx,esi
c001d42c:	f7 f3                	div    ebx
c001d42e:	89 d6                	mov    esi,edx
c001d430:	89 f0                	mov    eax,esi
c001d432:	31 d2                	xor    edx,edx
c001d434:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d438:	85 c9                	test   ecx,ecx
c001d43a:	74 07                	je     c001d443 <__moddi3+0x63>
c001d43c:	f7 d8                	neg    eax
c001d43e:	83 d2 00             	adc    edx,0x0
c001d441:	f7 da                	neg    edx
c001d443:	83 c4 2c             	add    esp,0x2c
c001d446:	5b                   	pop    ebx
c001d447:	5e                   	pop    esi
c001d448:	5f                   	pop    edi
c001d449:	5d                   	pop    ebp
c001d44a:	c3                   	ret    
c001d44b:	90                   	nop
c001d44c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d450:	85 db                	test   ebx,ebx
c001d452:	75 0d                	jne    c001d461 <__moddi3+0x81>
c001d454:	b8 01 00 00 00       	mov    eax,0x1
c001d459:	31 d2                	xor    edx,edx
c001d45b:	f7 f7                	div    edi
c001d45d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d461:	89 f0                	mov    eax,esi
c001d463:	31 d2                	xor    edx,edx
c001d465:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d469:	f7 f7                	div    edi
c001d46b:	89 e8                	mov    eax,ebp
c001d46d:	f7 f7                	div    edi
c001d46f:	89 d6                	mov    esi,edx
c001d471:	eb bd                	jmp    c001d430 <__moddi3+0x50>
c001d473:	90                   	nop
c001d474:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d478:	39 f7                	cmp    edi,esi
c001d47a:	76 20                	jbe    c001d49c <__moddi3+0xbc>
c001d47c:	89 c8                	mov    eax,ecx
c001d47e:	89 f2                	mov    edx,esi
c001d480:	eb b2                	jmp    c001d434 <__moddi3+0x54>
c001d482:	66 90                	xchg   ax,ax
c001d484:	f7 d9                	neg    ecx
c001d486:	83 d3 00             	adc    ebx,0x0
c001d489:	f7 db                	neg    ebx
c001d48b:	89 de                	mov    esi,ebx
c001d48d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001d495:	e9 6f ff ff ff       	jmp    c001d409 <__moddi3+0x29>
c001d49a:	66 90                	xchg   ax,ax
c001d49c:	0f bd c7             	bsr    eax,edi
c001d49f:	83 f0 1f             	xor    eax,0x1f
c001d4a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d4a6:	75 24                	jne    c001d4cc <__moddi3+0xec>
c001d4a8:	39 f7                	cmp    edi,esi
c001d4aa:	72 06                	jb     c001d4b2 <__moddi3+0xd2>
c001d4ac:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001d4b0:	77 0c                	ja     c001d4be <__moddi3+0xde>
c001d4b2:	89 e9                	mov    ecx,ebp
c001d4b4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001d4b8:	19 fe                	sbb    esi,edi
c001d4ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d4be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4c2:	89 f2                	mov    edx,esi
c001d4c4:	e9 6b ff ff ff       	jmp    c001d434 <__moddi3+0x54>
c001d4c9:	8d 76 00             	lea    esi,[esi+0x0]
c001d4cc:	b8 20 00 00 00       	mov    eax,0x20
c001d4d1:	89 c2                	mov    edx,eax
c001d4d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d4d7:	29 da                	sub    edx,ebx
c001d4d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d4dd:	88 d9                	mov    cl,bl
c001d4df:	d3 e7                	shl    edi,cl
c001d4e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4e5:	88 d1                	mov    cl,dl
c001d4e7:	d3 e8                	shr    eax,cl
c001d4e9:	09 c7                	or     edi,eax
c001d4eb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001d4ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d4f3:	89 d8                	mov    eax,ebx
c001d4f5:	88 d9                	mov    cl,bl
c001d4f7:	d3 e7                	shl    edi,cl
c001d4f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d4fd:	89 f3                	mov    ebx,esi
c001d4ff:	88 d1                	mov    cl,dl
c001d501:	d3 eb                	shr    ebx,cl
c001d503:	89 c7                	mov    edi,eax
c001d505:	88 c1                	mov    cl,al
c001d507:	d3 e6                	shl    esi,cl
c001d509:	89 e8                	mov    eax,ebp
c001d50b:	88 d1                	mov    cl,dl
c001d50d:	d3 e8                	shr    eax,cl
c001d50f:	09 f0                	or     eax,esi
c001d511:	89 f9                	mov    ecx,edi
c001d513:	d3 e5                	shl    ebp,cl
c001d515:	89 da                	mov    edx,ebx
c001d517:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001d51b:	89 d3                	mov    ebx,edx
c001d51d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001d521:	89 c6                	mov    esi,eax
c001d523:	89 d1                	mov    ecx,edx
c001d525:	39 d3                	cmp    ebx,edx
c001d527:	72 27                	jb     c001d550 <__moddi3+0x170>
c001d529:	74 21                	je     c001d54c <__moddi3+0x16c>
c001d52b:	29 f5                	sub    ebp,esi
c001d52d:	19 cb                	sbb    ebx,ecx
c001d52f:	89 de                	mov    esi,ebx
c001d531:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001d535:	d3 e6                	shl    esi,cl
c001d537:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d53b:	89 f9                	mov    ecx,edi
c001d53d:	d3 ed                	shr    ebp,cl
c001d53f:	09 ee                	or     esi,ebp
c001d541:	89 f0                	mov    eax,esi
c001d543:	d3 eb                	shr    ebx,cl
c001d545:	89 da                	mov    edx,ebx
c001d547:	e9 e8 fe ff ff       	jmp    c001d434 <__moddi3+0x54>
c001d54c:	39 c5                	cmp    ebp,eax
c001d54e:	73 db                	jae    c001d52b <__moddi3+0x14b>
c001d550:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001d554:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001d558:	89 d1                	mov    ecx,edx
c001d55a:	89 c6                	mov    esi,eax
c001d55c:	eb cd                	jmp    c001d52b <__moddi3+0x14b>
c001d55e:	66 90                	xchg   ax,ax

c001d560 <__udivdi3>:
c001d560:	55                   	push   ebp
c001d561:	57                   	push   edi
c001d562:	56                   	push   esi
c001d563:	53                   	push   ebx
c001d564:	83 ec 1c             	sub    esp,0x1c
c001d567:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d56b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d56f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d573:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d577:	85 d2                	test   edx,edx
c001d579:	75 41                	jne    c001d5bc <__udivdi3+0x5c>
c001d57b:	39 f7                	cmp    edi,esi
c001d57d:	76 15                	jbe    c001d594 <__udivdi3+0x34>
c001d57f:	89 e8                	mov    eax,ebp
c001d581:	89 f2                	mov    edx,esi
c001d583:	f7 f7                	div    edi
c001d585:	31 db                	xor    ebx,ebx
c001d587:	89 da                	mov    edx,ebx
c001d589:	83 c4 1c             	add    esp,0x1c
c001d58c:	5b                   	pop    ebx
c001d58d:	5e                   	pop    esi
c001d58e:	5f                   	pop    edi
c001d58f:	5d                   	pop    ebp
c001d590:	c3                   	ret    
c001d591:	8d 76 00             	lea    esi,[esi+0x0]
c001d594:	89 f9                	mov    ecx,edi
c001d596:	85 ff                	test   edi,edi
c001d598:	75 0b                	jne    c001d5a5 <__udivdi3+0x45>
c001d59a:	b8 01 00 00 00       	mov    eax,0x1
c001d59f:	31 d2                	xor    edx,edx
c001d5a1:	f7 f7                	div    edi
c001d5a3:	89 c1                	mov    ecx,eax
c001d5a5:	31 d2                	xor    edx,edx
c001d5a7:	89 f0                	mov    eax,esi
c001d5a9:	f7 f1                	div    ecx
c001d5ab:	89 c3                	mov    ebx,eax
c001d5ad:	89 e8                	mov    eax,ebp
c001d5af:	f7 f1                	div    ecx
c001d5b1:	89 da                	mov    edx,ebx
c001d5b3:	83 c4 1c             	add    esp,0x1c
c001d5b6:	5b                   	pop    ebx
c001d5b7:	5e                   	pop    esi
c001d5b8:	5f                   	pop    edi
c001d5b9:	5d                   	pop    ebp
c001d5ba:	c3                   	ret    
c001d5bb:	90                   	nop
c001d5bc:	39 f2                	cmp    edx,esi
c001d5be:	77 1c                	ja     c001d5dc <__udivdi3+0x7c>
c001d5c0:	0f bd da             	bsr    ebx,edx
c001d5c3:	83 f3 1f             	xor    ebx,0x1f
c001d5c6:	75 24                	jne    c001d5ec <__udivdi3+0x8c>
c001d5c8:	39 f2                	cmp    edx,esi
c001d5ca:	72 08                	jb     c001d5d4 <__udivdi3+0x74>
c001d5cc:	39 ef                	cmp    edi,ebp
c001d5ce:	0f 87 84 00 00 00    	ja     c001d658 <__udivdi3+0xf8>
c001d5d4:	b8 01 00 00 00       	mov    eax,0x1
c001d5d9:	eb ac                	jmp    c001d587 <__udivdi3+0x27>
c001d5db:	90                   	nop
c001d5dc:	31 db                	xor    ebx,ebx
c001d5de:	31 c0                	xor    eax,eax
c001d5e0:	89 da                	mov    edx,ebx
c001d5e2:	83 c4 1c             	add    esp,0x1c
c001d5e5:	5b                   	pop    ebx
c001d5e6:	5e                   	pop    esi
c001d5e7:	5f                   	pop    edi
c001d5e8:	5d                   	pop    ebp
c001d5e9:	c3                   	ret    
c001d5ea:	66 90                	xchg   ax,ax
c001d5ec:	b8 20 00 00 00       	mov    eax,0x20
c001d5f1:	29 d8                	sub    eax,ebx
c001d5f3:	88 d9                	mov    cl,bl
c001d5f5:	d3 e2                	shl    edx,cl
c001d5f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d5fb:	89 fa                	mov    edx,edi
c001d5fd:	88 c1                	mov    cl,al
c001d5ff:	d3 ea                	shr    edx,cl
c001d601:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d605:	09 d1                	or     ecx,edx
c001d607:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d60b:	88 d9                	mov    cl,bl
c001d60d:	d3 e7                	shl    edi,cl
c001d60f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d613:	89 f7                	mov    edi,esi
c001d615:	88 c1                	mov    cl,al
c001d617:	d3 ef                	shr    edi,cl
c001d619:	88 d9                	mov    cl,bl
c001d61b:	d3 e6                	shl    esi,cl
c001d61d:	89 ea                	mov    edx,ebp
c001d61f:	88 c1                	mov    cl,al
c001d621:	d3 ea                	shr    edx,cl
c001d623:	09 d6                	or     esi,edx
c001d625:	89 f0                	mov    eax,esi
c001d627:	89 fa                	mov    edx,edi
c001d629:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001d62d:	89 d7                	mov    edi,edx
c001d62f:	89 c6                	mov    esi,eax
c001d631:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001d635:	39 d7                	cmp    edi,edx
c001d637:	72 13                	jb     c001d64c <__udivdi3+0xec>
c001d639:	74 09                	je     c001d644 <__udivdi3+0xe4>
c001d63b:	89 f0                	mov    eax,esi
c001d63d:	31 db                	xor    ebx,ebx
c001d63f:	e9 43 ff ff ff       	jmp    c001d587 <__udivdi3+0x27>
c001d644:	88 d9                	mov    cl,bl
c001d646:	d3 e5                	shl    ebp,cl
c001d648:	39 c5                	cmp    ebp,eax
c001d64a:	73 ef                	jae    c001d63b <__udivdi3+0xdb>
c001d64c:	8d 46 ff             	lea    eax,[esi-0x1]
c001d64f:	31 db                	xor    ebx,ebx
c001d651:	e9 31 ff ff ff       	jmp    c001d587 <__udivdi3+0x27>
c001d656:	66 90                	xchg   ax,ax
c001d658:	31 c0                	xor    eax,eax
c001d65a:	e9 28 ff ff ff       	jmp    c001d587 <__udivdi3+0x27>
c001d65f:	90                   	nop

c001d660 <__umoddi3>:
c001d660:	55                   	push   ebp
c001d661:	57                   	push   edi
c001d662:	56                   	push   esi
c001d663:	53                   	push   ebx
c001d664:	83 ec 1c             	sub    esp,0x1c
c001d667:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d66b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d66f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d673:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d677:	89 da                	mov    edx,ebx
c001d679:	85 c0                	test   eax,eax
c001d67b:	75 37                	jne    c001d6b4 <__umoddi3+0x54>
c001d67d:	39 df                	cmp    edi,ebx
c001d67f:	76 13                	jbe    c001d694 <__umoddi3+0x34>
c001d681:	89 f0                	mov    eax,esi
c001d683:	f7 f7                	div    edi
c001d685:	89 d0                	mov    eax,edx
c001d687:	31 d2                	xor    edx,edx
c001d689:	83 c4 1c             	add    esp,0x1c
c001d68c:	5b                   	pop    ebx
c001d68d:	5e                   	pop    esi
c001d68e:	5f                   	pop    edi
c001d68f:	5d                   	pop    ebp
c001d690:	c3                   	ret    
c001d691:	8d 76 00             	lea    esi,[esi+0x0]
c001d694:	89 fd                	mov    ebp,edi
c001d696:	85 ff                	test   edi,edi
c001d698:	75 0b                	jne    c001d6a5 <__umoddi3+0x45>
c001d69a:	b8 01 00 00 00       	mov    eax,0x1
c001d69f:	31 d2                	xor    edx,edx
c001d6a1:	f7 f7                	div    edi
c001d6a3:	89 c5                	mov    ebp,eax
c001d6a5:	89 d8                	mov    eax,ebx
c001d6a7:	31 d2                	xor    edx,edx
c001d6a9:	f7 f5                	div    ebp
c001d6ab:	89 f0                	mov    eax,esi
c001d6ad:	f7 f5                	div    ebp
c001d6af:	89 d0                	mov    eax,edx
c001d6b1:	eb d4                	jmp    c001d687 <__umoddi3+0x27>
c001d6b3:	90                   	nop
c001d6b4:	89 f1                	mov    ecx,esi
c001d6b6:	39 d8                	cmp    eax,ebx
c001d6b8:	76 0a                	jbe    c001d6c4 <__umoddi3+0x64>
c001d6ba:	89 f0                	mov    eax,esi
c001d6bc:	83 c4 1c             	add    esp,0x1c
c001d6bf:	5b                   	pop    ebx
c001d6c0:	5e                   	pop    esi
c001d6c1:	5f                   	pop    edi
c001d6c2:	5d                   	pop    ebp
c001d6c3:	c3                   	ret    
c001d6c4:	0f bd e8             	bsr    ebp,eax
c001d6c7:	83 f5 1f             	xor    ebp,0x1f
c001d6ca:	75 1c                	jne    c001d6e8 <__umoddi3+0x88>
c001d6cc:	39 d8                	cmp    eax,ebx
c001d6ce:	72 04                	jb     c001d6d4 <__umoddi3+0x74>
c001d6d0:	39 f7                	cmp    edi,esi
c001d6d2:	77 08                	ja     c001d6dc <__umoddi3+0x7c>
c001d6d4:	89 da                	mov    edx,ebx
c001d6d6:	29 fe                	sub    esi,edi
c001d6d8:	19 c2                	sbb    edx,eax
c001d6da:	89 f1                	mov    ecx,esi
c001d6dc:	89 c8                	mov    eax,ecx
c001d6de:	83 c4 1c             	add    esp,0x1c
c001d6e1:	5b                   	pop    ebx
c001d6e2:	5e                   	pop    esi
c001d6e3:	5f                   	pop    edi
c001d6e4:	5d                   	pop    ebp
c001d6e5:	c3                   	ret    
c001d6e6:	66 90                	xchg   ax,ax
c001d6e8:	ba 20 00 00 00       	mov    edx,0x20
c001d6ed:	29 ea                	sub    edx,ebp
c001d6ef:	89 e9                	mov    ecx,ebp
c001d6f1:	d3 e0                	shl    eax,cl
c001d6f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6f7:	89 f8                	mov    eax,edi
c001d6f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d6fd:	88 d1                	mov    cl,dl
c001d6ff:	d3 e8                	shr    eax,cl
c001d701:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d705:	09 c1                	or     ecx,eax
c001d707:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d70b:	89 e9                	mov    ecx,ebp
c001d70d:	d3 e7                	shl    edi,cl
c001d70f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d713:	89 d8                	mov    eax,ebx
c001d715:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d719:	88 d1                	mov    cl,dl
c001d71b:	d3 e8                	shr    eax,cl
c001d71d:	89 c7                	mov    edi,eax
c001d71f:	89 e9                	mov    ecx,ebp
c001d721:	d3 e3                	shl    ebx,cl
c001d723:	89 f0                	mov    eax,esi
c001d725:	88 d1                	mov    cl,dl
c001d727:	d3 e8                	shr    eax,cl
c001d729:	09 d8                	or     eax,ebx
c001d72b:	89 e9                	mov    ecx,ebp
c001d72d:	d3 e6                	shl    esi,cl
c001d72f:	89 f3                	mov    ebx,esi
c001d731:	89 fa                	mov    edx,edi
c001d733:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001d737:	89 d1                	mov    ecx,edx
c001d739:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001d73d:	89 c6                	mov    esi,eax
c001d73f:	89 d7                	mov    edi,edx
c001d741:	39 d1                	cmp    ecx,edx
c001d743:	72 27                	jb     c001d76c <__umoddi3+0x10c>
c001d745:	74 21                	je     c001d768 <__umoddi3+0x108>
c001d747:	89 ca                	mov    edx,ecx
c001d749:	29 f3                	sub    ebx,esi
c001d74b:	19 fa                	sbb    edx,edi
c001d74d:	89 d0                	mov    eax,edx
c001d74f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001d753:	d3 e0                	shl    eax,cl
c001d755:	89 e9                	mov    ecx,ebp
c001d757:	d3 eb                	shr    ebx,cl
c001d759:	09 d8                	or     eax,ebx
c001d75b:	d3 ea                	shr    edx,cl
c001d75d:	83 c4 1c             	add    esp,0x1c
c001d760:	5b                   	pop    ebx
c001d761:	5e                   	pop    esi
c001d762:	5f                   	pop    edi
c001d763:	5d                   	pop    ebp
c001d764:	c3                   	ret    
c001d765:	8d 76 00             	lea    esi,[esi+0x0]
c001d768:	39 c3                	cmp    ebx,eax
c001d76a:	73 db                	jae    c001d747 <__umoddi3+0xe7>
c001d76c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001d770:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001d774:	89 d7                	mov    edi,edx
c001d776:	89 c6                	mov    esi,eax
c001d778:	eb cd                	jmp    c001d747 <__umoddi3+0xe7>

Disassembly of section .init:

c001d77a <_init>:
c001d77a:	55                   	push   ebp
c001d77b:	89 e5                	mov    ebp,esp
c001d77d:	e8 96 29 fe ff       	call   c0000118 <frame_dummy>
c001d782:	e8 e5 fa ff ff       	call   c001d26c <__do_global_ctors_aux>
c001d787:	5d                   	pop    ebp
c001d788:	c3                   	ret    

Disassembly of section .fini:

c001d789 <_fini>:
c001d789:	55                   	push   ebp
c001d78a:	89 e5                	mov    ebp,esp
c001d78c:	e8 17 29 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001d791:	5d                   	pop    ebp
c001d792:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001d794 <Computer::~Computer()>:
c001d794:	83 ec 0c             	sub    esp,0xc
c001d797:	ba a0 ea 01 c0       	mov    edx,0xc001eaa0
c001d79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7a0:	89 10                	mov    DWORD PTR [eax],edx
c001d7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7a6:	83 ec 0c             	sub    esp,0xc
c001d7a9:	50                   	push   eax
c001d7aa:	e8 83 f4 fe ff       	call   c000cc32 <Device::~Device()>
c001d7af:	83 c4 10             	add    esp,0x10
c001d7b2:	90                   	nop
c001d7b3:	83 c4 0c             	add    esp,0xc
c001d7b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001d7b8 <Computer::~Computer()>:
c001d7b8:	83 ec 0c             	sub    esp,0xc
c001d7bb:	83 ec 0c             	sub    esp,0xc
c001d7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7c2:	e8 cd ff ff ff       	call   c001d794 <Computer::~Computer()>
c001d7c7:	83 c4 10             	add    esp,0x10
c001d7ca:	83 ec 08             	sub    esp,0x8
c001d7cd:	68 70 01 00 00       	push   0x170
c001d7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7d6:	e8 1f e0 fe ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001d7db:	83 c4 10             	add    esp,0x10
c001d7de:	83 c4 0c             	add    esp,0xc
c001d7e1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001d7e2 <idleCommon()>:
c001d7e2:	83 ec 0c             	sub    esp,0xc
c001d7e5:	fa                   	cli    
c001d7e6:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c001d7ec:	e8 a3 6f ff ff       	call   c0014794 <schedule()>
c001d7f1:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c001d7f6:	48                   	dec    eax
c001d7f7:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c001d7fc:	75 01                	jne    c001d7ff <idleCommon()+0x1d>
c001d7fe:	fb                   	sti    
c001d7ff:	83 c4 0c             	add    esp,0xc
c001d802:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001d804 <LinkedList<UnixFile>::~LinkedList()>:
c001d804:	90                   	nop
c001d805:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001d806 <LinkedList<UnixFile>::LinkedList()>:
c001d806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d80a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d814:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d81b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d81f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d82a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d834:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d83b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d83f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d846:	90                   	nop
c001d847:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001d848 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001d848:	83 ec 0c             	sub    esp,0xc
c001d84b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d850:	75 10                	jne    c001d862 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001d852:	83 ec 0c             	sub    esp,0xc
c001d855:	68 f4 ec 01 c0       	push   0xc001ecf4
c001d85a:	e8 e0 3b ff ff       	call   c001143f <Krnl::panic(char const*)>
c001d85f:	83 c4 10             	add    esp,0x10
c001d862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d866:	8b 00                	mov    eax,DWORD PTR [eax]
c001d868:	85 c0                	test   eax,eax
c001d86a:	74 34                	je     c001d8a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001d86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d870:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d873:	85 c0                	test   eax,eax
c001d875:	74 29                	je     c001d8a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001d877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d87b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d87e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d882:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d889:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d88d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d894:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d897:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d89e:	eb 65                	jmp    c001d905 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001d8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8a6:	85 c0                	test   eax,eax
c001d8a8:	75 4b                	jne    c001d8f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001d8aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d8b1:	85 c0                	test   eax,eax
c001d8b3:	75 40                	jne    c001d8f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001d8b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d8bd:	89 10                	mov    DWORD PTR [eax],edx
c001d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d8c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d8d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d8df:	85 c0                	test   eax,eax
c001d8e1:	74 22                	je     c001d905 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001d8e3:	83 ec 0c             	sub    esp,0xc
c001d8e6:	68 16 ed 01 c0       	push   0xc001ed16
c001d8eb:	e8 4f 3b ff ff       	call   c001143f <Krnl::panic(char const*)>
c001d8f0:	83 c4 10             	add    esp,0x10
c001d8f3:	eb 10                	jmp    c001d905 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001d8f5:	83 ec 0c             	sub    esp,0xc
c001d8f8:	68 20 ed 01 c0       	push   0xc001ed20
c001d8fd:	e8 3d 3b ff ff       	call   c001143f <Krnl::panic(char const*)>
c001d902:	83 c4 10             	add    esp,0x10
c001d905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d909:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d90c:	8d 50 01             	lea    edx,[eax+0x1]
c001d90f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d913:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d916:	90                   	nop
c001d917:	83 c4 0c             	add    esp,0xc
c001d91a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001d91c <LinkedList<UnixFile>::getFirstElement()>:
c001d91c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d920:	8b 00                	mov    eax,DWORD PTR [eax]
c001d922:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001d924 <LinkedList<UnixFile>::removeFirst()>:
c001d924:	83 ec 0c             	sub    esp,0xc
c001d927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d92b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d92d:	85 c0                	test   eax,eax
c001d92f:	75 12                	jne    c001d943 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001d931:	83 ec 0c             	sub    esp,0xc
c001d934:	68 2c ed 01 c0       	push   0xc001ed2c
c001d939:	e8 01 3b ff ff       	call   c001143f <Krnl::panic(char const*)>
c001d93e:	83 c4 10             	add    esp,0x10
c001d941:	eb 7e                	jmp    c001d9c1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001d943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d947:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d94a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d94d:	85 c0                	test   eax,eax
c001d94f:	74 10                	je     c001d961 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001d951:	83 ec 0c             	sub    esp,0xc
c001d954:	68 77 ed 01 c0       	push   0xc001ed77
c001d959:	e8 e1 3a ff ff       	call   c001143f <Krnl::panic(char const*)>
c001d95e:	83 c4 10             	add    esp,0x10
c001d961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d965:	8b 00                	mov    eax,DWORD PTR [eax]
c001d967:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d96a:	85 c0                	test   eax,eax
c001d96c:	75 33                	jne    c001d9a1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001d96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d972:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d97c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d987:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d98a:	83 f8 01             	cmp    eax,0x1
c001d98d:	74 21                	je     c001d9b0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001d98f:	83 ec 0c             	sub    esp,0xc
c001d992:	68 50 ed 01 c0       	push   0xc001ed50
c001d997:	e8 a3 3a ff ff       	call   c001143f <Krnl::panic(char const*)>
c001d99c:	83 c4 10             	add    esp,0x10
c001d99f:	eb 0f                	jmp    c001d9b0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001d9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9a7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9ae:	89 10                	mov    DWORD PTR [eax],edx
c001d9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d9b7:	8d 50 ff             	lea    edx,[eax-0x1]
c001d9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d9c1:	83 c4 0c             	add    esp,0xc
c001d9c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001d9c6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001d9c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d9ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d9cd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001d9ce <DriverlessDevice::~DriverlessDevice()>:
c001d9ce:	ba bc f3 01 c0       	mov    edx,0xc001f3bc
c001d9d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9d7:	89 10                	mov    DWORD PTR [eax],edx
c001d9d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9dd:	50                   	push   eax
c001d9de:	e8 4f f2 fe ff       	call   c000cc32 <Device::~Device()>
c001d9e3:	83 c4 04             	add    esp,0x4
c001d9e6:	90                   	nop
c001d9e7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001d9e8 <DriverlessDevice::~DriverlessDevice()>:
c001d9e8:	83 ec 0c             	sub    esp,0xc
c001d9eb:	83 ec 0c             	sub    esp,0xc
c001d9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9f2:	e8 d7 ff ff ff       	call   c001d9ce <DriverlessDevice::~DriverlessDevice()>
c001d9f7:	83 c4 10             	add    esp,0x10
c001d9fa:	83 ec 08             	sub    esp,0x8
c001d9fd:	68 58 01 00 00       	push   0x158
c001da02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da06:	e8 ef dd fe ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001da0b:	83 c4 10             	add    esp,0x10
c001da0e:	83 c4 0c             	add    esp,0xc
c001da11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001da12 <LinkedList<Device>::addElement(Device*)>:
c001da12:	83 ec 0c             	sub    esp,0xc
c001da15:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001da1a:	75 10                	jne    c001da2c <LinkedList<Device>::addElement(Device*)+0x1a>
c001da1c:	83 ec 0c             	sub    esp,0xc
c001da1f:	68 f4 ec 01 c0       	push   0xc001ecf4
c001da24:	e8 16 3a ff ff       	call   c001143f <Krnl::panic(char const*)>
c001da29:	83 c4 10             	add    esp,0x10
c001da2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da30:	8b 00                	mov    eax,DWORD PTR [eax]
c001da32:	85 c0                	test   eax,eax
c001da34:	74 3a                	je     c001da70 <LinkedList<Device>::addElement(Device*)+0x5e>
c001da36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001da3d:	85 c0                	test   eax,eax
c001da3f:	74 2f                	je     c001da70 <LinkedList<Device>::addElement(Device*)+0x5e>
c001da41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001da48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da4c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001da52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da5a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001da5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001da64:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001da6e:	eb 68                	jmp    c001dad8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001da70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da74:	8b 00                	mov    eax,DWORD PTR [eax]
c001da76:	85 c0                	test   eax,eax
c001da78:	75 4e                	jne    c001dac8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001da7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001da81:	85 c0                	test   eax,eax
c001da83:	75 43                	jne    c001dac8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001da85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da8d:	89 10                	mov    DWORD PTR [eax],edx
c001da8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001da9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001daa1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001daab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dab2:	85 c0                	test   eax,eax
c001dab4:	74 22                	je     c001dad8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001dab6:	83 ec 0c             	sub    esp,0xc
c001dab9:	68 16 ed 01 c0       	push   0xc001ed16
c001dabe:	e8 7c 39 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001dac3:	83 c4 10             	add    esp,0x10
c001dac6:	eb 10                	jmp    c001dad8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001dac8:	83 ec 0c             	sub    esp,0xc
c001dacb:	68 20 ed 01 c0       	push   0xc001ed20
c001dad0:	e8 6a 39 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001dad5:	83 c4 10             	add    esp,0x10
c001dad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dadc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dadf:	8d 50 01             	lea    edx,[eax+0x1]
c001dae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dae6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dae9:	90                   	nop
c001daea:	83 c4 0c             	add    esp,0xc
c001daed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001daee <LinkedList<Device>::LinkedList()>:
c001daee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001daf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001daf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dafc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001db03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001db0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001db18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001db23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001db2e:	90                   	nop
c001db2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001db30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001db30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db34:	8b 00                	mov    eax,DWORD PTR [eax]
c001db36:	85 c0                	test   eax,eax
c001db38:	75 0e                	jne    c001db48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001db3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001db41:	85 c0                	test   eax,eax
c001db43:	75 03                	jne    c001db48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001db45:	b0 01                	mov    al,0x1
c001db47:	c3                   	ret    
c001db48:	b0 00                	mov    al,0x0
c001db4a:	90                   	nop
c001db4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001db4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001db4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db50:	8b 00                	mov    eax,DWORD PTR [eax]
c001db52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001db54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001db54:	83 ec 0c             	sub    esp,0xc
c001db57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001db5d:	85 c0                	test   eax,eax
c001db5f:	75 17                	jne    c001db78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001db61:	83 ec 0c             	sub    esp,0xc
c001db64:	68 2c ed 01 c0       	push   0xc001ed2c
c001db69:	e8 d1 38 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001db6e:	83 c4 10             	add    esp,0x10
c001db71:	e9 92 00 00 00       	jmp    c001dc08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001db76:	66 90                	xchg   ax,ax
c001db78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001db7f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001db82:	85 c0                	test   eax,eax
c001db84:	0f 95 c0             	setne  al
c001db87:	84 c0                	test   al,al
c001db89:	74 11                	je     c001db9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001db8b:	83 ec 0c             	sub    esp,0xc
c001db8e:	68 77 ed 01 c0       	push   0xc001ed77
c001db93:	e8 a7 38 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001db98:	83 c4 10             	add    esp,0x10
c001db9b:	90                   	nop
c001db9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dba0:	8b 00                	mov    eax,DWORD PTR [eax]
c001dba2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001dba5:	85 c0                	test   eax,eax
c001dba7:	0f 94 c0             	sete   al
c001dbaa:	84 c0                	test   al,al
c001dbac:	74 36                	je     c001dbe4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001dbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dbc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dbca:	83 f8 01             	cmp    eax,0x1
c001dbcd:	74 25                	je     c001dbf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001dbcf:	83 ec 0c             	sub    esp,0xc
c001dbd2:	68 50 ed 01 c0       	push   0xc001ed50
c001dbd7:	e8 63 38 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001dbdc:	83 c4 10             	add    esp,0x10
c001dbdf:	eb 13                	jmp    c001dbf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001dbe1:	8d 76 00             	lea    esi,[esi+0x0]
c001dbe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbe8:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001dbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf1:	89 10                	mov    DWORD PTR [eax],edx
c001dbf3:	90                   	nop
c001dbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dbfb:	8d 50 ff             	lea    edx,[eax-0x1]
c001dbfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dc05:	8d 76 00             	lea    esi,[esi+0x0]
c001dc08:	83 c4 0c             	add    esp,0xc
c001dc0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001dc0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001dc0c:	83 ec 0c             	sub    esp,0xc
c001dc0f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001dc14:	75 12                	jne    c001dc28 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001dc16:	83 ec 0c             	sub    esp,0xc
c001dc19:	68 f4 ec 01 c0       	push   0xc001ecf4
c001dc1e:	e8 1c 38 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001dc23:	83 c4 10             	add    esp,0x10
c001dc26:	66 90                	xchg   ax,ax
c001dc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc2e:	85 c0                	test   eax,eax
c001dc30:	74 36                	je     c001dc68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001dc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc39:	85 c0                	test   eax,eax
c001dc3b:	74 2b                	je     c001dc68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001dc3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc48:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001dc4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dc56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc5d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dc64:	eb 6a                	jmp    c001dcd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001dc66:	66 90                	xchg   ax,ax
c001dc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc6e:	85 c0                	test   eax,eax
c001dc70:	75 4e                	jne    c001dcc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001dc72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc79:	85 c0                	test   eax,eax
c001dc7b:	75 43                	jne    c001dcc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001dc7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc85:	89 10                	mov    DWORD PTR [eax],edx
c001dc87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc99:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dca7:	85 c0                	test   eax,eax
c001dca9:	74 25                	je     c001dcd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001dcab:	83 ec 0c             	sub    esp,0xc
c001dcae:	68 16 ed 01 c0       	push   0xc001ed16
c001dcb3:	e8 87 37 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001dcb8:	83 c4 10             	add    esp,0x10
c001dcbb:	eb 13                	jmp    c001dcd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001dcbd:	8d 76 00             	lea    esi,[esi+0x0]
c001dcc0:	83 ec 0c             	sub    esp,0xc
c001dcc3:	68 20 ed 01 c0       	push   0xc001ed20
c001dcc8:	e8 72 37 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001dccd:	83 c4 10             	add    esp,0x10
c001dcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dcd7:	8d 50 01             	lea    edx,[eax+0x1]
c001dcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcde:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dce1:	90                   	nop
c001dce2:	83 c4 0c             	add    esp,0xc
c001dce5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001dce8 <ACPI::~ACPI()>:
c001dce8:	83 ec 0c             	sub    esp,0xc
c001dceb:	ba 24 f9 01 c0       	mov    edx,0xc001f924
c001dcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf4:	89 10                	mov    DWORD PTR [eax],edx
c001dcf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcfa:	83 ec 0c             	sub    esp,0xc
c001dcfd:	50                   	push   eax
c001dcfe:	e8 2f ef fe ff       	call   c000cc32 <Device::~Device()>
c001dd03:	83 c4 10             	add    esp,0x10
c001dd06:	90                   	nop
c001dd07:	83 c4 0c             	add    esp,0xc
c001dd0a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001dd0c <ACPI::~ACPI()>:
c001dd0c:	83 ec 0c             	sub    esp,0xc
c001dd0f:	83 ec 0c             	sub    esp,0xc
c001dd12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd16:	e8 cd ff ff ff       	call   c001dce8 <ACPI::~ACPI()>
c001dd1b:	83 c4 10             	add    esp,0x10
c001dd1e:	83 ec 08             	sub    esp,0x8
c001dd21:	68 64 12 00 00       	push   0x1264
c001dd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd2a:	e8 cb da fe ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001dd2f:	83 c4 10             	add    esp,0x10
c001dd32:	83 c4 0c             	add    esp,0xc
c001dd35:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001dd38 <LinkedList<Device>::~LinkedList()>:
c001dd38:	90                   	nop
c001dd39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001dd3c <LinkedList<Device>::isEmpty()>:
c001dd3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd40:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd42:	85 c0                	test   eax,eax
c001dd44:	75 0e                	jne    c001dd54 <LinkedList<Device>::isEmpty()+0x18>
c001dd46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd4d:	85 c0                	test   eax,eax
c001dd4f:	75 03                	jne    c001dd54 <LinkedList<Device>::isEmpty()+0x18>
c001dd51:	b0 01                	mov    al,0x1
c001dd53:	c3                   	ret    
c001dd54:	b0 00                	mov    al,0x0
c001dd56:	90                   	nop
c001dd57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001dd58 <LinkedList<Device>::getFirstElement()>:
c001dd58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd5e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001dd60 <LinkedList<Device>::removeFirst()>:
c001dd60:	83 ec 0c             	sub    esp,0xc
c001dd63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd67:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd69:	85 c0                	test   eax,eax
c001dd6b:	75 17                	jne    c001dd84 <LinkedList<Device>::removeFirst()+0x24>
c001dd6d:	83 ec 0c             	sub    esp,0xc
c001dd70:	68 2c ed 01 c0       	push   0xc001ed2c
c001dd75:	e8 c5 36 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001dd7a:	83 c4 10             	add    esp,0x10
c001dd7d:	e9 92 00 00 00       	jmp    c001de14 <LinkedList<Device>::removeFirst()+0xb4>
c001dd82:	66 90                	xchg   ax,ax
c001dd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd8b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001dd91:	85 c0                	test   eax,eax
c001dd93:	74 13                	je     c001dda8 <LinkedList<Device>::removeFirst()+0x48>
c001dd95:	83 ec 0c             	sub    esp,0xc
c001dd98:	68 77 ed 01 c0       	push   0xc001ed77
c001dd9d:	e8 9d 36 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001dda2:	83 c4 10             	add    esp,0x10
c001dda5:	8d 76 00             	lea    esi,[esi+0x0]
c001dda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddac:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddae:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ddb4:	85 c0                	test   eax,eax
c001ddb6:	75 34                	jne    c001ddec <LinkedList<Device>::removeFirst()+0x8c>
c001ddb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ddc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ddcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ddd4:	83 f8 01             	cmp    eax,0x1
c001ddd7:	74 27                	je     c001de00 <LinkedList<Device>::removeFirst()+0xa0>
c001ddd9:	83 ec 0c             	sub    esp,0xc
c001dddc:	68 50 ed 01 c0       	push   0xc001ed50
c001dde1:	e8 59 36 ff ff       	call   c001143f <Krnl::panic(char const*)>
c001dde6:	83 c4 10             	add    esp,0x10
c001dde9:	eb 15                	jmp    c001de00 <LinkedList<Device>::removeFirst()+0xa0>
c001ddeb:	90                   	nop
c001ddec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddf2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ddf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddfc:	89 10                	mov    DWORD PTR [eax],edx
c001ddfe:	66 90                	xchg   ax,ax
c001de00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001de07:	8d 50 ff             	lea    edx,[eax-0x1]
c001de0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001de11:	8d 76 00             	lea    esi,[esi+0x0]
c001de14:	83 c4 0c             	add    esp,0xc
c001de17:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001de18 <CPU::~CPU()>:
c001de18:	83 ec 0c             	sub    esp,0xc
c001de1b:	ba c0 fa 01 c0       	mov    edx,0xc001fac0
c001de20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de24:	89 10                	mov    DWORD PTR [eax],edx
c001de26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de2a:	83 ec 0c             	sub    esp,0xc
c001de2d:	50                   	push   eax
c001de2e:	e8 ff ed fe ff       	call   c000cc32 <Device::~Device()>
c001de33:	83 c4 10             	add    esp,0x10
c001de36:	90                   	nop
c001de37:	83 c4 0c             	add    esp,0xc
c001de3a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001de3c <CPU::~CPU()>:
c001de3c:	83 ec 0c             	sub    esp,0xc
c001de3f:	83 ec 0c             	sub    esp,0xc
c001de42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de46:	e8 cd ff ff ff       	call   c001de18 <CPU::~CPU()>
c001de4b:	83 c4 10             	add    esp,0x10
c001de4e:	83 ec 08             	sub    esp,0x8
c001de51:	68 94 11 00 00       	push   0x1194
c001de56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de5a:	e8 9b d9 fe ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001de5f:	83 c4 10             	add    esp,0x10
c001de62:	83 c4 0c             	add    esp,0xc
c001de65:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001de68 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001de68:	90                   	nop
c001de69:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001de6c <ThreadControlBlock::ThreadControlBlock()>:
c001de6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de70:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001de77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de7b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001de82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de86:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001de8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de91:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001de98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de9c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001dea3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dea7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001deab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001deaf:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001deb3:	90                   	nop
c001deb4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001deb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001deb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001debc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dec6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001decd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ded1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ded8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dedc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dee6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001deed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001def1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001def8:	90                   	nop
c001def9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001defc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001defc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001df00:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001df03:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001df04 <PCI::~PCI()>:
c001df04:	83 ec 0c             	sub    esp,0xc
c001df07:	ba a0 05 02 c0       	mov    edx,0xc00205a0
c001df0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df10:	89 10                	mov    DWORD PTR [eax],edx
c001df12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df16:	83 ec 0c             	sub    esp,0xc
c001df19:	50                   	push   eax
c001df1a:	e8 9d e7 fe ff       	call   c000c6bc <Bus::~Bus()>
c001df1f:	83 c4 10             	add    esp,0x10
c001df22:	90                   	nop
c001df23:	83 c4 0c             	add    esp,0xc
c001df26:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001df28 <PCI::~PCI()>:
c001df28:	83 ec 0c             	sub    esp,0xc
c001df2b:	83 ec 0c             	sub    esp,0xc
c001df2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df32:	e8 cd ff ff ff       	call   c001df04 <PCI::~PCI()>
c001df37:	83 c4 10             	add    esp,0x10
c001df3a:	83 ec 08             	sub    esp,0x8
c001df3d:	68 5c 01 00 00       	push   0x15c
c001df42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df46:	e8 af d8 fe ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001df4b:	83 c4 10             	add    esp,0x10
c001df4e:	83 c4 0c             	add    esp,0xc
c001df51:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001df52 <IDE::~IDE()>:
c001df52:	83 ec 0c             	sub    esp,0xc
c001df55:	ba 54 06 02 c0       	mov    edx,0xc0020654
c001df5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df5e:	89 10                	mov    DWORD PTR [eax],edx
c001df60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df64:	83 ec 0c             	sub    esp,0xc
c001df67:	50                   	push   eax
c001df68:	e8 3f f1 fe ff       	call   c000d0ac <HardDiskController::~HardDiskController()>
c001df6d:	83 c4 10             	add    esp,0x10
c001df70:	90                   	nop
c001df71:	83 c4 0c             	add    esp,0xc
c001df74:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001df76 <IDE::~IDE()>:
c001df76:	83 ec 0c             	sub    esp,0xc
c001df79:	83 ec 0c             	sub    esp,0xc
c001df7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df80:	e8 cd ff ff ff       	call   c001df52 <IDE::~IDE()>
c001df85:	83 c4 10             	add    esp,0x10
c001df88:	83 ec 08             	sub    esp,0x8
c001df8b:	68 70 02 00 00       	push   0x270
c001df90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df94:	e8 61 d8 fe ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001df99:	83 c4 10             	add    esp,0x10
c001df9c:	83 c4 0c             	add    esp,0xc
c001df9f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001dfa0 <SATABus::~SATABus()>:
c001dfa0:	83 ec 0c             	sub    esp,0xc
c001dfa3:	ba a4 06 02 c0       	mov    edx,0xc00206a4
c001dfa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfac:	89 10                	mov    DWORD PTR [eax],edx
c001dfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfb2:	83 ec 0c             	sub    esp,0xc
c001dfb5:	50                   	push   eax
c001dfb6:	e8 f1 f0 fe ff       	call   c000d0ac <HardDiskController::~HardDiskController()>
c001dfbb:	83 c4 10             	add    esp,0x10
c001dfbe:	90                   	nop
c001dfbf:	83 c4 0c             	add    esp,0xc
c001dfc2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001dfc4 <SATABus::~SATABus()>:
c001dfc4:	83 ec 0c             	sub    esp,0xc
c001dfc7:	83 ec 0c             	sub    esp,0xc
c001dfca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfce:	e8 cd ff ff ff       	call   c001dfa0 <SATABus::~SATABus()>
c001dfd3:	83 c4 10             	add    esp,0x10
c001dfd6:	83 ec 08             	sub    esp,0x8
c001dfd9:	68 64 01 00 00       	push   0x164
c001dfde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfe2:	e8 13 d8 fe ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001dfe7:	83 c4 10             	add    esp,0x10
c001dfea:	83 c4 0c             	add    esp,0xc
c001dfed:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001dfee <ATA::~ATA()>:
c001dfee:	83 ec 0c             	sub    esp,0xc
c001dff1:	ba e4 06 02 c0       	mov    edx,0xc00206e4
c001dff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dffa:	89 10                	mov    DWORD PTR [eax],edx
c001dffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e000:	83 ec 0c             	sub    esp,0xc
c001e003:	50                   	push   eax
c001e004:	e8 85 f1 fe ff       	call   c000d18e <PhysicalDisk::~PhysicalDisk()>
c001e009:	83 c4 10             	add    esp,0x10
c001e00c:	90                   	nop
c001e00d:	83 c4 0c             	add    esp,0xc
c001e010:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001e012 <ATA::~ATA()>:
c001e012:	83 ec 0c             	sub    esp,0xc
c001e015:	83 ec 0c             	sub    esp,0xc
c001e018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e01c:	e8 cd ff ff ff       	call   c001dfee <ATA::~ATA()>
c001e021:	83 c4 10             	add    esp,0x10
c001e024:	83 ec 08             	sub    esp,0x8
c001e027:	68 7c 01 00 00       	push   0x17c
c001e02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e030:	e8 c5 d7 fe ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001e035:	83 c4 10             	add    esp,0x10
c001e038:	83 c4 0c             	add    esp,0xc
c001e03b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001e03c <ATAPI::~ATAPI()>:
c001e03c:	83 ec 0c             	sub    esp,0xc
c001e03f:	ba 2c 07 02 c0       	mov    edx,0xc002072c
c001e044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e048:	89 10                	mov    DWORD PTR [eax],edx
c001e04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e04e:	83 ec 0c             	sub    esp,0xc
c001e051:	50                   	push   eax
c001e052:	e8 37 f1 fe ff       	call   c000d18e <PhysicalDisk::~PhysicalDisk()>
c001e057:	83 c4 10             	add    esp,0x10
c001e05a:	90                   	nop
c001e05b:	83 c4 0c             	add    esp,0xc
c001e05e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001e060 <ATAPI::~ATAPI()>:
c001e060:	83 ec 0c             	sub    esp,0xc
c001e063:	83 ec 0c             	sub    esp,0xc
c001e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e06a:	e8 cd ff ff ff       	call   c001e03c <ATAPI::~ATAPI()>
c001e06f:	83 c4 10             	add    esp,0x10
c001e072:	83 ec 08             	sub    esp,0x8
c001e075:	68 84 01 00 00       	push   0x184
c001e07a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e07e:	e8 77 d7 fe ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001e083:	83 c4 10             	add    esp,0x10
c001e086:	83 c4 0c             	add    esp,0xc
c001e089:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001e08a <SATA::~SATA()>:
c001e08a:	83 ec 0c             	sub    esp,0xc
c001e08d:	ba e0 07 02 c0       	mov    edx,0xc00207e0
c001e092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e096:	89 10                	mov    DWORD PTR [eax],edx
c001e098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e09c:	83 ec 0c             	sub    esp,0xc
c001e09f:	50                   	push   eax
c001e0a0:	e8 e9 f0 fe ff       	call   c000d18e <PhysicalDisk::~PhysicalDisk()>
c001e0a5:	83 c4 10             	add    esp,0x10
c001e0a8:	90                   	nop
c001e0a9:	83 c4 0c             	add    esp,0xc
c001e0ac:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001e0ae <SATA::~SATA()>:
c001e0ae:	83 ec 0c             	sub    esp,0xc
c001e0b1:	83 ec 0c             	sub    esp,0xc
c001e0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0b8:	e8 cd ff ff ff       	call   c001e08a <SATA::~SATA()>
c001e0bd:	83 c4 10             	add    esp,0x10
c001e0c0:	83 ec 08             	sub    esp,0x8
c001e0c3:	68 7c 01 00 00       	push   0x17c
c001e0c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0cc:	e8 29 d7 fe ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001e0d1:	83 c4 10             	add    esp,0x10
c001e0d4:	83 c4 0c             	add    esp,0xc
c001e0d7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001e0d8 <SATAPI::~SATAPI()>:
c001e0d8:	83 ec 0c             	sub    esp,0xc
c001e0db:	ba 70 09 02 c0       	mov    edx,0xc0020970
c001e0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0e4:	89 10                	mov    DWORD PTR [eax],edx
c001e0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0ea:	83 ec 0c             	sub    esp,0xc
c001e0ed:	50                   	push   eax
c001e0ee:	e8 9b f0 fe ff       	call   c000d18e <PhysicalDisk::~PhysicalDisk()>
c001e0f3:	83 c4 10             	add    esp,0x10
c001e0f6:	90                   	nop
c001e0f7:	83 c4 0c             	add    esp,0xc
c001e0fa:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001e0fc <SATAPI::~SATAPI()>:
c001e0fc:	83 ec 0c             	sub    esp,0xc
c001e0ff:	83 ec 0c             	sub    esp,0xc
c001e102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e106:	e8 cd ff ff ff       	call   c001e0d8 <SATAPI::~SATAPI()>
c001e10b:	83 c4 10             	add    esp,0x10
c001e10e:	83 ec 08             	sub    esp,0x8
c001e111:	68 84 01 00 00       	push   0x184
c001e116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e11a:	e8 db d6 fe ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001e11f:	83 c4 10             	add    esp,0x10
c001e122:	83 c4 0c             	add    esp,0xc
c001e125:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001e126 <IOAPIC::~IOAPIC()>:
c001e126:	83 ec 0c             	sub    esp,0xc
c001e129:	ba b0 09 02 c0       	mov    edx,0xc00209b0
c001e12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e132:	89 10                	mov    DWORD PTR [eax],edx
c001e134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e138:	83 ec 0c             	sub    esp,0xc
c001e13b:	50                   	push   eax
c001e13c:	e8 f1 ea fe ff       	call   c000cc32 <Device::~Device()>
c001e141:	83 c4 10             	add    esp,0x10
c001e144:	90                   	nop
c001e145:	83 c4 0c             	add    esp,0xc
c001e148:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001e14a <IOAPIC::~IOAPIC()>:
c001e14a:	83 ec 0c             	sub    esp,0xc
c001e14d:	83 ec 0c             	sub    esp,0xc
c001e150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e154:	e8 cd ff ff ff       	call   c001e126 <IOAPIC::~IOAPIC()>
c001e159:	83 c4 10             	add    esp,0x10
c001e15c:	83 ec 08             	sub    esp,0x8
c001e15f:	68 68 01 00 00       	push   0x168
c001e164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e168:	e8 8d d6 fe ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001e16d:	83 c4 10             	add    esp,0x10
c001e170:	83 c4 0c             	add    esp,0xc
c001e173:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001e174 <APICTimer::~APICTimer()>:
c001e174:	83 ec 0c             	sub    esp,0xc
c001e177:	ba f8 09 02 c0       	mov    edx,0xc00209f8
c001e17c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e180:	89 10                	mov    DWORD PTR [eax],edx
c001e182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e186:	83 ec 0c             	sub    esp,0xc
c001e189:	50                   	push   eax
c001e18a:	e8 a1 03 ff ff       	call   c000e530 <Timer::~Timer()>
c001e18f:	83 c4 10             	add    esp,0x10
c001e192:	90                   	nop
c001e193:	83 c4 0c             	add    esp,0xc
c001e196:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001e198 <APICTimer::~APICTimer()>:
c001e198:	83 ec 0c             	sub    esp,0xc
c001e19b:	83 ec 0c             	sub    esp,0xc
c001e19e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1a2:	e8 cd ff ff ff       	call   c001e174 <APICTimer::~APICTimer()>
c001e1a7:	83 c4 10             	add    esp,0x10
c001e1aa:	83 ec 08             	sub    esp,0x8
c001e1ad:	68 60 01 00 00       	push   0x160
c001e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1b6:	e8 3f d6 fe ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001e1bb:	83 c4 10             	add    esp,0x10
c001e1be:	83 c4 0c             	add    esp,0xc
c001e1c1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001e1c4 <PIT::~PIT()>:
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	ba 48 0a 02 c0       	mov    edx,0xc0020a48
c001e1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d0:	89 10                	mov    DWORD PTR [eax],edx
c001e1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d6:	83 ec 0c             	sub    esp,0xc
c001e1d9:	50                   	push   eax
c001e1da:	e8 51 03 ff ff       	call   c000e530 <Timer::~Timer()>
c001e1df:	83 c4 10             	add    esp,0x10
c001e1e2:	90                   	nop
c001e1e3:	83 c4 0c             	add    esp,0xc
c001e1e6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001e1e8 <PIT::~PIT()>:
c001e1e8:	83 ec 0c             	sub    esp,0xc
c001e1eb:	83 ec 0c             	sub    esp,0xc
c001e1ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1f2:	e8 cd ff ff ff       	call   c001e1c4 <PIT::~PIT()>
c001e1f7:	83 c4 10             	add    esp,0x10
c001e1fa:	83 ec 08             	sub    esp,0x8
c001e1fd:	68 5c 01 00 00       	push   0x15c
c001e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e206:	e8 ef d5 fe ff       	call   c000b7fa <operator delete(void*, unsigned long)>
c001e20b:	83 c4 10             	add    esp,0x10
c001e20e:	83 c4 0c             	add    esp,0xc
c001e211:	c3                   	ret    
