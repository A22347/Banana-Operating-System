
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 07 6c 00 00       	call   c0006c27 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 55 b8 01 00       	call   c001b87a <_init>
c0000025:	c3                   	ret    
c0000026:	bb 16 c3 01 c0       	mov    ebx,0xc001c316
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 20 c3 01 c0    	cmp    ebx,0xc001c320
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 ee 01 c0       	mov    eax,0xc001ee58
c0000049:	3d 58 ee 01 c0       	cmp    eax,0xc001ee58
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 ee 01 c0       	push   0xc001ee58
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 ee 01 c0       	mov    eax,0xc001ee58
c0000075:	2d 58 ee 01 c0       	sub    eax,0xc001ee58
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 ee 01 c0       	push   0xc001ee58
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e0 ef 01 c0 00 	cmp    BYTE PTR ds:0xc001efe0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 28 c3 01 c0       	mov    ebx,0xc001c328
c00000bb:	81 eb 24 c3 01 c0    	sub    ebx,0xc001c324
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 24 c3 01 c0       	mov    esi,0xc001c324
c00000ca:	a1 e4 ef 01 c0       	mov    eax,ds:0xc001efe4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 e4 ef 01 c0       	mov    ds:0xc001efe4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 e4 ef 01 c0       	mov    eax,ds:0xc001efe4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 ee 01 c0       	push   0xc001ee58
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e0 ef 01 c0 01 	mov    BYTE PTR ds:0xc001efe0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 e8 ef 01 c0       	push   0xc001efe8
c000012c:	68 58 ee 01 c0       	push   0xc001ee58
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 84 1e 01 00       	call   c0012154 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 08 94 00 00       	call   c00096f0 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 62 1e 01 00       	call   c0012154 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 33 23 01 00       	call   c0012644 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 82 29 01 00       	call   c0012c9c <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 30 f4 01 c0 	lgdtd  ds:0xc001f430
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 4d 58 00 00       	jmp    c0005bef <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 00 f0 01 c0       	mov    ds:0xc001f000,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 00 f0 01 c0    	mov    DWORD PTR ds:0xc001f000,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 00 f0 01 c0    	mov    ebx,DWORD PTR ds:0xc001f000
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 40 c3 01 c0 02 	test   BYTE PTR [edx-0x3ffe3cc0],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 40 c3 01 c0 01 	test   BYTE PTR [edx-0x3ffe3cc0],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 40 c3 01 c0 08 	test   BYTE PTR [edx-0x3ffe3cc0],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 40 c3 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3cc0],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 40 c3 01 c0 01 	test   BYTE PTR [edx-0x3ffe3cc0],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 20 f0 01 c0    	mov    ecx,DWORD PTR ds:0xc001f020
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 20 f0 01 c0    	mov    DWORD PTR ds:0xc001f020,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 24 f0 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0fdc]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 24 f0 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0fdc],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 20 f0 01 c0    	mov    DWORD PTR ds:0xc001f020,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 4c f0 01 c0    	cmp    DWORD PTR ds:0xc001f04c,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d 5c f0 01 c0    	mov    ecx,DWORD PTR ds:0xc001f05c
c0000d5d:	c7 42 0c 54 f0 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f054
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 5c f0 01 c0    	mov    DWORD PTR ds:0xc001f05c,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 4c f0 01 c0    	mov    DWORD PTR ds:0xc001f04c,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 20 f0 01 c0 02 	test   BYTE PTR ds:0xc001f020,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 fa 5b 00 00       	call   c0006a38 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 3c 5b 00 00       	call   c0006a38 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 26 5b 00 00       	call   c0006a38 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 02 5b 00 00       	call   c0006a38 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 20 f0 01 c0    	mov    edi,DWORD PTR ds:0xc001f020
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 24 f0 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0fdc]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 24 f0 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0fdc],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 54 f0 01 c0 	lea    edx,[eax*8-0x3ffe0fac]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d 60 f0 01 c0    	mov    ebx,DWORD PTR ds:0xc001f060
c00010df:	81 fb 54 f0 01 c0    	cmp    ebx,0xc001f054
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d 54 f0 01 c0       	cmp    eax,0xc001f054
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d 50 f0 01 c0    	cmp    DWORD PTR ds:0xc001f050,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 5c f0 01 c0       	mov    ds:0xc001f05c,eax
c000111b:	a3 60 f0 01 c0       	mov    ds:0xc001f060,eax
c0001120:	a3 50 f0 01 c0       	mov    ds:0xc001f050,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 54 f0 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f054
c000112e:	c7 40 0c 54 f0 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f054
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 60 f0 01 c0       	mov    ds:0xc001f060,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 54 f0 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f054
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 18 f0 01 c0 	lea    ebp,[edx*4-0x3ffe0fe8]
c000117f:	8b 14 95 20 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0fe0]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 20 f0 01 c0 	lea    ecx,[edx*4-0x3ffe0fe0]
c000119a:	8b 14 95 20 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0fe0]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd 54 f3 01 c0 	or     DWORD PTR [edi*4-0x3ffe0cac],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 54 f0 01 c0 	lea    eax,[eax*8-0x3ffe0fac]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d 5c f0 01 c0    	mov    DWORD PTR ds:0xc001f05c,ecx
c0001254:	89 0d 60 f0 01 c0    	mov    DWORD PTR ds:0xc001f060,ecx
c000125a:	c7 41 08 54 f0 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f054
c0001261:	c7 41 0c 54 f0 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f054
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd 4c f0 01 c0 	lea    edx,[ecx*8-0x3ffe0fb4]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d 54 f3 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe0cac]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d 54 f3 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe0cac]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 4c f0 01 c0 	lea    edx,[eax*4-0x3ffe0fb4]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d 54 f3 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0cac],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d 5c f0 01 c0    	mov    DWORD PTR ds:0xc001f05c,edi
c0001327:	89 3d 60 f0 01 c0    	mov    DWORD PTR ds:0xc001f060,edi
c000132d:	c7 47 08 54 f0 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f054
c0001334:	c7 47 0c 54 f0 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f054
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d 50 f0 01 c0    	mov    DWORD PTR ds:0xc001f050,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 4c f0 01 c0       	mov    eax,ds:0xc001f04c
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d 4c f0 01 c0    	mov    DWORD PTR ds:0xc001f04c,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 20 f0 01 c0       	mov    edx,0xc001f020
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 20 f0 01 c0 00 	cmp    DWORD PTR ds:0xc001f020,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d 74 f3 01 c0    	mov    ebx,DWORD PTR ds:0xc001f374
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 74 f3 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f374,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d 74 f3 01 c0    	mov    DWORD PTR ds:0xc001f374,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 4c f0 01 c0    	cmp    DWORD PTR ds:0xc001f04c,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d 4c f0 01 c0    	mov    DWORD PTR ds:0xc001f04c,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 20 f0 01 c0 00 	cmp    DWORD PTR ds:0xc001f020,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 7c f3 01 c0    	push   DWORD PTR ds:0xc001f37c
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 20 f0 01 c0 00 	cmp    DWORD PTR ds:0xc001f020,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 7c f3 01 c0       	mov    eax,ds:0xc001f37c
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d 4c f0 01 c0 00 	cmp    DWORD PTR ds:0xc001f04c,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 4c f0 01 c0       	mov    eax,ds:0xc001f04c
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 24 f0 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0fdc]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 54 f0 01 c0       	mov    eax,0xc001f054
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d 4c f3 01 c0       	cmp    eax,0xc001f34c
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 88 f3 01 c0       	mov    eax,ds:0xc001f388
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 70 f3 01 c0    	mov    esi,DWORD PTR ds:0xc001f370
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 84 f3 01 c0    	mov    esi,DWORD PTR ds:0xc001f384
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 94 f3 01 c0    	mov    esi,DWORD PTR ds:0xc001f394
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 44 c4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe3bbc]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 20 f0 01 c0       	mov    eax,ds:0xc001f020
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 20 f0 01 c0       	mov    ds:0xc001f020,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d 64 f3 01 c0    	mov    DWORD PTR ds:0xc001f364,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d 68 f3 01 c0    	mov    DWORD PTR ds:0xc001f368,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d 6c f3 01 c0    	mov    DWORD PTR ds:0xc001f36c,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 74 f3 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f374,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    

c0001afb <disk_status>:
c0001afb:	31 c0                	xor    eax,eax
c0001afd:	c3                   	ret    

c0001afe <disk_initialize>:
c0001afe:	31 c0                	xor    eax,eax
c0001b00:	c3                   	ret    

c0001b01 <disk_read>:
c0001b01:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b06:	0f b6 04 85 40 2a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd5c0]
c0001b0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b12:	e9 ad 43 01 00       	jmp    c0015ec4 <fatWrapperReadDisk>

c0001b17 <disk_write>:
c0001b17:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b1c:	0f b6 04 85 40 2a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd5c0]
c0001b24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b28:	e9 db 43 01 00       	jmp    c0015f08 <fatWrapperWriteDisk>

c0001b2d <disk_ioctl>:
c0001b2d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b3b:	0f b6 04 85 40 2a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd5c0]
c0001b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b47:	e9 00 44 01 00       	jmp    c0015f4c <fatWrapperIoctl>

c0001b4c <ld_word>:
c0001b4c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b53:	c1 e2 08             	shl    edx,0x8
c0001b56:	09 d0                	or     eax,edx
c0001b58:	c3                   	ret    

c0001b59 <ld_dword>:
c0001b59:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b5d:	89 d1                	mov    ecx,edx
c0001b5f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b63:	c1 e1 08             	shl    ecx,0x8
c0001b66:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b69:	09 ca                	or     edx,ecx
c0001b6b:	c1 e2 08             	shl    edx,0x8
c0001b6e:	09 d0                	or     eax,edx
c0001b70:	c3                   	ret    

c0001b71 <st_word>:
c0001b71:	66 89 10             	mov    WORD PTR [eax],dx
c0001b74:	c3                   	ret    

c0001b75 <st_dword>:
c0001b75:	89 10                	mov    DWORD PTR [eax],edx
c0001b77:	c3                   	ret    

c0001b78 <mem_cpy>:
c0001b78:	85 c9                	test   ecx,ecx
c0001b7a:	74 10                	je     c0001b8c <mem_cpy+0x14>
c0001b7c:	57                   	push   edi
c0001b7d:	01 c1                	add    ecx,eax
c0001b7f:	56                   	push   esi
c0001b80:	89 c7                	mov    edi,eax
c0001b82:	89 d6                	mov    esi,edx
c0001b84:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001b85:	39 f9                	cmp    ecx,edi
c0001b87:	75 fb                	jne    c0001b84 <mem_cpy+0xc>
c0001b89:	5e                   	pop    esi
c0001b8a:	5f                   	pop    edi
c0001b8b:	c3                   	ret    
c0001b8c:	c3                   	ret    

c0001b8d <mem_set>:
c0001b8d:	01 c1                	add    ecx,eax
c0001b8f:	40                   	inc    eax
c0001b90:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001b93:	39 c8                	cmp    eax,ecx
c0001b95:	75 f8                	jne    c0001b8f <mem_set+0x2>
c0001b97:	c3                   	ret    

c0001b98 <mem_cmp>:
c0001b98:	57                   	push   edi
c0001b99:	56                   	push   esi
c0001b9a:	89 c6                	mov    esi,eax
c0001b9c:	53                   	push   ebx
c0001b9d:	46                   	inc    esi
c0001b9e:	42                   	inc    edx
c0001b9f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001ba3:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ba7:	29 fb                	sub    ebx,edi
c0001ba9:	89 cf                	mov    edi,ecx
c0001bab:	29 f7                	sub    edi,esi
c0001bad:	01 c7                	add    edi,eax
c0001baf:	74 04                	je     c0001bb5 <mem_cmp+0x1d>
c0001bb1:	85 db                	test   ebx,ebx
c0001bb3:	74 e8                	je     c0001b9d <mem_cmp+0x5>
c0001bb5:	89 d8                	mov    eax,ebx
c0001bb7:	5b                   	pop    ebx
c0001bb8:	5e                   	pop    esi
c0001bb9:	5f                   	pop    edi
c0001bba:	c3                   	ret    

c0001bbb <chk_chr>:
c0001bbb:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001bbe:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001bc1:	74 07                	je     c0001bca <chk_chr+0xf>
c0001bc3:	39 d1                	cmp    ecx,edx
c0001bc5:	74 03                	je     c0001bca <chk_chr+0xf>
c0001bc7:	40                   	inc    eax
c0001bc8:	eb f1                	jmp    c0001bbb <chk_chr>
c0001bca:	89 c8                	mov    eax,ecx
c0001bcc:	c3                   	ret    

c0001bcd <dbc_1st>:
c0001bcd:	31 c0                	xor    eax,eax
c0001bcf:	c3                   	ret    

c0001bd0 <dbc_2nd>:
c0001bd0:	31 c0                	xor    eax,eax
c0001bd2:	c3                   	ret    

c0001bd3 <tchar2uni>:
c0001bd3:	57                   	push   edi
c0001bd4:	89 c7                	mov    edi,eax
c0001bd6:	56                   	push   esi
c0001bd7:	53                   	push   ebx
c0001bd8:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001bda:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001bdc:	8d 73 01             	lea    esi,[ebx+0x1]
c0001bdf:	84 c9                	test   cl,cl
c0001be1:	78 0a                	js     c0001bed <tchar2uni+0x1a>
c0001be3:	0f b6 d1             	movzx  edx,cl
c0001be6:	89 f3                	mov    ebx,esi
c0001be8:	e9 9f 00 00 00       	jmp    c0001c8c <tchar2uni+0xb9>
c0001bed:	88 ca                	mov    dl,cl
c0001bef:	83 e2 e0             	and    edx,0xffffffe0
c0001bf2:	80 fa c0             	cmp    dl,0xc0
c0001bf5:	75 0c                	jne    c0001c03 <tchar2uni+0x30>
c0001bf7:	89 ca                	mov    edx,ecx
c0001bf9:	b9 01 00 00 00       	mov    ecx,0x1
c0001bfe:	83 e2 1f             	and    edx,0x1f
c0001c01:	eb 2e                	jmp    c0001c31 <tchar2uni+0x5e>
c0001c03:	88 ca                	mov    dl,cl
c0001c05:	83 e2 f0             	and    edx,0xfffffff0
c0001c08:	80 fa e0             	cmp    dl,0xe0
c0001c0b:	75 0c                	jne    c0001c19 <tchar2uni+0x46>
c0001c0d:	89 ca                	mov    edx,ecx
c0001c0f:	b9 02 00 00 00       	mov    ecx,0x2
c0001c14:	83 e2 0f             	and    edx,0xf
c0001c17:	eb 18                	jmp    c0001c31 <tchar2uni+0x5e>
c0001c19:	88 ca                	mov    dl,cl
c0001c1b:	83 e2 f8             	and    edx,0xfffffff8
c0001c1e:	88 d0                	mov    al,dl
c0001c20:	83 ca ff             	or     edx,0xffffffff
c0001c23:	3c f0                	cmp    al,0xf0
c0001c25:	75 6c                	jne    c0001c93 <tchar2uni+0xc0>
c0001c27:	89 ca                	mov    edx,ecx
c0001c29:	b9 03 00 00 00       	mov    ecx,0x3
c0001c2e:	83 e2 07             	and    edx,0x7
c0001c31:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c35:	46                   	inc    esi
c0001c36:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c39:	88 c8                	mov    al,cl
c0001c3b:	83 e0 c0             	and    eax,0xffffffc0
c0001c3e:	3c 80                	cmp    al,0x80
c0001c40:	75 4e                	jne    c0001c90 <tchar2uni+0xbd>
c0001c42:	c1 e2 06             	shl    edx,0x6
c0001c45:	83 e1 3f             	and    ecx,0x3f
c0001c48:	09 ca                	or     edx,ecx
c0001c4a:	39 de                	cmp    esi,ebx
c0001c4c:	75 e7                	jne    c0001c35 <tchar2uni+0x62>
c0001c4e:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001c51:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001c57:	77 37                	ja     c0001c90 <tchar2uni+0xbd>
c0001c59:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001c5f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c65:	76 29                	jbe    c0001c90 <tchar2uni+0xbd>
c0001c67:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001c6d:	76 1d                	jbe    c0001c8c <tchar2uni+0xb9>
c0001c6f:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001c75:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001c7b:	c1 e1 06             	shl    ecx,0x6
c0001c7e:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001c84:	09 ca                	or     edx,ecx
c0001c86:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001c8c:	89 1f                	mov    DWORD PTR [edi],ebx
c0001c8e:	eb 03                	jmp    c0001c93 <tchar2uni+0xc0>
c0001c90:	83 ca ff             	or     edx,0xffffffff
c0001c93:	5b                   	pop    ebx
c0001c94:	89 d0                	mov    eax,edx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <put_utf>:
c0001c99:	53                   	push   ebx
c0001c9a:	83 f8 7f             	cmp    eax,0x7f
c0001c9d:	89 c3                	mov    ebx,eax
c0001c9f:	b0 00                	mov    al,0x0
c0001ca1:	77 11                	ja     c0001cb4 <put_utf+0x1b>
c0001ca3:	85 c9                	test   ecx,ecx
c0001ca5:	0f 84 e5 00 00 00    	je     c0001d90 <put_utf+0xf7>
c0001cab:	88 1a                	mov    BYTE PTR [edx],bl
c0001cad:	b0 01                	mov    al,0x1
c0001caf:	e9 dc 00 00 00       	jmp    c0001d90 <put_utf+0xf7>
c0001cb4:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001cba:	77 23                	ja     c0001cdf <put_utf+0x46>
c0001cbc:	83 f9 01             	cmp    ecx,0x1
c0001cbf:	0f 86 cb 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001cc5:	89 d8                	mov    eax,ebx
c0001cc7:	83 e3 3f             	and    ebx,0x3f
c0001cca:	c1 e8 06             	shr    eax,0x6
c0001ccd:	83 cb 80             	or     ebx,0xffffff80
c0001cd0:	83 c8 c0             	or     eax,0xffffffc0
c0001cd3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001cd6:	88 02                	mov    BYTE PTR [edx],al
c0001cd8:	b0 02                	mov    al,0x2
c0001cda:	e9 b1 00 00 00       	jmp    c0001d90 <put_utf+0xf7>
c0001cdf:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ce5:	77 40                	ja     c0001d27 <put_utf+0x8e>
c0001ce7:	83 f9 02             	cmp    ecx,0x2
c0001cea:	0f 86 a0 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001cf0:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001cf6:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cfc:	0f 86 8e 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001d02:	89 d8                	mov    eax,ebx
c0001d04:	c1 e8 0c             	shr    eax,0xc
c0001d07:	83 c8 e0             	or     eax,0xffffffe0
c0001d0a:	88 02                	mov    BYTE PTR [edx],al
c0001d0c:	89 d8                	mov    eax,ebx
c0001d0e:	83 e3 3f             	and    ebx,0x3f
c0001d11:	c1 e8 06             	shr    eax,0x6
c0001d14:	83 cb 80             	or     ebx,0xffffff80
c0001d17:	83 e0 3f             	and    eax,0x3f
c0001d1a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d1d:	83 c8 80             	or     eax,0xffffff80
c0001d20:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d23:	b0 03                	mov    al,0x3
c0001d25:	eb 69                	jmp    c0001d90 <put_utf+0xf7>
c0001d27:	83 f9 03             	cmp    ecx,0x3
c0001d2a:	76 64                	jbe    c0001d90 <put_utf+0xf7>
c0001d2c:	89 d9                	mov    ecx,ebx
c0001d2e:	0f b7 c3             	movzx  eax,bx
c0001d31:	66 31 c9             	xor    cx,cx
c0001d34:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d3a:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d40:	c1 e9 06             	shr    ecx,0x6
c0001d43:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001d49:	77 43                	ja     c0001d8e <put_utf+0xf5>
c0001d4b:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001d51:	77 3b                	ja     c0001d8e <put_utf+0xf5>
c0001d53:	09 cb                	or     ebx,ecx
c0001d55:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001d5b:	89 d8                	mov    eax,ebx
c0001d5d:	c1 e8 12             	shr    eax,0x12
c0001d60:	83 c8 f0             	or     eax,0xfffffff0
c0001d63:	88 02                	mov    BYTE PTR [edx],al
c0001d65:	89 d8                	mov    eax,ebx
c0001d67:	c1 e8 0c             	shr    eax,0xc
c0001d6a:	83 e0 3f             	and    eax,0x3f
c0001d6d:	83 c8 80             	or     eax,0xffffff80
c0001d70:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d73:	89 d8                	mov    eax,ebx
c0001d75:	83 e3 3f             	and    ebx,0x3f
c0001d78:	c1 e8 06             	shr    eax,0x6
c0001d7b:	83 cb 80             	or     ebx,0xffffff80
c0001d7e:	83 e0 3f             	and    eax,0x3f
c0001d81:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001d84:	83 c8 80             	or     eax,0xffffff80
c0001d87:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001d8a:	b0 04                	mov    al,0x4
c0001d8c:	eb 02                	jmp    c0001d90 <put_utf+0xf7>
c0001d8e:	31 c0                	xor    eax,eax
c0001d90:	5b                   	pop    ebx
c0001d91:	c3                   	ret    

c0001d92 <clst2sect>:
c0001d92:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001d95:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001d98:	83 ea 02             	sub    edx,0x2
c0001d9b:	39 ca                	cmp    edx,ecx
c0001d9d:	76 0d                	jbe    c0001dac <clst2sect+0x1a>
c0001d9f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001da3:	0f af d1             	imul   edx,ecx
c0001da6:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001da9:	89 d0                	mov    eax,edx
c0001dab:	c3                   	ret    
c0001dac:	31 c0                	xor    eax,eax
c0001dae:	c3                   	ret    

c0001daf <pick_lfn>:
c0001daf:	55                   	push   ebp
c0001db0:	57                   	push   edi
c0001db1:	56                   	push   esi
c0001db2:	89 d6                	mov    esi,edx
c0001db4:	53                   	push   ebx
c0001db5:	89 c3                	mov    ebx,eax
c0001db7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dba:	e8 8d fd ff ff       	call   c0001b4c <ld_word>
c0001dbf:	66 85 c0             	test   ax,ax
c0001dc2:	74 04                	je     c0001dc8 <pick_lfn+0x19>
c0001dc4:	31 c0                	xor    eax,eax
c0001dc6:	eb 5c                	jmp    c0001e24 <pick_lfn+0x75>
c0001dc8:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001dcb:	bd 01 00 00 00       	mov    ebp,0x1
c0001dd0:	83 e1 bf             	and    ecx,0xffffffbf
c0001dd3:	31 ff                	xor    edi,edi
c0001dd5:	49                   	dec    ecx
c0001dd6:	6b c9 0d             	imul   ecx,ecx,0xd
c0001dd9:	0f b6 87 a0 c5 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3a60]
c0001de0:	01 f0                	add    eax,esi
c0001de2:	e8 65 fd ff ff       	call   c0001b4c <ld_word>
c0001de7:	66 85 ed             	test   bp,bp
c0001dea:	74 11                	je     c0001dfd <pick_lfn+0x4e>
c0001dec:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001df2:	77 d0                	ja     c0001dc4 <pick_lfn+0x15>
c0001df4:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001df8:	89 c5                	mov    ebp,eax
c0001dfa:	41                   	inc    ecx
c0001dfb:	eb 04                	jmp    c0001e01 <pick_lfn+0x52>
c0001dfd:	66 40                	inc    ax
c0001dff:	75 c3                	jne    c0001dc4 <pick_lfn+0x15>
c0001e01:	47                   	inc    edi
c0001e02:	83 ff 0d             	cmp    edi,0xd
c0001e05:	75 d2                	jne    c0001dd9 <pick_lfn+0x2a>
c0001e07:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001e0a:	74 13                	je     c0001e1f <pick_lfn+0x70>
c0001e0c:	66 85 ed             	test   bp,bp
c0001e0f:	74 0e                	je     c0001e1f <pick_lfn+0x70>
c0001e11:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e17:	77 ab                	ja     c0001dc4 <pick_lfn+0x15>
c0001e19:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001e1f:	b8 01 00 00 00       	mov    eax,0x1
c0001e24:	5b                   	pop    ebx
c0001e25:	5e                   	pop    esi
c0001e26:	5f                   	pop    edi
c0001e27:	5d                   	pop    ebp
c0001e28:	c3                   	ret    

c0001e29 <put_lfn>:
c0001e29:	55                   	push   ebp
c0001e2a:	31 ed                	xor    ebp,ebp
c0001e2c:	57                   	push   edi
c0001e2d:	89 d7                	mov    edi,edx
c0001e2f:	56                   	push   esi
c0001e30:	31 f6                	xor    esi,esi
c0001e32:	53                   	push   ebx
c0001e33:	83 ec 08             	sub    esp,0x8
c0001e36:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e39:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001e3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001e41:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001e47:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001e4a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e4d:	31 d2                	xor    edx,edx
c0001e4f:	e8 1d fd ff ff       	call   c0001b71 <st_word>
c0001e54:	0f b6 d9             	movzx  ebx,cl
c0001e57:	4b                   	dec    ebx
c0001e58:	6b db 0d             	imul   ebx,ebx,0xd
c0001e5b:	66 83 fe ff          	cmp    si,0xffff
c0001e5f:	74 08                	je     c0001e69 <put_lfn+0x40>
c0001e61:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e64:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e68:	43                   	inc    ebx
c0001e69:	0f b6 85 a0 c5 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3a60]
c0001e70:	0f b7 d6             	movzx  edx,si
c0001e73:	01 f8                	add    eax,edi
c0001e75:	e8 f7 fc ff ff       	call   c0001b71 <st_word>
c0001e7a:	66 85 f6             	test   si,si
c0001e7d:	75 03                	jne    c0001e82 <put_lfn+0x59>
c0001e7f:	83 ce ff             	or     esi,0xffffffff
c0001e82:	45                   	inc    ebp
c0001e83:	83 fd 0d             	cmp    ebp,0xd
c0001e86:	75 d3                	jne    c0001e5b <put_lfn+0x32>
c0001e88:	66 46                	inc    si
c0001e8a:	74 0a                	je     c0001e96 <put_lfn+0x6d>
c0001e8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e94:	75 09                	jne    c0001e9f <put_lfn+0x76>
c0001e96:	88 c8                	mov    al,cl
c0001e98:	83 c8 40             	or     eax,0x40
c0001e9b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e9f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001ea3:	88 07                	mov    BYTE PTR [edi],al
c0001ea5:	83 c4 08             	add    esp,0x8
c0001ea8:	5b                   	pop    ebx
c0001ea9:	5e                   	pop    esi
c0001eaa:	5f                   	pop    edi
c0001eab:	5d                   	pop    ebp
c0001eac:	c3                   	ret    

c0001ead <gen_numname>:
c0001ead:	57                   	push   edi
c0001eae:	89 cf                	mov    edi,ecx
c0001eb0:	56                   	push   esi
c0001eb1:	b9 0b 00 00 00       	mov    ecx,0xb
c0001eb6:	53                   	push   ebx
c0001eb7:	89 c6                	mov    esi,eax
c0001eb9:	83 ec 10             	sub    esp,0x10
c0001ebc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001ec0:	e8 b3 fc ff ff       	call   c0001b78 <mem_cpy>
c0001ec5:	83 fb 05             	cmp    ebx,0x5
c0001ec8:	76 2d                	jbe    c0001ef7 <gen_numname+0x4a>
c0001eca:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001ecd:	66 85 c0             	test   ax,ax
c0001ed0:	74 25                	je     c0001ef7 <gen_numname+0x4a>
c0001ed2:	83 c7 02             	add    edi,0x2
c0001ed5:	ba 10 00 00 00       	mov    edx,0x10
c0001eda:	01 db                	add    ebx,ebx
c0001edc:	89 c1                	mov    ecx,eax
c0001ede:	66 d1 e8             	shr    ax,1
c0001ee1:	83 e1 01             	and    ecx,0x1
c0001ee4:	01 cb                	add    ebx,ecx
c0001ee6:	0f ba e3 10          	bt     ebx,0x10
c0001eea:	73 06                	jae    c0001ef2 <gen_numname+0x45>
c0001eec:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001ef2:	4a                   	dec    edx
c0001ef3:	75 e5                	jne    c0001eda <gen_numname+0x2d>
c0001ef5:	eb d3                	jmp    c0001eca <gen_numname+0x1d>
c0001ef7:	b8 07 00 00 00       	mov    eax,0x7
c0001efc:	88 d9                	mov    cl,bl
c0001efe:	83 e1 0f             	and    ecx,0xf
c0001f01:	8d 51 30             	lea    edx,[ecx+0x30]
c0001f04:	80 fa 39             	cmp    dl,0x39
c0001f07:	76 03                	jbe    c0001f0c <gen_numname+0x5f>
c0001f09:	8d 51 37             	lea    edx,[ecx+0x37]
c0001f0c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001f0f:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001f13:	89 da                	mov    edx,ebx
c0001f15:	c1 ea 04             	shr    edx,0x4
c0001f18:	83 fb 0f             	cmp    ebx,0xf
c0001f1b:	76 06                	jbe    c0001f23 <gen_numname+0x76>
c0001f1d:	89 c8                	mov    eax,ecx
c0001f1f:	89 d3                	mov    ebx,edx
c0001f21:	eb d9                	jmp    c0001efc <gen_numname+0x4f>
c0001f23:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001f28:	31 d2                	xor    edx,edx
c0001f2a:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001f2d:	8d 04 16             	lea    eax,[esi+edx*1]
c0001f30:	39 ca                	cmp    edx,ecx
c0001f32:	73 18                	jae    c0001f4c <gen_numname+0x9f>
c0001f34:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001f37:	3c 20                	cmp    al,0x20
c0001f39:	74 11                	je     c0001f4c <gen_numname+0x9f>
c0001f3b:	e8 8d fc ff ff       	call   c0001bcd <dbc_1st>
c0001f40:	85 c0                	test   eax,eax
c0001f42:	74 05                	je     c0001f49 <gen_numname+0x9c>
c0001f44:	39 d3                	cmp    ebx,edx
c0001f46:	74 04                	je     c0001f4c <gen_numname+0x9f>
c0001f48:	42                   	inc    edx
c0001f49:	42                   	inc    edx
c0001f4a:	eb e1                	jmp    c0001f2d <gen_numname+0x80>
c0001f4c:	b0 20                	mov    al,0x20
c0001f4e:	83 f9 07             	cmp    ecx,0x7
c0001f51:	77 05                	ja     c0001f58 <gen_numname+0xab>
c0001f53:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f57:	41                   	inc    ecx
c0001f58:	42                   	inc    edx
c0001f59:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f5d:	83 fa 07             	cmp    edx,0x7
c0001f60:	76 ea                	jbe    c0001f4c <gen_numname+0x9f>
c0001f62:	83 c4 10             	add    esp,0x10
c0001f65:	5b                   	pop    ebx
c0001f66:	5e                   	pop    esi
c0001f67:	5f                   	pop    edi
c0001f68:	c3                   	ret    

c0001f69 <sum_sfn>:
c0001f69:	31 c9                	xor    ecx,ecx
c0001f6b:	31 d2                	xor    edx,edx
c0001f6d:	d0 ca                	ror    dl,1
c0001f6f:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f72:	41                   	inc    ecx
c0001f73:	83 f9 0b             	cmp    ecx,0xb
c0001f76:	75 f5                	jne    c0001f6d <sum_sfn+0x4>
c0001f78:	88 d0                	mov    al,dl
c0001f7a:	c3                   	ret    

c0001f7b <get_ldnumber>:
c0001f7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f7d:	85 d2                	test   edx,edx
c0001f7f:	74 14                	je     c0001f95 <get_ldnumber+0x1a>
c0001f81:	56                   	push   esi
c0001f82:	53                   	push   ebx
c0001f83:	89 d3                	mov    ebx,edx
c0001f85:	43                   	inc    ebx
c0001f86:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f89:	80 f9 1f             	cmp    cl,0x1f
c0001f8c:	76 0d                	jbe    c0001f9b <get_ldnumber+0x20>
c0001f8e:	80 f9 3a             	cmp    cl,0x3a
c0001f91:	75 f2                	jne    c0001f85 <get_ldnumber+0xa>
c0001f93:	eb 0a                	jmp    c0001f9f <get_ldnumber+0x24>
c0001f95:	83 c9 ff             	or     ecx,0xffffffff
c0001f98:	89 c8                	mov    eax,ecx
c0001f9a:	c3                   	ret    
c0001f9b:	31 c9                	xor    ecx,ecx
c0001f9d:	eb 24                	jmp    c0001fc3 <get_ldnumber+0x48>
c0001f9f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001fa2:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001fa5:	80 f9 09             	cmp    cl,0x9
c0001fa8:	77 16                	ja     c0001fc0 <get_ldnumber+0x45>
c0001faa:	83 c2 02             	add    edx,0x2
c0001fad:	83 c9 ff             	or     ecx,0xffffffff
c0001fb0:	39 d3                	cmp    ebx,edx
c0001fb2:	75 0f                	jne    c0001fc3 <get_ldnumber+0x48>
c0001fb4:	89 f2                	mov    edx,esi
c0001fb6:	89 18                	mov    DWORD PTR [eax],ebx
c0001fb8:	0f be ca             	movsx  ecx,dl
c0001fbb:	83 e9 30             	sub    ecx,0x30
c0001fbe:	eb 03                	jmp    c0001fc3 <get_ldnumber+0x48>
c0001fc0:	83 c9 ff             	or     ecx,0xffffffff
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	5b                   	pop    ebx
c0001fc6:	5e                   	pop    esi
c0001fc7:	c3                   	ret    

c0001fc8 <validate>:
c0001fc8:	56                   	push   esi
c0001fc9:	53                   	push   ebx
c0001fca:	89 d6                	mov    esi,edx
c0001fcc:	51                   	push   ecx
c0001fcd:	85 c0                	test   eax,eax
c0001fcf:	75 09                	jne    c0001fda <validate+0x12>
c0001fd1:	b8 09 00 00 00       	mov    eax,0x9
c0001fd6:	31 c9                	xor    ecx,ecx
c0001fd8:	eb 2f                	jmp    c0002009 <validate+0x41>
c0001fda:	89 c3                	mov    ebx,eax
c0001fdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0001fde:	85 c0                	test   eax,eax
c0001fe0:	74 ef                	je     c0001fd1 <validate+0x9>
c0001fe2:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001fe5:	74 ea                	je     c0001fd1 <validate+0x9>
c0001fe7:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0001feb:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0001fef:	75 e0                	jne    c0001fd1 <validate+0x9>
c0001ff1:	83 ec 0c             	sub    esp,0xc
c0001ff4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0001ff8:	50                   	push   eax
c0001ff9:	e8 fd fa ff ff       	call   c0001afb <disk_status>
c0001ffe:	83 c4 10             	add    esp,0x10
c0002001:	a8 01                	test   al,0x1
c0002003:	75 cc                	jne    c0001fd1 <validate+0x9>
c0002005:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002007:	31 c0                	xor    eax,eax
c0002009:	89 0e                	mov    DWORD PTR [esi],ecx
c000200b:	5a                   	pop    edx
c000200c:	5b                   	pop    ebx
c000200d:	5e                   	pop    esi
c000200e:	c3                   	ret    

c000200f <sync_window>:
c000200f:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002013:	74 58                	je     c000206d <sync_window+0x5e>
c0002015:	56                   	push   esi
c0002016:	53                   	push   ebx
c0002017:	8d 70 34             	lea    esi,[eax+0x34]
c000201a:	51                   	push   ecx
c000201b:	89 c3                	mov    ebx,eax
c000201d:	6a 01                	push   0x1
c000201f:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002022:	56                   	push   esi
c0002023:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002027:	50                   	push   eax
c0002028:	e8 ea fa ff ff       	call   c0001b17 <disk_write>
c000202d:	83 c4 10             	add    esp,0x10
c0002030:	ba 01 00 00 00       	mov    edx,0x1
c0002035:	85 c0                	test   eax,eax
c0002037:	75 2e                	jne    c0002067 <sync_window+0x58>
c0002039:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000203c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000203f:	89 c1                	mov    ecx,eax
c0002041:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002045:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002048:	39 d1                	cmp    ecx,edx
c000204a:	73 19                	jae    c0002065 <sync_window+0x56>
c000204c:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002050:	75 13                	jne    c0002065 <sync_window+0x56>
c0002052:	6a 01                	push   0x1
c0002054:	01 d0                	add    eax,edx
c0002056:	50                   	push   eax
c0002057:	56                   	push   esi
c0002058:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000205c:	50                   	push   eax
c000205d:	e8 b5 fa ff ff       	call   c0001b17 <disk_write>
c0002062:	83 c4 10             	add    esp,0x10
c0002065:	31 d2                	xor    edx,edx
c0002067:	89 d0                	mov    eax,edx
c0002069:	5a                   	pop    edx
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    
c000206d:	31 d2                	xor    edx,edx
c000206f:	89 d0                	mov    eax,edx
c0002071:	c3                   	ret    

c0002072 <move_window>:
c0002072:	57                   	push   edi
c0002073:	56                   	push   esi
c0002074:	31 f6                	xor    esi,esi
c0002076:	53                   	push   ebx
c0002077:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000207a:	74 32                	je     c00020ae <move_window+0x3c>
c000207c:	89 c3                	mov    ebx,eax
c000207e:	89 d7                	mov    edi,edx
c0002080:	e8 8a ff ff ff       	call   c000200f <sync_window>
c0002085:	89 c6                	mov    esi,eax
c0002087:	85 c0                	test   eax,eax
c0002089:	75 23                	jne    c00020ae <move_window+0x3c>
c000208b:	6a 01                	push   0x1
c000208d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002090:	57                   	push   edi
c0002091:	50                   	push   eax
c0002092:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002096:	50                   	push   eax
c0002097:	e8 65 fa ff ff       	call   c0001b01 <disk_read>
c000209c:	83 c4 10             	add    esp,0x10
c000209f:	85 c0                	test   eax,eax
c00020a1:	74 08                	je     c00020ab <move_window+0x39>
c00020a3:	be 01 00 00 00       	mov    esi,0x1
c00020a8:	83 cf ff             	or     edi,0xffffffff
c00020ab:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00020ae:	89 f0                	mov    eax,esi
c00020b0:	5b                   	pop    ebx
c00020b1:	5e                   	pop    esi
c00020b2:	5f                   	pop    edi
c00020b3:	c3                   	ret    

c00020b4 <check_fs>:
c00020b4:	53                   	push   ebx
c00020b5:	89 c3                	mov    ebx,eax
c00020b7:	83 ec 08             	sub    esp,0x8
c00020ba:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00020be:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00020c5:	e8 a8 ff ff ff       	call   c0002072 <move_window>
c00020ca:	ba 04 00 00 00       	mov    edx,0x4
c00020cf:	85 c0                	test   eax,eax
c00020d1:	75 68                	jne    c000213b <check_fs+0x87>
c00020d3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00020d9:	e8 6e fa ff ff       	call   c0001b4c <ld_word>
c00020de:	ba 03 00 00 00       	mov    edx,0x3
c00020e3:	66 3d 55 aa          	cmp    ax,0xaa55
c00020e7:	75 52                	jne    c000213b <check_fs+0x87>
c00020e9:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00020ec:	8d 50 18             	lea    edx,[eax+0x18]
c00020ef:	80 fa 01             	cmp    dl,0x1
c00020f2:	76 09                	jbe    c00020fd <check_fs+0x49>
c00020f4:	ba 02 00 00 00       	mov    edx,0x2
c00020f9:	3c eb                	cmp    al,0xeb
c00020fb:	75 3e                	jne    c000213b <check_fs+0x87>
c00020fd:	ba 9c e4 01 c0       	mov    edx,0xc001e49c
c0002102:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002105:	b9 03 00 00 00       	mov    ecx,0x3
c000210a:	e8 89 fa ff ff       	call   c0001b98 <mem_cmp>
c000210f:	31 d2                	xor    edx,edx
c0002111:	85 c0                	test   eax,eax
c0002113:	74 26                	je     c000213b <check_fs+0x87>
c0002115:	ba 5c c4 01 c0       	mov    edx,0xc001c45c
c000211a:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002120:	b9 05 00 00 00       	mov    ecx,0x5
c0002125:	e8 6e fa ff ff       	call   c0001b98 <mem_cmp>
c000212a:	31 d2                	xor    edx,edx
c000212c:	85 c0                	test   eax,eax
c000212e:	74 0b                	je     c000213b <check_fs+0x87>
c0002130:	31 d2                	xor    edx,edx
c0002132:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002136:	0f 95 c2             	setne  dl
c0002139:	01 d2                	add    edx,edx
c000213b:	89 d0                	mov    eax,edx
c000213d:	83 c4 08             	add    esp,0x8
c0002140:	5b                   	pop    ebx
c0002141:	c3                   	ret    

c0002142 <find_volume>:
c0002142:	55                   	push   ebp
c0002143:	57                   	push   edi
c0002144:	56                   	push   esi
c0002145:	89 c6                	mov    esi,eax
c0002147:	53                   	push   ebx
c0002148:	89 d3                	mov    ebx,edx
c000214a:	83 ec 2c             	sub    esp,0x2c
c000214d:	31 d2                	xor    edx,edx
c000214f:	e8 60 ff ff ff       	call   c00020b4 <check_fs>
c0002154:	83 f8 02             	cmp    eax,0x2
c0002157:	74 06                	je     c000215f <find_volume+0x1d>
c0002159:	77 62                	ja     c00021bd <find_volume+0x7b>
c000215b:	85 db                	test   ebx,ebx
c000215d:	74 5e                	je     c00021bd <find_volume+0x7b>
c000215f:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002163:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002169:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000216f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002173:	89 cf                	mov    edi,ecx
c0002175:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002179:	89 e8                	mov    eax,ebp
c000217b:	83 c5 10             	add    ebp,0x10
c000217e:	e8 d6 f9 ff ff       	call   c0001b59 <ld_dword>
c0002183:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002187:	89 01                	mov    DWORD PTR [ecx],eax
c0002189:	83 c1 04             	add    ecx,0x4
c000218c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002190:	75 e3                	jne    c0002175 <find_volume+0x33>
c0002192:	31 ed                	xor    ebp,ebp
c0002194:	85 db                	test   ebx,ebx
c0002196:	74 03                	je     c000219b <find_volume+0x59>
c0002198:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000219b:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000219e:	b8 03 00 00 00       	mov    eax,0x3
c00021a3:	85 d2                	test   edx,edx
c00021a5:	74 0c                	je     c00021b3 <find_volume+0x71>
c00021a7:	89 f0                	mov    eax,esi
c00021a9:	e8 06 ff ff ff       	call   c00020b4 <check_fs>
c00021ae:	83 f8 01             	cmp    eax,0x1
c00021b1:	76 0a                	jbe    c00021bd <find_volume+0x7b>
c00021b3:	85 db                	test   ebx,ebx
c00021b5:	75 06                	jne    c00021bd <find_volume+0x7b>
c00021b7:	45                   	inc    ebp
c00021b8:	83 fd 03             	cmp    ebp,0x3
c00021bb:	76 de                	jbe    c000219b <find_volume+0x59>
c00021bd:	83 c4 2c             	add    esp,0x2c
c00021c0:	5b                   	pop    ebx
c00021c1:	5e                   	pop    esi
c00021c2:	5f                   	pop    edi
c00021c3:	5d                   	pop    ebp
c00021c4:	c3                   	ret    

c00021c5 <mount_volume>:
c00021c5:	55                   	push   ebp
c00021c6:	89 d5                	mov    ebp,edx
c00021c8:	57                   	push   edi
c00021c9:	89 cf                	mov    edi,ecx
c00021cb:	56                   	push   esi
c00021cc:	53                   	push   ebx
c00021cd:	bb 0b 00 00 00       	mov    ebx,0xb
c00021d2:	83 ec 2c             	sub    esp,0x2c
c00021d5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00021db:	e8 9b fd ff ff       	call   c0001f7b <get_ldnumber>
c00021e0:	85 c0                	test   eax,eax
c00021e2:	0f 88 d6 02 00 00    	js     c00024be <mount_volume+0x2f9>
c00021e8:	8b 34 85 c0 f3 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0c40]
c00021ef:	89 c2                	mov    edx,eax
c00021f1:	bb 0c 00 00 00       	mov    ebx,0xc
c00021f6:	85 f6                	test   esi,esi
c00021f8:	0f 84 c0 02 00 00    	je     c00024be <mount_volume+0x2f9>
c00021fe:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002201:	83 e7 fe             	and    edi,0xfffffffe
c0002204:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002207:	74 3a                	je     c0002243 <mount_volume+0x7e>
c0002209:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000220d:	83 ec 0c             	sub    esp,0xc
c0002210:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002214:	50                   	push   eax
c0002215:	e8 e1 f8 ff ff       	call   c0001afb <disk_status>
c000221a:	83 c4 10             	add    esp,0x10
c000221d:	a8 01                	test   al,0x1
c000221f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002223:	75 1e                	jne    c0002243 <mount_volume+0x7e>
c0002225:	31 db                	xor    ebx,ebx
c0002227:	89 f9                	mov    ecx,edi
c0002229:	84 c9                	test   cl,cl
c000222b:	0f 84 8d 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002231:	a8 04                	test   al,0x4
c0002233:	0f 84 85 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002239:	bb 0a 00 00 00       	mov    ebx,0xa
c000223e:	e9 7b 02 00 00       	jmp    c00024be <mount_volume+0x2f9>
c0002243:	83 ec 0c             	sub    esp,0xc
c0002246:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002249:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000224c:	0f b6 c2             	movzx  eax,dl
c000224f:	bb 03 00 00 00       	mov    ebx,0x3
c0002254:	50                   	push   eax
c0002255:	e8 a4 f8 ff ff       	call   c0001afe <disk_initialize>
c000225a:	83 c4 10             	add    esp,0x10
c000225d:	a8 01                	test   al,0x1
c000225f:	0f 85 59 02 00 00    	jne    c00024be <mount_volume+0x2f9>
c0002265:	89 f9                	mov    ecx,edi
c0002267:	84 c9                	test   cl,cl
c0002269:	74 04                	je     c000226f <mount_volume+0xaa>
c000226b:	a8 04                	test   al,0x4
c000226d:	75 ca                	jne    c0002239 <mount_volume+0x74>
c000226f:	31 d2                	xor    edx,edx
c0002271:	89 f0                	mov    eax,esi
c0002273:	bb 01 00 00 00       	mov    ebx,0x1
c0002278:	e8 c5 fe ff ff       	call   c0002142 <find_volume>
c000227d:	83 f8 04             	cmp    eax,0x4
c0002280:	0f 84 38 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002286:	83 f8 01             	cmp    eax,0x1
c0002289:	76 0a                	jbe    c0002295 <mount_volume+0xd0>
c000228b:	bb 0d 00 00 00       	mov    ebx,0xd
c0002290:	e9 29 02 00 00       	jmp    c00024be <mount_volume+0x2f9>
c0002295:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002298:	e8 af f8 ff ff       	call   c0001b4c <ld_word>
c000229d:	66 3d 00 02          	cmp    ax,0x200
c00022a1:	75 e8                	jne    c000228b <mount_volume+0xc6>
c00022a3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00022a6:	e8 a1 f8 ff ff       	call   c0001b4c <ld_word>
c00022ab:	0f b7 c0             	movzx  eax,ax
c00022ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022b2:	85 c0                	test   eax,eax
c00022b4:	75 0c                	jne    c00022c2 <mount_volume+0xfd>
c00022b6:	8d 46 58             	lea    eax,[esi+0x58]
c00022b9:	e8 9b f8 ff ff       	call   c0001b59 <ld_dword>
c00022be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022c2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00022c5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00022c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00022cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00022d0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00022d3:	89 e8                	mov    eax,ebp
c00022d5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00022d8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00022db:	3c 01                	cmp    al,0x1
c00022dd:	77 ac                	ja     c000228b <mount_volume+0xc6>
c00022df:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00022e3:	89 c3                	mov    ebx,eax
c00022e5:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00022e9:	66 85 c0             	test   ax,ax
c00022ec:	74 9d                	je     c000228b <mount_volume+0xc6>
c00022ee:	8d 40 ff             	lea    eax,[eax-0x1]
c00022f1:	85 d8                	test   eax,ebx
c00022f3:	75 96                	jne    c000228b <mount_volume+0xc6>
c00022f5:	8d 46 45             	lea    eax,[esi+0x45]
c00022f8:	e8 4f f8 ff ff       	call   c0001b4c <ld_word>
c00022fd:	89 c7                	mov    edi,eax
c00022ff:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002303:	a8 0f                	test   al,0xf
c0002305:	75 84                	jne    c000228b <mount_volume+0xc6>
c0002307:	8d 46 47             	lea    eax,[esi+0x47]
c000230a:	e8 3d f8 ff ff       	call   c0001b4c <ld_word>
c000230f:	0f b7 d0             	movzx  edx,ax
c0002312:	85 d2                	test   edx,edx
c0002314:	75 0a                	jne    c0002320 <mount_volume+0x15b>
c0002316:	8d 46 54             	lea    eax,[esi+0x54]
c0002319:	e8 3b f8 ff ff       	call   c0001b59 <ld_dword>
c000231e:	89 c2                	mov    edx,eax
c0002320:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002324:	8d 46 42             	lea    eax,[esi+0x42]
c0002327:	e8 20 f8 ff ff       	call   c0001b4c <ld_word>
c000232c:	66 85 c0             	test   ax,ax
c000232f:	0f 84 56 ff ff ff    	je     c000228b <mount_volume+0xc6>
c0002335:	89 e9                	mov    ecx,ebp
c0002337:	0f b7 c0             	movzx  eax,ax
c000233a:	0f b6 e9             	movzx  ebp,cl
c000233d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002341:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002345:	89 f8                	mov    eax,edi
c0002347:	0f af cd             	imul   ecx,ebp
c000234a:	66 c1 e8 04          	shr    ax,0x4
c000234e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002352:	0f b7 c0             	movzx  eax,ax
c0002355:	01 c8                	add    eax,ecx
c0002357:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000235b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000235f:	39 c2                	cmp    edx,eax
c0002361:	0f 82 24 ff ff ff    	jb     c000228b <mount_volume+0xc6>
c0002367:	29 c2                	sub    edx,eax
c0002369:	89 d5                	mov    ebp,edx
c000236b:	89 d0                	mov    eax,edx
c000236d:	31 d2                	xor    edx,edx
c000236f:	f7 f3                	div    ebx
c0002371:	39 dd                	cmp    ebp,ebx
c0002373:	0f 82 12 ff ff ff    	jb     c000228b <mount_volume+0xc6>
c0002379:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000237e:	0f 87 07 ff ff ff    	ja     c000228b <mount_volume+0xc6>
c0002384:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002389:	0f 86 1f 01 00 00    	jbe    c00024ae <mount_volume+0x2e9>
c000238f:	bb 03 00 00 00       	mov    ebx,0x3
c0002394:	8d 68 02             	lea    ebp,[eax+0x2]
c0002397:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000239b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000239f:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00023a3:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00023a6:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00023a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00023ad:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00023b0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00023b4:	83 fb 03             	cmp    ebx,0x3
c00023b7:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00023ba:	75 21                	jne    c00023dd <mount_volume+0x218>
c00023bc:	8d 46 5e             	lea    eax,[esi+0x5e]
c00023bf:	e8 88 f7 ff ff       	call   c0001b4c <ld_word>
c00023c4:	66 09 c7             	or     di,ax
c00023c7:	0f 85 be fe ff ff    	jne    c000228b <mount_volume+0xc6>
c00023cd:	8d 46 60             	lea    eax,[esi+0x60]
c00023d0:	c1 e5 02             	shl    ebp,0x2
c00023d3:	e8 81 f7 ff ff       	call   c0001b59 <ld_dword>
c00023d8:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00023db:	eb 22                	jmp    c00023ff <mount_volume+0x23a>
c00023dd:	66 85 ff             	test   di,di
c00023e0:	0f 84 a5 fe ff ff    	je     c000228b <mount_volume+0xc6>
c00023e6:	01 c8                	add    eax,ecx
c00023e8:	83 fb 02             	cmp    ebx,0x2
c00023eb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00023ee:	75 04                	jne    c00023f4 <mount_volume+0x22f>
c00023f0:	01 ed                	add    ebp,ebp
c00023f2:	eb 0b                	jmp    c00023ff <mount_volume+0x23a>
c00023f4:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00023f8:	83 e5 01             	and    ebp,0x1
c00023fb:	d1 e8                	shr    eax,1
c00023fd:	01 c5                	add    ebp,eax
c00023ff:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002405:	c1 ed 09             	shr    ebp,0x9
c0002408:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000240c:	0f 87 79 fe ff ff    	ja     c000228b <mount_volume+0xc6>
c0002412:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002419:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002420:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002424:	83 fb 03             	cmp    ebx,0x3
c0002427:	75 6e                	jne    c0002497 <mount_volume+0x2d2>
c0002429:	8d 46 64             	lea    eax,[esi+0x64]
c000242c:	e8 1b f7 ff ff       	call   c0001b4c <ld_word>
c0002431:	66 48                	dec    ax
c0002433:	75 62                	jne    c0002497 <mount_volume+0x2d2>
c0002435:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002439:	89 f0                	mov    eax,esi
c000243b:	42                   	inc    edx
c000243c:	e8 31 fc ff ff       	call   c0002072 <move_window>
c0002441:	85 c0                	test   eax,eax
c0002443:	75 52                	jne    c0002497 <mount_volume+0x2d2>
c0002445:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002449:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000244f:	e8 f8 f6 ff ff       	call   c0001b4c <ld_word>
c0002454:	66 3d 55 aa          	cmp    ax,0xaa55
c0002458:	75 3d                	jne    c0002497 <mount_volume+0x2d2>
c000245a:	8d 46 34             	lea    eax,[esi+0x34]
c000245d:	e8 f7 f6 ff ff       	call   c0001b59 <ld_dword>
c0002462:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002467:	75 2e                	jne    c0002497 <mount_volume+0x2d2>
c0002469:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000246f:	e8 e5 f6 ff ff       	call   c0001b59 <ld_dword>
c0002474:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002479:	75 1c                	jne    c0002497 <mount_volume+0x2d2>
c000247b:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002481:	e8 d3 f6 ff ff       	call   c0001b59 <ld_dword>
c0002486:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002489:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000248f:	e8 c5 f6 ff ff       	call   c0001b59 <ld_dword>
c0002494:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002497:	66 a1 a0 f3 01 c0    	mov    ax,ds:0xc001f3a0
c000249d:	88 1e                	mov    BYTE PTR [esi],bl
c000249f:	40                   	inc    eax
c00024a0:	31 db                	xor    ebx,ebx
c00024a2:	66 a3 a0 f3 01 c0    	mov    ds:0xc001f3a0,ax
c00024a8:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00024ac:	eb 10                	jmp    c00024be <mount_volume+0x2f9>
c00024ae:	31 db                	xor    ebx,ebx
c00024b0:	3d f5 0f 00 00       	cmp    eax,0xff5
c00024b5:	0f 97 c3             	seta   bl
c00024b8:	43                   	inc    ebx
c00024b9:	e9 d6 fe ff ff       	jmp    c0002394 <mount_volume+0x1cf>
c00024be:	83 c4 2c             	add    esp,0x2c
c00024c1:	89 d8                	mov    eax,ebx
c00024c3:	5b                   	pop    ebx
c00024c4:	5e                   	pop    esi
c00024c5:	5f                   	pop    edi
c00024c6:	5d                   	pop    ebp
c00024c7:	c3                   	ret    

c00024c8 <put_fat>:
c00024c8:	55                   	push   ebp
c00024c9:	bd 02 00 00 00       	mov    ebp,0x2
c00024ce:	57                   	push   edi
c00024cf:	56                   	push   esi
c00024d0:	53                   	push   ebx
c00024d1:	83 ec 1c             	sub    esp,0x1c
c00024d4:	83 fa 01             	cmp    edx,0x1
c00024d7:	0f 86 31 01 00 00    	jbe    c000260e <put_fat+0x146>
c00024dd:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00024e0:	0f 86 28 01 00 00    	jbe    c000260e <put_fat+0x146>
c00024e6:	89 c6                	mov    esi,eax
c00024e8:	89 cf                	mov    edi,ecx
c00024ea:	8a 00                	mov    al,BYTE PTR [eax]
c00024ec:	89 d3                	mov    ebx,edx
c00024ee:	3c 02                	cmp    al,0x2
c00024f0:	0f 84 ac 00 00 00    	je     c00025a2 <put_fat+0xda>
c00024f6:	3c 03                	cmp    al,0x3
c00024f8:	0f 84 d1 00 00 00    	je     c00025cf <put_fat+0x107>
c00024fe:	fe c8                	dec    al
c0002500:	0f 85 08 01 00 00    	jne    c000260e <put_fat+0x146>
c0002506:	89 d1                	mov    ecx,edx
c0002508:	89 f0                	mov    eax,esi
c000250a:	d1 e9                	shr    ecx,1
c000250c:	01 d1                	add    ecx,edx
c000250e:	89 ca                	mov    edx,ecx
c0002510:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002514:	c1 ea 09             	shr    edx,0x9
c0002517:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000251a:	e8 53 fb ff ff       	call   c0002072 <move_window>
c000251f:	89 c5                	mov    ebp,eax
c0002521:	85 c0                	test   eax,eax
c0002523:	0f 85 e5 00 00 00    	jne    c000260e <put_fat+0x146>
c0002529:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000252d:	8d 46 34             	lea    eax,[esi+0x34]
c0002530:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002534:	8d 41 01             	lea    eax,[ecx+0x1]
c0002537:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000253d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002541:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002545:	89 f8                	mov    eax,edi
c0002547:	83 e3 01             	and    ebx,0x1
c000254a:	74 0c                	je     c0002558 <put_fat+0x90>
c000254c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000254e:	89 f8                	mov    eax,edi
c0002550:	83 e2 0f             	and    edx,0xf
c0002553:	c1 e0 04             	shl    eax,0x4
c0002556:	09 d0                	or     eax,edx
c0002558:	88 01                	mov    BYTE PTR [ecx],al
c000255a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000255e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002562:	c1 ea 09             	shr    edx,0x9
c0002565:	89 f0                	mov    eax,esi
c0002567:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000256a:	e8 03 fb ff ff       	call   c0002072 <move_window>
c000256f:	89 c5                	mov    ebp,eax
c0002571:	85 c0                	test   eax,eax
c0002573:	0f 85 95 00 00 00    	jne    c000260e <put_fat+0x146>
c0002579:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000257d:	25 ff 01 00 00       	and    eax,0x1ff
c0002582:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002586:	85 db                	test   ebx,ebx
c0002588:	74 07                	je     c0002591 <put_fat+0xc9>
c000258a:	c1 ef 04             	shr    edi,0x4
c000258d:	89 f9                	mov    ecx,edi
c000258f:	eb 0d                	jmp    c000259e <put_fat+0xd6>
c0002591:	8a 08                	mov    cl,BYTE PTR [eax]
c0002593:	c1 ef 08             	shr    edi,0x8
c0002596:	83 e1 f0             	and    ecx,0xfffffff0
c0002599:	83 e7 0f             	and    edi,0xf
c000259c:	09 f9                	or     ecx,edi
c000259e:	88 08                	mov    BYTE PTR [eax],cl
c00025a0:	eb 27                	jmp    c00025c9 <put_fat+0x101>
c00025a2:	c1 ea 08             	shr    edx,0x8
c00025a5:	89 f0                	mov    eax,esi
c00025a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00025aa:	e8 c3 fa ff ff       	call   c0002072 <move_window>
c00025af:	89 c5                	mov    ebp,eax
c00025b1:	85 c0                	test   eax,eax
c00025b3:	75 59                	jne    c000260e <put_fat+0x146>
c00025b5:	01 db                	add    ebx,ebx
c00025b7:	0f b7 d7             	movzx  edx,di
c00025ba:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00025c0:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00025c4:	e8 a8 f5 ff ff       	call   c0001b71 <st_word>
c00025c9:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00025cd:	eb 3f                	jmp    c000260e <put_fat+0x146>
c00025cf:	c1 ea 07             	shr    edx,0x7
c00025d2:	89 f0                	mov    eax,esi
c00025d4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00025d7:	e8 96 fa ff ff       	call   c0002072 <move_window>
c00025dc:	89 c5                	mov    ebp,eax
c00025de:	85 c0                	test   eax,eax
c00025e0:	75 2c                	jne    c000260e <put_fat+0x146>
c00025e2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00025e8:	c1 e3 02             	shl    ebx,0x2
c00025eb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00025f1:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00025f5:	89 d8                	mov    eax,ebx
c00025f7:	e8 5d f5 ff ff       	call   c0001b59 <ld_dword>
c00025fc:	25 00 00 00 f0       	and    eax,0xf0000000
c0002601:	09 f8                	or     eax,edi
c0002603:	89 c2                	mov    edx,eax
c0002605:	89 d8                	mov    eax,ebx
c0002607:	e8 69 f5 ff ff       	call   c0001b75 <st_dword>
c000260c:	eb bb                	jmp    c00025c9 <put_fat+0x101>
c000260e:	83 c4 1c             	add    esp,0x1c
c0002611:	89 e8                	mov    eax,ebp
c0002613:	5b                   	pop    ebx
c0002614:	5e                   	pop    esi
c0002615:	5f                   	pop    edi
c0002616:	5d                   	pop    ebp
c0002617:	c3                   	ret    

c0002618 <dir_clear>:
c0002618:	55                   	push   ebp
c0002619:	57                   	push   edi
c000261a:	56                   	push   esi
c000261b:	89 c6                	mov    esi,eax
c000261d:	53                   	push   ebx
c000261e:	83 ec 1c             	sub    esp,0x1c
c0002621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002625:	e8 e5 f9 ff ff       	call   c000200f <sync_window>
c000262a:	85 c0                	test   eax,eax
c000262c:	0f 85 c0 00 00 00    	jne    c00026f2 <dir_clear+0xda>
c0002632:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002636:	89 f0                	mov    eax,esi
c0002638:	e8 55 f7 ff ff       	call   c0001d92 <clst2sect>
c000263d:	31 d2                	xor    edx,edx
c000263f:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002642:	89 c5                	mov    ebp,eax
c0002644:	b9 00 02 00 00       	mov    ecx,0x200
c0002649:	8d 46 34             	lea    eax,[esi+0x34]
c000264c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002650:	e8 38 f5 ff ff       	call   c0001b8d <mem_set>
c0002655:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002659:	c1 e3 09             	shl    ebx,0x9
c000265c:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002662:	76 1b                	jbe    c000267f <dir_clear+0x67>
c0002664:	bb 00 80 00 00       	mov    ebx,0x8000
c0002669:	eb 14                	jmp    c000267f <dir_clear+0x67>
c000266b:	83 ec 0c             	sub    esp,0xc
c000266e:	53                   	push   ebx
c000266f:	e8 24 32 00 00       	call   c0005898 <ff_memalloc>
c0002674:	83 c4 10             	add    esp,0x10
c0002677:	89 c7                	mov    edi,eax
c0002679:	85 c0                	test   eax,eax
c000267b:	75 7c                	jne    c00026f9 <dir_clear+0xe1>
c000267d:	d1 eb                	shr    ebx,1
c000267f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002685:	77 e4                	ja     c000266b <dir_clear+0x53>
c0002687:	31 db                	xor    ebx,ebx
c0002689:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000268d:	39 d8                	cmp    eax,ebx
c000268f:	76 53                	jbe    c00026e4 <dir_clear+0xcc>
c0002691:	6a 01                	push   0x1
c0002693:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002696:	50                   	push   eax
c0002697:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000269b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000269f:	50                   	push   eax
c00026a0:	e8 72 f4 ff ff       	call   c0001b17 <disk_write>
c00026a5:	83 c4 10             	add    esp,0x10
c00026a8:	85 c0                	test   eax,eax
c00026aa:	75 38                	jne    c00026e4 <dir_clear+0xcc>
c00026ac:	43                   	inc    ebx
c00026ad:	eb da                	jmp    c0002689 <dir_clear+0x71>
c00026af:	52                   	push   edx
c00026b0:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00026b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00026b7:	50                   	push   eax
c00026b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026bc:	57                   	push   edi
c00026bd:	50                   	push   eax
c00026be:	e8 54 f4 ff ff       	call   c0001b17 <disk_write>
c00026c3:	83 c4 10             	add    esp,0x10
c00026c6:	85 c0                	test   eax,eax
c00026c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026cc:	75 0a                	jne    c00026d8 <dir_clear+0xc0>
c00026ce:	01 d3                	add    ebx,edx
c00026d0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00026d4:	39 d8                	cmp    eax,ebx
c00026d6:	77 d7                	ja     c00026af <dir_clear+0x97>
c00026d8:	83 ec 0c             	sub    esp,0xc
c00026db:	57                   	push   edi
c00026dc:	e8 cf 31 00 00       	call   c00058b0 <ff_memfree>
c00026e1:	83 c4 10             	add    esp,0x10
c00026e4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00026e8:	39 d8                	cmp    eax,ebx
c00026ea:	0f 95 c0             	setne  al
c00026ed:	0f b6 c0             	movzx  eax,al
c00026f0:	eb 19                	jmp    c000270b <dir_clear+0xf3>
c00026f2:	b8 01 00 00 00       	mov    eax,0x1
c00026f7:	eb 12                	jmp    c000270b <dir_clear+0xf3>
c00026f9:	89 d9                	mov    ecx,ebx
c00026fb:	31 d2                	xor    edx,edx
c00026fd:	e8 8b f4 ff ff       	call   c0001b8d <mem_set>
c0002702:	89 da                	mov    edx,ebx
c0002704:	31 db                	xor    ebx,ebx
c0002706:	c1 ea 09             	shr    edx,0x9
c0002709:	eb c5                	jmp    c00026d0 <dir_clear+0xb8>
c000270b:	83 c4 1c             	add    esp,0x1c
c000270e:	5b                   	pop    ebx
c000270f:	5e                   	pop    esi
c0002710:	5f                   	pop    edi
c0002711:	5d                   	pop    ebp
c0002712:	c3                   	ret    

c0002713 <create_name>:
c0002713:	55                   	push   ebp
c0002714:	89 d5                	mov    ebp,edx
c0002716:	57                   	push   edi
c0002717:	89 c7                	mov    edi,eax
c0002719:	56                   	push   esi
c000271a:	31 f6                	xor    esi,esi
c000271c:	53                   	push   ebx
c000271d:	83 ec 3c             	sub    esp,0x3c
c0002720:	8b 02                	mov    eax,DWORD PTR [edx]
c0002722:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002726:	8b 07                	mov    eax,DWORD PTR [edi]
c0002728:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000272b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000272f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002733:	e8 9b f4 ff ff       	call   c0001bd3 <tchar2uni>
c0002738:	89 c3                	mov    ebx,eax
c000273a:	83 f8 ff             	cmp    eax,0xffffffff
c000273d:	75 0a                	jne    c0002749 <create_name+0x36>
c000273f:	b8 06 00 00 00       	mov    eax,0x6
c0002744:	e9 9e 02 00 00       	jmp    c00029e7 <create_name+0x2d4>
c0002749:	3d ff ff 00 00       	cmp    eax,0xffff
c000274e:	76 0c                	jbe    c000275c <create_name+0x49>
c0002750:	c1 e8 10             	shr    eax,0x10
c0002753:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002757:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000275b:	46                   	inc    esi
c000275c:	66 83 fb 1f          	cmp    bx,0x1f
c0002760:	76 4f                	jbe    c00027b1 <create_name+0x9e>
c0002762:	66 83 fb 5c          	cmp    bx,0x5c
c0002766:	74 35                	je     c000279d <create_name+0x8a>
c0002768:	66 83 fb 2f          	cmp    bx,0x2f
c000276c:	74 2f                	je     c000279d <create_name+0x8a>
c000276e:	66 83 fb 7f          	cmp    bx,0x7f
c0002772:	77 11                	ja     c0002785 <create_name+0x72>
c0002774:	0f b7 d3             	movzx  edx,bx
c0002777:	b8 62 c4 01 c0       	mov    eax,0xc001c462
c000277c:	e8 3a f4 ff ff       	call   c0001bbb <chk_chr>
c0002781:	85 c0                	test   eax,eax
c0002783:	75 ba                	jne    c000273f <create_name+0x2c>
c0002785:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000278b:	77 b2                	ja     c000273f <create_name+0x2c>
c000278d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002791:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002795:	46                   	inc    esi
c0002796:	eb 97                	jmp    c000272f <create_name+0x1c>
c0002798:	40                   	inc    eax
c0002799:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000279d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00027a1:	8a 10                	mov    dl,BYTE PTR [eax]
c00027a3:	80 fa 2f             	cmp    dl,0x2f
c00027a6:	74 f0                	je     c0002798 <create_name+0x85>
c00027a8:	80 fa 5c             	cmp    dl,0x5c
c00027ab:	74 eb                	je     c0002798 <create_name+0x85>
c00027ad:	31 db                	xor    ebx,ebx
c00027af:	eb 02                	jmp    c00027b3 <create_name+0xa0>
c00027b1:	b3 04                	mov    bl,0x4
c00027b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00027b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00027ba:	85 f6                	test   esi,esi
c00027bc:	74 18                	je     c00027d6 <create_name+0xc3>
c00027be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027c2:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00027c7:	66 83 f8 20          	cmp    ax,0x20
c00027cb:	74 06                	je     c00027d3 <create_name+0xc0>
c00027cd:	66 83 f8 2e          	cmp    ax,0x2e
c00027d1:	75 03                	jne    c00027d6 <create_name+0xc3>
c00027d3:	4e                   	dec    esi
c00027d4:	eb e4                	jmp    c00027ba <create_name+0xa7>
c00027d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027da:	31 ed                	xor    ebp,ebp
c00027dc:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00027e2:	85 f6                	test   esi,esi
c00027e4:	0f 84 55 ff ff ff    	je     c000273f <create_name+0x2c>
c00027ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027ee:	8d 55 01             	lea    edx,[ebp+0x1]
c00027f1:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00027f5:	66 83 f8 20          	cmp    ax,0x20
c00027f9:	75 04                	jne    c00027ff <create_name+0xec>
c00027fb:	89 d5                	mov    ebp,edx
c00027fd:	eb eb                	jmp    c00027ea <create_name+0xd7>
c00027ff:	85 ed                	test   ebp,ebp
c0002801:	75 06                	jne    c0002809 <create_name+0xf6>
c0002803:	66 83 f8 2e          	cmp    ax,0x2e
c0002807:	75 08                	jne    c0002811 <create_name+0xfe>
c0002809:	83 cb 03             	or     ebx,0x3
c000280c:	eb 03                	jmp    c0002811 <create_name+0xfe>
c000280e:	4e                   	dec    esi
c000280f:	74 0c                	je     c000281d <create_name+0x10a>
c0002811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002815:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c000281b:	75 f1                	jne    c000280e <create_name+0xfb>
c000281d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002822:	8d 47 20             	lea    eax,[edi+0x20]
c0002825:	ba 20 00 00 00       	mov    edx,0x20
c000282a:	e8 5e f3 ff ff       	call   c0001b8d <mem_set>
c000282f:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002837:	31 c9                	xor    ecx,ecx
c0002839:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000283e:	8d 45 01             	lea    eax,[ebp+0x1]
c0002841:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002849:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c000284d:	66 85 ed             	test   bp,bp
c0002850:	0f 84 30 01 00 00    	je     c0002986 <create_name+0x273>
c0002856:	66 83 fd 20          	cmp    bp,0x20
c000285a:	74 10                	je     c000286c <create_name+0x159>
c000285c:	66 83 fd 2e          	cmp    bp,0x2e
c0002860:	75 13                	jne    c0002875 <create_name+0x162>
c0002862:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002866:	0f 84 6b 01 00 00    	je     c00029d7 <create_name+0x2c4>
c000286c:	83 cb 03             	or     ebx,0x3
c000286f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002873:	eb c9                	jmp    c000283e <create_name+0x12b>
c0002875:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002879:	73 0b                	jae    c0002886 <create_name+0x173>
c000287b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c000287f:	75 47                	jne    c00028c8 <create_name+0x1b5>
c0002881:	e9 51 01 00 00       	jmp    c00029d7 <create_name+0x2c4>
c0002886:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c000288b:	75 10                	jne    c000289d <create_name+0x18a>
c000288d:	83 cb 03             	or     ebx,0x3
c0002890:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002898:	e9 e9 00 00 00       	jmp    c0002986 <create_name+0x273>
c000289d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00028a1:	74 0d                	je     c00028b0 <create_name+0x19d>
c00028a3:	83 cb 03             	or     ebx,0x3
c00028a6:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00028aa:	0f 87 d6 00 00 00    	ja     c0002986 <create_name+0x273>
c00028b0:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c00028b5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00028b9:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c00028c1:	b9 08 00 00 00       	mov    ecx,0x8
c00028c6:	eb a7                	jmp    c000286f <create_name+0x15c>
c00028c8:	66 83 fd 7f          	cmp    bp,0x7f
c00028cc:	76 68                	jbe    c0002936 <create_name+0x223>
c00028ce:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00028d2:	88 da                	mov    dl,bl
c00028d4:	83 ca 02             	or     edx,0x2
c00028d7:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c00028db:	50                   	push   eax
c00028dc:	50                   	push   eax
c00028dd:	68 b5 01 00 00       	push   0x1b5
c00028e2:	55                   	push   ebp
c00028e3:	e8 e0 2f 00 00       	call   c00058c8 <ff_uni2oem>
c00028e8:	83 c4 10             	add    esp,0x10
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	a8 80                	test   al,0x80
c00028ef:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00028f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00028f7:	74 0c                	je     c0002905 <create_name+0x1f2>
c00028f9:	83 e5 7f             	and    ebp,0x7f
c00028fc:	0f b6 ad 20 c5 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3ae0]
c0002903:	eb 2a                	jmp    c000292f <create_name+0x21c>
c0002905:	66 3d ff 00          	cmp    ax,0xff
c0002909:	76 24                	jbe    c000292f <create_name+0x21c>
c000290b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000290f:	48                   	dec    eax
c0002910:	39 c8                	cmp    eax,ecx
c0002912:	77 0c                	ja     c0002920 <create_name+0x20d>
c0002914:	83 cb 03             	or     ebx,0x3
c0002917:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000291b:	e9 4f ff ff ff       	jmp    c000286f <create_name+0x15c>
c0002920:	89 e8                	mov    eax,ebp
c0002922:	88 d3                	mov    bl,dl
c0002924:	66 c1 e8 08          	shr    ax,0x8
c0002928:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c000292c:	41                   	inc    ecx
c000292d:	eb 4b                	jmp    c000297a <create_name+0x267>
c000292f:	88 d3                	mov    bl,dl
c0002931:	66 85 ed             	test   bp,bp
c0002934:	74 19                	je     c000294f <create_name+0x23c>
c0002936:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000293a:	0f b7 d5             	movzx  edx,bp
c000293d:	b8 6b c4 01 c0       	mov    eax,0xc001c46b
c0002942:	e8 74 f2 ff ff       	call   c0001bbb <chk_chr>
c0002947:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000294b:	85 c0                	test   eax,eax
c000294d:	74 0a                	je     c0002959 <create_name+0x246>
c000294f:	83 cb 03             	or     ebx,0x3
c0002952:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002957:	eb 21                	jmp    c000297a <create_name+0x267>
c0002959:	8d 45 bf             	lea    eax,[ebp-0x41]
c000295c:	66 83 f8 19          	cmp    ax,0x19
c0002960:	77 07                	ja     c0002969 <create_name+0x256>
c0002962:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002967:	eb 11                	jmp    c000297a <create_name+0x267>
c0002969:	8d 45 9f             	lea    eax,[ebp-0x61]
c000296c:	66 83 f8 19          	cmp    ax,0x19
c0002970:	77 08                	ja     c000297a <create_name+0x267>
c0002972:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002977:	83 ed 20             	sub    ebp,0x20
c000297a:	89 e8                	mov    eax,ebp
c000297c:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002980:	41                   	inc    ecx
c0002981:	e9 e9 fe ff ff       	jmp    c000286f <create_name+0x15c>
c0002986:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c000298a:	75 04                	jne    c0002990 <create_name+0x27d>
c000298c:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002990:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002995:	75 05                	jne    c000299c <create_name+0x289>
c0002997:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c000299c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00029a0:	83 e0 0c             	and    eax,0xc
c00029a3:	3c 0c                	cmp    al,0xc
c00029a5:	74 0b                	je     c00029b2 <create_name+0x29f>
c00029a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00029ab:	83 e0 03             	and    eax,0x3
c00029ae:	3c 03                	cmp    al,0x3
c00029b0:	75 05                	jne    c00029b7 <create_name+0x2a4>
c00029b2:	83 cb 02             	or     ebx,0x2
c00029b5:	eb 19                	jmp    c00029d0 <create_name+0x2bd>
c00029b7:	f6 c3 02             	test   bl,0x2
c00029ba:	75 14                	jne    c00029d0 <create_name+0x2bd>
c00029bc:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00029c1:	74 03                	je     c00029c6 <create_name+0x2b3>
c00029c3:	83 cb 10             	or     ebx,0x10
c00029c6:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c00029cb:	74 03                	je     c00029d0 <create_name+0x2bd>
c00029cd:	83 cb 08             	or     ebx,0x8
c00029d0:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c00029d3:	31 c0                	xor    eax,eax
c00029d5:	eb 10                	jmp    c00029e7 <create_name+0x2d4>
c00029d7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c00029dc:	0f 85 ce fe ff ff    	jne    c00028b0 <create_name+0x19d>
c00029e2:	e9 a6 fe ff ff       	jmp    c000288d <create_name+0x17a>
c00029e7:	83 c4 3c             	add    esp,0x3c
c00029ea:	5b                   	pop    ebx
c00029eb:	5e                   	pop    esi
c00029ec:	5f                   	pop    edi
c00029ed:	5d                   	pop    ebp
c00029ee:	c3                   	ret    

c00029ef <cmp_lfn>:
c00029ef:	55                   	push   ebp
c00029f0:	57                   	push   edi
c00029f1:	89 d7                	mov    edi,edx
c00029f3:	56                   	push   esi
c00029f4:	53                   	push   ebx
c00029f5:	83 ec 1c             	sub    esp,0x1c
c00029f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029fc:	8d 42 1a             	lea    eax,[edx+0x1a]
c00029ff:	e8 48 f1 ff ff       	call   c0001b4c <ld_word>
c0002a04:	66 85 c0             	test   ax,ax
c0002a07:	74 07                	je     c0002a10 <cmp_lfn+0x21>
c0002a09:	31 c0                	xor    eax,eax
c0002a0b:	e9 9a 00 00 00       	jmp    c0002aaa <cmp_lfn+0xbb>
c0002a10:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002a12:	bd 01 00 00 00       	mov    ebp,0x1
c0002a17:	83 e3 3f             	and    ebx,0x3f
c0002a1a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002a22:	4b                   	dec    ebx
c0002a23:	6b db 0d             	imul   ebx,ebx,0xd
c0002a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a2a:	0f b6 80 a0 c5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3a60]
c0002a31:	01 f8                	add    eax,edi
c0002a33:	e8 14 f1 ff ff       	call   c0001b4c <ld_word>
c0002a38:	66 85 ed             	test   bp,bp
c0002a3b:	89 c6                	mov    esi,eax
c0002a3d:	74 3c                	je     c0002a7b <cmp_lfn+0x8c>
c0002a3f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002a45:	77 c2                	ja     c0002a09 <cmp_lfn+0x1a>
c0002a47:	83 ec 0c             	sub    esp,0xc
c0002a4a:	0f b7 c0             	movzx  eax,ax
c0002a4d:	50                   	push   eax
c0002a4e:	e8 8d 2f 00 00       	call   c00059e0 <ff_wtoupper>
c0002a53:	89 c5                	mov    ebp,eax
c0002a55:	8d 43 01             	lea    eax,[ebx+0x1]
c0002a58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002a5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002a60:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002a64:	89 04 24             	mov    DWORD PTR [esp],eax
c0002a67:	e8 74 2f 00 00       	call   c00059e0 <ff_wtoupper>
c0002a6c:	83 c4 10             	add    esp,0x10
c0002a6f:	39 c5                	cmp    ebp,eax
c0002a71:	75 96                	jne    c0002a09 <cmp_lfn+0x1a>
c0002a73:	89 f5                	mov    ebp,esi
c0002a75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002a79:	eb 04                	jmp    c0002a7f <cmp_lfn+0x90>
c0002a7b:	66 46                	inc    si
c0002a7d:	75 8a                	jne    c0002a09 <cmp_lfn+0x1a>
c0002a7f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002a83:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002a88:	75 9c                	jne    c0002a26 <cmp_lfn+0x37>
c0002a8a:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002a8d:	74 16                	je     c0002aa5 <cmp_lfn+0xb6>
c0002a8f:	66 85 ed             	test   bp,bp
c0002a92:	74 11                	je     c0002aa5 <cmp_lfn+0xb6>
c0002a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a98:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002a9d:	0f 94 c0             	sete   al
c0002aa0:	0f b6 c0             	movzx  eax,al
c0002aa3:	eb 05                	jmp    c0002aaa <cmp_lfn+0xbb>
c0002aa5:	b8 01 00 00 00       	mov    eax,0x1
c0002aaa:	83 c4 1c             	add    esp,0x1c
c0002aad:	5b                   	pop    ebx
c0002aae:	5e                   	pop    esi
c0002aaf:	5f                   	pop    edi
c0002ab0:	5d                   	pop    ebp
c0002ab1:	c3                   	ret    

c0002ab2 <sync_fs>:
c0002ab2:	56                   	push   esi
c0002ab3:	53                   	push   ebx
c0002ab4:	53                   	push   ebx
c0002ab5:	89 c3                	mov    ebx,eax
c0002ab7:	e8 53 f5 ff ff       	call   c000200f <sync_window>
c0002abc:	85 c0                	test   eax,eax
c0002abe:	0f 85 9a 00 00 00    	jne    c0002b5e <sync_fs+0xac>
c0002ac4:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002ac7:	75 7b                	jne    c0002b44 <sync_fs+0x92>
c0002ac9:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002acd:	75 75                	jne    c0002b44 <sync_fs+0x92>
c0002acf:	b9 00 02 00 00       	mov    ecx,0x200
c0002ad4:	8d 73 34             	lea    esi,[ebx+0x34]
c0002ad7:	31 d2                	xor    edx,edx
c0002ad9:	89 f0                	mov    eax,esi
c0002adb:	e8 ad f0 ff ff       	call   c0001b8d <mem_set>
c0002ae0:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ae6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002aeb:	e8 81 f0 ff ff       	call   c0001b71 <st_word>
c0002af0:	ba 52 52 61 41       	mov    edx,0x41615252
c0002af5:	89 f0                	mov    eax,esi
c0002af7:	e8 79 f0 ff ff       	call   c0001b75 <st_dword>
c0002afc:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002b02:	ba 72 72 41 61       	mov    edx,0x61417272
c0002b07:	e8 69 f0 ff ff       	call   c0001b75 <st_dword>
c0002b0c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002b0f:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002b15:	e8 5b f0 ff ff       	call   c0001b75 <st_dword>
c0002b1a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002b1d:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002b23:	e8 4d f0 ff ff       	call   c0001b75 <st_dword>
c0002b28:	6a 01                	push   0x1
c0002b2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002b2d:	40                   	inc    eax
c0002b2e:	50                   	push   eax
c0002b2f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002b32:	56                   	push   esi
c0002b33:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002b37:	50                   	push   eax
c0002b38:	e8 da ef ff ff       	call   c0001b17 <disk_write>
c0002b3d:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002b41:	83 c4 10             	add    esp,0x10
c0002b44:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002b48:	51                   	push   ecx
c0002b49:	6a 00                	push   0x0
c0002b4b:	6a 00                	push   0x0
c0002b4d:	50                   	push   eax
c0002b4e:	e8 da ef ff ff       	call   c0001b2d <disk_ioctl>
c0002b53:	83 c4 10             	add    esp,0x10
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 95 c0             	setne  al
c0002b5b:	0f b6 c0             	movzx  eax,al
c0002b5e:	5a                   	pop    edx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	c3                   	ret    

c0002b62 <create_partition>:
c0002b62:	55                   	push   ebp
c0002b63:	0f b6 c0             	movzx  eax,al
c0002b66:	57                   	push   edi
c0002b67:	56                   	push   esi
c0002b68:	53                   	push   ebx
c0002b69:	83 ec 40             	sub    esp,0x40
c0002b6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b70:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002b74:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b78:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002b7c:	50                   	push   eax
c0002b7d:	6a 01                	push   0x1
c0002b7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002b83:	e8 a5 ef ff ff       	call   c0001b2d <disk_ioctl>
c0002b88:	83 c4 10             	add    esp,0x10
c0002b8b:	85 c0                	test   eax,eax
c0002b8d:	0f 85 69 01 00 00    	jne    c0002cfc <create_partition+0x19a>
c0002b93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b97:	b9 05 00 00 00       	mov    ecx,0x5
c0002b9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ba0:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bb0:	f7 f3                	div    ebx
c0002bb2:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002bb7:	76 0c                	jbe    c0002bc5 <create_partition+0x63>
c0002bb9:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002bbd:	49                   	dec    ecx
c0002bbe:	75 e5                	jne    c0002ba5 <create_partition+0x43>
c0002bc0:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002bc5:	b9 00 02 00 00       	mov    ecx,0x200
c0002bca:	31 d2                	xor    edx,edx
c0002bcc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002bd0:	e8 b8 ef ff ff       	call   c0001b8d <mem_set>
c0002bd5:	b9 64 00 00 00       	mov    ecx,0x64
c0002bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bde:	31 d2                	xor    edx,edx
c0002be0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002be8:	f7 f1                	div    ecx
c0002bea:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002bef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002bf3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002bf7:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002bfd:	85 c9                	test   ecx,ecx
c0002bff:	75 34                	jne    c0002c35 <create_partition+0xd3>
c0002c01:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002c05:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002c0a:	05 fe 01 00 00       	add    eax,0x1fe
c0002c0f:	e8 5d ef ff ff       	call   c0001b71 <st_word>
c0002c14:	6a 01                	push   0x1
c0002c16:	6a 00                	push   0x0
c0002c18:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002c20:	e8 f2 ee ff ff       	call   c0001b17 <disk_write>
c0002c25:	83 c4 10             	add    esp,0x10
c0002c28:	85 c0                	test   eax,eax
c0002c2a:	0f 95 c0             	setne  al
c0002c2d:	0f b6 c0             	movzx  eax,al
c0002c30:	e9 cc 00 00 00       	jmp    c0002d01 <create_partition+0x19f>
c0002c35:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002c39:	76 c6                	jbe    c0002c01 <create_partition+0x9f>
c0002c3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002c3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002c43:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002c46:	83 fe 64             	cmp    esi,0x64
c0002c49:	77 0d                	ja     c0002c58 <create_partition+0xf6>
c0002c4b:	74 07                	je     c0002c54 <create_partition+0xf2>
c0002c4d:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002c52:	eb 04                	jmp    c0002c58 <create_partition+0xf6>
c0002c54:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002c58:	31 c0                	xor    eax,eax
c0002c5a:	89 f2                	mov    edx,esi
c0002c5c:	01 ca                	add    edx,ecx
c0002c5e:	0f 92 c0             	setb   al
c0002c61:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002c65:	77 04                	ja     c0002c6b <create_partition+0x109>
c0002c67:	85 c0                	test   eax,eax
c0002c69:	74 08                	je     c0002c73 <create_partition+0x111>
c0002c6b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002c6f:	29 ce                	sub    esi,ecx
c0002c71:	eb 04                	jmp    c0002c77 <create_partition+0x115>
c0002c73:	85 f6                	test   esi,esi
c0002c75:	74 8a                	je     c0002c01 <create_partition+0x9f>
c0002c77:	89 ca                	mov    edx,ecx
c0002c79:	89 d8                	mov    eax,ebx
c0002c7b:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002c80:	e8 f0 ee ff ff       	call   c0001b75 <st_dword>
c0002c85:	8d 43 04             	lea    eax,[ebx+0x4]
c0002c88:	89 f2                	mov    edx,esi
c0002c8a:	83 c3 10             	add    ebx,0x10
c0002c8d:	e8 e3 ee ff ff       	call   c0001b75 <st_dword>
c0002c92:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002c97:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002c9b:	31 d2                	xor    edx,edx
c0002c9d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002ca0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002ca4:	89 c8                	mov    eax,ecx
c0002ca6:	01 f1                	add    ecx,esi
c0002ca8:	f7 f5                	div    ebp
c0002caa:	89 d5                	mov    ebp,edx
c0002cac:	31 d2                	xor    edx,edx
c0002cae:	45                   	inc    ebp
c0002caf:	f7 f7                	div    edi
c0002cb1:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002cb4:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002cb7:	89 c2                	mov    edx,eax
c0002cb9:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002cbc:	c1 ea 02             	shr    edx,0x2
c0002cbf:	83 e2 c0             	and    edx,0xffffffc0
c0002cc2:	09 ea                	or     edx,ebp
c0002cc4:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002cc9:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ccc:	31 d2                	xor    edx,edx
c0002cce:	f7 f5                	div    ebp
c0002cd0:	89 d6                	mov    esi,edx
c0002cd2:	31 d2                	xor    edx,edx
c0002cd4:	46                   	inc    esi
c0002cd5:	f7 f7                	div    edi
c0002cd7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002cda:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002cdd:	89 c7                	mov    edi,eax
c0002cdf:	c1 ef 02             	shr    edi,0x2
c0002ce2:	83 e7 c0             	and    edi,0xffffffc0
c0002ce5:	09 fe                	or     esi,edi
c0002ce7:	89 f2                	mov    edx,esi
c0002ce9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002cec:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002cf1:	0f 85 06 ff ff ff    	jne    c0002bfd <create_partition+0x9b>
c0002cf7:	e9 05 ff ff ff       	jmp    c0002c01 <create_partition+0x9f>
c0002cfc:	b8 01 00 00 00       	mov    eax,0x1
c0002d01:	83 c4 3c             	add    esp,0x3c
c0002d04:	5b                   	pop    ebx
c0002d05:	5e                   	pop    esi
c0002d06:	5f                   	pop    edi
c0002d07:	5d                   	pop    ebp
c0002d08:	c3                   	ret    

c0002d09 <get_fileinfo>:
c0002d09:	55                   	push   ebp
c0002d0a:	57                   	push   edi
c0002d0b:	56                   	push   esi
c0002d0c:	53                   	push   ebx
c0002d0d:	83 ec 1c             	sub    esp,0x1c
c0002d10:	8b 30                	mov    esi,DWORD PTR [eax]
c0002d12:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002d16:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002d1a:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002d1e:	0f 84 c1 01 00 00    	je     c0002ee5 <get_fileinfo+0x1dc>
c0002d24:	89 d3                	mov    ebx,edx
c0002d26:	89 c6                	mov    esi,eax
c0002d28:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002d2c:	74 6a                	je     c0002d98 <get_fileinfo+0x8f>
c0002d2e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002d36:	31 ed                	xor    ebp,ebp
c0002d38:	31 ff                	xor    edi,edi
c0002d3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d45:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002d49:	66 85 d2             	test   dx,dx
c0002d4c:	74 3e                	je     c0002d8c <get_fileinfo+0x83>
c0002d4e:	66 85 ed             	test   bp,bp
c0002d51:	75 0c                	jne    c0002d5f <get_fileinfo+0x56>
c0002d53:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002d59:	66 3d ff 07          	cmp    ax,0x7ff
c0002d5d:	76 22                	jbe    c0002d81 <get_fileinfo+0x78>
c0002d5f:	b9 ff 00 00 00       	mov    ecx,0xff
c0002d64:	89 e8                	mov    eax,ebp
c0002d66:	29 f9                	sub    ecx,edi
c0002d68:	c1 e0 10             	shl    eax,0x10
c0002d6b:	09 d0                	or     eax,edx
c0002d6d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002d71:	e8 23 ef ff ff       	call   c0001c99 <put_utf>
c0002d76:	84 c0                	test   al,al
c0002d78:	74 10                	je     c0002d8a <get_fileinfo+0x81>
c0002d7a:	0f b6 c0             	movzx  eax,al
c0002d7d:	31 d2                	xor    edx,edx
c0002d7f:	01 c7                	add    edi,eax
c0002d81:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002d86:	89 d5                	mov    ebp,edx
c0002d88:	eb b0                	jmp    c0002d3a <get_fileinfo+0x31>
c0002d8a:	31 ff                	xor    edi,edi
c0002d8c:	66 85 ed             	test   bp,bp
c0002d8f:	74 02                	je     c0002d93 <get_fileinfo+0x8a>
c0002d91:	31 ff                	xor    edi,edi
c0002d93:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002d98:	31 ff                	xor    edi,edi
c0002d9a:	31 c9                	xor    ecx,ecx
c0002d9c:	83 f9 0a             	cmp    ecx,0xa
c0002d9f:	0f 87 ad 00 00 00    	ja     c0002e52 <get_fileinfo+0x149>
c0002da5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002da8:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002dab:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002daf:	66 83 fa 20          	cmp    dx,0x20
c0002db3:	0f 84 92 00 00 00    	je     c0002e4b <get_fileinfo+0x142>
c0002db9:	66 83 fa 05          	cmp    dx,0x5
c0002dbd:	75 05                	jne    c0002dc4 <get_fileinfo+0xbb>
c0002dbf:	ba e5 00 00 00       	mov    edx,0xe5
c0002dc4:	83 ff 0b             	cmp    edi,0xb
c0002dc7:	77 0b                	ja     c0002dd4 <get_fileinfo+0xcb>
c0002dc9:	83 fd 09             	cmp    ebp,0x9
c0002dcc:	75 06                	jne    c0002dd4 <get_fileinfo+0xcb>
c0002dce:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002dd3:	47                   	inc    edi
c0002dd4:	0f b7 c2             	movzx  eax,dx
c0002dd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ddb:	e8 ed ed ff ff       	call   c0001bcd <dbc_1st>
c0002de0:	85 c0                	test   eax,eax
c0002de2:	74 2f                	je     c0002e13 <get_fileinfo+0x10a>
c0002de4:	83 fd 08             	cmp    ebp,0x8
c0002de7:	74 2a                	je     c0002e13 <get_fileinfo+0x10a>
c0002de9:	83 fd 0b             	cmp    ebp,0xb
c0002dec:	74 25                	je     c0002e13 <get_fileinfo+0x10a>
c0002dee:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002df1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002df5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002df9:	e8 d2 ed ff ff       	call   c0001bd0 <dbc_2nd>
c0002dfe:	85 c0                	test   eax,eax
c0002e00:	74 11                	je     c0002e13 <get_fileinfo+0x10a>
c0002e02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002e0b:	c1 e2 08             	shl    edx,0x8
c0002e0e:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002e11:	09 c2                	or     edx,eax
c0002e13:	0f b7 d2             	movzx  edx,dx
c0002e16:	50                   	push   eax
c0002e17:	50                   	push   eax
c0002e18:	68 b5 01 00 00       	push   0x1b5
c0002e1d:	52                   	push   edx
c0002e1e:	e8 45 2b 00 00       	call   c0005968 <ff_oem2uni>
c0002e23:	83 c4 10             	add    esp,0x10
c0002e26:	66 85 c0             	test   ax,ax
c0002e29:	75 04                	jne    c0002e2f <get_fileinfo+0x126>
c0002e2b:	31 ff                	xor    edi,edi
c0002e2d:	eb 23                	jmp    c0002e52 <get_fileinfo+0x149>
c0002e2f:	b9 0c 00 00 00       	mov    ecx,0xc
c0002e34:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002e38:	29 f9                	sub    ecx,edi
c0002e3a:	0f b7 c0             	movzx  eax,ax
c0002e3d:	e8 57 ee ff ff       	call   c0001c99 <put_utf>
c0002e42:	84 c0                	test   al,al
c0002e44:	74 e5                	je     c0002e2b <get_fileinfo+0x122>
c0002e46:	0f b6 c0             	movzx  eax,al
c0002e49:	01 c7                	add    edi,eax
c0002e4b:	89 e9                	mov    ecx,ebp
c0002e4d:	e9 4a ff ff ff       	jmp    c0002d9c <get_fileinfo+0x93>
c0002e52:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0002e57:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0002e5b:	75 54                	jne    c0002eb1 <get_fileinfo+0x1a8>
c0002e5d:	85 ff                	test   edi,edi
c0002e5f:	75 0b                	jne    c0002e6c <get_fileinfo+0x163>
c0002e61:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0002e65:	ba 01 00 00 00       	mov    edx,0x1
c0002e6a:	eb 33                	jmp    c0002e9f <get_fileinfo+0x196>
c0002e6c:	b1 08                	mov    cl,0x8
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0002e76:	84 c0                	test   al,al
c0002e78:	74 25                	je     c0002e9f <get_fileinfo+0x196>
c0002e7a:	66 83 f8 2e          	cmp    ax,0x2e
c0002e7e:	74 16                	je     c0002e96 <get_fileinfo+0x18d>
c0002e80:	8d 78 bf             	lea    edi,[eax-0x41]
c0002e83:	66 83 ff 19          	cmp    di,0x19
c0002e87:	77 0f                	ja     c0002e98 <get_fileinfo+0x18f>
c0002e89:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c0002e8c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0002e8f:	74 07                	je     c0002e98 <get_fileinfo+0x18f>
c0002e91:	83 c0 20             	add    eax,0x20
c0002e94:	eb 02                	jmp    c0002e98 <get_fileinfo+0x18f>
c0002e96:	b1 10                	mov    cl,0x10
c0002e98:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0002e9c:	42                   	inc    edx
c0002e9d:	eb d1                	jmp    c0002e70 <get_fileinfo+0x167>
c0002e9f:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0002ea4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ea7:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0002eab:	75 04                	jne    c0002eb1 <get_fileinfo+0x1a8>
c0002ead:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0002eb1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002eb4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0002eb7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0002eba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ebd:	83 c0 1c             	add    eax,0x1c
c0002ec0:	e8 94 ec ff ff       	call   c0001b59 <ld_dword>
c0002ec5:	89 03                	mov    DWORD PTR [ebx],eax
c0002ec7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002eca:	83 c0 16             	add    eax,0x16
c0002ecd:	e8 7a ec ff ff       	call   c0001b4c <ld_word>
c0002ed2:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0002ed6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ed9:	83 c0 18             	add    eax,0x18
c0002edc:	e8 6b ec ff ff       	call   c0001b4c <ld_word>
c0002ee1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0002ee5:	83 c4 1c             	add    esp,0x1c
c0002ee8:	5b                   	pop    ebx
c0002ee9:	5e                   	pop    esi
c0002eea:	5f                   	pop    edi
c0002eeb:	5d                   	pop    ebp
c0002eec:	c3                   	ret    

c0002eed <ld_clust.isra.0>:
c0002eed:	56                   	push   esi
c0002eee:	89 c6                	mov    esi,eax
c0002ef0:	53                   	push   ebx
c0002ef1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ef4:	89 d3                	mov    ebx,edx
c0002ef6:	e8 51 ec ff ff       	call   c0001b4c <ld_word>
c0002efb:	0f b7 c8             	movzx  ecx,ax
c0002efe:	89 f0                	mov    eax,esi
c0002f00:	3c 03                	cmp    al,0x3
c0002f02:	75 0d                	jne    c0002f11 <ld_clust.isra.0+0x24>
c0002f04:	8d 43 14             	lea    eax,[ebx+0x14]
c0002f07:	e8 40 ec ff ff       	call   c0001b4c <ld_word>
c0002f0c:	c1 e0 10             	shl    eax,0x10
c0002f0f:	09 c1                	or     ecx,eax
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	5b                   	pop    ebx
c0002f14:	5e                   	pop    esi
c0002f15:	c3                   	ret    

c0002f16 <st_clust.isra.1>:
c0002f16:	56                   	push   esi
c0002f17:	89 c6                	mov    esi,eax
c0002f19:	53                   	push   ebx
c0002f1a:	89 d3                	mov    ebx,edx
c0002f1c:	0f b7 d1             	movzx  edx,cx
c0002f1f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0002f22:	e8 4a ec ff ff       	call   c0001b71 <st_word>
c0002f27:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0002f2a:	75 0f                	jne    c0002f3b <st_clust.isra.1+0x25>
c0002f2c:	c1 e9 10             	shr    ecx,0x10
c0002f2f:	8d 43 14             	lea    eax,[ebx+0x14]
c0002f32:	89 ca                	mov    edx,ecx
c0002f34:	5b                   	pop    ebx
c0002f35:	5e                   	pop    esi
c0002f36:	e9 36 ec ff ff       	jmp    c0001b71 <st_word>
c0002f3b:	5b                   	pop    ebx
c0002f3c:	5e                   	pop    esi
c0002f3d:	c3                   	ret    

c0002f3e <get_fat.isra.2>:
c0002f3e:	b9 01 00 00 00       	mov    ecx,0x1
c0002f43:	83 fa 01             	cmp    edx,0x1
c0002f46:	0f 86 f1 00 00 00    	jbe    c000303d <get_fat.isra.2+0xff>
c0002f4c:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0002f4f:	0f 83 e8 00 00 00    	jae    c000303d <get_fat.isra.2+0xff>
c0002f55:	55                   	push   ebp
c0002f56:	57                   	push   edi
c0002f57:	89 c7                	mov    edi,eax
c0002f59:	56                   	push   esi
c0002f5a:	89 d6                	mov    esi,edx
c0002f5c:	53                   	push   ebx
c0002f5d:	83 ec 0c             	sub    esp,0xc
c0002f60:	8a 00                	mov    al,BYTE PTR [eax]
c0002f62:	3c 02                	cmp    al,0x2
c0002f64:	74 78                	je     c0002fde <get_fat.isra.2+0xa0>
c0002f66:	3c 03                	cmp    al,0x3
c0002f68:	0f 84 97 00 00 00    	je     c0003005 <get_fat.isra.2+0xc7>
c0002f6e:	fe c8                	dec    al
c0002f70:	0f 85 bd 00 00 00    	jne    c0003033 <get_fat.isra.2+0xf5>
c0002f76:	89 d3                	mov    ebx,edx
c0002f78:	89 f8                	mov    eax,edi
c0002f7a:	d1 eb                	shr    ebx,1
c0002f7c:	01 d3                	add    ebx,edx
c0002f7e:	89 da                	mov    edx,ebx
c0002f80:	c1 ea 09             	shr    edx,0x9
c0002f83:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002f86:	e8 e7 f0 ff ff       	call   c0002072 <move_window>
c0002f8b:	85 c0                	test   eax,eax
c0002f8d:	74 08                	je     c0002f97 <get_fat.isra.2+0x59>
c0002f8f:	83 c9 ff             	or     ecx,0xffffffff
c0002f92:	e9 9c 00 00 00       	jmp    c0003033 <get_fat.isra.2+0xf5>
c0002f97:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f9a:	89 f8                	mov    eax,edi
c0002f9c:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002fa2:	89 ea                	mov    edx,ebp
c0002fa4:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0002fa8:	c1 ea 09             	shr    edx,0x9
c0002fab:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002fae:	e8 bf f0 ff ff       	call   c0002072 <move_window>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	75 d8                	jne    c0002f8f <get_fat.isra.2+0x51>
c0002fb7:	0f b6 c3             	movzx  eax,bl
c0002fba:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002fc0:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0002fc5:	c1 e3 08             	shl    ebx,0x8
c0002fc8:	09 c3                	or     ebx,eax
c0002fca:	89 d9                	mov    ecx,ebx
c0002fcc:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002fd2:	83 e6 01             	and    esi,0x1
c0002fd5:	74 5c                	je     c0003033 <get_fat.isra.2+0xf5>
c0002fd7:	89 d9                	mov    ecx,ebx
c0002fd9:	c1 e9 04             	shr    ecx,0x4
c0002fdc:	eb 55                	jmp    c0003033 <get_fat.isra.2+0xf5>
c0002fde:	c1 ea 08             	shr    edx,0x8
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002fe6:	e8 87 f0 ff ff       	call   c0002072 <move_window>
c0002feb:	85 c0                	test   eax,eax
c0002fed:	75 a0                	jne    c0002f8f <get_fat.isra.2+0x51>
c0002fef:	01 f6                	add    esi,esi
c0002ff1:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002ff7:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002ffb:	e8 4c eb ff ff       	call   c0001b4c <ld_word>
c0003000:	0f b7 c8             	movzx  ecx,ax
c0003003:	eb 2e                	jmp    c0003033 <get_fat.isra.2+0xf5>
c0003005:	c1 ea 07             	shr    edx,0x7
c0003008:	89 f8                	mov    eax,edi
c000300a:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000300d:	e8 60 f0 ff ff       	call   c0002072 <move_window>
c0003012:	85 c0                	test   eax,eax
c0003014:	0f 85 75 ff ff ff    	jne    c0002f8f <get_fat.isra.2+0x51>
c000301a:	c1 e6 02             	shl    esi,0x2
c000301d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003023:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003027:	e8 2d eb ff ff       	call   c0001b59 <ld_dword>
c000302c:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003031:	89 c1                	mov    ecx,eax
c0003033:	83 c4 0c             	add    esp,0xc
c0003036:	89 c8                	mov    eax,ecx
c0003038:	5b                   	pop    ebx
c0003039:	5e                   	pop    esi
c000303a:	5f                   	pop    edi
c000303b:	5d                   	pop    ebp
c000303c:	c3                   	ret    
c000303d:	89 c8                	mov    eax,ecx
c000303f:	c3                   	ret    

c0003040 <dir_sdi>:
c0003040:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003046:	0f 87 b6 00 00 00    	ja     c0003102 <dir_sdi+0xc2>
c000304c:	55                   	push   ebp
c000304d:	57                   	push   edi
c000304e:	56                   	push   esi
c000304f:	53                   	push   ebx
c0003050:	89 d3                	mov    ebx,edx
c0003052:	83 ec 1c             	sub    esp,0x1c
c0003055:	f6 c2 1f             	test   dl,0x1f
c0003058:	74 0a                	je     c0003064 <dir_sdi+0x24>
c000305a:	b8 02 00 00 00       	mov    eax,0x2
c000305f:	e9 96 00 00 00       	jmp    c00030fa <dir_sdi+0xba>
c0003064:	89 c6                	mov    esi,eax
c0003066:	8b 38                	mov    edi,DWORD PTR [eax]
c0003068:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000306b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000306e:	85 c9                	test   ecx,ecx
c0003070:	75 23                	jne    c0003095 <dir_sdi+0x55>
c0003072:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003075:	76 07                	jbe    c000307e <dir_sdi+0x3e>
c0003077:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000307a:	85 c0                	test   eax,eax
c000307c:	75 15                	jne    c0003093 <dir_sdi+0x53>
c000307e:	89 da                	mov    edx,ebx
c0003080:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003084:	c1 ea 05             	shr    edx,0x5
c0003087:	39 c2                	cmp    edx,eax
c0003089:	73 cf                	jae    c000305a <dir_sdi+0x1a>
c000308b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000308e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003091:	eb 3d                	jmp    c00030d0 <dir_sdi+0x90>
c0003093:	89 c1                	mov    ecx,eax
c0003095:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003099:	c1 e5 09             	shl    ebp,0x9
c000309c:	89 ca                	mov    edx,ecx
c000309e:	39 eb                	cmp    ebx,ebp
c00030a0:	72 1c                	jb     c00030be <dir_sdi+0x7e>
c00030a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00030a4:	e8 95 fe ff ff       	call   c0002f3e <get_fat.isra.2>
c00030a9:	89 c1                	mov    ecx,eax
c00030ab:	83 f8 ff             	cmp    eax,0xffffffff
c00030ae:	74 45                	je     c00030f5 <dir_sdi+0xb5>
c00030b0:	83 f8 01             	cmp    eax,0x1
c00030b3:	76 a5                	jbe    c000305a <dir_sdi+0x1a>
c00030b5:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00030b8:	76 a0                	jbe    c000305a <dir_sdi+0x1a>
c00030ba:	29 eb                	sub    ebx,ebp
c00030bc:	eb de                	jmp    c000309c <dir_sdi+0x5c>
c00030be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	e8 c9 ec ff ff       	call   c0001d92 <clst2sect>
c00030c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00030cd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00030d0:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00030d3:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00030d6:	85 d2                	test   edx,edx
c00030d8:	74 80                	je     c000305a <dir_sdi+0x1a>
c00030da:	89 d8                	mov    eax,ebx
c00030dc:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00030e2:	c1 e8 09             	shr    eax,0x9
c00030e5:	01 d0                	add    eax,edx
c00030e7:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00030ea:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00030ee:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00030f1:	31 c0                	xor    eax,eax
c00030f3:	eb 05                	jmp    c00030fa <dir_sdi+0xba>
c00030f5:	b8 01 00 00 00       	mov    eax,0x1
c00030fa:	83 c4 1c             	add    esp,0x1c
c00030fd:	5b                   	pop    ebx
c00030fe:	5e                   	pop    esi
c00030ff:	5f                   	pop    edi
c0003100:	5d                   	pop    ebp
c0003101:	c3                   	ret    
c0003102:	b8 02 00 00 00       	mov    eax,0x2
c0003107:	c3                   	ret    

c0003108 <create_chain>:
c0003108:	55                   	push   ebp
c0003109:	89 c5                	mov    ebp,eax
c000310b:	57                   	push   edi
c000310c:	89 d7                	mov    edi,edx
c000310e:	56                   	push   esi
c000310f:	53                   	push   ebx
c0003110:	83 ec 1c             	sub    esp,0x1c
c0003113:	85 d2                	test   edx,edx
c0003115:	8b 30                	mov    esi,DWORD PTR [eax]
c0003117:	75 0e                	jne    c0003127 <create_chain+0x1f>
c0003119:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000311c:	85 c9                	test   ecx,ecx
c000311e:	74 34                	je     c0003154 <create_chain+0x4c>
c0003120:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003123:	77 34                	ja     c0003159 <create_chain+0x51>
c0003125:	eb 2d                	jmp    c0003154 <create_chain+0x4c>
c0003127:	89 f0                	mov    eax,esi
c0003129:	e8 10 fe ff ff       	call   c0002f3e <get_fat.isra.2>
c000312e:	89 c3                	mov    ebx,eax
c0003130:	83 f8 01             	cmp    eax,0x1
c0003133:	77 0a                	ja     c000313f <create_chain+0x37>
c0003135:	bb 01 00 00 00       	mov    ebx,0x1
c000313a:	e9 f9 00 00 00       	jmp    c0003238 <create_chain+0x130>
c000313f:	83 f8 ff             	cmp    eax,0xffffffff
c0003142:	0f 84 ed 00 00 00    	je     c0003235 <create_chain+0x12d>
c0003148:	89 f9                	mov    ecx,edi
c000314a:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000314d:	76 0a                	jbe    c0003159 <create_chain+0x51>
c000314f:	e9 e4 00 00 00       	jmp    c0003238 <create_chain+0x130>
c0003154:	b9 01 00 00 00       	mov    ecx,0x1
c0003159:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000315d:	75 07                	jne    c0003166 <create_chain+0x5e>
c000315f:	31 db                	xor    ebx,ebx
c0003161:	e9 d2 00 00 00       	jmp    c0003238 <create_chain+0x130>
c0003166:	39 f9                	cmp    ecx,edi
c0003168:	75 46                	jne    c00031b0 <create_chain+0xa8>
c000316a:	8d 59 01             	lea    ebx,[ecx+0x1]
c000316d:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003170:	77 05                	ja     c0003177 <create_chain+0x6f>
c0003172:	bb 02 00 00 00       	mov    ebx,0x2
c0003177:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000317b:	89 da                	mov    edx,ebx
c000317d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003180:	e8 b9 fd ff ff       	call   c0002f3e <get_fat.isra.2>
c0003185:	83 f8 01             	cmp    eax,0x1
c0003188:	74 ab                	je     c0003135 <create_chain+0x2d>
c000318a:	83 f8 ff             	cmp    eax,0xffffffff
c000318d:	0f 84 a2 00 00 00    	je     c0003235 <create_chain+0x12d>
c0003193:	85 c0                	test   eax,eax
c0003195:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003199:	74 11                	je     c00031ac <create_chain+0xa4>
c000319b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000319e:	83 f8 01             	cmp    eax,0x1
c00031a1:	76 0d                	jbe    c00031b0 <create_chain+0xa8>
c00031a3:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c00031a6:	73 08                	jae    c00031b0 <create_chain+0xa8>
c00031a8:	89 c1                	mov    ecx,eax
c00031aa:	eb 04                	jmp    c00031b0 <create_chain+0xa8>
c00031ac:	85 db                	test   ebx,ebx
c00031ae:	75 3d                	jne    c00031ed <create_chain+0xe5>
c00031b0:	89 cb                	mov    ebx,ecx
c00031b2:	43                   	inc    ebx
c00031b3:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00031b6:	77 0a                	ja     c00031c2 <create_chain+0xba>
c00031b8:	83 f9 01             	cmp    ecx,0x1
c00031bb:	76 a2                	jbe    c000315f <create_chain+0x57>
c00031bd:	bb 02 00 00 00       	mov    ebx,0x2
c00031c2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00031c6:	89 da                	mov    edx,ebx
c00031c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00031cb:	e8 6e fd ff ff       	call   c0002f3e <get_fat.isra.2>
c00031d0:	85 c0                	test   eax,eax
c00031d2:	74 19                	je     c00031ed <create_chain+0xe5>
c00031d4:	83 f8 01             	cmp    eax,0x1
c00031d7:	0f 84 58 ff ff ff    	je     c0003135 <create_chain+0x2d>
c00031dd:	40                   	inc    eax
c00031de:	74 55                	je     c0003235 <create_chain+0x12d>
c00031e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00031e4:	39 cb                	cmp    ebx,ecx
c00031e6:	75 ca                	jne    c00031b2 <create_chain+0xaa>
c00031e8:	e9 72 ff ff ff       	jmp    c000315f <create_chain+0x57>
c00031ed:	83 c9 ff             	or     ecx,0xffffffff
c00031f0:	89 da                	mov    edx,ebx
c00031f2:	89 f0                	mov    eax,esi
c00031f4:	e8 cf f2 ff ff       	call   c00024c8 <put_fat>
c00031f9:	85 c0                	test   eax,eax
c00031fb:	75 31                	jne    c000322e <create_chain+0x126>
c00031fd:	85 ff                	test   edi,edi
c00031ff:	75 16                	jne    c0003217 <create_chain+0x10f>
c0003201:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003204:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0003207:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c000320a:	8d 57 fe             	lea    edx,[edi-0x2]
c000320d:	39 d0                	cmp    eax,edx
c000320f:	77 17                	ja     c0003228 <create_chain+0x120>
c0003211:	48                   	dec    eax
c0003212:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003215:	eb 11                	jmp    c0003228 <create_chain+0x120>
c0003217:	89 d9                	mov    ecx,ebx
c0003219:	89 fa                	mov    edx,edi
c000321b:	89 f0                	mov    eax,esi
c000321d:	e8 a6 f2 ff ff       	call   c00024c8 <put_fat>
c0003222:	85 c0                	test   eax,eax
c0003224:	74 db                	je     c0003201 <create_chain+0xf9>
c0003226:	eb 06                	jmp    c000322e <create_chain+0x126>
c0003228:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000322c:	eb 0a                	jmp    c0003238 <create_chain+0x130>
c000322e:	48                   	dec    eax
c000322f:	0f 85 00 ff ff ff    	jne    c0003135 <create_chain+0x2d>
c0003235:	83 cb ff             	or     ebx,0xffffffff
c0003238:	83 c4 1c             	add    esp,0x1c
c000323b:	89 d8                	mov    eax,ebx
c000323d:	5b                   	pop    ebx
c000323e:	5e                   	pop    esi
c000323f:	5f                   	pop    edi
c0003240:	5d                   	pop    ebp
c0003241:	c3                   	ret    

c0003242 <remove_chain>:
c0003242:	55                   	push   ebp
c0003243:	57                   	push   edi
c0003244:	56                   	push   esi
c0003245:	89 d6                	mov    esi,edx
c0003247:	53                   	push   ebx
c0003248:	83 ec 0c             	sub    esp,0xc
c000324b:	83 fa 01             	cmp    edx,0x1
c000324e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003250:	76 65                	jbe    c00032b7 <remove_chain+0x75>
c0003252:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003255:	76 60                	jbe    c00032b7 <remove_chain+0x75>
c0003257:	89 c5                	mov    ebp,eax
c0003259:	89 ca                	mov    edx,ecx
c000325b:	85 c9                	test   ecx,ecx
c000325d:	74 0e                	je     c000326d <remove_chain+0x2b>
c000325f:	83 c9 ff             	or     ecx,0xffffffff
c0003262:	89 d8                	mov    eax,ebx
c0003264:	e8 5f f2 ff ff       	call   c00024c8 <put_fat>
c0003269:	85 c0                	test   eax,eax
c000326b:	75 56                	jne    c00032c3 <remove_chain+0x81>
c000326d:	89 f2                	mov    edx,esi
c000326f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003272:	e8 c7 fc ff ff       	call   c0002f3e <get_fat.isra.2>
c0003277:	89 c7                	mov    edi,eax
c0003279:	85 c0                	test   eax,eax
c000327b:	75 04                	jne    c0003281 <remove_chain+0x3f>
c000327d:	31 c0                	xor    eax,eax
c000327f:	eb 42                	jmp    c00032c3 <remove_chain+0x81>
c0003281:	83 f8 01             	cmp    eax,0x1
c0003284:	74 31                	je     c00032b7 <remove_chain+0x75>
c0003286:	83 f8 ff             	cmp    eax,0xffffffff
c0003289:	74 33                	je     c00032be <remove_chain+0x7c>
c000328b:	31 c9                	xor    ecx,ecx
c000328d:	89 f2                	mov    edx,esi
c000328f:	89 d8                	mov    eax,ebx
c0003291:	e8 32 f2 ff ff       	call   c00024c8 <put_fat>
c0003296:	85 c0                	test   eax,eax
c0003298:	75 29                	jne    c00032c3 <remove_chain+0x81>
c000329a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000329d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00032a0:	8d 4a fe             	lea    ecx,[edx-0x2]
c00032a3:	39 c8                	cmp    eax,ecx
c00032a5:	73 08                	jae    c00032af <remove_chain+0x6d>
c00032a7:	40                   	inc    eax
c00032a8:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032ac:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00032af:	89 fe                	mov    esi,edi
c00032b1:	39 fa                	cmp    edx,edi
c00032b3:	77 b8                	ja     c000326d <remove_chain+0x2b>
c00032b5:	eb c6                	jmp    c000327d <remove_chain+0x3b>
c00032b7:	b8 02 00 00 00       	mov    eax,0x2
c00032bc:	eb 05                	jmp    c00032c3 <remove_chain+0x81>
c00032be:	b8 01 00 00 00       	mov    eax,0x1
c00032c3:	83 c4 0c             	add    esp,0xc
c00032c6:	5b                   	pop    ebx
c00032c7:	5e                   	pop    esi
c00032c8:	5f                   	pop    edi
c00032c9:	5d                   	pop    ebp
c00032ca:	c3                   	ret    

c00032cb <dir_next>:
c00032cb:	55                   	push   ebp
c00032cc:	57                   	push   edi
c00032cd:	56                   	push   esi
c00032ce:	53                   	push   ebx
c00032cf:	83 ec 1c             	sub    esp,0x1c
c00032d2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00032d5:	8b 28                	mov    ebp,DWORD PTR [eax]
c00032d7:	83 c7 20             	add    edi,0x20
c00032da:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00032e0:	76 07                	jbe    c00032e9 <dir_next+0x1e>
c00032e2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00032e9:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00032ec:	b9 04 00 00 00       	mov    ecx,0x4
c00032f1:	85 f6                	test   esi,esi
c00032f3:	0f 84 cd 00 00 00    	je     c00033c6 <dir_next+0xfb>
c00032f9:	89 c3                	mov    ebx,eax
c00032fb:	89 d1                	mov    ecx,edx
c00032fd:	89 f8                	mov    eax,edi
c00032ff:	25 ff 01 00 00       	and    eax,0x1ff
c0003304:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003308:	0f 85 a8 00 00 00    	jne    c00033b6 <dir_next+0xeb>
c000330e:	46                   	inc    esi
c000330f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003312:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003315:	85 d2                	test   edx,edx
c0003317:	75 22                	jne    c000333b <dir_next+0x70>
c0003319:	89 fa                	mov    edx,edi
c000331b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000331f:	c1 ea 05             	shr    edx,0x5
c0003322:	39 c2                	cmp    edx,eax
c0003324:	0f 82 8c 00 00 00    	jb     c00033b6 <dir_next+0xeb>
c000332a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003331:	b9 04 00 00 00       	mov    ecx,0x4
c0003336:	e9 8b 00 00 00       	jmp    c00033c6 <dir_next+0xfb>
c000333b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000333f:	89 fe                	mov    esi,edi
c0003341:	48                   	dec    eax
c0003342:	c1 ee 09             	shr    esi,0x9
c0003345:	85 f0                	test   eax,esi
c0003347:	75 6d                	jne    c00033b6 <dir_next+0xeb>
c0003349:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334d:	89 e8                	mov    eax,ebp
c000334f:	e8 ea fb ff ff       	call   c0002f3e <get_fat.isra.2>
c0003354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003358:	89 c6                	mov    esi,eax
c000335a:	83 f8 01             	cmp    eax,0x1
c000335d:	77 07                	ja     c0003366 <dir_next+0x9b>
c000335f:	b9 02 00 00 00       	mov    ecx,0x2
c0003364:	eb 60                	jmp    c00033c6 <dir_next+0xfb>
c0003366:	83 f8 ff             	cmp    eax,0xffffffff
c0003369:	75 07                	jne    c0003372 <dir_next+0xa7>
c000336b:	b9 01 00 00 00       	mov    ecx,0x1
c0003370:	eb 54                	jmp    c00033c6 <dir_next+0xfb>
c0003372:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003375:	77 30                	ja     c00033a7 <dir_next+0xdc>
c0003377:	85 c9                	test   ecx,ecx
c0003379:	74 af                	je     c000332a <dir_next+0x5f>
c000337b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000337e:	89 d8                	mov    eax,ebx
c0003380:	e8 83 fd ff ff       	call   c0003108 <create_chain>
c0003385:	b9 07 00 00 00       	mov    ecx,0x7
c000338a:	89 c6                	mov    esi,eax
c000338c:	85 c0                	test   eax,eax
c000338e:	74 36                	je     c00033c6 <dir_next+0xfb>
c0003390:	83 f8 01             	cmp    eax,0x1
c0003393:	74 ca                	je     c000335f <dir_next+0x94>
c0003395:	83 f8 ff             	cmp    eax,0xffffffff
c0003398:	74 d1                	je     c000336b <dir_next+0xa0>
c000339a:	89 c2                	mov    edx,eax
c000339c:	89 e8                	mov    eax,ebp
c000339e:	e8 75 f2 ff ff       	call   c0002618 <dir_clear>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	75 c4                	jne    c000336b <dir_next+0xa0>
c00033a7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00033aa:	89 f2                	mov    edx,esi
c00033ac:	89 e8                	mov    eax,ebp
c00033ae:	e8 df e9 ff ff       	call   c0001d92 <clst2sect>
c00033b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00033b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00033ba:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00033bd:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00033c1:	31 c9                	xor    ecx,ecx
c00033c3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00033c6:	83 c4 1c             	add    esp,0x1c
c00033c9:	89 c8                	mov    eax,ecx
c00033cb:	5b                   	pop    ebx
c00033cc:	5e                   	pop    esi
c00033cd:	5f                   	pop    edi
c00033ce:	5d                   	pop    ebp
c00033cf:	c3                   	ret    

c00033d0 <dir_alloc>:
c00033d0:	55                   	push   ebp
c00033d1:	89 c5                	mov    ebp,eax
c00033d3:	57                   	push   edi
c00033d4:	89 d7                	mov    edi,edx
c00033d6:	56                   	push   esi
c00033d7:	31 d2                	xor    edx,edx
c00033d9:	53                   	push   ebx
c00033da:	83 ec 0c             	sub    esp,0xc
c00033dd:	8b 30                	mov    esi,DWORD PTR [eax]
c00033df:	e8 5c fc ff ff       	call   c0003040 <dir_sdi>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 37                	jne    c000341f <dir_alloc+0x4f>
c00033e8:	31 db                	xor    ebx,ebx
c00033ea:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00033ed:	89 f0                	mov    eax,esi
c00033ef:	e8 7e ec ff ff       	call   c0002072 <move_window>
c00033f4:	85 c0                	test   eax,eax
c00033f6:	75 27                	jne    c000341f <dir_alloc+0x4f>
c00033f8:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00033fb:	8a 12                	mov    dl,BYTE PTR [edx]
c00033fd:	84 d2                	test   dl,dl
c00033ff:	74 05                	je     c0003406 <dir_alloc+0x36>
c0003401:	80 fa e5             	cmp    dl,0xe5
c0003404:	75 07                	jne    c000340d <dir_alloc+0x3d>
c0003406:	43                   	inc    ebx
c0003407:	39 fb                	cmp    ebx,edi
c0003409:	75 04                	jne    c000340f <dir_alloc+0x3f>
c000340b:	eb 1c                	jmp    c0003429 <dir_alloc+0x59>
c000340d:	31 db                	xor    ebx,ebx
c000340f:	ba 01 00 00 00       	mov    edx,0x1
c0003414:	89 e8                	mov    eax,ebp
c0003416:	e8 b0 fe ff ff       	call   c00032cb <dir_next>
c000341b:	85 c0                	test   eax,eax
c000341d:	74 cb                	je     c00033ea <dir_alloc+0x1a>
c000341f:	83 f8 04             	cmp    eax,0x4
c0003422:	75 05                	jne    c0003429 <dir_alloc+0x59>
c0003424:	b8 07 00 00 00       	mov    eax,0x7
c0003429:	83 c4 0c             	add    esp,0xc
c000342c:	5b                   	pop    ebx
c000342d:	5e                   	pop    esi
c000342e:	5f                   	pop    edi
c000342f:	5d                   	pop    ebp
c0003430:	c3                   	ret    

c0003431 <dir_read>:
c0003431:	55                   	push   ebp
c0003432:	57                   	push   edi
c0003433:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003438:	56                   	push   esi
c0003439:	be 04 00 00 00       	mov    esi,0x4
c000343e:	53                   	push   ebx
c000343f:	89 c3                	mov    ebx,eax
c0003441:	83 ec 1c             	sub    esp,0x1c
c0003444:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003448:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000344f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003452:	85 d2                	test   edx,edx
c0003454:	0f 84 d8 00 00 00    	je     c0003532 <dir_read+0x101>
c000345a:	89 e8                	mov    eax,ebp
c000345c:	e8 11 ec ff ff       	call   c0002072 <move_window>
c0003461:	89 c6                	mov    esi,eax
c0003463:	85 c0                	test   eax,eax
c0003465:	0f 85 d2 00 00 00    	jne    c000353d <dir_read+0x10c>
c000346b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000346e:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003470:	84 c9                	test   cl,cl
c0003472:	0f 84 c0 00 00 00    	je     c0003538 <dir_read+0x107>
c0003478:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000347b:	83 e0 3f             	and    eax,0x3f
c000347e:	80 f9 2e             	cmp    cl,0x2e
c0003481:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003485:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003488:	0f 84 8a 00 00 00    	je     c0003518 <dir_read+0xe7>
c000348e:	80 f9 e5             	cmp    cl,0xe5
c0003491:	0f 84 81 00 00 00    	je     c0003518 <dir_read+0xe7>
c0003497:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000349b:	83 e0 1f             	and    eax,0x1f
c000349e:	83 f8 08             	cmp    eax,0x8
c00034a1:	0f 94 c0             	sete   al
c00034a4:	0f b6 c0             	movzx  eax,al
c00034a7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00034ab:	75 6b                	jne    c0003518 <dir_read+0xe7>
c00034ad:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00034b2:	75 44                	jne    c00034f8 <dir_read+0xc7>
c00034b4:	f6 c1 40             	test   cl,0x40
c00034b7:	74 12                	je     c00034cb <dir_read+0x9a>
c00034b9:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00034bc:	83 e1 bf             	and    ecx,0xffffffbf
c00034bf:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00034c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034c6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00034c9:	eb 06                	jmp    c00034d1 <dir_read+0xa0>
c00034cb:	89 f8                	mov    eax,edi
c00034cd:	38 c8                	cmp    al,cl
c00034cf:	75 47                	jne    c0003518 <dir_read+0xe7>
c00034d1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00034d5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00034da:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00034dd:	75 3e                	jne    c000351d <dir_read+0xec>
c00034df:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00034e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00034e6:	e8 c4 e8 ff ff       	call   c0001daf <pick_lfn>
c00034eb:	85 c0                	test   eax,eax
c00034ed:	74 2e                	je     c000351d <dir_read+0xec>
c00034ef:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00034f3:	8d 79 ff             	lea    edi,[ecx-0x1]
c00034f6:	eb 25                	jmp    c000351d <dir_read+0xec>
c00034f8:	89 f8                	mov    eax,edi
c00034fa:	84 c0                	test   al,al
c00034fc:	75 11                	jne    c000350f <dir_read+0xde>
c00034fe:	89 d0                	mov    eax,edx
c0003500:	e8 64 ea ff ff       	call   c0001f69 <sum_sfn>
c0003505:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003509:	75 04                	jne    c000350f <dir_read+0xde>
c000350b:	31 f6                	xor    esi,esi
c000350d:	eb 35                	jmp    c0003544 <dir_read+0x113>
c000350f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003516:	eb 2c                	jmp    c0003544 <dir_read+0x113>
c0003518:	bf ff ff ff ff       	mov    edi,0xffffffff
c000351d:	31 d2                	xor    edx,edx
c000351f:	89 d8                	mov    eax,ebx
c0003521:	e8 a5 fd ff ff       	call   c00032cb <dir_next>
c0003526:	89 c6                	mov    esi,eax
c0003528:	85 c0                	test   eax,eax
c000352a:	0f 84 1f ff ff ff    	je     c000344f <dir_read+0x1e>
c0003530:	eb 0b                	jmp    c000353d <dir_read+0x10c>
c0003532:	85 f6                	test   esi,esi
c0003534:	74 d5                	je     c000350b <dir_read+0xda>
c0003536:	eb 05                	jmp    c000353d <dir_read+0x10c>
c0003538:	be 04 00 00 00       	mov    esi,0x4
c000353d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003544:	83 c4 1c             	add    esp,0x1c
c0003547:	89 f0                	mov    eax,esi
c0003549:	5b                   	pop    ebx
c000354a:	5e                   	pop    esi
c000354b:	5f                   	pop    edi
c000354c:	5d                   	pop    ebp
c000354d:	c3                   	ret    

c000354e <dir_remove>:
c000354e:	57                   	push   edi
c000354f:	56                   	push   esi
c0003550:	53                   	push   ebx
c0003551:	89 c3                	mov    ebx,eax
c0003553:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003556:	8b 30                	mov    esi,DWORD PTR [eax]
c0003558:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000355b:	83 fa ff             	cmp    edx,0xffffffff
c000355e:	74 09                	je     c0003569 <dir_remove+0x1b>
c0003560:	e8 db fa ff ff       	call   c0003040 <dir_sdi>
c0003565:	85 c0                	test   eax,eax
c0003567:	75 34                	jne    c000359d <dir_remove+0x4f>
c0003569:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000356c:	89 f0                	mov    eax,esi
c000356e:	e8 ff ea ff ff       	call   c0002072 <move_window>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 1c                	jne    c0003593 <dir_remove+0x45>
c0003577:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000357a:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000357d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003581:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003584:	73 17                	jae    c000359d <dir_remove+0x4f>
c0003586:	31 d2                	xor    edx,edx
c0003588:	89 d8                	mov    eax,ebx
c000358a:	e8 3c fd ff ff       	call   c00032cb <dir_next>
c000358f:	85 c0                	test   eax,eax
c0003591:	74 d6                	je     c0003569 <dir_remove+0x1b>
c0003593:	83 f8 04             	cmp    eax,0x4
c0003596:	75 05                	jne    c000359d <dir_remove+0x4f>
c0003598:	b8 02 00 00 00       	mov    eax,0x2
c000359d:	5b                   	pop    ebx
c000359e:	5e                   	pop    esi
c000359f:	5f                   	pop    edi
c00035a0:	c3                   	ret    

c00035a1 <dir_find>:
c00035a1:	55                   	push   ebp
c00035a2:	31 d2                	xor    edx,edx
c00035a4:	57                   	push   edi
c00035a5:	56                   	push   esi
c00035a6:	53                   	push   ebx
c00035a7:	89 c3                	mov    ebx,eax
c00035a9:	83 ec 1c             	sub    esp,0x1c
c00035ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00035ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035b2:	89 d8                	mov    eax,ebx
c00035b4:	e8 87 fa ff ff       	call   c0003040 <dir_sdi>
c00035b9:	89 c6                	mov    esi,eax
c00035bb:	85 c0                	test   eax,eax
c00035bd:	0f 85 02 01 00 00    	jne    c00036c5 <dir_find+0x124>
c00035c3:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00035ca:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00035cf:	bf ff ff ff ff       	mov    edi,0xffffffff
c00035d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035db:	e8 92 ea ff ff       	call   c0002072 <move_window>
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	85 c0                	test   eax,eax
c00035e4:	0f 85 db 00 00 00    	jne    c00036c5 <dir_find+0x124>
c00035ea:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00035ed:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00035f0:	84 c9                	test   cl,cl
c00035f2:	0f 84 c8 00 00 00    	je     c00036c0 <dir_find+0x11f>
c00035f8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00035fb:	88 d0                	mov    al,dl
c00035fd:	83 e0 3f             	and    eax,0x3f
c0003600:	80 f9 e5             	cmp    cl,0xe5
c0003603:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003606:	0f 84 93 00 00 00    	je     c000369f <dir_find+0xfe>
c000360c:	80 e2 08             	and    dl,0x8
c000360f:	74 0a                	je     c000361b <dir_find+0x7a>
c0003611:	3c 0f                	cmp    al,0xf
c0003613:	0f 85 86 00 00 00    	jne    c000369f <dir_find+0xfe>
c0003619:	eb 04                	jmp    c000361f <dir_find+0x7e>
c000361b:	3c 0f                	cmp    al,0xf
c000361d:	75 54                	jne    c0003673 <dir_find+0xd2>
c000361f:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003623:	0f 85 82 00 00 00    	jne    c00036ab <dir_find+0x10a>
c0003629:	f6 c1 40             	test   cl,0x40
c000362c:	74 12                	je     c0003640 <dir_find+0x9f>
c000362e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003631:	83 e1 bf             	and    ecx,0xffffffbf
c0003634:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0003638:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000363b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000363e:	eb 06                	jmp    c0003646 <dir_find+0xa5>
c0003640:	89 f8                	mov    eax,edi
c0003642:	38 c8                	cmp    al,cl
c0003644:	75 60                	jne    c00036a6 <dir_find+0x105>
c0003646:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000364a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000364f:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003652:	75 57                	jne    c00036ab <dir_find+0x10a>
c0003654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003658:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000365c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000365f:	89 ea                	mov    edx,ebp
c0003661:	e8 89 f3 ff ff       	call   c00029ef <cmp_lfn>
c0003666:	85 c0                	test   eax,eax
c0003668:	74 41                	je     c00036ab <dir_find+0x10a>
c000366a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000366e:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003671:	eb 38                	jmp    c00036ab <dir_find+0x10a>
c0003673:	89 f8                	mov    eax,edi
c0003675:	84 c0                	test   al,al
c0003677:	75 0d                	jne    c0003686 <dir_find+0xe5>
c0003679:	89 e8                	mov    eax,ebp
c000367b:	e8 e9 e8 ff ff       	call   c0001f69 <sum_sfn>
c0003680:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003684:	74 3f                	je     c00036c5 <dir_find+0x124>
c0003686:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000368a:	75 13                	jne    c000369f <dir_find+0xfe>
c000368c:	8d 53 20             	lea    edx,[ebx+0x20]
c000368f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003694:	89 e8                	mov    eax,ebp
c0003696:	e8 fd e4 ff ff       	call   c0001b98 <mem_cmp>
c000369b:	85 c0                	test   eax,eax
c000369d:	74 26                	je     c00036c5 <dir_find+0x124>
c000369f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ab:	31 d2                	xor    edx,edx
c00036ad:	89 d8                	mov    eax,ebx
c00036af:	e8 17 fc ff ff       	call   c00032cb <dir_next>
c00036b4:	89 c6                	mov    esi,eax
c00036b6:	85 c0                	test   eax,eax
c00036b8:	0f 84 16 ff ff ff    	je     c00035d4 <dir_find+0x33>
c00036be:	eb 05                	jmp    c00036c5 <dir_find+0x124>
c00036c0:	be 04 00 00 00       	mov    esi,0x4
c00036c5:	83 c4 1c             	add    esp,0x1c
c00036c8:	89 f0                	mov    eax,esi
c00036ca:	5b                   	pop    ebx
c00036cb:	5e                   	pop    esi
c00036cc:	5f                   	pop    edi
c00036cd:	5d                   	pop    ebp
c00036ce:	c3                   	ret    

c00036cf <follow_path>:
c00036cf:	56                   	push   esi
c00036d0:	53                   	push   ebx
c00036d1:	89 c3                	mov    ebx,eax
c00036d3:	83 ec 14             	sub    esp,0x14
c00036d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036da:	8b 30                	mov    esi,DWORD PTR [eax]
c00036dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00036e0:	8a 10                	mov    dl,BYTE PTR [eax]
c00036e2:	80 fa 5c             	cmp    dl,0x5c
c00036e5:	75 07                	jne    c00036ee <follow_path+0x1f>
c00036e7:	40                   	inc    eax
c00036e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00036ec:	eb ee                	jmp    c00036dc <follow_path+0xd>
c00036ee:	80 fa 2f             	cmp    dl,0x2f
c00036f1:	74 f4                	je     c00036e7 <follow_path+0x18>
c00036f3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00036fa:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00036fd:	77 3e                	ja     c000373d <follow_path+0x6e>
c00036ff:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003703:	31 d2                	xor    edx,edx
c0003705:	89 d8                	mov    eax,ebx
c0003707:	e8 34 f9 ff ff       	call   c0003040 <dir_sdi>
c000370c:	eb 4f                	jmp    c000375d <follow_path+0x8e>
c000370e:	89 d8                	mov    eax,ebx
c0003710:	e8 8c fe ff ff       	call   c00035a1 <dir_find>
c0003715:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003718:	85 c0                	test   eax,eax
c000371a:	75 32                	jne    c000374e <follow_path+0x7f>
c000371c:	80 e2 04             	and    dl,0x4
c000371f:	75 3c                	jne    c000375d <follow_path+0x8e>
c0003721:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003725:	74 31                	je     c0003758 <follow_path+0x89>
c0003727:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000372a:	25 ff 01 00 00       	and    eax,0x1ff
c000372f:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003733:	8a 06                	mov    al,BYTE PTR [esi]
c0003735:	e8 b3 f7 ff ff       	call   c0002eed <ld_clust.isra.0>
c000373a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000373d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003741:	89 d8                	mov    eax,ebx
c0003743:	e8 cb ef ff ff       	call   c0002713 <create_name>
c0003748:	85 c0                	test   eax,eax
c000374a:	74 c2                	je     c000370e <follow_path+0x3f>
c000374c:	eb 0f                	jmp    c000375d <follow_path+0x8e>
c000374e:	83 f8 04             	cmp    eax,0x4
c0003751:	75 0a                	jne    c000375d <follow_path+0x8e>
c0003753:	80 e2 04             	and    dl,0x4
c0003756:	75 05                	jne    c000375d <follow_path+0x8e>
c0003758:	b8 05 00 00 00       	mov    eax,0x5
c000375d:	83 c4 14             	add    esp,0x14
c0003760:	5b                   	pop    ebx
c0003761:	5e                   	pop    esi
c0003762:	c3                   	ret    

c0003763 <dir_register>:
c0003763:	55                   	push   ebp
c0003764:	57                   	push   edi
c0003765:	56                   	push   esi
c0003766:	be 06 00 00 00       	mov    esi,0x6
c000376b:	53                   	push   ebx
c000376c:	83 ec 2c             	sub    esp,0x2c
c000376f:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003773:	0f 85 65 01 00 00    	jne    c00038de <dir_register+0x17b>
c0003779:	8b 38                	mov    edi,DWORD PTR [eax]
c000377b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003783:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003786:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000378a:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c000378f:	74 06                	je     c0003797 <dir_register+0x34>
c0003791:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003795:	eb ef                	jmp    c0003786 <dir_register+0x23>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	b9 0c 00 00 00       	mov    ecx,0xc
c000379e:	8d 40 20             	lea    eax,[eax+0x20]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 c2                	mov    edx,eax
c00037a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00037ab:	e8 c8 e3 ff ff       	call   c0001b78 <mem_cpy>
c00037b0:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00037b5:	74 48                	je     c00037ff <dir_register+0x9c>
c00037b7:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00037bb:	bd 01 00 00 00       	mov    ebp,0x1
c00037c0:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00037c3:	55                   	push   ebp
c00037c4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00037c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00037cc:	e8 dc e6 ff ff       	call   c0001ead <gen_numname>
c00037d1:	58                   	pop    eax
c00037d2:	89 d8                	mov    eax,ebx
c00037d4:	e8 c8 fd ff ff       	call   c00035a1 <dir_find>
c00037d9:	89 c6                	mov    esi,eax
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 10                	jne    c00037ef <dir_register+0x8c>
c00037df:	45                   	inc    ebp
c00037e0:	83 fd 64             	cmp    ebp,0x64
c00037e3:	75 db                	jne    c00037c0 <dir_register+0x5d>
c00037e5:	be 07 00 00 00       	mov    esi,0x7
c00037ea:	e9 ef 00 00 00       	jmp    c00038de <dir_register+0x17b>
c00037ef:	83 f8 04             	cmp    eax,0x4
c00037f2:	0f 85 e6 00 00 00    	jne    c00038de <dir_register+0x17b>
c00037f8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00037fc:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00037ff:	bd 01 00 00 00       	mov    ebp,0x1
c0003804:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003809:	74 13                	je     c000381e <dir_register+0xbb>
c000380b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000380f:	b9 0d 00 00 00       	mov    ecx,0xd
c0003814:	83 c0 0c             	add    eax,0xc
c0003817:	31 d2                	xor    edx,edx
c0003819:	f7 f1                	div    ecx
c000381b:	8d 68 01             	lea    ebp,[eax+0x1]
c000381e:	89 ea                	mov    edx,ebp
c0003820:	89 d8                	mov    eax,ebx
c0003822:	e8 a9 fb ff ff       	call   c00033d0 <dir_alloc>
c0003827:	89 c6                	mov    esi,eax
c0003829:	85 c0                	test   eax,eax
c000382b:	0f 85 ad 00 00 00    	jne    c00038de <dir_register+0x17b>
c0003831:	4d                   	dec    ebp
c0003832:	74 6a                	je     c000389e <dir_register+0x13b>
c0003834:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003837:	89 e8                	mov    eax,ebp
c0003839:	c1 e0 05             	shl    eax,0x5
c000383c:	29 c2                	sub    edx,eax
c000383e:	89 d8                	mov    eax,ebx
c0003840:	e8 fb f7 ff ff       	call   c0003040 <dir_sdi>
c0003845:	89 c6                	mov    esi,eax
c0003847:	85 c0                	test   eax,eax
c0003849:	0f 85 8f 00 00 00    	jne    c00038de <dir_register+0x17b>
c000384f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003853:	e8 11 e7 ff ff       	call   c0001f69 <sum_sfn>
c0003858:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000385c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385f:	89 f8                	mov    eax,edi
c0003861:	e8 0c e8 ff ff       	call   c0002072 <move_window>
c0003866:	89 c6                	mov    esi,eax
c0003868:	85 c0                	test   eax,eax
c000386a:	75 72                	jne    c00038de <dir_register+0x17b>
c000386c:	83 ec 0c             	sub    esp,0xc
c000386f:	89 e8                	mov    eax,ebp
c0003871:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003876:	0f b6 c8             	movzx  ecx,al
c0003879:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000387c:	52                   	push   edx
c000387d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003880:	e8 a4 e5 ff ff       	call   c0001e29 <put_lfn>
c0003885:	31 d2                	xor    edx,edx
c0003887:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c000388b:	89 d8                	mov    eax,ebx
c000388d:	e8 39 fa ff ff       	call   c00032cb <dir_next>
c0003892:	83 c4 10             	add    esp,0x10
c0003895:	89 c6                	mov    esi,eax
c0003897:	85 c0                	test   eax,eax
c0003899:	75 43                	jne    c00038de <dir_register+0x17b>
c000389b:	4d                   	dec    ebp
c000389c:	75 be                	jne    c000385c <dir_register+0xf9>
c000389e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038a1:	89 f8                	mov    eax,edi
c00038a3:	e8 ca e7 ff ff       	call   c0002072 <move_window>
c00038a8:	89 c6                	mov    esi,eax
c00038aa:	85 c0                	test   eax,eax
c00038ac:	75 30                	jne    c00038de <dir_register+0x17b>
c00038ae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00038b1:	b9 20 00 00 00       	mov    ecx,0x20
c00038b6:	31 d2                	xor    edx,edx
c00038b8:	e8 d0 e2 ff ff       	call   c0001b8d <mem_set>
c00038bd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00038c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00038c4:	b9 0b 00 00 00       	mov    ecx,0xb
c00038c9:	e8 aa e2 ff ff       	call   c0001b78 <mem_cpy>
c00038ce:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c00038d1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038d4:	83 e0 18             	and    eax,0x18
c00038d7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00038da:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00038de:	83 c4 2c             	add    esp,0x2c
c00038e1:	89 f0                	mov    eax,esi
c00038e3:	5b                   	pop    ebx
c00038e4:	5e                   	pop    esi
c00038e5:	5f                   	pop    edi
c00038e6:	5d                   	pop    ebp
c00038e7:	c3                   	ret    

c00038e8 <f_mount>:
c00038e8:	53                   	push   ebx
c00038e9:	83 ec 18             	sub    esp,0x18
c00038ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00038f0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00038f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00038fc:	e8 7a e6 ff ff       	call   c0001f7b <get_ldnumber>
c0003901:	89 c2                	mov    edx,eax
c0003903:	b8 0b 00 00 00       	mov    eax,0xb
c0003908:	85 d2                	test   edx,edx
c000390a:	78 39                	js     c0003945 <f_mount+0x5d>
c000390c:	8b 04 95 c0 f3 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0c40]
c0003913:	85 c0                	test   eax,eax
c0003915:	74 03                	je     c000391a <f_mount+0x32>
c0003917:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000391a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000391e:	85 c0                	test   eax,eax
c0003920:	74 03                	je     c0003925 <f_mount+0x3d>
c0003922:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003925:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003929:	89 04 95 c0 f3 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0c40],eax
c0003930:	31 c0                	xor    eax,eax
c0003932:	84 db                	test   bl,bl
c0003934:	74 0f                	je     c0003945 <f_mount+0x5d>
c0003936:	31 c9                	xor    ecx,ecx
c0003938:	8d 54 24 20          	lea    edx,[esp+0x20]
c000393c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003940:	e8 80 e8 ff ff       	call   c00021c5 <mount_volume>
c0003945:	83 c4 18             	add    esp,0x18
c0003948:	5b                   	pop    ebx
c0003949:	c3                   	ret    

c000394a <f_open>:
c000394a:	55                   	push   ebp
c000394b:	b8 09 00 00 00       	mov    eax,0x9
c0003950:	57                   	push   edi
c0003951:	56                   	push   esi
c0003952:	53                   	push   ebx
c0003953:	83 ec 5c             	sub    esp,0x5c
c0003956:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000395a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000395e:	85 db                	test   ebx,ebx
c0003960:	0f 84 a7 02 00 00    	je     c0003c0d <f_open+0x2c3>
c0003966:	89 fe                	mov    esi,edi
c0003968:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000396c:	83 e6 3f             	and    esi,0x3f
c000396f:	89 f0                	mov    eax,esi
c0003971:	0f b6 c8             	movzx  ecx,al
c0003974:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003978:	e8 48 e8 ff ff       	call   c00021c5 <mount_volume>
c000397d:	85 c0                	test   eax,eax
c000397f:	0f 85 82 02 00 00    	jne    c0003c07 <f_open+0x2bd>
c0003985:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003989:	83 ec 0c             	sub    esp,0xc
c000398c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003990:	68 00 02 00 00       	push   0x200
c0003995:	e8 fe 1e 00 00       	call   c0005898 <ff_memalloc>
c000399a:	83 c4 10             	add    esp,0x10
c000399d:	89 c5                	mov    ebp,eax
c000399f:	b8 11 00 00 00       	mov    eax,0x11
c00039a4:	85 ed                	test   ebp,ebp
c00039a6:	0f 84 61 02 00 00    	je     c0003c0d <f_open+0x2c3>
c00039ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00039b0:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00039b4:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c00039b7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00039bb:	e8 0f fd ff ff       	call   c00036cf <follow_path>
c00039c0:	85 c0                	test   eax,eax
c00039c2:	75 0c                	jne    c00039d0 <f_open+0x86>
c00039c4:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00039c9:	79 05                	jns    c00039d0 <f_open+0x86>
c00039cb:	b8 06 00 00 00       	mov    eax,0x6
c00039d0:	f7 c7 1c 00 00 00    	test   edi,0x1c
c00039d6:	0f 84 de 00 00 00    	je     c0003aba <f_open+0x170>
c00039dc:	85 c0                	test   eax,eax
c00039de:	74 1e                	je     c00039fe <f_open+0xb4>
c00039e0:	83 f8 04             	cmp    eax,0x4
c00039e3:	0f 85 06 02 00 00    	jne    c0003bef <f_open+0x2a5>
c00039e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00039ed:	83 ce 08             	or     esi,0x8
c00039f0:	e8 6e fd ff ff       	call   c0003763 <dir_register>
c00039f5:	85 c0                	test   eax,eax
c00039f7:	74 2f                	je     c0003a28 <f_open+0xde>
c00039f9:	e9 f1 01 00 00       	jmp    c0003bef <f_open+0x2a5>
c00039fe:	b8 07 00 00 00       	mov    eax,0x7
c0003a03:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003a08:	0f 85 e1 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003a0e:	b8 08 00 00 00       	mov    eax,0x8
c0003a13:	f7 c7 04 00 00 00    	test   edi,0x4
c0003a19:	0f 85 d0 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003a1f:	83 e7 08             	and    edi,0x8
c0003a22:	0f 84 bf 00 00 00    	je     c0003ae7 <f_open+0x19d>
c0003a28:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003a2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a30:	89 ca                	mov    edx,ecx
c0003a32:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003a36:	8a 00                	mov    al,BYTE PTR [eax]
c0003a38:	e8 b0 f4 ff ff       	call   c0002eed <ld_clust.isra.0>
c0003a3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a41:	89 c7                	mov    edi,eax
c0003a43:	ba 00 00 21 50       	mov    edx,0x50210000
c0003a48:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003a4b:	e8 25 e1 ff ff       	call   c0001b75 <st_dword>
c0003a50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003a54:	31 c9                	xor    ecx,ecx
c0003a56:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003a5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003a62:	e8 af f4 ff ff       	call   c0002f16 <st_clust.isra.1>
c0003a67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003a6b:	31 d2                	xor    edx,edx
c0003a6d:	83 c0 1c             	add    eax,0x1c
c0003a70:	e8 00 e1 ff ff       	call   c0001b75 <st_dword>
c0003a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a79:	85 ff                	test   edi,edi
c0003a7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a7f:	74 66                	je     c0003ae7 <f_open+0x19d>
c0003a81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a85:	31 c9                	xor    ecx,ecx
c0003a87:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003a8a:	89 fa                	mov    edx,edi
c0003a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a90:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003a94:	e8 a9 f7 ff ff       	call   c0003242 <remove_chain>
c0003a99:	85 c0                	test   eax,eax
c0003a9b:	0f 85 4e 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003aa1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003aa5:	4f                   	dec    edi
c0003aa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003aaa:	e8 c3 e5 ff ff       	call   c0002072 <move_window>
c0003aaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ab3:	85 c0                	test   eax,eax
c0003ab5:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ab8:	eb 27                	jmp    c0003ae1 <f_open+0x197>
c0003aba:	85 c0                	test   eax,eax
c0003abc:	0f 85 2d 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ac2:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ac6:	b8 04 00 00 00       	mov    eax,0x4
c0003acb:	f6 c2 10             	test   dl,0x10
c0003ace:	0f 85 1b 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ad4:	83 e7 02             	and    edi,0x2
c0003ad7:	74 0e                	je     c0003ae7 <f_open+0x19d>
c0003ad9:	b8 07 00 00 00       	mov    eax,0x7
c0003ade:	80 e2 01             	and    dl,0x1
c0003ae1:	0f 85 08 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ae7:	f7 c6 08 00 00 00    	test   esi,0x8
c0003aed:	74 03                	je     c0003af2 <f_open+0x1a8>
c0003aef:	83 ce 40             	or     esi,0x40
c0003af2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003af6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003afa:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003afd:	89 fa                	mov    edx,edi
c0003aff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003b03:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003b06:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003b09:	8a 01                	mov    al,BYTE PTR [ecx]
c0003b0b:	e8 dd f3 ff ff       	call   c0002eed <ld_clust.isra.0>
c0003b10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003b13:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003b16:	e8 3e e0 ff ff       	call   c0001b59 <ld_dword>
c0003b1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003b1f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003b22:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003b24:	31 d2                	xor    edx,edx
c0003b26:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003b2a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003b2e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003b32:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003b39:	89 f0                	mov    eax,esi
c0003b3b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003b42:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003b45:	b9 00 02 00 00       	mov    ecx,0x200
c0003b4a:	8d 43 28             	lea    eax,[ebx+0x28]
c0003b4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003b51:	e8 37 e0 ff ff       	call   c0001b8d <mem_set>
c0003b56:	83 e6 20             	and    esi,0x20
c0003b59:	75 07                	jne    c0003b62 <f_open+0x218>
c0003b5b:	31 c0                	xor    eax,eax
c0003b5d:	e9 8d 00 00 00       	jmp    c0003bef <f_open+0x2a5>
c0003b62:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003b65:	85 ff                	test   edi,edi
c0003b67:	74 f2                	je     c0003b5b <f_open+0x211>
c0003b69:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003b6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b70:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003b73:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003b77:	c1 e6 09             	shl    esi,0x9
c0003b7a:	39 fe                	cmp    esi,edi
c0003b7c:	73 1c                	jae    c0003b9a <f_open+0x250>
c0003b7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003b80:	29 f7                	sub    edi,esi
c0003b82:	e8 b7 f3 ff ff       	call   c0002f3e <get_fat.isra.2>
c0003b87:	89 c2                	mov    edx,eax
c0003b89:	83 f8 01             	cmp    eax,0x1
c0003b8c:	76 10                	jbe    c0003b9e <f_open+0x254>
c0003b8e:	83 f8 ff             	cmp    eax,0xffffffff
c0003b91:	75 e7                	jne    c0003b7a <f_open+0x230>
c0003b93:	b8 01 00 00 00       	mov    eax,0x1
c0003b98:	eb 09                	jmp    c0003ba3 <f_open+0x259>
c0003b9a:	31 c0                	xor    eax,eax
c0003b9c:	eb 05                	jmp    c0003ba3 <f_open+0x259>
c0003b9e:	b8 02 00 00 00       	mov    eax,0x2
c0003ba3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ba6:	85 c0                	test   eax,eax
c0003ba8:	75 45                	jne    c0003bef <f_open+0x2a5>
c0003baa:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003bb0:	74 a9                	je     c0003b5b <f_open+0x211>
c0003bb2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003bb6:	89 f0                	mov    eax,esi
c0003bb8:	e8 d5 e1 ff ff       	call   c0001d92 <clst2sect>
c0003bbd:	89 c2                	mov    edx,eax
c0003bbf:	b8 02 00 00 00       	mov    eax,0x2
c0003bc4:	85 d2                	test   edx,edx
c0003bc6:	74 27                	je     c0003bef <f_open+0x2a5>
c0003bc8:	89 f9                	mov    ecx,edi
c0003bca:	c1 e9 09             	shr    ecx,0x9
c0003bcd:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003bd0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003bd3:	6a 01                	push   0x1
c0003bd5:	50                   	push   eax
c0003bd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003bda:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003bde:	50                   	push   eax
c0003bdf:	e8 1d df ff ff       	call   c0001b01 <disk_read>
c0003be4:	83 c4 10             	add    esp,0x10
c0003be7:	85 c0                	test   eax,eax
c0003be9:	0f 95 c0             	setne  al
c0003bec:	0f b6 c0             	movzx  eax,al
c0003bef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bf3:	83 ec 0c             	sub    esp,0xc
c0003bf6:	55                   	push   ebp
c0003bf7:	e8 b4 1c 00 00       	call   c00058b0 <ff_memfree>
c0003bfc:	83 c4 10             	add    esp,0x10
c0003bff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c03:	85 c0                	test   eax,eax
c0003c05:	74 06                	je     c0003c0d <f_open+0x2c3>
c0003c07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003c0d:	83 c4 5c             	add    esp,0x5c
c0003c10:	5b                   	pop    ebx
c0003c11:	5e                   	pop    esi
c0003c12:	5f                   	pop    edi
c0003c13:	5d                   	pop    ebp
c0003c14:	c3                   	ret    

c0003c15 <f_read>:
c0003c15:	55                   	push   ebp
c0003c16:	57                   	push   edi
c0003c17:	56                   	push   esi
c0003c18:	53                   	push   ebx
c0003c19:	83 ec 2c             	sub    esp,0x2c
c0003c1c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003c20:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003c24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003c2a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003c2e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c32:	89 d8                	mov    eax,ebx
c0003c34:	e8 8f e3 ff ff       	call   c0001fc8 <validate>
c0003c39:	89 c5                	mov    ebp,eax
c0003c3b:	85 c0                	test   eax,eax
c0003c3d:	0f 85 c7 01 00 00    	jne    c0003e0a <f_read+0x1f5>
c0003c43:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003c47:	85 ed                	test   ebp,ebp
c0003c49:	0f 85 bb 01 00 00    	jne    c0003e0a <f_read+0x1f5>
c0003c4f:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003c53:	0f 84 ac 01 00 00    	je     c0003e05 <f_read+0x1f0>
c0003c59:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003c5c:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003c5f:	89 c7                	mov    edi,eax
c0003c61:	39 f0                	cmp    eax,esi
c0003c63:	0f 86 ad 00 00 00    	jbe    c0003d16 <f_read+0x101>
c0003c69:	89 f7                	mov    edi,esi
c0003c6b:	e9 a6 00 00 00       	jmp    c0003d16 <f_read+0x101>
c0003c70:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003c73:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003c79:	0f 85 5b 01 00 00    	jne    c0003dda <f_read+0x1c5>
c0003c7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c83:	89 d1                	mov    ecx,edx
c0003c85:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003c89:	c1 e9 09             	shr    ecx,0x9
c0003c8c:	48                   	dec    eax
c0003c8d:	21 c8                	and    eax,ecx
c0003c8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c93:	0f 84 8a 00 00 00    	je     c0003d23 <f_read+0x10e>
c0003c99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c9d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ca0:	89 c8                	mov    eax,ecx
c0003ca2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ca6:	e8 e7 e0 ff ff       	call   c0001d92 <clst2sect>
c0003cab:	85 c0                	test   eax,eax
c0003cad:	0f 84 88 00 00 00    	je     c0003d3b <f_read+0x126>
c0003cb3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003cb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003cbf:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003cc5:	0f 86 bd 00 00 00    	jbe    c0003d88 <f_read+0x173>
c0003ccb:	89 fe                	mov    esi,edi
c0003ccd:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003cd1:	c1 ee 09             	shr    esi,0x9
c0003cd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003cd8:	01 f2                	add    edx,esi
c0003cda:	39 c2                	cmp    edx,eax
c0003cdc:	76 06                	jbe    c0003ce4 <f_read+0xcf>
c0003cde:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ce2:	89 c6                	mov    esi,eax
c0003ce4:	56                   	push   esi
c0003ce5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ce9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ced:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003cf1:	50                   	push   eax
c0003cf2:	e8 0a de ff ff       	call   c0001b01 <disk_read>
c0003cf7:	83 c4 10             	add    esp,0x10
c0003cfa:	85 c0                	test   eax,eax
c0003cfc:	75 50                	jne    c0003d4e <f_read+0x139>
c0003cfe:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d02:	78 60                	js     c0003d64 <f_read+0x14f>
c0003d04:	c1 e6 09             	shl    esi,0x9
c0003d07:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003d0b:	29 f7                	sub    edi,esi
c0003d0d:	01 30                	add    DWORD PTR [eax],esi
c0003d0f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003d13:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003d16:	85 ff                	test   edi,edi
c0003d18:	0f 85 52 ff ff ff    	jne    c0003c70 <f_read+0x5b>
c0003d1e:	e9 e7 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d23:	85 d2                	test   edx,edx
c0003d25:	75 05                	jne    c0003d2c <f_read+0x117>
c0003d27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003d2a:	eb 0a                	jmp    c0003d36 <f_read+0x121>
c0003d2c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d31:	e8 08 f2 ff ff       	call   c0002f3e <get_fat.isra.2>
c0003d36:	83 f8 01             	cmp    eax,0x1
c0003d39:	77 0e                	ja     c0003d49 <f_read+0x134>
c0003d3b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003d3f:	bd 02 00 00 00       	mov    ebp,0x2
c0003d44:	e9 c1 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d49:	83 f8 ff             	cmp    eax,0xffffffff
c0003d4c:	75 0e                	jne    c0003d5c <f_read+0x147>
c0003d4e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003d52:	bd 01 00 00 00       	mov    ebp,0x1
c0003d57:	e9 ae 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d5c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003d5f:	e9 35 ff ff ff       	jmp    c0003c99 <f_read+0x84>
c0003d64:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d67:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003d6b:	39 f0                	cmp    eax,esi
c0003d6d:	73 95                	jae    c0003d04 <f_read+0xef>
c0003d6f:	c1 e0 09             	shl    eax,0x9
c0003d72:	8d 53 28             	lea    edx,[ebx+0x28]
c0003d75:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003d79:	b9 00 02 00 00       	mov    ecx,0x200
c0003d7e:	e8 f5 dd ff ff       	call   c0001b78 <mem_cpy>
c0003d83:	e9 7c ff ff ff       	jmp    c0003d04 <f_read+0xef>
c0003d88:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d8b:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003d8f:	74 42                	je     c0003dd3 <f_read+0x1be>
c0003d91:	8d 73 28             	lea    esi,[ebx+0x28]
c0003d94:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d98:	79 19                	jns    c0003db3 <f_read+0x19e>
c0003d9a:	6a 01                	push   0x1
c0003d9c:	50                   	push   eax
c0003d9d:	56                   	push   esi
c0003d9e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003da2:	50                   	push   eax
c0003da3:	e8 6f dd ff ff       	call   c0001b17 <disk_write>
c0003da8:	83 c4 10             	add    esp,0x10
c0003dab:	85 c0                	test   eax,eax
c0003dad:	75 9f                	jne    c0003d4e <f_read+0x139>
c0003daf:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003db3:	6a 01                	push   0x1
c0003db5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003db9:	56                   	push   esi
c0003dba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003dbe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003dc2:	50                   	push   eax
c0003dc3:	e8 39 dd ff ff       	call   c0001b01 <disk_read>
c0003dc8:	83 c4 10             	add    esp,0x10
c0003dcb:	85 c0                	test   eax,eax
c0003dcd:	0f 85 7b ff ff ff    	jne    c0003d4e <f_read+0x139>
c0003dd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dd7:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dda:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003ddd:	ba 00 02 00 00       	mov    edx,0x200
c0003de2:	25 ff 01 00 00       	and    eax,0x1ff
c0003de7:	89 fe                	mov    esi,edi
c0003de9:	29 c2                	sub    edx,eax
c0003deb:	39 d7                	cmp    edi,edx
c0003ded:	76 02                	jbe    c0003df1 <f_read+0x1dc>
c0003def:	89 d6                	mov    esi,edx
c0003df1:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003df5:	89 f1                	mov    ecx,esi
c0003df7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003dfb:	e8 78 dd ff ff       	call   c0001b78 <mem_cpy>
c0003e00:	e9 02 ff ff ff       	jmp    c0003d07 <f_read+0xf2>
c0003e05:	bd 07 00 00 00       	mov    ebp,0x7
c0003e0a:	83 c4 2c             	add    esp,0x2c
c0003e0d:	89 e8                	mov    eax,ebp
c0003e0f:	5b                   	pop    ebx
c0003e10:	5e                   	pop    esi
c0003e11:	5f                   	pop    edi
c0003e12:	5d                   	pop    ebp
c0003e13:	c3                   	ret    

c0003e14 <f_write>:
c0003e14:	55                   	push   ebp
c0003e15:	57                   	push   edi
c0003e16:	56                   	push   esi
c0003e17:	53                   	push   ebx
c0003e18:	83 ec 2c             	sub    esp,0x2c
c0003e1b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e23:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e29:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e2d:	89 d8                	mov    eax,ebx
c0003e2f:	e8 94 e1 ff ff       	call   c0001fc8 <validate>
c0003e34:	89 c5                	mov    ebp,eax
c0003e36:	85 c0                	test   eax,eax
c0003e38:	0f 85 00 02 00 00    	jne    c000403e <f_write+0x22a>
c0003e3e:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e42:	85 ed                	test   ebp,ebp
c0003e44:	0f 85 f4 01 00 00    	jne    c000403e <f_write+0x22a>
c0003e4a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0003e4e:	0f 84 e5 01 00 00    	je     c0004039 <f_write+0x225>
c0003e54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003e57:	89 c7                	mov    edi,eax
c0003e59:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0003e5d:	0f 83 ea 00 00 00    	jae    c0003f4d <f_write+0x139>
c0003e63:	f7 d0                	not    eax
c0003e65:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0003e69:	e9 df 00 00 00       	jmp    c0003f4d <f_write+0x139>
c0003e6e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e71:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e77:	0f 85 8b 01 00 00    	jne    c0004008 <f_write+0x1f4>
c0003e7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e81:	89 d1                	mov    ecx,edx
c0003e83:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e87:	c1 e9 09             	shr    ecx,0x9
c0003e8a:	48                   	dec    eax
c0003e8b:	21 c8                	and    eax,ecx
c0003e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e91:	0f 84 c3 00 00 00    	je     c0003f5a <f_write+0x146>
c0003e97:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003e9b:	0f 88 18 01 00 00    	js     c0003fb9 <f_write+0x1a5>
c0003ea1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ea5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ea8:	89 c8                	mov    eax,ecx
c0003eaa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003eae:	e8 df de ff ff       	call   c0001d92 <clst2sect>
c0003eb3:	85 c0                	test   eax,eax
c0003eb5:	0f 84 c8 00 00 00    	je     c0003f83 <f_write+0x16f>
c0003ebb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003ebf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ec3:	01 c7                	add    edi,eax
c0003ec5:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0003ecd:	0f 86 0d 01 00 00    	jbe    c0003fe0 <f_write+0x1cc>
c0003ed3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003ed7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003edb:	c1 ee 09             	shr    esi,0x9
c0003ede:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ee2:	01 f2                	add    edx,esi
c0003ee4:	39 c2                	cmp    edx,eax
c0003ee6:	76 06                	jbe    c0003eee <f_write+0xda>
c0003ee8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eec:	89 c6                	mov    esi,eax
c0003eee:	56                   	push   esi
c0003eef:	57                   	push   edi
c0003ef0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ef4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ef8:	50                   	push   eax
c0003ef9:	e8 19 dc ff ff       	call   c0001b17 <disk_write>
c0003efe:	83 c4 10             	add    esp,0x10
c0003f01:	85 c0                	test   eax,eax
c0003f03:	0f 85 8d 00 00 00    	jne    c0003f96 <f_write+0x182>
c0003f09:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f0c:	29 fa                	sub    edx,edi
c0003f0e:	39 f2                	cmp    edx,esi
c0003f10:	73 18                	jae    c0003f2a <f_write+0x116>
c0003f12:	c1 e2 09             	shl    edx,0x9
c0003f15:	8d 43 28             	lea    eax,[ebx+0x28]
c0003f18:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0003f1c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f21:	e8 52 dc ff ff       	call   c0001b78 <mem_cpy>
c0003f26:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f2a:	c1 e6 09             	shl    esi,0x9
c0003f2d:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0003f31:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f35:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f39:	01 30                	add    DWORD PTR [eax],esi
c0003f3b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0003f3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f41:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003f44:	39 f0                	cmp    eax,esi
c0003f46:	73 02                	jae    c0003f4a <f_write+0x136>
c0003f48:	89 f0                	mov    eax,esi
c0003f4a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003f4d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0003f52:	0f 85 16 ff ff ff    	jne    c0003e6e <f_write+0x5a>
c0003f58:	eb 1b                	jmp    c0003f75 <f_write+0x161>
c0003f5a:	85 d2                	test   edx,edx
c0003f5c:	75 09                	jne    c0003f67 <f_write+0x153>
c0003f5e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f61:	85 c0                	test   eax,eax
c0003f63:	75 19                	jne    c0003f7e <f_write+0x16a>
c0003f65:	eb 03                	jmp    c0003f6a <f_write+0x156>
c0003f67:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f6a:	89 d8                	mov    eax,ebx
c0003f6c:	e8 97 f1 ff ff       	call   c0003108 <create_chain>
c0003f71:	85 c0                	test   eax,eax
c0003f73:	75 09                	jne    c0003f7e <f_write+0x16a>
c0003f75:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0003f79:	e9 c0 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003f7e:	83 f8 01             	cmp    eax,0x1
c0003f81:	75 0e                	jne    c0003f91 <f_write+0x17d>
c0003f83:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f87:	bd 02 00 00 00       	mov    ebp,0x2
c0003f8c:	e9 ad 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003f91:	83 f8 ff             	cmp    eax,0xffffffff
c0003f94:	75 0e                	jne    c0003fa4 <f_write+0x190>
c0003f96:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f9a:	bd 01 00 00 00       	mov    ebp,0x1
c0003f9f:	e9 9a 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003fa4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003fa7:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003fab:	0f 85 e6 fe ff ff    	jne    c0003e97 <f_write+0x83>
c0003fb1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003fb4:	e9 de fe ff ff       	jmp    c0003e97 <f_write+0x83>
c0003fb9:	6a 01                	push   0x1
c0003fbb:	8d 43 28             	lea    eax,[ebx+0x28]
c0003fbe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0003fc1:	50                   	push   eax
c0003fc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fc6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fca:	50                   	push   eax
c0003fcb:	e8 47 db ff ff       	call   c0001b17 <disk_write>
c0003fd0:	83 c4 10             	add    esp,0x10
c0003fd3:	85 c0                	test   eax,eax
c0003fd5:	75 bf                	jne    c0003f96 <f_write+0x182>
c0003fd7:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fdb:	e9 c1 fe ff ff       	jmp    c0003ea1 <f_write+0x8d>
c0003fe0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0003fe3:	74 20                	je     c0004005 <f_write+0x1f1>
c0003fe5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fe8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0003feb:	76 18                	jbe    c0004005 <f_write+0x1f1>
c0003fed:	6a 01                	push   0x1
c0003fef:	8d 43 28             	lea    eax,[ebx+0x28]
c0003ff2:	57                   	push   edi
c0003ff3:	50                   	push   eax
c0003ff4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ff8:	50                   	push   eax
c0003ff9:	e8 03 db ff ff       	call   c0001b01 <disk_read>
c0003ffe:	83 c4 10             	add    esp,0x10
c0004001:	85 c0                	test   eax,eax
c0004003:	75 91                	jne    c0003f96 <f_write+0x182>
c0004005:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004008:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000400b:	ba 00 02 00 00       	mov    edx,0x200
c0004010:	25 ff 01 00 00       	and    eax,0x1ff
c0004015:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004019:	29 c2                	sub    edx,eax
c000401b:	39 d6                	cmp    esi,edx
c000401d:	76 02                	jbe    c0004021 <f_write+0x20d>
c000401f:	89 d6                	mov    esi,edx
c0004021:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004025:	89 f1                	mov    ecx,esi
c0004027:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000402b:	e8 48 db ff ff       	call   c0001b78 <mem_cpy>
c0004030:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004034:	e9 f4 fe ff ff       	jmp    c0003f2d <f_write+0x119>
c0004039:	bd 07 00 00 00       	mov    ebp,0x7
c000403e:	83 c4 2c             	add    esp,0x2c
c0004041:	89 e8                	mov    eax,ebp
c0004043:	5b                   	pop    ebx
c0004044:	5e                   	pop    esi
c0004045:	5f                   	pop    edi
c0004046:	5d                   	pop    ebp
c0004047:	c3                   	ret    

c0004048 <f_sync>:
c0004048:	56                   	push   esi
c0004049:	53                   	push   ebx
c000404a:	83 ec 14             	sub    esp,0x14
c000404d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004051:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004055:	89 d8                	mov    eax,ebx
c0004057:	e8 6c df ff ff       	call   c0001fc8 <validate>
c000405c:	85 c0                	test   eax,eax
c000405e:	0f 85 93 00 00 00    	jne    c00040f7 <f_sync+0xaf>
c0004064:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004067:	f6 c2 40             	test   dl,0x40
c000406a:	0f 84 87 00 00 00    	je     c00040f7 <f_sync+0xaf>
c0004070:	84 d2                	test   dl,dl
c0004072:	79 29                	jns    c000409d <f_sync+0x55>
c0004074:	6a 01                	push   0x1
c0004076:	8d 43 28             	lea    eax,[ebx+0x28]
c0004079:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000407c:	50                   	push   eax
c000407d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004081:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004085:	50                   	push   eax
c0004086:	e8 8c da ff ff       	call   c0001b17 <disk_write>
c000408b:	83 c4 10             	add    esp,0x10
c000408e:	89 c2                	mov    edx,eax
c0004090:	b8 01 00 00 00       	mov    eax,0x1
c0004095:	85 d2                	test   edx,edx
c0004097:	75 5e                	jne    c00040f7 <f_sync+0xaf>
c0004099:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000409d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00040a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040a4:	e8 c9 df ff ff       	call   c0002072 <move_window>
c00040a9:	85 c0                	test   eax,eax
c00040ab:	75 4a                	jne    c00040f7 <f_sync+0xaf>
c00040ad:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00040b0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00040b4:	89 f2                	mov    edx,esi
c00040b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00040b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040bb:	e8 56 ee ff ff       	call   c0002f16 <st_clust.isra.1>
c00040c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040c3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00040c6:	e8 aa da ff ff       	call   c0001b75 <st_dword>
c00040cb:	8d 46 16             	lea    eax,[esi+0x16]
c00040ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00040d3:	e8 9d da ff ff       	call   c0001b75 <st_dword>
c00040d8:	8d 46 12             	lea    eax,[esi+0x12]
c00040db:	31 d2                	xor    edx,edx
c00040dd:	e8 8f da ff ff       	call   c0001b71 <st_word>
c00040e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040e6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00040ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040ee:	e8 bf e9 ff ff       	call   c0002ab2 <sync_fs>
c00040f3:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00040f7:	83 c4 14             	add    esp,0x14
c00040fa:	5b                   	pop    ebx
c00040fb:	5e                   	pop    esi
c00040fc:	c3                   	ret    

c00040fd <f_close>:
c00040fd:	53                   	push   ebx
c00040fe:	83 ec 24             	sub    esp,0x24
c0004101:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004105:	53                   	push   ebx
c0004106:	e8 3d ff ff ff       	call   c0004048 <f_sync>
c000410b:	83 c4 10             	add    esp,0x10
c000410e:	85 c0                	test   eax,eax
c0004110:	75 15                	jne    c0004127 <f_close+0x2a>
c0004112:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004116:	89 d8                	mov    eax,ebx
c0004118:	e8 ab de ff ff       	call   c0001fc8 <validate>
c000411d:	85 c0                	test   eax,eax
c000411f:	75 06                	jne    c0004127 <f_close+0x2a>
c0004121:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004127:	83 c4 18             	add    esp,0x18
c000412a:	5b                   	pop    ebx
c000412b:	c3                   	ret    

c000412c <f_lseek>:
c000412c:	55                   	push   ebp
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	83 ec 2c             	sub    esp,0x2c
c0004133:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004137:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000413b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000413f:	89 d8                	mov    eax,ebx
c0004141:	e8 82 de ff ff       	call   c0001fc8 <validate>
c0004146:	89 c5                	mov    ebp,eax
c0004148:	85 c0                	test   eax,eax
c000414a:	0f 85 79 01 00 00    	jne    c00042c9 <f_lseek+0x19d>
c0004150:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004154:	85 ed                	test   ebp,ebp
c0004156:	0f 85 6d 01 00 00    	jne    c00042c9 <f_lseek+0x19d>
c000415c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000415f:	39 f0                	cmp    eax,esi
c0004161:	73 08                	jae    c000416b <f_lseek+0x3f>
c0004163:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004167:	75 02                	jne    c000416b <f_lseek+0x3f>
c0004169:	89 c6                	mov    esi,eax
c000416b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000416e:	85 f6                	test   esi,esi
c0004170:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004177:	75 07                	jne    c0004180 <f_lseek+0x54>
c0004179:	31 f6                	xor    esi,esi
c000417b:	e9 e2 00 00 00       	jmp    c0004262 <f_lseek+0x136>
c0004180:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004184:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004188:	c1 e7 09             	shl    edi,0x9
c000418b:	85 c9                	test   ecx,ecx
c000418d:	74 28                	je     c00041b7 <f_lseek+0x8b>
c000418f:	49                   	dec    ecx
c0004190:	31 d2                	xor    edx,edx
c0004192:	8d 46 ff             	lea    eax,[esi-0x1]
c0004195:	f7 f7                	div    edi
c0004197:	31 d2                	xor    edx,edx
c0004199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000419d:	89 c8                	mov    eax,ecx
c000419f:	f7 f7                	div    edi
c00041a1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00041a5:	72 10                	jb     c00041b7 <f_lseek+0x8b>
c00041a7:	89 f8                	mov    eax,edi
c00041a9:	f7 d8                	neg    eax
c00041ab:	21 c1                	and    ecx,eax
c00041ad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00041b0:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00041b3:	29 ce                	sub    esi,ecx
c00041b5:	eb 3c                	jmp    c00041f3 <f_lseek+0xc7>
c00041b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041ba:	85 c0                	test   eax,eax
c00041bc:	75 32                	jne    c00041f0 <f_lseek+0xc4>
c00041be:	31 d2                	xor    edx,edx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 41 ef ff ff       	call   c0003108 <create_chain>
c00041c7:	83 f8 01             	cmp    eax,0x1
c00041ca:	75 0e                	jne    c00041da <f_lseek+0xae>
c00041cc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041d0:	bd 02 00 00 00       	mov    ebp,0x2
c00041d5:	e9 ef 00 00 00       	jmp    c00042c9 <f_lseek+0x19d>
c00041da:	83 f8 ff             	cmp    eax,0xffffffff
c00041dd:	75 0e                	jne    c00041ed <f_lseek+0xc1>
c00041df:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041e3:	bd 01 00 00 00       	mov    ebp,0x1
c00041e8:	e9 dc 00 00 00       	jmp    c00042c9 <f_lseek+0x19d>
c00041ed:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041f0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00041f3:	85 c0                	test   eax,eax
c00041f5:	74 82                	je     c0004179 <f_lseek+0x4d>
c00041f7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00041fa:	39 fe                	cmp    esi,edi
c00041fc:	76 3d                	jbe    c000423b <f_lseek+0x10f>
c00041fe:	01 fa                	add    edx,edi
c0004200:	29 fe                	sub    esi,edi
c0004202:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004205:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004209:	89 c2                	mov    edx,eax
c000420b:	74 0d                	je     c000421a <f_lseek+0xee>
c000420d:	89 d8                	mov    eax,ebx
c000420f:	e8 f4 ee ff ff       	call   c0003108 <create_chain>
c0004214:	85 c0                	test   eax,eax
c0004216:	75 09                	jne    c0004221 <f_lseek+0xf5>
c0004218:	eb 1f                	jmp    c0004239 <f_lseek+0x10d>
c000421a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000421c:	e8 1d ed ff ff       	call   c0002f3e <get_fat.isra.2>
c0004221:	83 f8 ff             	cmp    eax,0xffffffff
c0004224:	74 b9                	je     c00041df <f_lseek+0xb3>
c0004226:	83 f8 01             	cmp    eax,0x1
c0004229:	76 a1                	jbe    c00041cc <f_lseek+0xa0>
c000422b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000422f:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004232:	76 98                	jbe    c00041cc <f_lseek+0xa0>
c0004234:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004237:	eb be                	jmp    c00041f7 <f_lseek+0xcb>
c0004239:	31 f6                	xor    esi,esi
c000423b:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000423e:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004244:	0f 84 2f ff ff ff    	je     c0004179 <f_lseek+0x4d>
c000424a:	89 c2                	mov    edx,eax
c000424c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004250:	e8 3d db ff ff       	call   c0001d92 <clst2sect>
c0004255:	85 c0                	test   eax,eax
c0004257:	0f 84 6f ff ff ff    	je     c00041cc <f_lseek+0xa0>
c000425d:	c1 ee 09             	shr    esi,0x9
c0004260:	01 c6                	add    esi,eax
c0004262:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004265:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004268:	76 07                	jbe    c0004271 <f_lseek+0x145>
c000426a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000426d:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004271:	a9 ff 01 00 00       	test   eax,0x1ff
c0004276:	74 51                	je     c00042c9 <f_lseek+0x19d>
c0004278:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000427b:	39 f0                	cmp    eax,esi
c000427d:	74 4a                	je     c00042c9 <f_lseek+0x19d>
c000427f:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004282:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004286:	79 21                	jns    c00042a9 <f_lseek+0x17d>
c0004288:	6a 01                	push   0x1
c000428a:	50                   	push   eax
c000428b:	57                   	push   edi
c000428c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004290:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004294:	50                   	push   eax
c0004295:	e8 7d d8 ff ff       	call   c0001b17 <disk_write>
c000429a:	83 c4 10             	add    esp,0x10
c000429d:	85 c0                	test   eax,eax
c000429f:	0f 85 3a ff ff ff    	jne    c00041df <f_lseek+0xb3>
c00042a5:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00042a9:	6a 01                	push   0x1
c00042ab:	56                   	push   esi
c00042ac:	57                   	push   edi
c00042ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b5:	50                   	push   eax
c00042b6:	e8 46 d8 ff ff       	call   c0001b01 <disk_read>
c00042bb:	83 c4 10             	add    esp,0x10
c00042be:	85 c0                	test   eax,eax
c00042c0:	0f 85 19 ff ff ff    	jne    c00041df <f_lseek+0xb3>
c00042c6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00042c9:	83 c4 2c             	add    esp,0x2c
c00042cc:	89 e8                	mov    eax,ebp
c00042ce:	5b                   	pop    ebx
c00042cf:	5e                   	pop    esi
c00042d0:	5f                   	pop    edi
c00042d1:	5d                   	pop    ebp
c00042d2:	c3                   	ret    

c00042d3 <f_opendir>:
c00042d3:	56                   	push   esi
c00042d4:	b8 09 00 00 00       	mov    eax,0x9
c00042d9:	53                   	push   ebx
c00042da:	83 ec 24             	sub    esp,0x24
c00042dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00042e1:	85 db                	test   ebx,ebx
c00042e3:	0f 84 af 00 00 00    	je     c0004398 <f_opendir+0xc5>
c00042e9:	31 c9                	xor    ecx,ecx
c00042eb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042ef:	8d 44 24 34          	lea    eax,[esp+0x34]
c00042f3:	e8 cd de ff ff       	call   c00021c5 <mount_volume>
c00042f8:	85 c0                	test   eax,eax
c00042fa:	0f 85 92 00 00 00    	jne    c0004392 <f_opendir+0xbf>
c0004300:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004304:	83 ec 0c             	sub    esp,0xc
c0004307:	89 03                	mov    DWORD PTR [ebx],eax
c0004309:	68 00 02 00 00       	push   0x200
c000430e:	e8 85 15 00 00       	call   c0005898 <ff_memalloc>
c0004313:	83 c4 10             	add    esp,0x10
c0004316:	89 c6                	mov    esi,eax
c0004318:	b8 11 00 00 00       	mov    eax,0x11
c000431d:	85 f6                	test   esi,esi
c000431f:	74 77                	je     c0004398 <f_opendir+0xc5>
c0004321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004325:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004329:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000432c:	89 d8                	mov    eax,ebx
c000432e:	e8 9c f3 ff ff       	call   c00036cf <follow_path>
c0004333:	85 c0                	test   eax,eax
c0004335:	75 37                	jne    c000436e <f_opendir+0x9b>
c0004337:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000433b:	78 1c                	js     c0004359 <f_opendir+0x86>
c000433d:	b8 05 00 00 00       	mov    eax,0x5
c0004342:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004346:	74 26                	je     c000436e <f_opendir+0x9b>
c0004348:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000434b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000434f:	8a 00                	mov    al,BYTE PTR [eax]
c0004351:	e8 97 eb ff ff       	call   c0002eed <ld_clust.isra.0>
c0004356:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000435d:	31 d2                	xor    edx,edx
c000435f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004363:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004367:	89 d8                	mov    eax,ebx
c0004369:	e8 d2 ec ff ff       	call   c0003040 <dir_sdi>
c000436e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004372:	83 ec 0c             	sub    esp,0xc
c0004375:	56                   	push   esi
c0004376:	e8 35 15 00 00       	call   c00058b0 <ff_memfree>
c000437b:	83 c4 10             	add    esp,0x10
c000437e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004382:	83 f8 04             	cmp    eax,0x4
c0004385:	74 06                	je     c000438d <f_opendir+0xba>
c0004387:	85 c0                	test   eax,eax
c0004389:	74 0d                	je     c0004398 <f_opendir+0xc5>
c000438b:	eb 05                	jmp    c0004392 <f_opendir+0xbf>
c000438d:	b8 05 00 00 00       	mov    eax,0x5
c0004392:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004398:	83 c4 24             	add    esp,0x24
c000439b:	5b                   	pop    ebx
c000439c:	5e                   	pop    esi
c000439d:	c3                   	ret    

c000439e <f_closedir>:
c000439e:	53                   	push   ebx
c000439f:	83 ec 18             	sub    esp,0x18
c00043a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00043a6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00043aa:	89 d8                	mov    eax,ebx
c00043ac:	e8 17 dc ff ff       	call   c0001fc8 <validate>
c00043b1:	85 c0                	test   eax,eax
c00043b3:	75 06                	jne    c00043bb <f_closedir+0x1d>
c00043b5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00043bb:	83 c4 18             	add    esp,0x18
c00043be:	5b                   	pop    ebx
c00043bf:	c3                   	ret    

c00043c0 <f_readdir>:
c00043c0:	57                   	push   edi
c00043c1:	56                   	push   esi
c00043c2:	53                   	push   ebx
c00043c3:	83 ec 20             	sub    esp,0x20
c00043c6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00043ca:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00043ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00043d2:	89 d8                	mov    eax,ebx
c00043d4:	e8 ef db ff ff       	call   c0001fc8 <validate>
c00043d9:	85 c0                	test   eax,eax
c00043db:	75 6e                	jne    c000444b <f_readdir+0x8b>
c00043dd:	85 ff                	test   edi,edi
c00043df:	75 0b                	jne    c00043ec <f_readdir+0x2c>
c00043e1:	31 d2                	xor    edx,edx
c00043e3:	89 d8                	mov    eax,ebx
c00043e5:	e8 56 ec ff ff       	call   c0003040 <dir_sdi>
c00043ea:	eb 5f                	jmp    c000444b <f_readdir+0x8b>
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	68 00 02 00 00       	push   0x200
c00043f4:	e8 9f 14 00 00       	call   c0005898 <ff_memalloc>
c00043f9:	83 c4 10             	add    esp,0x10
c00043fc:	89 c6                	mov    esi,eax
c00043fe:	b8 11 00 00 00       	mov    eax,0x11
c0004403:	85 f6                	test   esi,esi
c0004405:	74 44                	je     c000444b <f_readdir+0x8b>
c0004407:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000440b:	31 d2                	xor    edx,edx
c000440d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004410:	89 d8                	mov    eax,ebx
c0004412:	e8 1a f0 ff ff       	call   c0003431 <dir_read>
c0004417:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000441c:	75 19                	jne    c0004437 <f_readdir+0x77>
c000441e:	89 fa                	mov    edx,edi
c0004420:	89 d8                	mov    eax,ebx
c0004422:	e8 e2 e8 ff ff       	call   c0002d09 <get_fileinfo>
c0004427:	31 d2                	xor    edx,edx
c0004429:	89 d8                	mov    eax,ebx
c000442b:	e8 9b ee ff ff       	call   c00032cb <dir_next>
c0004430:	83 f8 04             	cmp    eax,0x4
c0004433:	75 02                	jne    c0004437 <f_readdir+0x77>
c0004435:	31 c0                	xor    eax,eax
c0004437:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000443b:	83 ec 0c             	sub    esp,0xc
c000443e:	56                   	push   esi
c000443f:	e8 6c 14 00 00       	call   c00058b0 <ff_memfree>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000444b:	83 c4 20             	add    esp,0x20
c000444e:	5b                   	pop    ebx
c000444f:	5e                   	pop    esi
c0004450:	5f                   	pop    edi
c0004451:	c3                   	ret    

c0004452 <f_stat>:
c0004452:	57                   	push   edi
c0004453:	31 c9                	xor    ecx,ecx
c0004455:	56                   	push   esi
c0004456:	53                   	push   ebx
c0004457:	83 ec 30             	sub    esp,0x30
c000445a:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000445e:	89 e2                	mov    edx,esp
c0004460:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004464:	e8 5c dd ff ff       	call   c00021c5 <mount_volume>
c0004469:	89 c3                	mov    ebx,eax
c000446b:	85 c0                	test   eax,eax
c000446d:	75 59                	jne    c00044c8 <f_stat+0x76>
c000446f:	83 ec 0c             	sub    esp,0xc
c0004472:	bb 11 00 00 00       	mov    ebx,0x11
c0004477:	68 00 02 00 00       	push   0x200
c000447c:	e8 17 14 00 00       	call   c0005898 <ff_memalloc>
c0004481:	83 c4 10             	add    esp,0x10
c0004484:	89 c6                	mov    esi,eax
c0004486:	85 c0                	test   eax,eax
c0004488:	74 3e                	je     c00044c8 <f_stat+0x76>
c000448a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000448d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004491:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004494:	89 e0                	mov    eax,esp
c0004496:	e8 34 f2 ff ff       	call   c00036cf <follow_path>
c000449b:	89 c3                	mov    ebx,eax
c000449d:	85 c0                	test   eax,eax
c000449f:	75 1b                	jne    c00044bc <f_stat+0x6a>
c00044a1:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c00044a6:	78 0f                	js     c00044b7 <f_stat+0x65>
c00044a8:	85 ff                	test   edi,edi
c00044aa:	74 10                	je     c00044bc <f_stat+0x6a>
c00044ac:	89 fa                	mov    edx,edi
c00044ae:	89 e0                	mov    eax,esp
c00044b0:	e8 54 e8 ff ff       	call   c0002d09 <get_fileinfo>
c00044b5:	eb 05                	jmp    c00044bc <f_stat+0x6a>
c00044b7:	bb 06 00 00 00       	mov    ebx,0x6
c00044bc:	83 ec 0c             	sub    esp,0xc
c00044bf:	56                   	push   esi
c00044c0:	e8 eb 13 00 00       	call   c00058b0 <ff_memfree>
c00044c5:	83 c4 10             	add    esp,0x10
c00044c8:	83 c4 30             	add    esp,0x30
c00044cb:	89 d8                	mov    eax,ebx
c00044cd:	5b                   	pop    ebx
c00044ce:	5e                   	pop    esi
c00044cf:	5f                   	pop    edi
c00044d0:	c3                   	ret    

c00044d1 <f_getfree>:
c00044d1:	55                   	push   ebp
c00044d2:	31 c9                	xor    ecx,ecx
c00044d4:	57                   	push   edi
c00044d5:	56                   	push   esi
c00044d6:	53                   	push   ebx
c00044d7:	83 ec 2c             	sub    esp,0x2c
c00044da:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044de:	8d 44 24 40          	lea    eax,[esp+0x40]
c00044e2:	e8 de dc ff ff       	call   c00021c5 <mount_volume>
c00044e7:	89 c7                	mov    edi,eax
c00044e9:	85 c0                	test   eax,eax
c00044eb:	0f 85 d8 00 00 00    	jne    c00045c9 <f_getfree+0xf8>
c00044f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00044f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00044f9:	89 30                	mov    DWORD PTR [eax],esi
c00044fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00044fe:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004501:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004504:	39 d0                	cmp    eax,edx
c0004506:	77 0b                	ja     c0004513 <f_getfree+0x42>
c0004508:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000450c:	89 01                	mov    DWORD PTR [ecx],eax
c000450e:	e9 b6 00 00 00       	jmp    c00045c9 <f_getfree+0xf8>
c0004513:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004516:	75 29                	jne    c0004541 <f_getfree+0x70>
c0004518:	bd 02 00 00 00       	mov    ebp,0x2
c000451d:	31 db                	xor    ebx,ebx
c000451f:	89 ea                	mov    edx,ebp
c0004521:	89 f0                	mov    eax,esi
c0004523:	e8 16 ea ff ff       	call   c0002f3e <get_fat.isra.2>
c0004528:	83 f8 ff             	cmp    eax,0xffffffff
c000452b:	74 7b                	je     c00045a8 <f_getfree+0xd7>
c000452d:	83 f8 01             	cmp    eax,0x1
c0004530:	74 7d                	je     c00045af <f_getfree+0xde>
c0004532:	83 d3 00             	adc    ebx,0x0
c0004535:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004539:	45                   	inc    ebp
c000453a:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c000453d:	77 e0                	ja     c000451f <f_getfree+0x4e>
c000453f:	eb 77                	jmp    c00045b8 <f_getfree+0xe7>
c0004541:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004544:	31 db                	xor    ebx,ebx
c0004546:	31 f6                	xor    esi,esi
c0004548:	85 f6                	test   esi,esi
c000454a:	75 18                	jne    c0004564 <f_getfree+0x93>
c000454c:	8d 42 01             	lea    eax,[edx+0x1]
c000454f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004553:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004557:	e8 16 db ff ff       	call   c0002072 <move_window>
c000455c:	85 c0                	test   eax,eax
c000455e:	75 56                	jne    c00045b6 <f_getfree+0xe5>
c0004560:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004564:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004568:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000456c:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004570:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004573:	75 11                	jne    c0004586 <f_getfree+0xb5>
c0004575:	e8 d2 d5 ff ff       	call   c0001b4c <ld_word>
c000457a:	66 83 f8 01          	cmp    ax,0x1
c000457e:	83 d3 00             	adc    ebx,0x0
c0004581:	83 c6 02             	add    esi,0x2
c0004584:	eb 13                	jmp    c0004599 <f_getfree+0xc8>
c0004586:	e8 ce d5 ff ff       	call   c0001b59 <ld_dword>
c000458b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004590:	83 f8 01             	cmp    eax,0x1
c0004593:	83 d3 00             	adc    ebx,0x0
c0004596:	83 c6 04             	add    esi,0x4
c0004599:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000459f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00045a3:	4d                   	dec    ebp
c00045a4:	75 a2                	jne    c0004548 <f_getfree+0x77>
c00045a6:	eb 10                	jmp    c00045b8 <f_getfree+0xe7>
c00045a8:	bf 01 00 00 00       	mov    edi,0x1
c00045ad:	eb 09                	jmp    c00045b8 <f_getfree+0xe7>
c00045af:	bf 02 00 00 00       	mov    edi,0x2
c00045b4:	eb 02                	jmp    c00045b8 <f_getfree+0xe7>
c00045b6:	89 c7                	mov    edi,eax
c00045b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00045bc:	89 18                	mov    DWORD PTR [eax],ebx
c00045be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045c2:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00045c5:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00045c9:	83 c4 2c             	add    esp,0x2c
c00045cc:	89 f8                	mov    eax,edi
c00045ce:	5b                   	pop    ebx
c00045cf:	5e                   	pop    esi
c00045d0:	5f                   	pop    edi
c00045d1:	5d                   	pop    ebp
c00045d2:	c3                   	ret    

c00045d3 <f_truncate>:
c00045d3:	56                   	push   esi
c00045d4:	53                   	push   ebx
c00045d5:	83 ec 14             	sub    esp,0x14
c00045d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00045dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00045e0:	89 d8                	mov    eax,ebx
c00045e2:	e8 e1 d9 ff ff       	call   c0001fc8 <validate>
c00045e7:	89 c6                	mov    esi,eax
c00045e9:	85 c0                	test   eax,eax
c00045eb:	0f 85 be 00 00 00    	jne    c00046af <f_truncate+0xdc>
c00045f1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00045f5:	85 f6                	test   esi,esi
c00045f7:	0f 85 b2 00 00 00    	jne    c00046af <f_truncate+0xdc>
c00045fd:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004601:	0f 84 a3 00 00 00    	je     c00046aa <f_truncate+0xd7>
c0004607:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000460a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000460d:	0f 83 9c 00 00 00    	jae    c00046af <f_truncate+0xdc>
c0004613:	85 c0                	test   eax,eax
c0004615:	75 15                	jne    c000462c <f_truncate+0x59>
c0004617:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000461a:	31 c9                	xor    ecx,ecx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 1f ec ff ff       	call   c0003242 <remove_chain>
c0004623:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000462a:	eb 35                	jmp    c0004661 <f_truncate+0x8e>
c000462c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000462f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004631:	e8 08 e9 ff ff       	call   c0002f3e <get_fat.isra.2>
c0004636:	89 c2                	mov    edx,eax
c0004638:	b8 01 00 00 00       	mov    eax,0x1
c000463d:	83 fa ff             	cmp    edx,0xffffffff
c0004640:	74 1f                	je     c0004661 <f_truncate+0x8e>
c0004642:	b8 02 00 00 00       	mov    eax,0x2
c0004647:	83 fa 01             	cmp    edx,0x1
c000464a:	74 15                	je     c0004661 <f_truncate+0x8e>
c000464c:	31 c0                	xor    eax,eax
c000464e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004652:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004655:	76 0a                	jbe    c0004661 <f_truncate+0x8e>
c0004657:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000465a:	89 d8                	mov    eax,ebx
c000465c:	e8 e1 eb ff ff       	call   c0003242 <remove_chain>
c0004661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004664:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004667:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000466a:	83 ca 40             	or     edx,0x40
c000466d:	85 c0                	test   eax,eax
c000466f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004672:	75 2f                	jne    c00046a3 <f_truncate+0xd0>
c0004674:	84 d2                	test   dl,dl
c0004676:	79 37                	jns    c00046af <f_truncate+0xdc>
c0004678:	6a 01                	push   0x1
c000467a:	8d 43 28             	lea    eax,[ebx+0x28]
c000467d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004680:	50                   	push   eax
c0004681:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004685:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004689:	50                   	push   eax
c000468a:	e8 88 d4 ff ff       	call   c0001b17 <disk_write>
c000468f:	83 c4 10             	add    esp,0x10
c0004692:	85 c0                	test   eax,eax
c0004694:	75 08                	jne    c000469e <f_truncate+0xcb>
c0004696:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000469a:	31 f6                	xor    esi,esi
c000469c:	eb 11                	jmp    c00046af <f_truncate+0xdc>
c000469e:	b8 01 00 00 00       	mov    eax,0x1
c00046a3:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00046a6:	89 c6                	mov    esi,eax
c00046a8:	eb 05                	jmp    c00046af <f_truncate+0xdc>
c00046aa:	be 07 00 00 00       	mov    esi,0x7
c00046af:	89 f0                	mov    eax,esi
c00046b1:	83 c4 14             	add    esp,0x14
c00046b4:	5b                   	pop    ebx
c00046b5:	5e                   	pop    esi
c00046b6:	c3                   	ret    

c00046b7 <f_unlink>:
c00046b7:	55                   	push   ebp
c00046b8:	b9 02 00 00 00       	mov    ecx,0x2
c00046bd:	57                   	push   edi
c00046be:	56                   	push   esi
c00046bf:	53                   	push   ebx
c00046c0:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00046c6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046ca:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00046d1:	e8 ef da ff ff       	call   c00021c5 <mount_volume>
c00046d6:	85 c0                	test   eax,eax
c00046d8:	0f 85 f0 00 00 00    	jne    c00047ce <f_unlink+0x117>
c00046de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046e2:	83 ec 0c             	sub    esp,0xc
c00046e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00046e9:	68 00 02 00 00       	push   0x200
c00046ee:	e8 a5 11 00 00       	call   c0005898 <ff_memalloc>
c00046f3:	83 c4 10             	add    esp,0x10
c00046f6:	89 c3                	mov    ebx,eax
c00046f8:	b8 11 00 00 00       	mov    eax,0x11
c00046fd:	85 db                	test   ebx,ebx
c00046ff:	0f 84 c9 00 00 00    	je     c00047ce <f_unlink+0x117>
c0004705:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004709:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004710:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004713:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004717:	e8 b3 ef ff ff       	call   c00036cf <follow_path>
c000471c:	85 c0                	test   eax,eax
c000471e:	0f 85 96 00 00 00    	jne    c00047ba <f_unlink+0x103>
c0004724:	b8 06 00 00 00       	mov    eax,0x6
c0004729:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000472e:	0f 88 86 00 00 00    	js     c00047ba <f_unlink+0x103>
c0004734:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004739:	f7 c5 01 00 00 00    	test   ebp,0x1
c000473f:	74 07                	je     c0004748 <f_unlink+0x91>
c0004741:	b8 07 00 00 00       	mov    eax,0x7
c0004746:	eb 72                	jmp    c00047ba <f_unlink+0x103>
c0004748:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000474c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004750:	8a 07                	mov    al,BYTE PTR [edi]
c0004752:	e8 96 e7 ff ff       	call   c0002eed <ld_clust.isra.0>
c0004757:	83 e5 10             	and    ebp,0x10
c000475a:	89 c6                	mov    esi,eax
c000475c:	75 0f                	jne    c000476d <f_unlink+0xb6>
c000475e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004762:	e8 e7 ed ff ff       	call   c000354e <dir_remove>
c0004767:	85 c0                	test   eax,eax
c0004769:	74 2f                	je     c000479a <f_unlink+0xe3>
c000476b:	eb 4d                	jmp    c00047ba <f_unlink+0x103>
c000476d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004771:	31 d2                	xor    edx,edx
c0004773:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004777:	8d 44 24 50          	lea    eax,[esp+0x50]
c000477b:	e8 c0 e8 ff ff       	call   c0003040 <dir_sdi>
c0004780:	85 c0                	test   eax,eax
c0004782:	75 36                	jne    c00047ba <f_unlink+0x103>
c0004784:	31 d2                	xor    edx,edx
c0004786:	8d 44 24 50          	lea    eax,[esp+0x50]
c000478a:	e8 a2 ec ff ff       	call   c0003431 <dir_read>
c000478f:	85 c0                	test   eax,eax
c0004791:	74 ae                	je     c0004741 <f_unlink+0x8a>
c0004793:	83 f8 04             	cmp    eax,0x4
c0004796:	75 22                	jne    c00047ba <f_unlink+0x103>
c0004798:	eb c4                	jmp    c000475e <f_unlink+0xa7>
c000479a:	85 f6                	test   esi,esi
c000479c:	75 0b                	jne    c00047a9 <f_unlink+0xf2>
c000479e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047a2:	e8 0b e3 ff ff       	call   c0002ab2 <sync_fs>
c00047a7:	eb 11                	jmp    c00047ba <f_unlink+0x103>
c00047a9:	31 c9                	xor    ecx,ecx
c00047ab:	89 f2                	mov    edx,esi
c00047ad:	8d 44 24 20          	lea    eax,[esp+0x20]
c00047b1:	e8 8c ea ff ff       	call   c0003242 <remove_chain>
c00047b6:	85 c0                	test   eax,eax
c00047b8:	74 e4                	je     c000479e <f_unlink+0xe7>
c00047ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00047be:	83 ec 0c             	sub    esp,0xc
c00047c1:	53                   	push   ebx
c00047c2:	e8 e9 10 00 00       	call   c00058b0 <ff_memfree>
c00047c7:	83 c4 10             	add    esp,0x10
c00047ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047ce:	81 c4 8c 00 00 00    	add    esp,0x8c
c00047d4:	5b                   	pop    ebx
c00047d5:	5e                   	pop    esi
c00047d6:	5f                   	pop    edi
c00047d7:	5d                   	pop    ebp
c00047d8:	c3                   	ret    

c00047d9 <f_mkdir>:
c00047d9:	57                   	push   edi
c00047da:	b9 02 00 00 00       	mov    ecx,0x2
c00047df:	56                   	push   esi
c00047e0:	53                   	push   ebx
c00047e1:	83 ec 50             	sub    esp,0x50
c00047e4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047e8:	8d 44 24 60          	lea    eax,[esp+0x60]
c00047ec:	e8 d4 d9 ff ff       	call   c00021c5 <mount_volume>
c00047f1:	89 c3                	mov    ebx,eax
c00047f3:	85 c0                	test   eax,eax
c00047f5:	0f 85 70 01 00 00    	jne    c000496b <f_mkdir+0x192>
c00047fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047ff:	bb 11 00 00 00       	mov    ebx,0x11
c0004804:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004808:	83 ec 0c             	sub    esp,0xc
c000480b:	68 00 02 00 00       	push   0x200
c0004810:	e8 83 10 00 00       	call   c0005898 <ff_memalloc>
c0004815:	83 c4 10             	add    esp,0x10
c0004818:	89 c7                	mov    edi,eax
c000481a:	85 c0                	test   eax,eax
c000481c:	0f 84 49 01 00 00    	je     c000496b <f_mkdir+0x192>
c0004822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004826:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000482a:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000482d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004831:	e8 99 ee ff ff       	call   c00036cf <follow_path>
c0004836:	89 c3                	mov    ebx,eax
c0004838:	85 c0                	test   eax,eax
c000483a:	74 3e                	je     c000487a <f_mkdir+0xa1>
c000483c:	83 f8 04             	cmp    eax,0x4
c000483f:	75 3e                	jne    c000487f <f_mkdir+0xa6>
c0004841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004845:	31 d2                	xor    edx,edx
c0004847:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000484b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000484f:	e8 b4 e8 ff ff       	call   c0003108 <create_chain>
c0004854:	89 c6                	mov    esi,eax
c0004856:	85 c0                	test   eax,eax
c0004858:	74 0c                	je     c0004866 <f_mkdir+0x8d>
c000485a:	bb 02 00 00 00       	mov    ebx,0x2
c000485f:	83 f8 01             	cmp    eax,0x1
c0004862:	74 07                	je     c000486b <f_mkdir+0x92>
c0004864:	eb 2a                	jmp    c0004890 <f_mkdir+0xb7>
c0004866:	bb 07 00 00 00       	mov    ebx,0x7
c000486b:	31 c9                	xor    ecx,ecx
c000486d:	89 f2                	mov    edx,esi
c000486f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004873:	e8 ca e9 ff ff       	call   c0003242 <remove_chain>
c0004878:	eb 05                	jmp    c000487f <f_mkdir+0xa6>
c000487a:	bb 08 00 00 00       	mov    ebx,0x8
c000487f:	83 ec 0c             	sub    esp,0xc
c0004882:	57                   	push   edi
c0004883:	e8 28 10 00 00       	call   c00058b0 <ff_memfree>
c0004888:	83 c4 10             	add    esp,0x10
c000488b:	e9 db 00 00 00       	jmp    c000496b <f_mkdir+0x192>
c0004890:	bb 01 00 00 00       	mov    ebx,0x1
c0004895:	83 f8 ff             	cmp    eax,0xffffffff
c0004898:	74 d1                	je     c000486b <f_mkdir+0x92>
c000489a:	89 f2                	mov    edx,esi
c000489c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a0:	e8 73 dd ff ff       	call   c0002618 <dir_clear>
c00048a5:	89 c3                	mov    ebx,eax
c00048a7:	85 c0                	test   eax,eax
c00048a9:	75 c0                	jne    c000486b <f_mkdir+0x92>
c00048ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00048b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048b4:	ba 20 00 00 00       	mov    edx,0x20
c00048b9:	83 c0 34             	add    eax,0x34
c00048bc:	e8 cc d2 ff ff       	call   c0001b8d <mem_set>
c00048c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00048ca:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c00048ce:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c00048d2:	83 c0 4a             	add    eax,0x4a
c00048d5:	e8 9b d2 ff ff       	call   c0001b75 <st_dword>
c00048da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048de:	89 f1                	mov    ecx,esi
c00048e0:	8d 50 34             	lea    edx,[eax+0x34]
c00048e3:	e8 2e e6 ff ff       	call   c0002f16 <st_clust.isra.1>
c00048e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048ec:	b9 20 00 00 00       	mov    ecx,0x20
c00048f1:	8d 50 34             	lea    edx,[eax+0x34]
c00048f4:	83 c0 54             	add    eax,0x54
c00048f7:	e8 7c d2 ff ff       	call   c0001b78 <mem_cpy>
c00048fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004900:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004904:	8d 50 54             	lea    edx,[eax+0x54]
c0004907:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c000490b:	e8 06 e6 ff ff       	call   c0002f16 <st_clust.isra.1>
c0004910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004914:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004918:	8d 44 24 20          	lea    eax,[esp+0x20]
c000491c:	e8 42 ee ff ff       	call   c0003763 <dir_register>
c0004921:	89 c3                	mov    ebx,eax
c0004923:	85 c0                	test   eax,eax
c0004925:	0f 85 40 ff ff ff    	jne    c000486b <f_mkdir+0x92>
c000492b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000492f:	ba 00 00 21 50       	mov    edx,0x50210000
c0004934:	83 c0 16             	add    eax,0x16
c0004937:	e8 39 d2 ff ff       	call   c0001b75 <st_dword>
c000493c:	89 f1                	mov    ecx,esi
c000493e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004946:	e8 cb e5 ff ff       	call   c0002f16 <st_clust.isra.1>
c000494b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000494f:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004953:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004957:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000495b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000495f:	e8 4e e1 ff ff       	call   c0002ab2 <sync_fs>
c0004964:	89 c3                	mov    ebx,eax
c0004966:	e9 14 ff ff ff       	jmp    c000487f <f_mkdir+0xa6>
c000496b:	83 c4 50             	add    esp,0x50
c000496e:	89 d8                	mov    eax,ebx
c0004970:	5b                   	pop    ebx
c0004971:	5e                   	pop    esi
c0004972:	5f                   	pop    edi
c0004973:	c3                   	ret    

c0004974 <f_rename>:
c0004974:	57                   	push   edi
c0004975:	56                   	push   esi
c0004976:	53                   	push   ebx
c0004977:	81 ec a0 00 00 00    	sub    esp,0xa0
c000497d:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004984:	e8 f2 d5 ff ff       	call   c0001f7b <get_ldnumber>
c0004989:	b9 02 00 00 00       	mov    ecx,0x2
c000498e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004992:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004999:	e8 27 d8 ff ff       	call   c00021c5 <mount_volume>
c000499e:	85 c0                	test   eax,eax
c00049a0:	0f 85 7a 01 00 00    	jne    c0004b20 <f_rename+0x1ac>
c00049a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049aa:	83 ec 0c             	sub    esp,0xc
c00049ad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00049b1:	68 00 02 00 00       	push   0x200
c00049b6:	e8 dd 0e 00 00       	call   c0005898 <ff_memalloc>
c00049bb:	83 c4 10             	add    esp,0x10
c00049be:	89 c6                	mov    esi,eax
c00049c0:	b8 11 00 00 00       	mov    eax,0x11
c00049c5:	85 f6                	test   esi,esi
c00049c7:	0f 84 53 01 00 00    	je     c0004b20 <f_rename+0x1ac>
c00049cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049d1:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c00049d8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049db:	8d 44 24 40          	lea    eax,[esp+0x40]
c00049df:	e8 eb ec ff ff       	call   c00036cf <follow_path>
c00049e4:	85 c0                	test   eax,eax
c00049e6:	0f 85 20 01 00 00    	jne    c0004b0c <f_rename+0x198>
c00049ec:	b8 06 00 00 00       	mov    eax,0x6
c00049f1:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c00049f6:	0f 85 10 01 00 00    	jne    c0004b0c <f_rename+0x198>
c00049fc:	b9 20 00 00 00       	mov    ecx,0x20
c0004a01:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a05:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a09:	e8 6a d1 ff ff       	call   c0001b78 <mem_cpy>
c0004a0e:	b9 30 00 00 00       	mov    ecx,0x30
c0004a13:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004a17:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a1b:	e8 58 d1 ff ff       	call   c0001b78 <mem_cpy>
c0004a20:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004a27:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a2b:	e8 9f ec ff ff       	call   c00036cf <follow_path>
c0004a30:	85 c0                	test   eax,eax
c0004a32:	75 20                	jne    c0004a54 <f_rename+0xe0>
c0004a34:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004a38:	b8 08 00 00 00       	mov    eax,0x8
c0004a3d:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004a41:	0f 85 c5 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a47:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004a4b:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004a52:	eb 03                	jmp    c0004a57 <f_rename+0xe3>
c0004a54:	83 f8 04             	cmp    eax,0x4
c0004a57:	0f 85 af 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a5d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a61:	e8 fd ec ff ff       	call   c0003763 <dir_register>
c0004a66:	85 c0                	test   eax,eax
c0004a68:	0f 85 9e 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a6e:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004a75:	b9 13 00 00 00       	mov    ecx,0x13
c0004a7a:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004a7d:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004a81:	e8 f2 d0 ff ff       	call   c0001b78 <mem_cpy>
c0004a86:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004a8a:	a8 10                	test   al,0x10
c0004a8c:	75 03                	jne    c0004a91 <f_rename+0x11d>
c0004a8e:	83 c8 20             	or     eax,0x20
c0004a91:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004a94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a98:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004a9c:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004aa0:	74 54                	je     c0004af6 <f_rename+0x182>
c0004aa2:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004aa6:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004aaa:	74 4a                	je     c0004af6 <f_rename+0x182>
c0004aac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab0:	89 da                	mov    edx,ebx
c0004ab2:	8a 07                	mov    al,BYTE PTR [edi]
c0004ab4:	e8 34 e4 ff ff       	call   c0002eed <ld_clust.isra.0>
c0004ab9:	89 c2                	mov    edx,eax
c0004abb:	89 f8                	mov    eax,edi
c0004abd:	e8 d0 d2 ff ff       	call   c0001d92 <clst2sect>
c0004ac2:	89 c2                	mov    edx,eax
c0004ac4:	b8 02 00 00 00       	mov    eax,0x2
c0004ac9:	85 d2                	test   edx,edx
c0004acb:	74 3f                	je     c0004b0c <f_rename+0x198>
c0004acd:	89 f8                	mov    eax,edi
c0004acf:	e8 9e d5 ff ff       	call   c0002072 <move_window>
c0004ad4:	85 c0                	test   eax,eax
c0004ad6:	75 34                	jne    c0004b0c <f_rename+0x198>
c0004ad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004adc:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ae0:	75 14                	jne    c0004af6 <f_rename+0x182>
c0004ae2:	8d 50 54             	lea    edx,[eax+0x54]
c0004ae5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004ae9:	e8 28 e4 ff ff       	call   c0002f16 <st_clust.isra.1>
c0004aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004af2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004af6:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004afa:	e8 4f ea ff ff       	call   c000354e <dir_remove>
c0004aff:	85 c0                	test   eax,eax
c0004b01:	75 09                	jne    c0004b0c <f_rename+0x198>
c0004b03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b07:	e8 a6 df ff ff       	call   c0002ab2 <sync_fs>
c0004b0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b10:	83 ec 0c             	sub    esp,0xc
c0004b13:	56                   	push   esi
c0004b14:	e8 97 0d 00 00       	call   c00058b0 <ff_memfree>
c0004b19:	83 c4 10             	add    esp,0x10
c0004b1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b20:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004b26:	5b                   	pop    ebx
c0004b27:	5e                   	pop    esi
c0004b28:	5f                   	pop    edi
c0004b29:	c3                   	ret    

c0004b2a <f_chmod>:
c0004b2a:	57                   	push   edi
c0004b2b:	b9 02 00 00 00       	mov    ecx,0x2
c0004b30:	56                   	push   esi
c0004b31:	53                   	push   ebx
c0004b32:	83 ec 50             	sub    esp,0x50
c0004b35:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004b39:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004b3d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b41:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b45:	e8 7b d6 ff ff       	call   c00021c5 <mount_volume>
c0004b4a:	85 c0                	test   eax,eax
c0004b4c:	75 7e                	jne    c0004bcc <f_chmod+0xa2>
c0004b4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b52:	83 ec 0c             	sub    esp,0xc
c0004b55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b59:	68 00 02 00 00       	push   0x200
c0004b5e:	e8 35 0d 00 00       	call   c0005898 <ff_memalloc>
c0004b63:	83 c4 10             	add    esp,0x10
c0004b66:	89 c6                	mov    esi,eax
c0004b68:	b8 11 00 00 00       	mov    eax,0x11
c0004b6d:	85 f6                	test   esi,esi
c0004b6f:	74 5b                	je     c0004bcc <f_chmod+0xa2>
c0004b71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b75:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b79:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b80:	e8 4a eb ff ff       	call   c00036cf <follow_path>
c0004b85:	85 c0                	test   eax,eax
c0004b87:	75 2f                	jne    c0004bb8 <f_chmod+0x8e>
c0004b89:	b8 06 00 00 00       	mov    eax,0x6
c0004b8e:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004b93:	75 23                	jne    c0004bb8 <f_chmod+0x8e>
c0004b95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b99:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004b9c:	21 fb                	and    ebx,edi
c0004b9e:	83 e3 27             	and    ebx,0x27
c0004ba1:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004ba4:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bab:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004baf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bb3:	e8 fa de ff ff       	call   c0002ab2 <sync_fs>
c0004bb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbc:	83 ec 0c             	sub    esp,0xc
c0004bbf:	56                   	push   esi
c0004bc0:	e8 eb 0c 00 00       	call   c00058b0 <ff_memfree>
c0004bc5:	83 c4 10             	add    esp,0x10
c0004bc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bcc:	83 c4 50             	add    esp,0x50
c0004bcf:	5b                   	pop    ebx
c0004bd0:	5e                   	pop    esi
c0004bd1:	5f                   	pop    edi
c0004bd2:	c3                   	ret    

c0004bd3 <f_utime>:
c0004bd3:	56                   	push   esi
c0004bd4:	b9 02 00 00 00       	mov    ecx,0x2
c0004bd9:	53                   	push   ebx
c0004bda:	83 ec 54             	sub    esp,0x54
c0004bdd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004be1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004be5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004be9:	e8 d7 d5 ff ff       	call   c00021c5 <mount_volume>
c0004bee:	85 c0                	test   eax,eax
c0004bf0:	0f 85 85 00 00 00    	jne    c0004c7b <f_utime+0xa8>
c0004bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bfa:	83 ec 0c             	sub    esp,0xc
c0004bfd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c01:	68 00 02 00 00       	push   0x200
c0004c06:	e8 8d 0c 00 00       	call   c0005898 <ff_memalloc>
c0004c0b:	83 c4 10             	add    esp,0x10
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	b8 11 00 00 00       	mov    eax,0x11
c0004c15:	85 db                	test   ebx,ebx
c0004c17:	74 62                	je     c0004c7b <f_utime+0xa8>
c0004c19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c1d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004c21:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c24:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c28:	e8 a2 ea ff ff       	call   c00036cf <follow_path>
c0004c2d:	85 c0                	test   eax,eax
c0004c2f:	75 36                	jne    c0004c67 <f_utime+0x94>
c0004c31:	b8 06 00 00 00       	mov    eax,0x6
c0004c36:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004c3b:	75 2a                	jne    c0004c67 <f_utime+0x94>
c0004c3d:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004c41:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004c45:	c1 e2 10             	shl    edx,0x10
c0004c48:	09 c2                	or     edx,eax
c0004c4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c4e:	83 c0 16             	add    eax,0x16
c0004c51:	e8 1f cf ff ff       	call   c0001b75 <st_dword>
c0004c56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c5a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c62:	e8 4b de ff ff       	call   c0002ab2 <sync_fs>
c0004c67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6b:	83 ec 0c             	sub    esp,0xc
c0004c6e:	53                   	push   ebx
c0004c6f:	e8 3c 0c 00 00       	call   c00058b0 <ff_memfree>
c0004c74:	83 c4 10             	add    esp,0x10
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	83 c4 54             	add    esp,0x54
c0004c7e:	5b                   	pop    ebx
c0004c7f:	5e                   	pop    esi
c0004c80:	c3                   	ret    

c0004c81 <f_getlabel>:
c0004c81:	55                   	push   ebp
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	57                   	push   edi
c0004c85:	56                   	push   esi
c0004c86:	53                   	push   ebx
c0004c87:	83 ec 5c             	sub    esp,0x5c
c0004c8a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c8e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c92:	e8 2e d5 ff ff       	call   c00021c5 <mount_volume>
c0004c97:	89 c6                	mov    esi,eax
c0004c99:	85 c0                	test   eax,eax
c0004c9b:	0f 85 27 01 00 00    	jne    c0004dc8 <f_getlabel+0x147>
c0004ca1:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ca6:	0f 84 d1 00 00 00    	je     c0004d7d <f_getlabel+0xfc>
c0004cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004cb6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004cbe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc2:	e8 79 e3 ff ff       	call   c0003040 <dir_sdi>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	0f 85 a2 00 00 00    	jne    c0004d71 <f_getlabel+0xf0>
c0004ccf:	ba 01 00 00 00       	mov    edx,0x1
c0004cd4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cd8:	e8 54 e7 ff ff       	call   c0003431 <dir_read>
c0004cdd:	85 c0                	test   eax,eax
c0004cdf:	0f 85 8c 00 00 00    	jne    c0004d71 <f_getlabel+0xf0>
c0004ce5:	31 db                	xor    ebx,ebx
c0004ce7:	31 c9                	xor    ecx,ecx
c0004ce9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ced:	8d 79 01             	lea    edi,[ecx+0x1]
c0004cf0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004cf5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004cfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cfe:	e8 ca ce ff ff       	call   c0001bcd <dbc_1st>
c0004d03:	85 c0                	test   eax,eax
c0004d05:	74 16                	je     c0004d1d <f_getlabel+0x9c>
c0004d07:	83 ff 0b             	cmp    edi,0xb
c0004d0a:	74 11                	je     c0004d1d <f_getlabel+0x9c>
c0004d0c:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004d11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d15:	8d 79 02             	lea    edi,[ecx+0x2]
c0004d18:	c1 e0 08             	shl    eax,0x8
c0004d1b:	09 c2                	or     edx,eax
c0004d1d:	0f b7 d2             	movzx  edx,dx
c0004d20:	50                   	push   eax
c0004d21:	50                   	push   eax
c0004d22:	68 b5 01 00 00       	push   0x1b5
c0004d27:	52                   	push   edx
c0004d28:	e8 3b 0c 00 00       	call   c0005968 <ff_oem2uni>
c0004d2d:	83 c4 10             	add    esp,0x10
c0004d30:	66 85 c0             	test   ax,ax
c0004d33:	74 25                	je     c0004d5a <f_getlabel+0xd9>
c0004d35:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004d39:	0f b7 c0             	movzx  eax,ax
c0004d3c:	01 da                	add    edx,ebx
c0004d3e:	b9 04 00 00 00       	mov    ecx,0x4
c0004d43:	e8 51 cf ff ff       	call   c0001c99 <put_utf>
c0004d48:	84 c0                	test   al,al
c0004d4a:	74 0e                	je     c0004d5a <f_getlabel+0xd9>
c0004d4c:	0f b6 c0             	movzx  eax,al
c0004d4f:	01 c3                	add    ebx,eax
c0004d51:	83 ff 0b             	cmp    edi,0xb
c0004d54:	74 06                	je     c0004d5c <f_getlabel+0xdb>
c0004d56:	89 f9                	mov    ecx,edi
c0004d58:	eb 8f                	jmp    c0004ce9 <f_getlabel+0x68>
c0004d5a:	31 db                	xor    ebx,ebx
c0004d5c:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004d60:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004d63:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004d67:	74 14                	je     c0004d7d <f_getlabel+0xfc>
c0004d69:	4b                   	dec    ebx
c0004d6a:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004d6d:	74 f1                	je     c0004d60 <f_getlabel+0xdf>
c0004d6f:	eb 0c                	jmp    c0004d7d <f_getlabel+0xfc>
c0004d71:	83 f8 04             	cmp    eax,0x4
c0004d74:	75 50                	jne    c0004dc6 <f_getlabel+0x145>
c0004d76:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004d7a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d7d:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004d82:	74 44                	je     c0004dc8 <f_getlabel+0x147>
c0004d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d88:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004d8b:	e8 e2 d2 ff ff       	call   c0002072 <move_window>
c0004d90:	89 c6                	mov    esi,eax
c0004d92:	85 c0                	test   eax,eax
c0004d94:	75 32                	jne    c0004dc8 <f_getlabel+0x147>
c0004d96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004d9a:	b8 43 00 00 00       	mov    eax,0x43
c0004d9f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004da1:	80 f9 03             	cmp    cl,0x3
c0004da4:	74 0f                	je     c0004db5 <f_getlabel+0x134>
c0004da6:	31 c0                	xor    eax,eax
c0004da8:	80 f9 04             	cmp    cl,0x4
c0004dab:	0f 94 c0             	sete   al
c0004dae:	48                   	dec    eax
c0004daf:	83 e0 c3             	and    eax,0xffffffc3
c0004db2:	83 c0 64             	add    eax,0x64
c0004db5:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004db9:	e8 9b cd ff ff       	call   c0001b59 <ld_dword>
c0004dbe:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004dc2:	89 07                	mov    DWORD PTR [edi],eax
c0004dc4:	eb 02                	jmp    c0004dc8 <f_getlabel+0x147>
c0004dc6:	89 c6                	mov    esi,eax
c0004dc8:	83 c4 5c             	add    esp,0x5c
c0004dcb:	89 f0                	mov    eax,esi
c0004dcd:	5b                   	pop    ebx
c0004dce:	5e                   	pop    esi
c0004dcf:	5f                   	pop    edi
c0004dd0:	5d                   	pop    ebp
c0004dd1:	c3                   	ret    

c0004dd2 <f_setlabel>:
c0004dd2:	56                   	push   esi
c0004dd3:	b9 02 00 00 00       	mov    ecx,0x2
c0004dd8:	53                   	push   ebx
c0004dd9:	83 ec 54             	sub    esp,0x54
c0004ddc:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004de0:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004de4:	e8 dc d3 ff ff       	call   c00021c5 <mount_volume>
c0004de9:	89 c6                	mov    esi,eax
c0004deb:	85 c0                	test   eax,eax
c0004ded:	0f 85 67 01 00 00    	jne    c0004f5a <f_setlabel+0x188>
c0004df3:	b9 0b 00 00 00       	mov    ecx,0xb
c0004df8:	ba 20 00 00 00       	mov    edx,0x20
c0004dfd:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004e01:	31 db                	xor    ebx,ebx
c0004e03:	e8 85 cd ff ff       	call   c0001b8d <mem_set>
c0004e08:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004e0c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e0f:	76 5b                	jbe    c0004e6c <f_setlabel+0x9a>
c0004e11:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e15:	e8 b9 cd ff ff       	call   c0001bd3 <tchar2uni>
c0004e1a:	3d ff ff 00 00       	cmp    eax,0xffff
c0004e1f:	76 0a                	jbe    c0004e2b <f_setlabel+0x59>
c0004e21:	be 06 00 00 00       	mov    esi,0x6
c0004e26:	e9 2f 01 00 00       	jmp    c0004f5a <f_setlabel+0x188>
c0004e2b:	83 ec 0c             	sub    esp,0xc
c0004e2e:	50                   	push   eax
c0004e2f:	e8 ac 0b 00 00       	call   c00059e0 <ff_wtoupper>
c0004e34:	5a                   	pop    edx
c0004e35:	59                   	pop    ecx
c0004e36:	68 b5 01 00 00       	push   0x1b5
c0004e3b:	50                   	push   eax
c0004e3c:	e8 87 0a 00 00       	call   c00058c8 <ff_uni2oem>
c0004e41:	83 c4 10             	add    esp,0x10
c0004e44:	89 c6                	mov    esi,eax
c0004e46:	66 85 c0             	test   ax,ax
c0004e49:	74 d6                	je     c0004e21 <f_setlabel+0x4f>
c0004e4b:	0f b7 d0             	movzx  edx,ax
c0004e4e:	b8 f0 c4 01 c0       	mov    eax,0xc001c4f0
c0004e53:	e8 63 cd ff ff       	call   c0001bbb <chk_chr>
c0004e58:	85 c0                	test   eax,eax
c0004e5a:	75 c5                	jne    c0004e21 <f_setlabel+0x4f>
c0004e5c:	66 81 fe ff 00       	cmp    si,0xff
c0004e61:	0f 87 c9 00 00 00    	ja     c0004f30 <f_setlabel+0x15e>
c0004e67:	e9 e4 00 00 00       	jmp    c0004f50 <f_setlabel+0x17e>
c0004e6c:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0004e71:	74 ae                	je     c0004e21 <f_setlabel+0x4f>
c0004e73:	85 db                	test   ebx,ebx
c0004e75:	74 0e                	je     c0004e85 <f_setlabel+0xb3>
c0004e77:	8d 43 ff             	lea    eax,[ebx-0x1]
c0004e7a:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0004e7f:	75 04                	jne    c0004e85 <f_setlabel+0xb3>
c0004e81:	89 c3                	mov    ebx,eax
c0004e83:	eb ee                	jmp    c0004e73 <f_setlabel+0xa1>
c0004e85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004e89:	31 d2                	xor    edx,edx
c0004e8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e8f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e9b:	e8 a0 e1 ff ff       	call   c0003040 <dir_sdi>
c0004ea0:	89 c6                	mov    esi,eax
c0004ea2:	85 c0                	test   eax,eax
c0004ea4:	0f 85 b0 00 00 00    	jne    c0004f5a <f_setlabel+0x188>
c0004eaa:	ba 01 00 00 00       	mov    edx,0x1
c0004eaf:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb3:	e8 79 e5 ff ff       	call   c0003431 <dir_read>
c0004eb8:	85 c0                	test   eax,eax
c0004eba:	75 18                	jne    c0004ed4 <f_setlabel+0x102>
c0004ebc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ec0:	85 db                	test   ebx,ebx
c0004ec2:	74 0b                	je     c0004ecf <f_setlabel+0xfd>
c0004ec4:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ec9:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004ecd:	eb 47                	jmp    c0004f16 <f_setlabel+0x144>
c0004ecf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0004ed2:	eb 47                	jmp    c0004f1b <f_setlabel+0x149>
c0004ed4:	83 f8 04             	cmp    eax,0x4
c0004ed7:	75 53                	jne    c0004f2c <f_setlabel+0x15a>
c0004ed9:	85 db                	test   ebx,ebx
c0004edb:	74 7d                	je     c0004f5a <f_setlabel+0x188>
c0004edd:	ba 01 00 00 00       	mov    edx,0x1
c0004ee2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ee6:	e8 e5 e4 ff ff       	call   c00033d0 <dir_alloc>
c0004eeb:	89 c6                	mov    esi,eax
c0004eed:	85 c0                	test   eax,eax
c0004eef:	75 69                	jne    c0004f5a <f_setlabel+0x188>
c0004ef1:	b9 20 00 00 00       	mov    ecx,0x20
c0004ef6:	31 d2                	xor    edx,edx
c0004ef8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004efc:	e8 8c cc ff ff       	call   c0001b8d <mem_set>
c0004f01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f05:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f0a:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0004f0e:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004f12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f16:	e8 5d cc ff ff       	call   c0001b78 <mem_cpy>
c0004f1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004f1f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004f27:	e8 86 db ff ff       	call   c0002ab2 <sync_fs>
c0004f2c:	89 c6                	mov    esi,eax
c0004f2e:	eb 2a                	jmp    c0004f5a <f_setlabel+0x188>
c0004f30:	83 fb 09             	cmp    ebx,0x9
c0004f33:	0f 87 e8 fe ff ff    	ja     c0004e21 <f_setlabel+0x4f>
c0004f39:	89 f0                	mov    eax,esi
c0004f3b:	66 c1 e8 08          	shr    ax,0x8
c0004f3f:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f43:	43                   	inc    ebx
c0004f44:	89 f0                	mov    eax,esi
c0004f46:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f4a:	43                   	inc    ebx
c0004f4b:	e9 b8 fe ff ff       	jmp    c0004e08 <f_setlabel+0x36>
c0004f50:	83 fb 0a             	cmp    ebx,0xa
c0004f53:	76 ef                	jbe    c0004f44 <f_setlabel+0x172>
c0004f55:	e9 c7 fe ff ff       	jmp    c0004e21 <f_setlabel+0x4f>
c0004f5a:	89 f0                	mov    eax,esi
c0004f5c:	83 c4 54             	add    esp,0x54
c0004f5f:	5b                   	pop    ebx
c0004f60:	5e                   	pop    esi
c0004f61:	c3                   	ret    

c0004f62 <f_expand>:
c0004f62:	55                   	push   ebp
c0004f63:	57                   	push   edi
c0004f64:	56                   	push   esi
c0004f65:	53                   	push   ebx
c0004f66:	83 ec 2c             	sub    esp,0x2c
c0004f69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004f71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f75:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f79:	89 d8                	mov    eax,ebx
c0004f7b:	e8 48 d0 ff ff       	call   c0001fc8 <validate>
c0004f80:	89 c6                	mov    esi,eax
c0004f82:	85 c0                	test   eax,eax
c0004f84:	0f 85 2e 01 00 00    	jne    c00050b8 <f_expand+0x156>
c0004f8a:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004f8e:	85 f6                	test   esi,esi
c0004f90:	0f 85 22 01 00 00    	jne    c00050b8 <f_expand+0x156>
c0004f96:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0004f9b:	75 0a                	jne    c0004fa7 <f_expand+0x45>
c0004f9d:	be 07 00 00 00       	mov    esi,0x7
c0004fa2:	e9 11 01 00 00       	jmp    c00050b8 <f_expand+0x156>
c0004fa7:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0004fab:	75 f0                	jne    c0004f9d <f_expand+0x3b>
c0004fad:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004fb1:	74 ea                	je     c0004f9d <f_expand+0x3b>
c0004fb3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004fb7:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0004fbb:	c1 e1 09             	shl    ecx,0x9
c0004fbe:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004fc1:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0004fc5:	0f 95 c0             	setne  al
c0004fc8:	31 d2                	xor    edx,edx
c0004fca:	0f b6 c0             	movzx  eax,al
c0004fcd:	89 c7                	mov    edi,eax
c0004fcf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004fd3:	f7 f1                	div    ecx
c0004fd5:	01 f8                	add    eax,edi
c0004fd7:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0004fda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004fde:	83 ff 01             	cmp    edi,0x1
c0004fe1:	76 05                	jbe    c0004fe8 <f_expand+0x86>
c0004fe3:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0004fe6:	77 05                	ja     c0004fed <f_expand+0x8b>
c0004fe8:	bf 02 00 00 00       	mov    edi,0x2
c0004fed:	89 3c 24             	mov    DWORD PTR [esp],edi
c0004ff0:	89 fd                	mov    ebp,edi
c0004ff2:	31 c9                	xor    ecx,ecx
c0004ff4:	89 ea                	mov    edx,ebp
c0004ff6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004ffa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004ffc:	45                   	inc    ebp
c0004ffd:	e8 3c df ff ff       	call   c0002f3e <get_fat.isra.2>
c0005002:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000500a:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000500d:	77 05                	ja     c0005014 <f_expand+0xb2>
c000500f:	bd 02 00 00 00       	mov    ebp,0x2
c0005014:	83 f8 01             	cmp    eax,0x1
c0005017:	74 20                	je     c0005039 <f_expand+0xd7>
c0005019:	83 f8 ff             	cmp    eax,0xffffffff
c000501c:	74 22                	je     c0005040 <f_expand+0xde>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 09                	jne    c000502b <f_expand+0xc9>
c0005022:	41                   	inc    ecx
c0005023:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005027:	75 07                	jne    c0005030 <f_expand+0xce>
c0005029:	eb 1c                	jmp    c0005047 <f_expand+0xe5>
c000502b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000502e:	31 c9                	xor    ecx,ecx
c0005030:	39 fd                	cmp    ebp,edi
c0005032:	75 c0                	jne    c0004ff4 <f_expand+0x92>
c0005034:	e9 64 ff ff ff       	jmp    c0004f9d <f_expand+0x3b>
c0005039:	be 02 00 00 00       	mov    esi,0x2
c000503e:	eb 78                	jmp    c00050b8 <f_expand+0x156>
c0005040:	be 01 00 00 00       	mov    esi,0x1
c0005045:	eb 71                	jmp    c00050b8 <f_expand+0x156>
c0005047:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000504c:	74 2b                	je     c0005079 <f_expand+0x117>
c000504e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005051:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005055:	85 ed                	test   ebp,ebp
c0005057:	74 24                	je     c000507d <f_expand+0x11b>
c0005059:	83 c9 ff             	or     ecx,0xffffffff
c000505c:	83 fd 01             	cmp    ebp,0x1
c000505f:	74 03                	je     c0005064 <f_expand+0x102>
c0005061:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005064:	89 fa                	mov    edx,edi
c0005066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000506a:	e8 59 d4 ff ff       	call   c00024c8 <put_fat>
c000506f:	85 c0                	test   eax,eax
c0005071:	75 43                	jne    c00050b6 <f_expand+0x154>
c0005073:	89 f8                	mov    eax,edi
c0005075:	4d                   	dec    ebp
c0005076:	47                   	inc    edi
c0005077:	eb dc                	jmp    c0005055 <f_expand+0xf3>
c0005079:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000507c:	48                   	dec    eax
c000507d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005081:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005086:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005089:	74 2d                	je     c00050b8 <f_expand+0x156>
c000508b:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000508f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005092:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005095:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005099:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000509c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000509f:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00050a2:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00050a5:	39 c8                	cmp    eax,ecx
c00050a7:	77 0f                	ja     c00050b8 <f_expand+0x156>
c00050a9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00050ad:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00050b1:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050b4:	eb 02                	jmp    c00050b8 <f_expand+0x156>
c00050b6:	89 c6                	mov    esi,eax
c00050b8:	83 c4 2c             	add    esp,0x2c
c00050bb:	89 f0                	mov    eax,esi
c00050bd:	5b                   	pop    ebx
c00050be:	5e                   	pop    esi
c00050bf:	5f                   	pop    edi
c00050c0:	5d                   	pop    ebp
c00050c1:	c3                   	ret    

c00050c2 <f_mkfs>:
c00050c2:	55                   	push   ebp
c00050c3:	57                   	push   edi
c00050c4:	bf 0b 00 00 00       	mov    edi,0xb
c00050c9:	56                   	push   esi
c00050ca:	53                   	push   ebx
c00050cb:	83 ec 4c             	sub    esp,0x4c
c00050ce:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00050d2:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00050d6:	8d 44 24 60          	lea    eax,[esp+0x60]
c00050da:	e8 9c ce ff ff       	call   c0001f7b <get_ldnumber>
c00050df:	85 c0                	test   eax,eax
c00050e1:	0f 88 a6 07 00 00    	js     c000588d <f_mkfs+0x7cb>
c00050e7:	8b 14 85 c0 f3 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0c40]
c00050ee:	85 d2                	test   edx,edx
c00050f0:	74 03                	je     c00050f5 <f_mkfs+0x33>
c00050f2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00050f5:	85 db                	test   ebx,ebx
c00050f7:	75 05                	jne    c00050fe <f_mkfs+0x3c>
c00050f9:	bb e0 c4 01 c0       	mov    ebx,0xc001c4e0
c00050fe:	83 ec 0c             	sub    esp,0xc
c0005101:	0f b6 c0             	movzx  eax,al
c0005104:	bf 03 00 00 00       	mov    edi,0x3
c0005109:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000510d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005111:	e8 e8 c9 ff ff       	call   c0001afe <disk_initialize>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	a8 01                	test   al,0x1
c000511b:	0f 85 6c 07 00 00    	jne    c000588d <f_mkfs+0x7cb>
c0005121:	bf 0a 00 00 00       	mov    edi,0xa
c0005126:	a8 04                	test   al,0x4
c0005128:	0f 85 5f 07 00 00    	jne    c000588d <f_mkfs+0x7cb>
c000512e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005131:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005135:	85 c0                	test   eax,eax
c0005137:	75 20                	jne    c0005159 <f_mkfs+0x97>
c0005139:	51                   	push   ecx
c000513a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000513e:	50                   	push   eax
c000513f:	6a 03                	push   0x3
c0005141:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005145:	e8 e3 c9 ff ff       	call   c0001b2d <disk_ioctl>
c000514a:	83 c4 10             	add    esp,0x10
c000514d:	85 c0                	test   eax,eax
c000514f:	74 08                	je     c0005159 <f_mkfs+0x97>
c0005151:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005159:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000515d:	8d 42 ff             	lea    eax,[edx-0x1]
c0005160:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005165:	77 04                	ja     c000516b <f_mkfs+0xa9>
c0005167:	85 c2                	test   edx,eax
c0005169:	74 08                	je     c0005173 <f_mkfs+0xb1>
c000516b:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005173:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005176:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000517a:	48                   	dec    eax
c000517b:	3c 01                	cmp    al,0x1
c000517d:	76 05                	jbe    c0005184 <f_mkfs+0xc2>
c000517f:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005184:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518b:	48                   	dec    eax
c000518c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005191:	77 07                	ja     c000519a <f_mkfs+0xd8>
c0005193:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c0005198:	74 08                	je     c00051a2 <f_mkfs+0xe0>
c000519a:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c00051a2:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00051a5:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00051ab:	77 07                	ja     c00051b4 <f_mkfs+0xf2>
c00051ad:	8d 47 ff             	lea    eax,[edi-0x1]
c00051b0:	85 f8                	test   eax,edi
c00051b2:	74 02                	je     c00051b6 <f_mkfs+0xf4>
c00051b4:	31 ff                	xor    edi,edi
c00051b6:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00051be:	77 0a                	ja     c00051ca <f_mkfs+0x108>
c00051c0:	bf 11 00 00 00       	mov    edi,0x11
c00051c5:	e9 c3 06 00 00       	jmp    c000588d <f_mkfs+0x7cb>
c00051ca:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00051cc:	89 ee                	mov    esi,ebp
c00051ce:	85 ed                	test   ebp,ebp
c00051d0:	75 1b                	jne    c00051ed <f_mkfs+0x12b>
c00051d2:	83 ec 0c             	sub    esp,0xc
c00051d5:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00051d9:	25 00 fe ff ff       	and    eax,0xfffffe00
c00051de:	50                   	push   eax
c00051df:	e8 b4 06 00 00       	call   c0005898 <ff_memalloc>
c00051e4:	83 c4 10             	add    esp,0x10
c00051e7:	89 c6                	mov    esi,eax
c00051e9:	85 c0                	test   eax,eax
c00051eb:	74 d3                	je     c00051c0 <f_mkfs+0xfe>
c00051ed:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00051f5:	52                   	push   edx
c00051f6:	8d 44 24 38          	lea    eax,[esp+0x38]
c00051fa:	50                   	push   eax
c00051fb:	6a 01                	push   0x1
c00051fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005201:	e8 27 c9 ff ff       	call   c0001b2d <disk_ioctl>
c0005206:	83 c4 10             	add    esp,0x10
c0005209:	85 c0                	test   eax,eax
c000520b:	0f 85 25 06 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005211:	88 d8                	mov    al,bl
c0005213:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000521b:	24 08                	and    al,0x8
c000521d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005221:	75 18                	jne    c000523b <f_mkfs+0x179>
c0005223:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005227:	83 f8 3f             	cmp    eax,0x3f
c000522a:	76 0f                	jbe    c000523b <f_mkfs+0x179>
c000522c:	83 e8 3f             	sub    eax,0x3f
c000522f:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c0005237:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000523b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000523f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005243:	83 f8 7f             	cmp    eax,0x7f
c0005246:	0f 86 52 02 00 00    	jbe    c000549e <f_mkfs+0x3dc>
c000524c:	b9 80 00 00 00       	mov    ecx,0x80
c0005251:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005257:	77 05                	ja     c000525e <f_mkfs+0x19c>
c0005259:	89 f9                	mov    ecx,edi
c000525b:	c1 e9 09             	shr    ecx,0x9
c000525e:	88 d8                	mov    al,bl
c0005260:	83 e0 01             	and    eax,0x1
c0005263:	80 e3 02             	and    bl,0x2
c0005266:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000526a:	74 0a                	je     c0005276 <f_mkfs+0x1b4>
c000526c:	84 c0                	test   al,al
c000526e:	0f 84 4c 01 00 00    	je     c00053c0 <f_mkfs+0x2fe>
c0005274:	eb 38                	jmp    c00052ae <f_mkfs+0x1ec>
c0005276:	bf 13 00 00 00       	mov    edi,0x13
c000527b:	84 c0                	test   al,al
c000527d:	75 2f                	jne    c00052ae <f_mkfs+0x1ec>
c000527f:	e9 c9 05 00 00       	jmp    c000584d <f_mkfs+0x78b>
c0005284:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005289:	0f 85 08 02 00 00    	jne    c0005497 <f_mkfs+0x3d5>
c000528f:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005294:	0f 86 e1 01 00 00    	jbe    c000547b <f_mkfs+0x3b9>
c000529a:	85 c9                	test   ecx,ecx
c000529c:	0f 85 bd 05 00 00    	jne    c000585f <f_mkfs+0x79d>
c00052a2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00052a5:	83 f9 40             	cmp    ecx,0x40
c00052a8:	0f 87 c1 05 00 00    	ja     c000586f <f_mkfs+0x7ad>
c00052ae:	89 cf                	mov    edi,ecx
c00052b0:	85 c9                	test   ecx,ecx
c00052b2:	75 1d                	jne    c00052d1 <f_mkfs+0x20f>
c00052b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00052b8:	ba c0 c4 01 c0       	mov    edx,0xc001c4c0
c00052bd:	c1 eb 0c             	shr    ebx,0xc
c00052c0:	bf 01 00 00 00       	mov    edi,0x1
c00052c5:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00052c8:	66 85 c0             	test   ax,ax
c00052cb:	0f 85 5f 01 00 00    	jne    c0005430 <f_mkfs+0x36e>
c00052d1:	31 d2                	xor    edx,edx
c00052d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00052d7:	f7 f7                	div    edi
c00052d9:	3d f5 0f 00 00       	cmp    eax,0xff5
c00052de:	0f 86 5e 01 00 00    	jbe    c0005442 <f_mkfs+0x380>
c00052e4:	83 c0 02             	add    eax,0x2
c00052e7:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00052ec:	01 c0                	add    eax,eax
c00052ee:	05 ff 01 00 00       	add    eax,0x1ff
c00052f3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00052fb:	c1 e8 09             	shr    eax,0x9
c00052fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005306:	c1 e0 05             	shl    eax,0x5
c0005309:	c1 e8 09             	shr    eax,0x9
c000530c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005310:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005319:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000531d:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005321:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005329:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c000532e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005332:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000533a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000533e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005342:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005346:	f7 d8                	neg    eax
c0005348:	21 c3                	and    ebx,eax
c000534a:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c000534e:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005353:	0f 85 fc 00 00 00    	jne    c0005455 <f_mkfs+0x393>
c0005359:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c000535d:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005361:	89 f8                	mov    eax,edi
c0005363:	c1 e0 04             	shl    eax,0x4
c0005366:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000536a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c000536e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005372:	0f 82 26 01 00 00    	jb     c000549e <f_mkfs+0x3dc>
c0005378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000537c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005380:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005384:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c0005389:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c000538d:	29 d0                	sub    eax,edx
c000538f:	31 d2                	xor    edx,edx
c0005391:	f7 f7                	div    edi
c0005393:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005398:	89 c3                	mov    ebx,eax
c000539a:	0f 85 e4 fe ff ff    	jne    c0005284 <f_mkfs+0x1c2>
c00053a0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00053a5:	0f 87 02 01 00 00    	ja     c00054ad <f_mkfs+0x3eb>
c00053ab:	85 c9                	test   ecx,ecx
c00053ad:	0f 85 eb 00 00 00    	jne    c000549e <f_mkfs+0x3dc>
c00053b3:	83 ff 01             	cmp    edi,0x1
c00053b6:	0f 86 e2 00 00 00    	jbe    c000549e <f_mkfs+0x3dc>
c00053bc:	89 f9                	mov    ecx,edi
c00053be:	d1 e9                	shr    ecx,1
c00053c0:	89 cb                	mov    ebx,ecx
c00053c2:	85 c9                	test   ecx,ecx
c00053c4:	75 26                	jne    c00053ec <f_mkfs+0x32a>
c00053c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00053ca:	ba d0 c4 01 c0       	mov    edx,0xc001c4d0
c00053cf:	c1 eb 11             	shr    ebx,0x11
c00053d2:	b9 01 00 00 00       	mov    ecx,0x1
c00053d7:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00053da:	66 85 c0             	test   ax,ax
c00053dd:	74 0b                	je     c00053ea <f_mkfs+0x328>
c00053df:	83 c2 02             	add    edx,0x2
c00053e2:	39 d8                	cmp    eax,ebx
c00053e4:	77 04                	ja     c00053ea <f_mkfs+0x328>
c00053e6:	01 c9                	add    ecx,ecx
c00053e8:	eb ed                	jmp    c00053d7 <f_mkfs+0x315>
c00053ea:	31 db                	xor    ebx,ebx
c00053ec:	31 d2                	xor    edx,edx
c00053ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00053f2:	f7 f1                	div    ecx
c00053f4:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00053fb:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005400:	c1 ea 09             	shr    edx,0x9
c0005403:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005408:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000540c:	0f 87 8c 00 00 00    	ja     c000549e <f_mkfs+0x3dc>
c0005412:	89 cf                	mov    edi,ecx
c0005414:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000541c:	89 d9                	mov    ecx,ebx
c000541e:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005426:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000542b:	e9 e0 fe ff ff       	jmp    c0005310 <f_mkfs+0x24e>
c0005430:	83 c2 02             	add    edx,0x2
c0005433:	39 d8                	cmp    eax,ebx
c0005435:	0f 87 96 fe ff ff    	ja     c00052d1 <f_mkfs+0x20f>
c000543b:	01 ff                	add    edi,edi
c000543d:	e9 83 fe ff ff       	jmp    c00052c5 <f_mkfs+0x203>
c0005442:	8d 04 40             	lea    eax,[eax+eax*2]
c0005445:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000544a:	40                   	inc    eax
c000544b:	d1 e8                	shr    eax,1
c000544d:	83 c0 03             	add    eax,0x3
c0005450:	e9 99 fe ff ff       	jmp    c00052ee <f_mkfs+0x22c>
c0005455:	31 d2                	xor    edx,edx
c0005457:	89 d8                	mov    eax,ebx
c0005459:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000545d:	85 d2                	test   edx,edx
c000545f:	74 09                	je     c000546a <f_mkfs+0x3a8>
c0005461:	4b                   	dec    ebx
c0005462:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005466:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000546a:	89 d8                	mov    eax,ebx
c000546c:	31 d2                	xor    edx,edx
c000546e:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005472:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005476:	e9 e6 fe ff ff       	jmp    c0005361 <f_mkfs+0x29f>
c000547b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005480:	77 2b                	ja     c00054ad <f_mkfs+0x3eb>
c0005482:	85 c9                	test   ecx,ecx
c0005484:	75 18                	jne    c000549e <f_mkfs+0x3dc>
c0005486:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005489:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000548f:	0f 86 19 fe ff ff    	jbe    c00052ae <f_mkfs+0x1ec>
c0005495:	eb 07                	jmp    c000549e <f_mkfs+0x3dc>
c0005497:	3d f5 0f 00 00       	cmp    eax,0xff5
c000549c:	76 0a                	jbe    c00054a8 <f_mkfs+0x3e6>
c000549e:	bf 0e 00 00 00       	mov    edi,0xe
c00054a3:	e9 a5 03 00 00       	jmp    c000584d <f_mkfs+0x78b>
c00054a8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054ad:	31 d2                	xor    edx,edx
c00054af:	b9 00 02 00 00       	mov    ecx,0x200
c00054b4:	89 f0                	mov    eax,esi
c00054b6:	e8 d2 c6 ff ff       	call   c0001b8d <mem_set>
c00054bb:	b9 0b 00 00 00       	mov    ecx,0xb
c00054c0:	ba 72 c4 01 c0       	mov    edx,0xc001c472
c00054c5:	89 f0                	mov    eax,esi
c00054c7:	e8 ac c6 ff ff       	call   c0001b78 <mem_cpy>
c00054cc:	8d 46 0b             	lea    eax,[esi+0xb]
c00054cf:	ba 00 02 00 00       	mov    edx,0x200
c00054d4:	e8 98 c6 ff ff       	call   c0001b71 <st_word>
c00054d9:	89 f8                	mov    eax,edi
c00054db:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00054e0:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00054e3:	8d 46 0e             	lea    eax,[esi+0xe]
c00054e6:	e8 86 c6 ff ff       	call   c0001b71 <st_word>
c00054eb:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00054ef:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00054f4:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00054f7:	75 08                	jne    c0005501 <f_mkfs+0x43f>
c00054f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005501:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005505:	8d 46 11             	lea    eax,[esi+0x11]
c0005508:	e8 64 c6 ff ff       	call   c0001b71 <st_word>
c000550d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005511:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005517:	77 0a                	ja     c0005523 <f_mkfs+0x461>
c0005519:	8d 46 13             	lea    eax,[esi+0x13]
c000551c:	e8 50 c6 ff ff       	call   c0001b71 <st_word>
c0005521:	eb 08                	jmp    c000552b <f_mkfs+0x469>
c0005523:	8d 46 20             	lea    eax,[esi+0x20]
c0005526:	e8 4a c6 ff ff       	call   c0001b75 <st_dword>
c000552b:	8d 46 18             	lea    eax,[esi+0x18]
c000552e:	ba 3f 00 00 00       	mov    edx,0x3f
c0005533:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c0005537:	e8 35 c6 ff ff       	call   c0001b71 <st_word>
c000553c:	8d 46 1a             	lea    eax,[esi+0x1a]
c000553f:	ba ff 00 00 00       	mov    edx,0xff
c0005544:	e8 28 c6 ff ff       	call   c0001b71 <st_word>
c0005549:	8d 46 1c             	lea    eax,[esi+0x1c]
c000554c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005550:	e8 20 c6 ff ff       	call   c0001b75 <st_dword>
c0005555:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000555a:	75 57                	jne    c00055b3 <f_mkfs+0x4f1>
c000555c:	8d 46 43             	lea    eax,[esi+0x43]
c000555f:	ba 00 00 21 50       	mov    edx,0x50210000
c0005564:	e8 0c c6 ff ff       	call   c0001b75 <st_dword>
c0005569:	8d 46 24             	lea    eax,[esi+0x24]
c000556c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005570:	e8 00 c6 ff ff       	call   c0001b75 <st_dword>
c0005575:	8d 46 2c             	lea    eax,[esi+0x2c]
c0005578:	ba 02 00 00 00       	mov    edx,0x2
c000557d:	e8 f3 c5 ff ff       	call   c0001b75 <st_dword>
c0005582:	8d 46 30             	lea    eax,[esi+0x30]
c0005585:	ba 01 00 00 00       	mov    edx,0x1
c000558a:	e8 e2 c5 ff ff       	call   c0001b71 <st_word>
c000558f:	8d 46 32             	lea    eax,[esi+0x32]
c0005592:	ba 06 00 00 00       	mov    edx,0x6
c0005597:	e8 d5 c5 ff ff       	call   c0001b71 <st_word>
c000559c:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c00055a0:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c00055a4:	8d 46 47             	lea    eax,[esi+0x47]
c00055a7:	b9 13 00 00 00       	mov    ecx,0x13
c00055ac:	ba 7e c4 01 c0       	mov    edx,0xc001c47e
c00055b1:	eb 2f                	jmp    c00055e2 <f_mkfs+0x520>
c00055b3:	8d 46 27             	lea    eax,[esi+0x27]
c00055b6:	ba 00 00 21 50       	mov    edx,0x50210000
c00055bb:	e8 b5 c5 ff ff       	call   c0001b75 <st_dword>
c00055c0:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00055c5:	8d 46 16             	lea    eax,[esi+0x16]
c00055c8:	e8 a4 c5 ff ff       	call   c0001b71 <st_word>
c00055cd:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00055d1:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00055d5:	8d 46 2b             	lea    eax,[esi+0x2b]
c00055d8:	b9 13 00 00 00       	mov    ecx,0x13
c00055dd:	ba 92 c4 01 c0       	mov    edx,0xc001c492
c00055e2:	e8 91 c5 ff ff       	call   c0001b78 <mem_cpy>
c00055e7:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00055ed:	ba 55 aa 00 00       	mov    edx,0xaa55
c00055f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055f6:	e8 76 c5 ff ff       	call   c0001b71 <st_word>
c00055fb:	6a 01                	push   0x1
c00055fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005601:	56                   	push   esi
c0005602:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005606:	e8 0c c5 ff ff       	call   c0001b17 <disk_write>
c000560b:	83 c4 10             	add    esp,0x10
c000560e:	85 c0                	test   eax,eax
c0005610:	0f 85 20 02 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005616:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000561b:	0f 85 98 00 00 00    	jne    c00056b9 <f_mkfs+0x5f7>
c0005621:	6a 01                	push   0x1
c0005623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005627:	83 c0 06             	add    eax,0x6
c000562a:	50                   	push   eax
c000562b:	56                   	push   esi
c000562c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005630:	e8 e2 c4 ff ff       	call   c0001b17 <disk_write>
c0005635:	b9 00 02 00 00       	mov    ecx,0x200
c000563a:	31 d2                	xor    edx,edx
c000563c:	89 f0                	mov    eax,esi
c000563e:	e8 4a c5 ff ff       	call   c0001b8d <mem_set>
c0005643:	ba 52 52 61 41       	mov    edx,0x41615252
c0005648:	89 f0                	mov    eax,esi
c000564a:	e8 26 c5 ff ff       	call   c0001b75 <st_dword>
c000564f:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005655:	ba 72 72 41 61       	mov    edx,0x61417272
c000565a:	e8 16 c5 ff ff       	call   c0001b75 <st_dword>
c000565f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005662:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c0005668:	e8 08 c5 ff ff       	call   c0001b75 <st_dword>
c000566d:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005673:	ba 02 00 00 00       	mov    edx,0x2
c0005678:	e8 f8 c4 ff ff       	call   c0001b75 <st_dword>
c000567d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005682:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c0005688:	e8 e4 c4 ff ff       	call   c0001b71 <st_word>
c000568d:	6a 01                	push   0x1
c000568f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005693:	83 c0 07             	add    eax,0x7
c0005696:	50                   	push   eax
c0005697:	56                   	push   esi
c0005698:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000569c:	e8 76 c4 ff ff       	call   c0001b17 <disk_write>
c00056a1:	83 c4 20             	add    esp,0x20
c00056a4:	6a 01                	push   0x1
c00056a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00056aa:	40                   	inc    eax
c00056ab:	50                   	push   eax
c00056ac:	56                   	push   esi
c00056ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00056b1:	e8 61 c4 ff ff       	call   c0001b17 <disk_write>
c00056b6:	83 c4 10             	add    esp,0x10
c00056b9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00056bd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00056c1:	c1 e8 09             	shr    eax,0x9
c00056c4:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00056ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056ce:	31 d2                	xor    edx,edx
c00056d0:	31 db                	xor    ebx,ebx
c00056d2:	89 f0                	mov    eax,esi
c00056d4:	e8 b4 c4 ff ff       	call   c0001b8d <mem_set>
c00056d9:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00056de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00056e6:	0f 94 c3             	sete   bl
c00056e9:	4b                   	dec    ebx
c00056ea:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00056f0:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00056f6:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056fb:	75 21                	jne    c000571e <f_mkfs+0x65c>
c00056fd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005702:	89 f0                	mov    eax,esi
c0005704:	e8 6c c4 ff ff       	call   c0001b75 <st_dword>
c0005709:	8d 46 04             	lea    eax,[esi+0x4]
c000570c:	83 ca ff             	or     edx,0xffffffff
c000570f:	e8 61 c4 ff ff       	call   c0001b75 <st_dword>
c0005714:	8d 46 08             	lea    eax,[esi+0x8]
c0005717:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000571c:	eb 04                	jmp    c0005722 <f_mkfs+0x660>
c000571e:	89 da                	mov    edx,ebx
c0005720:	89 f0                	mov    eax,esi
c0005722:	e8 4e c4 ff ff       	call   c0001b75 <st_dword>
c0005727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000572f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005733:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005737:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573b:	76 08                	jbe    c0005745 <f_mkfs+0x683>
c000573d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005741:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005745:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000574d:	56                   	push   esi
c000574e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005752:	e8 c0 c3 ff ff       	call   c0001b17 <disk_write>
c0005757:	83 c4 10             	add    esp,0x10
c000575a:	85 c0                	test   eax,eax
c000575c:	0f 85 d4 00 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005762:	b9 00 02 00 00       	mov    ecx,0x200
c0005767:	31 d2                	xor    edx,edx
c0005769:	89 f0                	mov    eax,esi
c000576b:	e8 1d c4 ff ff       	call   c0001b8d <mem_set>
c0005770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005774:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c0005778:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000577c:	75 b1                	jne    c000572f <f_mkfs+0x66d>
c000577e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005782:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000578a:	40                   	inc    eax
c000578b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000578f:	0f 87 61 ff ff ff    	ja     c00056f6 <f_mkfs+0x634>
c0005795:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000579a:	74 04                	je     c00057a0 <f_mkfs+0x6de>
c000579c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00057a0:	89 fb                	mov    ebx,edi
c00057a2:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00057a6:	76 04                	jbe    c00057ac <f_mkfs+0x6ea>
c00057a8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00057ac:	53                   	push   ebx
c00057ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00057b1:	56                   	push   esi
c00057b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057b6:	e8 5c c3 ff ff       	call   c0001b17 <disk_write>
c00057bb:	83 c4 10             	add    esp,0x10
c00057be:	85 c0                	test   eax,eax
c00057c0:	75 74                	jne    c0005836 <f_mkfs+0x774>
c00057c2:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00057c6:	29 df                	sub    edi,ebx
c00057c8:	75 d6                	jne    c00057a0 <f_mkfs+0x6de>
c00057ca:	b1 0c                	mov    cl,0xc
c00057cc:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057d1:	74 18                	je     c00057eb <f_mkfs+0x729>
c00057d3:	b1 06                	mov    cl,0x6
c00057d5:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00057dd:	77 0c                	ja     c00057eb <f_mkfs+0x729>
c00057df:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00057e4:	0f 94 c1             	sete   cl
c00057e7:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00057eb:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00057f0:	75 2d                	jne    c000581f <f_mkfs+0x75d>
c00057f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00057f6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00057fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0005802:	0f b6 c9             	movzx  ecx,cl
c0005805:	83 ec 0c             	sub    esp,0xc
c0005808:	56                   	push   esi
c0005809:	8d 54 24 48          	lea    edx,[esp+0x48]
c000580d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005811:	e8 4c d3 ff ff       	call   c0002b62 <create_partition>
c0005816:	83 c4 10             	add    esp,0x10
c0005819:	89 c7                	mov    edi,eax
c000581b:	85 c0                	test   eax,eax
c000581d:	75 2e                	jne    c000584d <f_mkfs+0x78b>
c000581f:	31 ff                	xor    edi,edi
c0005821:	50                   	push   eax
c0005822:	6a 00                	push   0x0
c0005824:	6a 00                	push   0x0
c0005826:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000582a:	e8 fe c2 ff ff       	call   c0001b2d <disk_ioctl>
c000582f:	83 c4 10             	add    esp,0x10
c0005832:	85 c0                	test   eax,eax
c0005834:	74 17                	je     c000584d <f_mkfs+0x78b>
c0005836:	85 ed                	test   ebp,ebp
c0005838:	75 0c                	jne    c0005846 <f_mkfs+0x784>
c000583a:	83 ec 0c             	sub    esp,0xc
c000583d:	56                   	push   esi
c000583e:	e8 6d 00 00 00       	call   c00058b0 <ff_memfree>
c0005843:	83 c4 10             	add    esp,0x10
c0005846:	bf 01 00 00 00       	mov    edi,0x1
c000584b:	eb 40                	jmp    c000588d <f_mkfs+0x7cb>
c000584d:	85 ed                	test   ebp,ebp
c000584f:	75 3c                	jne    c000588d <f_mkfs+0x7cb>
c0005851:	83 ec 0c             	sub    esp,0xc
c0005854:	56                   	push   esi
c0005855:	e8 56 00 00 00       	call   c00058b0 <ff_memfree>
c000585a:	83 c4 10             	add    esp,0x10
c000585d:	eb 2e                	jmp    c000588d <f_mkfs+0x7cb>
c000585f:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005864:	0f 85 56 fb ff ff    	jne    c00053c0 <f_mkfs+0x2fe>
c000586a:	e9 2f fc ff ff       	jmp    c000549e <f_mkfs+0x3dc>
c000586f:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005874:	0f 85 4c fb ff ff    	jne    c00053c6 <f_mkfs+0x304>
c000587a:	89 cf                	mov    edi,ecx
c000587c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005882:	0f 86 49 fa ff ff    	jbe    c00052d1 <f_mkfs+0x20f>
c0005888:	e9 11 fc ff ff       	jmp    c000549e <f_mkfs+0x3dc>
c000588d:	83 c4 4c             	add    esp,0x4c
c0005890:	89 f8                	mov    eax,edi
c0005892:	5b                   	pop    ebx
c0005893:	5e                   	pop    esi
c0005894:	5f                   	pop    edi
c0005895:	5d                   	pop    ebp
c0005896:	c3                   	ret    
c0005897:	90                   	nop

c0005898 <ff_memalloc>:
c0005898:	83 ec 0c             	sub    esp,0xc
c000589b:	83 ec 0c             	sub    esp,0xc
c000589e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058a2:	e8 ba 12 00 00       	call   c0006b61 <malloc>
c00058a7:	83 c4 10             	add    esp,0x10
c00058aa:	83 c4 0c             	add    esp,0xc
c00058ad:	c3                   	ret    
c00058ae:	66 90                	xchg   ax,ax

c00058b0 <ff_memfree>:
c00058b0:	83 ec 0c             	sub    esp,0xc
c00058b3:	83 ec 0c             	sub    esp,0xc
c00058b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058ba:	e8 b2 12 00 00       	call   c0006b71 <free>
c00058bf:	83 c4 10             	add    esp,0x10
c00058c2:	90                   	nop
c00058c3:	83 c4 0c             	add    esp,0xc
c00058c6:	c3                   	ret    
c00058c7:	90                   	nop

c00058c8 <ff_uni2oem>:
c00058c8:	83 ec 14             	sub    esp,0x14
c00058cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cf:	66 89 04 24          	mov    WORD PTR [esp],ax
c00058d3:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00058da:	c7 44 24 0c c0 c8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001c8c0
c00058e2:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00058e7:	77 0b                	ja     c00058f4 <ff_uni2oem+0x2c>
c00058e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ed:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00058f2:	eb 68                	jmp    c000595c <ff_uni2oem+0x94>
c00058f4:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00058fc:	77 5e                	ja     c000595c <ff_uni2oem+0x94>
c00058fe:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005904:	75 56                	jne    c000595c <ff_uni2oem+0x94>
c0005906:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000590d:	eb 0d                	jmp    c000591c <ff_uni2oem+0x54>
c000590f:	90                   	nop
c0005910:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005915:	40                   	inc    eax
c0005916:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000591b:	90                   	nop
c000591c:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005922:	77 24                	ja     c0005948 <ff_uni2oem+0x80>
c0005924:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005929:	25 ff ff 00 00       	and    eax,0xffff
c000592e:	01 c0                	add    eax,eax
c0005930:	89 c2                	mov    edx,eax
c0005932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005936:	01 d0                	add    eax,edx
c0005938:	66 8b 00             	mov    ax,WORD PTR [eax]
c000593b:	25 ff ff 00 00       	and    eax,0xffff
c0005940:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005944:	75 ca                	jne    c0005910 <ff_uni2oem+0x48>
c0005946:	66 90                	xchg   ax,ax
c0005948:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000594d:	83 e8 80             	sub    eax,0xffffff80
c0005950:	25 ff 00 00 00       	and    eax,0xff
c0005955:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000595a:	66 90                	xchg   ax,ax
c000595c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005961:	83 c4 14             	add    esp,0x14
c0005964:	c3                   	ret    
c0005965:	8d 76 00             	lea    esi,[esi+0x0]

c0005968 <ff_oem2uni>:
c0005968:	83 ec 18             	sub    esp,0x18
c000596b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000596f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005973:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005978:	66 89 04 24          	mov    WORD PTR [esp],ax
c000597c:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005983:	c7 44 24 10 c0 c8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001c8c0
c000598b:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005991:	77 0d                	ja     c00059a0 <ff_oem2uni+0x38>
c0005993:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005997:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000599c:	eb 36                	jmp    c00059d4 <ff_oem2uni+0x6c>
c000599e:	66 90                	xchg   ax,ax
c00059a0:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00059a6:	75 2c                	jne    c00059d4 <ff_oem2uni+0x6c>
c00059a8:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00059af:	77 23                	ja     c00059d4 <ff_oem2uni+0x6c>
c00059b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059b5:	25 ff ff 00 00       	and    eax,0xffff
c00059ba:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00059bf:	01 c0                	add    eax,eax
c00059c1:	89 c2                	mov    edx,eax
c00059c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c7:	01 d0                	add    eax,edx
c00059c9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00059cc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00059d1:	8d 76 00             	lea    esi,[esi+0x0]
c00059d4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00059d9:	83 c4 18             	add    esp,0x18
c00059dc:	c3                   	ret    
c00059dd:	8d 76 00             	lea    esi,[esi+0x0]

c00059e0 <ff_wtoupper>:
c00059e0:	83 ec 10             	sub    esp,0x10
c00059e3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00059eb:	0f 87 77 01 00 00    	ja     c0005b68 <ff_wtoupper+0x188>
c00059f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059f5:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00059fa:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005a01:	77 09                	ja     c0005a0c <ff_wtoupper+0x2c>
c0005a03:	b8 c0 c6 01 c0       	mov    eax,0xc001c6c0
c0005a08:	eb 0a                	jmp    c0005a14 <ff_wtoupper+0x34>
c0005a0a:	66 90                	xchg   ax,ax
c0005a0c:	b8 00 c6 01 c0       	mov    eax,0xc001c600
c0005a11:	8d 76 00             	lea    esi,[esi+0x0]
c0005a14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a1c:	8d 50 02             	lea    edx,[eax+0x2]
c0005a1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a23:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a26:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005a2b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005a31:	0f 84 21 01 00 00    	je     c0005b58 <ff_wtoupper+0x178>
c0005a37:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005a3c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005a41:	0f 82 11 01 00 00    	jb     c0005b58 <ff_wtoupper+0x178>
c0005a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a4b:	8d 50 02             	lea    edx,[eax+0x2]
c0005a4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a52:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a55:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005a5a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005a5f:	66 c1 e8 08          	shr    ax,0x8
c0005a63:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005a68:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005a6f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005a74:	31 d2                	xor    edx,edx
c0005a76:	66 89 c2             	mov    dx,ax
c0005a79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a7d:	31 c9                	xor    ecx,ecx
c0005a7f:	66 89 c1             	mov    cx,ax
c0005a82:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005a87:	25 ff ff 00 00       	and    eax,0xffff
c0005a8c:	01 c8                	add    eax,ecx
c0005a8e:	39 c2                	cmp    edx,eax
c0005a90:	0f 8d 9a 00 00 00    	jge    c0005b30 <ff_wtoupper+0x150>
c0005a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a9a:	25 ff ff 00 00       	and    eax,0xffff
c0005a9f:	83 f8 08             	cmp    eax,0x8
c0005aa2:	0f 87 ac 00 00 00    	ja     c0005b54 <ff_wtoupper+0x174>
c0005aa8:	8b 04 85 c0 c5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3a40]
c0005aaf:	ff e0                	jmp    eax
c0005ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ab4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ab9:	31 d2                	xor    edx,edx
c0005abb:	66 89 c2             	mov    dx,ax
c0005abe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005ac2:	25 ff ff 00 00       	and    eax,0xffff
c0005ac7:	29 c2                	sub    edx,eax
c0005ac9:	89 d0                	mov    eax,edx
c0005acb:	01 c0                	add    eax,eax
c0005acd:	89 c2                	mov    edx,eax
c0005acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ad3:	01 d0                	add    eax,edx
c0005ad5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ad8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005add:	eb 4d                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005adf:	90                   	nop
c0005ae0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ae5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005ae9:	83 e0 01             	and    eax,0x1
c0005aec:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005af1:	eb 39                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005af3:	90                   	nop
c0005af4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005afa:	eb 30                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005afc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005b02:	eb 28                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b04:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005b0a:	eb 20                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b0c:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005b12:	eb 18                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b14:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005b1a:	eb 10                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b1c:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005b22:	eb 08                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b24:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005b2b:	90                   	nop
c0005b2c:	eb 26                	jmp    c0005b54 <ff_wtoupper+0x174>
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005b36:	0f 85 dc fe ff ff    	jne    c0005a18 <ff_wtoupper+0x38>
c0005b3c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005b41:	25 ff ff 00 00       	and    eax,0xffff
c0005b46:	01 c0                	add    eax,eax
c0005b48:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005b4c:	e9 c7 fe ff ff       	jmp    c0005a18 <ff_wtoupper+0x38>
c0005b51:	8d 76 00             	lea    esi,[esi+0x0]
c0005b54:	90                   	nop
c0005b55:	8d 76 00             	lea    esi,[esi+0x0]
c0005b58:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005b5d:	25 ff ff 00 00       	and    eax,0xffff
c0005b62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b66:	66 90                	xchg   ax,ax
c0005b68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b6c:	83 c4 10             	add    esp,0x10
c0005b6f:	c3                   	ret    

c0005b70 <CPU::current()>:
c0005b70:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0005b75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0005b7b:	c3                   	ret    

c0005b7c <operator new(unsigned long)>:
c0005b7c:	e9 e0 0f 00 00       	jmp    c0006b61 <malloc>

c0005b81 <operator delete(void*)>:
c0005b81:	e9 fb 0f 00 00       	jmp    c0006b81 <rfree>

c0005b86 <disableIRQs()>:
c0005b86:	fa                   	cli    
c0005b87:	c3                   	ret    

c0005b88 <enableIRQs()>:
c0005b88:	fb                   	sti    
c0005b89:	c3                   	ret    

c0005b8a <lockScheduler()>:
c0005b8a:	fa                   	cli    
c0005b8b:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0005b91:	c3                   	ret    

c0005b92 <unlockScheduler()>:
c0005b92:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0005b97:	48                   	dec    eax
c0005b98:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0005b9d:	75 01                	jne    c0005ba0 <unlockScheduler()+0xe>
c0005b9f:	fb                   	sti    
c0005ba0:	c3                   	ret    

c0005ba1 <lockStuff()>:
c0005ba1:	fa                   	cli    
c0005ba2:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0005ba8:	ff 05 e4 28 02 c0    	inc    DWORD PTR ds:0xc00228e4
c0005bae:	c3                   	ret    

c0005baf <unlockStuff()>:
c0005baf:	83 ec 0c             	sub    esp,0xc
c0005bb2:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c0005bb7:	48                   	dec    eax
c0005bb8:	a3 e4 28 02 c0       	mov    ds:0xc00228e4,eax
c0005bbd:	75 18                	jne    c0005bd7 <unlockStuff()+0x28>
c0005bbf:	83 3d e0 28 02 c0 00 	cmp    DWORD PTR ds:0xc00228e0,0x0
c0005bc6:	74 0f                	je     c0005bd7 <unlockStuff()+0x28>
c0005bc8:	c7 05 e0 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228e0,0x0
c0005bd2:	e8 dd cc 00 00       	call   c00128b4 <schedule()>
c0005bd7:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0005bdc:	48                   	dec    eax
c0005bdd:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0005be2:	75 01                	jne    c0005be5 <unlockStuff()+0x36>
c0005be4:	fb                   	sti    
c0005be5:	83 c4 0c             	add    esp,0xc
c0005be8:	c3                   	ret    

c0005be9 <Virt::getAKernelVAS()>:
c0005be9:	a1 10 f5 01 c0       	mov    eax,ds:0xc001f510
c0005bee:	c3                   	ret    

c0005bef <__not_memcpy>:
c0005bef:	57                   	push   edi
c0005bf0:	56                   	push   esi
c0005bf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005bfd:	89 c7                	mov    edi,eax
c0005bff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0005c01:	5e                   	pop    esi
c0005c02:	5f                   	pop    edi
c0005c03:	c3                   	ret    

c0005c04 <Krnl::resolveCompatibilitySymbol(char*)>:
c0005c04:	83 ec 0c             	sub    esp,0xc
c0005c07:	83 ec 08             	sub    esp,0x8
c0005c0a:	68 c0 c9 01 c0       	push   0xc001c9c0
c0005c0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c13:	e8 e8 aa ff ff       	call   c0000700 <strcmp>
c0005c18:	83 c4 10             	add    esp,0x10
c0005c1b:	85 c0                	test   eax,eax
c0005c1d:	0f 94 c0             	sete   al
c0005c20:	84 c0                	test   al,al
c0005c22:	74 0c                	je     c0005c30 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0005c24:	b8 28 f4 01 c0       	mov    eax,0xc001f428
c0005c29:	e9 ea 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c2e:	66 90                	xchg   ax,ax
c0005c30:	83 ec 08             	sub    esp,0x8
c0005c33:	68 c9 c9 01 c0       	push   0xc001c9c9
c0005c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c3c:	e8 bf aa ff ff       	call   c0000700 <strcmp>
c0005c41:	83 c4 10             	add    esp,0x10
c0005c44:	85 c0                	test   eax,eax
c0005c46:	0f 94 c0             	sete   al
c0005c49:	84 c0                	test   al,al
c0005c4b:	74 0b                	je     c0005c58 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0005c4d:	b8 60 b6 01 c0       	mov    eax,0xc001b660
c0005c52:	e9 c1 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c57:	90                   	nop
c0005c58:	83 ec 08             	sub    esp,0x8
c0005c5b:	68 d3 c9 01 c0       	push   0xc001c9d3
c0005c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c64:	e8 97 aa ff ff       	call   c0000700 <strcmp>
c0005c69:	83 c4 10             	add    esp,0x10
c0005c6c:	85 c0                	test   eax,eax
c0005c6e:	0f 94 c0             	sete   al
c0005c71:	84 c0                	test   al,al
c0005c73:	74 0b                	je     c0005c80 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0005c75:	b8 94 b3 01 c0       	mov    eax,0xc001b394
c0005c7a:	e9 99 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c7f:	90                   	nop
c0005c80:	83 ec 08             	sub    esp,0x8
c0005c83:	68 dc c9 01 c0       	push   0xc001c9dc
c0005c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c8c:	e8 6f aa ff ff       	call   c0000700 <strcmp>
c0005c91:	83 c4 10             	add    esp,0x10
c0005c94:	85 c0                	test   eax,eax
c0005c96:	0f 94 c0             	sete   al
c0005c99:	84 c0                	test   al,al
c0005c9b:	74 07                	je     c0005ca4 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0005c9d:	b8 60 b7 01 c0       	mov    eax,0xc001b760
c0005ca2:	eb 74                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005ca4:	83 ec 08             	sub    esp,0x8
c0005ca7:	68 e6 c9 01 c0       	push   0xc001c9e6
c0005cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cb0:	e8 4b aa ff ff       	call   c0000700 <strcmp>
c0005cb5:	83 c4 10             	add    esp,0x10
c0005cb8:	85 c0                	test   eax,eax
c0005cba:	0f 94 c0             	sete   al
c0005cbd:	84 c0                	test   al,al
c0005cbf:	74 07                	je     c0005cc8 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0005cc1:	b8 e0 b4 01 c0       	mov    eax,0xc001b4e0
c0005cc6:	eb 50                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005cc8:	83 ec 08             	sub    esp,0x8
c0005ccb:	68 ef c9 01 c0       	push   0xc001c9ef
c0005cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cd4:	e8 27 aa ff ff       	call   c0000700 <strcmp>
c0005cd9:	83 c4 10             	add    esp,0x10
c0005cdc:	85 c0                	test   eax,eax
c0005cde:	0f 94 c0             	sete   al
c0005ce1:	84 c0                	test   al,al
c0005ce3:	74 07                	je     c0005cec <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0005ce5:	b8 2c f4 01 c0       	mov    eax,0xc001f42c
c0005cea:	eb 2c                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005cec:	83 ec 08             	sub    esp,0x8
c0005cef:	68 fc c9 01 c0       	push   0xc001c9fc
c0005cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cf8:	e8 03 aa ff ff       	call   c0000700 <strcmp>
c0005cfd:	83 c4 10             	add    esp,0x10
c0005d00:	85 c0                	test   eax,eax
c0005d02:	0f 94 c0             	sete   al
c0005d05:	84 c0                	test   al,al
c0005d07:	74 07                	je     c0005d10 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0005d09:	b8 2d f4 01 c0       	mov    eax,0xc001f42d
c0005d0e:	eb 08                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005d10:	b8 00 00 00 00       	mov    eax,0x0
c0005d15:	8d 76 00             	lea    esi,[esi+0x0]
c0005d18:	83 c4 0c             	add    esp,0xc
c0005d1b:	c3                   	ret    

c0005d1c <Computer::close(int, int, void*)>:
c0005d1c:	57                   	push   edi
c0005d1d:	56                   	push   esi
c0005d1e:	53                   	push   ebx
c0005d1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0005d23:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0005d27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005d2b:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0005d31:	83 ec 0c             	sub    esp,0xc
c0005d34:	50                   	push   eax
c0005d35:	e8 14 51 00 00       	call   c000ae4e <Device::closeAll()>
c0005d3a:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	8b 10                	mov    edx,DWORD PTR [eax]
c0005d45:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0005d49:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0005d51:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0005d55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d59:	5b                   	pop    ebx
c0005d5a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0005d5d:	5e                   	pop    esi
c0005d5e:	5f                   	pop    edi
c0005d5f:	ff e0                	jmp    eax

c0005d61 <Krnl::firstTask()>:
c0005d61:	53                   	push   ebx
c0005d62:	83 ec 14             	sub    esp,0x14
c0005d65:	fb                   	sti    
c0005d66:	68 09 ca 01 c0       	push   0xc001ca09
c0005d6b:	e8 4b 0e 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005d70:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0005d77:	e8 e5 0d 00 00       	call   c0006b61 <malloc>
c0005d7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005d83:	89 c3                	mov    ebx,eax
c0005d85:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c0005d8a:	50                   	push   eax
c0005d8b:	68 22 ca 01 c0       	push   0xc001ca22
c0005d90:	6a 01                	push   0x1
c0005d92:	53                   	push   ebx
c0005d93:	e8 f0 c6 00 00       	call   c0012488 <Process::Process(bool, char const*, Process*, char**)>
c0005d98:	83 c4 20             	add    esp,0x20
c0005d9b:	68 ff 00 00 00       	push   0xff
c0005da0:	6a 00                	push   0x0
c0005da2:	68 b9 65 00 c0       	push   0xc00065b9
c0005da7:	53                   	push   ebx
c0005da8:	e8 e7 c8 00 00       	call   c0012694 <Process::createThread(void (*)(void*), void*, int)>
c0005dad:	8b 15 10 29 02 c0    	mov    edx,DWORD PTR ds:0xc0022910
c0005db3:	6a 7a                	push   0x7a
c0005db5:	6a 00                	push   0x0
c0005db7:	68 e8 30 01 c0       	push   0xc00130e8
c0005dbc:	52                   	push   edx
c0005dbd:	e8 d2 c8 00 00       	call   c0012694 <Process::createThread(void (*)(void*), void*, int)>
c0005dc2:	83 c4 14             	add    esp,0x14
c0005dc5:	a3 c8 28 02 c0       	mov    ds:0xc00228c8,eax
c0005dca:	68 20 cb 01 c0       	push   0xc001cb20
c0005dcf:	c6 05 2d f4 01 c0 01 	mov    BYTE PTR ds:0xc001f42d,0x1
c0005dd6:	e8 e0 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005ddb:	e8 e7 d6 00 00       	call   c00134c7 <Vm::initialise8086()>
c0005de0:	e8 ad 3e 00 00       	call   c0009c92 <Fs::initVFS()>
c0005de5:	c7 04 24 2f ca 01 c0 	mov    DWORD PTR [esp],0xc001ca2f
c0005dec:	e8 ca 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005df1:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0005df6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0005dfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0005dfe:	6a 00                	push   0x0
c0005e00:	6a 00                	push   0x0
c0005e02:	6a 00                	push   0x0
c0005e04:	50                   	push   eax
c0005e05:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0005e08:	83 c4 14             	add    esp,0x14
c0005e0b:	68 20 cb 01 c0       	push   0xc001cb20
c0005e10:	e8 a6 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005e15:	e8 fd ae 00 00       	call   c0010d17 <Sys::loadSyscalls()>
c0005e1a:	e8 17 95 00 00       	call   c000f336 <Krnl::loadSystemEnv()>
c0005e1f:	e8 f9 98 00 00       	call   c000f71d <Krnl::setupPowerManager()>
c0005e24:	83 c4 0c             	add    esp,0xc
c0005e27:	6a 3a                	push   0x3a
c0005e29:	68 49 ca 01 c0       	push   0xc001ca49
c0005e2e:	68 52 ca 01 c0       	push   0xc001ca52
c0005e33:	e8 0f 9e 00 00       	call   c000fc47 <Reg::readIntWithDefault(char*, char*, int)>
c0005e38:	89 04 24             	mov    DWORD PTR [esp],eax
c0005e3b:	e8 60 49 00 00       	call   c000a7a0 <User::loadClockSettings(int)>
c0005e40:	c7 04 24 44 cb 01 c0 	mov    DWORD PTR [esp],0xc001cb44
c0005e47:	e8 6f 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005e4c:	59                   	pop    ecx
c0005e4d:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0005e52:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0005e58:	53                   	push   ebx
c0005e59:	e8 ee 4f 00 00       	call   c000ae4c <Device::loadDriversForAll()>
c0005e5e:	c7 04 24 5a ca 01 c0 	mov    DWORD PTR [esp],0xc001ca5a
c0005e65:	e8 51 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005e6a:	58                   	pop    eax
c0005e6b:	8b 1d 28 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f428
c0005e71:	5a                   	pop    edx
c0005e72:	6a 01                	push   0x1
c0005e74:	68 6b ca 01 c0       	push   0xc001ca6b
c0005e79:	e8 41 c0 00 00       	call   c0011ebf <Thr::loadDLL(char const*, bool)>
c0005e7e:	59                   	pop    ecx
c0005e7f:	5a                   	pop    edx
c0005e80:	53                   	push   ebx
c0005e81:	50                   	push   eax
c0005e82:	e8 69 c2 00 00       	call   c00120f0 <Thr::executeDLL(unsigned long, void*)>
c0005e87:	83 c4 10             	add    esp,0x10
c0005e8a:	83 ec 0c             	sub    esp,0xc
c0005e8d:	6a 02                	push   0x2
c0005e8f:	e8 1c cc 00 00       	call   c0012ab0 <blockTask(TaskState)>
c0005e94:	83 c4 10             	add    esp,0x10
c0005e97:	eb f1                	jmp    c0005e8a <Krnl::firstTask()+0x129>
c0005e99:	90                   	nop

c0005e9a <Computer::Computer()>:
c0005e9a:	83 ec 0c             	sub    esp,0xc
c0005e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ea1:	83 ec 08             	sub    esp,0x8
c0005ea4:	68 87 ca 01 c0       	push   0xc001ca87
c0005ea9:	50                   	push   eax
c0005eaa:	e8 19 50 00 00       	call   c000aec8 <Device::Device(char const*)>
c0005eaf:	83 c4 10             	add    esp,0x10
c0005eb2:	ba 90 cb 01 c0       	mov    edx,0xc001cb90
c0005eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ebb:	89 10                	mov    DWORD PTR [eax],edx
c0005ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ec1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0005ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ecf:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0005ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005edd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0005ee3:	83 ca 04             	or     edx,0x4
c0005ee6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0005eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ef0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005ef6:	31 d2                	xor    edx,edx
c0005ef8:	88 c2                	mov    dl,al
c0005efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005efe:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0005f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f0f:	31 d2                	xor    edx,edx
c0005f11:	88 c2                	mov    dl,al
c0005f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f17:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0005f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f26:	8d 50 01             	lea    edx,[eax+0x1]
c0005f29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005f2d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005f33:	31 d2                	xor    edx,edx
c0005f35:	88 c2                	mov    dl,al
c0005f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f3b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005f3f:	83 e1 3f             	and    ecx,0x3f
c0005f42:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005f46:	90                   	nop
c0005f47:	83 c4 0c             	add    esp,0xc
c0005f4a:	c3                   	ret    
c0005f4b:	90                   	nop

c0005f4c <Computer::setBootMessage(char const*)>:
c0005f4c:	c3                   	ret    
c0005f4d:	90                   	nop

c0005f4e <Computer::detectFeatures()>:
c0005f4e:	55                   	push   ebp
c0005f4f:	57                   	push   edi
c0005f50:	56                   	push   esi
c0005f51:	53                   	push   ebx
c0005f52:	83 ec 1c             	sub    esp,0x1c
c0005f55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f59:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0005f63:	e8 b1 a2 ff ff       	call   c0000219 <detectCPUID>
c0005f68:	85 c0                	test   eax,eax
c0005f6a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0005f70:	0f 95 c2             	setne  dl
c0005f73:	83 e0 fd             	and    eax,0xfffffffd
c0005f76:	01 d2                	add    edx,edx
c0005f78:	09 d0                	or     eax,edx
c0005f7a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0005f80:	a8 02                	test   al,0x2
c0005f82:	75 46                	jne    c0005fca <Computer::detectFeatures()+0x7c>
c0005f84:	f6 05 41 f4 01 c0 04 	test   BYTE PTR ds:0xc001f441,0x4
c0005f8b:	74 07                	je     c0005f94 <Computer::detectFeatures()+0x46>
c0005f8d:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0005f94:	e8 8d 53 01 00       	call   c001b326 <x87Detect>
c0005f99:	83 e0 01             	and    eax,0x1
c0005f9c:	c1 e0 04             	shl    eax,0x4
c0005f9f:	88 c2                	mov    dl,al
c0005fa1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0005fa7:	83 e0 ef             	and    eax,0xffffffef
c0005faa:	09 d0                	or     eax,edx
c0005fac:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0005fb2:	a8 10                	test   al,0x10
c0005fb4:	0f 85 2a 01 00 00    	jne    c00060e4 <Computer::detectFeatures()+0x196>
c0005fba:	84 c0                	test   al,al
c0005fbc:	0f 88 45 01 00 00    	js     c0006107 <Computer::detectFeatures()+0x1b9>
c0005fc2:	83 c4 1c             	add    esp,0x1c
c0005fc5:	5b                   	pop    ebx
c0005fc6:	5e                   	pop    esi
c0005fc7:	5f                   	pop    edi
c0005fc8:	5d                   	pop    ebp
c0005fc9:	c3                   	ret    
c0005fca:	83 ec 0c             	sub    esp,0xc
c0005fcd:	6a 20                	push   0x20
c0005fcf:	e8 84 84 00 00       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c0005fd4:	83 e0 01             	and    eax,0x1
c0005fd7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0005fde:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0005fe4:	83 e0 f7             	and    eax,0xfffffff7
c0005fe7:	09 d0                	or     eax,edx
c0005fe9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0005fef:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0005ff6:	e8 5d 84 00 00       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c0005ffb:	83 e0 01             	and    eax,0x1
c0005ffe:	88 c2                	mov    dl,al
c0006000:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006006:	83 e0 fe             	and    eax,0xfffffffe
c0006009:	09 d0                	or     eax,edx
c000600b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006011:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006018:	e8 3b 84 00 00       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000601d:	c1 e0 07             	shl    eax,0x7
c0006020:	88 c2                	mov    dl,al
c0006022:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006028:	83 e0 7f             	and    eax,0x7f
c000602b:	09 d0                	or     eax,edx
c000602d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006033:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000603a:	e8 19 84 00 00       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000603f:	83 c4 10             	add    esp,0x10
c0006042:	83 e0 01             	and    eax,0x1
c0006045:	c1 e0 05             	shl    eax,0x5
c0006048:	88 c2                	mov    dl,al
c000604a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006050:	83 e0 df             	and    eax,0xffffffdf
c0006053:	09 d0                	or     eax,edx
c0006055:	f7 05 40 f4 01 c0 01 04 00 00 	test   DWORD PTR ds:0xc001f440,0x401
c000605f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006065:	0f 84 c2 00 00 00    	je     c000612d <Computer::detectFeatures()+0x1df>
c000606b:	83 e0 fe             	and    eax,0xfffffffe
c000606e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006074:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000607a:	88 c2                	mov    dl,al
c000607c:	83 e2 09             	and    edx,0x9
c000607f:	fe ca                	dec    dl
c0006081:	75 09                	jne    c000608c <Computer::detectFeatures()+0x13e>
c0006083:	83 e0 fe             	and    eax,0xfffffffe
c0006086:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000608c:	83 ec 0c             	sub    esp,0xc
c000608f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006093:	50                   	push   eax
c0006094:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006098:	55                   	push   ebp
c0006099:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000609d:	57                   	push   edi
c000609e:	8d 74 24 18          	lea    esi,[esp+0x18]
c00060a2:	56                   	push   esi
c00060a3:	68 00 00 00 80       	push   0x80000000
c00060a8:	e8 27 83 00 00       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00060ad:	83 c4 20             	add    esp,0x20
c00060b0:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00060b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00060bb:	0f 86 c3 fe ff ff    	jbe    c0005f84 <Computer::detectFeatures()+0x36>
c00060c1:	83 ec 0c             	sub    esp,0xc
c00060c4:	50                   	push   eax
c00060c5:	55                   	push   ebp
c00060c6:	57                   	push   edi
c00060c7:	56                   	push   esi
c00060c8:	68 01 00 00 80       	push   0x80000001
c00060cd:	e8 02 83 00 00       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00060d2:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c00060dc:	83 c4 20             	add    esp,0x20
c00060df:	e9 a0 fe ff ff       	jmp    c0005f84 <Computer::detectFeatures()+0x36>
c00060e4:	e8 f7 51 01 00       	call   c001b2e0 <absolutelyNoChanceInHell>
c00060e9:	88 c2                	mov    dl,al
c00060eb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00060f1:	c1 e2 07             	shl    edx,0x7
c00060f4:	83 e0 7f             	and    eax,0x7f
c00060f7:	09 d0                	or     eax,edx
c00060f9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00060ff:	84 c0                	test   al,al
c0006101:	0f 89 bb fe ff ff    	jns    c0005fc2 <Computer::detectFeatures()+0x74>
c0006107:	e8 54 4f 01 00       	call   c001b060 <avxDetect>
c000610c:	83 e0 01             	and    eax,0x1
c000610f:	c1 e0 05             	shl    eax,0x5
c0006112:	88 c2                	mov    dl,al
c0006114:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000611a:	83 e0 df             	and    eax,0xffffffdf
c000611d:	09 d0                	or     eax,edx
c000611f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006125:	83 c4 1c             	add    esp,0x1c
c0006128:	5b                   	pop    ebx
c0006129:	5e                   	pop    esi
c000612a:	5f                   	pop    edi
c000612b:	5d                   	pop    ebp
c000612c:	c3                   	ret    
c000612d:	83 ec 0c             	sub    esp,0xc
c0006130:	68 00 02 00 00       	push   0x200
c0006135:	e8 1e 83 00 00       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000613a:	83 c4 10             	add    esp,0x10
c000613d:	83 e0 01             	and    eax,0x1
c0006140:	88 c2                	mov    dl,al
c0006142:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006148:	83 e0 fe             	and    eax,0xfffffffe
c000614b:	09 d0                	or     eax,edx
c000614d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006153:	e9 1c ff ff ff       	jmp    c0006074 <Computer::detectFeatures()+0x126>

c0006158 <Computer::displayFeatures()>:
c0006158:	c3                   	ret    
c0006159:	90                   	nop

c000615a <Computer::rdmsr(unsigned int)>:
c000615a:	83 ec 0c             	sub    esp,0xc
c000615d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006161:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006168:	74 0a                	je     c0006174 <Computer::rdmsr(unsigned int)+0x1a>
c000616a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000616e:	0f 32                	rdmsr  
c0006170:	83 c4 0c             	add    esp,0xc
c0006173:	c3                   	ret    
c0006174:	83 ec 0c             	sub    esp,0xc
c0006177:	68 90 ca 01 c0       	push   0xc001ca90
c000617c:	e8 be 92 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0006181:	83 c4 10             	add    esp,0x10
c0006184:	eb e4                	jmp    c000616a <Computer::rdmsr(unsigned int)+0x10>

c0006186 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006186:	57                   	push   edi
c0006187:	56                   	push   esi
c0006188:	52                   	push   edx
c0006189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000618d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006191:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006195:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000619c:	74 0e                	je     c00061ac <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000619e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061a2:	89 f0                	mov    eax,esi
c00061a4:	89 fa                	mov    edx,edi
c00061a6:	0f 30                	wrmsr  
c00061a8:	58                   	pop    eax
c00061a9:	5e                   	pop    esi
c00061aa:	5f                   	pop    edi
c00061ab:	c3                   	ret    
c00061ac:	83 ec 0c             	sub    esp,0xc
c00061af:	68 96 ca 01 c0       	push   0xc001ca96
c00061b4:	e8 86 92 00 00       	call   c000f43f <Krnl::panic(char const*)>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	eb e0                	jmp    c000619e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00061be <Computer::shutdown()>:
c00061be:	83 ec 0c             	sub    esp,0xc
c00061c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00061c7:	6a 00                	push   0x0
c00061c9:	6a 00                	push   0x0
c00061cb:	6a 00                	push   0x0
c00061cd:	50                   	push   eax
c00061ce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00061d1:	83 c4 1c             	add    esp,0x1c
c00061d4:	c3                   	ret    
c00061d5:	90                   	nop

c00061d6 <Computer::restart()>:
c00061d6:	83 ec 0c             	sub    esp,0xc
c00061d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00061df:	6a 00                	push   0x0
c00061e1:	6a 00                	push   0x0
c00061e3:	6a 01                	push   0x1
c00061e5:	50                   	push   eax
c00061e6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00061e9:	83 c4 1c             	add    esp,0x1c
c00061ec:	c3                   	ret    
c00061ed:	90                   	nop

c00061ee <Computer::sleep()>:
c00061ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061f2:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00061f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00061fc:	e9 cf 7c 00 00       	jmp    c000ded0 <ACPI::sleep()>
c0006201:	90                   	nop

c0006202 <Computer::nmiEnabled()>:
c0006202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006206:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000620c:	c3                   	ret    
c000620d:	90                   	nop

c000620e <Computer::readCMOS(unsigned char)>:
c000620e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006212:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006219:	19 c0                	sbb    eax,eax
c000621b:	83 e0 80             	and    eax,0xffffff80
c000621e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006222:	e6 70                	out    0x70,al
c0006224:	e4 71                	in     al,0x71
c0006226:	c3                   	ret    
c0006227:	90                   	nop

c0006228 <Computer::enableNMI(bool)>:
c0006228:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000622c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006230:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006236:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000623e:	eb ce                	jmp    c000620e <Computer::readCMOS(unsigned char)>

c0006240 <Computer::open(int, int, void*)>:
c0006240:	56                   	push   esi
c0006241:	53                   	push   ebx
c0006242:	83 ec 10             	sub    esp,0x10
c0006245:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006249:	f6 05 40 f4 01 c0 04 	test   BYTE PTR ds:0xc001f440,0x4
c0006250:	68 9c ca 01 c0       	push   0xc001ca9c
c0006255:	0f 94 05 60 ed 01 c0 	sete   BYTE PTR ds:0xc001ed60
c000625c:	e8 5a 09 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0006261:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006268:	e8 f4 08 00 00       	call   c0006b61 <malloc>
c000626d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006270:	89 c6                	mov    esi,eax
c0006272:	e8 f1 77 00 00       	call   c000da68 <ACPI::ACPI()>
c0006277:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000627d:	58                   	pop    eax
c000627e:	5a                   	pop    edx
c000627f:	56                   	push   esi
c0006280:	53                   	push   ebx
c0006281:	e8 aa 4a 00 00       	call   c000ad30 <Device::addChild(Device*)>
c0006286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006289:	e8 c0 fc ff ff       	call   c0005f4e <Computer::detectFeatures()>
c000628e:	59                   	pop    ecx
c000628f:	5e                   	pop    esi
c0006290:	6a 01                	push   0x1
c0006292:	53                   	push   ebx
c0006293:	e8 90 ff ff ff       	call   c0006228 <Computer::enableNMI(bool)>
c0006298:	c7 04 24 b4 ca 01 c0 	mov    DWORD PTR [esp],0xc001cab4
c000629f:	e8 17 09 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c00062a4:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00062ab:	e8 b1 08 00 00       	call   c0006b61 <malloc>
c00062b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00062b3:	89 c6                	mov    esi,eax
c00062b5:	e8 56 82 00 00       	call   c000e510 <CPU::CPU()>
c00062ba:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00062c0:	58                   	pop    eax
c00062c1:	5a                   	pop    edx
c00062c2:	56                   	push   esi
c00062c3:	53                   	push   ebx
c00062c4:	e8 67 4a 00 00       	call   c000ad30 <Device::addChild(Device*)>
c00062c9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00062cf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00062d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00062d5:	51                   	push   ecx
c00062d6:	6a 00                	push   0x0
c00062d8:	6a 00                	push   0x0
c00062da:	50                   	push   eax
c00062db:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00062de:	83 c4 14             	add    esp,0x14
c00062e1:	68 64 cb 01 c0       	push   0xc001cb64
c00062e6:	e8 d0 08 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c00062eb:	e8 98 e2 00 00       	call   c0014588 <HalInitialiseCoprocessor()>
c00062f0:	c7 04 24 ce ca 01 c0 	mov    DWORD PTR [esp],0xc001cace
c00062f7:	e8 bf 08 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c00062fc:	c7 04 24 61 5d 00 c0 	mov    DWORD PTR [esp],0xc0005d61
c0006303:	e8 a4 c4 00 00       	call   c00127ac <setupMultitasking(void (*)())>
c0006308:	83 c4 14             	add    esp,0x14
c000630b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006310:	5b                   	pop    ebx
c0006311:	5e                   	pop    esi
c0006312:	c3                   	ret    
c0006313:	90                   	nop

c0006314 <Computer::disableNMI()>:
c0006314:	6a 00                	push   0x0
c0006316:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000631a:	50                   	push   eax
c000631b:	e8 08 ff ff ff       	call   c0006228 <Computer::enableNMI(bool)>
c0006320:	5a                   	pop    edx
c0006321:	59                   	pop    ecx
c0006322:	c3                   	ret    
c0006323:	90                   	nop

c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006328:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000632f:	19 c0                	sbb    eax,eax
c0006331:	83 e0 80             	and    eax,0xffffff80
c0006334:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006338:	e6 70                	out    0x70,al
c000633a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000633e:	e6 71                	out    0x71,al
c0006340:	c3                   	ret    
c0006341:	90                   	nop

c0006342 <Computer::handleNMI()>:
c0006342:	56                   	push   esi
c0006343:	53                   	push   ebx
c0006344:	83 ec 10             	sub    esp,0x10
c0006347:	e4 92                	in     al,0x92
c0006349:	89 c6                	mov    esi,eax
c000634b:	e4 61                	in     al,0x61
c000634d:	68 e9 ca 01 c0       	push   0xc001cae9
c0006352:	88 c3                	mov    bl,al
c0006354:	e8 97 35 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0006359:	83 c4 10             	add    esp,0x10
c000635c:	83 e6 10             	and    esi,0x10
c000635f:	75 0d                	jne    c000636e <Computer::handleNMI()+0x2c>
c0006361:	f6 c3 40             	test   bl,0x40
c0006364:	75 1d                	jne    c0006383 <Computer::handleNMI()+0x41>
c0006366:	84 db                	test   bl,bl
c0006368:	78 2d                	js     c0006397 <Computer::handleNMI()+0x55>
c000636a:	58                   	pop    eax
c000636b:	5b                   	pop    ebx
c000636c:	5e                   	pop    esi
c000636d:	c3                   	ret    
c000636e:	83 ec 0c             	sub    esp,0xc
c0006371:	68 fa ca 01 c0       	push   0xc001cafa
c0006376:	e8 c4 90 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000637b:	83 c4 10             	add    esp,0x10
c000637e:	f6 c3 40             	test   bl,0x40
c0006381:	74 e3                	je     c0006366 <Computer::handleNMI()+0x24>
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	68 07 cb 01 c0       	push   0xc001cb07
c000638b:	e8 af 90 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0006390:	83 c4 10             	add    esp,0x10
c0006393:	84 db                	test   bl,bl
c0006395:	79 d3                	jns    c000636a <Computer::handleNMI()+0x28>
c0006397:	c7 44 24 10 11 cb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cb11
c000639f:	5a                   	pop    edx
c00063a0:	5b                   	pop    ebx
c00063a1:	5e                   	pop    esi
c00063a2:	e9 98 90 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c00063a7:	90                   	nop

c00063a8 <GDTEntry::setBase(unsigned int)>:
c00063a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00063b0:	89 c1                	mov    ecx,eax
c00063b2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00063b6:	c1 e9 10             	shr    ecx,0x10
c00063b9:	c1 e8 18             	shr    eax,0x18
c00063bc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00063bf:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00063c2:	c3                   	ret    
c00063c3:	90                   	nop

c00063c4 <GDTEntry::setLimit(unsigned int)>:
c00063c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00063c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063cc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00063cf:	66 89 01             	mov    WORD PTR [ecx],ax
c00063d2:	83 e2 f0             	and    edx,0xfffffff0
c00063d5:	c1 e8 10             	shr    eax,0x10
c00063d8:	83 e0 0f             	and    eax,0xf
c00063db:	09 d0                	or     eax,edx
c00063dd:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00063e0:	c3                   	ret    
c00063e1:	90                   	nop

c00063e2 <GDT::GDT()>:
c00063e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00063ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00063f6:	90                   	nop
c00063f7:	c3                   	ret    

c00063f8 <GDT::addEntry(GDTEntry)>:
c00063f8:	53                   	push   ebx
c00063f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00063fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006401:	8b 02                	mov    eax,DWORD PTR [edx]
c0006403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006407:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000640b:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000640f:	8d 48 01             	lea    ecx,[eax+0x1]
c0006412:	c1 e0 03             	shl    eax,0x3
c0006415:	89 0a                	mov    DWORD PTR [edx],ecx
c0006417:	5b                   	pop    ebx
c0006418:	c3                   	ret    
c0006419:	90                   	nop

c000641a <GDT::getNumberOfEntries()>:
c000641a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000641e:	8b 00                	mov    eax,DWORD PTR [eax]
c0006420:	c3                   	ret    
c0006421:	90                   	nop

c0006422 <GDT::flush()>:
c0006422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006426:	8b 10                	mov    edx,DWORD PTR [eax]
c0006428:	83 c0 04             	add    eax,0x4
c000642b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0006432:	a3 32 f4 01 c0       	mov    ds:0xc001f432,eax
c0006437:	66 89 15 30 f4 01 c0 	mov    WORD PTR ds:0xc001f430,dx
c000643e:	e9 3a 9f ff ff       	jmp    c000037d <loadGDT>
c0006443:	90                   	nop

c0006444 <GDT::setup()>:
c0006444:	57                   	push   edi
c0006445:	56                   	push   esi
c0006446:	53                   	push   ebx
c0006447:	83 ec 40             	sub    esp,0x40
c000644a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000644e:	6a 00                	push   0x0
c0006450:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0006454:	56                   	push   esi
c0006455:	e8 4e ff ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c000645a:	6a 00                	push   0x0
c000645c:	56                   	push   esi
c000645d:	e8 62 ff ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c0006462:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c000646a:	6a 00                	push   0x0
c000646c:	8d 74 24 44          	lea    esi,[esp+0x44]
c0006470:	56                   	push   esi
c0006471:	e8 32 ff ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c0006476:	68 ff ff ff 00       	push   0xffffff
c000647b:	56                   	push   esi
c000647c:	e8 43 ff ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c0006481:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0006485:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000648a:	0d 00 9a c0 00       	or     eax,0xc09a00
c000648f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006493:	83 c4 20             	add    esp,0x20
c0006496:	6a 00                	push   0x0
c0006498:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000649c:	56                   	push   esi
c000649d:	e8 06 ff ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c00064a2:	68 ff ff ff 00       	push   0xffffff
c00064a7:	56                   	push   esi
c00064a8:	e8 17 ff ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c00064ad:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00064b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00064b5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00064b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00064bd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00064c1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00064c6:	0d 00 92 c0 00       	or     eax,0xc09200
c00064cb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00064cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00064d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00064d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00064db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00064df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00064e3:	89 fa                	mov    edx,edi
c00064e5:	80 cc 60             	or     ah,0x60
c00064e8:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c00064ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00064f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00064f6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00064fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064fe:	80 cc 60             	or     ah,0x60
c0006501:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0006505:	89 f8                	mov    eax,edi
c0006507:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000650c:	09 d0                	or     eax,edx
c000650e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006512:	89 c7                	mov    edi,eax
c0006514:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006518:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000651c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006520:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006524:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c000652a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652e:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0006533:	09 d0                	or     eax,edx
c0006535:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0006539:	83 c4 0c             	add    esp,0xc
c000653c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006540:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006544:	53                   	push   ebx
c0006545:	e8 ae fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000654a:	83 c4 0c             	add    esp,0xc
c000654d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006551:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006555:	53                   	push   ebx
c0006556:	e8 9d fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000655b:	83 c4 0c             	add    esp,0xc
c000655e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006562:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006566:	53                   	push   ebx
c0006567:	e8 8c fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000656c:	83 c4 0c             	add    esp,0xc
c000656f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006573:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006577:	53                   	push   ebx
c0006578:	e8 7b fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000657d:	83 c4 0c             	add    esp,0xc
c0006580:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006584:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006588:	53                   	push   ebx
c0006589:	e8 6a fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000658e:	83 c4 0c             	add    esp,0xc
c0006591:	57                   	push   edi
c0006592:	56                   	push   esi
c0006593:	53                   	push   ebx
c0006594:	e8 5f fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c0006599:	83 c4 0c             	add    esp,0xc
c000659c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00065a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00065a4:	53                   	push   ebx
c00065a5:	e8 4e fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c00065aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00065ad:	e8 70 fe ff ff       	call   c0006422 <GDT::flush()>
c00065b2:	83 c4 50             	add    esp,0x50
c00065b5:	5b                   	pop    ebx
c00065b6:	5e                   	pop    esi
c00065b7:	5f                   	pop    edi
c00065b8:	c3                   	ret    

c00065b9 <idleFunction(void*)>:
c00065b9:	83 ec 0c             	sub    esp,0xc
c00065bc:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c00065c1:	48                   	dec    eax
c00065c2:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c00065c7:	75 01                	jne    c00065ca <idleFunction(void*)+0x11>
c00065c9:	fb                   	sti    
c00065ca:	f4                   	hlt    
c00065cb:	e8 12 53 01 00       	call   c001b8e2 <idleCommon()>
c00065d0:	eb f8                	jmp    c00065ca <idleFunction(void*)+0x11>
c00065d2:	66 90                	xchg   ax,ax

c00065d4 <IDTEntry::IDTEntry(bool)>:
c00065d4:	83 ec 04             	sub    esp,0x4
c00065d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00065db:	88 04 24             	mov    BYTE PTR [esp],al
c00065de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00065e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ec:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00065f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00065f7:	83 e2 f0             	and    edx,0xfffffff0
c00065fa:	83 ca 0e             	or     edx,0xe
c00065fd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006600:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006604:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0006607:	83 e2 ef             	and    edx,0xffffffef
c000660a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000660d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0006611:	74 05                	je     c0006618 <IDTEntry::IDTEntry(bool)+0x44>
c0006613:	b2 03                	mov    dl,0x3
c0006615:	eb 05                	jmp    c000661c <IDTEntry::IDTEntry(bool)+0x48>
c0006617:	90                   	nop
c0006618:	b2 00                	mov    dl,0x0
c000661a:	66 90                	xchg   ax,ax
c000661c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006620:	83 e2 03             	and    edx,0x3
c0006623:	88 d1                	mov    cl,dl
c0006625:	c1 e1 05             	shl    ecx,0x5
c0006628:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000662b:	83 e2 9f             	and    edx,0xffffff9f
c000662e:	09 ca                	or     edx,ecx
c0006630:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006633:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006637:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000663a:	83 ca 80             	or     edx,0xffffff80
c000663d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006640:	90                   	nop
c0006641:	83 c4 04             	add    esp,0x4
c0006644:	c3                   	ret    
c0006645:	90                   	nop

c0006646 <IDTEntry::setOffset(unsigned int)>:
c0006646:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000664a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664e:	66 89 02             	mov    WORD PTR [edx],ax
c0006651:	c1 e8 10             	shr    eax,0x10
c0006654:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0006658:	c3                   	ret    
c0006659:	90                   	nop
c000665a:	66 90                	xchg   ax,ax

c000665c <IDT::IDT()>:
c000665c:	90                   	nop
c000665d:	c3                   	ret    

c000665e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000665e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006662:	83 c0 30             	add    eax,0x30
c0006665:	c3                   	ret    

c0006666 <IDT::addEntry(IDTEntry, int)>:
c0006666:	53                   	push   ebx
c0006667:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000666b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000666f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006673:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006677:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000667a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000667e:	5b                   	pop    ebx
c000667f:	c3                   	ret    

c0006680 <IDT::addEntry(int, void (*)(), bool)>:
c0006680:	53                   	push   ebx
c0006681:	83 ec 10             	sub    esp,0x10
c0006684:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0006689:	50                   	push   eax
c000668a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000668e:	53                   	push   ebx
c000668f:	e8 40 ff ff ff       	call   c00065d4 <IDTEntry::IDTEntry(bool)>
c0006694:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0006698:	53                   	push   ebx
c0006699:	e8 a8 ff ff ff       	call   c0006646 <IDTEntry::setOffset(unsigned int)>
c000669e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00066a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00066a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00066aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00066ae:	e8 b3 ff ff ff       	call   c0006666 <IDT::addEntry(IDTEntry, int)>
c00066b3:	83 c4 30             	add    esp,0x30
c00066b6:	5b                   	pop    ebx
c00066b7:	c3                   	ret    

c00066b8 <IDT::flush()>:
c00066b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00066bc:	66 c7 05 38 f4 01 c0 ff 07 	mov    WORD PTR ds:0xc001f438,0x7ff
c00066c5:	a3 3a f4 01 c0       	mov    ds:0xc001f43a,eax
c00066ca:	0f 01 1d 38 f4 01 c0 	lidtd  ds:0xc001f438
c00066d1:	c3                   	ret    

c00066d2 <IDT::setup()>:
c00066d2:	57                   	push   edi
c00066d3:	56                   	push   esi
c00066d4:	53                   	push   ebx
c00066d5:	83 ec 10             	sub    esp,0x10
c00066d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066dc:	6a 00                	push   0x0
c00066de:	68 f0 b0 01 c0       	push   0xc001b0f0
c00066e3:	6a 00                	push   0x0
c00066e5:	53                   	push   ebx
c00066e6:	e8 95 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00066eb:	6a 00                	push   0x0
c00066ed:	68 00 b1 01 c0       	push   0xc001b100
c00066f2:	6a 01                	push   0x1
c00066f4:	53                   	push   ebx
c00066f5:	e8 86 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00066fa:	83 c4 20             	add    esp,0x20
c00066fd:	6a 00                	push   0x0
c00066ff:	68 0a b1 01 c0       	push   0xc001b10a
c0006704:	6a 02                	push   0x2
c0006706:	53                   	push   ebx
c0006707:	e8 74 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000670c:	6a 00                	push   0x0
c000670e:	68 14 b1 01 c0       	push   0xc001b114
c0006713:	6a 03                	push   0x3
c0006715:	53                   	push   ebx
c0006716:	e8 65 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000671b:	83 c4 20             	add    esp,0x20
c000671e:	6a 00                	push   0x0
c0006720:	68 1e b1 01 c0       	push   0xc001b11e
c0006725:	6a 04                	push   0x4
c0006727:	53                   	push   ebx
c0006728:	e8 53 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000672d:	6a 00                	push   0x0
c000672f:	68 28 b1 01 c0       	push   0xc001b128
c0006734:	6a 05                	push   0x5
c0006736:	53                   	push   ebx
c0006737:	e8 44 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000673c:	83 c4 20             	add    esp,0x20
c000673f:	6a 00                	push   0x0
c0006741:	68 32 b1 01 c0       	push   0xc001b132
c0006746:	6a 06                	push   0x6
c0006748:	53                   	push   ebx
c0006749:	e8 32 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000674e:	6a 00                	push   0x0
c0006750:	68 3c b1 01 c0       	push   0xc001b13c
c0006755:	6a 07                	push   0x7
c0006757:	53                   	push   ebx
c0006758:	e8 23 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000675d:	83 c4 20             	add    esp,0x20
c0006760:	6a 00                	push   0x0
c0006762:	68 46 b1 01 c0       	push   0xc001b146
c0006767:	6a 08                	push   0x8
c0006769:	53                   	push   ebx
c000676a:	e8 11 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000676f:	6a 00                	push   0x0
c0006771:	68 4e b1 01 c0       	push   0xc001b14e
c0006776:	6a 09                	push   0x9
c0006778:	53                   	push   ebx
c0006779:	e8 02 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000677e:	83 c4 20             	add    esp,0x20
c0006781:	6a 00                	push   0x0
c0006783:	68 58 b1 01 c0       	push   0xc001b158
c0006788:	6a 0a                	push   0xa
c000678a:	53                   	push   ebx
c000678b:	e8 f0 fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006790:	6a 00                	push   0x0
c0006792:	68 60 b1 01 c0       	push   0xc001b160
c0006797:	6a 0b                	push   0xb
c0006799:	53                   	push   ebx
c000679a:	e8 e1 fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000679f:	83 c4 20             	add    esp,0x20
c00067a2:	6a 00                	push   0x0
c00067a4:	68 68 b1 01 c0       	push   0xc001b168
c00067a9:	6a 0c                	push   0xc
c00067ab:	53                   	push   ebx
c00067ac:	e8 cf fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067b1:	6a 00                	push   0x0
c00067b3:	68 70 b1 01 c0       	push   0xc001b170
c00067b8:	6a 0d                	push   0xd
c00067ba:	53                   	push   ebx
c00067bb:	e8 c0 fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067c0:	83 c4 20             	add    esp,0x20
c00067c3:	6a 00                	push   0x0
c00067c5:	68 78 b1 01 c0       	push   0xc001b178
c00067ca:	6a 0e                	push   0xe
c00067cc:	53                   	push   ebx
c00067cd:	e8 ae fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067d2:	6a 00                	push   0x0
c00067d4:	68 80 b1 01 c0       	push   0xc001b180
c00067d9:	6a 0f                	push   0xf
c00067db:	53                   	push   ebx
c00067dc:	e8 9f fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067e1:	83 c4 20             	add    esp,0x20
c00067e4:	6a 00                	push   0x0
c00067e6:	68 8a b1 01 c0       	push   0xc001b18a
c00067eb:	6a 10                	push   0x10
c00067ed:	53                   	push   ebx
c00067ee:	e8 8d fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067f3:	6a 00                	push   0x0
c00067f5:	68 94 b1 01 c0       	push   0xc001b194
c00067fa:	6a 11                	push   0x11
c00067fc:	53                   	push   ebx
c00067fd:	e8 7e fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006802:	83 c4 20             	add    esp,0x20
c0006805:	6a 00                	push   0x0
c0006807:	68 9e b1 01 c0       	push   0xc001b19e
c000680c:	6a 12                	push   0x12
c000680e:	53                   	push   ebx
c000680f:	e8 6c fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006814:	6a 01                	push   0x1
c0006816:	68 38 b2 01 c0       	push   0xc001b238
c000681b:	6a 60                	push   0x60
c000681d:	53                   	push   ebx
c000681e:	e8 5d fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006823:	83 c4 20             	add    esp,0x20
c0006826:	6a 00                	push   0x0
c0006828:	68 3f b2 01 c0       	push   0xc001b23f
c000682d:	6a 20                	push   0x20
c000682f:	53                   	push   ebx
c0006830:	e8 4b fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006835:	6a 00                	push   0x0
c0006837:	68 2a b2 01 c0       	push   0xc001b22a
c000683c:	6a 21                	push   0x21
c000683e:	53                   	push   ebx
c000683f:	e8 3c fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006844:	83 c4 20             	add    esp,0x20
c0006847:	6a 00                	push   0x0
c0006849:	68 31 b2 01 c0       	push   0xc001b231
c000684e:	6a 22                	push   0x22
c0006850:	53                   	push   ebx
c0006851:	e8 2a fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006856:	6a 00                	push   0x0
c0006858:	68 a8 b1 01 c0       	push   0xc001b1a8
c000685d:	6a 23                	push   0x23
c000685f:	53                   	push   ebx
c0006860:	e8 1b fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006865:	83 c4 20             	add    esp,0x20
c0006868:	6a 00                	push   0x0
c000686a:	68 b2 b1 01 c0       	push   0xc001b1b2
c000686f:	6a 24                	push   0x24
c0006871:	53                   	push   ebx
c0006872:	e8 09 fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006877:	6a 00                	push   0x0
c0006879:	68 bc b1 01 c0       	push   0xc001b1bc
c000687e:	6a 25                	push   0x25
c0006880:	53                   	push   ebx
c0006881:	e8 fa fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006886:	83 c4 20             	add    esp,0x20
c0006889:	6a 00                	push   0x0
c000688b:	68 c6 b1 01 c0       	push   0xc001b1c6
c0006890:	6a 26                	push   0x26
c0006892:	53                   	push   ebx
c0006893:	e8 e8 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006898:	6a 00                	push   0x0
c000689a:	68 d0 b1 01 c0       	push   0xc001b1d0
c000689f:	6a 27                	push   0x27
c00068a1:	53                   	push   ebx
c00068a2:	e8 d9 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068a7:	83 c4 20             	add    esp,0x20
c00068aa:	6a 00                	push   0x0
c00068ac:	68 da b1 01 c0       	push   0xc001b1da
c00068b1:	6a 28                	push   0x28
c00068b3:	53                   	push   ebx
c00068b4:	e8 c7 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068b9:	6a 00                	push   0x0
c00068bb:	68 e4 b1 01 c0       	push   0xc001b1e4
c00068c0:	6a 29                	push   0x29
c00068c2:	53                   	push   ebx
c00068c3:	e8 b8 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068c8:	83 c4 20             	add    esp,0x20
c00068cb:	6a 00                	push   0x0
c00068cd:	68 ee b1 01 c0       	push   0xc001b1ee
c00068d2:	6a 2a                	push   0x2a
c00068d4:	53                   	push   ebx
c00068d5:	e8 a6 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068da:	6a 00                	push   0x0
c00068dc:	68 f8 b1 01 c0       	push   0xc001b1f8
c00068e1:	6a 2b                	push   0x2b
c00068e3:	53                   	push   ebx
c00068e4:	e8 97 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068e9:	83 c4 20             	add    esp,0x20
c00068ec:	6a 00                	push   0x0
c00068ee:	68 02 b2 01 c0       	push   0xc001b202
c00068f3:	6a 2c                	push   0x2c
c00068f5:	53                   	push   ebx
c00068f6:	e8 85 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068fb:	6a 00                	push   0x0
c00068fd:	68 0c b2 01 c0       	push   0xc001b20c
c0006902:	6a 2d                	push   0x2d
c0006904:	53                   	push   ebx
c0006905:	e8 76 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000690a:	83 c4 20             	add    esp,0x20
c000690d:	6a 00                	push   0x0
c000690f:	68 16 b2 01 c0       	push   0xc001b216
c0006914:	6a 2e                	push   0x2e
c0006916:	53                   	push   ebx
c0006917:	e8 64 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000691c:	6a 00                	push   0x0
c000691e:	68 20 b2 01 c0       	push   0xc001b220
c0006923:	6a 2f                	push   0x2f
c0006925:	53                   	push   ebx
c0006926:	e8 55 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000692b:	83 c4 20             	add    esp,0x20
c000692e:	6a 00                	push   0x0
c0006930:	68 76 b2 01 c0       	push   0xc001b276
c0006935:	6a 30                	push   0x30
c0006937:	53                   	push   ebx
c0006938:	e8 43 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000693d:	6a 00                	push   0x0
c000693f:	68 80 b2 01 c0       	push   0xc001b280
c0006944:	6a 31                	push   0x31
c0006946:	53                   	push   ebx
c0006947:	e8 34 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000694c:	83 c4 20             	add    esp,0x20
c000694f:	6a 00                	push   0x0
c0006951:	68 8a b2 01 c0       	push   0xc001b28a
c0006956:	6a 32                	push   0x32
c0006958:	53                   	push   ebx
c0006959:	e8 22 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000695e:	6a 00                	push   0x0
c0006960:	68 94 b2 01 c0       	push   0xc001b294
c0006965:	6a 33                	push   0x33
c0006967:	53                   	push   ebx
c0006968:	e8 13 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000696d:	83 c4 20             	add    esp,0x20
c0006970:	6a 00                	push   0x0
c0006972:	68 9e b2 01 c0       	push   0xc001b29e
c0006977:	6a 34                	push   0x34
c0006979:	53                   	push   ebx
c000697a:	e8 01 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000697f:	6a 00                	push   0x0
c0006981:	68 a8 b2 01 c0       	push   0xc001b2a8
c0006986:	6a 35                	push   0x35
c0006988:	53                   	push   ebx
c0006989:	e8 f2 fc ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000698e:	83 c4 20             	add    esp,0x20
c0006991:	6a 00                	push   0x0
c0006993:	68 b2 b2 01 c0       	push   0xc001b2b2
c0006998:	6a 36                	push   0x36
c000699a:	53                   	push   ebx
c000699b:	e8 e0 fc ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00069a0:	6a 00                	push   0x0
c00069a2:	68 bc b2 01 c0       	push   0xc001b2bc
c00069a7:	6a 37                	push   0x37
c00069a9:	53                   	push   ebx
c00069aa:	e8 d1 fc ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00069af:	83 c4 1c             	add    esp,0x1c
c00069b2:	6a 03                	push   0x3
c00069b4:	6a 02                	push   0x2
c00069b6:	ff 35 10 f5 01 c0    	push   DWORD PTR ds:0xc001f510
c00069bc:	e8 75 24 00 00       	call   c0008e36 <VAS::allocatePages(int, int)>
c00069c1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00069c8:	89 c6                	mov    esi,eax
c00069ca:	e8 92 01 00 00       	call   c0006b61 <malloc>
c00069cf:	81 c6 00 20 00 00    	add    esi,0x2000
c00069d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00069d8:	89 c7                	mov    edi,eax
c00069da:	e8 01 16 00 00       	call   c0007fe0 <TSS::TSS()>
c00069df:	83 c4 0c             	add    esp,0xc
c00069e2:	68 46 b1 01 c0       	push   0xc001b146
c00069e7:	56                   	push   esi
c00069e8:	57                   	push   edi
c00069e9:	e8 36 16 00 00       	call   c0008024 <TSS::setup(unsigned long, unsigned long)>
c00069ee:	89 c6                	mov    esi,eax
c00069f0:	58                   	pop    eax
c00069f1:	5a                   	pop    edx
c00069f2:	6a 00                	push   0x0
c00069f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069f8:	50                   	push   eax
c00069f9:	e8 d6 fb ff ff       	call   c00065d4 <IDTEntry::IDTEntry(bool)>
c00069fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006a02:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0006a07:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0006a0e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0006a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006a18:	80 ce 05             	or     dh,0x5
c0006a1b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0006a1e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006a22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006a26:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0006a29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a2c:	e8 87 fc ff ff       	call   c00066b8 <IDT::flush()>
c0006a31:	83 c4 20             	add    esp,0x20
c0006a34:	5b                   	pop    ebx
c0006a35:	5e                   	pop    esi
c0006a36:	5f                   	pop    edi
c0006a37:	c3                   	ret    

c0006a38 <sbrk>:
c0006a38:	55                   	push   ebp
c0006a39:	57                   	push   edi
c0006a3a:	56                   	push   esi
c0006a3b:	53                   	push   ebx
c0006a3c:	83 ec 1c             	sub    esp,0x1c
c0006a3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006a43:	85 c0                	test   eax,eax
c0006a45:	74 5f                	je     c0006aa6 <sbrk+0x6e>
c0006a47:	78 64                	js     c0006aad <sbrk+0x75>
c0006a49:	8b 15 f0 eb 01 c0    	mov    edx,DWORD PTR ds:0xc001ebf0
c0006a4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006a53:	05 ff 0f 00 00       	add    eax,0xfff
c0006a58:	89 c5                	mov    ebp,eax
c0006a5a:	78 69                	js     c0006ac5 <sbrk+0x8d>
c0006a5c:	c1 fd 0c             	sar    ebp,0xc
c0006a5f:	bb 00 00 00 00       	mov    ebx,0x0
c0006a64:	8b 35 10 f5 01 c0    	mov    esi,DWORD PTR ds:0xc001f510
c0006a6a:	8b 3d f0 eb 01 c0    	mov    edi,DWORD PTR ds:0xc001ebf0
c0006a70:	e8 b9 04 00 00       	call   c0006f2e <Phys::allocatePage()>
c0006a75:	68 01 04 00 00       	push   0x401
c0006a7a:	57                   	push   edi
c0006a7b:	50                   	push   eax
c0006a7c:	56                   	push   esi
c0006a7d:	e8 b0 22 00 00       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0006a82:	81 05 f0 eb 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001ebf0,0x1000
c0006a8c:	43                   	inc    ebx
c0006a8d:	83 c4 10             	add    esp,0x10
c0006a90:	39 dd                	cmp    ebp,ebx
c0006a92:	75 d0                	jne    c0006a64 <sbrk+0x2c>
c0006a94:	0f 20 d8             	mov    eax,cr3
c0006a97:	0f 22 d8             	mov    cr3,eax
c0006a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a9e:	83 c4 1c             	add    esp,0x1c
c0006aa1:	5b                   	pop    ebx
c0006aa2:	5e                   	pop    esi
c0006aa3:	5f                   	pop    edi
c0006aa4:	5d                   	pop    ebp
c0006aa5:	c3                   	ret    
c0006aa6:	a1 f0 eb 01 c0       	mov    eax,ds:0xc001ebf0
c0006aab:	eb f1                	jmp    c0006a9e <sbrk+0x66>
c0006aad:	83 ec 08             	sub    esp,0x8
c0006ab0:	50                   	push   eax
c0006ab1:	68 b4 cb 01 c0       	push   0xc001cbb4
c0006ab6:	e8 35 2e 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0006abb:	83 c4 10             	add    esp,0x10
c0006abe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006ac3:	eb d9                	jmp    c0006a9e <sbrk+0x66>
c0006ac5:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0006acb:	eb 8f                	jmp    c0006a5c <sbrk+0x24>

c0006acd <mmap>:
c0006acd:	83 ec 18             	sub    esp,0x18
c0006ad0:	68 e4 cb 01 c0       	push   0xc001cbe4
c0006ad5:	e8 65 89 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0006ada:	b8 00 00 00 00       	mov    eax,0x0
c0006adf:	83 c4 1c             	add    esp,0x1c
c0006ae2:	c3                   	ret    

c0006ae3 <munmap>:
c0006ae3:	83 ec 18             	sub    esp,0x18
c0006ae6:	68 e9 cb 01 c0       	push   0xc001cbe9
c0006aeb:	e8 4f 89 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0006af0:	b8 00 00 00 00       	mov    eax,0x0
c0006af5:	83 c4 1c             	add    esp,0x1c
c0006af8:	c3                   	ret    

c0006af9 <liballoc_lock()>:
c0006af9:	fa                   	cli    
c0006afa:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0006b00:	b8 00 00 00 00       	mov    eax,0x0
c0006b05:	c3                   	ret    

c0006b06 <liballoc_unlock()>:
c0006b06:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0006b0b:	48                   	dec    eax
c0006b0c:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0006b11:	75 01                	jne    c0006b14 <liballoc_unlock()+0xe>
c0006b13:	fb                   	sti    
c0006b14:	b8 00 00 00 00       	mov    eax,0x0
c0006b19:	c3                   	ret    

c0006b1a <liballoc_alloc(int)>:
c0006b1a:	83 ec 10             	sub    esp,0x10
c0006b1d:	6a 01                	push   0x1
c0006b1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006b23:	ff 35 10 f5 01 c0    	push   DWORD PTR ds:0xc001f510
c0006b29:	e8 08 23 00 00       	call   c0008e36 <VAS::allocatePages(int, int)>
c0006b2e:	83 c4 1c             	add    esp,0x1c
c0006b31:	c3                   	ret    

c0006b32 <liballoc_free(void*, int)>:
c0006b32:	83 ec 14             	sub    esp,0x14
c0006b35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006b39:	ff 35 10 f5 01 c0    	push   DWORD PTR ds:0xc001f510
c0006b3f:	e8 ae 1f 00 00       	call   c0008af2 <VAS::freeAllocatedPages(unsigned long)>
c0006b44:	b8 00 00 00 00       	mov    eax,0x0
c0006b49:	83 c4 1c             	add    esp,0x1c
c0006b4c:	c3                   	ret    

c0006b4d <realloc>:
c0006b4d:	83 ec 14             	sub    esp,0x14
c0006b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b58:	e8 f4 a9 ff ff       	call   c0001551 <dlrealloc>
c0006b5d:	83 c4 1c             	add    esp,0x1c
c0006b60:	c3                   	ret    

c0006b61 <malloc>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b68:	e8 a7 a4 ff ff       	call   c0001014 <dlmalloc>
c0006b6d:	83 c4 1c             	add    esp,0x1c
c0006b70:	c3                   	ret    

c0006b71 <free>:
c0006b71:	83 ec 18             	sub    esp,0x18
c0006b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b78:	e8 3c a1 ff ff       	call   c0000cb9 <dlfree>
c0006b7d:	83 c4 1c             	add    esp,0x1c
c0006b80:	c3                   	ret    

c0006b81 <rfree>:
c0006b81:	83 ec 18             	sub    esp,0x18
c0006b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b88:	e8 2c a1 ff ff       	call   c0000cb9 <dlfree>
c0006b8d:	83 c4 1c             	add    esp,0x1c
c0006b90:	c3                   	ret    

c0006b91 <calloc>:
c0006b91:	56                   	push   esi
c0006b92:	53                   	push   ebx
c0006b93:	83 ec 10             	sub    esp,0x10
c0006b96:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006b9a:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0006b9f:	53                   	push   ebx
c0006ba0:	e8 bc ff ff ff       	call   c0006b61 <malloc>
c0006ba5:	89 c6                	mov    esi,eax
c0006ba7:	83 c4 0c             	add    esp,0xc
c0006baa:	53                   	push   ebx
c0006bab:	6a 00                	push   0x0
c0006bad:	50                   	push   eax
c0006bae:	e8 3d 99 ff ff       	call   c00004f0 <memset>
c0006bb3:	89 f0                	mov    eax,esi
c0006bb5:	83 c4 14             	add    esp,0x14
c0006bb8:	5b                   	pop    ebx
c0006bb9:	5e                   	pop    esi
c0006bba:	c3                   	ret    

c0006bbb <Krnl::setBootMessage(char const*)>:
c0006bbb:	57                   	push   edi
c0006bbc:	56                   	push   esi
c0006bbd:	53                   	push   ebx
c0006bbe:	81 ec a4 00 00 00    	sub    esp,0xa4
c0006bc4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0006bcb:	68 9e 00 00 00       	push   0x9e
c0006bd0:	6a 00                	push   0x0
c0006bd2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0006bd6:	56                   	push   esi
c0006bd7:	e8 14 99 ff ff       	call   c00004f0 <memset>
c0006bdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006bdf:	e8 7c 99 ff ff       	call   c0000560 <strlen>
c0006be4:	ba 50 00 00 00       	mov    edx,0x50
c0006be9:	83 c4 10             	add    esp,0x10
c0006bec:	29 c2                	sub    edx,eax
c0006bee:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0006bf2:	d1 ea                	shr    edx,1
c0006bf4:	84 c0                	test   al,al
c0006bf6:	74 19                	je     c0006c11 <Krnl::setBootMessage(char const*)+0x56>
c0006bf8:	01 d2                	add    edx,edx
c0006bfa:	43                   	inc    ebx
c0006bfb:	01 f2                	add    edx,esi
c0006bfd:	80 cc 0f             	or     ah,0xf
c0006c00:	83 c2 02             	add    edx,0x2
c0006c03:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0006c07:	43                   	inc    ebx
c0006c08:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0006c0d:	84 c0                	test   al,al
c0006c0f:	75 ec                	jne    c0006bfd <Krnl::setBootMessage(char const*)+0x42>
c0006c11:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0006c16:	b9 9e 00 00 00       	mov    ecx,0x9e
c0006c1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006c1d:	81 c4 a0 00 00 00    	add    esp,0xa0
c0006c23:	5b                   	pop    ebx
c0006c24:	5e                   	pop    esi
c0006c25:	5f                   	pop    edi
c0006c26:	c3                   	ret    

c0006c27 <kernel_main>:
c0006c27:	55                   	push   ebp
c0006c28:	57                   	push   edi
c0006c29:	bf f9 03 00 00       	mov    edi,0x3f9
c0006c2e:	56                   	push   esi
c0006c2f:	89 fa                	mov    edx,edi
c0006c31:	53                   	push   ebx
c0006c32:	31 f6                	xor    esi,esi
c0006c34:	83 ec 38             	sub    esp,0x38
c0006c37:	a1 00 05 00 00       	mov    eax,ds:0x500
c0006c3c:	a3 40 f4 01 c0       	mov    ds:0xc001f440,eax
c0006c41:	89 f0                	mov    eax,esi
c0006c43:	ee                   	out    dx,al
c0006c44:	bb fb 03 00 00       	mov    ebx,0x3fb
c0006c49:	b0 80                	mov    al,0x80
c0006c4b:	89 da                	mov    edx,ebx
c0006c4d:	ee                   	out    dx,al
c0006c4e:	b1 03                	mov    cl,0x3
c0006c50:	ba f8 03 00 00       	mov    edx,0x3f8
c0006c55:	88 c8                	mov    al,cl
c0006c57:	ee                   	out    dx,al
c0006c58:	89 f0                	mov    eax,esi
c0006c5a:	89 fa                	mov    edx,edi
c0006c5c:	ee                   	out    dx,al
c0006c5d:	88 c8                	mov    al,cl
c0006c5f:	89 da                	mov    edx,ebx
c0006c61:	ee                   	out    dx,al
c0006c62:	b0 c7                	mov    al,0xc7
c0006c64:	ba fa 03 00 00       	mov    edx,0x3fa
c0006c69:	ee                   	out    dx,al
c0006c6a:	b0 0b                	mov    al,0xb
c0006c6c:	ba fc 03 00 00       	mov    edx,0x3fc
c0006c71:	ee                   	out    dx,al
c0006c72:	68 f0 cb 01 c0       	push   0xc001cbf0
c0006c77:	e8 74 2c 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0006c7c:	0f be 05 00 ec 01 c0 	movsx  eax,BYTE PTR ds:0xc001ec00
c0006c83:	83 c4 10             	add    esp,0x10
c0006c86:	84 c0                	test   al,al
c0006c88:	74 5c                	je     c0006ce6 <kernel_main+0xbf>
c0006c8a:	31 db                	xor    ebx,ebx
c0006c8c:	bd 0a 00 00 00       	mov    ebp,0xa
c0006c91:	bf 05 00 00 00       	mov    edi,0x5
c0006c96:	31 f6                	xor    esi,esi
c0006c98:	eb 14                	jmp    c0006cae <kernel_main+0x87>
c0006c9a:	47                   	inc    edi
c0006c9b:	bd 0a 00 00 00       	mov    ebp,0xa
c0006ca0:	31 f6                	xor    esi,esi
c0006ca2:	43                   	inc    ebx
c0006ca3:	0f be 83 00 ec 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe1400]
c0006caa:	84 c0                	test   al,al
c0006cac:	74 38                	je     c0006ce6 <kernel_main+0xbf>
c0006cae:	80 be 36 ec 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe13ca],0xdb
c0006cb5:	0f 84 97 00 00 00    	je     c0006d52 <kernel_main+0x12b>
c0006cbb:	3c 0d                	cmp    al,0xd
c0006cbd:	74 e3                	je     c0006ca2 <kernel_main+0x7b>
c0006cbf:	3c 0a                	cmp    al,0xa
c0006cc1:	74 d7                	je     c0006c9a <kernel_main+0x73>
c0006cc3:	83 ec 0c             	sub    esp,0xc
c0006cc6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0006cca:	57                   	push   edi
c0006ccb:	43                   	inc    ebx
c0006ccc:	52                   	push   edx
c0006ccd:	46                   	inc    esi
c0006cce:	6a 00                	push   0x0
c0006cd0:	6a 0e                	push   0xe
c0006cd2:	50                   	push   eax
c0006cd3:	e8 e4 e5 00 00       	call   c00152bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0006cd8:	83 c4 20             	add    esp,0x20
c0006cdb:	0f be 83 00 ec 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe1400]
c0006ce2:	84 c0                	test   al,al
c0006ce4:	75 c8                	jne    c0006cae <kernel_main+0x87>
c0006ce6:	83 ec 0c             	sub    esp,0xc
c0006ce9:	a1 24 05 00 00       	mov    eax,ds:0x524
c0006cee:	05 ff 0f 00 00       	add    eax,0xfff
c0006cf3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0006cf8:	50                   	push   eax
c0006cf9:	e8 82 03 00 00       	call   c0007080 <Phys::physicalMemorySetup(unsigned int)>
c0006cfe:	e8 59 1b 00 00       	call   c000885c <Virt::virtualMemorySetup()>
c0006d03:	58                   	pop    eax
c0006d04:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0006d08:	53                   	push   ebx
c0006d09:	e8 0a 1c 00 00       	call   c0008918 <VAS::VAS()>
c0006d0e:	89 1d 10 f5 01 c0    	mov    DWORD PTR ds:0xc001f510,ebx
c0006d14:	e8 07 93 ff ff       	call   c0000020 <callGlobalConstructors>
c0006d19:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0006d20:	e8 3c fe ff ff       	call   c0006b61 <malloc>
c0006d25:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d28:	89 c6                	mov    esi,eax
c0006d2a:	e8 6b f1 ff ff       	call   c0005e9a <Computer::Computer()>
c0006d2f:	6a 00                	push   0x0
c0006d31:	89 35 28 f4 01 c0    	mov    DWORD PTR ds:0xc001f428,esi
c0006d37:	6a 00                	push   0x0
c0006d39:	6a 00                	push   0x0
c0006d3b:	56                   	push   esi
c0006d3c:	e8 ff f4 ff ff       	call   c0006240 <Computer::open(int, int, void*)>
c0006d41:	83 c4 14             	add    esp,0x14
c0006d44:	53                   	push   ebx
c0006d45:	e8 84 1e 00 00       	call   c0008bce <VAS::~VAS()>
c0006d4a:	83 c4 3c             	add    esp,0x3c
c0006d4d:	5b                   	pop    ebx
c0006d4e:	5e                   	pop    esi
c0006d4f:	5f                   	pop    edi
c0006d50:	5d                   	pop    ebp
c0006d51:	c3                   	ret    
c0006d52:	31 d2                	xor    edx,edx
c0006d54:	8a 96 35 ec 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe13cb]
c0006d5a:	83 e2 fe             	and    edx,0xfffffffe
c0006d5d:	81 fa ba 00 00 00    	cmp    edx,0xba
c0006d63:	0f 85 52 ff ff ff    	jne    c0006cbb <kernel_main+0x94>
c0006d69:	45                   	inc    ebp
c0006d6a:	e9 4c ff ff ff       	jmp    c0006cbb <kernel_main+0x94>

c0006d6f <Phys::allocateDMA(unsigned long)>:
c0006d6f:	55                   	push   ebp
c0006d70:	31 ed                	xor    ebp,ebp
c0006d72:	57                   	push   edi
c0006d73:	56                   	push   esi
c0006d74:	53                   	push   ebx
c0006d75:	31 db                	xor    ebx,ebx
c0006d77:	83 ec 1c             	sub    esp,0x1c
c0006d7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006d7e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006d86:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0006d8c:	31 c0                	xor    eax,eax
c0006d8e:	c1 ef 0c             	shr    edi,0xc
c0006d91:	eb 19                	jmp    c0006dac <Phys::allocateDMA(unsigned long)+0x3d>
c0006d93:	85 c0                	test   eax,eax
c0006d95:	75 06                	jne    c0006d9d <Phys::allocateDMA(unsigned long)+0x2e>
c0006d97:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006d9b:	89 dd                	mov    ebp,ebx
c0006d9d:	8d 70 01             	lea    esi,[eax+0x1]
c0006da0:	39 f7                	cmp    edi,esi
c0006da2:	74 33                	je     c0006dd7 <Phys::allocateDMA(unsigned long)+0x68>
c0006da4:	89 f0                	mov    eax,esi
c0006da6:	43                   	inc    ebx
c0006da7:	83 fb 0f             	cmp    ebx,0xf
c0006daa:	7f 11                	jg     c0006dbd <Phys::allocateDMA(unsigned long)+0x4e>
c0006dac:	80 bb 5c f4 01 c0 00 	cmp    BYTE PTR [ebx-0x3ffe0ba4],0x0
c0006db3:	74 de                	je     c0006d93 <Phys::allocateDMA(unsigned long)+0x24>
c0006db5:	31 c0                	xor    eax,eax
c0006db7:	43                   	inc    ebx
c0006db8:	83 fb 0f             	cmp    ebx,0xf
c0006dbb:	7e ef                	jle    c0006dac <Phys::allocateDMA(unsigned long)+0x3d>
c0006dbd:	83 ec 0c             	sub    esp,0xc
c0006dc0:	68 08 cc 01 c0       	push   0xc001cc08
c0006dc5:	e8 75 86 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0006dca:	83 c4 10             	add    esp,0x10
c0006dcd:	31 c0                	xor    eax,eax
c0006dcf:	83 c4 1c             	add    esp,0x1c
c0006dd2:	5b                   	pop    ebx
c0006dd3:	5e                   	pop    esi
c0006dd4:	5f                   	pop    edi
c0006dd5:	5d                   	pop    ebp
c0006dd6:	c3                   	ret    
c0006dd7:	89 e9                	mov    ecx,ebp
c0006dd9:	c1 f9 04             	sar    ecx,0x4
c0006ddc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006de0:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0006de4:	89 ca                	mov    edx,ecx
c0006de6:	4a                   	dec    edx
c0006de7:	79 03                	jns    c0006dec <Phys::allocateDMA(unsigned long)+0x7d>
c0006de9:	8d 51 0e             	lea    edx,[ecx+0xe]
c0006dec:	c1 fa 04             	sar    edx,0x4
c0006def:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0006df3:	74 08                	je     c0006dfd <Phys::allocateDMA(unsigned long)+0x8e>
c0006df5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006df9:	31 c0                	xor    eax,eax
c0006dfb:	eb ba                	jmp    c0006db7 <Phys::allocateDMA(unsigned long)+0x48>
c0006dfd:	85 f6                	test   esi,esi
c0006dff:	74 15                	je     c0006e16 <Phys::allocateDMA(unsigned long)+0xa7>
c0006e01:	8d 95 5c f4 01 c0    	lea    edx,[ebp-0x3ffe0ba4]
c0006e07:	8d 84 05 5d f4 01 c0 	lea    eax,[ebp+eax*1-0x3ffe0ba3]
c0006e0e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0006e11:	42                   	inc    edx
c0006e12:	39 d0                	cmp    eax,edx
c0006e14:	75 f8                	jne    c0006e0e <Phys::allocateDMA(unsigned long)+0x9f>
c0006e16:	01 3d 54 f4 01 c0    	add    DWORD PTR ds:0xc001f454,edi
c0006e1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e20:	85 c0                	test   eax,eax
c0006e22:	74 17                	je     c0006e3b <Phys::allocateDMA(unsigned long)+0xcc>
c0006e24:	83 ec 0c             	sub    esp,0xc
c0006e27:	68 08 cc 01 c0       	push   0xc001cc08
c0006e2c:	e8 0e 86 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0006e31:	83 c4 10             	add    esp,0x10
c0006e34:	89 f0                	mov    eax,esi
c0006e36:	e9 6b ff ff ff       	jmp    c0006da6 <Phys::allocateDMA(unsigned long)+0x37>
c0006e3b:	c1 e5 0c             	shl    ebp,0xc
c0006e3e:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0006e44:	eb 89                	jmp    c0006dcf <Phys::allocateDMA(unsigned long)+0x60>

c0006e46 <Phys::freeDMA(unsigned long, unsigned long)>:
c0006e46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e4a:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0006e50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e54:	c1 ea 0c             	shr    edx,0xc
c0006e57:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0006e5c:	29 15 54 f4 01 c0    	sub    DWORD PTR ds:0xc001f454,edx
c0006e62:	c1 e8 0c             	shr    eax,0xc
c0006e65:	85 d2                	test   edx,edx
c0006e67:	74 0f                	je     c0006e78 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0006e69:	05 5c f4 01 c0       	add    eax,0xc001f45c
c0006e6e:	01 c2                	add    edx,eax
c0006e70:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e73:	40                   	inc    eax
c0006e74:	39 d0                	cmp    eax,edx
c0006e76:	75 f8                	jne    c0006e70 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0006e78:	c3                   	ret    

c0006e79 <Phys::setPageState(unsigned long, bool)>:
c0006e79:	56                   	push   esi
c0006e7a:	ba 01 00 00 00       	mov    edx,0x1
c0006e7f:	53                   	push   ebx
c0006e80:	8b 35 44 ed 01 c0    	mov    esi,DWORD PTR ds:0xc001ed44
c0006e86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006e8e:	89 c8                	mov    eax,ecx
c0006e90:	83 e1 07             	and    ecx,0x7
c0006e93:	c1 e8 03             	shr    eax,0x3
c0006e96:	d3 e3                	shl    ebx,cl
c0006e98:	01 c6                	add    esi,eax
c0006e9a:	d3 e2                	shl    edx,cl
c0006e9c:	f7 d2                	not    edx
c0006e9e:	20 16                	and    BYTE PTR [esi],dl
c0006ea0:	03 05 44 ed 01 c0    	add    eax,DWORD PTR ds:0xc001ed44
c0006ea6:	08 18                	or     BYTE PTR [eax],bl
c0006ea8:	5b                   	pop    ebx
c0006ea9:	5e                   	pop    esi
c0006eaa:	c3                   	ret    

c0006eab <Phys::getPageState(unsigned long)>:
c0006eab:	53                   	push   ebx
c0006eac:	8b 15 44 ed 01 c0    	mov    edx,DWORD PTR ds:0xc001ed44
c0006eb2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006eb6:	31 db                	xor    ebx,ebx
c0006eb8:	89 c8                	mov    eax,ecx
c0006eba:	83 e1 07             	and    ecx,0x7
c0006ebd:	c1 e8 03             	shr    eax,0x3
c0006ec0:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0006ec3:	89 d8                	mov    eax,ebx
c0006ec5:	5b                   	pop    ebx
c0006ec6:	d3 f8                	sar    eax,cl
c0006ec8:	83 e0 01             	and    eax,0x1
c0006ecb:	c3                   	ret    

c0006ecc <Phys::freePage(unsigned long)>:
c0006ecc:	53                   	push   ebx
c0006ecd:	83 ec 08             	sub    esp,0x8
c0006ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed4:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0006eda:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0006ee0:	76 3a                	jbe    c0006f1c <Phys::freePage(unsigned long)+0x50>
c0006ee2:	c1 e8 0c             	shr    eax,0xc
c0006ee5:	50                   	push   eax
c0006ee6:	89 c3                	mov    ebx,eax
c0006ee8:	e8 be ff ff ff       	call   c0006eab <Phys::getPageState(unsigned long)>
c0006eed:	5a                   	pop    edx
c0006eee:	84 c0                	test   al,al
c0006ef0:	74 19                	je     c0006f0b <Phys::freePage(unsigned long)+0x3f>
c0006ef2:	83 ec 08             	sub    esp,0x8
c0006ef5:	ff 0d 54 f4 01 c0    	dec    DWORD PTR ds:0xc001f454
c0006efb:	6a 00                	push   0x0
c0006efd:	53                   	push   ebx
c0006efe:	e8 76 ff ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0006f03:	83 c4 10             	add    esp,0x10
c0006f06:	83 c4 08             	add    esp,0x8
c0006f09:	5b                   	pop    ebx
c0006f0a:	c3                   	ret    
c0006f0b:	c7 44 24 10 ad cc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ccad
c0006f13:	83 c4 08             	add    esp,0x8
c0006f16:	5b                   	pop    ebx
c0006f17:	e9 23 85 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c0006f1c:	68 00 10 00 00       	push   0x1000
c0006f21:	50                   	push   eax
c0006f22:	e8 1f ff ff ff       	call   c0006e46 <Phys::freeDMA(unsigned long, unsigned long)>
c0006f27:	59                   	pop    ecx
c0006f28:	5b                   	pop    ebx
c0006f29:	83 c4 08             	add    esp,0x8
c0006f2c:	5b                   	pop    ebx
c0006f2d:	c3                   	ret    

c0006f2e <Phys::allocatePage()>:
c0006f2e:	56                   	push   esi
c0006f2f:	53                   	push   ebx
c0006f30:	83 ec 14             	sub    esp,0x14
c0006f33:	8b 35 48 f4 01 c0    	mov    esi,DWORD PTR ds:0xc001f448
c0006f39:	89 f3                	mov    ebx,esi
c0006f3b:	eb 0a                	jmp    c0006f47 <Phys::allocatePage()+0x19>
c0006f3d:	89 1d 48 f4 01 c0    	mov    DWORD PTR ds:0xc001f448,ebx
c0006f43:	39 de                	cmp    esi,ebx
c0006f45:	74 24                	je     c0006f6b <Phys::allocatePage()+0x3d>
c0006f47:	53                   	push   ebx
c0006f48:	e8 5e ff ff ff       	call   c0006eab <Phys::getPageState(unsigned long)>
c0006f4d:	5a                   	pop    edx
c0006f4e:	84 c0                	test   al,al
c0006f50:	74 5f                	je     c0006fb1 <Phys::allocatePage()+0x83>
c0006f52:	43                   	inc    ebx
c0006f53:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0006f59:	75 e2                	jne    c0006f3d <Phys::allocatePage()+0xf>
c0006f5b:	31 db                	xor    ebx,ebx
c0006f5d:	c7 05 48 f4 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f448,0x0
c0006f67:	39 de                	cmp    esi,ebx
c0006f69:	75 dc                	jne    c0006f47 <Phys::allocatePage()+0x19>
c0006f6b:	83 ec 0c             	sub    esp,0xc
c0006f6e:	80 35 6c f4 01 c0 01 	xor    BYTE PTR ds:0xc001f46c,0x1
c0006f75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0006f7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006f7d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0006f83:	50                   	push   eax
c0006f84:	e8 87 26 00 00       	call   c0009610 <VAS::scanForEviction()>
c0006f89:	83 c4 10             	add    esp,0x10
c0006f8c:	85 c0                	test   eax,eax
c0006f8e:	75 3f                	jne    c0006fcf <Phys::allocatePage()+0xa1>
c0006f90:	83 ec 0c             	sub    esp,0xc
c0006f93:	68 30 cc 01 c0       	push   0xc001cc30
c0006f98:	e8 a2 84 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0006f9d:	83 c4 10             	add    esp,0x10
c0006fa0:	8b 1d 48 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f448
c0006fa6:	53                   	push   ebx
c0006fa7:	e8 ff fe ff ff       	call   c0006eab <Phys::getPageState(unsigned long)>
c0006fac:	5a                   	pop    edx
c0006fad:	84 c0                	test   al,al
c0006faf:	75 a1                	jne    c0006f52 <Phys::allocatePage()+0x24>
c0006fb1:	6a 01                	push   0x1
c0006fb3:	53                   	push   ebx
c0006fb4:	e8 c0 fe ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0006fb9:	a1 48 f4 01 c0       	mov    eax,ds:0xc001f448
c0006fbe:	5a                   	pop    edx
c0006fbf:	ff 05 54 f4 01 c0    	inc    DWORD PTR ds:0xc001f454
c0006fc5:	c1 e0 0c             	shl    eax,0xc
c0006fc8:	59                   	pop    ecx
c0006fc9:	83 c4 14             	add    esp,0x14
c0006fcc:	5b                   	pop    ebx
c0006fcd:	5e                   	pop    esi
c0006fce:	c3                   	ret    
c0006fcf:	83 ec 08             	sub    esp,0x8
c0006fd2:	89 c2                	mov    edx,eax
c0006fd4:	6a 01                	push   0x1
c0006fd6:	c1 ea 0c             	shr    edx,0xc
c0006fd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006fdd:	52                   	push   edx
c0006fde:	e8 96 fe ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0006fe3:	83 c4 10             	add    esp,0x10
c0006fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fea:	eb dd                	jmp    c0006fc9 <Phys::allocatePage()+0x9b>

c0006fec <Phys::allocateContiguousPages(int)>:
c0006fec:	57                   	push   edi
c0006fed:	56                   	push   esi
c0006fee:	53                   	push   ebx
c0006fef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006ff3:	fa                   	cli    
c0006ff4:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0006ffa:	31 db                	xor    ebx,ebx
c0006ffc:	85 db                	test   ebx,ebx
c0006ffe:	75 11                	jne    c0007011 <Phys::allocateContiguousPages(int)+0x25>
c0007000:	e8 29 ff ff ff       	call   c0006f2e <Phys::allocatePage()>
c0007005:	83 fe 01             	cmp    esi,0x1
c0007008:	89 c7                	mov    edi,eax
c000700a:	74 21                	je     c000702d <Phys::allocateContiguousPages(int)+0x41>
c000700c:	bb 01 00 00 00       	mov    ebx,0x1
c0007011:	e8 18 ff ff ff       	call   c0006f2e <Phys::allocatePage()>
c0007016:	89 da                	mov    edx,ebx
c0007018:	c1 e2 0c             	shl    edx,0xc
c000701b:	01 fa                	add    edx,edi
c000701d:	39 c2                	cmp    edx,eax
c000701f:	74 20                	je     c0007041 <Phys::allocateContiguousPages(int)+0x55>
c0007021:	bb 01 00 00 00       	mov    ebx,0x1
c0007026:	89 c7                	mov    edi,eax
c0007028:	83 fe 01             	cmp    esi,0x1
c000702b:	75 e4                	jne    c0007011 <Phys::allocateContiguousPages(int)+0x25>
c000702d:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0007032:	48                   	dec    eax
c0007033:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0007038:	75 01                	jne    c000703b <Phys::allocateContiguousPages(int)+0x4f>
c000703a:	fb                   	sti    
c000703b:	89 f8                	mov    eax,edi
c000703d:	5b                   	pop    ebx
c000703e:	5e                   	pop    esi
c000703f:	5f                   	pop    edi
c0007040:	c3                   	ret    
c0007041:	43                   	inc    ebx
c0007042:	39 f3                	cmp    ebx,esi
c0007044:	75 b6                	jne    c0006ffc <Phys::allocateContiguousPages(int)+0x10>
c0007046:	eb e5                	jmp    c000702d <Phys::allocateContiguousPages(int)+0x41>

c0007048 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007048:	56                   	push   esi
c0007049:	53                   	push   ebx
c000704a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000704e:	39 1d 4c f4 01 c0    	cmp    DWORD PTR ds:0xc001f44c,ebx
c0007054:	73 06                	jae    c000705c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007056:	89 1d 4c f4 01 c0    	mov    DWORD PTR ds:0xc001f44c,ebx
c000705c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007060:	c1 eb 0c             	shr    ebx,0xc
c0007063:	c1 e8 0c             	shr    eax,0xc
c0007066:	39 d8                	cmp    eax,ebx
c0007068:	73 13                	jae    c000707d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000706a:	6a 00                	push   0x0
c000706c:	8d 70 01             	lea    esi,[eax+0x1]
c000706f:	50                   	push   eax
c0007070:	e8 04 fe ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0007075:	5a                   	pop    edx
c0007076:	89 f0                	mov    eax,esi
c0007078:	59                   	pop    ecx
c0007079:	39 f3                	cmp    ebx,esi
c000707b:	75 ed                	jne    c000706a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000707d:	5b                   	pop    ebx
c000707e:	5e                   	pop    esi
c000707f:	c3                   	ret    

c0007080 <Phys::physicalMemorySetup(unsigned int)>:
c0007080:	55                   	push   ebp
c0007081:	57                   	push   edi
c0007082:	56                   	push   esi
c0007083:	53                   	push   ebx
c0007084:	31 db                	xor    ebx,ebx
c0007086:	83 ec 40             	sub    esp,0x40
c0007089:	6a 10                	push   0x10
c000708b:	6a 00                	push   0x0
c000708d:	68 5c f4 01 c0       	push   0xc001f45c
c0007092:	e8 59 94 ff ff       	call   c00004f0 <memset>
c0007097:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000709b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00070a0:	05 00 10 00 00       	add    eax,0x1000
c00070a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00070a9:	5a                   	pop    edx
c00070aa:	59                   	pop    ecx
c00070ab:	50                   	push   eax
c00070ac:	68 c3 cc 01 c0       	push   0xc001ccc3
c00070b1:	e8 3a 28 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00070b6:	83 c4 10             	add    esp,0x10
c00070b9:	83 ec 08             	sub    esp,0x8
c00070bc:	6a 01                	push   0x1
c00070be:	53                   	push   ebx
c00070bf:	43                   	inc    ebx
c00070c0:	e8 b4 fd ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c00070c5:	83 c4 10             	add    esp,0x10
c00070c8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00070ce:	75 e9                	jne    c00070b9 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00070d0:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00070d6:	66 85 c0             	test   ax,ax
c00070d9:	0f 84 97 01 00 00    	je     c0007276 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00070df:	89 c7                	mov    edi,eax
c00070e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00070e9:	81 e7 ff ff 00 00    	and    edi,0xffff
c00070ef:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00070f4:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00070f8:	eb 15                	jmp    c000710f <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00070fa:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00070fe:	83 c3 18             	add    ebx,0x18
c0007101:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007105:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007109:	0f 84 77 01 00 00    	je     c0007286 <Phys::physicalMemorySetup(unsigned int)+0x206>
c000710f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007112:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007115:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007118:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000711c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007120:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007122:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007125:	01 f0                	add    eax,esi
c0007127:	55                   	push   ebp
c0007128:	11 fa                	adc    edx,edi
c000712a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000712e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007132:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007136:	50                   	push   eax
c0007137:	56                   	push   esi
c0007138:	68 60 cc 01 c0       	push   0xc001cc60
c000713d:	e8 ae 27 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0007142:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007146:	83 c4 10             	add    esp,0x10
c0007149:	09 f8                	or     eax,edi
c000714b:	0f 85 35 01 00 00    	jne    c0007286 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007151:	4d                   	dec    ebp
c0007152:	75 a6                	jne    c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007154:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007158:	ba 00 00 08 00       	mov    edx,0x80000
c000715d:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007161:	39 f2                	cmp    edx,esi
c0007163:	89 c1                	mov    ecx,eax
c0007165:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000716d:	19 f9                	sbb    ecx,edi
c000716f:	0f 82 a7 00 00 00    	jb     c000721c <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007175:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007179:	89 c1                	mov    ecx,eax
c000717b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000717f:	0f 83 97 00 00 00    	jae    c000721c <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007185:	ba 00 00 0a 00       	mov    edx,0xa0000
c000718a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000718e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007192:	39 fa                	cmp    edx,edi
c0007194:	19 e8                	sbb    eax,ebp
c0007196:	0f 82 9a 01 00 00    	jb     c0007336 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c000719c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00071a0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00071a4:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00071aa:	ba ff 1f 00 00       	mov    edx,0x1fff
c00071af:	83 d5 ff             	adc    ebp,0xffffffff
c00071b2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00071b6:	31 c0                	xor    eax,eax
c00071b8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00071bc:	39 fa                	cmp    edx,edi
c00071be:	89 c1                	mov    ecx,eax
c00071c0:	19 e9                	sbb    ecx,ebp
c00071c2:	0f 83 32 ff ff ff    	jae    c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00071c8:	be 00 00 08 00       	mov    esi,0x80000
c00071cd:	51                   	push   ecx
c00071ce:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00071d2:	57                   	push   edi
c00071d3:	56                   	push   esi
c00071d4:	68 84 cc 01 c0       	push   0xc001cc84
c00071d9:	e8 12 27 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00071de:	5d                   	pop    ebp
c00071df:	58                   	pop    eax
c00071e0:	57                   	push   edi
c00071e1:	56                   	push   esi
c00071e2:	e8 61 fe ff ff       	call   c0007048 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00071e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00071eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00071f6:	03 05 58 f4 01 c0    	add    eax,DWORD PTR ds:0xc001f458
c00071fc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007203:	a3 58 f4 01 c0       	mov    ds:0xc001f458,eax
c0007208:	52                   	push   edx
c0007209:	50                   	push   eax
c000720a:	68 e9 cc 01 c0       	push   0xc001cce9
c000720f:	e8 dc 26 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0007214:	83 c4 10             	add    esp,0x10
c0007217:	e9 de fe ff ff       	jmp    c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000721c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007220:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007224:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007228:	39 ea                	cmp    edx,ebp
c000722a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000722e:	0f 82 c6 fe ff ff    	jb     c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007234:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007239:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000723d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007241:	0f 83 b3 fe ff ff    	jae    c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007247:	39 ee                	cmp    esi,ebp
c0007249:	89 f8                	mov    eax,edi
c000724b:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000724f:	0f 83 78 ff ff ff    	jae    c00071cd <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007255:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007259:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000725d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007261:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007265:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007269:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000726d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007271:	e9 57 ff ff ff       	jmp    c00071cd <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007276:	83 ec 0c             	sub    esp,0xc
c0007279:	68 db cc 01 c0       	push   0xc001ccdb
c000727e:	e8 bc 81 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0007283:	83 c4 10             	add    esp,0x10
c0007286:	83 ec 08             	sub    esp,0x8
c0007289:	bb 60 00 00 00       	mov    ebx,0x60
c000728e:	6a 00                	push   0x0
c0007290:	6a 06                	push   0x6
c0007292:	e8 e2 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0007297:	58                   	pop    eax
c0007298:	5a                   	pop    edx
c0007299:	6a 00                	push   0x0
c000729b:	6a 07                	push   0x7
c000729d:	e8 d7 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c00072a2:	83 05 58 f4 01 c0 02 	add    DWORD PTR ds:0xc001f458,0x2
c00072a9:	83 c4 10             	add    esp,0x10
c00072ac:	83 ec 08             	sub    esp,0x8
c00072af:	6a 00                	push   0x0
c00072b1:	53                   	push   ebx
c00072b2:	43                   	inc    ebx
c00072b3:	e8 c1 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00072c1:	75 e9                	jne    c00072ac <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00072c3:	a1 58 f4 01 c0       	mov    eax,ds:0xc001f458
c00072c8:	bb 40 01 00 00       	mov    ebx,0x140
c00072cd:	83 c0 20             	add    eax,0x20
c00072d0:	a3 58 f4 01 c0       	mov    ds:0xc001f458,eax
c00072d5:	eb 22                	jmp    c00072f9 <Phys::physicalMemorySetup(unsigned int)+0x279>
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	6a 00                	push   0x0
c00072dc:	53                   	push   ebx
c00072dd:	43                   	inc    ebx
c00072de:	e8 96 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c00072e3:	a1 58 f4 01 c0       	mov    eax,ds:0xc001f458
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	40                   	inc    eax
c00072ec:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00072f2:	a3 58 f4 01 c0       	mov    ds:0xc001f458,eax
c00072f7:	74 07                	je     c0007300 <Phys::physicalMemorySetup(unsigned int)+0x280>
c00072f9:	3d ff 03 00 00       	cmp    eax,0x3ff
c00072fe:	7e d7                	jle    c00072d7 <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007300:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007305:	3d ff 07 00 00       	cmp    eax,0x7ff
c000730a:	7f 22                	jg     c000732e <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000730c:	83 ec 08             	sub    esp,0x8
c000730f:	6a 00                	push   0x0
c0007311:	53                   	push   ebx
c0007312:	43                   	inc    ebx
c0007313:	e8 61 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0007318:	a1 58 f4 01 c0       	mov    eax,ds:0xc001f458
c000731d:	83 c4 10             	add    esp,0x10
c0007320:	40                   	inc    eax
c0007321:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007327:	a3 58 f4 01 c0       	mov    ds:0xc001f458,eax
c000732c:	75 d7                	jne    c0007305 <Phys::physicalMemorySetup(unsigned int)+0x285>
c000732e:	83 c4 3c             	add    esp,0x3c
c0007331:	5b                   	pop    ebx
c0007332:	5e                   	pop    esi
c0007333:	5f                   	pop    edi
c0007334:	5d                   	pop    ebp
c0007335:	c3                   	ret    
c0007336:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000733e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007346:	e9 51 fe ff ff       	jmp    c000719c <Phys::physicalMemorySetup(unsigned int)+0x11c>
c000734b:	90                   	nop

c000734c <Pipe::isAtty()>:
c000734c:	31 c0                	xor    eax,eax
c000734e:	c3                   	ret    
c000734f:	90                   	nop

c0007350 <Pipe::~Pipe()>:
c0007350:	83 ec 0c             	sub    esp,0xc
c0007353:	ba 48 cd 01 c0       	mov    edx,0xc001cd48
c0007358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000735c:	89 10                	mov    DWORD PTR [eax],edx
c000735e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007362:	83 ec 0c             	sub    esp,0xc
c0007365:	50                   	push   eax
c0007366:	e8 d1 10 00 00       	call   c000843c <UnixFile::~UnixFile()>
c000736b:	83 c4 10             	add    esp,0x10
c000736e:	90                   	nop
c000736f:	83 c4 0c             	add    esp,0xc
c0007372:	c3                   	ret    
c0007373:	90                   	nop

c0007374 <Pipe::~Pipe()>:
c0007374:	83 ec 0c             	sub    esp,0xc
c0007377:	83 ec 0c             	sub    esp,0xc
c000737a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000737e:	e8 cd ff ff ff       	call   c0007350 <Pipe::~Pipe()>
c0007383:	83 c4 10             	add    esp,0x10
c0007386:	83 ec 08             	sub    esp,0x8
c0007389:	6a 20                	push   0x20
c000738b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000738f:	e8 66 24 00 00       	call   c00097fa <operator delete(void*, unsigned long)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	83 c4 0c             	add    esp,0xc
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <Pipe::write(unsigned long long, void*, int*)>:
c000739c:	55                   	push   ebp
c000739d:	57                   	push   edi
c000739e:	56                   	push   esi
c000739f:	53                   	push   ebx
c00073a0:	83 ec 1c             	sub    esp,0x1c
c00073a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00073a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00073ab:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00073ae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00073b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00073b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00073b9:	89 d8                	mov    eax,ebx
c00073bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00073be:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00073c2:	89 d6                	mov    esi,edx
c00073c4:	89 d7                	mov    edi,edx
c00073c6:	c1 ff 1f             	sar    edi,0x1f
c00073c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00073cc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00073d0:	c1 f8 1f             	sar    eax,0x1f
c00073d3:	39 f3                	cmp    ebx,esi
c00073d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00073d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00073dd:	19 f8                	sbb    eax,edi
c00073df:	b8 01 00 00 00       	mov    eax,0x1
c00073e4:	72 6e                	jb     c0007454 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00073e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00073e9:	01 d0                	add    eax,edx
c00073eb:	99                   	cdq    
c00073ec:	f7 fb                	idiv   ebx
c00073ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073f2:	29 d3                	sub    ebx,edx
c00073f4:	89 d7                	mov    edi,edx
c00073f6:	89 de                	mov    esi,ebx
c00073f8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00073fb:	c1 fb 1f             	sar    ebx,0x1f
c00073fe:	39 f2                	cmp    edx,esi
c0007400:	19 d8                	sbb    eax,ebx
c0007402:	b8 00 00 00 00       	mov    eax,0x0
c0007407:	72 04                	jb     c000740d <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007409:	89 d0                	mov    eax,edx
c000740b:	29 f0                	sub    eax,esi
c000740d:	89 d3                	mov    ebx,edx
c000740f:	29 c3                	sub    ebx,eax
c0007411:	74 0b                	je     c000741e <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007413:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007416:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000741a:	89 d9                	mov    ecx,ebx
c000741c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000741e:	85 c0                	test   eax,eax
c0007420:	74 0d                	je     c000742f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007422:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007426:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007429:	89 de                	mov    esi,ebx
c000742b:	89 c1                	mov    ecx,eax
c000742d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000742f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007432:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007437:	75 10                	jne    c0007449 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007439:	83 ec 0c             	sub    esp,0xc
c000743c:	68 05 cd 01 c0       	push   0xc001cd05
c0007441:	e8 f9 7f 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0007446:	83 c4 10             	add    esp,0x10
c0007449:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000744d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007450:	89 08                	mov    DWORD PTR [eax],ecx
c0007452:	31 c0                	xor    eax,eax
c0007454:	83 c4 1c             	add    esp,0x1c
c0007457:	5b                   	pop    ebx
c0007458:	5e                   	pop    esi
c0007459:	5f                   	pop    edi
c000745a:	5d                   	pop    ebp
c000745b:	c3                   	ret    

c000745c <Pipe::read(unsigned long long, void*, int*)>:
c000745c:	55                   	push   ebp
c000745d:	57                   	push   edi
c000745e:	56                   	push   esi
c000745f:	53                   	push   ebx
c0007460:	83 ec 1c             	sub    esp,0x1c
c0007463:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007467:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000746b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000746f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007472:	89 c8                	mov    eax,ecx
c0007474:	99                   	cdq    
c0007475:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007479:	74 24                	je     c000749f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000747b:	39 f9                	cmp    ecx,edi
c000747d:	89 d1                	mov    ecx,edx
c000747f:	19 f1                	sbb    ecx,esi
c0007481:	73 1c                	jae    c000749f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007483:	fa                   	cli    
c0007484:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c000748a:	e8 25 b4 00 00       	call   c00128b4 <schedule()>
c000748f:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0007494:	48                   	dec    eax
c0007495:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c000749a:	75 d3                	jne    c000746f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000749c:	fb                   	sti    
c000749d:	eb d0                	jmp    c000746f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000749f:	39 f8                	cmp    eax,edi
c00074a1:	89 d1                	mov    ecx,edx
c00074a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00074a6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00074aa:	19 f1                	sbb    ecx,esi
c00074ac:	73 07                	jae    c00074b5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00074ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00074b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00074b5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00074b8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00074bb:	29 f7                	sub    edi,esi
c00074bd:	89 f8                	mov    eax,edi
c00074bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00074c3:	99                   	cdq    
c00074c4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00074c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00074cb:	19 d0                	sbb    eax,edx
c00074cd:	73 07                	jae    c00074d6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00074cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00074d6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00074d9:	89 ea                	mov    edx,ebp
c00074db:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00074df:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00074e4:	74 0d                	je     c00074f3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00074e6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00074e9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00074ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00074f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00074f3:	85 d2                	test   edx,edx
c00074f5:	74 11                	je     c0007508 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00074f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074fb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00074fe:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0007502:	89 d1                	mov    ecx,edx
c0007504:	89 c7                	mov    edi,eax
c0007506:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007508:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000750b:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000750e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0007511:	99                   	cdq    
c0007512:	89 f7                	mov    edi,esi
c0007514:	03 04 24             	add    eax,DWORD PTR [esp]
c0007517:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000751b:	c1 ff 1f             	sar    edi,0x1f
c000751e:	57                   	push   edi
c000751f:	56                   	push   esi
c0007520:	52                   	push   edx
c0007521:	50                   	push   eax
c0007522:	e8 39 42 01 00       	call   c001b760 <__umoddi3>
c0007527:	83 c4 10             	add    esp,0x10
c000752a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000752d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007532:	75 10                	jne    c0007544 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0007534:	83 ec 0c             	sub    esp,0xc
c0007537:	68 22 cd 01 c0       	push   0xc001cd22
c000753c:	e8 fe 7e 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0007541:	83 c4 10             	add    esp,0x10
c0007544:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007548:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000754b:	89 10                	mov    DWORD PTR [eax],edx
c000754d:	83 c4 1c             	add    esp,0x1c
c0007550:	31 c0                	xor    eax,eax
c0007552:	5b                   	pop    ebx
c0007553:	5e                   	pop    esi
c0007554:	5f                   	pop    edi
c0007555:	5d                   	pop    ebp
c0007556:	c3                   	ret    
c0007557:	90                   	nop

c0007558 <Pipe::Pipe(int)>:
c0007558:	83 ec 0c             	sub    esp,0xc
c000755b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000755f:	83 ec 08             	sub    esp,0x8
c0007562:	6a 00                	push   0x0
c0007564:	50                   	push   eax
c0007565:	e8 f0 0c 00 00       	call   c000825a <UnixFile::UnixFile(int)>
c000756a:	83 c4 10             	add    esp,0x10
c000756d:	ba 48 cd 01 c0       	mov    edx,0xc001cd48
c0007572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007576:	89 10                	mov    DWORD PTR [eax],edx
c0007578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000757c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007580:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007587:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000758e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007592:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0007599:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000759d:	83 ec 0c             	sub    esp,0xc
c00075a0:	50                   	push   eax
c00075a1:	e8 bb f5 ff ff       	call   c0006b61 <malloc>
c00075a6:	83 c4 10             	add    esp,0x10
c00075a9:	89 c2                	mov    edx,eax
c00075ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00075b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075b6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00075ba:	90                   	nop
c00075bb:	83 c4 0c             	add    esp,0xc
c00075be:	c3                   	ret    
c00075bf:	90                   	nop

c00075c0 <VgaText::isAtty()>:
c00075c0:	b0 01                	mov    al,0x1
c00075c2:	c3                   	ret    
c00075c3:	90                   	nop

c00075c4 <VgaText::~VgaText()>:
c00075c4:	83 ec 0c             	sub    esp,0xc
c00075c7:	ba d0 cd 01 c0       	mov    edx,0xc001cdd0
c00075cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075d0:	89 10                	mov    DWORD PTR [eax],edx
c00075d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075d6:	83 ec 0c             	sub    esp,0xc
c00075d9:	50                   	push   eax
c00075da:	e8 5d 0e 00 00       	call   c000843c <UnixFile::~UnixFile()>
c00075df:	83 c4 10             	add    esp,0x10
c00075e2:	90                   	nop
c00075e3:	83 c4 0c             	add    esp,0xc
c00075e6:	c3                   	ret    
c00075e7:	90                   	nop

c00075e8 <VgaText::~VgaText()>:
c00075e8:	83 ec 0c             	sub    esp,0xc
c00075eb:	83 ec 0c             	sub    esp,0xc
c00075ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00075f2:	e8 cd ff ff ff       	call   c00075c4 <VgaText::~VgaText()>
c00075f7:	83 c4 10             	add    esp,0x10
c00075fa:	83 ec 08             	sub    esp,0x8
c00075fd:	68 34 01 00 00       	push   0x134
c0007602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007606:	e8 ef 21 00 00       	call   c00097fa <operator delete(void*, unsigned long)>
c000760b:	83 c4 10             	add    esp,0x10
c000760e:	83 c4 0c             	add    esp,0xc
c0007611:	c3                   	ret    

c0007612 <VgaText::read(unsigned long long, void*, int*)>:
c0007612:	83 ec 10             	sub    esp,0x10
c0007615:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007619:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000761d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007621:	e8 24 45 00 00       	call   c000bb4a <readKeyboard(VgaText*, char*, unsigned long)>
c0007626:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000762a:	89 02                	mov    DWORD PTR [edx],eax
c000762c:	31 c0                	xor    eax,eax
c000762e:	83 c4 1c             	add    esp,0x1c
c0007631:	c3                   	ret    

c0007632 <setTerminalScrollLock(bool)>:
c0007632:	c3                   	ret    

c0007633 <doTerminalCycle()>:
c0007633:	c3                   	ret    

c0007634 <addToTerminalCycle(VgaText*)>:
c0007634:	c3                   	ret    

c0007635 <scrollTerminalScrollLock(int)>:
c0007635:	c3                   	ret    

c0007636 <VgaText::updateTitle()>:
c0007636:	c3                   	ret    
c0007637:	90                   	nop

c0007638 <VgaText::load()>:
c0007638:	c3                   	ret    
c0007639:	90                   	nop

c000763a <VgaText::updateCursor()>:
c000763a:	83 ec 14             	sub    esp,0x14
c000763d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007641:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007644:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007647:	e8 dc dc 00 00       	call   c0015328 <HalConsoleCursorUpdate(int, int)>
c000764c:	83 c4 1c             	add    esp,0x1c
c000764f:	c3                   	ret    

c0007650 <VgaText::doANSI_SGR(int)>:
c0007650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007658:	85 d2                	test   edx,edx
c000765a:	75 0b                	jne    c0007667 <VgaText::doANSI_SGR(int)+0x17>
c000765c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000765f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0007662:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0007665:	eb 59                	jmp    c00076c0 <VgaText::doANSI_SGR(int)+0x70>
c0007667:	83 fa 07             	cmp    edx,0x7
c000766a:	75 0b                	jne    c0007677 <VgaText::doANSI_SGR(int)+0x27>
c000766c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000766f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0007672:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0007675:	eb 49                	jmp    c00076c0 <VgaText::doANSI_SGR(int)+0x70>
c0007677:	83 fa 1b             	cmp    edx,0x1b
c000767a:	74 e0                	je     c000765c <VgaText::doANSI_SGR(int)+0xc>
c000767c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000767f:	83 f9 07             	cmp    ecx,0x7
c0007682:	77 09                	ja     c000768d <VgaText::doANSI_SGR(int)+0x3d>
c0007684:	8b 14 8d 80 ed 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe1280]
c000768b:	eb 20                	jmp    c00076ad <VgaText::doANSI_SGR(int)+0x5d>
c000768d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0007690:	83 f9 07             	cmp    ecx,0x7
c0007693:	77 09                	ja     c000769e <VgaText::doANSI_SGR(int)+0x4e>
c0007695:	8b 14 8d 80 ed 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe1280]
c000769c:	eb 22                	jmp    c00076c0 <VgaText::doANSI_SGR(int)+0x70>
c000769e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00076a1:	83 f9 07             	cmp    ecx,0x7
c00076a4:	77 0b                	ja     c00076b1 <VgaText::doANSI_SGR(int)+0x61>
c00076a6:	8b 14 95 38 ec 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe13c8]
c00076ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00076b0:	c3                   	ret    
c00076b1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00076b4:	83 f9 07             	cmp    ecx,0x7
c00076b7:	77 0a                	ja     c00076c3 <VgaText::doANSI_SGR(int)+0x73>
c00076b9:	8b 14 95 10 ec 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe13f0]
c00076c0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00076c3:	c3                   	ret    

c00076c4 <VgaText::setDefaultBgColour(VgaColour)>:
c00076c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00076c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00076cc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00076cf:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00076d2:	c3                   	ret    
c00076d3:	90                   	nop

c00076d4 <VgaText::setDefaultFgColour(VgaColour)>:
c00076d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00076d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00076dc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00076df:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00076e2:	c3                   	ret    
c00076e3:	90                   	nop

c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00076e4:	53                   	push   ebx
c00076e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00076e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00076ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00076f1:	51                   	push   ecx
c00076f2:	e8 cd ff ff ff       	call   c00076c4 <VgaText::setDefaultBgColour(VgaColour)>
c00076f7:	58                   	pop    eax
c00076f8:	5a                   	pop    edx
c00076f9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00076fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007701:	5b                   	pop    ebx
c0007702:	eb d0                	jmp    c00076d4 <VgaText::setDefaultFgColour(VgaColour)>

c0007704 <VgaText::setTitleTextColour(VgaColour)>:
c0007704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007708:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000770c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000770f:	c3                   	ret    

c0007710 <VgaText::setTitleColour(VgaColour)>:
c0007710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007714:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007718:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000771b:	c3                   	ret    

c000771c <VgaText::setTitle(char*)>:
c000771c:	c3                   	ret    
c000771d:	90                   	nop

c000771e <VgaText::combineColours(unsigned char, unsigned char)>:
c000771e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0007722:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0007727:	83 e0 0f             	and    eax,0xf
c000772a:	c1 e2 04             	shl    edx,0x4
c000772d:	09 d0                	or     eax,edx
c000772f:	c3                   	ret    

c0007730 <VgaText::scrollScreen()>:
c0007730:	55                   	push   ebp
c0007731:	b9 01 00 00 00       	mov    ecx,0x1
c0007736:	57                   	push   edi
c0007737:	56                   	push   esi
c0007738:	53                   	push   ebx
c0007739:	83 ec 0c             	sub    esp,0xc
c000773c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007740:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0007746:	31 ff                	xor    edi,edi
c0007748:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000774b:	83 f9 18             	cmp    ecx,0x18
c000774e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0007751:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0007758:	75 27                	jne    c0007781 <VgaText::scrollScreen()+0x51>
c000775a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000775d:	01 f5                	add    ebp,esi
c000775f:	f7 c7 01 00 00 00    	test   edi,0x1
c0007765:	74 16                	je     c000777d <VgaText::scrollScreen()+0x4d>
c0007767:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000776b:	50                   	push   eax
c000776c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0007770:	50                   	push   eax
c0007771:	e8 a8 ff ff ff       	call   c000771e <VgaText::combineColours(unsigned char, unsigned char)>
c0007776:	5a                   	pop    edx
c0007777:	5a                   	pop    edx
c0007778:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000777b:	eb 04                	jmp    c0007781 <VgaText::scrollScreen()+0x51>
c000777d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0007781:	47                   	inc    edi
c0007782:	46                   	inc    esi
c0007783:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0007789:	75 bd                	jne    c0007748 <VgaText::scrollScreen()+0x18>
c000778b:	41                   	inc    ecx
c000778c:	83 f9 19             	cmp    ecx,0x19
c000778f:	75 af                	jne    c0007740 <VgaText::scrollScreen()+0x10>
c0007791:	39 1d 74 f4 01 c0    	cmp    DWORD PTR ds:0xc001f474,ebx
c0007797:	75 1f                	jne    c00077b8 <VgaText::scrollScreen()+0x88>
c0007799:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000779d:	74 05                	je     c00077a4 <VgaText::scrollScreen()+0x74>
c000779f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00077a2:	eb 14                	jmp    c00077b8 <VgaText::scrollScreen()+0x88>
c00077a4:	50                   	push   eax
c00077a5:	50                   	push   eax
c00077a6:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00077aa:	50                   	push   eax
c00077ab:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00077af:	50                   	push   eax
c00077b0:	e8 ff d9 00 00       	call   c00151b4 <HalConsoleScroll(int, int)>
c00077b5:	83 c4 10             	add    esp,0x10
c00077b8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00077bc:	83 c4 0c             	add    esp,0xc
c00077bf:	5b                   	pop    ebx
c00077c0:	5e                   	pop    esi
c00077c1:	5f                   	pop    edi
c00077c2:	5d                   	pop    ebp
c00077c3:	e9 72 fe ff ff       	jmp    c000763a <VgaText::updateCursor()>

c00077c8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00077c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00077cd:	c1 e0 08             	shl    eax,0x8
c00077d0:	89 c2                	mov    edx,eax
c00077d2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00077d7:	09 d0                	or     eax,edx
c00077d9:	c3                   	ret    

c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00077da:	55                   	push   ebp
c00077db:	57                   	push   edi
c00077dc:	56                   	push   esi
c00077dd:	53                   	push   ebx
c00077de:	83 ec 1c             	sub    esp,0x1c
c00077e1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00077e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00077e9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00077ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00077f1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00077f5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00077f9:	0f b6 c3             	movzx  eax,bl
c00077fc:	50                   	push   eax
c00077fd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0007802:	50                   	push   eax
c0007803:	e8 16 ff ff ff       	call   c000771e <VgaText::combineColours(unsigned char, unsigned char)>
c0007808:	5a                   	pop    edx
c0007809:	0f b6 c0             	movzx  eax,al
c000780c:	59                   	pop    ecx
c000780d:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0007812:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007816:	50                   	push   eax
c0007817:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000781b:	e8 a8 ff ff ff       	call   c00077c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0007820:	5a                   	pop    edx
c0007821:	66 6b d7 50          	imul   dx,di,0x50
c0007825:	59                   	pop    ecx
c0007826:	01 f2                	add    edx,esi
c0007828:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000782b:	0f b7 d2             	movzx  edx,dx
c000782e:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0007832:	39 2d 74 f4 01 c0    	cmp    DWORD PTR ds:0xc001f474,ebp
c0007838:	75 28                	jne    c0007862 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000783a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000783e:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0007842:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0007846:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000784a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000784e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007852:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007856:	83 c4 1c             	add    esp,0x1c
c0007859:	5b                   	pop    ebx
c000785a:	5e                   	pop    esi
c000785b:	5f                   	pop    edi
c000785c:	5d                   	pop    ebp
c000785d:	e9 5a da 00 00       	jmp    c00152bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007862:	83 c4 1c             	add    esp,0x1c
c0007865:	5b                   	pop    ebx
c0007866:	5e                   	pop    esi
c0007867:	5f                   	pop    edi
c0007868:	5d                   	pop    ebp
c0007869:	c3                   	ret    

c000786a <VgaText::getCursorX()>:
c000786a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000786e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0007871:	c3                   	ret    

c0007872 <VgaText::getCursorY()>:
c0007872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007876:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0007879:	c3                   	ret    

c000787a <VgaText::setCursor(int, int)>:
c000787a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000787e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007882:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007885:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007889:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000788c:	e9 a9 fd ff ff       	jmp    c000763a <VgaText::updateCursor()>

c0007891 <setActiveTerminal(VgaText*)>:
c0007891:	53                   	push   ebx
c0007892:	83 ec 08             	sub    esp,0x8
c0007895:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007899:	85 db                	test   ebx,ebx
c000789b:	75 11                	jne    c00078ae <setActiveTerminal(VgaText*)+0x1d>
c000789d:	c7 44 24 10 5c cd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cd5c
c00078a5:	83 c4 08             	add    esp,0x8
c00078a8:	5b                   	pop    ebx
c00078a9:	e9 91 7b 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c00078ae:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c00078b3:	85 c0                	test   eax,eax
c00078b5:	74 0c                	je     c00078c3 <setActiveTerminal(VgaText*)+0x32>
c00078b7:	83 ec 0c             	sub    esp,0xc
c00078ba:	50                   	push   eax
c00078bb:	e8 7a fd ff ff       	call   c000763a <VgaText::updateCursor()>
c00078c0:	83 c4 10             	add    esp,0x10
c00078c3:	89 1d 74 f4 01 c0    	mov    DWORD PTR ds:0xc001f474,ebx
c00078c9:	50                   	push   eax
c00078ca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00078cd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00078d0:	53                   	push   ebx
c00078d1:	e8 a4 ff ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c00078d6:	83 c4 18             	add    esp,0x18
c00078d9:	5b                   	pop    ebx
c00078da:	c3                   	ret    
c00078db:	90                   	nop

c00078dc <VgaText::clearScreen()>:
c00078dc:	57                   	push   edi
c00078dd:	56                   	push   esi
c00078de:	31 f6                	xor    esi,esi
c00078e0:	53                   	push   ebx
c00078e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00078e5:	52                   	push   edx
c00078e6:	6a 00                	push   0x0
c00078e8:	6a 00                	push   0x0
c00078ea:	53                   	push   ebx
c00078eb:	e8 8a ff ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c00078f0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00078f7:	83 c4 10             	add    esp,0x10
c00078fa:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00078fd:	7e 20                	jle    c000791f <VgaText::clearScreen()+0x43>
c00078ff:	31 ff                	xor    edi,edi
c0007901:	50                   	push   eax
c0007902:	50                   	push   eax
c0007903:	56                   	push   esi
c0007904:	57                   	push   edi
c0007905:	47                   	inc    edi
c0007906:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007909:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000790c:	6a 20                	push   0x20
c000790e:	53                   	push   ebx
c000790f:	e8 c6 fe ff ff       	call   c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007914:	83 c4 20             	add    esp,0x20
c0007917:	83 ff 50             	cmp    edi,0x50
c000791a:	75 e5                	jne    c0007901 <VgaText::clearScreen()+0x25>
c000791c:	46                   	inc    esi
c000791d:	eb db                	jmp    c00078fa <VgaText::clearScreen()+0x1e>
c000791f:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007926:	5b                   	pop    ebx
c0007927:	5e                   	pop    esi
c0007928:	5f                   	pop    edi
c0007929:	c3                   	ret    

c000792a <VgaText::setCursorX(int)>:
c000792a:	83 ec 10             	sub    esp,0x10
c000792d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007931:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007938:	50                   	push   eax
c0007939:	e8 3c ff ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c000793e:	83 c4 1c             	add    esp,0x1c
c0007941:	c3                   	ret    

c0007942 <VgaText::setCursorY(int)>:
c0007942:	83 ec 10             	sub    esp,0x10
c0007945:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007949:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000794d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007950:	50                   	push   eax
c0007951:	e8 24 ff ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c0007956:	83 c4 1c             	add    esp,0x1c
c0007959:	c3                   	ret    

c000795a <VgaText::incrementCursor(bool)>:
c000795a:	56                   	push   esi
c000795b:	53                   	push   ebx
c000795c:	51                   	push   ecx
c000795d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007961:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007965:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0007968:	40                   	inc    eax
c0007969:	83 f8 50             	cmp    eax,0x50
c000796c:	74 05                	je     c0007973 <VgaText::incrementCursor(bool)+0x19>
c000796e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0007971:	eb 24                	jmp    c0007997 <VgaText::incrementCursor(bool)+0x3d>
c0007973:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007976:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000797d:	8d 50 01             	lea    edx,[eax+0x1]
c0007980:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007983:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007986:	75 0f                	jne    c0007997 <VgaText::incrementCursor(bool)+0x3d>
c0007988:	83 ec 0c             	sub    esp,0xc
c000798b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000798e:	53                   	push   ebx
c000798f:	e8 9c fd ff ff       	call   c0007730 <VgaText::scrollScreen()>
c0007994:	83 c4 10             	add    esp,0x10
c0007997:	89 f0                	mov    eax,esi
c0007999:	84 c0                	test   al,al
c000799b:	74 0c                	je     c00079a9 <VgaText::incrementCursor(bool)+0x4f>
c000799d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00079a1:	5a                   	pop    edx
c00079a2:	5b                   	pop    ebx
c00079a3:	5e                   	pop    esi
c00079a4:	e9 91 fc ff ff       	jmp    c000763a <VgaText::updateCursor()>
c00079a9:	58                   	pop    eax
c00079aa:	5b                   	pop    ebx
c00079ab:	5e                   	pop    esi
c00079ac:	c3                   	ret    
c00079ad:	90                   	nop

c00079ae <VgaText::decrementCursor(bool)>:
c00079ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00079b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00079b6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00079b9:	85 c0                	test   eax,eax
c00079bb:	74 04                	je     c00079c1 <VgaText::decrementCursor(bool)+0x13>
c00079bd:	48                   	dec    eax
c00079be:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00079c1:	84 c9                	test   cl,cl
c00079c3:	74 09                	je     c00079ce <VgaText::decrementCursor(bool)+0x20>
c00079c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079c9:	e9 6c fc ff ff       	jmp    c000763a <VgaText::updateCursor()>
c00079ce:	c3                   	ret    
c00079cf:	90                   	nop

c00079d0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00079d0:	53                   	push   ebx
c00079d1:	83 ec 08             	sub    esp,0x8
c00079d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00079d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00079e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00079e4:	3c 07                	cmp    al,0x7
c00079e6:	75 21                	jne    c0007a09 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c00079e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079f0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00079f8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0007a00:	83 c4 08             	add    esp,0x8
c0007a03:	5b                   	pop    ebx
c0007a04:	e9 3e 2d 00 00       	jmp    c000a747 <Krnl::beep(int, int, bool)>
c0007a09:	3c 0d                	cmp    al,0xd
c0007a0b:	75 09                	jne    c0007a16 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0007a0d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007a14:	eb 2c                	jmp    c0007a42 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0007a16:	3c 0a                	cmp    al,0xa
c0007a18:	75 31                	jne    c0007a4b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0007a1a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007a1d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007a24:	8d 50 01             	lea    edx,[eax+0x1]
c0007a27:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007a2a:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007a2d:	75 0f                	jne    c0007a3e <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0007a2f:	83 ec 0c             	sub    esp,0xc
c0007a32:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007a35:	53                   	push   ebx
c0007a36:	e8 f5 fc ff ff       	call   c0007730 <VgaText::scrollScreen()>
c0007a3b:	83 c4 10             	add    esp,0x10
c0007a3e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007a42:	83 c4 08             	add    esp,0x8
c0007a45:	5b                   	pop    ebx
c0007a46:	e9 ef fb ff ff       	jmp    c000763a <VgaText::updateCursor()>
c0007a4b:	3c 08                	cmp    al,0x8
c0007a4d:	75 25                	jne    c0007a74 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0007a4f:	50                   	push   eax
c0007a50:	50                   	push   eax
c0007a51:	6a 01                	push   0x1
c0007a53:	53                   	push   ebx
c0007a54:	e8 55 ff ff ff       	call   c00079ae <VgaText::decrementCursor(bool)>
c0007a59:	5a                   	pop    edx
c0007a5a:	59                   	pop    ecx
c0007a5b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007a5e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007a61:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007a64:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007a67:	6a 20                	push   0x20
c0007a69:	53                   	push   ebx
c0007a6a:	e8 6b fd ff ff       	call   c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007a6f:	83 c4 28             	add    esp,0x28
c0007a72:	5b                   	pop    ebx
c0007a73:	c3                   	ret    
c0007a74:	83 ec 08             	sub    esp,0x8
c0007a77:	0f be c0             	movsx  eax,al
c0007a7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007a7d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007a80:	51                   	push   ecx
c0007a81:	52                   	push   edx
c0007a82:	50                   	push   eax
c0007a83:	53                   	push   ebx
c0007a84:	e8 51 fd ff ff       	call   c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007a89:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0007a8d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0007a95:	83 c4 28             	add    esp,0x28
c0007a98:	5b                   	pop    ebx
c0007a99:	e9 bc fe ff ff       	jmp    c000795a <VgaText::incrementCursor(bool)>

c0007a9e <VgaText::putchar(char)>:
c0007a9e:	56                   	push   esi
c0007a9f:	53                   	push   ebx
c0007aa0:	83 ec 14             	sub    esp,0x14
c0007aa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007aa7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aab:	3c 5b                	cmp    al,0x5b
c0007aad:	75 18                	jne    c0007ac7 <VgaText::putchar(char)+0x29>
c0007aaf:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0007ab3:	74 1f                	je     c0007ad4 <VgaText::putchar(char)+0x36>
c0007ab5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0007abb:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0007ac2:	e9 bd 00 00 00       	jmp    c0007b84 <VgaText::putchar(char)+0xe6>
c0007ac7:	3c 1b                	cmp    al,0x1b
c0007ac9:	75 09                	jne    c0007ad4 <VgaText::putchar(char)+0x36>
c0007acb:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0007acf:	e9 b0 00 00 00       	jmp    c0007b84 <VgaText::putchar(char)+0xe6>
c0007ad4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0007ad7:	84 c9                	test   cl,cl
c0007ad9:	0f 84 92 00 00 00    	je     c0007b71 <VgaText::putchar(char)+0xd3>
c0007adf:	8d 50 c0             	lea    edx,[eax-0x40]
c0007ae2:	80 fa 3e             	cmp    dl,0x3e
c0007ae5:	77 76                	ja     c0007b5d <VgaText::putchar(char)+0xbf>
c0007ae7:	3c 6d                	cmp    al,0x6d
c0007ae9:	75 47                	jne    c0007b32 <VgaText::putchar(char)+0x94>
c0007aeb:	31 f6                	xor    esi,esi
c0007aed:	31 d2                	xor    edx,edx
c0007aef:	31 c0                	xor    eax,eax
c0007af1:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0007af4:	7e 2d                	jle    c0007b23 <VgaText::putchar(char)+0x85>
c0007af6:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0007afb:	80 fa 3b             	cmp    dl,0x3b
c0007afe:	75 17                	jne    c0007b17 <VgaText::putchar(char)+0x79>
c0007b00:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	e8 45 fb ff ff       	call   c0007650 <VgaText::doANSI_SGR(int)>
c0007b0b:	59                   	pop    ecx
c0007b0c:	31 d2                	xor    edx,edx
c0007b0e:	58                   	pop    eax
c0007b0f:	31 c0                	xor    eax,eax
c0007b11:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0007b15:	eb 09                	jmp    c0007b20 <VgaText::putchar(char)+0x82>
c0007b17:	6b c0 0a             	imul   eax,eax,0xa
c0007b1a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0007b1e:	88 ca                	mov    dl,cl
c0007b20:	46                   	inc    esi
c0007b21:	eb ce                	jmp    c0007af1 <VgaText::putchar(char)+0x53>
c0007b23:	84 d2                	test   dl,dl
c0007b25:	74 2e                	je     c0007b55 <VgaText::putchar(char)+0xb7>
c0007b27:	50                   	push   eax
c0007b28:	53                   	push   ebx
c0007b29:	e8 22 fb ff ff       	call   c0007650 <VgaText::doANSI_SGR(int)>
c0007b2e:	58                   	pop    eax
c0007b2f:	5a                   	pop    edx
c0007b30:	eb 23                	jmp    c0007b55 <VgaText::putchar(char)+0xb7>
c0007b32:	3c 4a                	cmp    al,0x4a
c0007b34:	75 1f                	jne    c0007b55 <VgaText::putchar(char)+0xb7>
c0007b36:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0007b3a:	75 19                	jne    c0007b55 <VgaText::putchar(char)+0xb7>
c0007b3c:	83 ec 0c             	sub    esp,0xc
c0007b3f:	53                   	push   ebx
c0007b40:	e8 97 fd ff ff       	call   c00078dc <VgaText::clearScreen()>
c0007b45:	83 c4 0c             	add    esp,0xc
c0007b48:	6a 00                	push   0x0
c0007b4a:	6a 00                	push   0x0
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 28 fd ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c0007b52:	83 c4 10             	add    esp,0x10
c0007b55:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0007b5b:	eb 27                	jmp    c0007b84 <VgaText::putchar(char)+0xe6>
c0007b5d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0007b60:	83 fa 0e             	cmp    edx,0xe
c0007b63:	7f 1f                	jg     c0007b84 <VgaText::putchar(char)+0xe6>
c0007b65:	8d 4a 01             	lea    ecx,[edx+0x1]
c0007b68:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0007b6b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0007b6f:	eb 13                	jmp    c0007b84 <VgaText::putchar(char)+0xe6>
c0007b71:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007b74:	0f be c0             	movsx  eax,al
c0007b77:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007b7a:	50                   	push   eax
c0007b7b:	53                   	push   ebx
c0007b7c:	e8 4f fe ff ff       	call   c00079d0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0007b81:	83 c4 10             	add    esp,0x10
c0007b84:	83 c4 14             	add    esp,0x14
c0007b87:	5b                   	pop    ebx
c0007b88:	5e                   	pop    esi
c0007b89:	c3                   	ret    

c0007b8a <VgaText::putx(unsigned int)>:
c0007b8a:	57                   	push   edi
c0007b8b:	b9 11 00 00 00       	mov    ecx,0x11
c0007b90:	56                   	push   esi
c0007b91:	be 6a cd 01 c0       	mov    esi,0xc001cd6a
c0007b96:	53                   	push   ebx
c0007b97:	83 ec 20             	sub    esp,0x20
c0007b9a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0007b9e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0007ba2:	fc                   	cld    
c0007ba3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ba5:	be 08 00 00 00       	mov    esi,0x8
c0007baa:	50                   	push   eax
c0007bab:	50                   	push   eax
c0007bac:	89 d8                	mov    eax,ebx
c0007bae:	c1 e3 04             	shl    ebx,0x4
c0007bb1:	c1 e8 1c             	shr    eax,0x1c
c0007bb4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0007bb9:	50                   	push   eax
c0007bba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007bbe:	e8 db fe ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007bc3:	83 c4 10             	add    esp,0x10
c0007bc6:	4e                   	dec    esi
c0007bc7:	75 e1                	jne    c0007baa <VgaText::putx(unsigned int)+0x20>
c0007bc9:	83 c4 20             	add    esp,0x20
c0007bcc:	5b                   	pop    ebx
c0007bcd:	5e                   	pop    esi
c0007bce:	5f                   	pop    edi
c0007bcf:	c3                   	ret    

c0007bd0 <VgaText::puts(char const*)>:
c0007bd0:	53                   	push   ebx
c0007bd1:	83 ec 08             	sub    esp,0x8
c0007bd4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007bd8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0007bdb:	84 c0                	test   al,al
c0007bdd:	74 12                	je     c0007bf1 <VgaText::puts(char const*)+0x21>
c0007bdf:	43                   	inc    ebx
c0007be0:	51                   	push   ecx
c0007be1:	51                   	push   ecx
c0007be2:	50                   	push   eax
c0007be3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007be7:	e8 b2 fe ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007bec:	83 c4 10             	add    esp,0x10
c0007bef:	eb e7                	jmp    c0007bd8 <VgaText::puts(char const*)+0x8>
c0007bf1:	83 c4 08             	add    esp,0x8
c0007bf4:	5b                   	pop    ebx
c0007bf5:	c3                   	ret    

c0007bf6 <VgaText::write(unsigned long long, void*, int*)>:
c0007bf6:	55                   	push   ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	53                   	push   ebx
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007c01:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007c05:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0007c09:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0007c10:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0007c13:	39 eb                	cmp    ebx,ebp
c0007c15:	74 13                	je     c0007c2a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0007c17:	43                   	inc    ebx
c0007c18:	50                   	push   eax
c0007c19:	50                   	push   eax
c0007c1a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0007c1e:	50                   	push   eax
c0007c1f:	56                   	push   esi
c0007c20:	e8 79 fe ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007c25:	83 c4 10             	add    esp,0x10
c0007c28:	eb e9                	jmp    c0007c13 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0007c2a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0007c31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c35:	89 38                	mov    DWORD PTR [eax],edi
c0007c37:	83 c4 0c             	add    esp,0xc
c0007c3a:	31 c0                	xor    eax,eax
c0007c3c:	5b                   	pop    ebx
c0007c3d:	5e                   	pop    esi
c0007c3e:	5f                   	pop    edi
c0007c3f:	5d                   	pop    ebp
c0007c40:	c3                   	ret    
c0007c41:	90                   	nop

c0007c42 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0007c42:	55                   	push   ebp
c0007c43:	57                   	push   edi
c0007c44:	56                   	push   esi
c0007c45:	53                   	push   ebx
c0007c46:	83 ec 0c             	sub    esp,0xc
c0007c49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007c4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007c52:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0007c59:	50                   	push   eax
c0007c5a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007c5f:	50                   	push   eax
c0007c60:	e8 b9 fa ff ff       	call   c000771e <VgaText::combineColours(unsigned char, unsigned char)>
c0007c65:	5a                   	pop    edx
c0007c66:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007c6b:	59                   	pop    ecx
c0007c6c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007c6f:	89 c5                	mov    ebp,eax
c0007c71:	0f b7 f6             	movzx  esi,si
c0007c74:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007c78:	01 f6                	add    esi,esi
c0007c7a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007c7d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007c80:	84 c0                	test   al,al
c0007c82:	0f 84 f4 00 00 00    	je     c0007d7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0007c88:	3c 0d                	cmp    al,0xd
c0007c8a:	75 0c                	jne    c0007c98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0007c8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007c93:	e9 de 00 00 00       	jmp    c0007d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007c98:	3c 0a                	cmp    al,0xa
c0007c9a:	75 45                	jne    c0007ce1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0007c9c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007c9f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007ca6:	8d 48 01             	lea    ecx,[eax+0x1]
c0007ca9:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0007cac:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0007caf:	75 0f                	jne    c0007cc0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0007cb1:	83 ec 0c             	sub    esp,0xc
c0007cb4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007cb7:	53                   	push   ebx
c0007cb8:	e8 73 fa ff ff       	call   c0007730 <VgaText::scrollScreen()>
c0007cbd:	83 c4 10             	add    esp,0x10
c0007cc0:	83 ec 0c             	sub    esp,0xc
c0007cc3:	53                   	push   ebx
c0007cc4:	e8 71 f9 ff ff       	call   c000763a <VgaText::updateCursor()>
c0007cc9:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007cce:	83 c4 10             	add    esp,0x10
c0007cd1:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007cd4:	0f b7 f6             	movzx  esi,si
c0007cd7:	01 f6                	add    esi,esi
c0007cd9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007cdc:	e9 95 00 00 00       	jmp    c0007d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007ce1:	3c 08                	cmp    al,0x8
c0007ce3:	75 35                	jne    c0007d1a <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0007ce5:	51                   	push   ecx
c0007ce6:	51                   	push   ecx
c0007ce7:	6a 01                	push   0x1
c0007ce9:	53                   	push   ebx
c0007cea:	e8 bf fc ff ff       	call   c00079ae <VgaText::decrementCursor(bool)>
c0007cef:	5e                   	pop    esi
c0007cf0:	58                   	pop    eax
c0007cf1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007cf4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007cf7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007cfa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007cfd:	6a 20                	push   0x20
c0007cff:	53                   	push   ebx
c0007d00:	e8 d5 fa ff ff       	call   c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007d05:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007d0a:	83 c4 20             	add    esp,0x20
c0007d0d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007d10:	0f b7 f6             	movzx  esi,si
c0007d13:	01 f6                	add    esi,esi
c0007d15:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007d18:	eb 5c                	jmp    c0007d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007d1a:	52                   	push   edx
c0007d1b:	52                   	push   edx
c0007d1c:	89 ea                	mov    edx,ebp
c0007d1e:	0f b6 ca             	movzx  ecx,dl
c0007d21:	51                   	push   ecx
c0007d22:	50                   	push   eax
c0007d23:	e8 a0 fa ff ff       	call   c00077c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0007d28:	83 c4 10             	add    esp,0x10
c0007d2b:	66 89 06             	mov    WORD PTR [esi],ax
c0007d2e:	39 1d 74 f4 01 c0    	cmp    DWORD PTR ds:0xc001f474,ebx
c0007d34:	75 1d                	jne    c0007d53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0007d36:	83 ec 0c             	sub    esp,0xc
c0007d39:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007d3c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007d3f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007d43:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007d47:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007d4a:	50                   	push   eax
c0007d4b:	e8 6c d5 00 00       	call   c00152bc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007d50:	83 c4 20             	add    esp,0x20
c0007d53:	83 c6 02             	add    esi,0x2
c0007d56:	50                   	push   eax
c0007d57:	50                   	push   eax
c0007d58:	6a 00                	push   0x0
c0007d5a:	53                   	push   ebx
c0007d5b:	e8 fa fb ff ff       	call   c000795a <VgaText::incrementCursor(bool)>
c0007d60:	83 c4 10             	add    esp,0x10
c0007d63:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0007d67:	75 0d                	jne    c0007d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007d69:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007d6e:	0f b7 f6             	movzx  esi,si
c0007d71:	01 f6                	add    esi,esi
c0007d73:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007d76:	47                   	inc    edi
c0007d77:	e9 01 ff ff ff       	jmp    c0007c7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0007d7c:	83 ec 0c             	sub    esp,0xc
c0007d7f:	53                   	push   ebx
c0007d80:	e8 b5 f8 ff ff       	call   c000763a <VgaText::updateCursor()>
c0007d85:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007d8c:	83 c4 1c             	add    esp,0x1c
c0007d8f:	5b                   	pop    ebx
c0007d90:	5e                   	pop    esi
c0007d91:	5f                   	pop    edi
c0007d92:	5d                   	pop    ebp
c0007d93:	c3                   	ret    

c0007d94 <VgaText::VgaText(char const*)>:
c0007d94:	56                   	push   esi
c0007d95:	53                   	push   ebx
c0007d96:	83 ec 04             	sub    esp,0x4
c0007d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d9d:	83 ec 08             	sub    esp,0x8
c0007da0:	6a 00                	push   0x0
c0007da2:	50                   	push   eax
c0007da3:	e8 b2 04 00 00       	call   c000825a <UnixFile::UnixFile(int)>
c0007da8:	83 c4 10             	add    esp,0x10
c0007dab:	ba d0 cd 01 c0       	mov    edx,0xc001cdd0
c0007db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007db4:	89 10                	mov    DWORD PTR [eax],edx
c0007db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dba:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0007dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dc5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0007dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dd0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0007dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dd8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0007ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007de0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0007de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007deb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0007df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007df6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0007dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e01:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0007e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e0c:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0007e13:	83 ec 0c             	sub    esp,0xc
c0007e16:	6a 01                	push   0x1
c0007e18:	e8 80 08 00 00       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0007e1d:	83 c4 10             	add    esp,0x10
c0007e20:	89 c2                	mov    edx,eax
c0007e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e26:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0007e29:	8b 1d 10 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f510
c0007e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e36:	89 c6                	mov    esi,eax
c0007e38:	e8 f1 f0 ff ff       	call   c0006f2e <Phys::allocatePage()>
c0007e3d:	68 05 0c 00 00       	push   0xc05
c0007e42:	56                   	push   esi
c0007e43:	50                   	push   eax
c0007e44:	53                   	push   ebx
c0007e45:	e8 e8 0e 00 00       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007e4a:	83 c4 10             	add    esp,0x10
c0007e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e51:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e54:	83 ec 04             	sub    esp,0x4
c0007e57:	68 a0 0f 00 00       	push   0xfa0
c0007e5c:	6a 00                	push   0x0
c0007e5e:	50                   	push   eax
c0007e5f:	e8 8c 86 ff ff       	call   c00004f0 <memset>
c0007e64:	83 c4 10             	add    esp,0x10
c0007e67:	83 ec 04             	sub    esp,0x4
c0007e6a:	6a 00                	push   0x0
c0007e6c:	6a 07                	push   0x7
c0007e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e72:	e8 6d f8 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0007e77:	83 c4 10             	add    esp,0x10
c0007e7a:	83 ec 04             	sub    esp,0x4
c0007e7d:	6a 00                	push   0x0
c0007e7f:	6a 00                	push   0x0
c0007e81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e85:	e8 f0 f9 ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c0007e8a:	83 c4 10             	add    esp,0x10
c0007e8d:	83 ec 0c             	sub    esp,0xc
c0007e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e94:	e8 43 fa ff ff       	call   c00078dc <VgaText::clearScreen()>
c0007e99:	83 c4 10             	add    esp,0x10
c0007e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ea0:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0007ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ea8:	05 82 00 00 00       	add    eax,0x82
c0007ead:	83 ec 04             	sub    esp,0x4
c0007eb0:	6a 30                	push   0x30
c0007eb2:	6a 00                	push   0x0
c0007eb4:	50                   	push   eax
c0007eb5:	e8 36 86 ff ff       	call   c00004f0 <memset>
c0007eba:	83 c4 10             	add    esp,0x10
c0007ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec1:	05 b2 00 00 00       	add    eax,0xb2
c0007ec6:	83 ec 04             	sub    esp,0x4
c0007ec9:	68 80 00 00 00       	push   0x80
c0007ece:	6a 00                	push   0x0
c0007ed0:	50                   	push   eax
c0007ed1:	e8 1a 86 ff ff       	call   c00004f0 <memset>
c0007ed6:	83 c4 10             	add    esp,0x10
c0007ed9:	90                   	nop
c0007eda:	83 c4 04             	add    esp,0x4
c0007edd:	5b                   	pop    ebx
c0007ede:	5e                   	pop    esi
c0007edf:	c3                   	ret    

c0007ee0 <VgaText::receiveKey(unsigned char)>:
c0007ee0:	57                   	push   edi
c0007ee1:	56                   	push   esi
c0007ee2:	53                   	push   ebx
c0007ee3:	83 ec 10             	sub    esp,0x10
c0007ee6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007eea:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007eee:	84 db                	test   bl,bl
c0007ef0:	0f 84 ba 00 00 00    	je     c0007fb0 <VgaText::receiveKey(unsigned char)+0xd0>
c0007ef6:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0007efc:	80 fb 08             	cmp    bl,0x8
c0007eff:	75 2c                	jne    c0007f2d <VgaText::receiveKey(unsigned char)+0x4d>
c0007f01:	83 ec 0c             	sub    esp,0xc
c0007f04:	57                   	push   edi
c0007f05:	e8 56 86 ff ff       	call   c0000560 <strlen>
c0007f0a:	83 c4 10             	add    esp,0x10
c0007f0d:	85 c0                	test   eax,eax
c0007f0f:	74 41                	je     c0007f52 <VgaText::receiveKey(unsigned char)+0x72>
c0007f11:	50                   	push   eax
c0007f12:	50                   	push   eax
c0007f13:	6a 08                	push   0x8
c0007f15:	56                   	push   esi
c0007f16:	e8 83 fb ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007f1b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007f1e:	e8 3d 86 ff ff       	call   c0000560 <strlen>
c0007f23:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0007f2b:	eb 22                	jmp    c0007f4f <VgaText::receiveKey(unsigned char)+0x6f>
c0007f2d:	0f be c3             	movsx  eax,bl
c0007f30:	52                   	push   edx
c0007f31:	52                   	push   edx
c0007f32:	50                   	push   eax
c0007f33:	56                   	push   esi
c0007f34:	e8 65 fb ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007f39:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0007f3d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0007f42:	59                   	pop    ecx
c0007f43:	58                   	pop    eax
c0007f44:	8d 44 24 16          	lea    eax,[esp+0x16]
c0007f48:	50                   	push   eax
c0007f49:	57                   	push   edi
c0007f4a:	e8 91 88 ff ff       	call   c00007e0 <strcat>
c0007f4f:	83 c4 10             	add    esp,0x10
c0007f52:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0007f59:	75 05                	jne    c0007f60 <VgaText::receiveKey(unsigned char)+0x80>
c0007f5b:	80 fb 0a             	cmp    bl,0xa
c0007f5e:	75 50                	jne    c0007fb0 <VgaText::receiveKey(unsigned char)+0xd0>
c0007f60:	83 ec 0c             	sub    esp,0xc
c0007f63:	81 c6 b2 00 00 00    	add    esi,0xb2
c0007f69:	56                   	push   esi
c0007f6a:	e8 f1 85 ff ff       	call   c0000560 <strlen>
c0007f6f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007f72:	89 c3                	mov    ebx,eax
c0007f74:	e8 e7 85 ff ff       	call   c0000560 <strlen>
c0007f79:	83 c4 10             	add    esp,0x10
c0007f7c:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0007f80:	3d 80 00 00 00       	cmp    eax,0x80
c0007f85:	76 10                	jbe    c0007f97 <VgaText::receiveKey(unsigned char)+0xb7>
c0007f87:	83 ec 0c             	sub    esp,0xc
c0007f8a:	68 7b cd 01 c0       	push   0xc001cd7b
c0007f8f:	e8 ab 74 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0007f94:	83 c4 10             	add    esp,0x10
c0007f97:	50                   	push   eax
c0007f98:	50                   	push   eax
c0007f99:	57                   	push   edi
c0007f9a:	56                   	push   esi
c0007f9b:	e8 40 88 ff ff       	call   c00007e0 <strcat>
c0007fa0:	83 c4 0c             	add    esp,0xc
c0007fa3:	6a 30                	push   0x30
c0007fa5:	6a 00                	push   0x0
c0007fa7:	57                   	push   edi
c0007fa8:	e8 43 85 ff ff       	call   c00004f0 <memset>
c0007fad:	83 c4 10             	add    esp,0x10
c0007fb0:	83 c4 10             	add    esp,0x10
c0007fb3:	5b                   	pop    ebx
c0007fb4:	5e                   	pop    esi
c0007fb5:	5f                   	pop    edi
c0007fb6:	c3                   	ret    
c0007fb7:	90                   	nop

c0007fb8 <VgaText::doUpdate()>:
c0007fb8:	c3                   	ret    

c0007fb9 <newTerminal(char*)>:
c0007fb9:	83 ec 28             	sub    esp,0x28
c0007fbc:	68 34 01 00 00       	push   0x134
c0007fc1:	e8 9b eb ff ff       	call   c0006b61 <malloc>
c0007fc6:	5a                   	pop    edx
c0007fc7:	59                   	pop    ecx
c0007fc8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fcc:	50                   	push   eax
c0007fcd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007fd1:	e8 be fd ff ff       	call   c0007d94 <VgaText::VgaText(char const*)>
c0007fd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007fda:	83 c4 2c             	add    esp,0x2c
c0007fdd:	c3                   	ret    
c0007fde:	66 90                	xchg   ax,ax

c0007fe0 <TSS::TSS()>:
c0007fe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fe4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007feb:	90                   	nop
c0007fec:	c3                   	ret    
c0007fed:	90                   	nop
c0007fee:	66 90                	xchg   ax,ax

c0007ff0 <TSS::setESP(unsigned long)>:
c0007ff0:	55                   	push   ebp
c0007ff1:	89 e5                	mov    ebp,esp
c0007ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007ff6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007ff9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0007ffc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007fff:	90                   	nop
c0008000:	5d                   	pop    ebp
c0008001:	c3                   	ret    
c0008002:	66 90                	xchg   ax,ax

c0008004 <TSS::flush()>:
c0008004:	55                   	push   ebp
c0008005:	89 e5                	mov    ebp,esp
c0008007:	83 ec 10             	sub    esp,0x10
c000800a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000800d:	8b 00                	mov    eax,DWORD PTR [eax]
c000800f:	83 c8 03             	or     eax,0x3
c0008012:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008016:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000801a:	66 89 d0             	mov    ax,dx
c000801d:	0f 00 d8             	ltr    ax
c0008020:	90                   	nop
c0008021:	c9                   	leave  
c0008022:	c3                   	ret    
c0008023:	90                   	nop

c0008024 <TSS::setup(unsigned long, unsigned long)>:
c0008024:	55                   	push   ebp
c0008025:	89 e5                	mov    ebp,esp
c0008027:	83 ec 18             	sub    esp,0x18
c000802a:	83 ec 0c             	sub    esp,0xc
c000802d:	6a 68                	push   0x68
c000802f:	e8 2d eb ff ff       	call   c0006b61 <malloc>
c0008034:	83 c4 10             	add    esp,0x10
c0008037:	89 c2                	mov    edx,eax
c0008039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000803c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000803f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008042:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008045:	83 ec 04             	sub    esp,0x4
c0008048:	6a 68                	push   0x68
c000804a:	6a 00                	push   0x0
c000804c:	50                   	push   eax
c000804d:	e8 9e 84 ff ff       	call   c00004f0 <memset>
c0008052:	83 c4 10             	add    esp,0x10
c0008055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000805b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008064:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008067:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000806d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008070:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008073:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008076:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000807c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000807f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008088:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000808b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008094:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008097:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000809d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080a3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00080a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080af:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00080b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080bb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00080c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080c7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00080ca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00080cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00080d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00080d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080df:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00080e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080ec:	0f 20 da             	mov    edx,cr3
c00080ef:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00080f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00080f5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00080f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080fe:	83 ec 08             	sub    esp,0x8
c0008101:	50                   	push   eax
c0008102:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008105:	50                   	push   eax
c0008106:	e8 9d e2 ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c000810b:	83 c4 10             	add    esp,0x10
c000810e:	83 ec 08             	sub    esp,0x8
c0008111:	6a 68                	push   0x68
c0008113:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008116:	50                   	push   eax
c0008117:	e8 a8 e2 ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c000811c:	83 c4 10             	add    esp,0x10
c000811f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008123:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008126:	83 e0 0f             	and    eax,0xf
c0008129:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000812c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000812f:	83 c8 40             	or     eax,0x40
c0008132:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008135:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000813a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008140:	05 78 01 00 00       	add    eax,0x178
c0008145:	83 ec 04             	sub    esp,0x4
c0008148:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000814b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000814e:	50                   	push   eax
c000814f:	e8 a4 e2 ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c0008154:	83 c4 10             	add    esp,0x10
c0008157:	89 c2                	mov    edx,eax
c0008159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000815c:	89 10                	mov    DWORD PTR [eax],edx
c000815e:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0008163:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008169:	05 78 01 00 00       	add    eax,0x178
c000816e:	83 ec 0c             	sub    esp,0xc
c0008171:	50                   	push   eax
c0008172:	e8 ab e2 ff ff       	call   c0006422 <GDT::flush()>
c0008177:	83 c4 10             	add    esp,0x10
c000817a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000817d:	8b 00                	mov    eax,DWORD PTR [eax]
c000817f:	c9                   	leave  
c0008180:	c3                   	ret    
c0008181:	90                   	nop

c0008182 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008186:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000818a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000818d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008192:	75 08                	jne    c000819c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008194:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000819a:	eb 38                	jmp    c00081d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000819c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00081a1:	75 17                	jne    c00081ba <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00081a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00081a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00081ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00081b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00081b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00081b7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00081ba:	89 c1                	mov    ecx,eax
c00081bc:	83 e1 fd             	and    ecx,0xfffffffd
c00081bf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00081c5:	74 cd                	je     c0008194 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00081c7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00081cc:	83 e0 ef             	and    eax,0xffffffef
c00081cf:	83 f8 08             	cmp    eax,0x8
c00081d2:	76 c0                	jbe    c0008194 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00081d4:	31 c0                	xor    eax,eax
c00081d6:	c3                   	ret    
c00081d7:	90                   	nop

c00081d8 <ReservedFilename::isAtty()>:
c00081d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00081df:	31 c0                	xor    eax,eax
c00081e1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00081e7:	74 09                	je     c00081f2 <ReservedFilename::isAtty()+0x1a>
c00081e9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00081ef:	0f 94 c0             	sete   al
c00081f2:	c3                   	ret    
c00081f3:	90                   	nop

c00081f4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00081f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00081fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008203:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008208:	75 08                	jne    c0008212 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000820a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008210:	eb 3d                	jmp    c000824f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008212:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008217:	75 17                	jne    c0008230 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008219:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000821e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008221:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008227:	8b 10                	mov    edx,DWORD PTR [eax]
c0008229:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000822d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008230:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008235:	75 04                	jne    c000823b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008237:	89 0a                	mov    DWORD PTR [edx],ecx
c0008239:	eb 14                	jmp    c000824f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000823b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008240:	74 c8                	je     c000820a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008242:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008247:	83 e0 ef             	and    eax,0xffffffef
c000824a:	83 f8 08             	cmp    eax,0x8
c000824d:	76 bb                	jbe    c000820a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000824f:	31 c0                	xor    eax,eax
c0008251:	c3                   	ret    

c0008252 <UnixFile::getFileDescriptor()>:
c0008252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008256:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008259:	c3                   	ret    

c000825a <UnixFile::UnixFile(int)>:
c000825a:	53                   	push   ebx
c000825b:	83 ec 28             	sub    esp,0x28
c000825e:	ba 98 ce 01 c0       	mov    edx,0xc001ce98
c0008263:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008267:	89 10                	mov    DWORD PTR [eax],edx
c0008269:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008271:	0f 8f 8c 01 00 00    	jg     c0008403 <UnixFile::UnixFile(int)+0x1a9>
c0008277:	a1 c0 ed 01 c0       	mov    eax,ds:0xc001edc0
c000827c:	8d 50 01             	lea    edx,[eax+0x1]
c000827f:	89 15 c0 ed 01 c0    	mov    DWORD PTR ds:0xc001edc0,edx
c0008285:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008289:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000828c:	83 ec 08             	sub    esp,0x8
c000828f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008293:	68 f8 f4 01 c0       	push   0xc001f4f8
c0008298:	e8 ab 36 01 00       	call   c001b948 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000829d:	83 c4 10             	add    esp,0x10
c00082a0:	a0 f4 f4 01 c0       	mov    al,ds:0xc001f4f4
c00082a5:	83 f0 01             	xor    eax,0x1
c00082a8:	84 c0                	test   al,al
c00082aa:	0f 84 54 01 00 00    	je     c0008404 <UnixFile::UnixFile(int)+0x1aa>
c00082b0:	c6 05 f4 f4 01 c0 01 	mov    BYTE PTR ds:0xc001f4f4,0x1
c00082b7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00082bf:	83 ec 0c             	sub    esp,0xc
c00082c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082c6:	e8 96 e8 ff ff       	call   c0006b61 <malloc>
c00082cb:	83 c4 10             	add    esp,0x10
c00082ce:	89 c3                	mov    ebx,eax
c00082d0:	83 ec 08             	sub    esp,0x8
c00082d3:	68 03 ff ff 0f       	push   0xfffff03
c00082d8:	53                   	push   ebx
c00082d9:	e8 2c 01 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c00082de:	83 c4 10             	add    esp,0x10
c00082e1:	89 1d ec f4 01 c0    	mov    DWORD PTR ds:0xc001f4ec,ebx
c00082e7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00082ef:	83 ec 0c             	sub    esp,0xc
c00082f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082f6:	e8 66 e8 ff ff       	call   c0006b61 <malloc>
c00082fb:	83 c4 10             	add    esp,0x10
c00082fe:	89 c3                	mov    ebx,eax
c0008300:	83 ec 08             	sub    esp,0x8
c0008303:	68 01 ff ff 0f       	push   0xfffff01
c0008308:	53                   	push   ebx
c0008309:	e8 fc 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c000830e:	83 c4 10             	add    esp,0x10
c0008311:	89 1d f0 f4 01 c0    	mov    DWORD PTR ds:0xc001f4f0,ebx
c0008317:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000831f:	83 ec 0c             	sub    esp,0xc
c0008322:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008326:	e8 36 e8 ff ff       	call   c0006b61 <malloc>
c000832b:	83 c4 10             	add    esp,0x10
c000832e:	89 c3                	mov    ebx,eax
c0008330:	83 ec 08             	sub    esp,0x8
c0008333:	68 00 ff ff 0f       	push   0xfffff00
c0008338:	53                   	push   ebx
c0008339:	e8 cc 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c000833e:	83 c4 10             	add    esp,0x10
c0008341:	89 1d e4 f4 01 c0    	mov    DWORD PTR ds:0xc001f4e4,ebx
c0008347:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000834f:	83 ec 0c             	sub    esp,0xc
c0008352:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008356:	e8 06 e8 ff ff       	call   c0006b61 <malloc>
c000835b:	83 c4 10             	add    esp,0x10
c000835e:	89 c3                	mov    ebx,eax
c0008360:	83 ec 08             	sub    esp,0x8
c0008363:	68 02 ff ff 0f       	push   0xfffff02
c0008368:	53                   	push   ebx
c0008369:	e8 9c 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c000836e:	83 c4 10             	add    esp,0x10
c0008371:	89 1d e8 f4 01 c0    	mov    DWORD PTR ds:0xc001f4e8,ebx
c0008377:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000837f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008384:	7f 7e                	jg     c0008404 <UnixFile::UnixFile(int)+0x1aa>
c0008386:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000838e:	83 ec 0c             	sub    esp,0xc
c0008391:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008395:	e8 c7 e7 ff ff       	call   c0006b61 <malloc>
c000839a:	83 c4 10             	add    esp,0x10
c000839d:	89 c3                	mov    ebx,eax
c000839f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083a3:	05 10 ff ff 0f       	add    eax,0xfffff10
c00083a8:	83 ec 08             	sub    esp,0x8
c00083ab:	50                   	push   eax
c00083ac:	53                   	push   ebx
c00083ad:	e8 58 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c00083b2:	83 c4 10             	add    esp,0x10
c00083b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083b9:	89 1c 85 c0 f4 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0b40],ebx
c00083c0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00083c8:	83 ec 0c             	sub    esp,0xc
c00083cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00083cf:	e8 8d e7 ff ff       	call   c0006b61 <malloc>
c00083d4:	83 c4 10             	add    esp,0x10
c00083d7:	89 c3                	mov    ebx,eax
c00083d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083dd:	05 20 ff ff 0f       	add    eax,0xfffff20
c00083e2:	83 ec 08             	sub    esp,0x8
c00083e5:	50                   	push   eax
c00083e6:	53                   	push   ebx
c00083e7:	e8 1e 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c00083ec:	83 c4 10             	add    esp,0x10
c00083ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083f3:	89 1c 85 80 f4 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0b80],ebx
c00083fa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00083fe:	e9 7c ff ff ff       	jmp    c000837f <UnixFile::UnixFile(int)+0x125>
c0008403:	90                   	nop
c0008404:	83 c4 28             	add    esp,0x28
c0008407:	5b                   	pop    ebx
c0008408:	c3                   	ret    
c0008409:	90                   	nop

c000840a <ReservedFilename::ReservedFilename(int)>:
c000840a:	83 ec 0c             	sub    esp,0xc
c000840d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008411:	83 ec 08             	sub    esp,0x8
c0008414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008418:	50                   	push   eax
c0008419:	e8 3c fe ff ff       	call   c000825a <UnixFile::UnixFile(int)>
c000841e:	83 c4 10             	add    esp,0x10
c0008421:	ba b4 ce 01 c0       	mov    edx,0xc001ceb4
c0008426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842a:	89 10                	mov    DWORD PTR [eax],edx
c000842c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008430:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008434:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008437:	90                   	nop
c0008438:	83 c4 0c             	add    esp,0xc
c000843b:	c3                   	ret    

c000843c <UnixFile::~UnixFile()>:
c000843c:	83 ec 1c             	sub    esp,0x1c
c000843f:	ba 98 ce 01 c0       	mov    edx,0xc001ce98
c0008444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008448:	89 10                	mov    DWORD PTR [eax],edx
c000844a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000844e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008451:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0008456:	7f 73                	jg     c00084cb <UnixFile::~UnixFile()+0x8f>
c0008458:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008460:	83 ec 0c             	sub    esp,0xc
c0008463:	68 f8 f4 01 c0       	push   0xc001f4f8
c0008468:	e8 af 35 01 00       	call   c001ba1c <LinkedList<UnixFile>::getFirstElement()>
c000846d:	83 c4 10             	add    esp,0x10
c0008470:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008474:	83 ec 0c             	sub    esp,0xc
c0008477:	68 f8 f4 01 c0       	push   0xc001f4f8
c000847c:	e8 a3 35 01 00       	call   c001ba24 <LinkedList<UnixFile>::removeFirst()>
c0008481:	83 c4 10             	add    esp,0x10
c0008484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008488:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000848c:	74 40                	je     c00084ce <UnixFile::~UnixFile()+0x92>
c000848e:	83 ec 08             	sub    esp,0x8
c0008491:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008495:	68 f8 f4 01 c0       	push   0xc001f4f8
c000849a:	e8 a9 34 01 00       	call   c001b948 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000849f:	83 c4 10             	add    esp,0x10
c00084a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084a6:	8d 50 01             	lea    edx,[eax+0x1]
c00084a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00084ad:	3d 88 13 00 00       	cmp    eax,0x1388
c00084b2:	0f 94 c0             	sete   al
c00084b5:	84 c0                	test   al,al
c00084b7:	74 a7                	je     c0008460 <UnixFile::~UnixFile()+0x24>
c00084b9:	83 ec 0c             	sub    esp,0xc
c00084bc:	68 70 ce 01 c0       	push   0xc001ce70
c00084c1:	e8 79 6f 00 00       	call   c000f43f <Krnl::panic(char const*)>
c00084c6:	83 c4 10             	add    esp,0x10
c00084c9:	eb 95                	jmp    c0008460 <UnixFile::~UnixFile()+0x24>
c00084cb:	90                   	nop
c00084cc:	eb 01                	jmp    c00084cf <UnixFile::~UnixFile()+0x93>
c00084ce:	90                   	nop
c00084cf:	90                   	nop
c00084d0:	83 c4 1c             	add    esp,0x1c
c00084d3:	c3                   	ret    

c00084d4 <UnixFile::~UnixFile()>:
c00084d4:	83 ec 0c             	sub    esp,0xc
c00084d7:	83 ec 0c             	sub    esp,0xc
c00084da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084de:	e8 59 ff ff ff       	call   c000843c <UnixFile::~UnixFile()>
c00084e3:	83 c4 10             	add    esp,0x10
c00084e6:	83 ec 08             	sub    esp,0x8
c00084e9:	6a 0c                	push   0xc
c00084eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ef:	e8 06 13 00 00       	call   c00097fa <operator delete(void*, unsigned long)>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	83 c4 0c             	add    esp,0xc
c00084fa:	c3                   	ret    
c00084fb:	90                   	nop

c00084fc <ReservedFilename::~ReservedFilename()>:
c00084fc:	83 ec 0c             	sub    esp,0xc
c00084ff:	ba b4 ce 01 c0       	mov    edx,0xc001ceb4
c0008504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008508:	89 10                	mov    DWORD PTR [eax],edx
c000850a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000850e:	83 ec 0c             	sub    esp,0xc
c0008511:	50                   	push   eax
c0008512:	e8 25 ff ff ff       	call   c000843c <UnixFile::~UnixFile()>
c0008517:	83 c4 10             	add    esp,0x10
c000851a:	90                   	nop
c000851b:	83 c4 0c             	add    esp,0xc
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <ReservedFilename::~ReservedFilename()>:
c0008520:	83 ec 0c             	sub    esp,0xc
c0008523:	83 ec 0c             	sub    esp,0xc
c0008526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000852a:	e8 cd ff ff ff       	call   c00084fc <ReservedFilename::~ReservedFilename()>
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	83 ec 08             	sub    esp,0x8
c0008535:	6a 0c                	push   0xc
c0008537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000853b:	e8 ba 12 00 00       	call   c00097fa <operator delete(void*, unsigned long)>
c0008540:	83 c4 10             	add    esp,0x10
c0008543:	83 c4 0c             	add    esp,0xc
c0008546:	c3                   	ret    

c0008547 <getFromFileDescriptor(int)>:
c0008547:	53                   	push   ebx
c0008548:	83 ec 08             	sub    esp,0x8
c000854b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000854f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0008555:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000855b:	7f 2c                	jg     c0008589 <getFromFileDescriptor(int)+0x42>
c000855d:	83 ec 0c             	sub    esp,0xc
c0008560:	68 f8 f4 01 c0       	push   0xc001f4f8
c0008565:	e8 b2 34 01 00       	call   c001ba1c <LinkedList<UnixFile>::getFirstElement()>
c000856a:	83 c4 10             	add    esp,0x10
c000856d:	85 c0                	test   eax,eax
c000856f:	75 04                	jne    c0008575 <getFromFileDescriptor(int)+0x2e>
c0008571:	31 c0                	xor    eax,eax
c0008573:	eb 6e                	jmp    c00085e3 <getFromFileDescriptor(int)+0x9c>
c0008575:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0008578:	74 69                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c000857a:	52                   	push   edx
c000857b:	52                   	push   edx
c000857c:	50                   	push   eax
c000857d:	68 f8 f4 01 c0       	push   0xc001f4f8
c0008582:	e8 3f 35 01 00       	call   c001bac6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0008587:	eb e1                	jmp    c000856a <getFromFileDescriptor(int)+0x23>
c0008589:	a1 ec f4 01 c0       	mov    eax,ds:0xc001f4ec
c000858e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0008594:	74 4d                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c0008596:	a1 f0 f4 01 c0       	mov    eax,ds:0xc001f4f0
c000859b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00085a1:	74 40                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c00085a3:	a1 e8 f4 01 c0       	mov    eax,ds:0xc001f4e8
c00085a8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00085ae:	74 33                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c00085b0:	a1 e4 f4 01 c0       	mov    eax,ds:0xc001f4e4
c00085b5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00085bb:	74 26                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c00085bd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00085c3:	83 f8 08             	cmp    eax,0x8
c00085c6:	77 09                	ja     c00085d1 <getFromFileDescriptor(int)+0x8a>
c00085c8:	8b 04 85 c0 f4 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0b40]
c00085cf:	eb 12                	jmp    c00085e3 <getFromFileDescriptor(int)+0x9c>
c00085d1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00085d7:	83 fb 08             	cmp    ebx,0x8
c00085da:	77 95                	ja     c0008571 <getFromFileDescriptor(int)+0x2a>
c00085dc:	8b 04 9d 80 f4 01 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffe0b80]
c00085e3:	83 c4 08             	add    esp,0x8
c00085e6:	5b                   	pop    ebx
c00085e7:	c3                   	ret    

c00085e8 <__static_initialization_and_destruction_0(int, int)>:
c00085e8:	83 ec 0c             	sub    esp,0xc
c00085eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00085f0:	75 34                	jne    c0008626 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00085f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085fa:	75 2a                	jne    c0008626 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00085fc:	83 ec 0c             	sub    esp,0xc
c00085ff:	68 f8 f4 01 c0       	push   0xc001f4f8
c0008604:	e8 fd 32 01 00       	call   c001b906 <LinkedList<UnixFile>::LinkedList()>
c0008609:	83 c4 10             	add    esp,0x10
c000860c:	83 ec 04             	sub    esp,0x4
c000860f:	68 ec eb 01 c0       	push   0xc001ebec
c0008614:	68 f8 f4 01 c0       	push   0xc001f4f8
c0008619:	68 04 b9 01 c0       	push   0xc001b904
c000861e:	e8 87 11 00 00       	call   c00097aa <__cxa_atexit>
c0008623:	83 c4 10             	add    esp,0x10
c0008626:	90                   	nop
c0008627:	83 c4 0c             	add    esp,0xc
c000862a:	c3                   	ret    

c000862b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000862b:	83 ec 0c             	sub    esp,0xc
c000862e:	83 ec 08             	sub    esp,0x8
c0008631:	68 ff ff 00 00       	push   0xffff
c0008636:	6a 01                	push   0x1
c0008638:	e8 ab ff ff ff       	call   c00085e8 <__static_initialization_and_destruction_0(int, int)>
c000863d:	83 c4 10             	add    esp,0x10
c0008640:	83 c4 0c             	add    esp,0xc
c0008643:	c3                   	ret    

c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0008644:	53                   	push   ebx
c0008645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008649:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000864d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0008653:	89 c8                	mov    eax,ecx
c0008655:	d1 e8                	shr    eax,1
c0008657:	03 05 c8 ed 01 c0    	add    eax,DWORD PTR ds:0xc001edc8
c000865d:	83 e1 01             	and    ecx,0x1
c0008660:	8a 10                	mov    dl,BYTE PTR [eax]
c0008662:	75 09                	jne    c000866d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0008664:	83 e2 f0             	and    edx,0xfffffff0
c0008667:	09 da                	or     edx,ebx
c0008669:	88 10                	mov    BYTE PTR [eax],dl
c000866b:	5b                   	pop    ebx
c000866c:	c3                   	ret    
c000866d:	c1 e3 04             	shl    ebx,0x4
c0008670:	83 e2 0f             	and    edx,0xf
c0008673:	09 da                	or     edx,ebx
c0008675:	88 10                	mov    BYTE PTR [eax],dl
c0008677:	5b                   	pop    ebx
c0008678:	c3                   	ret    

c0008679 <Virt::getPageState(unsigned long)>:
c0008679:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000867d:	8b 0d c8 ed 01 c0    	mov    ecx,DWORD PTR ds:0xc001edc8
c0008683:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0008689:	89 d0                	mov    eax,edx
c000868b:	d1 e8                	shr    eax,1
c000868d:	83 e2 01             	and    edx,0x1
c0008690:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0008693:	75 04                	jne    c0008699 <Virt::getPageState(unsigned long)+0x20>
c0008695:	83 e0 0f             	and    eax,0xf
c0008698:	c3                   	ret    
c0008699:	c0 e8 04             	shr    al,0x4
c000869c:	c3                   	ret    

c000869d <Virt::allocateKernelVirtualPages(int)>:
c000869d:	55                   	push   ebp
c000869e:	31 ed                	xor    ebp,ebp
c00086a0:	57                   	push   edi
c00086a1:	56                   	push   esi
c00086a2:	53                   	push   ebx
c00086a3:	31 db                	xor    ebx,ebx
c00086a5:	83 ec 1c             	sub    esp,0x1c
c00086a8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00086ac:	8b 3d c4 ed 01 c0    	mov    edi,DWORD PTR ds:0xc001edc4
c00086b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00086b7:	57                   	push   edi
c00086b8:	e8 bc ff ff ff       	call   c0008679 <Virt::getPageState(unsigned long)>
c00086bd:	5a                   	pop    edx
c00086be:	84 c0                	test   al,al
c00086c0:	75 3a                	jne    c00086fc <Virt::allocateKernelVirtualPages(int)+0x5f>
c00086c2:	85 db                	test   ebx,ebx
c00086c4:	75 02                	jne    c00086c8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00086c6:	89 fd                	mov    ebp,edi
c00086c8:	43                   	inc    ebx
c00086c9:	39 f3                	cmp    ebx,esi
c00086cb:	74 5a                	je     c0008727 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00086cd:	47                   	inc    edi
c00086ce:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00086d4:	76 31                	jbe    c0008707 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00086d6:	c7 05 c4 ed 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001edc4,0xc8000
c00086e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00086e5:	75 28                	jne    c000870f <Virt::allocateKernelVirtualPages(int)+0x72>
c00086e7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00086ec:	bf 00 80 0c 00       	mov    edi,0xc8000
c00086f1:	57                   	push   edi
c00086f2:	e8 82 ff ff ff       	call   c0008679 <Virt::getPageState(unsigned long)>
c00086f7:	5a                   	pop    edx
c00086f8:	84 c0                	test   al,al
c00086fa:	74 c6                	je     c00086c2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00086fc:	31 db                	xor    ebx,ebx
c00086fe:	47                   	inc    edi
c00086ff:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0008705:	77 cf                	ja     c00086d6 <Virt::allocateKernelVirtualPages(int)+0x39>
c0008707:	89 3d c4 ed 01 c0    	mov    DWORD PTR ds:0xc001edc4,edi
c000870d:	eb a8                	jmp    c00086b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000870f:	83 ec 0c             	sub    esp,0xc
c0008712:	68 c8 ce 01 c0       	push   0xc001cec8
c0008717:	e8 23 6d 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000871c:	8b 3d c4 ed 01 c0    	mov    edi,DWORD PTR ds:0xc001edc4
c0008722:	83 c4 10             	add    esp,0x10
c0008725:	eb 90                	jmp    c00086b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0008727:	89 2d c4 ed 01 c0    	mov    DWORD PTR ds:0xc001edc4,ebp
c000872d:	4b                   	dec    ebx
c000872e:	74 5f                	je     c000878f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0008730:	85 f6                	test   esi,esi
c0008732:	74 3d                	je     c0008771 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0008734:	89 e8                	mov    eax,ebp
c0008736:	31 db                	xor    ebx,ebx
c0008738:	8d 7e ff             	lea    edi,[esi-0x1]
c000873b:	eb 14                	jmp    c0008751 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000873d:	6a 01                	push   0x1
c000873f:	43                   	inc    ebx
c0008740:	50                   	push   eax
c0008741:	e8 fe fe ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008746:	58                   	pop    eax
c0008747:	39 f3                	cmp    ebx,esi
c0008749:	5a                   	pop    edx
c000874a:	74 25                	je     c0008771 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000874c:	a1 c4 ed 01 c0       	mov    eax,ds:0xc001edc4
c0008751:	8d 50 01             	lea    edx,[eax+0x1]
c0008754:	85 db                	test   ebx,ebx
c0008756:	89 15 c4 ed 01 c0    	mov    DWORD PTR ds:0xc001edc4,edx
c000875c:	74 20                	je     c000877e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000875e:	39 df                	cmp    edi,ebx
c0008760:	75 db                	jne    c000873d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0008762:	6a 03                	push   0x3
c0008764:	43                   	inc    ebx
c0008765:	50                   	push   eax
c0008766:	e8 d9 fe ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000876b:	59                   	pop    ecx
c000876c:	39 f3                	cmp    ebx,esi
c000876e:	58                   	pop    eax
c000876f:	75 db                	jne    c000874c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0008771:	83 c4 1c             	add    esp,0x1c
c0008774:	89 e8                	mov    eax,ebp
c0008776:	5b                   	pop    ebx
c0008777:	c1 e0 0c             	shl    eax,0xc
c000877a:	5e                   	pop    esi
c000877b:	5f                   	pop    edi
c000877c:	5d                   	pop    ebp
c000877d:	c3                   	ret    
c000877e:	6a 02                	push   0x2
c0008780:	bb 01 00 00 00       	mov    ebx,0x1
c0008785:	50                   	push   eax
c0008786:	e8 b9 fe ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000878b:	58                   	pop    eax
c000878c:	5a                   	pop    edx
c000878d:	eb bd                	jmp    c000874c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000878f:	6a 04                	push   0x4
c0008791:	8d 45 01             	lea    eax,[ebp+0x1]
c0008794:	55                   	push   ebp
c0008795:	a3 c4 ed 01 c0       	mov    ds:0xc001edc4,eax
c000879a:	e8 a5 fe ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000879f:	59                   	pop    ecx
c00087a0:	89 e8                	mov    eax,ebp
c00087a2:	5b                   	pop    ebx
c00087a3:	c1 e0 0c             	shl    eax,0xc
c00087a6:	83 c4 1c             	add    esp,0x1c
c00087a9:	5b                   	pop    ebx
c00087aa:	5e                   	pop    esi
c00087ab:	5f                   	pop    edi
c00087ac:	5d                   	pop    ebp
c00087ad:	c3                   	ret    

c00087ae <Virt::freeSwapfilePage(unsigned long)>:
c00087ae:	53                   	push   ebx
c00087af:	8b 15 0c f5 01 c0    	mov    edx,DWORD PTR ds:0xc001f50c
c00087b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00087b9:	b8 01 00 00 00       	mov    eax,0x1
c00087be:	89 cb                	mov    ebx,ecx
c00087c0:	d3 e0                	shl    eax,cl
c00087c2:	c1 eb 05             	shr    ebx,0x5
c00087c5:	f7 d0                	not    eax
c00087c7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00087ca:	5b                   	pop    ebx
c00087cb:	c3                   	ret    

c00087cc <Virt::swapIDToSector(unsigned long)>:
c00087cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087d0:	0f af 05 cc ed 01 c0 	imul   eax,DWORD PTR ds:0xc001edcc
c00087d7:	03 05 d4 ed 01 c0    	add    eax,DWORD PTR ds:0xc001edd4
c00087dd:	c3                   	ret    

c00087de <Virt::allocateSwapfilePage()>:
c00087de:	55                   	push   ebp
c00087df:	31 d2                	xor    edx,edx
c00087e1:	57                   	push   edi
c00087e2:	56                   	push   esi
c00087e3:	53                   	push   ebx
c00087e4:	83 ec 0c             	sub    esp,0xc
c00087e7:	8b 0d cc ed 01 c0    	mov    ecx,DWORD PTR ds:0xc001edcc
c00087ed:	a1 d0 ed 01 c0       	mov    eax,ds:0xc001edd0
c00087f2:	f7 f1                	div    ecx
c00087f4:	39 0d d0 ed 01 c0    	cmp    DWORD PTR ds:0xc001edd0,ecx
c00087fa:	72 2d                	jb     c0008829 <Virt::allocateSwapfilePage()+0x4b>
c00087fc:	8b 35 0c f5 01 c0    	mov    esi,DWORD PTR ds:0xc001f50c
c0008802:	8b 16                	mov    edx,DWORD PTR [esi]
c0008804:	f6 c2 01             	test   dl,0x1
c0008807:	74 3c                	je     c0008845 <Virt::allocateSwapfilePage()+0x67>
c0008809:	31 c9                	xor    ecx,ecx
c000880b:	bf 01 00 00 00       	mov    edi,0x1
c0008810:	eb 12                	jmp    c0008824 <Virt::allocateSwapfilePage()+0x46>
c0008812:	89 fd                	mov    ebp,edi
c0008814:	89 ca                	mov    edx,ecx
c0008816:	d3 e5                	shl    ebp,cl
c0008818:	c1 ea 05             	shr    edx,0x5
c000881b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000881e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008820:	85 ea                	test   edx,ebp
c0008822:	74 2a                	je     c000884e <Virt::allocateSwapfilePage()+0x70>
c0008824:	41                   	inc    ecx
c0008825:	39 c8                	cmp    eax,ecx
c0008827:	77 e9                	ja     c0008812 <Virt::allocateSwapfilePage()+0x34>
c0008829:	83 ec 0c             	sub    esp,0xc
c000882c:	68 2f d0 01 c0       	push   0xc001d02f
c0008831:	e8 09 6c 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0008836:	83 c4 10             	add    esp,0x10
c0008839:	31 c9                	xor    ecx,ecx
c000883b:	83 c4 0c             	add    esp,0xc
c000883e:	89 c8                	mov    eax,ecx
c0008840:	5b                   	pop    ebx
c0008841:	5e                   	pop    esi
c0008842:	5f                   	pop    edi
c0008843:	5d                   	pop    ebp
c0008844:	c3                   	ret    
c0008845:	89 f3                	mov    ebx,esi
c0008847:	bd 01 00 00 00       	mov    ebp,0x1
c000884c:	31 c9                	xor    ecx,ecx
c000884e:	09 ea                	or     edx,ebp
c0008850:	89 c8                	mov    eax,ecx
c0008852:	89 13                	mov    DWORD PTR [ebx],edx
c0008854:	83 c4 0c             	add    esp,0xc
c0008857:	5b                   	pop    ebx
c0008858:	5e                   	pop    esi
c0008859:	5f                   	pop    edi
c000885a:	5d                   	pop    ebp
c000885b:	c3                   	ret    

c000885c <Virt::virtualMemorySetup()>:
c000885c:	53                   	push   ebx
c000885d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0008862:	6a 0f                	push   0xf
c0008864:	53                   	push   ebx
c0008865:	43                   	inc    ebx
c0008866:	e8 d9 fd ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000886b:	58                   	pop    eax
c000886c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0008872:	5a                   	pop    edx
c0008873:	75 ed                	jne    c0008862 <Virt::virtualMemorySetup()+0x6>
c0008875:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000887a:	6a 00                	push   0x0
c000887c:	53                   	push   ebx
c000887d:	43                   	inc    ebx
c000887e:	e8 c1 fd ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008883:	59                   	pop    ecx
c0008884:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000888a:	58                   	pop    eax
c000888b:	75 ed                	jne    c000887a <Virt::virtualMemorySetup()+0x1e>
c000888d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0008892:	6a 0f                	push   0xf
c0008894:	53                   	push   ebx
c0008895:	43                   	inc    ebx
c0008896:	e8 a9 fd ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000889b:	58                   	pop    eax
c000889c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00088a2:	5a                   	pop    edx
c00088a3:	75 ed                	jne    c0008892 <Virt::virtualMemorySetup()+0x36>
c00088a5:	5b                   	pop    ebx
c00088a6:	c3                   	ret    

c00088a7 <Virt::setupPageSwapping(int)>:
c00088a7:	53                   	push   ebx
c00088a8:	83 ec 0c             	sub    esp,0xc
c00088ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00088af:	a1 88 19 02 c0       	mov    eax,ds:0xc0021988
c00088b4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00088ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00088bc:	53                   	push   ebx
c00088bd:	c1 e3 0b             	shl    ebx,0xb
c00088c0:	68 46 d0 01 c0       	push   0xc001d046
c00088c5:	50                   	push   eax
c00088c6:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00088c9:	89 1d d0 ed 01 c0    	mov    DWORD PTR ds:0xc001edd0,ebx
c00088cf:	c6 05 d8 ed 01 c0 43 	mov    BYTE PTR ds:0xc001edd8,0x43
c00088d6:	c1 eb 08             	shr    ebx,0x8
c00088d9:	a3 d4 ed 01 c0       	mov    ds:0xc001edd4,eax
c00088de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00088e1:	c7 05 cc ed 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001edcc,0x8
c00088eb:	e8 71 e2 ff ff       	call   c0006b61 <malloc>
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	89 c1                	mov    ecx,eax
c00088f5:	a3 0c f5 01 c0       	mov    ds:0xc001f50c,eax
c00088fa:	31 d2                	xor    edx,edx
c00088fc:	a1 d0 ed 01 c0       	mov    eax,ds:0xc001edd0
c0008901:	f7 35 cc ed 01 c0    	div    DWORD PTR ds:0xc001edcc
c0008907:	c1 e8 05             	shr    eax,0x5
c000890a:	50                   	push   eax
c000890b:	6a 00                	push   0x0
c000890d:	51                   	push   ecx
c000890e:	e8 dd 7b ff ff       	call   c00004f0 <memset>
c0008913:	83 c4 18             	add    esp,0x18
c0008916:	5b                   	pop    ebx
c0008917:	c3                   	ret    

c0008918 <VAS::VAS()>:
c0008918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000891c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008923:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008927:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000892e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008932:	a3 10 f5 01 c0       	mov    ds:0xc001f510,eax
c0008937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000893b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000893f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008943:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0008946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000894a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0008951:	90                   	nop
c0008952:	c3                   	ret    
c0008953:	90                   	nop

c0008954 <VAS::VAS(VAS*)>:
c0008954:	83 ec 0c             	sub    esp,0xc
c0008957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008966:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000896d:	83 ec 0c             	sub    esp,0xc
c0008970:	68 e8 ce 01 c0       	push   0xc001cee8
c0008975:	e8 c5 6a 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000897a:	83 c4 10             	add    esp,0x10
c000897d:	90                   	nop
c000897e:	83 c4 0c             	add    esp,0xc
c0008981:	c3                   	ret    

c0008982 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0008982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008986:	89 c2                	mov    edx,eax
c0008988:	c1 e8 0a             	shr    eax,0xa
c000898b:	c1 ea 16             	shr    edx,0x16
c000898e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008993:	19 c9                	sbb    ecx,ecx
c0008995:	c1 e2 0c             	shl    edx,0xc
c0008998:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000899e:	25 fc 0f 00 00       	and    eax,0xffc
c00089a3:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00089aa:	01 d0                	add    eax,edx
c00089ac:	c3                   	ret    
c00089ad:	90                   	nop

c00089ae <VAS::getPageTableEntry(unsigned long)>:
c00089ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00089b2:	89 ca                	mov    edx,ecx
c00089b4:	c1 e9 0a             	shr    ecx,0xa
c00089b7:	c1 ea 16             	shr    edx,0x16
c00089ba:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00089c0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00089c6:	c1 e0 0c             	shl    eax,0xc
c00089c9:	8d 04 08             	lea    eax,[eax+ecx*1]
c00089cc:	c3                   	ret    

c00089cd <Virt::freeKernelVirtualPages(unsigned long)>:
c00089cd:	57                   	push   edi
c00089ce:	56                   	push   esi
c00089cf:	be 01 00 00 00       	mov    esi,0x1
c00089d4:	53                   	push   ebx
c00089d5:	83 ec 10             	sub    esp,0x10
c00089d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089dc:	c1 eb 0c             	shr    ebx,0xc
c00089df:	eb 3f                	jmp    c0008a20 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00089e1:	83 ec 08             	sub    esp,0x8
c00089e4:	a1 10 f5 01 c0       	mov    eax,ds:0xc001f510
c00089e9:	57                   	push   edi
c00089ea:	50                   	push   eax
c00089eb:	e8 be ff ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00089f5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00089f9:	f6 c4 04             	test   ah,0x4
c00089fc:	75 60                	jne    c0008a5e <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00089fe:	80 fa 04             	cmp    dl,0x4
c0008a01:	74 79                	je     c0008a7c <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0008a03:	80 fa 02             	cmp    dl,0x2
c0008a06:	0f 84 89 00 00 00    	je     c0008a95 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0008a0c:	80 fa 03             	cmp    dl,0x3
c0008a0f:	0f 84 ae 00 00 00    	je     c0008ac3 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0008a15:	fe ca                	dec    dl
c0008a17:	0f 84 93 00 00 00    	je     c0008ab0 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0008a1d:	43                   	inc    ebx
c0008a1e:	31 f6                	xor    esi,esi
c0008a20:	53                   	push   ebx
c0008a21:	89 df                	mov    edi,ebx
c0008a23:	e8 51 fc ff ff       	call   c0008679 <Virt::getPageState(unsigned long)>
c0008a28:	c1 e7 0c             	shl    edi,0xc
c0008a2b:	5a                   	pop    edx
c0008a2c:	84 c0                	test   al,al
c0008a2e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008a32:	75 ad                	jne    c00089e1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0008a34:	83 ec 0c             	sub    esp,0xc
c0008a37:	68 5d d0 01 c0       	push   0xc001d05d
c0008a3c:	e8 fe 69 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0008a41:	5a                   	pop    edx
c0008a42:	59                   	pop    ecx
c0008a43:	57                   	push   edi
c0008a44:	8b 3d 10 f5 01 c0    	mov    edi,DWORD PTR ds:0xc001f510
c0008a4a:	57                   	push   edi
c0008a4b:	e8 5e ff ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c0008a50:	83 c4 10             	add    esp,0x10
c0008a53:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a55:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008a59:	f6 c4 04             	test   ah,0x4
c0008a5c:	74 bf                	je     c0008a1d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008a5e:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0008a62:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008a67:	83 ec 0c             	sub    esp,0xc
c0008a6a:	50                   	push   eax
c0008a6b:	e8 5c e4 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008a77:	80 fa 04             	cmp    dl,0x4
c0008a7a:	75 87                	jne    c0008a03 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0008a7c:	89 f0                	mov    eax,esi
c0008a7e:	84 c0                	test   al,al
c0008a80:	75 47                	jne    c0008ac9 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0008a82:	c7 44 24 20 0c cf 01 c0 	mov    DWORD PTR [esp+0x20],0xc001cf0c
c0008a8a:	83 c4 10             	add    esp,0x10
c0008a8d:	5b                   	pop    ebx
c0008a8e:	5e                   	pop    esi
c0008a8f:	5f                   	pop    edi
c0008a90:	e9 aa 69 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c0008a95:	89 f0                	mov    eax,esi
c0008a97:	84 c0                	test   al,al
c0008a99:	75 15                	jne    c0008ab0 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	68 79 d0 01 c0       	push   0xc001d079
c0008aa3:	e8 97 69 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0008aa8:	83 c4 10             	add    esp,0x10
c0008aab:	e9 6d ff ff ff       	jmp    c0008a1d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008ab0:	83 ec 08             	sub    esp,0x8
c0008ab3:	6a 00                	push   0x0
c0008ab5:	53                   	push   ebx
c0008ab6:	e8 89 fb ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008abb:	83 c4 10             	add    esp,0x10
c0008abe:	e9 5a ff ff ff       	jmp    c0008a1d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008ac3:	89 f0                	mov    eax,esi
c0008ac5:	84 c0                	test   al,al
c0008ac7:	75 15                	jne    c0008ade <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0008ac9:	83 ec 08             	sub    esp,0x8
c0008acc:	6a 00                	push   0x0
c0008ace:	53                   	push   ebx
c0008acf:	e8 70 fb ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008ad4:	83 c4 10             	add    esp,0x10
c0008ad7:	83 c4 10             	add    esp,0x10
c0008ada:	5b                   	pop    ebx
c0008adb:	5e                   	pop    esi
c0008adc:	5f                   	pop    edi
c0008add:	c3                   	ret    
c0008ade:	c7 44 24 20 95 d0 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d095
c0008ae6:	83 c4 10             	add    esp,0x10
c0008ae9:	5b                   	pop    ebx
c0008aea:	5e                   	pop    esi
c0008aeb:	5f                   	pop    edi
c0008aec:	e9 4e 69 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c0008af1:	90                   	nop

c0008af2 <VAS::freeAllocatedPages(unsigned long)>:
c0008af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008af6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008afa:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0008afe:	74 09                	je     c0008b09 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0008b00:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008b04:	e9 c4 fe ff ff       	jmp    c00089cd <Virt::freeKernelVirtualPages(unsigned long)>
c0008b09:	c7 44 24 04 30 cf 01 c0 	mov    DWORD PTR [esp+0x4],0xc001cf30
c0008b11:	e9 da 0d 00 00       	jmp    c00098f0 <Dbg::kprintf(char const*, ...)>

c0008b16 <VAS::virtualToPhysical(unsigned long)>:
c0008b16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008b1a:	50                   	push   eax
c0008b1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b1f:	52                   	push   edx
c0008b20:	e8 89 fe ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c0008b25:	59                   	pop    ecx
c0008b26:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b28:	5a                   	pop    edx
c0008b29:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008b2e:	c3                   	ret    
c0008b2f:	90                   	nop

c0008b30 <VAS::reflagRange(unsigned long, int, int, int)>:
c0008b30:	55                   	push   ebp
c0008b31:	57                   	push   edi
c0008b32:	56                   	push   esi
c0008b33:	53                   	push   ebx
c0008b34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008b38:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0008b3c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b40:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0008b44:	85 db                	test   ebx,ebx
c0008b46:	7e 22                	jle    c0008b6a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0008b48:	c1 e3 0c             	shl    ebx,0xc
c0008b4b:	01 f3                	add    ebx,esi
c0008b4d:	56                   	push   esi
c0008b4e:	81 c6 00 10 00 00    	add    esi,0x1000
c0008b54:	55                   	push   ebp
c0008b55:	e8 54 fe ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c0008b5a:	5a                   	pop    edx
c0008b5b:	59                   	pop    ecx
c0008b5c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b5e:	21 f9                	and    ecx,edi
c0008b60:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0008b64:	39 f3                	cmp    ebx,esi
c0008b66:	89 08                	mov    DWORD PTR [eax],ecx
c0008b68:	75 e3                	jne    c0008b4d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0008b6a:	5b                   	pop    ebx
c0008b6b:	5e                   	pop    esi
c0008b6c:	5f                   	pop    edi
c0008b6d:	5d                   	pop    ebp
c0008b6e:	c3                   	ret    
c0008b6f:	90                   	nop

c0008b70 <VAS::setToWriteCombining(unsigned long, int)>:
c0008b70:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0008b75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008b7b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0008b82:	75 01                	jne    c0008b85 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0008b84:	c3                   	ret    
c0008b85:	68 80 00 00 00       	push   0x80
c0008b8a:	6a ff                	push   0xffffffff
c0008b8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b90:	50                   	push   eax
c0008b91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008b95:	52                   	push   edx
c0008b96:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b9a:	51                   	push   ecx
c0008b9b:	e8 90 ff ff ff       	call   c0008b30 <VAS::reflagRange(unsigned long, int, int, int)>
c0008ba0:	83 c4 14             	add    esp,0x14
c0008ba3:	c3                   	ret    

c0008ba4 <VAS::mapOtherVASIn(bool, VAS*)>:
c0008ba4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008ba9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bad:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0008bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bb4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0008bb7:	19 c0                	sbb    eax,eax
c0008bb9:	83 ca 03             	or     edx,0x3
c0008bbc:	83 e0 fc             	and    eax,0xfffffffc
c0008bbf:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0008bc6:	0f 20 d8             	mov    eax,cr3
c0008bc9:	0f 22 d8             	mov    cr3,eax
c0008bcc:	c3                   	ret    
c0008bcd:	90                   	nop

c0008bce <VAS::~VAS()>:
c0008bce:	83 ec 2c             	sub    esp,0x2c
c0008bd1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008bd9:	fa                   	cli    
c0008bda:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0008bdf:	40                   	inc    eax
c0008be0:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0008be5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008bef:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008bf5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008bf9:	6a 01                	push   0x1
c0008bfb:	50                   	push   eax
c0008bfc:	e8 a3 ff ff ff       	call   c0008ba4 <VAS::mapOtherVASIn(bool, VAS*)>
c0008c01:	83 c4 0c             	add    esp,0xc
c0008c04:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c0c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0008c14:	0f 8f d4 00 00 00    	jg     c0008cee <VAS::~VAS()+0x120>
c0008c1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c1e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008c21:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c25:	c1 e2 02             	shl    edx,0x2
c0008c28:	01 d0                	add    eax,edx
c0008c2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c34:	83 e0 01             	and    eax,0x1
c0008c37:	0f 84 a8 00 00 00    	je     c0008ce5 <VAS::~VAS()+0x117>
c0008c3d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0008c45:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0008c4d:	7f 72                	jg     c0008cc1 <VAS::~VAS()+0xf3>
c0008c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008c53:	c1 e0 0a             	shl    eax,0xa
c0008c56:	89 c2                	mov    edx,eax
c0008c58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c5c:	01 d0                	add    eax,edx
c0008c5e:	c1 e0 0c             	shl    eax,0xc
c0008c61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c65:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c6c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008c6f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008c75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008c79:	6a 01                	push   0x1
c0008c7b:	50                   	push   eax
c0008c7c:	e8 01 fd ff ff       	call   c0008982 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0008c81:	83 c4 0c             	add    esp,0xc
c0008c84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c96:	25 01 04 00 00       	and    eax,0x401
c0008c9b:	3d 01 04 00 00       	cmp    eax,0x401
c0008ca0:	75 19                	jne    c0008cbb <VAS::~VAS()+0xed>
c0008ca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ca6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	50                   	push   eax
c0008caf:	e8 18 e2 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c0008cb4:	83 c4 10             	add    esp,0x10
c0008cb7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008cbb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0008cbf:	eb 84                	jmp    c0008c45 <VAS::~VAS()+0x77>
c0008cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc5:	25 00 04 00 00       	and    eax,0x400
c0008cca:	74 19                	je     c0008ce5 <VAS::~VAS()+0x117>
c0008ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008cd5:	83 ec 0c             	sub    esp,0xc
c0008cd8:	50                   	push   eax
c0008cd9:	e8 ee e1 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c0008cde:	83 c4 10             	add    esp,0x10
c0008ce1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008ce5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0008ce9:	e9 1e ff ff ff       	jmp    c0008c0c <VAS::~VAS()+0x3e>
c0008cee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008cf2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cf5:	83 ec 0c             	sub    esp,0xc
c0008cf8:	50                   	push   eax
c0008cf9:	e8 cf fc ff ff       	call   c00089cd <Virt::freeKernelVirtualPages(unsigned long)>
c0008cfe:	83 c4 10             	add    esp,0x10
c0008d01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008d05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008d08:	83 ec 0c             	sub    esp,0xc
c0008d0b:	50                   	push   eax
c0008d0c:	e8 bb e1 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c0008d11:	83 c4 10             	add    esp,0x10
c0008d14:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008d18:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0008d1d:	48                   	dec    eax
c0008d1e:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0008d23:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0008d28:	85 c0                	test   eax,eax
c0008d2a:	75 01                	jne    c0008d2d <VAS::~VAS()+0x15f>
c0008d2c:	fb                   	sti    
c0008d2d:	90                   	nop
c0008d2e:	83 c4 2c             	add    esp,0x2c
c0008d31:	c3                   	ret    

c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0008d32:	55                   	push   ebp
c0008d33:	57                   	push   edi
c0008d34:	56                   	push   esi
c0008d35:	53                   	push   ebx
c0008d36:	83 ec 1c             	sub    esp,0x1c
c0008d39:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0008d3d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008d41:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0008d47:	77 0b                	ja     c0008d54 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0008d49:	0f 20 d8             	mov    eax,cr3
c0008d4c:	0f 20 d8             	mov    eax,cr3
c0008d4f:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0008d52:	75 47                	jne    c0008d9b <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0008d54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008d58:	09 d8                	or     eax,ebx
c0008d5a:	a9 ff 0f 00 00       	test   eax,0xfff
c0008d5f:	75 57                	jne    c0008db8 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0008d61:	89 de                	mov    esi,ebx
c0008d63:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008d66:	c1 ee 16             	shr    esi,0x16
c0008d69:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0008d70:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0008d74:	74 54                	je     c0008dca <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0008d76:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008d7a:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0008d80:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0008d84:	c1 e6 0c             	shl    esi,0xc
c0008d87:	c1 eb 0a             	shr    ebx,0xa
c0008d8a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0008d90:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0008d93:	83 c4 1c             	add    esp,0x1c
c0008d96:	5b                   	pop    ebx
c0008d97:	5e                   	pop    esi
c0008d98:	5f                   	pop    edi
c0008d99:	5d                   	pop    ebp
c0008d9a:	c3                   	ret    
c0008d9b:	83 ec 0c             	sub    esp,0xc
c0008d9e:	68 54 cf 01 c0       	push   0xc001cf54
c0008da3:	e8 48 0b 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0008da8:	83 c4 10             	add    esp,0x10
c0008dab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008daf:	09 d8                	or     eax,ebx
c0008db1:	a9 ff 0f 00 00       	test   eax,0xfff
c0008db6:	74 a9                	je     c0008d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008db8:	83 ec 0c             	sub    esp,0xc
c0008dbb:	68 bc cf 01 c0       	push   0xc001cfbc
c0008dc0:	e8 7a 66 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0008dc5:	83 c4 10             	add    esp,0x10
c0008dc8:	eb 97                	jmp    c0008d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008dca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dce:	e8 5b e1 ff ff       	call   c0006f2e <Phys::allocatePage()>
c0008dd3:	83 ec 0c             	sub    esp,0xc
c0008dd6:	89 c5                	mov    ebp,eax
c0008dd8:	8b 0d 10 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f510
c0008dde:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0008de2:	6a 01                	push   0x1
c0008de4:	e8 b4 f8 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0008de9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0008df0:	6a 01                	push   0x1
c0008df2:	50                   	push   eax
c0008df3:	55                   	push   ebp
c0008df4:	81 cd 07 04 00 00    	or     ebp,0x407
c0008dfa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008dfe:	51                   	push   ecx
c0008dff:	e8 28 02 00 00       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0008e04:	83 c4 1c             	add    esp,0x1c
c0008e07:	68 00 10 00 00       	push   0x1000
c0008e0c:	6a 00                	push   0x0
c0008e0e:	50                   	push   eax
c0008e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e13:	e8 d8 76 ff ff       	call   c00004f0 <memset>
c0008e18:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0008e1c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0008e1f:	e8 a9 fb ff ff       	call   c00089cd <Virt::freeKernelVirtualPages(unsigned long)>
c0008e24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e28:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0008e31:	e9 40 ff ff ff       	jmp    c0008d76 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0008e36 <VAS::allocatePages(int, int)>:
c0008e36:	55                   	push   ebp
c0008e37:	57                   	push   edi
c0008e38:	56                   	push   esi
c0008e39:	53                   	push   ebx
c0008e3a:	83 ec 1c             	sub    esp,0x1c
c0008e3d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008e41:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0008e46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e4c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0008e52:	83 e0 01             	and    eax,0x1
c0008e55:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0008e59:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0008e5d:	0f 85 cc 00 00 00    	jne    c0008f2f <VAS::allocatePages(int, int)+0xf9>
c0008e63:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008e66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e6a:	85 c0                	test   eax,eax
c0008e6c:	0f 84 a1 00 00 00    	je     c0008f13 <VAS::allocatePages(int, int)+0xdd>
c0008e72:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008e76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e7a:	c1 e6 0c             	shl    esi,0xc
c0008e7d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0008e81:	85 c0                	test   eax,eax
c0008e83:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0008e86:	7e 33                	jle    c0008ebb <VAS::allocatePages(int, int)+0x85>
c0008e88:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008e8c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008e90:	81 cd 00 04 00 00    	or     ebp,0x400
c0008e96:	e8 93 e0 ff ff       	call   c0006f2e <Phys::allocatePage()>
c0008e9b:	55                   	push   ebp
c0008e9c:	53                   	push   ebx
c0008e9d:	50                   	push   eax
c0008e9e:	57                   	push   edi
c0008e9f:	e8 8e fe ff ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008ea4:	83 c4 10             	add    esp,0x10
c0008ea7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008eac:	74 03                	je     c0008eb1 <VAS::allocatePages(int, int)+0x7b>
c0008eae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008eb1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008eb7:	39 de                	cmp    esi,ebx
c0008eb9:	75 db                	jne    c0008e96 <VAS::allocatePages(int, int)+0x60>
c0008ebb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008ec0:	75 12                	jne    c0008ed4 <VAS::allocatePages(int, int)+0x9e>
c0008ec2:	0f 20 d8             	mov    eax,cr3
c0008ec5:	0f 22 d8             	mov    cr3,eax
c0008ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ecc:	83 c4 1c             	add    esp,0x1c
c0008ecf:	5b                   	pop    ebx
c0008ed0:	5e                   	pop    esi
c0008ed1:	5f                   	pop    edi
c0008ed2:	5d                   	pop    ebp
c0008ed3:	c3                   	ret    
c0008ed4:	c1 ee 0a             	shr    esi,0xa
c0008ed7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008edb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0008ee1:	c1 eb 0a             	shr    ebx,0xa
c0008ee4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0008eea:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008ef0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008ef6:	39 c3                	cmp    ebx,eax
c0008ef8:	77 ce                	ja     c0008ec8 <VAS::allocatePages(int, int)+0x92>
c0008efa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008efd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008f03:	39 d8                	cmp    eax,ebx
c0008f05:	73 f3                	jae    c0008efa <VAS::allocatePages(int, int)+0xc4>
c0008f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f0b:	83 c4 1c             	add    esp,0x1c
c0008f0e:	5b                   	pop    ebx
c0008f0f:	5e                   	pop    esi
c0008f10:	5f                   	pop    edi
c0008f11:	5d                   	pop    ebp
c0008f12:	c3                   	ret    
c0008f13:	83 ec 0c             	sub    esp,0xc
c0008f16:	68 e0 cf 01 c0       	push   0xc001cfe0
c0008f1b:	e8 1f 65 00 00       	call   c000f43f <Krnl::panic(char const*)>
c0008f20:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008f23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f27:	83 c4 10             	add    esp,0x10
c0008f2a:	e9 43 ff ff ff       	jmp    c0008e72 <VAS::allocatePages(int, int)+0x3c>
c0008f2f:	83 ec 0c             	sub    esp,0xc
c0008f32:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0008f36:	51                   	push   ecx
c0008f37:	e8 61 f7 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0008f3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f40:	83 c4 10             	add    esp,0x10
c0008f43:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0008f48:	0f 87 9b 00 00 00    	ja     c0008fe9 <VAS::allocatePages(int, int)+0x1b3>
c0008f4e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0008f52:	85 d2                	test   edx,edx
c0008f54:	7e 3c                	jle    c0008f92 <VAS::allocatePages(int, int)+0x15c>
c0008f56:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008f5a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0008f5e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008f62:	c1 e5 0c             	shl    ebp,0xc
c0008f65:	81 ce 00 04 00 00    	or     esi,0x400
c0008f6b:	01 dd                	add    ebp,ebx
c0008f6d:	e8 bc df ff ff       	call   c0006f2e <Phys::allocatePage()>
c0008f72:	56                   	push   esi
c0008f73:	53                   	push   ebx
c0008f74:	50                   	push   eax
c0008f75:	57                   	push   edi
c0008f76:	e8 b7 fd ff ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008f7b:	83 c4 10             	add    esp,0x10
c0008f7e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f83:	74 03                	je     c0008f88 <VAS::allocatePages(int, int)+0x152>
c0008f85:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008f88:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008f8e:	39 dd                	cmp    ebp,ebx
c0008f90:	75 db                	jne    c0008f6d <VAS::allocatePages(int, int)+0x137>
c0008f92:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f97:	0f 84 25 ff ff ff    	je     c0008ec2 <VAS::allocatePages(int, int)+0x8c>
c0008f9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008fa1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008fa5:	89 d3                	mov    ebx,edx
c0008fa7:	c1 e0 0c             	shl    eax,0xc
c0008faa:	c1 eb 0a             	shr    ebx,0xa
c0008fad:	01 d0                	add    eax,edx
c0008faf:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008fb5:	c1 e8 0a             	shr    eax,0xa
c0008fb8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008fbe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008fc3:	2d 00 00 40 00       	sub    eax,0x400000
c0008fc8:	39 c3                	cmp    ebx,eax
c0008fca:	0f 87 f8 fe ff ff    	ja     c0008ec8 <VAS::allocatePages(int, int)+0x92>
c0008fd0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008fd3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008fd9:	39 d8                	cmp    eax,ebx
c0008fdb:	73 f3                	jae    c0008fd0 <VAS::allocatePages(int, int)+0x19a>
c0008fdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fe1:	83 c4 1c             	add    esp,0x1c
c0008fe4:	5b                   	pop    ebx
c0008fe5:	5e                   	pop    esi
c0008fe6:	5f                   	pop    edi
c0008fe7:	5d                   	pop    ebp
c0008fe8:	c3                   	ret    
c0008fe9:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0008fee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008ff4:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0008ffb:	0f 84 4d ff ff ff    	je     c0008f4e <VAS::allocatePages(int, int)+0x118>
c0009001:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009009:	e9 40 ff ff ff       	jmp    c0008f4e <VAS::allocatePages(int, int)+0x118>

c000900e <VAS::setCPUSpecific(unsigned long)>:
c000900e:	83 ec 0c             	sub    esp,0xc
c0009011:	6a 05                	push   0x5
c0009013:	68 00 00 40 c2       	push   0xc2400000
c0009018:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000901c:	50                   	push   eax
c000901d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009021:	52                   	push   edx
c0009022:	e8 0b fd ff ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009027:	83 c4 1c             	add    esp,0x1c
c000902a:	c3                   	ret    
c000902b:	90                   	nop

c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000902c:	55                   	push   ebp
c000902d:	57                   	push   edi
c000902e:	56                   	push   esi
c000902f:	53                   	push   ebx
c0009030:	83 ec 1c             	sub    esp,0x1c
c0009033:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0009038:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000903c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009042:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009046:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000904c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009050:	83 e0 01             	and    eax,0x1
c0009053:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009057:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000905b:	85 c0                	test   eax,eax
c000905d:	7e 39                	jle    c0009098 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000905f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009063:	89 f3                	mov    ebx,esi
c0009065:	c1 e0 0c             	shl    eax,0xc
c0009068:	01 f0                	add    eax,esi
c000906a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000906e:	55                   	push   ebp
c000906f:	53                   	push   ebx
c0009070:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009074:	29 f0                	sub    eax,esi
c0009076:	01 d8                	add    eax,ebx
c0009078:	50                   	push   eax
c0009079:	57                   	push   edi
c000907a:	e8 b3 fc ff ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c000907f:	83 c4 10             	add    esp,0x10
c0009082:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009087:	74 03                	je     c000908c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009089:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000908c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009092:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009096:	75 d6                	jne    c000906e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009098:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000909d:	75 10                	jne    c00090af <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000909f:	0f 20 d8             	mov    eax,cr3
c00090a2:	0f 22 d8             	mov    cr3,eax
c00090a5:	83 c4 1c             	add    esp,0x1c
c00090a8:	89 f0                	mov    eax,esi
c00090aa:	5b                   	pop    ebx
c00090ab:	5e                   	pop    esi
c00090ac:	5f                   	pop    edi
c00090ad:	5d                   	pop    ebp
c00090ae:	c3                   	ret    
c00090af:	89 f3                	mov    ebx,esi
c00090b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00090b5:	c1 eb 0a             	shr    ebx,0xa
c00090b8:	c1 e0 0c             	shl    eax,0xc
c00090bb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00090c1:	01 f0                	add    eax,esi
c00090c3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00090c9:	c1 e8 0a             	shr    eax,0xa
c00090cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00090d1:	2d 00 00 40 00       	sub    eax,0x400000
c00090d6:	39 c3                	cmp    ebx,eax
c00090d8:	77 cb                	ja     c00090a5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00090da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00090dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00090e3:	39 d8                	cmp    eax,ebx
c00090e5:	73 f3                	jae    c00090da <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00090e7:	83 c4 1c             	add    esp,0x1c
c00090ea:	89 f0                	mov    eax,esi
c00090ec:	5b                   	pop    ebx
c00090ed:	5e                   	pop    esi
c00090ee:	5f                   	pop    edi
c00090ef:	5d                   	pop    ebp
c00090f0:	c3                   	ret    
c00090f1:	90                   	nop

c00090f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00090f2:	55                   	push   ebp
c00090f3:	57                   	push   edi
c00090f4:	56                   	push   esi
c00090f5:	53                   	push   ebx
c00090f6:	83 ec 1c             	sub    esp,0x1c
c00090f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00090fd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009101:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009105:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009109:	a9 ff 0f 00 00       	test   eax,0xfff
c000910e:	75 4a                	jne    c000915a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009110:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009114:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009117:	c1 eb 16             	shr    ebx,0x16
c000911a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009121:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009125:	74 4d                	je     c0009174 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009127:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000912b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000912f:	c1 e8 0a             	shr    eax,0xa
c0009132:	80 fa 01             	cmp    dl,0x1
c0009135:	19 d2                	sbb    edx,edx
c0009137:	c1 e3 0c             	shl    ebx,0xc
c000913a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000913e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009144:	25 fc 0f 00 00       	and    eax,0xffc
c0009149:	01 d8                	add    eax,ebx
c000914b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009152:	83 c4 1c             	add    esp,0x1c
c0009155:	5b                   	pop    ebx
c0009156:	5e                   	pop    esi
c0009157:	5f                   	pop    edi
c0009158:	5d                   	pop    ebp
c0009159:	c3                   	ret    
c000915a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000915e:	83 ec 0c             	sub    esp,0xc
c0009161:	68 0c d0 01 c0       	push   0xc001d00c
c0009166:	e8 d4 62 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000916b:	83 c4 10             	add    esp,0x10
c000916e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009172:	eb 9c                	jmp    c0009110 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009174:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009178:	e8 b1 dd ff ff       	call   c0006f2e <Phys::allocatePage()>
c000917d:	83 ec 0c             	sub    esp,0xc
c0009180:	89 c5                	mov    ebp,eax
c0009182:	8b 0d 10 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f510
c0009188:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000918c:	6a 01                	push   0x1
c000918e:	e8 0a f5 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0009193:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000919a:	6a 01                	push   0x1
c000919c:	50                   	push   eax
c000919d:	55                   	push   ebp
c000919e:	81 cd 07 04 00 00    	or     ebp,0x407
c00091a4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00091a8:	51                   	push   ecx
c00091a9:	e8 7e fe ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00091ae:	83 c4 1c             	add    esp,0x1c
c00091b1:	68 00 10 00 00       	push   0x1000
c00091b6:	6a 00                	push   0x0
c00091b8:	50                   	push   eax
c00091b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00091bd:	e8 2e 73 ff ff       	call   c00004f0 <memset>
c00091c2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00091c6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00091c9:	e8 ff f7 ff ff       	call   c00089cd <Virt::freeKernelVirtualPages(unsigned long)>
c00091ce:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00091d1:	83 c4 10             	add    esp,0x10
c00091d4:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00091d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00091db:	e9 47 ff ff ff       	jmp    c0009127 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00091e0 <VAS::VAS(bool)>:
c00091e0:	53                   	push   ebx
c00091e1:	83 ec 28             	sub    esp,0x28
c00091e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00091e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00091ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00091f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091fb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009202:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009206:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000920a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000920d:	e8 1c dd ff ff       	call   c0006f2e <Phys::allocatePage()>
c0009212:	89 c2                	mov    edx,eax
c0009214:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009218:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000921b:	8b 1d 10 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f510
c0009221:	83 ec 0c             	sub    esp,0xc
c0009224:	6a 01                	push   0x1
c0009226:	e8 72 f4 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c000922b:	83 c4 10             	add    esp,0x10
c000922e:	89 c2                	mov    edx,eax
c0009230:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009234:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009237:	83 ec 0c             	sub    esp,0xc
c000923a:	6a 03                	push   0x3
c000923c:	6a 01                	push   0x1
c000923e:	52                   	push   edx
c000923f:	50                   	push   eax
c0009240:	53                   	push   ebx
c0009241:	e8 e6 fd ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009246:	83 c4 20             	add    esp,0x20
c0009249:	89 c2                	mov    edx,eax
c000924b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000924f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009252:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000925a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009262:	7f 1c                	jg     c0009280 <VAS::VAS(bool)+0xa0>
c0009264:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009268:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000926b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000926f:	c1 e2 02             	shl    edx,0x2
c0009272:	01 d0                	add    eax,edx
c0009274:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000927a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000927e:	eb da                	jmp    c000925a <VAS::VAS(bool)+0x7a>
c0009280:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009288:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009290:	7f 7a                	jg     c000930c <VAS::VAS(bool)+0x12c>
c0009292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009296:	2d 00 02 00 00       	sub    eax,0x200
c000929b:	c1 e0 0c             	shl    eax,0xc
c000929e:	83 c8 03             	or     eax,0x3
c00092a1:	89 c2                	mov    edx,eax
c00092a3:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00092a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00092ae:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00092b4:	83 e0 10             	and    eax,0x10
c00092b7:	84 c0                	test   al,al
c00092b9:	74 07                	je     c00092c2 <VAS::VAS(bool)+0xe2>
c00092bb:	b8 00 01 00 00       	mov    eax,0x100
c00092c0:	eb 05                	jmp    c00092c7 <VAS::VAS(bool)+0xe7>
c00092c2:	b8 00 00 00 00       	mov    eax,0x0
c00092c7:	09 d0                	or     eax,edx
c00092c9:	89 c1                	mov    ecx,eax
c00092cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00092d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00092d6:	c1 e2 02             	shl    edx,0x2
c00092d9:	01 d0                	add    eax,edx
c00092db:	89 ca                	mov    edx,ecx
c00092dd:	89 10                	mov    DWORD PTR [eax],edx
c00092df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092e3:	2d 40 03 00 00       	sub    eax,0x340
c00092e8:	83 f8 7f             	cmp    eax,0x7f
c00092eb:	77 16                	ja     c0009303 <VAS::VAS(bool)+0x123>
c00092ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092f1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00092f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00092f8:	c1 e2 02             	shl    edx,0x2
c00092fb:	01 d0                	add    eax,edx
c00092fd:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009303:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009307:	e9 7c ff ff ff       	jmp    c0009288 <VAS::VAS(bool)+0xa8>
c000930c:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0009311:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009317:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000931d:	83 e0 10             	and    eax,0x10
c0009320:	84 c0                	test   al,al
c0009322:	74 07                	je     c000932b <VAS::VAS(bool)+0x14b>
c0009324:	b8 03 41 00 00       	mov    eax,0x4103
c0009329:	eb 05                	jmp    c0009330 <VAS::VAS(bool)+0x150>
c000932b:	b8 03 40 00 00       	mov    eax,0x4003
c0009330:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009334:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009337:	81 c2 20 0c 00 00    	add    edx,0xc20
c000933d:	89 02                	mov    DWORD PTR [edx],eax
c000933f:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0009344:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000934a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009350:	83 ec 08             	sub    esp,0x8
c0009353:	50                   	push   eax
c0009354:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009358:	e8 b1 fc ff ff       	call   c000900e <VAS::setCPUSpecific(unsigned long)>
c000935d:	83 c4 10             	add    esp,0x10
c0009360:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009364:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009367:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000936c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009372:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009378:	83 e0 10             	and    eax,0x10
c000937b:	84 c0                	test   al,al
c000937d:	74 07                	je     c0009386 <VAS::VAS(bool)+0x1a6>
c000937f:	b8 00 01 00 00       	mov    eax,0x100
c0009384:	eb 05                	jmp    c000938b <VAS::VAS(bool)+0x1ab>
c0009386:	b8 00 00 00 00       	mov    eax,0x0
c000938b:	09 c2                	or     edx,eax
c000938d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009391:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009394:	05 fc 0f 00 00       	add    eax,0xffc
c0009399:	83 ca 03             	or     edx,0x3
c000939c:	89 10                	mov    DWORD PTR [eax],edx
c000939e:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00093a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00093a9:	83 ec 0c             	sub    esp,0xc
c00093ac:	50                   	push   eax
c00093ad:	e8 12 1c 00 00       	call   c000afc4 <Device::getName()>
c00093b2:	83 c4 10             	add    esp,0x10
c00093b5:	83 ec 08             	sub    esp,0x8
c00093b8:	68 af d0 01 c0       	push   0xc001d0af
c00093bd:	50                   	push   eax
c00093be:	e8 3d 73 ff ff       	call   c0000700 <strcmp>
c00093c3:	83 c4 10             	add    esp,0x10
c00093c6:	85 c0                	test   eax,eax
c00093c8:	0f 94 c0             	sete   al
c00093cb:	84 c0                	test   al,al
c00093cd:	0f 84 87 00 00 00    	je     c000945a <VAS::VAS(bool)+0x27a>
c00093d3:	fa                   	cli    
c00093d4:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c00093d9:	40                   	inc    eax
c00093da:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c00093df:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00093e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00093ea:	05 7c 09 00 00       	add    eax,0x97c
c00093ef:	83 ec 0c             	sub    esp,0xc
c00093f2:	50                   	push   eax
c00093f3:	e8 66 d2 ff ff       	call   c000665e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00093f8:	83 c4 10             	add    esp,0x10
c00093fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009400:	89 c3                	mov    ebx,eax
c0009402:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0009407:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000940d:	05 7c 09 00 00       	add    eax,0x97c
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	50                   	push   eax
c0009416:	e8 43 d2 ff ff       	call   c000665e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000941b:	83 c4 10             	add    esp,0x10
c000941e:	83 ec 08             	sub    esp,0x8
c0009421:	50                   	push   eax
c0009422:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009426:	e8 83 f5 ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c000942b:	83 c4 10             	add    esp,0x10
c000942e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009430:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009435:	6a 11                	push   0x11
c0009437:	53                   	push   ebx
c0009438:	50                   	push   eax
c0009439:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000943d:	e8 f0 f8 ff ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009442:	83 c4 10             	add    esp,0x10
c0009445:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000944a:	48                   	dec    eax
c000944b:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0009450:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0009455:	85 c0                	test   eax,eax
c0009457:	75 01                	jne    c000945a <VAS::VAS(bool)+0x27a>
c0009459:	fb                   	sti    
c000945a:	90                   	nop
c000945b:	83 c4 28             	add    esp,0x28
c000945e:	5b                   	pop    ebx
c000945f:	c3                   	ret    

c0009460 <VAS::evict(unsigned long)>:
c0009460:	55                   	push   ebp
c0009461:	57                   	push   edi
c0009462:	56                   	push   esi
c0009463:	53                   	push   ebx
c0009464:	83 ec 1c             	sub    esp,0x1c
c0009467:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000946b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000946f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009473:	e8 66 f3 ff ff       	call   c00087de <Virt::allocateSwapfilePage()>
c0009478:	8b 0d cc ed 01 c0    	mov    ecx,DWORD PTR ds:0xc001edcc
c000947e:	89 c7                	mov    edi,eax
c0009480:	85 c9                	test   ecx,ecx
c0009482:	7e 3e                	jle    c00094c2 <VAS::evict(unsigned long)+0x62>
c0009484:	89 ee                	mov    esi,ebp
c0009486:	31 db                	xor    ebx,ebx
c0009488:	83 ec 0c             	sub    esp,0xc
c000948b:	57                   	push   edi
c000948c:	e8 3b f3 ff ff       	call   c00087cc <Virt::swapIDToSector(unsigned long)>
c0009491:	89 34 24             	mov    DWORD PTR [esp],esi
c0009494:	01 d8                	add    eax,ebx
c0009496:	6a 01                	push   0x1
c0009498:	31 d2                	xor    edx,edx
c000949a:	43                   	inc    ebx
c000949b:	52                   	push   edx
c000949c:	81 c6 00 02 00 00    	add    esi,0x200
c00094a2:	50                   	push   eax
c00094a3:	0f be 05 d8 ed 01 c0 	movsx  eax,BYTE PTR ds:0xc001edd8
c00094aa:	8b 14 85 7c 18 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde784]
c00094b1:	52                   	push   edx
c00094b2:	e8 8d 2b 00 00       	call   c000c044 <LogicalDisk::write(unsigned long long, int, void*)>
c00094b7:	83 c4 20             	add    esp,0x20
c00094ba:	39 1d cc ed 01 c0    	cmp    DWORD PTR ds:0xc001edcc,ebx
c00094c0:	7f c6                	jg     c0009488 <VAS::evict(unsigned long)+0x28>
c00094c2:	83 ec 08             	sub    esp,0x8
c00094c5:	c1 e7 0b             	shl    edi,0xb
c00094c8:	55                   	push   ebp
c00094c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00094cd:	50                   	push   eax
c00094ce:	e8 db f4 ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c00094d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00094d5:	89 d1                	mov    ecx,edx
c00094d7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00094dd:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00094e3:	09 cf                	or     edi,ecx
c00094e5:	89 38                	mov    DWORD PTR [eax],edi
c00094e7:	89 14 24             	mov    DWORD PTR [esp],edx
c00094ea:	ff 05 08 f5 01 c0    	inc    DWORD PTR ds:0xc001f508
c00094f0:	e8 d7 d9 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c00094f5:	0f 20 d8             	mov    eax,cr3
c00094f8:	0f 22 d8             	mov    cr3,eax
c00094fb:	a1 04 f5 01 c0       	mov    eax,ds:0xc001f504
c0009500:	c7 44 24 40 bd d0 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d0bd
c0009508:	8d 50 01             	lea    edx,[eax+0x1]
c000950b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000950f:	89 15 04 f5 01 c0    	mov    DWORD PTR ds:0xc001f504,edx
c0009515:	83 c4 2c             	add    esp,0x2c
c0009518:	5b                   	pop    ebx
c0009519:	5e                   	pop    esi
c000951a:	5f                   	pop    edi
c000951b:	5d                   	pop    ebp
c000951c:	e9 cf 03 00 00       	jmp    c00098f0 <Dbg::kprintf(char const*, ...)>
c0009521:	90                   	nop

c0009522 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0009522:	55                   	push   ebp
c0009523:	57                   	push   edi
c0009524:	56                   	push   esi
c0009525:	53                   	push   ebx
c0009526:	83 ec 14             	sub    esp,0x14
c0009529:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000952d:	53                   	push   ebx
c000952e:	68 ce d0 01 c0       	push   0xc001d0ce
c0009533:	e8 b8 03 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0009538:	83 c4 10             	add    esp,0x10
c000953b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009541:	74 21                	je     c0009564 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c0009543:	83 ec 08             	sub    esp,0x8
c0009546:	53                   	push   ebx
c0009547:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000954b:	57                   	push   edi
c000954c:	e8 5d f4 ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c0009551:	83 c4 10             	add    esp,0x10
c0009554:	89 c6                	mov    esi,eax
c0009556:	85 c0                	test   eax,eax
c0009558:	74 0a                	je     c0009564 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000955a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000955c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0009562:	74 0a                	je     c000956e <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c0009564:	31 c0                	xor    eax,eax
c0009566:	83 c4 0c             	add    esp,0xc
c0009569:	5b                   	pop    ebx
c000956a:	5e                   	pop    esi
c000956b:	5f                   	pop    edi
c000956c:	5d                   	pop    ebp
c000956d:	c3                   	ret    
c000956e:	e8 bb d9 ff ff       	call   c0006f2e <Phys::allocatePage()>
c0009573:	c1 ed 0b             	shr    ebp,0xb
c0009576:	8b 16                	mov    edx,DWORD PTR [esi]
c0009578:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000957e:	09 c2                	or     edx,eax
c0009580:	81 ca 01 08 00 00    	or     edx,0x801
c0009586:	89 16                	mov    DWORD PTR [esi],edx
c0009588:	8b 35 cc ed 01 c0    	mov    esi,DWORD PTR ds:0xc001edcc
c000958e:	85 f6                	test   esi,esi
c0009590:	7e 3e                	jle    c00095d0 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c0009592:	89 df                	mov    edi,ebx
c0009594:	31 f6                	xor    esi,esi
c0009596:	83 ec 0c             	sub    esp,0xc
c0009599:	55                   	push   ebp
c000959a:	e8 2d f2 ff ff       	call   c00087cc <Virt::swapIDToSector(unsigned long)>
c000959f:	89 3c 24             	mov    DWORD PTR [esp],edi
c00095a2:	01 f0                	add    eax,esi
c00095a4:	6a 01                	push   0x1
c00095a6:	31 d2                	xor    edx,edx
c00095a8:	46                   	inc    esi
c00095a9:	52                   	push   edx
c00095aa:	81 c7 00 02 00 00    	add    edi,0x200
c00095b0:	50                   	push   eax
c00095b1:	0f be 05 d8 ed 01 c0 	movsx  eax,BYTE PTR ds:0xc001edd8
c00095b8:	8b 0c 85 7c 18 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde784]
c00095bf:	51                   	push   ecx
c00095c0:	e8 13 2a 00 00       	call   c000bfd8 <LogicalDisk::read(unsigned long long, int, void*)>
c00095c5:	83 c4 20             	add    esp,0x20
c00095c8:	39 35 cc ed 01 c0    	cmp    DWORD PTR ds:0xc001edcc,esi
c00095ce:	7f c6                	jg     c0009596 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c00095d0:	a1 08 f5 01 c0       	mov    eax,ds:0xc001f508
c00095d5:	48                   	dec    eax
c00095d6:	52                   	push   edx
c00095d7:	a3 08 f5 01 c0       	mov    ds:0xc001f508,eax
c00095dc:	50                   	push   eax
c00095dd:	53                   	push   ebx
c00095de:	68 e1 d0 01 c0       	push   0xc001d0e1
c00095e3:	e8 08 03 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00095e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00095eb:	e8 be f1 ff ff       	call   c00087ae <Virt::freeSwapfilePage(unsigned long)>
c00095f0:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c00095f5:	83 c4 10             	add    esp,0x10
c00095f8:	48                   	dec    eax
c00095f9:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c00095fe:	85 c0                	test   eax,eax
c0009600:	75 01                	jne    c0009603 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c0009602:	fb                   	sti    
c0009603:	0f 20 d8             	mov    eax,cr3
c0009606:	0f 22 d8             	mov    cr3,eax
c0009609:	b0 01                	mov    al,0x1
c000960b:	e9 56 ff ff ff       	jmp    c0009566 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c0009610 <VAS::scanForEviction()>:
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	83 ec 10             	sub    esp,0x10
c0009618:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000961c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000961f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0009625:	75 0e                	jne    c0009635 <VAS::scanForEviction()+0x25>
c0009627:	89 da                	mov    edx,ebx
c0009629:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000962c:	c1 ea 16             	shr    edx,0x16
c000962f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0009633:	74 4e                	je     c0009683 <VAS::scanForEviction()+0x73>
c0009635:	53                   	push   ebx
c0009636:	56                   	push   esi
c0009637:	e8 72 f3 ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c000963c:	5a                   	pop    edx
c000963d:	8b 10                	mov    edx,DWORD PTR [eax]
c000963f:	59                   	pop    ecx
c0009640:	89 d1                	mov    ecx,edx
c0009642:	81 e1 01 08 00 00    	and    ecx,0x801
c0009648:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000964e:	74 3e                	je     c000968e <VAS::scanForEviction()+0x7e>
c0009650:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009656:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000965c:	76 2b                	jbe    c0009689 <VAS::scanForEviction()+0x79>
c000965e:	47                   	inc    edi
c000965f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0009666:	83 ff 03             	cmp    edi,0x3
c0009669:	74 32                	je     c000969d <VAS::scanForEviction()+0x8d>
c000966b:	31 db                	xor    ebx,ebx
c000966d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0009673:	75 c0                	jne    c0009635 <VAS::scanForEviction()+0x25>
c0009675:	89 da                	mov    edx,ebx
c0009677:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000967a:	c1 ea 16             	shr    edx,0x16
c000967d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0009681:	75 b2                	jne    c0009635 <VAS::scanForEviction()+0x25>
c0009683:	81 c3 00 00 40 00    	add    ebx,0x400000
c0009689:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000968c:	eb 91                	jmp    c000961f <VAS::scanForEviction()+0xf>
c000968e:	f6 c2 20             	test   dl,0x20
c0009691:	74 13                	je     c00096a6 <VAS::scanForEviction()+0x96>
c0009693:	83 e2 df             	and    edx,0xffffffdf
c0009696:	89 10                	mov    DWORD PTR [eax],edx
c0009698:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000969b:	eb b3                	jmp    c0009650 <VAS::scanForEviction()+0x40>
c000969d:	83 c4 10             	add    esp,0x10
c00096a0:	31 c0                	xor    eax,eax
c00096a2:	5b                   	pop    ebx
c00096a3:	5e                   	pop    esi
c00096a4:	5f                   	pop    edi
c00096a5:	c3                   	ret    
c00096a6:	83 ec 08             	sub    esp,0x8
c00096a9:	89 d0                	mov    eax,edx
c00096ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00096b4:	53                   	push   ebx
c00096b5:	68 f6 d0 01 c0       	push   0xc001d0f6
c00096ba:	e8 31 02 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00096bf:	58                   	pop    eax
c00096c0:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c00096c3:	5a                   	pop    edx
c00096c4:	51                   	push   ecx
c00096c5:	56                   	push   esi
c00096c6:	e8 95 fd ff ff       	call   c0009460 <VAS::evict(unsigned long)>
c00096cb:	5b                   	pop    ebx
c00096cc:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00096cf:	5f                   	pop    edi
c00096d0:	50                   	push   eax
c00096d1:	68 0a d1 01 c0       	push   0xc001d10a
c00096d6:	e8 15 02 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00096db:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00096e2:	83 c4 10             	add    esp,0x10
c00096e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00096e9:	83 c4 10             	add    esp,0x10
c00096ec:	5b                   	pop    ebx
c00096ed:	5e                   	pop    esi
c00096ee:	5f                   	pop    edi
c00096ef:	c3                   	ret    

c00096f0 <mapVASFirstTime>:
c00096f0:	55                   	push   ebp
c00096f1:	57                   	push   edi
c00096f2:	56                   	push   esi
c00096f3:	53                   	push   ebx
c00096f4:	83 ec 0c             	sub    esp,0xc
c00096f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00096fc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00096ff:	4a                   	dec    edx
c0009700:	0f 84 8c 00 00 00    	je     c0009792 <mapVASFirstTime+0xa2>
c0009706:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0009709:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000970c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0009711:	c1 e5 15             	shl    ebp,0x15
c0009714:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0009719:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000971f:	29 eb                	sub    ebx,ebp
c0009721:	29 ef                	sub    edi,ebp
c0009723:	e8 06 d8 ff ff       	call   c0006f2e <Phys::allocatePage()>
c0009728:	83 ec 0c             	sub    esp,0xc
c000972b:	68 03 04 00 00       	push   0x403
c0009730:	6a 01                	push   0x1
c0009732:	53                   	push   ebx
c0009733:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0009739:	50                   	push   eax
c000973a:	56                   	push   esi
c000973b:	e8 ec f8 ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009740:	83 c4 20             	add    esp,0x20
c0009743:	39 fb                	cmp    ebx,edi
c0009745:	75 dc                	jne    c0009723 <mapVASFirstTime+0x33>
c0009747:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000974c:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0009751:	29 eb                	sub    ebx,ebp
c0009753:	29 ef                	sub    edi,ebp
c0009755:	e8 d4 d7 ff ff       	call   c0006f2e <Phys::allocatePage()>
c000975a:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000975e:	19 d2                	sbb    edx,edx
c0009760:	83 ec 0c             	sub    esp,0xc
c0009763:	83 e2 04             	and    edx,0x4
c0009766:	81 c2 03 04 00 00    	add    edx,0x403
c000976c:	52                   	push   edx
c000976d:	6a 01                	push   0x1
c000976f:	53                   	push   ebx
c0009770:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0009776:	50                   	push   eax
c0009777:	56                   	push   esi
c0009778:	e8 af f8 ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000977d:	83 c4 20             	add    esp,0x20
c0009780:	39 df                	cmp    edi,ebx
c0009782:	75 d1                	jne    c0009755 <mapVASFirstTime+0x65>
c0009784:	0f 20 d8             	mov    eax,cr3
c0009787:	0f 22 d8             	mov    cr3,eax
c000978a:	83 c4 0c             	add    esp,0xc
c000978d:	5b                   	pop    ebx
c000978e:	5e                   	pop    esi
c000978f:	5f                   	pop    edi
c0009790:	5d                   	pop    ebp
c0009791:	c3                   	ret    
c0009792:	83 ec 0c             	sub    esp,0xc
c0009795:	68 1d d1 01 c0       	push   0xc001d11d
c000979a:	e8 51 01 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000979f:	83 c4 10             	add    esp,0x10
c00097a2:	83 c4 0c             	add    esp,0xc
c00097a5:	5b                   	pop    ebx
c00097a6:	5e                   	pop    esi
c00097a7:	5f                   	pop    edi
c00097a8:	5d                   	pop    ebp
c00097a9:	c3                   	ret    

c00097aa <__cxa_atexit>:
c00097aa:	31 c0                	xor    eax,eax
c00097ac:	c3                   	ret    

c00097ad <__cxa_finalize>:
c00097ad:	c3                   	ret    

c00097ae <__stack_chk_fail>:
c00097ae:	55                   	push   ebp
c00097af:	89 e5                	mov    ebp,esp
c00097b1:	83 ec 10             	sub    esp,0x10
c00097b4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00097b7:	68 36 d1 01 c0       	push   0xc001d136
c00097bc:	e8 2f 01 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00097c1:	58                   	pop    eax
c00097c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00097c5:	5a                   	pop    edx
c00097c6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00097c9:	68 36 d1 01 c0       	push   0xc001d136
c00097ce:	e8 1d 01 00 00       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00097d3:	c7 04 24 3e d1 01 c0 	mov    DWORD PTR [esp],0xc001d13e
c00097da:	e8 60 5c 00 00       	call   c000f43f <Krnl::panic(char const*)>
c00097df:	83 c4 10             	add    esp,0x10
c00097e2:	c9                   	leave  
c00097e3:	c3                   	ret    

c00097e4 <__cxa_pure_virtual>:
c00097e4:	83 ec 18             	sub    esp,0x18
c00097e7:	68 56 d1 01 c0       	push   0xc001d156
c00097ec:	e8 4e 5c 00 00       	call   c000f43f <Krnl::panic(char const*)>
c00097f1:	83 c4 1c             	add    esp,0x1c
c00097f4:	c3                   	ret    

c00097f5 <operator new[](unsigned long)>:
c00097f5:	e9 67 d3 ff ff       	jmp    c0006b61 <malloc>

c00097fa <operator delete(void*, unsigned long)>:
c00097fa:	e9 82 d3 ff ff       	jmp    c0006b81 <rfree>

c00097ff <operator delete[](void*)>:
c00097ff:	e9 7d d3 ff ff       	jmp    c0006b81 <rfree>

c0009804 <operator delete[](void*, unsigned long)>:
c0009804:	e9 78 d3 ff ff       	jmp    c0006b81 <rfree>

c0009809 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0009809:	55                   	push   ebp
c000980a:	b9 04 00 00 00       	mov    ecx,0x4
c000980f:	57                   	push   edi
c0009810:	56                   	push   esi
c0009811:	be 6b cd 01 c0       	mov    esi,0xc001cd6b
c0009816:	53                   	push   ebx
c0009817:	83 ec 20             	sub    esp,0x20
c000981a:	a1 6a cd 01 c0       	mov    eax,ds:0xc001cd6a
c000981f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009823:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c0009827:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000982b:	a1 77 cd 01 c0       	mov    eax,ds:0xc001cd77
c0009830:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0009834:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009838:	fc                   	cld    
c0009839:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000983b:	89 ee                	mov    esi,ebp
c000983d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0009841:	eb 02                	jmp    c0009845 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0009843:	89 c6                	mov    esi,eax
c0009845:	31 d2                	xor    edx,edx
c0009847:	41                   	inc    ecx
c0009848:	89 f0                	mov    eax,esi
c000984a:	f7 f3                	div    ebx
c000984c:	39 de                	cmp    esi,ebx
c000984e:	73 f3                	jae    c0009843 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0009850:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009853:	eb 02                	jmp    c0009857 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c0009855:	89 c5                	mov    ebp,eax
c0009857:	31 d2                	xor    edx,edx
c0009859:	49                   	dec    ecx
c000985a:	89 e8                	mov    eax,ebp
c000985c:	f7 f3                	div    ebx
c000985e:	39 dd                	cmp    ebp,ebx
c0009860:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0009864:	88 11                	mov    BYTE PTR [ecx],dl
c0009866:	73 ed                	jae    c0009855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c0009868:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000986c:	83 c4 20             	add    esp,0x20
c000986f:	5b                   	pop    ebx
c0009870:	5e                   	pop    esi
c0009871:	5f                   	pop    edi
c0009872:	5d                   	pop    ebp
c0009873:	c3                   	ret    

c0009874 <Dbg::logc(char)>:
c0009874:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009878:	f6 05 40 f4 01 c0 10 	test   BYTE PTR ds:0xc001f440,0x10
c000987f:	75 12                	jne    c0009893 <Dbg::logc(char)+0x1f>
c0009881:	ba fd 03 00 00       	mov    edx,0x3fd
c0009886:	ec                   	in     al,dx
c0009887:	a8 20                	test   al,0x20
c0009889:	74 fb                	je     c0009886 <Dbg::logc(char)+0x12>
c000988b:	ba f8 03 00 00       	mov    edx,0x3f8
c0009890:	88 c8                	mov    al,cl
c0009892:	ee                   	out    dx,al
c0009893:	c3                   	ret    

c0009894 <Dbg::logs(char*)>:
c0009894:	53                   	push   ebx
c0009895:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009899:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000989c:	84 c0                	test   al,al
c000989e:	74 0f                	je     c00098af <Dbg::logs(char*)+0x1b>
c00098a0:	50                   	push   eax
c00098a1:	43                   	inc    ebx
c00098a2:	e8 cd ff ff ff       	call   c0009874 <Dbg::logc(char)>
c00098a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00098aa:	5a                   	pop    edx
c00098ab:	84 c0                	test   al,al
c00098ad:	75 f1                	jne    c00098a0 <Dbg::logs(char*)+0xc>
c00098af:	5b                   	pop    ebx
c00098b0:	c3                   	ret    

c00098b1 <Dbg::logWriteInt(unsigned int)>:
c00098b1:	83 ec 10             	sub    esp,0x10
c00098b4:	6a 0a                	push   0xa
c00098b6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00098ba:	50                   	push   eax
c00098bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098bf:	50                   	push   eax
c00098c0:	e8 44 ff ff ff       	call   c0009809 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00098c5:	50                   	push   eax
c00098c6:	e8 c9 ff ff ff       	call   c0009894 <Dbg::logs(char*)>
c00098cb:	83 c4 20             	add    esp,0x20
c00098ce:	c3                   	ret    

c00098cf <Dbg::logWriteIntBase(unsigned int, int)>:
c00098cf:	83 ec 10             	sub    esp,0x10
c00098d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098d6:	50                   	push   eax
c00098d7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00098db:	50                   	push   eax
c00098dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098e0:	52                   	push   edx
c00098e1:	e8 23 ff ff ff       	call   c0009809 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00098e6:	50                   	push   eax
c00098e7:	e8 a8 ff ff ff       	call   c0009894 <Dbg::logs(char*)>
c00098ec:	83 c4 20             	add    esp,0x20
c00098ef:	c3                   	ret    

c00098f0 <Dbg::kprintf(char const*, ...)>:
c00098f0:	55                   	push   ebp
c00098f1:	57                   	push   edi
c00098f2:	56                   	push   esi
c00098f3:	53                   	push   ebx
c00098f4:	83 ec 0c             	sub    esp,0xc
c00098f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00098fb:	f6 05 40 f4 01 c0 10 	test   BYTE PTR ds:0xc001f440,0x10
c0009902:	74 08                	je     c000990c <Dbg::kprintf(char const*, ...)+0x1c>
c0009904:	83 c4 0c             	add    esp,0xc
c0009907:	5b                   	pop    ebx
c0009908:	5e                   	pop    esi
c0009909:	5f                   	pop    edi
c000990a:	5d                   	pop    ebp
c000990b:	c3                   	ret    
c000990c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0009910:	31 ff                	xor    edi,edi
c0009912:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009916:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0009919:	84 c0                	test   al,al
c000991b:	74 e7                	je     c0009904 <Dbg::kprintf(char const*, ...)+0x14>
c000991d:	8d 77 01             	lea    esi,[edi+0x1]
c0009920:	3c 25                	cmp    al,0x25
c0009922:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0009925:	75 47                	jne    c000996e <Dbg::kprintf(char const*, ...)+0x7e>
c0009927:	83 c7 02             	add    edi,0x2
c000992a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000992d:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0009930:	83 e8 25             	sub    eax,0x25
c0009933:	3c 53                	cmp    al,0x53
c0009935:	0f 87 d2 00 00 00    	ja     c0009a0d <Dbg::kprintf(char const*, ...)+0x11d>
c000993b:	25 ff 00 00 00       	and    eax,0xff
c0009940:	ff 24 85 6c d1 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2e94]
c0009947:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000994b:	89 c8                	mov    eax,ecx
c000994d:	83 c1 04             	add    ecx,0x4
c0009950:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009954:	8b 28                	mov    ebp,DWORD PTR [eax]
c0009956:	55                   	push   ebp
c0009957:	e8 55 ff ff ff       	call   c00098b1 <Dbg::logWriteInt(unsigned int)>
c000995c:	58                   	pop    eax
c000995d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0009960:	84 c0                	test   al,al
c0009962:	74 a0                	je     c0009904 <Dbg::kprintf(char const*, ...)+0x14>
c0009964:	8d 77 01             	lea    esi,[edi+0x1]
c0009967:	3c 25                	cmp    al,0x25
c0009969:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000996c:	74 b9                	je     c0009927 <Dbg::kprintf(char const*, ...)+0x37>
c000996e:	50                   	push   eax
c000996f:	89 f7                	mov    edi,esi
c0009971:	e8 fe fe ff ff       	call   c0009874 <Dbg::logc(char)>
c0009976:	89 ee                	mov    esi,ebp
c0009978:	58                   	pop    eax
c0009979:	eb e2                	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c000997b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000997f:	89 c8                	mov    eax,ecx
c0009981:	83 c1 04             	add    ecx,0x4
c0009984:	8b 00                	mov    eax,DWORD PTR [eax]
c0009986:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000998a:	50                   	push   eax
c000998b:	e8 04 ff ff ff       	call   c0009894 <Dbg::logs(char*)>
c0009990:	58                   	pop    eax
c0009991:	eb ca                	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c0009993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009997:	89 d0                	mov    eax,edx
c0009999:	83 c2 04             	add    edx,0x4
c000999c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00099a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00099a2:	50                   	push   eax
c00099a3:	e8 09 ff ff ff       	call   c00098b1 <Dbg::logWriteInt(unsigned int)>
c00099a8:	58                   	pop    eax
c00099a9:	eb b2                	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c00099ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099af:	89 d0                	mov    eax,edx
c00099b1:	83 c2 04             	add    edx,0x4
c00099b4:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00099b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00099bb:	50                   	push   eax
c00099bc:	e8 b3 fe ff ff       	call   c0009874 <Dbg::logc(char)>
c00099c1:	58                   	pop    eax
c00099c2:	eb 99                	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c00099c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00099c8:	89 c8                	mov    eax,ecx
c00099ca:	83 c1 04             	add    ecx,0x4
c00099cd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00099d1:	6a 10                	push   0x10
c00099d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00099d5:	51                   	push   ecx
c00099d6:	e8 f4 fe ff ff       	call   c00098cf <Dbg::logWriteIntBase(unsigned int, int)>
c00099db:	5d                   	pop    ebp
c00099dc:	58                   	pop    eax
c00099dd:	e9 7b ff ff ff       	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c00099e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099e6:	89 d0                	mov    eax,edx
c00099e8:	83 c2 08             	add    edx,0x8
c00099eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00099ef:	6a 10                	push   0x10
c00099f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00099f3:	50                   	push   eax
c00099f4:	e8 d6 fe ff ff       	call   c00098cf <Dbg::logWriteIntBase(unsigned int, int)>
c00099f9:	58                   	pop    eax
c00099fa:	5a                   	pop    edx
c00099fb:	e9 5d ff ff ff       	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c0009a00:	6a 25                	push   0x25
c0009a02:	e8 6d fe ff ff       	call   c0009874 <Dbg::logc(char)>
c0009a07:	5a                   	pop    edx
c0009a08:	e9 50 ff ff ff       	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c0009a0d:	6a 25                	push   0x25
c0009a0f:	e8 60 fe ff ff       	call   c0009874 <Dbg::logc(char)>
c0009a14:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0009a18:	50                   	push   eax
c0009a19:	e8 56 fe ff ff       	call   c0009874 <Dbg::logc(char)>
c0009a1e:	5a                   	pop    edx
c0009a1f:	59                   	pop    ecx
c0009a20:	e9 38 ff ff ff       	jmp    c000995d <Dbg::kprintf(char const*, ...)+0x6d>
c0009a25:	90                   	nop

c0009a26 <File::read(unsigned long long, void*, int*)>:
c0009a26:	53                   	push   ebx
c0009a27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a2b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a2f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009a36:	3c 19                	cmp    al,0x19
c0009a38:	77 35                	ja     c0009a6f <File::read(unsigned long long, void*, int*)+0x49>
c0009a3a:	8b 04 85 80 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde680]
c0009a41:	85 c0                	test   eax,eax
c0009a43:	74 2a                	je     c0009a6f <File::read(unsigned long long, void*, int*)+0x49>
c0009a45:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009a4b:	85 c0                	test   eax,eax
c0009a4d:	74 20                	je     c0009a6f <File::read(unsigned long long, void*, int*)+0x49>
c0009a4f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009a53:	74 21                	je     c0009a76 <File::read(unsigned long long, void*, int*)+0x50>
c0009a55:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009a5b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009a61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a69:	5b                   	pop    ebx
c0009a6a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0009a6d:	ff e0                	jmp    eax
c0009a6f:	b8 0b 00 00 00       	mov    eax,0xb
c0009a74:	eb 05                	jmp    c0009a7b <File::read(unsigned long long, void*, int*)+0x55>
c0009a76:	b8 05 00 00 00       	mov    eax,0x5
c0009a7b:	5b                   	pop    ebx
c0009a7c:	c3                   	ret    
c0009a7d:	90                   	nop

c0009a7e <File::write(unsigned long long, void*, int*)>:
c0009a7e:	53                   	push   ebx
c0009a7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a87:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009a8e:	3c 19                	cmp    al,0x19
c0009a90:	77 35                	ja     c0009ac7 <File::write(unsigned long long, void*, int*)+0x49>
c0009a92:	8b 04 85 80 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde680]
c0009a99:	85 c0                	test   eax,eax
c0009a9b:	74 2a                	je     c0009ac7 <File::write(unsigned long long, void*, int*)+0x49>
c0009a9d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009aa3:	85 c0                	test   eax,eax
c0009aa5:	74 20                	je     c0009ac7 <File::write(unsigned long long, void*, int*)+0x49>
c0009aa7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009aab:	74 21                	je     c0009ace <File::write(unsigned long long, void*, int*)+0x50>
c0009aad:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009aaf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009ab3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009ab9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009abd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ac1:	5b                   	pop    ebx
c0009ac2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0009ac5:	ff e0                	jmp    eax
c0009ac7:	b8 0b 00 00 00       	mov    eax,0xb
c0009acc:	eb 05                	jmp    c0009ad3 <File::write(unsigned long long, void*, int*)+0x55>
c0009ace:	b8 05 00 00 00       	mov    eax,0x5
c0009ad3:	5b                   	pop    ebx
c0009ad4:	c3                   	ret    
c0009ad5:	90                   	nop

c0009ad6 <Directory::read(unsigned long long, void*, int*)>:
c0009ad6:	53                   	push   ebx
c0009ad7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009adb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009adf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009ae6:	3c 19                	cmp    al,0x19
c0009ae8:	77 35                	ja     c0009b1f <Directory::read(unsigned long long, void*, int*)+0x49>
c0009aea:	8b 04 85 80 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde680]
c0009af1:	85 c0                	test   eax,eax
c0009af3:	74 2a                	je     c0009b1f <Directory::read(unsigned long long, void*, int*)+0x49>
c0009af5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009afb:	85 c0                	test   eax,eax
c0009afd:	74 20                	je     c0009b1f <Directory::read(unsigned long long, void*, int*)+0x49>
c0009aff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009b03:	74 21                	je     c0009b26 <Directory::read(unsigned long long, void*, int*)+0x50>
c0009b05:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009b07:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009b0b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009b11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b19:	5b                   	pop    ebx
c0009b1a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0009b1d:	ff e0                	jmp    eax
c0009b1f:	b8 0b 00 00 00       	mov    eax,0xb
c0009b24:	eb 05                	jmp    c0009b2b <Directory::read(unsigned long long, void*, int*)+0x55>
c0009b26:	b8 05 00 00 00       	mov    eax,0x5
c0009b2b:	5b                   	pop    ebx
c0009b2c:	c3                   	ret    
c0009b2d:	90                   	nop

c0009b2e <Directory::write(unsigned long long, void*, int*)>:
c0009b2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b32:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0009b39:	b8 0b 00 00 00       	mov    eax,0xb
c0009b3e:	80 fa 19             	cmp    dl,0x19
c0009b41:	77 18                	ja     c0009b5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009b43:	8b 14 95 80 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde680]
c0009b4a:	85 d2                	test   edx,edx
c0009b4c:	74 0d                	je     c0009b5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009b4e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0009b55:	19 c0                	sbb    eax,eax
c0009b57:	83 e0 0a             	and    eax,0xa
c0009b5a:	40                   	inc    eax
c0009b5b:	c3                   	ret    

c0009b5c <File::isAtty()>:
c0009b5c:	31 c0                	xor    eax,eax
c0009b5e:	c3                   	ret    
c0009b5f:	90                   	nop

c0009b60 <Directory::isAtty()>:
c0009b60:	31 c0                	xor    eax,eax
c0009b62:	c3                   	ret    
c0009b63:	90                   	nop

c0009b64 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0009b64:	b8 0a 00 00 00       	mov    eax,0xa
c0009b69:	c3                   	ret    

c0009b6a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0009b6a:	b8 0a 00 00 00       	mov    eax,0xa
c0009b6f:	c3                   	ret    

c0009b70 <Filesystem::allocateSwapfile(char const*, int)>:
c0009b70:	31 c0                	xor    eax,eax
c0009b72:	31 d2                	xor    edx,edx
c0009b74:	c3                   	ret    
c0009b75:	90                   	nop

c0009b76 <File::~File()>:
c0009b76:	83 ec 0c             	sub    esp,0xc
c0009b79:	ba 2c d3 01 c0       	mov    edx,0xc001d32c
c0009b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b82:	89 10                	mov    DWORD PTR [eax],edx
c0009b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b88:	83 ec 0c             	sub    esp,0xc
c0009b8b:	50                   	push   eax
c0009b8c:	e8 ab e8 ff ff       	call   c000843c <UnixFile::~UnixFile()>
c0009b91:	83 c4 10             	add    esp,0x10
c0009b94:	90                   	nop
c0009b95:	83 c4 0c             	add    esp,0xc
c0009b98:	c3                   	ret    
c0009b99:	90                   	nop

c0009b9a <File::~File()>:
c0009b9a:	83 ec 0c             	sub    esp,0xc
c0009b9d:	83 ec 0c             	sub    esp,0xc
c0009ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ba4:	e8 cd ff ff ff       	call   c0009b76 <File::~File()>
c0009ba9:	83 c4 10             	add    esp,0x10
c0009bac:	83 ec 08             	sub    esp,0x8
c0009baf:	68 14 01 00 00       	push   0x114
c0009bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009bb8:	e8 3d fc ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c0009bbd:	83 c4 10             	add    esp,0x10
c0009bc0:	83 c4 0c             	add    esp,0xc
c0009bc3:	c3                   	ret    

c0009bc4 <Directory::~Directory()>:
c0009bc4:	83 ec 0c             	sub    esp,0xc
c0009bc7:	ba 48 d3 01 c0       	mov    edx,0xc001d348
c0009bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bd0:	89 10                	mov    DWORD PTR [eax],edx
c0009bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bd6:	83 ec 0c             	sub    esp,0xc
c0009bd9:	50                   	push   eax
c0009bda:	e8 5d e8 ff ff       	call   c000843c <UnixFile::~UnixFile()>
c0009bdf:	83 c4 10             	add    esp,0x10
c0009be2:	90                   	nop
c0009be3:	83 c4 0c             	add    esp,0xc
c0009be6:	c3                   	ret    
c0009be7:	90                   	nop

c0009be8 <Directory::~Directory()>:
c0009be8:	83 ec 0c             	sub    esp,0xc
c0009beb:	83 ec 0c             	sub    esp,0xc
c0009bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009bf2:	e8 cd ff ff ff       	call   c0009bc4 <Directory::~Directory()>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	83 ec 08             	sub    esp,0x8
c0009bfd:	68 14 01 00 00       	push   0x114
c0009c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c06:	e8 ef fb ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c0009c0b:	83 c4 10             	add    esp,0x10
c0009c0e:	83 c4 0c             	add    esp,0xc
c0009c11:	c3                   	ret    

c0009c12 <Filesystem::Filesystem()>:
c0009c12:	ba c4 d2 01 c0       	mov    edx,0xc001d2c4
c0009c17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c1b:	89 10                	mov    DWORD PTR [eax],edx
c0009c1d:	8b 15 14 f5 01 c0    	mov    edx,DWORD PTR ds:0xc001f514
c0009c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009c2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c2e:	a3 14 f5 01 c0       	mov    ds:0xc001f514,eax
c0009c33:	90                   	nop
c0009c34:	c3                   	ret    
c0009c35:	90                   	nop

c0009c36 <Filesystem::~Filesystem()>:
c0009c36:	ba c4 d2 01 c0       	mov    edx,0xc001d2c4
c0009c3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c3f:	89 10                	mov    DWORD PTR [eax],edx
c0009c41:	90                   	nop
c0009c42:	c3                   	ret    
c0009c43:	90                   	nop

c0009c44 <Filesystem::~Filesystem()>:
c0009c44:	83 ec 0c             	sub    esp,0xc
c0009c47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009c4b:	e8 e6 ff ff ff       	call   c0009c36 <Filesystem::~Filesystem()>
c0009c50:	83 c4 04             	add    esp,0x4
c0009c53:	83 ec 08             	sub    esp,0x8
c0009c56:	6a 08                	push   0x8
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	e8 99 fb ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c0009c61:	83 c4 10             	add    esp,0x10
c0009c64:	83 c4 0c             	add    esp,0xc
c0009c67:	c3                   	ret    

c0009c68 <Fs::getcwd(Process*, char*, int)>:
c0009c68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009c6c:	31 c0                	xor    eax,eax
c0009c6e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0009c71:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0009c75:	7d 15                	jge    c0009c8c <Fs::getcwd(Process*, char*, int)+0x24>
c0009c77:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009c7b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0009c82:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0009c85:	84 c9                	test   cl,cl
c0009c87:	74 06                	je     c0009c8f <Fs::getcwd(Process*, char*, int)+0x27>
c0009c89:	40                   	inc    eax
c0009c8a:	eb e2                	jmp    c0009c6e <Fs::getcwd(Process*, char*, int)+0x6>
c0009c8c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009c8f:	31 c0                	xor    eax,eax
c0009c91:	c3                   	ret    

c0009c92 <Fs::initVFS()>:
c0009c92:	83 ec 18             	sub    esp,0x18
c0009c95:	6a 08                	push   0x8
c0009c97:	e8 c5 ce ff ff       	call   c0006b61 <malloc>
c0009c9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c9f:	e8 c4 c3 00 00       	call   c0016068 <FAT::FAT()>
c0009ca4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009cab:	e8 b1 ce ff ff       	call   c0006b61 <malloc>
c0009cb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009cb3:	e8 6a d6 00 00       	call   c0017322 <ISO9660::ISO9660()>
c0009cb8:	83 c4 1c             	add    esp,0x1c
c0009cbb:	c3                   	ret    

c0009cbc <Fs::standardiseFiles(char*, char const*, char const*)>:
c0009cbc:	55                   	push   ebp
c0009cbd:	57                   	push   edi
c0009cbe:	56                   	push   esi
c0009cbf:	53                   	push   ebx
c0009cc0:	81 ec 10 04 00 00    	sub    esp,0x410
c0009cc6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0009ccd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0009cd4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0009cdb:	68 00 04 00 00       	push   0x400
c0009ce0:	6a 00                	push   0x0
c0009ce2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0009ce6:	56                   	push   esi
c0009ce7:	e8 04 68 ff ff       	call   c00004f0 <memset>
c0009cec:	83 c4 10             	add    esp,0x10
c0009cef:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0009cf3:	75 0b                	jne    c0009d00 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0009cf5:	50                   	push   eax
c0009cf6:	50                   	push   eax
c0009cf7:	57                   	push   edi
c0009cf8:	56                   	push   esi
c0009cf9:	e8 22 69 ff ff       	call   c0000620 <strcpy>
c0009cfe:	eb 41                	jmp    c0009d41 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0009d00:	8a 07                	mov    al,BYTE PTR [edi]
c0009d02:	3c 5c                	cmp    al,0x5c
c0009d04:	74 04                	je     c0009d0a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0009d06:	3c 2f                	cmp    al,0x2f
c0009d08:	75 18                	jne    c0009d22 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0009d0a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0009d0d:	3c 60                	cmp    al,0x60
c0009d0f:	7e 03                	jle    c0009d14 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0009d11:	83 e8 20             	sub    eax,0x20
c0009d14:	88 04 24             	mov    BYTE PTR [esp],al
c0009d17:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009d1e:	50                   	push   eax
c0009d1f:	50                   	push   eax
c0009d20:	eb 18                	jmp    c0009d3a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0009d22:	50                   	push   eax
c0009d23:	50                   	push   eax
c0009d24:	55                   	push   ebp
c0009d25:	56                   	push   esi
c0009d26:	e8 f5 68 ff ff       	call   c0000620 <strcpy>
c0009d2b:	5a                   	pop    edx
c0009d2c:	59                   	pop    ecx
c0009d2d:	68 70 e0 01 c0       	push   0xc001e070
c0009d32:	56                   	push   esi
c0009d33:	e8 a8 6a ff ff       	call   c00007e0 <strcat>
c0009d38:	5d                   	pop    ebp
c0009d39:	58                   	pop    eax
c0009d3a:	57                   	push   edi
c0009d3b:	56                   	push   esi
c0009d3c:	e8 9f 6a ff ff       	call   c00007e0 <strcat>
c0009d41:	83 c4 10             	add    esp,0x10
c0009d44:	8a 04 24             	mov    al,BYTE PTR [esp]
c0009d47:	3c 60                	cmp    al,0x60
c0009d49:	7e 03                	jle    c0009d4e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0009d4b:	83 e8 20             	sub    eax,0x20
c0009d4e:	88 04 24             	mov    BYTE PTR [esp],al
c0009d51:	88 03                	mov    BYTE PTR [ebx],al
c0009d53:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009d5a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0009d60:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0009d64:	bf 03 00 00 00       	mov    edi,0x3
c0009d69:	b8 03 00 00 00       	mov    eax,0x3
c0009d6e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0009d71:	84 d2                	test   dl,dl
c0009d73:	0f 84 91 00 00 00    	je     c0009e0a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0009d79:	8d 4f 01             	lea    ecx,[edi+0x1]
c0009d7c:	80 fa 5c             	cmp    dl,0x5c
c0009d7f:	74 05                	je     c0009d86 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0009d81:	80 fa 2f             	cmp    dl,0x2f
c0009d84:	75 12                	jne    c0009d98 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009d86:	89 c5                	mov    ebp,eax
c0009d88:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009d8d:	74 09                	je     c0009d98 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009d8f:	40                   	inc    eax
c0009d90:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0009d94:	89 cf                	mov    edi,ecx
c0009d96:	eb d6                	jmp    c0009d6e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0009d98:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0009d9d:	75 5b                	jne    c0009dfa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009d9f:	80 fa 2e             	cmp    dl,0x2e
c0009da2:	75 56                	jne    c0009dfa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009da4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0009da8:	74 19                	je     c0009dc3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0009daa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009daf:	74 53                	je     c0009e04 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009db1:	89 f9                	mov    ecx,edi
c0009db3:	41                   	inc    ecx
c0009db4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009db7:	80 fa 2f             	cmp    dl,0x2f
c0009dba:	74 f7                	je     c0009db3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009dbc:	80 fa 5c             	cmp    dl,0x5c
c0009dbf:	74 f2                	je     c0009db3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009dc1:	eb d1                	jmp    c0009d94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009dc3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009dc8:	74 3a                	je     c0009e04 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009dca:	83 f8 03             	cmp    eax,0x3
c0009dcd:	74 c5                	je     c0009d94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009dcf:	41                   	inc    ecx
c0009dd0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009dd3:	80 fa 2f             	cmp    dl,0x2f
c0009dd6:	74 f7                	je     c0009dcf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009dd8:	80 fa 5c             	cmp    dl,0x5c
c0009ddb:	74 f2                	je     c0009dcf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009ddd:	48                   	dec    eax
c0009dde:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009de2:	75 06                	jne    c0009dea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009de4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009de8:	eb f3                	jmp    c0009ddd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0009dea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009dee:	74 07                	je     c0009df7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0009df0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009df4:	48                   	dec    eax
c0009df5:	eb f3                	jmp    c0009dea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009df7:	40                   	inc    eax
c0009df8:	eb 9a                	jmp    c0009d94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009dfa:	80 fa 2f             	cmp    dl,0x2f
c0009dfd:	74 95                	je     c0009d94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009dff:	80 fa 5c             	cmp    dl,0x5c
c0009e02:	74 90                	je     c0009d94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009e04:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0009e07:	40                   	inc    eax
c0009e08:	eb 8a                	jmp    c0009d94 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009e0a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009e0e:	83 ec 0c             	sub    esp,0xc
c0009e11:	53                   	push   ebx
c0009e12:	e8 49 67 ff ff       	call   c0000560 <strlen>
c0009e17:	83 c4 10             	add    esp,0x10
c0009e1a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0009e1f:	75 26                	jne    c0009e47 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0009e21:	83 ec 0c             	sub    esp,0xc
c0009e24:	53                   	push   ebx
c0009e25:	e8 36 67 ff ff       	call   c0000560 <strlen>
c0009e2a:	83 c4 10             	add    esp,0x10
c0009e2d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0009e32:	74 26                	je     c0009e5a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0009e34:	83 ec 0c             	sub    esp,0xc
c0009e37:	53                   	push   ebx
c0009e38:	e8 23 67 ff ff       	call   c0000560 <strlen>
c0009e3d:	83 c4 10             	add    esp,0x10
c0009e40:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0009e45:	eb c7                	jmp    c0009e0e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0009e47:	83 ec 0c             	sub    esp,0xc
c0009e4a:	53                   	push   ebx
c0009e4b:	e8 10 67 ff ff       	call   c0000560 <strlen>
c0009e50:	83 c4 10             	add    esp,0x10
c0009e53:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009e58:	74 c7                	je     c0009e21 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0009e5a:	81 c4 0c 04 00 00    	add    esp,0x40c
c0009e60:	5b                   	pop    ebx
c0009e61:	5e                   	pop    esi
c0009e62:	5f                   	pop    edi
c0009e63:	5d                   	pop    ebp
c0009e64:	c3                   	ret    
c0009e65:	90                   	nop

c0009e66 <File::File(char const*, Process*)>:
c0009e66:	83 ec 0c             	sub    esp,0xc
c0009e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e6d:	83 ec 08             	sub    esp,0x8
c0009e70:	6a 00                	push   0x0
c0009e72:	50                   	push   eax
c0009e73:	e8 e2 e3 ff ff       	call   c000825a <UnixFile::UnixFile(int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	ba 2c d3 01 c0       	mov    edx,0xc001d32c
c0009e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e84:	89 10                	mov    DWORD PTR [eax],edx
c0009e86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e8a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0009e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e94:	83 c0 0d             	add    eax,0xd
c0009e97:	83 ec 04             	sub    esp,0x4
c0009e9a:	52                   	push   edx
c0009e9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e9f:	50                   	push   eax
c0009ea0:	e8 17 fe ff ff       	call   c0009cbc <Fs::standardiseFiles(char*, char const*, char const*)>
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009eac:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0009eaf:	8d 50 bf             	lea    edx,[eax-0x41]
c0009eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009eb6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0009ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ec0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0009ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ec8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009ece:	25 ff 00 00 00       	and    eax,0xff
c0009ed3:	8b 04 85 80 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde680]
c0009eda:	85 c0                	test   eax,eax
c0009edc:	74 42                	je     c0009f20 <File::File(char const*, Process*)+0xba>
c0009ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ee2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009ee8:	25 ff 00 00 00       	and    eax,0xff
c0009eed:	8b 04 85 80 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde680]
c0009ef4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009efa:	85 c0                	test   eax,eax
c0009efc:	75 22                	jne    c0009f20 <File::File(char const*, Process*)+0xba>
c0009efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f02:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009f08:	25 ff 00 00 00       	and    eax,0xff
c0009f0d:	8b 04 85 80 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde680]
c0009f14:	83 ec 0c             	sub    esp,0xc
c0009f17:	50                   	push   eax
c0009f18:	e8 f9 1f 00 00       	call   c000bf16 <LogicalDisk::mount()>
c0009f1d:	83 c4 10             	add    esp,0x10
c0009f20:	90                   	nop
c0009f21:	83 c4 0c             	add    esp,0xc
c0009f24:	c3                   	ret    
c0009f25:	90                   	nop

c0009f26 <File::open(FileOpenMode)>:
c0009f26:	53                   	push   ebx
c0009f27:	b8 0b 00 00 00       	mov    eax,0xb
c0009f2c:	83 ec 08             	sub    esp,0x8
c0009f2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f33:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0009f3a:	80 fa 19             	cmp    dl,0x19
c0009f3d:	77 40                	ja     c0009f7f <File::open(FileOpenMode)+0x59>
c0009f3f:	8b 14 95 80 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde680]
c0009f46:	85 d2                	test   edx,edx
c0009f48:	74 35                	je     c0009f7f <File::open(FileOpenMode)+0x59>
c0009f4a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0009f50:	85 d2                	test   edx,edx
c0009f52:	74 2b                	je     c0009f7f <File::open(FileOpenMode)+0x59>
c0009f54:	b8 06 00 00 00       	mov    eax,0x6
c0009f59:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0009f5d:	75 20                	jne    c0009f7f <File::open(FileOpenMode)+0x59>
c0009f5f:	8b 02                	mov    eax,DWORD PTR [edx]
c0009f61:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0009f67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f6b:	51                   	push   ecx
c0009f6c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0009f6f:	51                   	push   ecx
c0009f70:	52                   	push   edx
c0009f71:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	85 c0                	test   eax,eax
c0009f79:	75 04                	jne    c0009f7f <File::open(FileOpenMode)+0x59>
c0009f7b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0009f7f:	83 c4 08             	add    esp,0x8
c0009f82:	5b                   	pop    ebx
c0009f83:	c3                   	ret    

c0009f84 <File::close()>:
c0009f84:	53                   	push   ebx
c0009f85:	b8 0b 00 00 00       	mov    eax,0xb
c0009f8a:	83 ec 08             	sub    esp,0x8
c0009f8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009f91:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0009f98:	80 fa 19             	cmp    dl,0x19
c0009f9b:	77 41                	ja     c0009fde <File::close()+0x5a>
c0009f9d:	8b 1c 95 80 19 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffde680]
c0009fa4:	85 db                	test   ebx,ebx
c0009fa6:	74 36                	je     c0009fde <File::close()+0x5a>
c0009fa8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0009faf:	74 2d                	je     c0009fde <File::close()+0x5a>
c0009fb1:	b8 05 00 00 00       	mov    eax,0x5
c0009fb6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0009fba:	74 22                	je     c0009fde <File::close()+0x5a>
c0009fbc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0009fc0:	8b 04 95 80 19 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde680]
c0009fc7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009fcd:	53                   	push   ebx
c0009fce:	53                   	push   ebx
c0009fcf:	8b 10                	mov    edx,DWORD PTR [eax]
c0009fd1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0009fd7:	50                   	push   eax
c0009fd8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0009fdb:	83 c4 10             	add    esp,0x10
c0009fde:	83 c4 08             	add    esp,0x8
c0009fe1:	5b                   	pop    ebx
c0009fe2:	c3                   	ret    
c0009fe3:	90                   	nop

c0009fe4 <File::seek(unsigned long long)>:
c0009fe4:	56                   	push   esi
c0009fe5:	53                   	push   ebx
c0009fe6:	b8 0b 00 00 00       	mov    eax,0xb
c0009feb:	51                   	push   ecx
c0009fec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009ff0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009ff4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0009ffb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009fff:	80 fa 19             	cmp    dl,0x19
c000a002:	77 31                	ja     c000a035 <File::seek(unsigned long long)+0x51>
c000a004:	8b 14 95 80 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde680]
c000a00b:	85 d2                	test   edx,edx
c000a00d:	74 26                	je     c000a035 <File::seek(unsigned long long)+0x51>
c000a00f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a015:	85 d2                	test   edx,edx
c000a017:	74 1c                	je     c000a035 <File::seek(unsigned long long)+0x51>
c000a019:	b8 05 00 00 00       	mov    eax,0x5
c000a01e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000a022:	74 11                	je     c000a035 <File::seek(unsigned long long)+0x51>
c000a024:	8b 02                	mov    eax,DWORD PTR [edx]
c000a026:	53                   	push   ebx
c000a027:	51                   	push   ecx
c000a028:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000a02e:	52                   	push   edx
c000a02f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000a032:	83 c4 10             	add    esp,0x10
c000a035:	5a                   	pop    edx
c000a036:	5b                   	pop    ebx
c000a037:	5e                   	pop    esi
c000a038:	c3                   	ret    
c000a039:	90                   	nop

c000a03a <File::tell(unsigned long long*)>:
c000a03a:	83 ec 0c             	sub    esp,0xc
c000a03d:	b8 0b 00 00 00       	mov    eax,0xb
c000a042:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a046:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a04d:	80 fa 19             	cmp    dl,0x19
c000a050:	77 34                	ja     c000a086 <File::tell(unsigned long long*)+0x4c>
c000a052:	8b 14 95 80 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde680]
c000a059:	85 d2                	test   edx,edx
c000a05b:	74 29                	je     c000a086 <File::tell(unsigned long long*)+0x4c>
c000a05d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a063:	85 d2                	test   edx,edx
c000a065:	74 1f                	je     c000a086 <File::tell(unsigned long long*)+0x4c>
c000a067:	b8 05 00 00 00       	mov    eax,0x5
c000a06c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a070:	74 14                	je     c000a086 <File::tell(unsigned long long*)+0x4c>
c000a072:	50                   	push   eax
c000a073:	8b 02                	mov    eax,DWORD PTR [edx]
c000a075:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a079:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a07f:	52                   	push   edx
c000a080:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a083:	83 c4 10             	add    esp,0x10
c000a086:	83 c4 0c             	add    esp,0xc
c000a089:	c3                   	ret    

c000a08a <File::rewind()>:
c000a08a:	83 ec 10             	sub    esp,0x10
c000a08d:	6a 00                	push   0x0
c000a08f:	6a 00                	push   0x0
c000a091:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a095:	e8 4a ff ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c000a09a:	83 c4 1c             	add    esp,0x1c
c000a09d:	c3                   	ret    

c000a09e <File::unlink()>:
c000a09e:	83 ec 0c             	sub    esp,0xc
c000a0a1:	b8 0b 00 00 00       	mov    eax,0xb
c000a0a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a0aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a0b1:	80 f9 19             	cmp    cl,0x19
c000a0b4:	77 2f                	ja     c000a0e5 <File::unlink()+0x47>
c000a0b6:	8b 0c 8d 80 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde680]
c000a0bd:	85 c9                	test   ecx,ecx
c000a0bf:	74 24                	je     c000a0e5 <File::unlink()+0x47>
c000a0c1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a0c7:	85 c9                	test   ecx,ecx
c000a0c9:	74 1a                	je     c000a0e5 <File::unlink()+0x47>
c000a0cb:	b8 06 00 00 00       	mov    eax,0x6
c000a0d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a0d4:	75 0f                	jne    c000a0e5 <File::unlink()+0x47>
c000a0d6:	83 c2 0d             	add    edx,0xd
c000a0d9:	50                   	push   eax
c000a0da:	50                   	push   eax
c000a0db:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a0dd:	52                   	push   edx
c000a0de:	51                   	push   ecx
c000a0df:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	83 c4 0c             	add    esp,0xc
c000a0e8:	c3                   	ret    
c000a0e9:	90                   	nop

c000a0ea <File::rename(char const*)>:
c000a0ea:	83 ec 0c             	sub    esp,0xc
c000a0ed:	b8 0b 00 00 00       	mov    eax,0xb
c000a0f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a0f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a0fd:	80 f9 19             	cmp    cl,0x19
c000a100:	77 32                	ja     c000a134 <File::rename(char const*)+0x4a>
c000a102:	8b 0c 8d 80 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde680]
c000a109:	85 c9                	test   ecx,ecx
c000a10b:	74 27                	je     c000a134 <File::rename(char const*)+0x4a>
c000a10d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a113:	85 c9                	test   ecx,ecx
c000a115:	74 1d                	je     c000a134 <File::rename(char const*)+0x4a>
c000a117:	b8 06 00 00 00       	mov    eax,0x6
c000a11c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a120:	75 12                	jne    c000a134 <File::rename(char const*)+0x4a>
c000a122:	83 c2 0d             	add    edx,0xd
c000a125:	50                   	push   eax
c000a126:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a128:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a12c:	52                   	push   edx
c000a12d:	51                   	push   ecx
c000a12e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a131:	83 c4 10             	add    esp,0x10
c000a134:	83 c4 0c             	add    esp,0xc
c000a137:	c3                   	ret    

c000a138 <File::chfatattr(unsigned char, unsigned char)>:
c000a138:	57                   	push   edi
c000a139:	b8 0b 00 00 00       	mov    eax,0xb
c000a13e:	56                   	push   esi
c000a13f:	53                   	push   ebx
c000a140:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a144:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a148:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a14f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a153:	80 f9 19             	cmp    cl,0x19
c000a156:	77 37                	ja     c000a18f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a158:	8b 0c 8d 80 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde680]
c000a15f:	85 c9                	test   ecx,ecx
c000a161:	74 2c                	je     c000a18f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a163:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a169:	85 c9                	test   ecx,ecx
c000a16b:	74 22                	je     c000a18f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a16d:	b8 06 00 00 00       	mov    eax,0x6
c000a172:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a176:	75 17                	jne    c000a18f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a178:	8b 39                	mov    edi,DWORD PTR [ecx]
c000a17a:	89 f0                	mov    eax,esi
c000a17c:	83 c2 0d             	add    edx,0xd
c000a17f:	0f b6 f0             	movzx  esi,al
c000a182:	0f b6 db             	movzx  ebx,bl
c000a185:	56                   	push   esi
c000a186:	53                   	push   ebx
c000a187:	52                   	push   edx
c000a188:	51                   	push   ecx
c000a189:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000a18c:	83 c4 10             	add    esp,0x10
c000a18f:	5b                   	pop    ebx
c000a190:	5e                   	pop    esi
c000a191:	5f                   	pop    edi
c000a192:	c3                   	ret    
c000a193:	90                   	nop

c000a194 <File::exists()>:
c000a194:	83 ec 0c             	sub    esp,0xc
c000a197:	31 c0                	xor    eax,eax
c000a199:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a19d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a1a4:	80 f9 19             	cmp    cl,0x19
c000a1a7:	77 24                	ja     c000a1cd <File::exists()+0x39>
c000a1a9:	8b 0c 8d 80 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde680]
c000a1b0:	85 c9                	test   ecx,ecx
c000a1b2:	74 19                	je     c000a1cd <File::exists()+0x39>
c000a1b4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a1ba:	85 c9                	test   ecx,ecx
c000a1bc:	74 0f                	je     c000a1cd <File::exists()+0x39>
c000a1be:	83 c2 0d             	add    edx,0xd
c000a1c1:	50                   	push   eax
c000a1c2:	50                   	push   eax
c000a1c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a1c5:	52                   	push   edx
c000a1c6:	51                   	push   ecx
c000a1c7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a1ca:	83 c4 10             	add    esp,0x10
c000a1cd:	83 c4 0c             	add    esp,0xc
c000a1d0:	c3                   	ret    
c000a1d1:	90                   	nop

c000a1d2 <File::stat(unsigned long long*, bool*)>:
c000a1d2:	56                   	push   esi
c000a1d3:	53                   	push   ebx
c000a1d4:	50                   	push   eax
c000a1d5:	b8 0b 00 00 00       	mov    eax,0xb
c000a1da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a1de:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a1e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a1e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a1ed:	80 f9 19             	cmp    cl,0x19
c000a1f0:	77 3d                	ja     c000a22f <File::stat(unsigned long long*, bool*)+0x5d>
c000a1f2:	8b 0c 8d 80 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde680]
c000a1f9:	85 c9                	test   ecx,ecx
c000a1fb:	74 32                	je     c000a22f <File::stat(unsigned long long*, bool*)+0x5d>
c000a1fd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a203:	85 c9                	test   ecx,ecx
c000a205:	74 28                	je     c000a22f <File::stat(unsigned long long*, bool*)+0x5d>
c000a207:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a209:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a20d:	74 13                	je     c000a222 <File::stat(unsigned long long*, bool*)+0x50>
c000a20f:	83 ec 04             	sub    esp,0x4
c000a212:	56                   	push   esi
c000a213:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000a219:	51                   	push   ecx
c000a21a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000a21d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a220:	eb 0a                	jmp    c000a22c <File::stat(unsigned long long*, bool*)+0x5a>
c000a222:	53                   	push   ebx
c000a223:	83 c2 0d             	add    edx,0xd
c000a226:	56                   	push   esi
c000a227:	52                   	push   edx
c000a228:	51                   	push   ecx
c000a229:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000a22c:	83 c4 10             	add    esp,0x10
c000a22f:	5a                   	pop    edx
c000a230:	5b                   	pop    ebx
c000a231:	5e                   	pop    esi
c000a232:	c3                   	ret    

c000a233 <Fs::setcwd(Process*, char*)>:
c000a233:	55                   	push   ebp
c000a234:	57                   	push   edi
c000a235:	56                   	push   esi
c000a236:	53                   	push   ebx
c000a237:	81 ec 20 02 00 00    	sub    esp,0x220
c000a23d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000a244:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000a24a:	57                   	push   edi
c000a24b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000a252:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000a256:	56                   	push   esi
c000a257:	e8 60 fa ff ff       	call   c0009cbc <Fs::standardiseFiles(char*, char const*, char const*)>
c000a25c:	89 34 24             	mov    DWORD PTR [esp],esi
c000a25f:	e8 fc 62 ff ff       	call   c0000560 <strlen>
c000a264:	83 c4 10             	add    esp,0x10
c000a267:	83 f8 02             	cmp    eax,0x2
c000a26a:	77 15                	ja     c000a281 <Fs::setcwd(Process*, char*)+0x4e>
c000a26c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000a271:	83 eb 41             	sub    ebx,0x41
c000a274:	8b 04 9d 80 19 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde680]
c000a27b:	85 c0                	test   eax,eax
c000a27d:	75 1c                	jne    c000a29b <Fs::setcwd(Process*, char*)+0x68>
c000a27f:	eb 2f                	jmp    c000a2b0 <Fs::setcwd(Process*, char*)+0x7d>
c000a281:	83 ec 0c             	sub    esp,0xc
c000a284:	56                   	push   esi
c000a285:	e8 d6 62 ff ff       	call   c0000560 <strlen>
c000a28a:	83 c4 10             	add    esp,0x10
c000a28d:	83 f8 03             	cmp    eax,0x3
c000a290:	75 57                	jne    c000a2e9 <Fs::setcwd(Process*, char*)+0xb6>
c000a292:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000a297:	75 50                	jne    c000a2e9 <Fs::setcwd(Process*, char*)+0xb6>
c000a299:	eb d1                	jmp    c000a26c <Fs::setcwd(Process*, char*)+0x39>
c000a29b:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000a2a2:	75 0c                	jne    c000a2b0 <Fs::setcwd(Process*, char*)+0x7d>
c000a2a4:	83 ec 0c             	sub    esp,0xc
c000a2a7:	50                   	push   eax
c000a2a8:	e8 69 1c 00 00       	call   c000bf16 <LogicalDisk::mount()>
c000a2ad:	83 c4 10             	add    esp,0x10
c000a2b0:	b8 03 00 00 00       	mov    eax,0x3
c000a2b5:	83 fb 19             	cmp    ebx,0x19
c000a2b8:	0f 87 c6 00 00 00    	ja     c000a384 <Fs::setcwd(Process*, char*)+0x151>
c000a2be:	8b 14 9d 80 19 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffde680]
c000a2c5:	b8 05 00 00 00       	mov    eax,0x5
c000a2ca:	85 d2                	test   edx,edx
c000a2cc:	0f 84 b2 00 00 00    	je     c000a384 <Fs::setcwd(Process*, char*)+0x151>
c000a2d2:	b8 06 00 00 00       	mov    eax,0x6
c000a2d7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a2de:	0f 85 92 00 00 00    	jne    c000a376 <Fs::setcwd(Process*, char*)+0x143>
c000a2e4:	e9 9b 00 00 00       	jmp    c000a384 <Fs::setcwd(Process*, char*)+0x151>
c000a2e9:	83 ec 0c             	sub    esp,0xc
c000a2ec:	68 14 01 00 00       	push   0x114
c000a2f1:	e8 6b c8 ff ff       	call   c0006b61 <malloc>
c000a2f6:	83 c4 0c             	add    esp,0xc
c000a2f9:	89 c3                	mov    ebx,eax
c000a2fb:	55                   	push   ebp
c000a2fc:	56                   	push   esi
c000a2fd:	50                   	push   eax
c000a2fe:	e8 63 fb ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000a303:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a308:	83 c4 0c             	add    esp,0xc
c000a30b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000a30f:	50                   	push   eax
c000a310:	8d 44 24 10          	lea    eax,[esp+0x10]
c000a314:	50                   	push   eax
c000a315:	53                   	push   ebx
c000a316:	e8 b7 fe ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c000a31b:	83 c4 10             	add    esp,0x10
c000a31e:	83 f8 02             	cmp    eax,0x2
c000a321:	74 04                	je     c000a327 <Fs::setcwd(Process*, char*)+0xf4>
c000a323:	85 c0                	test   eax,eax
c000a325:	74 1c                	je     c000a343 <Fs::setcwd(Process*, char*)+0x110>
c000a327:	b8 01 00 00 00       	mov    eax,0x1
c000a32c:	85 db                	test   ebx,ebx
c000a32e:	74 54                	je     c000a384 <Fs::setcwd(Process*, char*)+0x151>
c000a330:	83 ec 0c             	sub    esp,0xc
c000a333:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a335:	53                   	push   ebx
c000a336:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a339:	83 c4 10             	add    esp,0x10
c000a33c:	b8 01 00 00 00       	mov    eax,0x1
c000a341:	eb 41                	jmp    c000a384 <Fs::setcwd(Process*, char*)+0x151>
c000a343:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000a348:	75 1c                	jne    c000a366 <Fs::setcwd(Process*, char*)+0x133>
c000a34a:	b8 02 00 00 00       	mov    eax,0x2
c000a34f:	85 db                	test   ebx,ebx
c000a351:	74 31                	je     c000a384 <Fs::setcwd(Process*, char*)+0x151>
c000a353:	83 ec 0c             	sub    esp,0xc
c000a356:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a358:	53                   	push   ebx
c000a359:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a35c:	83 c4 10             	add    esp,0x10
c000a35f:	b8 02 00 00 00       	mov    eax,0x2
c000a364:	eb 1e                	jmp    c000a384 <Fs::setcwd(Process*, char*)+0x151>
c000a366:	85 db                	test   ebx,ebx
c000a368:	74 0c                	je     c000a376 <Fs::setcwd(Process*, char*)+0x143>
c000a36a:	83 ec 0c             	sub    esp,0xc
c000a36d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a36f:	53                   	push   ebx
c000a370:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a373:	83 c4 10             	add    esp,0x10
c000a376:	50                   	push   eax
c000a377:	50                   	push   eax
c000a378:	56                   	push   esi
c000a379:	57                   	push   edi
c000a37a:	e8 a1 62 ff ff       	call   c0000620 <strcpy>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	31 c0                	xor    eax,eax
c000a384:	81 c4 1c 02 00 00    	add    esp,0x21c
c000a38a:	5b                   	pop    ebx
c000a38b:	5e                   	pop    esi
c000a38c:	5f                   	pop    edi
c000a38d:	5d                   	pop    ebp
c000a38e:	c3                   	ret    
c000a38f:	90                   	nop

c000a390 <Directory::Directory(char const*, Process*)>:
c000a390:	83 ec 0c             	sub    esp,0xc
c000a393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a397:	83 ec 08             	sub    esp,0x8
c000a39a:	6a 00                	push   0x0
c000a39c:	50                   	push   eax
c000a39d:	e8 b8 de ff ff       	call   c000825a <UnixFile::UnixFile(int)>
c000a3a2:	83 c4 10             	add    esp,0x10
c000a3a5:	ba 48 d3 01 c0       	mov    edx,0xc001d348
c000a3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ae:	89 10                	mov    DWORD PTR [eax],edx
c000a3b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a3b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000a3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3be:	83 c0 0d             	add    eax,0xd
c000a3c1:	83 ec 04             	sub    esp,0x4
c000a3c4:	52                   	push   edx
c000a3c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3c9:	50                   	push   eax
c000a3ca:	e8 ed f8 ff ff       	call   c0009cbc <Fs::standardiseFiles(char*, char const*, char const*)>
c000a3cf:	83 c4 10             	add    esp,0x10
c000a3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3d6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000a3d9:	8d 50 bf             	lea    edx,[eax-0x41]
c000a3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3e0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000a3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000a3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3f2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a3f8:	25 ff 00 00 00       	and    eax,0xff
c000a3fd:	8b 04 85 80 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde680]
c000a404:	85 c0                	test   eax,eax
c000a406:	74 42                	je     c000a44a <Directory::Directory(char const*, Process*)+0xba>
c000a408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a40c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a412:	25 ff 00 00 00       	and    eax,0xff
c000a417:	8b 04 85 80 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde680]
c000a41e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a424:	85 c0                	test   eax,eax
c000a426:	75 22                	jne    c000a44a <Directory::Directory(char const*, Process*)+0xba>
c000a428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a42c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a432:	25 ff 00 00 00       	and    eax,0xff
c000a437:	8b 04 85 80 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde680]
c000a43e:	83 ec 0c             	sub    esp,0xc
c000a441:	50                   	push   eax
c000a442:	e8 cf 1a 00 00       	call   c000bf16 <LogicalDisk::mount()>
c000a447:	83 c4 10             	add    esp,0x10
c000a44a:	90                   	nop
c000a44b:	83 c4 0c             	add    esp,0xc
c000a44e:	c3                   	ret    
c000a44f:	90                   	nop

c000a450 <Directory::open()>:
c000a450:	53                   	push   ebx
c000a451:	b8 0b 00 00 00       	mov    eax,0xb
c000a456:	83 ec 08             	sub    esp,0x8
c000a459:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a45d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000a464:	80 fa 19             	cmp    dl,0x19
c000a467:	77 3d                	ja     c000a4a6 <Directory::open()+0x56>
c000a469:	8b 14 95 80 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde680]
c000a470:	85 d2                	test   edx,edx
c000a472:	74 32                	je     c000a4a6 <Directory::open()+0x56>
c000a474:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a47a:	85 d2                	test   edx,edx
c000a47c:	74 28                	je     c000a4a6 <Directory::open()+0x56>
c000a47e:	b8 06 00 00 00       	mov    eax,0x6
c000a483:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000a487:	75 1d                	jne    c000a4a6 <Directory::open()+0x56>
c000a489:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000a48f:	50                   	push   eax
c000a490:	8b 02                	mov    eax,DWORD PTR [edx]
c000a492:	51                   	push   ecx
c000a493:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000a496:	51                   	push   ecx
c000a497:	52                   	push   edx
c000a498:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000a49b:	83 c4 10             	add    esp,0x10
c000a49e:	85 c0                	test   eax,eax
c000a4a0:	75 04                	jne    c000a4a6 <Directory::open()+0x56>
c000a4a2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000a4a6:	83 c4 08             	add    esp,0x8
c000a4a9:	5b                   	pop    ebx
c000a4aa:	c3                   	ret    
c000a4ab:	90                   	nop

c000a4ac <Directory::close()>:
c000a4ac:	53                   	push   ebx
c000a4ad:	b8 0b 00 00 00       	mov    eax,0xb
c000a4b2:	83 ec 08             	sub    esp,0x8
c000a4b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a4b9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a4c0:	80 fa 19             	cmp    dl,0x19
c000a4c3:	77 41                	ja     c000a506 <Directory::close()+0x5a>
c000a4c5:	8b 1c 95 80 19 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffde680]
c000a4cc:	85 db                	test   ebx,ebx
c000a4ce:	74 36                	je     c000a506 <Directory::close()+0x5a>
c000a4d0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000a4d7:	74 2d                	je     c000a506 <Directory::close()+0x5a>
c000a4d9:	b8 05 00 00 00       	mov    eax,0x5
c000a4de:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a4e2:	74 22                	je     c000a506 <Directory::close()+0x5a>
c000a4e4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000a4e8:	8b 04 95 80 19 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde680]
c000a4ef:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a4f5:	53                   	push   ebx
c000a4f6:	53                   	push   ebx
c000a4f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a4ff:	50                   	push   eax
c000a500:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 c4 08             	add    esp,0x8
c000a509:	5b                   	pop    ebx
c000a50a:	c3                   	ret    
c000a50b:	90                   	nop

c000a50c <Directory::unlink()>:
c000a50c:	83 ec 0c             	sub    esp,0xc
c000a50f:	b8 0b 00 00 00       	mov    eax,0xb
c000a514:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a518:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a51f:	80 f9 19             	cmp    cl,0x19
c000a522:	77 2f                	ja     c000a553 <Directory::unlink()+0x47>
c000a524:	8b 0c 8d 80 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde680]
c000a52b:	85 c9                	test   ecx,ecx
c000a52d:	74 24                	je     c000a553 <Directory::unlink()+0x47>
c000a52f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a535:	85 c9                	test   ecx,ecx
c000a537:	74 1a                	je     c000a553 <Directory::unlink()+0x47>
c000a539:	b8 06 00 00 00       	mov    eax,0x6
c000a53e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a542:	75 0f                	jne    c000a553 <Directory::unlink()+0x47>
c000a544:	83 c2 0d             	add    edx,0xd
c000a547:	50                   	push   eax
c000a548:	50                   	push   eax
c000a549:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a54b:	52                   	push   edx
c000a54c:	51                   	push   ecx
c000a54d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a550:	83 c4 10             	add    esp,0x10
c000a553:	83 c4 0c             	add    esp,0xc
c000a556:	c3                   	ret    
c000a557:	90                   	nop

c000a558 <Directory::rename(char const*)>:
c000a558:	83 ec 0c             	sub    esp,0xc
c000a55b:	b8 0b 00 00 00       	mov    eax,0xb
c000a560:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a564:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a56b:	80 f9 19             	cmp    cl,0x19
c000a56e:	77 32                	ja     c000a5a2 <Directory::rename(char const*)+0x4a>
c000a570:	8b 0c 8d 80 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde680]
c000a577:	85 c9                	test   ecx,ecx
c000a579:	74 27                	je     c000a5a2 <Directory::rename(char const*)+0x4a>
c000a57b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a581:	85 c9                	test   ecx,ecx
c000a583:	74 1d                	je     c000a5a2 <Directory::rename(char const*)+0x4a>
c000a585:	b8 06 00 00 00       	mov    eax,0x6
c000a58a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a58e:	75 12                	jne    c000a5a2 <Directory::rename(char const*)+0x4a>
c000a590:	83 c2 0d             	add    edx,0xd
c000a593:	50                   	push   eax
c000a594:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a596:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a59a:	52                   	push   edx
c000a59b:	51                   	push   ecx
c000a59c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a59f:	83 c4 10             	add    esp,0x10
c000a5a2:	83 c4 0c             	add    esp,0xc
c000a5a5:	c3                   	ret    

c000a5a6 <Directory::exists()>:
c000a5a6:	83 ec 0c             	sub    esp,0xc
c000a5a9:	31 c0                	xor    eax,eax
c000a5ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a5af:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a5b6:	80 f9 19             	cmp    cl,0x19
c000a5b9:	77 24                	ja     c000a5df <Directory::exists()+0x39>
c000a5bb:	8b 0c 8d 80 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde680]
c000a5c2:	85 c9                	test   ecx,ecx
c000a5c4:	74 19                	je     c000a5df <Directory::exists()+0x39>
c000a5c6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a5cc:	85 c9                	test   ecx,ecx
c000a5ce:	74 0f                	je     c000a5df <Directory::exists()+0x39>
c000a5d0:	83 c2 0d             	add    edx,0xd
c000a5d3:	50                   	push   eax
c000a5d4:	50                   	push   eax
c000a5d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a5d7:	52                   	push   edx
c000a5d8:	51                   	push   ecx
c000a5d9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	83 c4 0c             	add    esp,0xc
c000a5e2:	c3                   	ret    
c000a5e3:	90                   	nop

c000a5e4 <Directory::read(dirent*)>:
c000a5e4:	83 ec 1c             	sub    esp,0x1c
c000a5e7:	b8 0b 00 00 00       	mov    eax,0xb
c000a5ec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5f0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a5f7:	80 fa 19             	cmp    dl,0x19
c000a5fa:	77 30                	ja     c000a62c <Directory::read(dirent*)+0x48>
c000a5fc:	8b 14 95 80 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde680]
c000a603:	85 d2                	test   edx,edx
c000a605:	74 25                	je     c000a62c <Directory::read(dirent*)+0x48>
c000a607:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a60e:	74 1c                	je     c000a62c <Directory::read(dirent*)+0x48>
c000a610:	83 ec 0c             	sub    esp,0xc
c000a613:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a615:	8d 54 24 18          	lea    edx,[esp+0x18]
c000a619:	52                   	push   edx
c000a61a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a61e:	6a 00                	push   0x0
c000a620:	68 10 01 00 00       	push   0x110
c000a625:	51                   	push   ecx
c000a626:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a629:	83 c4 20             	add    esp,0x20
c000a62c:	83 c4 1c             	add    esp,0x1c
c000a62f:	c3                   	ret    

c000a630 <Directory::create()>:
c000a630:	83 ec 0c             	sub    esp,0xc
c000a633:	b8 0b 00 00 00       	mov    eax,0xb
c000a638:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a63c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a643:	80 f9 19             	cmp    cl,0x19
c000a646:	77 2f                	ja     c000a677 <Directory::create()+0x47>
c000a648:	8b 0c 8d 80 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde680]
c000a64f:	85 c9                	test   ecx,ecx
c000a651:	74 24                	je     c000a677 <Directory::create()+0x47>
c000a653:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a659:	85 c9                	test   ecx,ecx
c000a65b:	74 1a                	je     c000a677 <Directory::create()+0x47>
c000a65d:	b8 06 00 00 00       	mov    eax,0x6
c000a662:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a666:	75 0f                	jne    c000a677 <Directory::create()+0x47>
c000a668:	83 c2 0d             	add    edx,0xd
c000a66b:	50                   	push   eax
c000a66c:	50                   	push   eax
c000a66d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a66f:	52                   	push   edx
c000a670:	51                   	push   ecx
c000a671:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000a674:	83 c4 10             	add    esp,0x10
c000a677:	83 c4 0c             	add    esp,0xc
c000a67a:	c3                   	ret    
c000a67b:	90                   	nop

c000a67c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000a67c:	b8 0a 00 00 00       	mov    eax,0xa
c000a681:	c3                   	ret    
c000a682:	66 90                	xchg   ax,ax

c000a684 <Bus::Bus(char const*)>:
c000a684:	83 ec 0c             	sub    esp,0xc
c000a687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a68b:	83 ec 08             	sub    esp,0x8
c000a68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a692:	50                   	push   eax
c000a693:	e8 30 08 00 00       	call   c000aec8 <Device::Device(char const*)>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	ba 64 d3 01 c0       	mov    edx,0xc001d364
c000a6a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a4:	89 10                	mov    DWORD PTR [eax],edx
c000a6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6aa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000a6b4:	90                   	nop
c000a6b5:	83 c4 0c             	add    esp,0xc
c000a6b8:	c3                   	ret    
c000a6b9:	90                   	nop
c000a6ba:	66 90                	xchg   ax,ax

c000a6bc <Bus::~Bus()>:
c000a6bc:	83 ec 0c             	sub    esp,0xc
c000a6bf:	ba 64 d3 01 c0       	mov    edx,0xc001d364
c000a6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c8:	89 10                	mov    DWORD PTR [eax],edx
c000a6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ce:	83 ec 0c             	sub    esp,0xc
c000a6d1:	50                   	push   eax
c000a6d2:	e8 5b 05 00 00       	call   c000ac32 <Device::~Device()>
c000a6d7:	83 c4 10             	add    esp,0x10
c000a6da:	90                   	nop
c000a6db:	83 c4 0c             	add    esp,0xc
c000a6de:	c3                   	ret    
c000a6df:	90                   	nop

c000a6e0 <Bus::~Bus()>:
c000a6e0:	83 ec 0c             	sub    esp,0xc
c000a6e3:	83 ec 0c             	sub    esp,0xc
c000a6e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6ea:	e8 cd ff ff ff       	call   c000a6bc <Bus::~Bus()>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	83 ec 08             	sub    esp,0x8
c000a6f5:	68 58 01 00 00       	push   0x158
c000a6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fe:	e8 f7 f0 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000a703:	83 c4 10             	add    esp,0x10
c000a706:	83 c4 0c             	add    esp,0xc
c000a709:	c3                   	ret    

c000a70a <beepThread(void*)>:
c000a70a:	83 ec 0c             	sub    esp,0xc
c000a70d:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000a712:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a716:	48                   	dec    eax
c000a717:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c000a71c:	75 01                	jne    c000a71f <beepThread(void*)+0x15>
c000a71e:	fb                   	sti    
c000a71f:	83 ec 0c             	sub    esp,0xc
c000a722:	6b c2 0a             	imul   eax,edx,0xa
c000a725:	50                   	push   eax
c000a726:	e8 89 84 00 00       	call   c0012bb4 <milliTenthSleep(unsigned int)>
c000a72b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000a732:	e8 c5 a0 00 00       	call   c00147fc <HalMakeBeep(int)>
c000a737:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000a73f:	83 c4 1c             	add    esp,0x1c
c000a742:	e9 69 83 00 00       	jmp    c0012ab0 <blockTask(TaskState)>

c000a747 <Krnl::beep(int, int, bool)>:
c000a747:	56                   	push   esi
c000a748:	53                   	push   ebx
c000a749:	83 ec 10             	sub    esp,0x10
c000a74c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a750:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a758:	e8 9f a0 00 00       	call   c00147fc <HalMakeBeep(int)>
c000a75d:	83 c4 10             	add    esp,0x10
c000a760:	89 f0                	mov    eax,esi
c000a762:	84 c0                	test   al,al
c000a764:	74 1e                	je     c000a784 <Krnl::beep(int, int, bool)+0x3d>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	6b db 0a             	imul   ebx,ebx,0xa
c000a76c:	53                   	push   ebx
c000a76d:	e8 42 84 00 00       	call   c0012bb4 <milliTenthSleep(unsigned int)>
c000a772:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000a77a:	83 c4 14             	add    esp,0x14
c000a77d:	5b                   	pop    ebx
c000a77e:	5e                   	pop    esi
c000a77f:	e9 78 a0 00 00       	jmp    c00147fc <HalMakeBeep(int)>
c000a784:	68 e6 00 00 00       	push   0xe6
c000a789:	53                   	push   ebx
c000a78a:	68 0a a7 00 c0       	push   0xc000a70a
c000a78f:	ff 35 10 29 02 c0    	push   DWORD PTR ds:0xc0022910
c000a795:	e8 fa 7e 00 00       	call   c0012694 <Process::createThread(void (*)(void*), void*, int)>
c000a79a:	83 c4 14             	add    esp,0x14
c000a79d:	5b                   	pop    ebx
c000a79e:	5e                   	pop    esi
c000a79f:	c3                   	ret    

c000a7a0 <User::loadClockSettings(int)>:
c000a7a0:	53                   	push   ebx
c000a7a1:	83 ec 14             	sub    esp,0x14
c000a7a4:	68 14 01 00 00       	push   0x114
c000a7a9:	e8 b3 c3 ff ff       	call   c0006b61 <malloc>
c000a7ae:	83 c4 0c             	add    esp,0xc
c000a7b1:	89 c3                	mov    ebx,eax
c000a7b3:	ff 35 10 29 02 c0    	push   DWORD PTR ds:0xc0022910
c000a7b9:	68 88 d3 01 c0       	push   0xc001d388
c000a7be:	50                   	push   eax
c000a7bf:	e8 a2 f6 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000a7c4:	58                   	pop    eax
c000a7c5:	5a                   	pop    edx
c000a7c6:	6a 01                	push   0x1
c000a7c8:	53                   	push   ebx
c000a7c9:	e8 58 f7 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c000a7ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a7d1:	e8 ae f7 ff ff       	call   c0009f84 <File::close()>
c000a7d6:	83 c4 10             	add    esp,0x10
c000a7d9:	85 db                	test   ebx,ebx
c000a7db:	74 0f                	je     c000a7ec <User::loadClockSettings(int)+0x4c>
c000a7dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a7df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000a7e6:	83 c4 08             	add    esp,0x8
c000a7e9:	5b                   	pop    ebx
c000a7ea:	ff e0                	jmp    eax
c000a7ec:	83 c4 08             	add    esp,0x8
c000a7ef:	5b                   	pop    ebx
c000a7f0:	c3                   	ret    
c000a7f1:	90                   	nop

c000a7f2 <Clock::Clock(char const*)>:
c000a7f2:	83 ec 0c             	sub    esp,0xc
c000a7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7f9:	83 ec 08             	sub    esp,0x8
c000a7fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a800:	50                   	push   eax
c000a801:	e8 c2 06 00 00       	call   c000aec8 <Device::Device(char const*)>
c000a806:	83 c4 10             	add    esp,0x10
c000a809:	ba b0 d3 01 c0       	mov    edx,0xc001d3b0
c000a80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a812:	89 10                	mov    DWORD PTR [eax],edx
c000a814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a818:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000a822:	90                   	nop
c000a823:	83 c4 0c             	add    esp,0xc
c000a826:	c3                   	ret    
c000a827:	90                   	nop

c000a828 <Clock::~Clock()>:
c000a828:	83 ec 0c             	sub    esp,0xc
c000a82b:	ba b0 d3 01 c0       	mov    edx,0xc001d3b0
c000a830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a834:	89 10                	mov    DWORD PTR [eax],edx
c000a836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a83a:	83 ec 0c             	sub    esp,0xc
c000a83d:	50                   	push   eax
c000a83e:	e8 ef 03 00 00       	call   c000ac32 <Device::~Device()>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	90                   	nop
c000a847:	83 c4 0c             	add    esp,0xc
c000a84a:	c3                   	ret    
c000a84b:	90                   	nop

c000a84c <Clock::~Clock()>:
c000a84c:	83 ec 0c             	sub    esp,0xc
c000a84f:	83 ec 0c             	sub    esp,0xc
c000a852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a856:	e8 cd ff ff ff       	call   c000a828 <Clock::~Clock()>
c000a85b:	83 c4 10             	add    esp,0x10
c000a85e:	83 ec 08             	sub    esp,0x8
c000a861:	68 58 01 00 00       	push   0x158
c000a866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a86a:	e8 8b ef ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000a86f:	83 c4 10             	add    esp,0x10
c000a872:	83 c4 0c             	add    esp,0xc
c000a875:	c3                   	ret    

c000a876 <Clock::timeInSecondsLocal()>:
c000a876:	53                   	push   ebx
c000a877:	83 ec 14             	sub    esp,0x14
c000a87a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a87e:	8b 10                	mov    edx,DWORD PTR [eax]
c000a880:	50                   	push   eax
c000a881:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000a884:	0f b6 0d 18 f5 01 c0 	movzx  ecx,BYTE PTR ds:0xc001f518
c000a88b:	03 0d 1c f5 01 c0    	add    ecx,DWORD PTR ds:0xc001f51c
c000a891:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a897:	89 cb                	mov    ebx,ecx
c000a899:	c1 fb 1f             	sar    ebx,0x1f
c000a89c:	01 c8                	add    eax,ecx
c000a89e:	11 da                	adc    edx,ebx
c000a8a0:	83 c4 10             	add    esp,0x10
c000a8a3:	31 c9                	xor    ecx,ecx
c000a8a5:	80 3d 19 f5 01 c0 00 	cmp    BYTE PTR ds:0xc001f519,0x0
c000a8ac:	74 05                	je     c000a8b3 <Clock::timeInSecondsLocal()+0x3d>
c000a8ae:	b9 08 07 00 00       	mov    ecx,0x708
c000a8b3:	31 db                	xor    ebx,ebx
c000a8b5:	01 c8                	add    eax,ecx
c000a8b7:	11 da                	adc    edx,ebx
c000a8b9:	83 c4 08             	add    esp,0x8
c000a8bc:	5b                   	pop    ebx
c000a8bd:	c3                   	ret    

c000a8be <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000a8be:	57                   	push   edi
c000a8bf:	56                   	push   esi
c000a8c0:	53                   	push   ebx
c000a8c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a8c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a8c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a8cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000a8cf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000a8d2:	0f b6 05 18 f5 01 c0 	movzx  eax,BYTE PTR ds:0xc001f518
c000a8d9:	03 05 1c f5 01 c0    	add    eax,DWORD PTR ds:0xc001f51c
c000a8df:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000a8e5:	99                   	cdq    
c000a8e6:	29 c6                	sub    esi,eax
c000a8e8:	19 d7                	sbb    edi,edx
c000a8ea:	89 f0                	mov    eax,esi
c000a8ec:	89 fa                	mov    edx,edi
c000a8ee:	31 f6                	xor    esi,esi
c000a8f0:	80 3d 19 f5 01 c0 00 	cmp    BYTE PTR ds:0xc001f519,0x0
c000a8f7:	74 05                	je     c000a8fe <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000a8f9:	be 08 07 00 00       	mov    esi,0x708
c000a8fe:	31 ff                	xor    edi,edi
c000a900:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000a904:	29 f0                	sub    eax,esi
c000a906:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a90a:	19 fa                	sbb    edx,edi
c000a90c:	89 d8                	mov    eax,ebx
c000a90e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a912:	5b                   	pop    ebx
c000a913:	5e                   	pop    esi
c000a914:	5f                   	pop    edi
c000a915:	ff e0                	jmp    eax

c000a917 <datetimeToSeconds(datetime_t)>:
c000a917:	55                   	push   ebp
c000a918:	57                   	push   edi
c000a919:	56                   	push   esi
c000a91a:	53                   	push   ebx
c000a91b:	83 ec 14             	sub    esp,0x14
c000a91e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a922:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000a926:	89 d3                	mov    ebx,edx
c000a928:	0f b6 c6             	movzx  eax,dh
c000a92b:	c1 eb 10             	shr    ebx,0x10
c000a92e:	48                   	dec    eax
c000a92f:	66 81 eb 6c 07       	sub    bx,0x76c
c000a934:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000a938:	0f b6 f5             	movzx  esi,ch
c000a93b:	89 cf                	mov    edi,ecx
c000a93d:	6b f6 3c             	imul   esi,esi,0x3c
c000a940:	c1 ef 10             	shr    edi,0x10
c000a943:	0f b6 c9             	movzx  ecx,cl
c000a946:	89 f8                	mov    eax,edi
c000a948:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a94e:	0f b6 f8             	movzx  edi,al
c000a951:	0f b6 d2             	movzx  edx,dl
c000a954:	01 fe                	add    esi,edi
c000a956:	01 f1                	add    ecx,esi
c000a958:	0f b7 f3             	movzx  esi,bx
c000a95b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a95f:	c1 f9 1f             	sar    ecx,0x1f
c000a962:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000a967:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a96b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000a970:	8b 0c 8d 00 d4 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2c00]
c000a977:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000a97b:	76 29                	jbe    c000a9a6 <datetimeToSeconds(datetime_t)+0x8f>
c000a97d:	f6 c3 03             	test   bl,0x3
c000a980:	75 24                	jne    c000a9a6 <datetimeToSeconds(datetime_t)+0x8f>
c000a982:	31 d2                	xor    edx,edx
c000a984:	bf 64 00 00 00       	mov    edi,0x64
c000a989:	89 d8                	mov    eax,ebx
c000a98b:	66 f7 f7             	div    di
c000a98e:	66 85 d2             	test   dx,dx
c000a991:	75 12                	jne    c000a9a5 <datetimeToSeconds(datetime_t)+0x8e>
c000a993:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000a999:	bf 90 01 00 00       	mov    edi,0x190
c000a99e:	99                   	cdq    
c000a99f:	f7 ff                	idiv   edi
c000a9a1:	85 d2                	test   edx,edx
c000a9a3:	75 01                	jne    c000a9a6 <datetimeToSeconds(datetime_t)+0x8f>
c000a9a5:	41                   	inc    ecx
c000a9a6:	66 83 fb 46          	cmp    bx,0x46
c000a9aa:	76 45                	jbe    c000a9f1 <datetimeToSeconds(datetime_t)+0xda>
c000a9ac:	bb 46 00 00 00       	mov    ebx,0x46
c000a9b1:	bf 64 00 00 00       	mov    edi,0x64
c000a9b6:	bd 90 01 00 00       	mov    ebp,0x190
c000a9bb:	b8 6d 01 00 00       	mov    eax,0x16d
c000a9c0:	f6 c3 03             	test   bl,0x3
c000a9c3:	75 23                	jne    c000a9e8 <datetimeToSeconds(datetime_t)+0xd1>
c000a9c5:	89 d8                	mov    eax,ebx
c000a9c7:	99                   	cdq    
c000a9c8:	f7 ff                	idiv   edi
c000a9ca:	b8 6e 01 00 00       	mov    eax,0x16e
c000a9cf:	85 d2                	test   edx,edx
c000a9d1:	75 15                	jne    c000a9e8 <datetimeToSeconds(datetime_t)+0xd1>
c000a9d3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000a9d9:	99                   	cdq    
c000a9da:	f7 fd                	idiv   ebp
c000a9dc:	31 c0                	xor    eax,eax
c000a9de:	85 d2                	test   edx,edx
c000a9e0:	0f 94 c0             	sete   al
c000a9e3:	05 6d 01 00 00       	add    eax,0x16d
c000a9e8:	01 c1                	add    ecx,eax
c000a9ea:	43                   	inc    ebx
c000a9eb:	39 f3                	cmp    ebx,esi
c000a9ed:	7c cc                	jl     c000a9bb <datetimeToSeconds(datetime_t)+0xa4>
c000a9ef:	eb 3b                	jmp    c000aa2c <datetimeToSeconds(datetime_t)+0x115>
c000a9f1:	74 39                	je     c000aa2c <datetimeToSeconds(datetime_t)+0x115>
c000a9f3:	b8 45 00 00 00       	mov    eax,0x45
c000a9f8:	89 c2                	mov    edx,eax
c000a9fa:	83 e2 03             	and    edx,0x3
c000a9fd:	39 f0                	cmp    eax,esi
c000a9ff:	7e 13                	jle    c000aa14 <datetimeToSeconds(datetime_t)+0xfd>
c000aa01:	85 d2                	test   edx,edx
c000aa03:	0f 94 c2             	sete   dl
c000aa06:	48                   	dec    eax
c000aa07:	0f b6 d2             	movzx  edx,dl
c000aa0a:	81 c2 6d 01 00 00    	add    edx,0x16d
c000aa10:	29 d1                	sub    ecx,edx
c000aa12:	eb e4                	jmp    c000a9f8 <datetimeToSeconds(datetime_t)+0xe1>
c000aa14:	b8 6d 01 00 00       	mov    eax,0x16d
c000aa19:	85 d2                	test   edx,edx
c000aa1b:	75 0d                	jne    c000aa2a <datetimeToSeconds(datetime_t)+0x113>
c000aa1d:	31 c0                	xor    eax,eax
c000aa1f:	66 85 db             	test   bx,bx
c000aa22:	0f 95 c0             	setne  al
c000aa25:	05 6d 01 00 00       	add    eax,0x16d
c000aa2a:	29 c1                	sub    ecx,eax
c000aa2c:	b8 80 51 01 00       	mov    eax,0x15180
c000aa31:	f7 e9                	imul   ecx
c000aa33:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000aa37:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000aa3b:	83 c4 14             	add    esp,0x14
c000aa3e:	5b                   	pop    ebx
c000aa3f:	5e                   	pop    esi
c000aa40:	5f                   	pop    edi
c000aa41:	5d                   	pop    ebp
c000aa42:	c3                   	ret    
c000aa43:	90                   	nop

c000aa44 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000aa44:	57                   	push   edi
c000aa45:	56                   	push   esi
c000aa46:	53                   	push   ebx
c000aa47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa4b:	8b 06                	mov    eax,DWORD PTR [esi]
c000aa4d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000aa50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aa54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aa58:	e8 ba fe ff ff       	call   c000a917 <datetimeToSeconds(datetime_t)>
c000aa5d:	59                   	pop    ecx
c000aa5e:	0f b6 0d 18 f5 01 c0 	movzx  ecx,BYTE PTR ds:0xc001f518
c000aa65:	5b                   	pop    ebx
c000aa66:	03 0d 1c f5 01 c0    	add    ecx,DWORD PTR ds:0xc001f51c
c000aa6c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000aa72:	89 cb                	mov    ebx,ecx
c000aa74:	c1 fb 1f             	sar    ebx,0x1f
c000aa77:	29 c8                	sub    eax,ecx
c000aa79:	19 da                	sbb    edx,ebx
c000aa7b:	31 c9                	xor    ecx,ecx
c000aa7d:	80 3d 19 f5 01 c0 00 	cmp    BYTE PTR ds:0xc001f519,0x0
c000aa84:	74 05                	je     c000aa8b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000aa86:	b9 08 07 00 00       	mov    ecx,0x708
c000aa8b:	31 db                	xor    ebx,ebx
c000aa8d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000aa91:	29 c8                	sub    eax,ecx
c000aa93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aa97:	19 da                	sbb    edx,ebx
c000aa99:	89 f8                	mov    eax,edi
c000aa9b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000aa9f:	5b                   	pop    ebx
c000aaa0:	5e                   	pop    esi
c000aaa1:	5f                   	pop    edi
c000aaa2:	ff e0                	jmp    eax

c000aaa4 <secondsToDatetime(unsigned long long)>:
c000aaa4:	55                   	push   ebp
c000aaa5:	57                   	push   edi
c000aaa6:	56                   	push   esi
c000aaa7:	53                   	push   ebx
c000aaa8:	83 ec 1c             	sub    esp,0x1c
c000aaab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000aaaf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000aab3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000aab7:	6a 00                	push   0x0
c000aab9:	68 80 51 01 00       	push   0x15180
c000aabe:	55                   	push   ebp
c000aabf:	57                   	push   edi
c000aac0:	e8 9b 0b 01 00       	call   c001b660 <__udivdi3>
c000aac5:	83 c4 10             	add    esp,0x10
c000aac8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000aace:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aad2:	6a 00                	push   0x0
c000aad4:	68 80 51 01 00       	push   0x15180
c000aad9:	55                   	push   ebp
c000aada:	57                   	push   edi
c000aadb:	bf 10 0e 00 00       	mov    edi,0xe10
c000aae0:	e8 7b 0c 01 00       	call   c001b760 <__umoddi3>
c000aae5:	83 c4 10             	add    esp,0x10
c000aae8:	99                   	cdq    
c000aae9:	f7 ff                	idiv   edi
c000aaeb:	bf 3c 00 00 00       	mov    edi,0x3c
c000aaf0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000aaf3:	89 d0                	mov    eax,edx
c000aaf5:	99                   	cdq    
c000aaf6:	f7 ff                	idiv   edi
c000aaf8:	85 db                	test   ebx,ebx
c000aafa:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000aafd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000ab00:	79 11                	jns    c000ab13 <secondsToDatetime(unsigned long long)+0x6f>
c000ab02:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ab06:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000ab0c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ab11:	eb 07                	jmp    c000ab1a <secondsToDatetime(unsigned long long)+0x76>
c000ab13:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ab18:	89 d8                	mov    eax,ebx
c000ab1a:	bf b4 05 00 00       	mov    edi,0x5b4
c000ab1f:	99                   	cdq    
c000ab20:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000ab25:	f7 f9                	idiv   ecx
c000ab27:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000ab2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab30:	31 d2                	xor    edx,edx
c000ab32:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000ab3a:	01 c3                	add    ebx,eax
c000ab3c:	89 d8                	mov    eax,ebx
c000ab3e:	f7 f1                	div    ecx
c000ab40:	31 d2                	xor    edx,edx
c000ab42:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000ab45:	89 d8                	mov    eax,ebx
c000ab47:	f7 f7                	div    edi
c000ab49:	31 d2                	xor    edx,edx
c000ab4b:	29 c1                	sub    ecx,eax
c000ab4d:	89 d8                	mov    eax,ebx
c000ab4f:	f7 f5                	div    ebp
c000ab51:	bd 6d 01 00 00       	mov    ebp,0x16d
c000ab56:	29 c1                	sub    ecx,eax
c000ab58:	31 d2                	xor    edx,edx
c000ab5a:	89 c8                	mov    eax,ecx
c000ab5c:	f7 f5                	div    ebp
c000ab5e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000ab63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ab67:	31 d2                	xor    edx,edx
c000ab69:	89 c8                	mov    eax,ecx
c000ab6b:	f7 f5                	div    ebp
c000ab6d:	31 d2                	xor    edx,edx
c000ab6f:	01 c3                	add    ebx,eax
c000ab71:	89 c8                	mov    eax,ecx
c000ab73:	f7 f7                	div    edi
c000ab75:	bf 99 00 00 00       	mov    edi,0x99
c000ab7a:	29 c3                	sub    ebx,eax
c000ab7c:	31 d2                	xor    edx,edx
c000ab7e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000ab86:	29 c3                	sub    ebx,eax
c000ab88:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ab8b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000ab8e:	bb 05 00 00 00       	mov    ebx,0x5
c000ab93:	83 c1 02             	add    ecx,0x2
c000ab96:	89 c8                	mov    eax,ecx
c000ab98:	f7 f7                	div    edi
c000ab9a:	31 d2                	xor    edx,edx
c000ab9c:	89 c7                	mov    edi,eax
c000ab9e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000aba4:	83 c0 02             	add    eax,0x2
c000aba7:	f7 f3                	div    ebx
c000aba9:	89 eb                	mov    ebx,ebp
c000abab:	29 c3                	sub    ebx,eax
c000abad:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000abb3:	88 1e                	mov    BYTE PTR [esi],bl
c000abb5:	19 c0                	sbb    eax,eax
c000abb7:	31 d2                	xor    edx,edx
c000abb9:	83 e0 0c             	and    eax,0xc
c000abbc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000abc0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000abc8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000abcc:	83 f9 01             	cmp    ecx,0x1
c000abcf:	0f 96 c2             	setbe  dl
c000abd2:	41                   	inc    ecx
c000abd3:	01 d0                	add    eax,edx
c000abd5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000abd8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000abdc:	83 c4 1c             	add    esp,0x1c
c000abdf:	89 f0                	mov    eax,esi
c000abe1:	5b                   	pop    ebx
c000abe2:	5e                   	pop    esi
c000abe3:	5f                   	pop    edi
c000abe4:	5d                   	pop    ebp
c000abe5:	c2 04 00             	ret    0x4

c000abe8 <Clock::timeInDatetimeLocal()>:
c000abe8:	53                   	push   ebx
c000abe9:	83 ec 14             	sub    esp,0x14
c000abec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000abf0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abf4:	e8 7d fc ff ff       	call   c000a876 <Clock::timeInSecondsLocal()>
c000abf9:	83 c4 0c             	add    esp,0xc
c000abfc:	52                   	push   edx
c000abfd:	50                   	push   eax
c000abfe:	53                   	push   ebx
c000abff:	e8 a0 fe ff ff       	call   c000aaa4 <secondsToDatetime(unsigned long long)>
c000ac04:	89 d8                	mov    eax,ebx
c000ac06:	83 c4 14             	add    esp,0x14
c000ac09:	5b                   	pop    ebx
c000ac0a:	c2 04 00             	ret    0x4
c000ac0d:	90                   	nop

c000ac0e <Device::hibernate()>:
c000ac0e:	c3                   	ret    
c000ac0f:	90                   	nop

c000ac10 <Device::wake()>:
c000ac10:	c3                   	ret    
c000ac11:	90                   	nop

c000ac12 <Device::detect()>:
c000ac12:	c3                   	ret    
c000ac13:	90                   	nop

c000ac14 <Device::disableLegacy()>:
c000ac14:	c3                   	ret    
c000ac15:	90                   	nop

c000ac16 <Device::powerSaving(PowerSavingLevel)>:
c000ac16:	c3                   	ret    
c000ac17:	90                   	nop

c000ac18 <DriverlessDevice::close(int, int, void*)>:
c000ac18:	31 c0                	xor    eax,eax
c000ac1a:	c3                   	ret    
c000ac1b:	90                   	nop

c000ac1c <DriverlessDevice::detect()>:
c000ac1c:	c3                   	ret    
c000ac1d:	90                   	nop

c000ac1e <DriverlessDevice::open(int, int, void*)>:
c000ac1e:	83 ec 18             	sub    esp,0x18
c000ac21:	68 30 d4 01 c0       	push   0xc001d430
c000ac26:	e8 14 48 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000ac2b:	83 c8 ff             	or     eax,0xffffffff
c000ac2e:	83 c4 1c             	add    esp,0x1c
c000ac31:	c3                   	ret    

c000ac32 <Device::~Device()>:
c000ac32:	ba 90 d4 01 c0       	mov    edx,0xc001d490
c000ac37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac3b:	89 10                	mov    DWORD PTR [eax],edx
c000ac3d:	90                   	nop
c000ac3e:	c3                   	ret    
c000ac3f:	90                   	nop

c000ac40 <Device::~Device()>:
c000ac40:	83 ec 0c             	sub    esp,0xc
c000ac43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac47:	e8 e6 ff ff ff       	call   c000ac32 <Device::~Device()>
c000ac4c:	83 c4 04             	add    esp,0x4
c000ac4f:	83 ec 08             	sub    esp,0x8
c000ac52:	68 58 01 00 00       	push   0x158
c000ac57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac5b:	e8 9a eb ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	83 c4 0c             	add    esp,0xc
c000ac66:	c3                   	ret    
c000ac67:	90                   	nop

c000ac68 <Device::findAndLoadDriver()>:
c000ac68:	c7 44 24 04 4e d4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d44e
c000ac70:	e9 7b ec ff ff       	jmp    c00098f0 <Dbg::kprintf(char const*, ...)>
c000ac75:	90                   	nop

c000ac76 <Device::preOpenPCI(PCIDeviceInfo)>:
c000ac76:	57                   	push   edi
c000ac77:	b9 09 00 00 00       	mov    ecx,0x9
c000ac7c:	56                   	push   esi
c000ac7d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ac81:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ac85:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000ac8f:	81 c7 18 01 00 00    	add    edi,0x118
c000ac95:	fc                   	cld    
c000ac96:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ac98:	5e                   	pop    esi
c000ac99:	5f                   	pop    edi
c000ac9a:	c3                   	ret    
c000ac9b:	90                   	nop

c000ac9c <Device::preOpenACPI(void*, char*, char*)>:
c000ac9c:	57                   	push   edi
c000ac9d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000aca2:	56                   	push   esi
c000aca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aca7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acab:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000acb5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000acbb:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000acc1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000acc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000acc7:	b9 0e 00 00 00       	mov    ecx,0xe
c000accc:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000acd2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000acd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000acd8:	5e                   	pop    esi
c000acd9:	5f                   	pop    edi
c000acda:	c3                   	ret    
c000acdb:	90                   	nop

c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000acdc:	53                   	push   ebx
c000acdd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ace1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ace5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ace9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aced:	0f b6 c0             	movzx  eax,al
c000acf0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000acf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acf8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000acfc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ad00:	5b                   	pop    ebx
c000ad01:	e9 a6 05 00 00       	jmp    c000b2ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ad06 <Device::getParent()>:
c000ad06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad0a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ad10:	c3                   	ret    
c000ad11:	90                   	nop

c000ad12 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ad12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad1a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ad1f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ad23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ad27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad2b:	e9 e8 06 00 00       	jmp    c000b418 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ad30 <Device::addChild(Device*)>:
c000ad30:	53                   	push   ebx
c000ad31:	83 ec 08             	sub    esp,0x8
c000ad34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad3c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ad42:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ad48:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ad4a:	85 d2                	test   edx,edx
c000ad4c:	74 04                	je     c000ad52 <Device::addChild(Device*)+0x22>
c000ad4e:	89 d3                	mov    ebx,edx
c000ad50:	eb f6                	jmp    c000ad48 <Device::addChild(Device*)+0x18>
c000ad52:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ad55:	83 ec 0c             	sub    esp,0xc
c000ad58:	6a 08                	push   0x8
c000ad5a:	e8 02 be ff ff       	call   c0006b61 <malloc>
c000ad5f:	89 03                	mov    DWORD PTR [ebx],eax
c000ad61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ad67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ad6e:	83 c4 18             	add    esp,0x18
c000ad71:	5b                   	pop    ebx
c000ad72:	c3                   	ret    
c000ad73:	90                   	nop

c000ad74 <Device::removeAllChildren()>:
c000ad74:	56                   	push   esi
c000ad75:	53                   	push   ebx
c000ad76:	52                   	push   edx
c000ad77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad7b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ad81:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ad84:	74 17                	je     c000ad9d <Device::removeAllChildren()+0x29>
c000ad86:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad89:	85 c0                	test   eax,eax
c000ad8b:	74 0c                	je     c000ad99 <Device::removeAllChildren()+0x25>
c000ad8d:	83 ec 0c             	sub    esp,0xc
c000ad90:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad92:	50                   	push   eax
c000ad93:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ad96:	83 c4 10             	add    esp,0x10
c000ad99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ad9b:	eb e4                	jmp    c000ad81 <Device::removeAllChildren()+0xd>
c000ad9d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ada3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ada9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000adaf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000adb6:	58                   	pop    eax
c000adb7:	5b                   	pop    ebx
c000adb8:	5e                   	pop    esi
c000adb9:	c3                   	ret    

c000adba <Device::hibernateAll()>:
c000adba:	53                   	push   ebx
c000adbb:	83 ec 14             	sub    esp,0x14
c000adbe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000adc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000adc4:	53                   	push   ebx
c000adc5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000adc8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000adce:	83 c4 10             	add    esp,0x10
c000add1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000add4:	74 0f                	je     c000ade5 <Device::hibernateAll()+0x2b>
c000add6:	83 ec 0c             	sub    esp,0xc
c000add9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000addc:	e8 d9 ff ff ff       	call   c000adba <Device::hibernateAll()>
c000ade1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ade3:	eb e9                	jmp    c000adce <Device::hibernateAll()+0x14>
c000ade5:	83 c4 08             	add    esp,0x8
c000ade8:	5b                   	pop    ebx
c000ade9:	c3                   	ret    

c000adea <Device::wakeAll()>:
c000adea:	53                   	push   ebx
c000adeb:	83 ec 14             	sub    esp,0x14
c000adee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000adf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000adf4:	53                   	push   ebx
c000adf5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000adf8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000adfe:	83 c4 10             	add    esp,0x10
c000ae01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ae04:	74 0f                	je     c000ae15 <Device::wakeAll()+0x2b>
c000ae06:	83 ec 0c             	sub    esp,0xc
c000ae09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ae0c:	e8 d9 ff ff ff       	call   c000adea <Device::wakeAll()>
c000ae11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ae13:	eb e9                	jmp    c000adfe <Device::wakeAll()+0x14>
c000ae15:	83 c4 08             	add    esp,0x8
c000ae18:	5b                   	pop    ebx
c000ae19:	c3                   	ret    

c000ae1a <Device::detectAll()>:
c000ae1a:	53                   	push   ebx
c000ae1b:	83 ec 14             	sub    esp,0x14
c000ae1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ae22:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae24:	53                   	push   ebx
c000ae25:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ae28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ae2e:	83 c4 10             	add    esp,0x10
c000ae31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ae34:	74 0f                	je     c000ae45 <Device::detectAll()+0x2b>
c000ae36:	83 ec 0c             	sub    esp,0xc
c000ae39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ae3c:	e8 d9 ff ff ff       	call   c000ae1a <Device::detectAll()>
c000ae41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ae43:	eb e9                	jmp    c000ae2e <Device::detectAll()+0x14>
c000ae45:	83 c4 08             	add    esp,0x8
c000ae48:	5b                   	pop    ebx
c000ae49:	c3                   	ret    

c000ae4a <Device::disableLegacyAll()>:
c000ae4a:	c3                   	ret    
c000ae4b:	90                   	nop

c000ae4c <Device::loadDriversForAll()>:
c000ae4c:	c3                   	ret    
c000ae4d:	90                   	nop

c000ae4e <Device::closeAll()>:
c000ae4e:	53                   	push   ebx
c000ae4f:	83 ec 08             	sub    esp,0x8
c000ae52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae56:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae58:	6a 00                	push   0x0
c000ae5a:	6a 00                	push   0x0
c000ae5c:	6a 00                	push   0x0
c000ae5e:	53                   	push   ebx
c000ae5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ae62:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ae68:	83 c4 10             	add    esp,0x10
c000ae6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ae6e:	74 0f                	je     c000ae7f <Device::closeAll()+0x31>
c000ae70:	83 ec 0c             	sub    esp,0xc
c000ae73:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ae76:	e8 d3 ff ff ff       	call   c000ae4e <Device::closeAll()>
c000ae7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ae7d:	eb e9                	jmp    c000ae68 <Device::closeAll()+0x1a>
c000ae7f:	83 c4 08             	add    esp,0x8
c000ae82:	5b                   	pop    ebx
c000ae83:	c3                   	ret    

c000ae84 <Device::powerSavingAll(PowerSavingLevel)>:
c000ae84:	56                   	push   esi
c000ae85:	53                   	push   ebx
c000ae86:	83 ec 0c             	sub    esp,0xc
c000ae89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae8d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ae91:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae93:	56                   	push   esi
c000ae94:	53                   	push   ebx
c000ae95:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ae98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ae9e:	83 c4 10             	add    esp,0x10
c000aea1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000aea4:	74 0f                	je     c000aeb5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000aea6:	52                   	push   edx
c000aea7:	52                   	push   edx
c000aea8:	56                   	push   esi
c000aea9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000aeac:	e8 d3 ff ff ff       	call   c000ae84 <Device::powerSavingAll(PowerSavingLevel)>
c000aeb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000aeb3:	eb e9                	jmp    c000ae9e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000aeb5:	58                   	pop    eax
c000aeb6:	5b                   	pop    ebx
c000aeb7:	5e                   	pop    esi
c000aeb8:	c3                   	ret    
c000aeb9:	90                   	nop

c000aeba <Device::setName(char const*)>:
c000aeba:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000aec2:	e9 59 57 ff ff       	jmp    c0000620 <strcpy>
c000aec7:	90                   	nop

c000aec8 <Device::Device(char const*)>:
c000aec8:	83 ec 1c             	sub    esp,0x1c
c000aecb:	ba 90 d4 01 c0       	mov    edx,0xc001d490
c000aed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aed4:	89 10                	mov    DWORD PTR [eax],edx
c000aed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aeda:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000aee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aee8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000aef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aef6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000af00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af04:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000af0e:	83 ec 08             	sub    esp,0x8
c000af11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000af15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000af19:	e8 9c ff ff ff       	call   c000aeba <Device::setName(char const*)>
c000af1e:	83 c4 10             	add    esp,0x10
c000af21:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000af29:	83 ec 0c             	sub    esp,0xc
c000af2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af30:	e8 2c bc ff ff       	call   c0006b61 <malloc>
c000af35:	83 c4 10             	add    esp,0x10
c000af38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000af3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000af45:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af49:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000af4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af53:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000af59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000af5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af63:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000af69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000af70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af74:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000af7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af7f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000af86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af8a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000af94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af98:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000afa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afa6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000afb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afb4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000afbe:	90                   	nop
c000afbf:	83 c4 1c             	add    esp,0x1c
c000afc2:	c3                   	ret    
c000afc3:	90                   	nop

c000afc4 <Device::getName()>:
c000afc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000afc8:	05 d0 00 00 00       	add    eax,0xd0
c000afcd:	c3                   	ret    

c000afce <DriverlessDevice::DriverlessDevice(char const*)>:
c000afce:	83 ec 0c             	sub    esp,0xc
c000afd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd5:	83 ec 08             	sub    esp,0x8
c000afd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afdc:	50                   	push   eax
c000afdd:	e8 e6 fe ff ff       	call   c000aec8 <Device::Device(char const*)>
c000afe2:	83 c4 10             	add    esp,0x10
c000afe5:	ba bc d4 01 c0       	mov    edx,0xc001d4bc
c000afea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afee:	89 10                	mov    DWORD PTR [eax],edx
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000affe:	90                   	nop
c000afff:	83 c4 0c             	add    esp,0xc
c000b002:	c3                   	ret    
c000b003:	90                   	nop

c000b004 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000b004:	57                   	push   edi
c000b005:	56                   	push   esi
c000b006:	53                   	push   ebx
c000b007:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b00b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b00f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b013:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000b019:	75 0c                	jne    c000b027 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000b01b:	52                   	push   edx
c000b01c:	52                   	push   edx
c000b01d:	53                   	push   ebx
c000b01e:	56                   	push   esi
c000b01f:	e8 ee 0a 01 00       	call   c001bb12 <LinkedList<Device>::addElement(Device*)>
c000b024:	83 c4 10             	add    esp,0x10
c000b027:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b02d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b030:	74 12                	je     c000b044 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000b032:	50                   	push   eax
c000b033:	57                   	push   edi
c000b034:	56                   	push   esi
c000b035:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b038:	e8 c7 ff ff ff       	call   c000b004 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b03d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b03f:	83 c4 10             	add    esp,0x10
c000b042:	eb e9                	jmp    c000b02d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000b044:	5b                   	pop    ebx
c000b045:	5e                   	pop    esi
c000b046:	5f                   	pop    edi
c000b047:	c3                   	ret    

c000b048 <getDevicesOfType(DeviceType)>:
c000b048:	53                   	push   ebx
c000b049:	83 ec 14             	sub    esp,0x14
c000b04c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b050:	53                   	push   ebx
c000b051:	e8 98 0b 01 00       	call   c001bbee <LinkedList<Device>::LinkedList()>
c000b056:	83 c4 0c             	add    esp,0xc
c000b059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b05d:	53                   	push   ebx
c000b05e:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000b064:	e8 9b ff ff ff       	call   c000b004 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b069:	89 d8                	mov    eax,ebx
c000b06b:	83 c4 18             	add    esp,0x18
c000b06e:	5b                   	pop    ebx
c000b06f:	c2 04 00             	ret    0x4
c000b072:	66 90                	xchg   ax,ax

c000b074 <HardDiskController::HardDiskController(char const*)>:
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07b:	83 ec 08             	sub    esp,0x8
c000b07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b082:	50                   	push   eax
c000b083:	e8 40 fe ff ff       	call   c000aec8 <Device::Device(char const*)>
c000b088:	83 c4 10             	add    esp,0x10
c000b08b:	ba e8 d4 01 c0       	mov    edx,0xc001d4e8
c000b090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b094:	89 10                	mov    DWORD PTR [eax],edx
c000b096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b09a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000b0a4:	90                   	nop
c000b0a5:	83 c4 0c             	add    esp,0xc
c000b0a8:	c3                   	ret    
c000b0a9:	90                   	nop
c000b0aa:	66 90                	xchg   ax,ax

c000b0ac <HardDiskController::~HardDiskController()>:
c000b0ac:	83 ec 0c             	sub    esp,0xc
c000b0af:	ba e8 d4 01 c0       	mov    edx,0xc001d4e8
c000b0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b8:	89 10                	mov    DWORD PTR [eax],edx
c000b0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0be:	83 ec 0c             	sub    esp,0xc
c000b0c1:	50                   	push   eax
c000b0c2:	e8 6b fb ff ff       	call   c000ac32 <Device::~Device()>
c000b0c7:	83 c4 10             	add    esp,0x10
c000b0ca:	90                   	nop
c000b0cb:	83 c4 0c             	add    esp,0xc
c000b0ce:	c3                   	ret    
c000b0cf:	90                   	nop

c000b0d0 <HardDiskController::~HardDiskController()>:
c000b0d0:	83 ec 0c             	sub    esp,0xc
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0da:	e8 cd ff ff ff       	call   c000b0ac <HardDiskController::~HardDiskController()>
c000b0df:	83 c4 10             	add    esp,0x10
c000b0e2:	83 ec 08             	sub    esp,0x8
c000b0e5:	68 58 01 00 00       	push   0x158
c000b0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0ee:	e8 07 e7 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000b0f3:	83 c4 10             	add    esp,0x10
c000b0f6:	83 c4 0c             	add    esp,0xc
c000b0f9:	c3                   	ret    

c000b0fa <PhysicalDisk::eject()>:
c000b0fa:	83 c8 ff             	or     eax,0xffffffff
c000b0fd:	c3                   	ret    

c000b0fe <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000b0fe:	83 ec 0c             	sub    esp,0xc
c000b101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b105:	83 ec 08             	sub    esp,0x8
c000b108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b10c:	50                   	push   eax
c000b10d:	e8 b6 fd ff ff       	call   c000aec8 <Device::Device(char const*)>
c000b112:	83 c4 10             	add    esp,0x10
c000b115:	ba 14 d5 01 c0       	mov    edx,0xc001d514
c000b11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b11e:	89 10                	mov    DWORD PTR [eax],edx
c000b120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b124:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000b136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b13a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000b144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b14c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000b152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b156:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000b160:	90                   	nop
c000b161:	83 c4 0c             	add    esp,0xc
c000b164:	c3                   	ret    
c000b165:	90                   	nop

c000b166 <PhysicalDisk::startCache()>:
c000b166:	56                   	push   esi
c000b167:	53                   	push   ebx
c000b168:	83 ec 10             	sub    esp,0x10
c000b16b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b16f:	6a 44                	push   0x44
c000b171:	e8 eb b9 ff ff       	call   c0006b61 <malloc>
c000b176:	89 c6                	mov    esi,eax
c000b178:	58                   	pop    eax
c000b179:	5a                   	pop    edx
c000b17a:	53                   	push   ebx
c000b17b:	56                   	push   esi
c000b17c:	e8 ab 15 00 00       	call   c000c72c <VCache::VCache(PhysicalDisk*)>
c000b181:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000b187:	83 c4 14             	add    esp,0x14
c000b18a:	5b                   	pop    ebx
c000b18b:	5e                   	pop    esi
c000b18c:	c3                   	ret    
c000b18d:	90                   	nop

c000b18e <PhysicalDisk::~PhysicalDisk()>:
c000b18e:	83 ec 0c             	sub    esp,0xc
c000b191:	ba 14 d5 01 c0       	mov    edx,0xc001d514
c000b196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b19a:	89 10                	mov    DWORD PTR [eax],edx
c000b19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a0:	83 ec 0c             	sub    esp,0xc
c000b1a3:	50                   	push   eax
c000b1a4:	e8 89 fa ff ff       	call   c000ac32 <Device::~Device()>
c000b1a9:	83 c4 10             	add    esp,0x10
c000b1ac:	90                   	nop
c000b1ad:	83 c4 0c             	add    esp,0xc
c000b1b0:	c3                   	ret    
c000b1b1:	90                   	nop

c000b1b2 <PhysicalDisk::~PhysicalDisk()>:
c000b1b2:	83 ec 0c             	sub    esp,0xc
c000b1b5:	83 ec 0c             	sub    esp,0xc
c000b1b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1bc:	e8 cd ff ff ff       	call   c000b18e <PhysicalDisk::~PhysicalDisk()>
c000b1c1:	83 c4 10             	add    esp,0x10
c000b1c4:	83 ec 08             	sub    esp,0x8
c000b1c7:	68 6c 01 00 00       	push   0x16c
c000b1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1d0:	e8 25 e6 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000b1d5:	83 c4 10             	add    esp,0x10
c000b1d8:	83 c4 0c             	add    esp,0xc
c000b1db:	c3                   	ret    

c000b1dc <int_handler>:
c000b1dc:	55                   	push   ebp
c000b1dd:	57                   	push   edi
c000b1de:	56                   	push   esi
c000b1df:	53                   	push   ebx
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b1e7:	80 3d a0 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ea0,0x0
c000b1ee:	74 0b                	je     c000b1fb <int_handler+0x1f>
c000b1f0:	fa                   	cli    
c000b1f1:	f4                   	hlt    
c000b1f2:	80 3d a0 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ea0,0x0
c000b1f9:	75 f5                	jne    c000b1f0 <int_handler+0x14>
c000b1fb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000b1fe:	8d 46 e0             	lea    eax,[esi-0x20]
c000b201:	83 f8 17             	cmp    eax,0x17
c000b204:	76 3e                	jbe    c000b244 <int_handler+0x68>
c000b206:	c1 e6 04             	shl    esi,0x4
c000b209:	31 db                	xor    ebx,ebx
c000b20b:	8d ae 20 05 02 c0    	lea    ebp,[esi-0x3ffdfae0]
c000b211:	81 c6 20 f5 01 c0    	add    esi,0xc001f520
c000b217:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000b21b:	85 c0                	test   eax,eax
c000b21d:	74 13                	je     c000b232 <int_handler+0x56>
c000b21f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000b222:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000b226:	74 2a                	je     c000b252 <int_handler+0x76>
c000b228:	83 ec 08             	sub    esp,0x8
c000b22b:	52                   	push   edx
c000b22c:	57                   	push   edi
c000b22d:	ff d0                	call   eax
c000b22f:	83 c4 10             	add    esp,0x10
c000b232:	43                   	inc    ebx
c000b233:	83 fb 04             	cmp    ebx,0x4
c000b236:	75 df                	jne    c000b217 <int_handler+0x3b>
c000b238:	83 c4 0c             	add    esp,0xc
c000b23b:	31 c0                	xor    eax,eax
c000b23d:	5b                   	pop    ebx
c000b23e:	31 d2                	xor    edx,edx
c000b240:	5e                   	pop    esi
c000b241:	5f                   	pop    edi
c000b242:	5d                   	pop    ebp
c000b243:	c3                   	ret    
c000b244:	83 ec 0c             	sub    esp,0xc
c000b247:	50                   	push   eax
c000b248:	e8 ec 95 00 00       	call   c0014839 <HalEndOfInterrupt(int)>
c000b24d:	83 c4 10             	add    esp,0x10
c000b250:	eb b4                	jmp    c000b206 <int_handler+0x2a>
c000b252:	83 ec 08             	sub    esp,0x8
c000b255:	52                   	push   edx
c000b256:	57                   	push   edi
c000b257:	ff d0                	call   eax
c000b259:	83 c4 10             	add    esp,0x10
c000b25c:	83 c4 0c             	add    esp,0xc
c000b25f:	5b                   	pop    ebx
c000b260:	5e                   	pop    esi
c000b261:	5f                   	pop    edi
c000b262:	5d                   	pop    ebp
c000b263:	c3                   	ret    

c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000b264:	56                   	push   esi
c000b265:	31 c0                	xor    eax,eax
c000b267:	53                   	push   ebx
c000b268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b26c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b270:	89 ca                	mov    edx,ecx
c000b272:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b276:	c1 e2 04             	shl    edx,0x4
c000b279:	83 bc 82 20 05 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdfae0],0x0
c000b281:	74 15                	je     c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000b283:	40                   	inc    eax
c000b284:	83 f8 04             	cmp    eax,0x4
c000b287:	75 f0                	jne    c000b279 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000b289:	c7 44 24 0c 44 d5 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d544
c000b291:	5b                   	pop    ebx
c000b292:	5e                   	pop    esi
c000b293:	e9 a7 41 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c000b298:	8d 04 88             	lea    eax,[eax+ecx*4]
c000b29b:	89 1c 85 20 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfae0],ebx
c000b2a2:	89 34 85 20 f5 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0ae0],esi
c000b2a9:	5b                   	pop    ebx
c000b2aa:	5e                   	pop    esi
c000b2ab:	c3                   	ret    

c000b2ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b2ac:	57                   	push   edi
c000b2ad:	8b 15 28 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f428
c000b2b3:	56                   	push   esi
c000b2b4:	53                   	push   ebx
c000b2b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2bd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000b2c4:	74 5b                	je     c000b321 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000b2c6:	89 c7                	mov    edi,eax
c000b2c8:	84 c0                	test   al,al
c000b2ca:	74 24                	je     c000b2f0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000b2cc:	83 fe 0f             	cmp    esi,0xf
c000b2cf:	0f 8f d9 00 00 00    	jg     c000b3ae <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000b2d5:	8a 86 e0 ed 01 c0    	mov    al,BYTE PTR [esi-0x3ffe1220]
c000b2db:	25 ff 00 00 00       	and    eax,0xff
c000b2e0:	66 8b bc 00 c0 1c 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffde340]
c000b2e8:	89 c6                	mov    esi,eax
c000b2ea:	66 d1 ef             	shr    di,1
c000b2ed:	83 e7 01             	and    edi,0x1
c000b2f0:	83 ec 08             	sub    esp,0x8
c000b2f3:	a1 e0 32 02 c0       	mov    eax,ds:0xc00232e0
c000b2f8:	31 db                	xor    ebx,ebx
c000b2fa:	50                   	push   eax
c000b2fb:	68 51 d5 01 c0       	push   0xc001d551
c000b300:	e8 eb e5 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000b305:	83 c4 10             	add    esp,0x10
c000b308:	a1 e0 32 02 c0       	mov    eax,ds:0xc00232e0
c000b30d:	85 c0                	test   eax,eax
c000b30f:	7f 51                	jg     c000b362 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000b311:	83 ec 0c             	sub    esp,0xc
c000b314:	68 68 d5 01 c0       	push   0xc001d568
c000b319:	e8 21 41 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	8d 4e 20             	lea    ecx,[esi+0x20]
c000b324:	31 d2                	xor    edx,edx
c000b326:	89 c8                	mov    eax,ecx
c000b328:	c1 e0 04             	shl    eax,0x4
c000b32b:	8b 9c 90 20 05 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdfae0]
c000b332:	85 db                	test   ebx,ebx
c000b334:	0f 84 8b 00 00 00    	je     c000b3c5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000b33a:	42                   	inc    edx
c000b33b:	83 fa 04             	cmp    edx,0x4
c000b33e:	75 eb                	jne    c000b32b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000b340:	83 ec 0c             	sub    esp,0xc
c000b343:	68 bc d5 01 c0       	push   0xc001d5bc
c000b348:	e8 f2 40 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000b34d:	83 c4 10             	add    esp,0x10
c000b350:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b355:	5b                   	pop    ebx
c000b356:	5e                   	pop    esi
c000b357:	5f                   	pop    edi
c000b358:	c3                   	ret    
c000b359:	43                   	inc    ebx
c000b35a:	39 1d e0 32 02 c0    	cmp    DWORD PTR ds:0xc00232e0,ebx
c000b360:	7e af                	jle    c000b311 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000b362:	83 ec 08             	sub    esp,0x8
c000b365:	8b 04 9d 00 33 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcd00]
c000b36c:	56                   	push   esi
c000b36d:	50                   	push   eax
c000b36e:	e8 c7 f7 00 00       	call   c001ab3a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000b373:	83 c4 10             	add    esp,0x10
c000b376:	84 c0                	test   al,al
c000b378:	74 df                	je     c000b359 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000b37a:	81 e7 ff 00 00 00    	and    edi,0xff
c000b380:	50                   	push   eax
c000b381:	8d 46 20             	lea    eax,[esi+0x20]
c000b384:	57                   	push   edi
c000b385:	25 ff 00 00 00       	and    eax,0xff
c000b38a:	6a 00                	push   0x0
c000b38c:	50                   	push   eax
c000b38d:	89 f0                	mov    eax,esi
c000b38f:	6a 00                	push   0x0
c000b391:	25 ff 00 00 00       	and    eax,0xff
c000b396:	6a 00                	push   0x0
c000b398:	50                   	push   eax
c000b399:	8b 04 9d 00 33 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcd00]
c000b3a0:	50                   	push   eax
c000b3a1:	e8 0e f9 00 00       	call   c001acb4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000b3a6:	83 c4 20             	add    esp,0x20
c000b3a9:	e9 73 ff ff ff       	jmp    c000b321 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000b3ae:	83 ec 0c             	sub    esp,0xc
c000b3b1:	31 ff                	xor    edi,edi
c000b3b3:	68 84 d5 01 c0       	push   0xc001d584
c000b3b8:	e8 82 40 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000b3bd:	83 c4 10             	add    esp,0x10
c000b3c0:	e9 2b ff ff ff       	jmp    c000b2f0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000b3c5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b3c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b3cc:	89 14 85 20 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfae0],edx
c000b3d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b3d7:	5b                   	pop    ebx
c000b3d8:	89 14 85 20 f5 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0ae0],edx
c000b3df:	89 f0                	mov    eax,esi
c000b3e1:	5e                   	pop    esi
c000b3e2:	5f                   	pop    edi
c000b3e3:	c3                   	ret    

c000b3e4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b3ec:	c1 e0 04             	shl    eax,0x4
c000b3ef:	8d 50 10             	lea    edx,[eax+0x10]
c000b3f2:	39 88 20 05 02 c0    	cmp    DWORD PTR [eax-0x3ffdfae0],ecx
c000b3f8:	74 08                	je     c000b402 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000b3fa:	83 c0 04             	add    eax,0x4
c000b3fd:	39 d0                	cmp    eax,edx
c000b3ff:	75 f1                	jne    c000b3f2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000b401:	c3                   	ret    
c000b402:	c7 80 20 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfae0],0x0
c000b40c:	c7 80 20 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0ae0],0x0
c000b416:	eb e2                	jmp    c000b3fa <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000b418 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b418:	53                   	push   ebx
c000b419:	83 ec 08             	sub    esp,0x8
c000b41c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b420:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000b425:	74 0e                	je     c000b435 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b427:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000b42c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000b433:	75 37                	jne    c000b46c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000b435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b439:	83 c0 20             	add    eax,0x20
c000b43c:	c1 e0 04             	shl    eax,0x4
c000b43f:	8d 50 10             	lea    edx,[eax+0x10]
c000b442:	39 98 20 05 02 c0    	cmp    DWORD PTR [eax-0x3ffdfae0],ebx
c000b448:	74 0c                	je     c000b456 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000b44a:	83 c0 04             	add    eax,0x4
c000b44d:	39 d0                	cmp    eax,edx
c000b44f:	75 f1                	jne    c000b442 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000b451:	83 c4 08             	add    esp,0x8
c000b454:	5b                   	pop    ebx
c000b455:	c3                   	ret    
c000b456:	c7 80 20 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfae0],0x0
c000b460:	c7 80 20 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0ae0],0x0
c000b46a:	eb de                	jmp    c000b44a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000b46c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000b471:	7f 12                	jg     c000b485 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000b473:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b477:	31 c0                	xor    eax,eax
c000b479:	8a 81 e0 ed 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe1220]
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	eb b0                	jmp    c000b435 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b485:	83 ec 0c             	sub    esp,0xc
c000b488:	68 75 d5 01 c0       	push   0xc001d575
c000b48d:	e8 ad 3f 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000b492:	83 c4 10             	add    esp,0x10
c000b495:	eb 9e                	jmp    c000b435 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000b497 <setupINTS()>:
c000b497:	31 c0                	xor    eax,eax
c000b499:	c7 80 20 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfae0],0x0
c000b4a3:	c7 80 20 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0ae0],0x0
c000b4ad:	c7 80 24 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfadc],0x0
c000b4b7:	c7 80 24 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0adc],0x0
c000b4c1:	c7 80 28 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfad8],0x0
c000b4cb:	c7 80 28 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0ad8],0x0
c000b4d5:	c7 80 2c 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfad4],0x0
c000b4df:	c7 80 2c f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0ad4],0x0
c000b4e9:	83 c0 10             	add    eax,0x10
c000b4ec:	3d 00 10 00 00       	cmp    eax,0x1000
c000b4f1:	75 a6                	jne    c000b499 <setupINTS()+0x2>
c000b4f3:	c3                   	ret    

c000b4f4 <convertLegacyIRQNumber(int)>:
c000b4f4:	83 ec 0c             	sub    esp,0xc
c000b4f7:	8b 15 28 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f428
c000b4fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b501:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000b508:	74 0f                	je     c000b519 <convertLegacyIRQNumber(int)+0x25>
c000b50a:	83 f8 0f             	cmp    eax,0xf
c000b50d:	7f 0e                	jg     c000b51d <convertLegacyIRQNumber(int)+0x29>
c000b50f:	31 c9                	xor    ecx,ecx
c000b511:	8a 88 e0 ed 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe1220]
c000b517:	89 c8                	mov    eax,ecx
c000b519:	83 c4 0c             	add    esp,0xc
c000b51c:	c3                   	ret    
c000b51d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b521:	83 ec 0c             	sub    esp,0xc
c000b524:	68 84 d5 01 c0       	push   0xc001d584
c000b529:	e8 11 3f 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000b52e:	83 c4 10             	add    esp,0x10
c000b531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b535:	83 c4 0c             	add    esp,0xc
c000b538:	c3                   	ret    
c000b539:	90                   	nop

c000b53a <startGUI(void*)>:
c000b53a:	55                   	push   ebp
c000b53b:	89 e5                	mov    ebp,esp
c000b53d:	53                   	push   ebx
c000b53e:	83 ec 04             	sub    esp,0x4
c000b541:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000b546:	48                   	dec    eax
c000b547:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c000b54c:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000b551:	85 c0                	test   eax,eax
c000b553:	75 01                	jne    c000b556 <startGUI(void*)+0x1c>
c000b555:	fb                   	sti    
c000b556:	8b 1d 28 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f428
c000b55c:	83 ec 08             	sub    esp,0x8
c000b55f:	6a 01                	push   0x1
c000b561:	68 e1 d5 01 c0       	push   0xc001d5e1
c000b566:	e8 54 69 00 00       	call   c0011ebf <Thr::loadDLL(char const*, bool)>
c000b56b:	83 c4 10             	add    esp,0x10
c000b56e:	83 ec 08             	sub    esp,0x8
c000b571:	53                   	push   ebx
c000b572:	50                   	push   eax
c000b573:	e8 78 6b 00 00       	call   c00120f0 <Thr::executeDLL(unsigned long, void*)>
c000b578:	83 c4 10             	add    esp,0x10
c000b57b:	8b 1d 28 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f428
c000b581:	83 ec 08             	sub    esp,0x8
c000b584:	6a 01                	push   0x1
c000b586:	68 fb d5 01 c0       	push   0xc001d5fb
c000b58b:	e8 2f 69 00 00       	call   c0011ebf <Thr::loadDLL(char const*, bool)>
c000b590:	83 c4 10             	add    esp,0x10
c000b593:	83 ec 08             	sub    esp,0x8
c000b596:	53                   	push   ebx
c000b597:	50                   	push   eax
c000b598:	e8 53 6b 00 00       	call   c00120f0 <Thr::executeDLL(unsigned long, void*)>
c000b59d:	83 c4 10             	add    esp,0x10
c000b5a0:	90                   	nop
c000b5a1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b5a4:	c9                   	leave  
c000b5a5:	c3                   	ret    

c000b5a6 <startGUIVESA(void*)>:
c000b5a6:	55                   	push   ebp
c000b5a7:	89 e5                	mov    ebp,esp
c000b5a9:	53                   	push   ebx
c000b5aa:	83 ec 04             	sub    esp,0x4
c000b5ad:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000b5b2:	48                   	dec    eax
c000b5b3:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c000b5b8:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000b5bd:	85 c0                	test   eax,eax
c000b5bf:	75 01                	jne    c000b5c2 <startGUIVESA(void*)+0x1c>
c000b5c1:	fb                   	sti    
c000b5c2:	8b 1d 28 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f428
c000b5c8:	83 ec 08             	sub    esp,0x8
c000b5cb:	6a 01                	push   0x1
c000b5cd:	68 19 d6 01 c0       	push   0xc001d619
c000b5d2:	e8 e8 68 00 00       	call   c0011ebf <Thr::loadDLL(char const*, bool)>
c000b5d7:	83 c4 10             	add    esp,0x10
c000b5da:	83 ec 08             	sub    esp,0x8
c000b5dd:	53                   	push   ebx
c000b5de:	50                   	push   eax
c000b5df:	e8 0c 6b 00 00       	call   c00120f0 <Thr::executeDLL(unsigned long, void*)>
c000b5e4:	83 c4 10             	add    esp,0x10
c000b5e7:	8b 1d 28 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f428
c000b5ed:	83 ec 08             	sub    esp,0x8
c000b5f0:	6a 01                	push   0x1
c000b5f2:	68 fb d5 01 c0       	push   0xc001d5fb
c000b5f7:	e8 c3 68 00 00       	call   c0011ebf <Thr::loadDLL(char const*, bool)>
c000b5fc:	83 c4 10             	add    esp,0x10
c000b5ff:	83 ec 08             	sub    esp,0x8
c000b602:	53                   	push   ebx
c000b603:	50                   	push   eax
c000b604:	e8 e7 6a 00 00       	call   c00120f0 <Thr::executeDLL(unsigned long, void*)>
c000b609:	83 c4 10             	add    esp,0x10
c000b60c:	90                   	nop
c000b60d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b610:	c9                   	leave  
c000b611:	c3                   	ret    

c000b612 <sendKeyToTerminal(unsigned char)>:
c000b612:	55                   	push   ebp
c000b613:	89 e5                	mov    ebp,esp
c000b615:	83 ec 28             	sub    esp,0x28
c000b618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b61b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000b61e:	8b 15 74 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f474
c000b624:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000b627:	25 ff 00 00 00       	and    eax,0xff
c000b62c:	83 ec 08             	sub    esp,0x8
c000b62f:	50                   	push   eax
c000b630:	52                   	push   edx
c000b631:	e8 aa c8 ff ff       	call   c0007ee0 <VgaText::receiveKey(unsigned char)>
c000b636:	83 c4 10             	add    esp,0x10
c000b639:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000b63d:	0f 85 8f 00 00 00    	jne    c000b6d2 <sendKeyToTerminal(unsigned char)+0xc0>
c000b643:	fa                   	cli    
c000b644:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000b649:	40                   	inc    eax
c000b64a:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c000b64f:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c000b654:	40                   	inc    eax
c000b655:	a3 e4 28 02 c0       	mov    ds:0xc00228e4,eax
c000b65a:	a1 20 15 02 c0       	mov    eax,ds:0xc0021520
c000b65f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b662:	c7 05 20 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021520,0x0
c000b66c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000b670:	74 1f                	je     c000b691 <sendKeyToTerminal(unsigned char)+0x7f>
c000b672:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b675:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000b678:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000b67b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b67e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b681:	83 ec 0c             	sub    esp,0xc
c000b684:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b687:	e8 ec 76 00 00       	call   c0012d78 <unblockTask(ThreadControlBlock*)>
c000b68c:	83 c4 10             	add    esp,0x10
c000b68f:	eb db                	jmp    c000b66c <sendKeyToTerminal(unsigned char)+0x5a>
c000b691:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c000b696:	48                   	dec    eax
c000b697:	a3 e4 28 02 c0       	mov    ds:0xc00228e4,eax
c000b69c:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c000b6a1:	85 c0                	test   eax,eax
c000b6a3:	75 18                	jne    c000b6bd <sendKeyToTerminal(unsigned char)+0xab>
c000b6a5:	a1 e0 28 02 c0       	mov    eax,ds:0xc00228e0
c000b6aa:	85 c0                	test   eax,eax
c000b6ac:	74 0f                	je     c000b6bd <sendKeyToTerminal(unsigned char)+0xab>
c000b6ae:	c7 05 e0 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228e0,0x0
c000b6b8:	e8 f7 71 00 00       	call   c00128b4 <schedule()>
c000b6bd:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000b6c2:	48                   	dec    eax
c000b6c3:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c000b6c8:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000b6cd:	85 c0                	test   eax,eax
c000b6cf:	75 01                	jne    c000b6d2 <sendKeyToTerminal(unsigned char)+0xc0>
c000b6d1:	fb                   	sti    
c000b6d2:	90                   	nop
c000b6d3:	c9                   	leave  
c000b6d4:	c3                   	ret    

c000b6d5 <sendKeyboardToken(KeyboardToken)>:
c000b6d5:	55                   	push   ebp
c000b6d6:	89 e5                	mov    ebp,esp
c000b6d8:	83 ec 18             	sub    esp,0x18
c000b6db:	e8 c8 3f 00 00       	call   c000f6a8 <Krnl::userIOReceived()>
c000b6e0:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000b6e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6e6:	25 ff ff 00 00       	and    eax,0xffff
c000b6eb:	83 f2 01             	xor    edx,0x1
c000b6ee:	88 90 40 15 02 c0    	mov    BYTE PTR [eax-0x3ffdeac0],dl
c000b6f4:	a1 28 15 02 c0       	mov    eax,ds:0xc0021528
c000b6f9:	85 c0                	test   eax,eax
c000b6fb:	74 24                	je     c000b721 <sendKeyboardToken(KeyboardToken)+0x4c>
c000b6fd:	8b 0d 28 15 02 c0    	mov    ecx,DWORD PTR ds:0xc0021528
c000b703:	83 ec 04             	sub    esp,0x4
c000b706:	68 40 15 02 c0       	push   0xc0021540
c000b70b:	83 ec 08             	sub    esp,0x8
c000b70e:	89 e2                	mov    edx,esp
c000b710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b713:	89 02                	mov    DWORD PTR [edx],eax
c000b715:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b718:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000b71c:	ff d1                	call   ecx
c000b71e:	83 c4 10             	add    esp,0x10
c000b721:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000b725:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000b728:	a0 48 19 02 c0       	mov    al,ds:0xc0021948
c000b72d:	38 c2                	cmp    dl,al
c000b72f:	74 1e                	je     c000b74f <sendKeyboardToken(KeyboardToken)+0x7a>
c000b731:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000b734:	a2 48 19 02 c0       	mov    ds:0xc0021948,al
c000b739:	a0 48 19 02 c0       	mov    al,ds:0xc0021948
c000b73e:	25 ff 00 00 00       	and    eax,0xff
c000b743:	83 ec 0c             	sub    esp,0xc
c000b746:	50                   	push   eax
c000b747:	e8 e6 be ff ff       	call   c0007632 <setTerminalScrollLock(bool)>
c000b74c:	83 c4 10             	add    esp,0x10
c000b74f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000b752:	84 c0                	test   al,al
c000b754:	0f 84 ae 00 00 00    	je     c000b808 <sendKeyboardToken(KeyboardToken)+0x133>
c000b75a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b75d:	66 3d 10 03          	cmp    ax,0x310
c000b761:	75 06                	jne    c000b769 <sendKeyboardToken(KeyboardToken)+0x94>
c000b763:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000b769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b76c:	66 3d 11 03          	cmp    ax,0x311
c000b770:	75 06                	jne    c000b778 <sendKeyboardToken(KeyboardToken)+0xa3>
c000b772:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000b778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b77b:	66 3d 12 03          	cmp    ax,0x312
c000b77f:	75 06                	jne    c000b787 <sendKeyboardToken(KeyboardToken)+0xb2>
c000b781:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000b787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b78a:	66 3d 13 03          	cmp    ax,0x313
c000b78e:	75 06                	jne    c000b796 <sendKeyboardToken(KeyboardToken)+0xc1>
c000b790:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000b796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b799:	66 3d 14 03          	cmp    ax,0x314
c000b79d:	75 06                	jne    c000b7a5 <sendKeyboardToken(KeyboardToken)+0xd0>
c000b79f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000b7a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7a8:	66 3d 15 03          	cmp    ax,0x315
c000b7ac:	75 06                	jne    c000b7b4 <sendKeyboardToken(KeyboardToken)+0xdf>
c000b7ae:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b7b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7b7:	66 3d 16 03          	cmp    ax,0x316
c000b7bb:	75 06                	jne    c000b7c3 <sendKeyboardToken(KeyboardToken)+0xee>
c000b7bd:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000b7c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7c6:	66 3d 17 03          	cmp    ax,0x317
c000b7ca:	75 06                	jne    c000b7d2 <sendKeyboardToken(KeyboardToken)+0xfd>
c000b7cc:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000b7d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7d5:	66 3d 18 03          	cmp    ax,0x318
c000b7d9:	75 06                	jne    c000b7e1 <sendKeyboardToken(KeyboardToken)+0x10c>
c000b7db:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000b7e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7e4:	66 3d 19 03          	cmp    ax,0x319
c000b7e8:	75 06                	jne    c000b7f0 <sendKeyboardToken(KeyboardToken)+0x11b>
c000b7ea:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000b7f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7f3:	66 3d 1a 03          	cmp    ax,0x31a
c000b7f7:	0f 85 c9 00 00 00    	jne    c000b8c6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b7fd:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000b803:	e9 be 00 00 00       	jmp    c000b8c6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b80b:	66 3d 10 03          	cmp    ax,0x310
c000b80f:	75 0a                	jne    c000b81b <sendKeyboardToken(KeyboardToken)+0x146>
c000b811:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000b817:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b81b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b81e:	66 3d 11 03          	cmp    ax,0x311
c000b822:	75 0a                	jne    c000b82e <sendKeyboardToken(KeyboardToken)+0x159>
c000b824:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000b82a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b82e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b831:	66 3d 12 03          	cmp    ax,0x312
c000b835:	75 0a                	jne    c000b841 <sendKeyboardToken(KeyboardToken)+0x16c>
c000b837:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000b83d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b844:	66 3d 13 03          	cmp    ax,0x313
c000b848:	75 0a                	jne    c000b854 <sendKeyboardToken(KeyboardToken)+0x17f>
c000b84a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000b850:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b857:	66 3d 14 03          	cmp    ax,0x314
c000b85b:	75 0a                	jne    c000b867 <sendKeyboardToken(KeyboardToken)+0x192>
c000b85d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000b863:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b867:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b86a:	66 3d 15 03          	cmp    ax,0x315
c000b86e:	75 0a                	jne    c000b87a <sendKeyboardToken(KeyboardToken)+0x1a5>
c000b870:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b876:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b87a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b87d:	66 3d 16 03          	cmp    ax,0x316
c000b881:	75 0a                	jne    c000b88d <sendKeyboardToken(KeyboardToken)+0x1b8>
c000b883:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000b889:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b890:	66 3d 17 03          	cmp    ax,0x317
c000b894:	75 0a                	jne    c000b8a0 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000b896:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000b89c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b8a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8a3:	66 3d 18 03          	cmp    ax,0x318
c000b8a7:	75 0a                	jne    c000b8b3 <sendKeyboardToken(KeyboardToken)+0x1de>
c000b8a9:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000b8af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b8b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8b6:	66 3d 19 03          	cmp    ax,0x319
c000b8ba:	75 0a                	jne    c000b8c6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b8bc:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000b8c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b8c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8c9:	66 3d 00 02          	cmp    ax,0x200
c000b8cd:	75 2c                	jne    c000b8fb <sendKeyboardToken(KeyboardToken)+0x226>
c000b8cf:	a0 40 19 02 c0       	mov    al,ds:0xc0021940
c000b8d4:	83 f0 01             	xor    eax,0x1
c000b8d7:	84 c0                	test   al,al
c000b8d9:	74 20                	je     c000b8fb <sendKeyboardToken(KeyboardToken)+0x226>
c000b8db:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c000b8e0:	6a 01                	push   0x1
c000b8e2:	6a 00                	push   0x0
c000b8e4:	68 3a b5 00 c0       	push   0xc000b53a
c000b8e9:	50                   	push   eax
c000b8ea:	e8 a5 6d 00 00       	call   c0012694 <Process::createThread(void (*)(void*), void*, int)>
c000b8ef:	83 c4 10             	add    esp,0x10
c000b8f2:	c6 05 40 19 02 c0 01 	mov    BYTE PTR ds:0xc0021940,0x1
c000b8f9:	eb 33                	jmp    c000b92e <sendKeyboardToken(KeyboardToken)+0x259>
c000b8fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8fe:	66 3d 01 02          	cmp    ax,0x201
c000b902:	75 2a                	jne    c000b92e <sendKeyboardToken(KeyboardToken)+0x259>
c000b904:	a0 40 19 02 c0       	mov    al,ds:0xc0021940
c000b909:	83 f0 01             	xor    eax,0x1
c000b90c:	84 c0                	test   al,al
c000b90e:	74 1e                	je     c000b92e <sendKeyboardToken(KeyboardToken)+0x259>
c000b910:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c000b915:	6a 01                	push   0x1
c000b917:	6a 00                	push   0x0
c000b919:	68 a6 b5 00 c0       	push   0xc000b5a6
c000b91e:	50                   	push   eax
c000b91f:	e8 70 6d 00 00       	call   c0012694 <Process::createThread(void (*)(void*), void*, int)>
c000b924:	83 c4 10             	add    esp,0x10
c000b927:	c6 05 40 19 02 c0 01 	mov    BYTE PTR ds:0xc0021940,0x1
c000b92e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b931:	66 3d 1d 03          	cmp    ax,0x31d
c000b935:	75 06                	jne    c000b93d <sendKeyboardToken(KeyboardToken)+0x268>
c000b937:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000b93d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b940:	66 3d 1c 03          	cmp    ax,0x31c
c000b944:	75 06                	jne    c000b94c <sendKeyboardToken(KeyboardToken)+0x277>
c000b946:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000b94c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b94f:	66 3d 1b 03          	cmp    ax,0x31b
c000b953:	75 06                	jne    c000b95b <sendKeyboardToken(KeyboardToken)+0x286>
c000b955:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000b95b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b95e:	66 3d 1e 03          	cmp    ax,0x31e
c000b962:	75 06                	jne    c000b96a <sendKeyboardToken(KeyboardToken)+0x295>
c000b964:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000b96a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b96d:	66 3d 1f 03          	cmp    ax,0x31f
c000b971:	75 06                	jne    c000b979 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000b973:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000b979:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b97c:	66 3d 1a 03          	cmp    ax,0x31a
c000b980:	75 06                	jne    c000b988 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000b982:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000b988:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000b98c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b98f:	83 f0 01             	xor    eax,0x1
c000b992:	84 c0                	test   al,al
c000b994:	74 7b                	je     c000ba11 <sendKeyboardToken(KeyboardToken)+0x33c>
c000b996:	a0 41 16 02 c0       	mov    al,ds:0xc0021641
c000b99b:	84 c0                	test   al,al
c000b99d:	74 43                	je     c000b9e2 <sendKeyboardToken(KeyboardToken)+0x30d>
c000b99f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b9a3:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000b9a7:	74 2d                	je     c000b9d6 <sendKeyboardToken(KeyboardToken)+0x301>
c000b9a9:	8b 15 44 19 02 c0    	mov    edx,DWORD PTR ds:0xc0021944
c000b9af:	89 d0                	mov    eax,edx
c000b9b1:	c1 e0 02             	shl    eax,0x2
c000b9b4:	01 d0                	add    eax,edx
c000b9b6:	01 c0                	add    eax,eax
c000b9b8:	a3 44 19 02 c0       	mov    ds:0xc0021944,eax
c000b9bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9c0:	25 ff ff 00 00       	and    eax,0xffff
c000b9c5:	8d 50 d0             	lea    edx,[eax-0x30]
c000b9c8:	a1 44 19 02 c0       	mov    eax,ds:0xc0021944
c000b9cd:	01 d0                	add    eax,edx
c000b9cf:	a3 44 19 02 c0       	mov    ds:0xc0021944,eax
c000b9d4:	eb 71                	jmp    c000ba47 <sendKeyboardToken(KeyboardToken)+0x372>
c000b9d6:	c7 05 44 19 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021944,0x0
c000b9e0:	eb 65                	jmp    c000ba47 <sendKeyboardToken(KeyboardToken)+0x372>
c000b9e2:	a1 44 19 02 c0       	mov    eax,ds:0xc0021944
c000b9e7:	85 c0                	test   eax,eax
c000b9e9:	74 1a                	je     c000ba05 <sendKeyboardToken(KeyboardToken)+0x330>
c000b9eb:	a1 44 19 02 c0       	mov    eax,ds:0xc0021944
c000b9f0:	25 ff 00 00 00       	and    eax,0xff
c000b9f5:	83 ec 0c             	sub    esp,0xc
c000b9f8:	50                   	push   eax
c000b9f9:	e8 14 fc ff ff       	call   c000b612 <sendKeyToTerminal(unsigned char)>
c000b9fe:	83 c4 10             	add    esp,0x10
c000ba01:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ba05:	c7 05 44 19 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021944,0x0
c000ba0f:	eb 36                	jmp    c000ba47 <sendKeyboardToken(KeyboardToken)+0x372>
c000ba11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba14:	66 3d 01 01          	cmp    ax,0x101
c000ba18:	75 2d                	jne    c000ba47 <sendKeyboardToken(KeyboardToken)+0x372>
c000ba1a:	a1 44 19 02 c0       	mov    eax,ds:0xc0021944
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	74 1a                	je     c000ba3d <sendKeyboardToken(KeyboardToken)+0x368>
c000ba23:	a1 44 19 02 c0       	mov    eax,ds:0xc0021944
c000ba28:	25 ff 00 00 00       	and    eax,0xff
c000ba2d:	83 ec 0c             	sub    esp,0xc
c000ba30:	50                   	push   eax
c000ba31:	e8 dc fb ff ff       	call   c000b612 <sendKeyToTerminal(unsigned char)>
c000ba36:	83 c4 10             	add    esp,0x10
c000ba39:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ba3d:	c7 05 44 19 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021944,0x0
c000ba47:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ba4a:	83 f0 01             	xor    eax,0x1
c000ba4d:	84 c0                	test   al,al
c000ba4f:	74 4e                	je     c000ba9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba51:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ba54:	83 f0 01             	xor    eax,0x1
c000ba57:	84 c0                	test   al,al
c000ba59:	74 44                	je     c000ba9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba5b:	a0 40 16 02 c0       	mov    al,ds:0xc0021640
c000ba60:	83 f0 01             	xor    eax,0x1
c000ba63:	84 c0                	test   al,al
c000ba65:	74 38                	je     c000ba9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba6a:	66 83 f8 1f          	cmp    ax,0x1f
c000ba6e:	76 09                	jbe    c000ba79 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000ba70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba73:	66 83 f8 7e          	cmp    ax,0x7e
c000ba77:	76 12                	jbe    c000ba8b <sendKeyboardToken(KeyboardToken)+0x3b6>
c000ba79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba7c:	66 83 f8 0a          	cmp    ax,0xa
c000ba80:	74 09                	je     c000ba8b <sendKeyboardToken(KeyboardToken)+0x3b6>
c000ba82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba85:	66 83 f8 08          	cmp    ax,0x8
c000ba89:	75 14                	jne    c000ba9f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba8e:	25 ff 00 00 00       	and    eax,0xff
c000ba93:	83 ec 0c             	sub    esp,0xc
c000ba96:	50                   	push   eax
c000ba97:	e8 76 fb ff ff       	call   c000b612 <sendKeyToTerminal(unsigned char)>
c000ba9c:	83 c4 10             	add    esp,0x10
c000ba9f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000baa2:	83 f0 01             	xor    eax,0x1
c000baa5:	84 c0                	test   al,al
c000baa7:	74 51                	je     c000bafa <sendKeyboardToken(KeyboardToken)+0x425>
c000baa9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000baac:	83 f0 01             	xor    eax,0x1
c000baaf:	84 c0                	test   al,al
c000bab1:	74 47                	je     c000bafa <sendKeyboardToken(KeyboardToken)+0x425>
c000bab3:	a0 40 16 02 c0       	mov    al,ds:0xc0021640
c000bab8:	84 c0                	test   al,al
c000baba:	74 3e                	je     c000bafa <sendKeyboardToken(KeyboardToken)+0x425>
c000babc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000babf:	66 83 f8 3f          	cmp    ax,0x3f
c000bac3:	76 35                	jbe    c000bafa <sendKeyboardToken(KeyboardToken)+0x425>
c000bac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bac8:	66 83 f8 7f          	cmp    ax,0x7f
c000bacc:	77 2c                	ja     c000bafa <sendKeyboardToken(KeyboardToken)+0x425>
c000bace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bad1:	88 c2                	mov    dl,al
c000bad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bad6:	66 83 f8 5f          	cmp    ax,0x5f
c000bada:	76 04                	jbe    c000bae0 <sendKeyboardToken(KeyboardToken)+0x40b>
c000badc:	b0 20                	mov    al,0x20
c000bade:	eb 02                	jmp    c000bae2 <sendKeyboardToken(KeyboardToken)+0x40d>
c000bae0:	b0 00                	mov    al,0x0
c000bae2:	29 c2                	sub    edx,eax
c000bae4:	88 d0                	mov    al,dl
c000bae6:	83 e8 40             	sub    eax,0x40
c000bae9:	25 ff 00 00 00       	and    eax,0xff
c000baee:	83 ec 0c             	sub    esp,0xc
c000baf1:	50                   	push   eax
c000baf2:	e8 1b fb ff ff       	call   c000b612 <sendKeyToTerminal(unsigned char)>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bafd:	66 3d 00 03          	cmp    ax,0x300
c000bb01:	75 0f                	jne    c000bb12 <sendKeyboardToken(KeyboardToken)+0x43d>
c000bb03:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bb06:	83 f0 01             	xor    eax,0x1
c000bb09:	84 c0                	test   al,al
c000bb0b:	74 05                	je     c000bb12 <sendKeyboardToken(KeyboardToken)+0x43d>
c000bb0d:	e8 21 bb ff ff       	call   c0007633 <doTerminalCycle()>
c000bb12:	90                   	nop
c000bb13:	c9                   	leave  
c000bb14:	c3                   	ret    

c000bb15 <clearInternalKeybuffer(VgaText*)>:
c000bb15:	55                   	push   ebp
c000bb16:	89 e5                	mov    ebp,esp
c000bb18:	83 ec 08             	sub    esp,0x8
c000bb1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb1e:	05 b2 00 00 00       	add    eax,0xb2
c000bb23:	83 ec 0c             	sub    esp,0xc
c000bb26:	50                   	push   eax
c000bb27:	e8 34 4a ff ff       	call   c0000560 <strlen>
c000bb2c:	83 c4 10             	add    esp,0x10
c000bb2f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bb32:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bb38:	83 ec 04             	sub    esp,0x4
c000bb3b:	50                   	push   eax
c000bb3c:	6a 00                	push   0x0
c000bb3e:	52                   	push   edx
c000bb3f:	e8 ac 49 ff ff       	call   c00004f0 <memset>
c000bb44:	83 c4 10             	add    esp,0x10
c000bb47:	90                   	nop
c000bb48:	c9                   	leave  
c000bb49:	c3                   	ret    

c000bb4a <readKeyboard(VgaText*, char*, unsigned long)>:
c000bb4a:	55                   	push   ebp
c000bb4b:	89 e5                	mov    ebp,esp
c000bb4d:	83 ec 18             	sub    esp,0x18
c000bb50:	a1 28 15 02 c0       	mov    eax,ds:0xc0021528
c000bb55:	85 c0                	test   eax,eax
c000bb57:	74 2a                	je     c000bb83 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000bb59:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000bb5f:	8b 0d 28 15 02 c0    	mov    ecx,DWORD PTR ds:0xc0021528
c000bb65:	83 ec 04             	sub    esp,0x4
c000bb68:	68 40 15 02 c0       	push   0xc0021540
c000bb6d:	83 ec 08             	sub    esp,0x8
c000bb70:	89 e2                	mov    edx,esp
c000bb72:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000bb75:	89 02                	mov    DWORD PTR [edx],eax
c000bb77:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000bb7a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000bb7e:	ff d1                	call   ecx
c000bb80:	83 c4 10             	add    esp,0x10
c000bb83:	fb                   	sti    
c000bb84:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000bb8b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000bb8f:	0f 84 a1 00 00 00    	je     c000bc36 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000bb95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb98:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bb9e:	84 c0                	test   al,al
c000bba0:	75 28                	jne    c000bbca <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000bba2:	fa                   	cli    
c000bba3:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000bba8:	40                   	inc    eax
c000bba9:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c000bbae:	e8 01 6d 00 00       	call   c00128b4 <schedule()>
c000bbb3:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000bbb8:	48                   	dec    eax
c000bbb9:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c000bbbe:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000bbc3:	85 c0                	test   eax,eax
c000bbc5:	75 ce                	jne    c000bb95 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bbc7:	fb                   	sti    
c000bbc8:	eb cb                	jmp    c000bb95 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bbca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000bbcd:	8d 50 01             	lea    edx,[eax+0x1]
c000bbd0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000bbd3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bbd6:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000bbdc:	88 10                	mov    BYTE PTR [eax],dl
c000bbde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbe1:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bbe7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000bbea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbed:	05 b2 00 00 00       	add    eax,0xb2
c000bbf2:	83 ec 0c             	sub    esp,0xc
c000bbf5:	50                   	push   eax
c000bbf6:	e8 65 49 ff ff       	call   c0000560 <strlen>
c000bbfb:	83 c4 10             	add    esp,0x10
c000bbfe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bc01:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bc07:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bc0a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bc0d:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bc13:	83 ec 04             	sub    esp,0x4
c000bc16:	50                   	push   eax
c000bc17:	51                   	push   ecx
c000bc18:	52                   	push   edx
c000bc19:	e8 e2 47 ff ff       	call   c0000400 <memmove>
c000bc1e:	83 c4 10             	add    esp,0x10
c000bc21:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000bc24:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000bc27:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000bc2b:	0f 85 5a ff ff ff    	jne    c000bb8b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000bc31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bc34:	eb 03                	jmp    c000bc39 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000bc36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bc39:	c9                   	leave  
c000bc3a:	c3                   	ret    
c000bc3b:	90                   	nop

c000bc3c <Keyboard::Keyboard(char const*)>:
c000bc3c:	83 ec 0c             	sub    esp,0xc
c000bc3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc43:	83 ec 08             	sub    esp,0x8
c000bc46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc4a:	50                   	push   eax
c000bc4b:	e8 78 f2 ff ff       	call   c000aec8 <Device::Device(char const*)>
c000bc50:	83 c4 10             	add    esp,0x10
c000bc53:	ba 3c d6 01 c0       	mov    edx,0xc001d63c
c000bc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc5c:	89 10                	mov    DWORD PTR [eax],edx
c000bc5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc62:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000bc6c:	c6 05 24 15 02 c0 01 	mov    BYTE PTR ds:0xc0021524,0x1
c000bc73:	90                   	nop
c000bc74:	83 c4 0c             	add    esp,0xc
c000bc77:	c3                   	ret    

c000bc78 <Keyboard::~Keyboard()>:
c000bc78:	83 ec 0c             	sub    esp,0xc
c000bc7b:	ba 3c d6 01 c0       	mov    edx,0xc001d63c
c000bc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc84:	89 10                	mov    DWORD PTR [eax],edx
c000bc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc8a:	83 ec 0c             	sub    esp,0xc
c000bc8d:	50                   	push   eax
c000bc8e:	e8 9f ef ff ff       	call   c000ac32 <Device::~Device()>
c000bc93:	83 c4 10             	add    esp,0x10
c000bc96:	90                   	nop
c000bc97:	83 c4 0c             	add    esp,0xc
c000bc9a:	c3                   	ret    
c000bc9b:	90                   	nop

c000bc9c <Keyboard::~Keyboard()>:
c000bc9c:	83 ec 0c             	sub    esp,0xc
c000bc9f:	83 ec 0c             	sub    esp,0xc
c000bca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca6:	e8 cd ff ff ff       	call   c000bc78 <Keyboard::~Keyboard()>
c000bcab:	83 c4 10             	add    esp,0x10
c000bcae:	83 ec 08             	sub    esp,0x8
c000bcb1:	68 5c 01 00 00       	push   0x15c
c000bcb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcba:	e8 3b db ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000bcbf:	83 c4 10             	add    esp,0x10
c000bcc2:	83 c4 0c             	add    esp,0xc
c000bcc5:	c3                   	ret    

c000bcc6 <LogicalDisk::close(int, int, void*)>:
c000bcc6:	83 c8 ff             	or     eax,0xffffffff
c000bcc9:	c3                   	ret    

c000bcca <LogicalDisk::~LogicalDisk()>:
c000bcca:	83 ec 0c             	sub    esp,0xc
c000bccd:	ba b4 d6 01 c0       	mov    edx,0xc001d6b4
c000bcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd6:	89 10                	mov    DWORD PTR [eax],edx
c000bcd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	50                   	push   eax
c000bce0:	e8 4d ef ff ff       	call   c000ac32 <Device::~Device()>
c000bce5:	83 c4 10             	add    esp,0x10
c000bce8:	90                   	nop
c000bce9:	83 c4 0c             	add    esp,0xc
c000bcec:	c3                   	ret    
c000bced:	90                   	nop

c000bcee <LogicalDisk::~LogicalDisk()>:
c000bcee:	83 ec 0c             	sub    esp,0xc
c000bcf1:	83 ec 0c             	sub    esp,0xc
c000bcf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf8:	e8 cd ff ff ff       	call   c000bcca <LogicalDisk::~LogicalDisk()>
c000bcfd:	83 c4 10             	add    esp,0x10
c000bd00:	83 ec 08             	sub    esp,0x8
c000bd03:	68 74 01 00 00       	push   0x174
c000bd08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd0c:	e8 e9 da ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000bd11:	83 c4 10             	add    esp,0x10
c000bd14:	83 c4 0c             	add    esp,0xc
c000bd17:	c3                   	ret    

c000bd18 <LogicalDisk::open(int, int, void*)>:
c000bd18:	83 ec 18             	sub    esp,0x18
c000bd1b:	68 68 d6 01 c0       	push   0xc001d668
c000bd20:	e8 1a 37 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000bd25:	83 c8 ff             	or     eax,0xffffffff
c000bd28:	83 c4 1c             	add    esp,0x1c
c000bd2b:	c3                   	ret    

c000bd2c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000bd2c:	53                   	push   ebx
c000bd2d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd39:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000bd3f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000bd45:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000bd4b:	77 10                	ja     c000bd5d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000bd4d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000bd53:	89 d3                	mov    ebx,edx
c000bd55:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000bd5b:	72 05                	jb     c000bd62 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000bd5d:	83 c8 ff             	or     eax,0xffffffff
c000bd60:	89 c2                	mov    edx,eax
c000bd62:	5b                   	pop    ebx
c000bd63:	c3                   	ret    

c000bd64 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000bd64:	56                   	push   esi
c000bd65:	83 c8 ff             	or     eax,0xffffffff
c000bd68:	53                   	push   ebx
c000bd69:	89 c2                	mov    edx,eax
c000bd6b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bd6f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd77:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000bd7d:	77 27                	ja     c000bda6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bd7f:	89 d8                	mov    eax,ebx
c000bd81:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000bd87:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000bd8d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bd92:	89 c2                	mov    edx,eax
c000bd94:	73 10                	jae    c000bda6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bd96:	89 c8                	mov    eax,ecx
c000bd98:	89 da                	mov    edx,ebx
c000bd9a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000bda0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000bda6:	5b                   	pop    ebx
c000bda7:	5e                   	pop    esi
c000bda8:	c3                   	ret    
c000bda9:	90                   	nop

c000bdaa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000bdaa:	83 ec 1c             	sub    esp,0x1c
c000bdad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bdb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bdb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bdbd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdc1:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdc4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bdc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bdcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdd0:	83 ec 08             	sub    esp,0x8
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	50                   	push   eax
c000bdd8:	e8 eb f0 ff ff       	call   c000aec8 <Device::Device(char const*)>
c000bddd:	83 c4 10             	add    esp,0x10
c000bde0:	ba b4 d6 01 c0       	mov    edx,0xc001d6b4
c000bde5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bde9:	89 10                	mov    DWORD PTR [eax],edx
c000bdeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdef:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bdf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdfa:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be05:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000be0f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be1b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000be21:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000be27:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be2b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000be2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000be32:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000be38:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000be3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000be46:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000be4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be50:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000be5a:	90                   	nop
c000be5b:	83 c4 1c             	add    esp,0x1c
c000be5e:	c3                   	ret    
c000be5f:	90                   	nop

c000be60 <LogicalDisk::assignDriveLetter()>:
c000be60:	55                   	push   ebp
c000be61:	57                   	push   edi
c000be62:	56                   	push   esi
c000be63:	53                   	push   ebx
c000be64:	83 ec 14             	sub    esp,0x14
c000be67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000be6b:	8b 3d 60 19 02 c0    	mov    edi,DWORD PTR ds:0xc0021960
c000be71:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000be77:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000be7b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000be81:	8b 3d 64 19 02 c0    	mov    edi,DWORD PTR ds:0xc0021964
c000be87:	3c 01                	cmp    al,0x1
c000be89:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000be8d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000be91:	19 c0                	sbb    eax,eax
c000be93:	83 e0 02             	and    eax,0x2
c000be96:	83 c0 41             	add    eax,0x41
c000be99:	0f be e8             	movsx  ebp,al
c000be9c:	3c 43                	cmp    al,0x43
c000be9e:	75 10                	jne    c000beb0 <LogicalDisk::assignDriveLetter()+0x50>
c000bea0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000bea7:	75 5d                	jne    c000bf06 <LogicalDisk::assignDriveLetter()+0xa6>
c000bea9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000beae:	75 56                	jne    c000bf06 <LogicalDisk::assignDriveLetter()+0xa6>
c000beb0:	8d 75 bf             	lea    esi,[ebp-0x41]
c000beb3:	ba 01 00 00 00       	mov    edx,0x1
c000beb8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000bebc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000bec0:	d3 e2                	shl    edx,cl
c000bec2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bec6:	89 d7                	mov    edi,edx
c000bec8:	89 d6                	mov    esi,edx
c000beca:	c1 ff 1f             	sar    edi,0x1f
c000becd:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000bed1:	21 f9                	and    ecx,edi
c000bed3:	09 d1                	or     ecx,edx
c000bed5:	75 2f                	jne    c000bf06 <LogicalDisk::assignDriveLetter()+0xa6>
c000bed7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000bedb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bedf:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000bee5:	09 f2                	or     edx,esi
c000bee7:	89 15 60 19 02 c0    	mov    DWORD PTR ds:0xc0021960,edx
c000beed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bef1:	09 fa                	or     edx,edi
c000bef3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000bef7:	89 15 64 19 02 c0    	mov    DWORD PTR ds:0xc0021964,edx
c000befd:	89 1c bd 80 19 02 c0 	mov    DWORD PTR [edi*4-0x3ffde680],ebx
c000bf04:	eb 08                	jmp    c000bf0e <LogicalDisk::assignDriveLetter()+0xae>
c000bf06:	45                   	inc    ebp
c000bf07:	40                   	inc    eax
c000bf08:	3c 5b                	cmp    al,0x5b
c000bf0a:	75 90                	jne    c000be9c <LogicalDisk::assignDriveLetter()+0x3c>
c000bf0c:	31 c0                	xor    eax,eax
c000bf0e:	83 c4 14             	add    esp,0x14
c000bf11:	5b                   	pop    ebx
c000bf12:	5e                   	pop    esi
c000bf13:	5f                   	pop    edi
c000bf14:	5d                   	pop    ebp
c000bf15:	c3                   	ret    

c000bf16 <LogicalDisk::mount()>:
c000bf16:	56                   	push   esi
c000bf17:	53                   	push   ebx
c000bf18:	53                   	push   ebx
c000bf19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bf1d:	8b 1d 14 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f514
c000bf23:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000bf2d:	85 db                	test   ebx,ebx
c000bf2f:	74 27                	je     c000bf58 <LogicalDisk::mount()+0x42>
c000bf31:	51                   	push   ecx
c000bf32:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000bf39:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bf3b:	83 e8 41             	sub    eax,0x41
c000bf3e:	50                   	push   eax
c000bf3f:	56                   	push   esi
c000bf40:	53                   	push   ebx
c000bf41:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000bf44:	83 c4 10             	add    esp,0x10
c000bf47:	84 c0                	test   al,al
c000bf49:	74 08                	je     c000bf53 <LogicalDisk::mount()+0x3d>
c000bf4b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000bf51:	eb 07                	jmp    c000bf5a <LogicalDisk::mount()+0x44>
c000bf53:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000bf56:	eb d5                	jmp    c000bf2d <LogicalDisk::mount()+0x17>
c000bf58:	31 c0                	xor    eax,eax
c000bf5a:	5a                   	pop    edx
c000bf5b:	5b                   	pop    ebx
c000bf5c:	5e                   	pop    esi
c000bf5d:	c3                   	ret    

c000bf5e <LogicalDisk::unmount()>:
c000bf5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf62:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000bf6c:	c3                   	ret    
c000bf6d:	90                   	nop

c000bf6e <LogicalDisk::eject()>:
c000bf6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf72:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000bf78:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bf7e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000bf81:	90                   	nop

c000bf82 <LogicalDisk::unassignDriveLetter()>:
c000bf82:	57                   	push   edi
c000bf83:	56                   	push   esi
c000bf84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf88:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000bf8f:	84 c9                	test   cl,cl
c000bf91:	75 0f                	jne    c000bfa2 <LogicalDisk::unassignDriveLetter()+0x20>
c000bf93:	c7 44 24 0c 8c d6 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d68c
c000bf9b:	5e                   	pop    esi
c000bf9c:	5f                   	pop    edi
c000bf9d:	e9 9d 34 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c000bfa2:	83 e9 41             	sub    ecx,0x41
c000bfa5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000bfac:	b8 01 00 00 00       	mov    eax,0x1
c000bfb1:	c7 04 8d 80 19 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffde680],0x0
c000bfbc:	d3 e0                	shl    eax,cl
c000bfbe:	89 c7                	mov    edi,eax
c000bfc0:	f7 d0                	not    eax
c000bfc2:	c1 ff 1f             	sar    edi,0x1f
c000bfc5:	21 05 60 19 02 c0    	and    DWORD PTR ds:0xc0021960,eax
c000bfcb:	89 fe                	mov    esi,edi
c000bfcd:	f7 d6                	not    esi
c000bfcf:	21 35 64 19 02 c0    	and    DWORD PTR ds:0xc0021964,esi
c000bfd5:	5e                   	pop    esi
c000bfd6:	5f                   	pop    edi
c000bfd7:	c3                   	ret    

c000bfd8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000bfd8:	57                   	push   edi
c000bfd9:	56                   	push   esi
c000bfda:	53                   	push   ebx
c000bfdb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bfdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfe3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bfe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bfeb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000bff1:	77 41                	ja     c000c034 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000bff3:	99                   	cdq    
c000bff4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000bffa:	01 c8                	add    eax,ecx
c000bffc:	11 da                	adc    edx,ebx
c000bffe:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c004:	19 d7                	sbb    edi,edx
c000c006:	72 33                	jb     c000c03b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000c008:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c00e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c014:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c018:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c01c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c022:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c028:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c02c:	5b                   	pop    ebx
c000c02d:	5e                   	pop    esi
c000c02e:	5f                   	pop    edi
c000c02f:	e9 32 0a 00 00       	jmp    c000ca66 <VCache::read(unsigned long long, int, void*)>
c000c034:	b8 05 00 00 00       	mov    eax,0x5
c000c039:	eb 05                	jmp    c000c040 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000c03b:	b8 07 00 00 00       	mov    eax,0x7
c000c040:	5b                   	pop    ebx
c000c041:	5e                   	pop    esi
c000c042:	5f                   	pop    edi
c000c043:	c3                   	ret    

c000c044 <LogicalDisk::write(unsigned long long, int, void*)>:
c000c044:	57                   	push   edi
c000c045:	56                   	push   esi
c000c046:	53                   	push   ebx
c000c047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c04b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c04f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c053:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c057:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c05d:	77 41                	ja     c000c0a0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000c05f:	99                   	cdq    
c000c060:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000c066:	01 c8                	add    eax,ecx
c000c068:	11 da                	adc    edx,ebx
c000c06a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c070:	19 d7                	sbb    edi,edx
c000c072:	72 33                	jb     c000c0a7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000c074:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c07a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c080:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c084:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c088:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c08e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c094:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c098:	5b                   	pop    ebx
c000c099:	5e                   	pop    esi
c000c09a:	5f                   	pop    edi
c000c09b:	e9 cc 08 00 00       	jmp    c000c96c <VCache::write(unsigned long long, int, void*)>
c000c0a0:	b8 05 00 00 00       	mov    eax,0x5
c000c0a5:	eb 05                	jmp    c000c0ac <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000c0a7:	b8 07 00 00 00       	mov    eax,0x7
c000c0ac:	5b                   	pop    ebx
c000c0ad:	5e                   	pop    esi
c000c0ae:	5f                   	pop    edi
c000c0af:	c3                   	ret    

c000c0b0 <Mouse::Mouse(char const*)>:
c000c0b0:	83 ec 0c             	sub    esp,0xc
c000c0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b7:	83 ec 08             	sub    esp,0x8
c000c0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0be:	50                   	push   eax
c000c0bf:	e8 04 ee ff ff       	call   c000aec8 <Device::Device(char const*)>
c000c0c4:	83 c4 10             	add    esp,0x10
c000c0c7:	ba e0 d6 01 c0       	mov    edx,0xc001d6e0
c000c0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d0:	89 10                	mov    DWORD PTR [eax],edx
c000c0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000c0e0:	90                   	nop
c000c0e1:	83 c4 0c             	add    esp,0xc
c000c0e4:	c3                   	ret    
c000c0e5:	90                   	nop
c000c0e6:	66 90                	xchg   ax,ax

c000c0e8 <Mouse::~Mouse()>:
c000c0e8:	83 ec 0c             	sub    esp,0xc
c000c0eb:	ba e0 d6 01 c0       	mov    edx,0xc001d6e0
c000c0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f4:	89 10                	mov    DWORD PTR [eax],edx
c000c0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0fa:	83 ec 0c             	sub    esp,0xc
c000c0fd:	50                   	push   eax
c000c0fe:	e8 2f eb ff ff       	call   c000ac32 <Device::~Device()>
c000c103:	83 c4 10             	add    esp,0x10
c000c106:	90                   	nop
c000c107:	83 c4 0c             	add    esp,0xc
c000c10a:	c3                   	ret    
c000c10b:	90                   	nop

c000c10c <Mouse::~Mouse()>:
c000c10c:	83 ec 0c             	sub    esp,0xc
c000c10f:	83 ec 0c             	sub    esp,0xc
c000c112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c116:	e8 cd ff ff ff       	call   c000c0e8 <Mouse::~Mouse()>
c000c11b:	83 c4 10             	add    esp,0x10
c000c11e:	83 ec 08             	sub    esp,0x8
c000c121:	68 58 01 00 00       	push   0x158
c000c126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c12a:	e8 cb d6 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000c12f:	83 c4 10             	add    esp,0x10
c000c132:	83 c4 0c             	add    esp,0xc
c000c135:	c3                   	ret    

c000c136 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c136:	55                   	push   ebp
c000c137:	57                   	push   edi
c000c138:	56                   	push   esi
c000c139:	53                   	push   ebx
c000c13a:	81 ec 28 01 00 00    	sub    esp,0x128
c000c140:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000c147:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000c14e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000c155:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000c15c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c160:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c164:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c16b:	e8 54 ee ff ff       	call   c000afc4 <Device::getName()>
c000c170:	5a                   	pop    edx
c000c171:	59                   	pop    ecx
c000c172:	50                   	push   eax
c000c173:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000c177:	55                   	push   ebp
c000c178:	e8 a3 44 ff ff       	call   c0000620 <strcpy>
c000c17d:	5b                   	pop    ebx
c000c17e:	58                   	pop    eax
c000c17f:	68 04 d7 01 c0       	push   0xc001d704
c000c184:	55                   	push   ebp
c000c185:	e8 56 46 ff ff       	call   c00007e0 <strcat>
c000c18a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000c191:	e8 cb a9 ff ff       	call   c0006b61 <malloc>
c000c196:	83 c4 0c             	add    esp,0xc
c000c199:	89 c3                	mov    ebx,eax
c000c19b:	57                   	push   edi
c000c19c:	56                   	push   esi
c000c19d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1a5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000c1ac:	55                   	push   ebp
c000c1ad:	50                   	push   eax
c000c1ae:	e8 f7 fb ff ff       	call   c000bdaa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000c1b3:	83 c4 14             	add    esp,0x14
c000c1b6:	53                   	push   ebx
c000c1b7:	e8 a4 fc ff ff       	call   c000be60 <LogicalDisk::assignDriveLetter()>
c000c1bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c1bf:	e8 52 fd ff ff       	call   c000bf16 <LogicalDisk::mount()>
c000c1c4:	58                   	pop    eax
c000c1c5:	5a                   	pop    edx
c000c1c6:	53                   	push   ebx
c000c1c7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c1ce:	e8 5d eb ff ff       	call   c000ad30 <Device::addChild(Device*)>
c000c1d3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000c1d9:	5b                   	pop    ebx
c000c1da:	5e                   	pop    esi
c000c1db:	5f                   	pop    edi
c000c1dc:	5d                   	pop    ebp
c000c1dd:	c3                   	ret    

c000c1de <createPartitionsForDisk(PhysicalDisk*)>:
c000c1de:	55                   	push   ebp
c000c1df:	57                   	push   edi
c000c1e0:	56                   	push   esi
c000c1e1:	53                   	push   ebx
c000c1e2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000c1e8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000c1ef:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000c1f5:	3d 00 02 00 00       	cmp    eax,0x200
c000c1fa:	74 27                	je     c000c223 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000c1fc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000c202:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000c208:	83 ec 10             	sub    esp,0x10
c000c20b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000c20f:	99                   	cdq    
c000c210:	c1 e6 0a             	shl    esi,0xa
c000c213:	52                   	push   edx
c000c214:	89 fd                	mov    ebp,edi
c000c216:	50                   	push   eax
c000c217:	55                   	push   ebp
c000c218:	56                   	push   esi
c000c219:	e8 42 f4 00 00       	call   c001b660 <__udivdi3>
c000c21e:	e9 b1 00 00 00       	jmp    c000c2d4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c223:	83 ec 0c             	sub    esp,0xc
c000c226:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c228:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000c22c:	56                   	push   esi
c000c22d:	6a 01                	push   0x1
c000c22f:	6a 00                	push   0x0
c000c231:	6a 00                	push   0x0
c000c233:	53                   	push   ebx
c000c234:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000c237:	83 c4 20             	add    esp,0x20
c000c23a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000c242:	75 0a                	jne    c000c24e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000c244:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000c24c:	74 2c                	je     c000c27a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000c24e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c254:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c25a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c260:	83 ec 10             	sub    esp,0x10
c000c263:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c267:	89 f7                	mov    edi,esi
c000c269:	c1 e0 0a             	shl    eax,0xa
c000c26c:	c1 ff 1f             	sar    edi,0x1f
c000c26f:	57                   	push   edi
c000c270:	56                   	push   esi
c000c271:	52                   	push   edx
c000c272:	50                   	push   eax
c000c273:	e8 e8 f3 00 00       	call   c001b660 <__udivdi3>
c000c278:	eb 5a                	jmp    c000c2d4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c27a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000c281:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000c288:	83 e1 7f             	and    ecx,0x7f
c000c28b:	83 e0 7f             	and    eax,0x7f
c000c28e:	01 c1                	add    ecx,eax
c000c290:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000c297:	83 e0 7f             	and    eax,0x7f
c000c29a:	01 c1                	add    ecx,eax
c000c29c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000c2a3:	83 e0 7f             	and    eax,0x7f
c000c2a6:	00 c1                	add    cl,al
c000c2a8:	74 41                	je     c000c2eb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000c2aa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c2b0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c2b6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c2bc:	83 ec 10             	sub    esp,0x10
c000c2bf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c2c3:	89 f7                	mov    edi,esi
c000c2c5:	c1 e0 0a             	shl    eax,0xa
c000c2c8:	c1 ff 1f             	sar    edi,0x1f
c000c2cb:	57                   	push   edi
c000c2cc:	56                   	push   esi
c000c2cd:	52                   	push   edx
c000c2ce:	50                   	push   eax
c000c2cf:	e8 8c f3 00 00       	call   c001b660 <__udivdi3>
c000c2d4:	83 c4 14             	add    esp,0x14
c000c2d7:	52                   	push   edx
c000c2d8:	50                   	push   eax
c000c2d9:	6a 00                	push   0x0
c000c2db:	6a 00                	push   0x0
c000c2dd:	53                   	push   ebx
c000c2de:	e8 53 fe ff ff       	call   c000c136 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	e9 79 01 00 00       	jmp    c000c464 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000c2eb:	89 f0                	mov    eax,esi
c000c2ed:	31 f6                	xor    esi,esi
c000c2ef:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000c2f6:	75 02                	jne    c000c2fa <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000c2f8:	89 f1                	mov    ecx,esi
c000c2fa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000c301:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000c308:	c1 e2 08             	shl    edx,0x8
c000c30b:	c1 e7 10             	shl    edi,0x10
c000c30e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000c316:	09 fa                	or     edx,edi
c000c318:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000c320:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000c327:	83 c0 10             	add    eax,0x10
c000c32a:	09 fa                	or     edx,edi
c000c32c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000c333:	c1 e7 18             	shl    edi,0x18
c000c336:	09 fa                	or     edx,edi
c000c338:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000c33f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000c343:	c1 e7 10             	shl    edi,0x10
c000c346:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000c34d:	c1 e2 08             	shl    edx,0x8
c000c350:	09 fa                	or     edx,edi
c000c352:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000c359:	09 fa                	or     edx,edi
c000c35b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000c362:	c1 e7 18             	shl    edi,0x18
c000c365:	09 fa                	or     edx,edi
c000c367:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000c36b:	46                   	inc    esi
c000c36c:	83 fe 04             	cmp    esi,0x4
c000c36f:	0f 85 7a ff ff ff    	jne    c000c2ef <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000c375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c379:	83 f0 01             	xor    eax,0x1
c000c37c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c380:	75 57                	jne    c000c3d9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c382:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c386:	83 f0 01             	xor    eax,0x1
c000c389:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c38d:	75 4a                	jne    c000c3d9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c38f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000c393:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c39b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c3a3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c3a9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c3af:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c3b5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c3b9:	89 f7                	mov    edi,esi
c000c3bb:	c1 e0 0a             	shl    eax,0xa
c000c3be:	c1 ff 1f             	sar    edi,0x1f
c000c3c1:	57                   	push   edi
c000c3c2:	56                   	push   esi
c000c3c3:	52                   	push   edx
c000c3c4:	50                   	push   eax
c000c3c5:	e8 96 f2 00 00       	call   c001b660 <__udivdi3>
c000c3ca:	83 c4 10             	add    esp,0x10
c000c3cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c3d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c3d5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000c3d9:	84 c9                	test   cl,cl
c000c3db:	74 53                	je     c000c430 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000c3dd:	0f b6 c9             	movzx  ecx,cl
c000c3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c3e8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c3ec:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c3f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3f8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000c3fc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000c400:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c404:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c408:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c410:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000c414:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000c418:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000c41c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000c420:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c424:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c428:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000c42c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000c430:	31 ed                	xor    ebp,ebp
c000c432:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000c436:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000c43a:	89 f8                	mov    eax,edi
c000c43c:	09 f0                	or     eax,esi
c000c43e:	74 1e                	je     c000c45e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c440:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000c444:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000c448:	89 d1                	mov    ecx,edx
c000c44a:	09 c1                	or     ecx,eax
c000c44c:	74 10                	je     c000c45e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c44e:	83 ec 0c             	sub    esp,0xc
c000c451:	57                   	push   edi
c000c452:	56                   	push   esi
c000c453:	52                   	push   edx
c000c454:	50                   	push   eax
c000c455:	53                   	push   ebx
c000c456:	e8 db fc ff ff       	call   c000c136 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c45b:	83 c4 20             	add    esp,0x20
c000c45e:	45                   	inc    ebp
c000c45f:	83 fd 04             	cmp    ebp,0x4
c000c462:	75 ce                	jne    c000c432 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000c464:	81 c4 5c 02 00 00    	add    esp,0x25c
c000c46a:	5b                   	pop    ebx
c000c46b:	5e                   	pop    esi
c000c46c:	5f                   	pop    edi
c000c46d:	5d                   	pop    ebp
c000c46e:	c3                   	ret    
c000c46f:	90                   	nop

c000c470 <Serial::Serial(char const*)>:
c000c470:	83 ec 0c             	sub    esp,0xc
c000c473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c477:	83 ec 08             	sub    esp,0x8
c000c47a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c47e:	50                   	push   eax
c000c47f:	e8 44 ea ff ff       	call   c000aec8 <Device::Device(char const*)>
c000c484:	83 c4 10             	add    esp,0x10
c000c487:	ba 18 d7 01 c0       	mov    edx,0xc001d718
c000c48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c490:	89 10                	mov    DWORD PTR [eax],edx
c000c492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c496:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000c4a0:	90                   	nop
c000c4a1:	83 c4 0c             	add    esp,0xc
c000c4a4:	c3                   	ret    
c000c4a5:	90                   	nop
c000c4a6:	66 90                	xchg   ax,ax

c000c4a8 <Serial::~Serial()>:
c000c4a8:	83 ec 0c             	sub    esp,0xc
c000c4ab:	ba 18 d7 01 c0       	mov    edx,0xc001d718
c000c4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b4:	89 10                	mov    DWORD PTR [eax],edx
c000c4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ba:	83 ec 0c             	sub    esp,0xc
c000c4bd:	50                   	push   eax
c000c4be:	e8 6f e7 ff ff       	call   c000ac32 <Device::~Device()>
c000c4c3:	83 c4 10             	add    esp,0x10
c000c4c6:	90                   	nop
c000c4c7:	83 c4 0c             	add    esp,0xc
c000c4ca:	c3                   	ret    
c000c4cb:	90                   	nop

c000c4cc <Serial::~Serial()>:
c000c4cc:	83 ec 0c             	sub    esp,0xc
c000c4cf:	83 ec 0c             	sub    esp,0xc
c000c4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4d6:	e8 cd ff ff ff       	call   c000c4a8 <Serial::~Serial()>
c000c4db:	83 c4 10             	add    esp,0x10
c000c4de:	83 ec 08             	sub    esp,0x8
c000c4e1:	68 58 01 00 00       	push   0x158
c000c4e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ea:	e8 0b d3 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000c4ef:	83 c4 10             	add    esp,0x10
c000c4f2:	83 c4 0c             	add    esp,0xc
c000c4f5:	c3                   	ret    
c000c4f6:	66 90                	xchg   ax,ax

c000c4f8 <Timer::Timer(char const*)>:
c000c4f8:	83 ec 0c             	sub    esp,0xc
c000c4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ff:	83 ec 08             	sub    esp,0x8
c000c502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c506:	50                   	push   eax
c000c507:	e8 bc e9 ff ff       	call   c000aec8 <Device::Device(char const*)>
c000c50c:	83 c4 10             	add    esp,0x10
c000c50f:	ba 5c d7 01 c0       	mov    edx,0xc001d75c
c000c514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c518:	89 10                	mov    DWORD PTR [eax],edx
c000c51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c51e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000c528:	90                   	nop
c000c529:	83 c4 0c             	add    esp,0xc
c000c52c:	c3                   	ret    
c000c52d:	90                   	nop
c000c52e:	66 90                	xchg   ax,ax

c000c530 <Timer::~Timer()>:
c000c530:	83 ec 0c             	sub    esp,0xc
c000c533:	ba 5c d7 01 c0       	mov    edx,0xc001d75c
c000c538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c53c:	89 10                	mov    DWORD PTR [eax],edx
c000c53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c542:	83 ec 0c             	sub    esp,0xc
c000c545:	50                   	push   eax
c000c546:	e8 e7 e6 ff ff       	call   c000ac32 <Device::~Device()>
c000c54b:	83 c4 10             	add    esp,0x10
c000c54e:	90                   	nop
c000c54f:	83 c4 0c             	add    esp,0xc
c000c552:	c3                   	ret    
c000c553:	90                   	nop

c000c554 <Timer::~Timer()>:
c000c554:	83 ec 0c             	sub    esp,0xc
c000c557:	83 ec 0c             	sub    esp,0xc
c000c55a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c55e:	e8 cd ff ff ff       	call   c000c530 <Timer::~Timer()>
c000c563:	83 c4 10             	add    esp,0x10
c000c566:	83 ec 08             	sub    esp,0x8
c000c569:	68 5c 01 00 00       	push   0x15c
c000c56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c572:	e8 83 d2 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000c577:	83 c4 10             	add    esp,0x10
c000c57a:	83 c4 0c             	add    esp,0xc
c000c57d:	c3                   	ret    

c000c57e <Timer::read()>:
c000c57e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c582:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c588:	c3                   	ret    

c000c589 <setupTimer(int)>:
c000c589:	53                   	push   ebx
c000c58a:	83 ec 14             	sub    esp,0x14
c000c58d:	68 5c 01 00 00       	push   0x15c
c000c592:	e8 ca a5 ff ff       	call   c0006b61 <malloc>
c000c597:	89 04 24             	mov    DWORD PTR [esp],eax
c000c59a:	89 c3                	mov    ebx,eax
c000c59c:	e8 33 ea 00 00       	call   c001afd4 <PIT::PIT()>
c000c5a1:	58                   	pop    eax
c000c5a2:	5a                   	pop    edx
c000c5a3:	53                   	push   ebx
c000c5a4:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000c5aa:	e8 81 e7 ff ff       	call   c000ad30 <Device::addChild(Device*)>
c000c5af:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c5b1:	6a 00                	push   0x0
c000c5b3:	6a 00                	push   0x0
c000c5b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c5b9:	53                   	push   ebx
c000c5ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c5bd:	89 d8                	mov    eax,ebx
c000c5bf:	83 c4 28             	add    esp,0x28
c000c5c2:	5b                   	pop    ebx
c000c5c3:	c3                   	ret    

c000c5c4 <timerHandler(unsigned int)>:
c000c5c4:	56                   	push   esi
c000c5c5:	53                   	push   ebx
c000c5c6:	51                   	push   ecx
c000c5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5cb:	01 05 ec 19 02 c0    	add    DWORD PTR ds:0xc00219ec,eax
c000c5d1:	80 3d 2d f4 01 c0 00 	cmp    BYTE PTR ds:0xc001f42d,0x0
c000c5d8:	0f 84 4a 01 00 00    	je     c000c728 <timerHandler(unsigned int)+0x164>
c000c5de:	fa                   	cli    
c000c5df:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c000c5e5:	83 ec 0c             	sub    esp,0xc
c000c5e8:	ff 05 e4 28 02 c0    	inc    DWORD PTR ds:0xc00228e4
c000c5ee:	68 f8 28 02 c0       	push   0xc00228f8
c000c5f3:	e8 38 f6 00 00       	call   c001bc30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c5f8:	83 c4 10             	add    esp,0x10
c000c5fb:	84 c0                	test   al,al
c000c5fd:	0f 85 a1 00 00 00    	jne    c000c6a4 <timerHandler(unsigned int)+0xe0>
c000c603:	83 ec 0c             	sub    esp,0xc
c000c606:	68 f8 28 02 c0       	push   0xc00228f8
c000c60b:	e8 3c f6 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c610:	83 c4 10             	add    esp,0x10
c000c613:	89 c6                	mov    esi,eax
c000c615:	8d 76 00             	lea    esi,[esi+0x0]
c000c618:	83 ec 0c             	sub    esp,0xc
c000c61b:	68 f8 28 02 c0       	push   0xc00228f8
c000c620:	e8 27 f6 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c625:	c7 04 24 f8 28 02 c0 	mov    DWORD PTR [esp],0xc00228f8
c000c62c:	89 c3                	mov    ebx,eax
c000c62e:	e8 21 f6 00 00       	call   c001bc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000c633:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000c636:	83 c4 10             	add    esp,0x10
c000c639:	3b 05 ec 19 02 c0    	cmp    eax,DWORD PTR ds:0xc00219ec
c000c63f:	77 23                	ja     c000c664 <timerHandler(unsigned int)+0xa0>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	53                   	push   ebx
c000c645:	e8 2e 67 00 00       	call   c0012d78 <unblockTask(ThreadControlBlock*)>
c000c64a:	83 c4 10             	add    esp,0x10
c000c64d:	39 de                	cmp    esi,ebx
c000c64f:	75 27                	jne    c000c678 <timerHandler(unsigned int)+0xb4>
c000c651:	83 ec 0c             	sub    esp,0xc
c000c654:	68 f8 28 02 c0       	push   0xc00228f8
c000c659:	e8 ee f5 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c65e:	89 c6                	mov    esi,eax
c000c660:	eb 12                	jmp    c000c674 <timerHandler(unsigned int)+0xb0>
c000c662:	66 90                	xchg   ax,ax
c000c664:	52                   	push   edx
c000c665:	52                   	push   edx
c000c666:	53                   	push   ebx
c000c667:	68 f8 28 02 c0       	push   0xc00228f8
c000c66c:	e8 9b f6 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000c671:	8d 76 00             	lea    esi,[esi+0x0]
c000c674:	83 c4 10             	add    esp,0x10
c000c677:	90                   	nop
c000c678:	83 ec 0c             	sub    esp,0xc
c000c67b:	68 f8 28 02 c0       	push   0xc00228f8
c000c680:	e8 ab f5 00 00       	call   c001bc30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c685:	83 c4 10             	add    esp,0x10
c000c688:	84 c0                	test   al,al
c000c68a:	75 18                	jne    c000c6a4 <timerHandler(unsigned int)+0xe0>
c000c68c:	83 ec 0c             	sub    esp,0xc
c000c68f:	68 f8 28 02 c0       	push   0xc00228f8
c000c694:	e8 b3 f5 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c699:	83 c4 10             	add    esp,0x10
c000c69c:	39 f0                	cmp    eax,esi
c000c69e:	0f 85 74 ff ff ff    	jne    c000c618 <timerHandler(unsigned int)+0x54>
c000c6a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c6a9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000c6ad:	74 41                	je     c000c6f0 <timerHandler(unsigned int)+0x12c>
c000c6af:	80 3d 2c f4 01 c0 00 	cmp    BYTE PTR ds:0xc001f42c,0x0
c000c6b6:	74 38                	je     c000c6f0 <timerHandler(unsigned int)+0x12c>
c000c6b8:	fa                   	cli    
c000c6b9:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c000c6bf:	a1 ec 19 02 c0       	mov    eax,ds:0xc00219ec
c000c6c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c6ca:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000c6cd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c6d3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000c6d6:	72 08                	jb     c000c6e0 <timerHandler(unsigned int)+0x11c>
c000c6d8:	e8 d7 61 00 00       	call   c00128b4 <schedule()>
c000c6dd:	8d 76 00             	lea    esi,[esi+0x0]
c000c6e0:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000c6e5:	48                   	dec    eax
c000c6e6:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c000c6eb:	75 03                	jne    c000c6f0 <timerHandler(unsigned int)+0x12c>
c000c6ed:	fb                   	sti    
c000c6ee:	66 90                	xchg   ax,ax
c000c6f0:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c000c6f5:	48                   	dec    eax
c000c6f6:	a3 e4 28 02 c0       	mov    ds:0xc00228e4,eax
c000c6fb:	75 1b                	jne    c000c718 <timerHandler(unsigned int)+0x154>
c000c6fd:	83 3d e0 28 02 c0 00 	cmp    DWORD PTR ds:0xc00228e0,0x0
c000c704:	74 12                	je     c000c718 <timerHandler(unsigned int)+0x154>
c000c706:	c7 05 e0 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228e0,0x0
c000c710:	e8 9f 61 00 00       	call   c00128b4 <schedule()>
c000c715:	8d 76 00             	lea    esi,[esi+0x0]
c000c718:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000c71d:	48                   	dec    eax
c000c71e:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c000c723:	75 03                	jne    c000c728 <timerHandler(unsigned int)+0x164>
c000c725:	fb                   	sti    
c000c726:	66 90                	xchg   ax,ax
c000c728:	58                   	pop    eax
c000c729:	5b                   	pop    ebx
c000c72a:	5e                   	pop    esi
c000c72b:	c3                   	ret    

c000c72c <VCache::VCache(PhysicalDisk*)>:
c000c72c:	53                   	push   ebx
c000c72d:	83 ec 18             	sub    esp,0x18
c000c730:	ba 8c d7 01 c0       	mov    edx,0xc001d78c
c000c735:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c739:	89 10                	mov    DWORD PTR [eax],edx
c000c73b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c73f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000c746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c74a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000c751:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c755:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000c75c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000c763:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c767:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000c76e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000c775:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c779:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000c780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c784:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c78c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000c793:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000c79a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c79e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c7a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7a6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000c7aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c7b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7b6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c7bd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000c7c5:	83 ec 0c             	sub    esp,0xc
c000c7c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c7cc:	e8 90 a3 ff ff       	call   c0006b61 <malloc>
c000c7d1:	83 c4 10             	add    esp,0x10
c000c7d4:	89 c3                	mov    ebx,eax
c000c7d6:	83 ec 0c             	sub    esp,0xc
c000c7d9:	53                   	push   ebx
c000c7da:	e8 a1 5e 00 00       	call   c0012680 <Mutex::Mutex()>
c000c7df:	83 c4 10             	add    esp,0x10
c000c7e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7e6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000c7e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7ed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c7f1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000c7f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7f8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000c7ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c803:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000c809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c80d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c810:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c814:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000c81a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c820:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c824:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000c827:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000c82a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c82e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c832:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c836:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c83c:	05 00 01 00 00       	add    eax,0x100
c000c841:	c1 e0 04             	shl    eax,0x4
c000c844:	83 ec 0c             	sub    esp,0xc
c000c847:	50                   	push   eax
c000c848:	e8 14 a3 ff ff       	call   c0006b61 <malloc>
c000c84d:	83 c4 10             	add    esp,0x10
c000c850:	89 c2                	mov    edx,eax
c000c852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c856:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000c859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c85d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c868:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c86c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c870:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c876:	c1 e0 06             	shl    eax,0x6
c000c879:	83 ec 0c             	sub    esp,0xc
c000c87c:	50                   	push   eax
c000c87d:	e8 df a2 ff ff       	call   c0006b61 <malloc>
c000c882:	83 c4 10             	add    esp,0x10
c000c885:	89 c2                	mov    edx,eax
c000c887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c88b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c88e:	90                   	nop
c000c88f:	83 c4 18             	add    esp,0x18
c000c892:	5b                   	pop    ebx
c000c893:	c3                   	ret    

c000c894 <VCache::invalidateReadBuffer()>:
c000c894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c898:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000c89e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c8a2:	c3                   	ret    
c000c8a3:	90                   	nop

c000c8a4 <VCache::writeWriteBuffer()>:
c000c8a4:	53                   	push   ebx
c000c8a5:	83 ec 08             	sub    esp,0x8
c000c8a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8ac:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c8b0:	74 1e                	je     c000c8d0 <VCache::writeWriteBuffer()+0x2c>
c000c8b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c8b5:	83 ec 0c             	sub    esp,0xc
c000c8b8:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8ba:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000c8bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000c8c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000c8c3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c6:	50                   	push   eax
c000c8c7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c8ca:	83 c4 20             	add    esp,0x20
c000c8cd:	8d 76 00             	lea    esi,[esi+0x0]
c000c8d0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000c8d7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000c8de:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000c8e2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000c8e9:	83 c4 08             	add    esp,0x8
c000c8ec:	5b                   	pop    ebx
c000c8ed:	c3                   	ret    
c000c8ee:	66 90                	xchg   ax,ax

c000c8f0 <VCache::~VCache()>:
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ba 8c d7 01 c0       	mov    edx,0xc001d78c
c000c8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8fc:	89 10                	mov    DWORD PTR [eax],edx
c000c8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c902:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000c905:	84 c0                	test   al,al
c000c907:	74 0f                	je     c000c918 <VCache::~VCache()+0x28>
c000c909:	83 ec 0c             	sub    esp,0xc
c000c90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c910:	e8 8f ff ff ff       	call   c000c8a4 <VCache::writeWriteBuffer()>
c000c915:	83 c4 10             	add    esp,0x10
c000c918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c91c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c91f:	83 ec 0c             	sub    esp,0xc
c000c922:	50                   	push   eax
c000c923:	e8 49 a2 ff ff       	call   c0006b71 <free>
c000c928:	83 c4 10             	add    esp,0x10
c000c92b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c92f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000c932:	83 ec 0c             	sub    esp,0xc
c000c935:	50                   	push   eax
c000c936:	e8 36 a2 ff ff       	call   c0006b71 <free>
c000c93b:	83 c4 10             	add    esp,0x10
c000c93e:	90                   	nop
c000c93f:	83 c4 0c             	add    esp,0xc
c000c942:	c3                   	ret    
c000c943:	90                   	nop

c000c944 <VCache::~VCache()>:
c000c944:	83 ec 0c             	sub    esp,0xc
c000c947:	83 ec 0c             	sub    esp,0xc
c000c94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c94e:	e8 9d ff ff ff       	call   c000c8f0 <VCache::~VCache()>
c000c953:	83 c4 10             	add    esp,0x10
c000c956:	83 ec 08             	sub    esp,0x8
c000c959:	6a 44                	push   0x44
c000c95b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c95f:	e8 96 ce ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	83 c4 0c             	add    esp,0xc
c000c96a:	c3                   	ret    
c000c96b:	90                   	nop

c000c96c <VCache::write(unsigned long long, int, void*)>:
c000c96c:	55                   	push   ebp
c000c96d:	31 c0                	xor    eax,eax
c000c96f:	57                   	push   edi
c000c970:	56                   	push   esi
c000c971:	53                   	push   ebx
c000c972:	83 ec 0c             	sub    esp,0xc
c000c975:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c979:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c97d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c981:	8d 76 00             	lea    esi,[esi+0x0]
c000c984:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000c988:	7d 1a                	jge    c000c9a4 <VCache::write(unsigned long long, int, void*)+0x38>
c000c98a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000c98d:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000c993:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c997:	0f af c8             	imul   ecx,eax
c000c99a:	01 ca                	add    edx,ecx
c000c99c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000c99e:	40                   	inc    eax
c000c99f:	eb e3                	jmp    c000c984 <VCache::write(unsigned long long, int, void*)+0x18>
c000c9a1:	8d 76 00             	lea    esi,[esi+0x0]
c000c9a4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000c9a8:	74 0a                	je     c000c9b4 <VCache::write(unsigned long long, int, void*)+0x48>
c000c9aa:	53                   	push   ebx
c000c9ab:	e8 e4 fe ff ff       	call   c000c894 <VCache::invalidateReadBuffer()>
c000c9b0:	58                   	pop    eax
c000c9b1:	8d 76 00             	lea    esi,[esi+0x0]
c000c9b4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c9b8:	74 5e                	je     c000ca18 <VCache::write(unsigned long long, int, void*)+0xac>
c000c9ba:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000c9bd:	89 e8                	mov    eax,ebp
c000c9bf:	99                   	cdq    
c000c9c0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000c9c3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000c9c6:	89 c1                	mov    ecx,eax
c000c9c8:	89 d0                	mov    eax,edx
c000c9ca:	31 f1                	xor    ecx,esi
c000c9cc:	31 f8                	xor    eax,edi
c000c9ce:	09 c1                	or     ecx,eax
c000c9d0:	75 3a                	jne    c000ca0c <VCache::write(unsigned long long, int, void*)+0xa0>
c000c9d2:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000c9d7:	75 33                	jne    c000ca0c <VCache::write(unsigned long long, int, void*)+0xa0>
c000c9d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c9dc:	89 ef                	mov    edi,ebp
c000c9de:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c9e4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c9e8:	0f af f9             	imul   edi,ecx
c000c9eb:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000c9ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000c9f3:	40                   	inc    eax
c000c9f4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000c9f7:	83 f8 40             	cmp    eax,0x40
c000c9fa:	75 60                	jne    c000ca5c <VCache::write(unsigned long long, int, void*)+0xf0>
c000c9fc:	83 ec 0c             	sub    esp,0xc
c000c9ff:	53                   	push   ebx
c000ca00:	e8 9f fe ff ff       	call   c000c8a4 <VCache::writeWriteBuffer()>
c000ca05:	83 c4 10             	add    esp,0x10
c000ca08:	eb 52                	jmp    c000ca5c <VCache::write(unsigned long long, int, void*)+0xf0>
c000ca0a:	66 90                	xchg   ax,ax
c000ca0c:	83 ec 0c             	sub    esp,0xc
c000ca0f:	53                   	push   ebx
c000ca10:	e8 8f fe ff ff       	call   c000c8a4 <VCache::writeWriteBuffer()>
c000ca15:	83 c4 10             	add    esp,0x10
c000ca18:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ca1b:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000ca20:	7f 22                	jg     c000ca44 <VCache::write(unsigned long long, int, void*)+0xd8>
c000ca22:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000ca25:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000ca28:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ca2c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000ca30:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ca33:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000ca36:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ca3c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ca40:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ca42:	eb 18                	jmp    c000ca5c <VCache::write(unsigned long long, int, void*)+0xf0>
c000ca44:	83 ec 0c             	sub    esp,0xc
c000ca47:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca4d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca51:	57                   	push   edi
c000ca52:	56                   	push   esi
c000ca53:	50                   	push   eax
c000ca54:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ca57:	83 c4 20             	add    esp,0x20
c000ca5a:	66 90                	xchg   ax,ax
c000ca5c:	83 c4 0c             	add    esp,0xc
c000ca5f:	31 c0                	xor    eax,eax
c000ca61:	5b                   	pop    ebx
c000ca62:	5e                   	pop    esi
c000ca63:	5f                   	pop    edi
c000ca64:	5d                   	pop    ebp
c000ca65:	c3                   	ret    

c000ca66 <VCache::read(unsigned long long, int, void*)>:
c000ca66:	55                   	push   ebp
c000ca67:	31 c0                	xor    eax,eax
c000ca69:	57                   	push   edi
c000ca6a:	56                   	push   esi
c000ca6b:	53                   	push   ebx
c000ca6c:	83 ec 1c             	sub    esp,0x1c
c000ca6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ca73:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ca77:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ca7b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ca7f:	90                   	nop
c000ca80:	39 e8                	cmp    eax,ebp
c000ca82:	7d 18                	jge    c000ca9c <VCache::read(unsigned long long, int, void*)+0x36>
c000ca84:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000ca87:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000ca8d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ca91:	0f af c8             	imul   ecx,eax
c000ca94:	01 ca                	add    edx,ecx
c000ca96:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000ca98:	40                   	inc    eax
c000ca99:	eb e5                	jmp    c000ca80 <VCache::read(unsigned long long, int, void*)+0x1a>
c000ca9b:	90                   	nop
c000ca9c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000caa0:	74 0e                	je     c000cab0 <VCache::read(unsigned long long, int, void*)+0x4a>
c000caa2:	83 ec 0c             	sub    esp,0xc
c000caa5:	53                   	push   ebx
c000caa6:	e8 f9 fd ff ff       	call   c000c8a4 <VCache::writeWriteBuffer()>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	66 90                	xchg   ax,ax
c000cab0:	83 fd 01             	cmp    ebp,0x1
c000cab3:	0f 85 87 00 00 00    	jne    c000cb40 <VCache::read(unsigned long long, int, void*)+0xda>
c000cab9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cabc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cac0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000cac7:	75 77                	jne    c000cb40 <VCache::read(unsigned long long, int, void*)+0xda>
c000cac9:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000cacc:	89 e9                	mov    ecx,ebp
c000cace:	f7 d9                	neg    ecx
c000cad0:	89 c8                	mov    eax,ecx
c000cad2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cad6:	c1 f8 1f             	sar    eax,0x1f
c000cad9:	21 f1                	and    ecx,esi
c000cadb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cadf:	89 c8                	mov    eax,ecx
c000cae1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cae5:	21 f9                	and    ecx,edi
c000cae7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000caeb:	89 ca                	mov    edx,ecx
c000caed:	74 0d                	je     c000cafc <VCache::read(unsigned long long, int, void*)+0x96>
c000caef:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000caf2:	75 08                	jne    c000cafc <VCache::read(unsigned long long, int, void*)+0x96>
c000caf4:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000caf7:	74 27                	je     c000cb20 <VCache::read(unsigned long long, int, void*)+0xba>
c000caf9:	8d 76 00             	lea    esi,[esi+0x0]
c000cafc:	83 ec 0c             	sub    esp,0xc
c000caff:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000cb03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cb07:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000cb0a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cb0d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000cb0f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000cb12:	55                   	push   ebp
c000cb13:	52                   	push   edx
c000cb14:	50                   	push   eax
c000cb15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cb19:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000cb1c:	83 c4 20             	add    esp,0x20
c000cb1f:	90                   	nop
c000cb20:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cb23:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000cb27:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cb2d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000cb30:	48                   	dec    eax
c000cb31:	21 c6                	and    esi,eax
c000cb33:	0f af f1             	imul   esi,ecx
c000cb36:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000cb39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb3b:	eb 23                	jmp    c000cb60 <VCache::read(unsigned long long, int, void*)+0xfa>
c000cb3d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	53                   	push   ebx
c000cb44:	e8 4b fd ff ff       	call   c000c894 <VCache::invalidateReadBuffer()>
c000cb49:	5a                   	pop    edx
c000cb4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cb4d:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb53:	55                   	push   ebp
c000cb54:	57                   	push   edi
c000cb55:	56                   	push   esi
c000cb56:	50                   	push   eax
c000cb57:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000cb5a:	83 c4 20             	add    esp,0x20
c000cb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb60:	83 c4 1c             	add    esp,0x1c
c000cb63:	31 c0                	xor    eax,eax
c000cb65:	5b                   	pop    ebx
c000cb66:	5e                   	pop    esi
c000cb67:	5f                   	pop    edi
c000cb68:	5d                   	pop    ebp
c000cb69:	c3                   	ret    

c000cb6a <Video::putrect(int, int, int, int, unsigned int)>:
c000cb6a:	55                   	push   ebp
c000cb6b:	57                   	push   edi
c000cb6c:	56                   	push   esi
c000cb6d:	53                   	push   ebx
c000cb6e:	83 ec 1c             	sub    esp,0x1c
c000cb71:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000cb75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb79:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000cb7d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000cb81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cb85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb89:	01 df                	add    edi,ebx
c000cb8b:	39 fb                	cmp    ebx,edi
c000cb8d:	7d 1f                	jge    c000cbae <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000cb8f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cb93:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000cb97:	7d 12                	jge    c000cbab <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000cb99:	8b 16                	mov    edx,DWORD PTR [esi]
c000cb9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000cb9f:	53                   	push   ebx
c000cba0:	55                   	push   ebp
c000cba1:	45                   	inc    ebp
c000cba2:	56                   	push   esi
c000cba3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000cba6:	83 c4 10             	add    esp,0x10
c000cba9:	eb e8                	jmp    c000cb93 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000cbab:	43                   	inc    ebx
c000cbac:	eb dd                	jmp    c000cb8b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000cbae:	83 c4 1c             	add    esp,0x1c
c000cbb1:	5b                   	pop    ebx
c000cbb2:	5e                   	pop    esi
c000cbb3:	5f                   	pop    edi
c000cbb4:	5d                   	pop    ebp
c000cbb5:	c3                   	ret    

c000cbb6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000cbb6:	55                   	push   ebp
c000cbb7:	57                   	push   edi
c000cbb8:	31 ff                	xor    edi,edi
c000cbba:	56                   	push   esi
c000cbbb:	53                   	push   ebx
c000cbbc:	83 ec 1c             	sub    esp,0x1c
c000cbbf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000cbc3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cbc7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000cbce:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000cbd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cbd7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000cbdb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cbdf:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000cbe2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cbe6:	01 f9                	add    ecx,edi
c000cbe8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000cbec:	7d 2f                	jge    c000cc1d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000cbee:	31 f6                	xor    esi,esi
c000cbf0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000cbf4:	01 f2                	add    edx,esi
c000cbf6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000cbfa:	7d 1a                	jge    c000cc16 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000cbfc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbff:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000cc02:	46                   	inc    esi
c000cc03:	51                   	push   ecx
c000cc04:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc08:	52                   	push   edx
c000cc09:	55                   	push   ebp
c000cc0a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc14:	eb da                	jmp    c000cbf0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000cc16:	47                   	inc    edi
c000cc17:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000cc1b:	eb c5                	jmp    c000cbe2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000cc1d:	83 c4 1c             	add    esp,0x1c
c000cc20:	5b                   	pop    ebx
c000cc21:	5e                   	pop    esi
c000cc22:	5f                   	pop    edi
c000cc23:	5d                   	pop    ebp
c000cc24:	c3                   	ret    
c000cc25:	90                   	nop

c000cc26 <Video::blit(unsigned int*, int, int, int, int)>:
c000cc26:	55                   	push   ebp
c000cc27:	57                   	push   edi
c000cc28:	56                   	push   esi
c000cc29:	53                   	push   ebx
c000cc2a:	83 ec 1c             	sub    esp,0x1c
c000cc2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc31:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cc35:	85 c0                	test   eax,eax
c000cc37:	79 02                	jns    c000cc3b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000cc39:	31 c0                	xor    eax,eax
c000cc3b:	c1 e0 02             	shl    eax,0x2
c000cc3e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cc42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cc46:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cc4a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000cc4e:	39 d8                	cmp    eax,ebx
c000cc50:	7e 49                	jle    c000cc9b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cc52:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000cc58:	7c 41                	jl     c000cc9b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cc5a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000cc5e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cc62:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc66:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000cc6a:	39 f9                	cmp    ecx,edi
c000cc6c:	7e 22                	jle    c000cc90 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000cc6e:	83 c5 04             	add    ebp,0x4
c000cc71:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000cc77:	7c 14                	jl     c000cc8d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000cc79:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000cc7b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000cc7e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000cc82:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000cc86:	56                   	push   esi
c000cc87:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	47                   	inc    edi
c000cc8e:	eb d2                	jmp    c000cc62 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000cc90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cc94:	43                   	inc    ebx
c000cc95:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000cc99:	eb ab                	jmp    c000cc46 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000cc9b:	83 c4 1c             	add    esp,0x1c
c000cc9e:	5b                   	pop    ebx
c000cc9f:	5e                   	pop    esi
c000cca0:	5f                   	pop    edi
c000cca1:	5d                   	pop    ebp
c000cca2:	c3                   	ret    
c000cca3:	90                   	nop

c000cca4 <Video::clearScreen(unsigned int)>:
c000cca4:	57                   	push   edi
c000cca5:	56                   	push   esi
c000cca6:	53                   	push   ebx
c000cca7:	31 db                	xor    ebx,ebx
c000cca9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccad:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ccb3:	7e 1f                	jle    c000ccd4 <Video::clearScreen(unsigned int)+0x30>
c000ccb5:	31 ff                	xor    edi,edi
c000ccb7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ccbd:	7e 12                	jle    c000ccd1 <Video::clearScreen(unsigned int)+0x2d>
c000ccbf:	8b 06                	mov    eax,DWORD PTR [esi]
c000ccc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccc5:	53                   	push   ebx
c000ccc6:	57                   	push   edi
c000ccc7:	47                   	inc    edi
c000ccc8:	56                   	push   esi
c000ccc9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	eb e6                	jmp    c000ccb7 <Video::clearScreen(unsigned int)+0x13>
c000ccd1:	43                   	inc    ebx
c000ccd2:	eb d9                	jmp    c000ccad <Video::clearScreen(unsigned int)+0x9>
c000ccd4:	5b                   	pop    ebx
c000ccd5:	5e                   	pop    esi
c000ccd6:	5f                   	pop    edi
c000ccd7:	c3                   	ret    

c000ccd8 <Video::putpixel(int, int, unsigned int)>:
c000ccd8:	c7 44 24 04 94 d7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d794
c000cce0:	e9 5a 27 00 00       	jmp    c000f43f <Krnl::panic(char const*)>
c000cce5:	90                   	nop

c000cce6 <Video::Video(char const*)>:
c000cce6:	83 ec 0c             	sub    esp,0xc
c000cce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cced:	83 ec 08             	sub    esp,0x8
c000ccf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf4:	50                   	push   eax
c000ccf5:	e8 ce e1 ff ff       	call   c000aec8 <Device::Device(char const*)>
c000ccfa:	83 c4 10             	add    esp,0x10
c000ccfd:	ba 04 d8 01 c0       	mov    edx,0xc001d804
c000cd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd06:	89 10                	mov    DWORD PTR [eax],edx
c000cd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd0c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000cd16:	90                   	nop
c000cd17:	83 c4 0c             	add    esp,0xc
c000cd1a:	c3                   	ret    
c000cd1b:	90                   	nop

c000cd1c <Video::~Video()>:
c000cd1c:	83 ec 0c             	sub    esp,0xc
c000cd1f:	ba 04 d8 01 c0       	mov    edx,0xc001d804
c000cd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd28:	89 10                	mov    DWORD PTR [eax],edx
c000cd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2e:	83 ec 0c             	sub    esp,0xc
c000cd31:	50                   	push   eax
c000cd32:	e8 fb de ff ff       	call   c000ac32 <Device::~Device()>
c000cd37:	83 c4 10             	add    esp,0x10
c000cd3a:	90                   	nop
c000cd3b:	83 c4 0c             	add    esp,0xc
c000cd3e:	c3                   	ret    
c000cd3f:	90                   	nop

c000cd40 <Video::~Video()>:
c000cd40:	83 ec 0c             	sub    esp,0xc
c000cd43:	83 ec 0c             	sub    esp,0xc
c000cd46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd4a:	e8 cd ff ff ff       	call   c000cd1c <Video::~Video()>
c000cd4f:	83 c4 10             	add    esp,0x10
c000cd52:	83 ec 08             	sub    esp,0x8
c000cd55:	68 64 01 00 00       	push   0x164
c000cd5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd5e:	e8 97 ca ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c000cd63:	83 c4 10             	add    esp,0x10
c000cd66:	83 c4 0c             	add    esp,0xc
c000cd69:	c3                   	ret    

c000cd6a <Video::isMonochrome()>:
c000cd6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd6e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000cd74:	c3                   	ret    
c000cd75:	90                   	nop

c000cd76 <Video::getWidth()>:
c000cd76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd7a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd80:	c3                   	ret    
c000cd81:	90                   	nop

c000cd82 <Video::getHeight()>:
c000cd82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd86:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000cd8c:	c3                   	ret    
c000cd8d:	90                   	nop

c000cd8e <Video::drawCursor(int, int, unsigned char*, int)>:
c000cd8e:	55                   	push   ebp
c000cd8f:	57                   	push   edi
c000cd90:	56                   	push   esi
c000cd91:	53                   	push   ebx
c000cd92:	83 ec 2c             	sub    esp,0x2c
c000cd95:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cd99:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000cd9d:	83 f8 01             	cmp    eax,0x1
c000cda0:	19 c9                	sbb    ecx,ecx
c000cda2:	31 db                	xor    ebx,ebx
c000cda4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000cda8:	89 cd                	mov    ebp,ecx
c000cdaa:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000cdb2:	f7 d5                	not    ebp
c000cdb4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000cdba:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cdbe:	01 d8                	add    eax,ebx
c000cdc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cdc4:	56                   	push   esi
c000cdc5:	e8 b8 ff ff ff       	call   c000cd82 <Video::getHeight()>
c000cdca:	59                   	pop    ecx
c000cdcb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cdcf:	7e 70                	jle    c000ce41 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000cdd1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cdd5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000cdd9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000cddc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cde0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cde4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000cdeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdef:	89 f8                	mov    eax,edi
c000cdf1:	83 c0 20             	add    eax,0x20
c000cdf4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cdf8:	56                   	push   esi
c000cdf9:	e8 78 ff ff ff       	call   c000cd76 <Video::getWidth()>
c000cdfe:	5a                   	pop    edx
c000cdff:	39 c7                	cmp    edi,eax
c000ce01:	7d 34                	jge    c000ce37 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000ce03:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ce08:	74 05                	je     c000ce0f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000ce0a:	8b 06                	mov    eax,DWORD PTR [esi]
c000ce0c:	55                   	push   ebp
c000ce0d:	eb 0d                	jmp    c000ce1c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000ce0f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ce14:	74 12                	je     c000ce28 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000ce16:	8b 06                	mov    eax,DWORD PTR [esi]
c000ce18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce1c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ce20:	57                   	push   edi
c000ce21:	56                   	push   esi
c000ce22:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ce25:	83 c4 10             	add    esp,0x10
c000ce28:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ce2c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ce30:	47                   	inc    edi
c000ce31:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ce35:	75 c1                	jne    c000cdf8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000ce37:	43                   	inc    ebx
c000ce38:	83 fb 20             	cmp    ebx,0x20
c000ce3b:	0f 85 79 ff ff ff    	jne    c000cdba <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000ce41:	83 c4 2c             	add    esp,0x2c
c000ce44:	5b                   	pop    ebx
c000ce45:	5e                   	pop    esi
c000ce46:	5f                   	pop    edi
c000ce47:	5d                   	pop    ebp
c000ce48:	c3                   	ret    
c000ce49:	90                   	nop

c000ce4a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ce4a:	55                   	push   ebp
c000ce4b:	57                   	push   edi
c000ce4c:	56                   	push   esi
c000ce4d:	53                   	push   ebx
c000ce4e:	83 ec 28             	sub    esp,0x28
c000ce51:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ce55:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ce59:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ce5d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ce61:	c1 e6 08             	shl    esi,0x8
c000ce64:	01 c6                	add    esi,eax
c000ce66:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ce6a:	c1 e0 08             	shl    eax,0x8
c000ce6d:	01 d0                	add    eax,edx
c000ce6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ce73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ce77:	0f af c6             	imul   eax,esi
c000ce7a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ce81:	50                   	push   eax
c000ce82:	e8 da 9c ff ff       	call   c0006b61 <malloc>
c000ce87:	83 c4 10             	add    esp,0x10
c000ce8a:	89 c7                	mov    edi,eax
c000ce8c:	85 c0                	test   eax,eax
c000ce8e:	75 10                	jne    c000cea0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ce90:	83 ec 0c             	sub    esp,0xc
c000ce93:	68 b5 d7 01 c0       	push   0xc001d7b5
c000ce98:	e8 a2 25 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000ce9d:	83 c4 10             	add    esp,0x10
c000cea0:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000cea3:	ba 12 00 00 00       	mov    edx,0x12
c000cea8:	84 c0                	test   al,al
c000ceaa:	74 11                	je     c000cebd <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000ceac:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ceb0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ceb4:	c1 fa 03             	sar    edx,0x3
c000ceb7:	0f af d1             	imul   edx,ecx
c000ceba:	83 c2 12             	add    edx,0x12
c000cebd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000cec1:	74 04                	je     c000cec7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000cec3:	85 f6                	test   esi,esi
c000cec5:	75 12                	jne    c000ced9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000cec7:	83 ec 0c             	sub    esp,0xc
c000ceca:	68 c5 d7 01 c0       	push   0xc001d7c5
c000cecf:	e8 1c ca ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000ced4:	e9 b8 00 00 00       	jmp    c000cf91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000ced9:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000cedd:	80 f9 02             	cmp    cl,0x2
c000cee0:	0f 85 96 00 00 00    	jne    c000cf7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000cee6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ceeb:	75 0e                	jne    c000cefb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000ceed:	84 c0                	test   al,al
c000ceef:	75 0a                	jne    c000cefb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000cef1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000cef4:	83 e8 18             	sub    eax,0x18
c000cef7:	a8 f7                	test   al,0xf7
c000cef9:	74 0a                	je     c000cf05 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000cefb:	83 ec 0c             	sub    esp,0xc
c000cefe:	68 da d7 01 c0       	push   0xc001d7da
c000cf03:	eb 7f                	jmp    c000cf84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000cf05:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000cf0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000cf15:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000cf19:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000cf21:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000cf25:	75 0c                	jne    c000cf33 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000cf27:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000cf2c:	c1 e0 18             	shl    eax,0x18
c000cf2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf33:	45                   	inc    ebp
c000cf34:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000cf39:	c1 e1 10             	shl    ecx,0x10
c000cf3c:	89 c8                	mov    eax,ecx
c000cf3e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000cf43:	c1 e1 08             	shl    ecx,0x8
c000cf46:	09 c1                	or     ecx,eax
c000cf48:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000cf4c:	09 c1                	or     ecx,eax
c000cf4e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000cf52:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000cf56:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000cf5a:	c1 f8 03             	sar    eax,0x3
c000cf5d:	01 c2                	add    edx,eax
c000cf5f:	89 e8                	mov    eax,ebp
c000cf61:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000cf65:	39 c6                	cmp    esi,eax
c000cf67:	7f b0                	jg     c000cf19 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000cf69:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000cf6d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf71:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000cf74:	7e 22                	jle    c000cf98 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000cf76:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000cf7a:	eb 99                	jmp    c000cf15 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000cf7c:	50                   	push   eax
c000cf7d:	50                   	push   eax
c000cf7e:	51                   	push   ecx
c000cf7f:	68 e8 d7 01 c0       	push   0xc001d7e8
c000cf84:	e8 67 c9 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000cf89:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cf8c:	e8 e0 9b ff ff       	call   c0006b71 <free>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	31 ff                	xor    edi,edi
c000cf96:	eb 0f                	jmp    c000cfa7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000cf98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cf9c:	89 30                	mov    DWORD PTR [eax],esi
c000cf9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfa2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000cfa5:	89 30                	mov    DWORD PTR [eax],esi
c000cfa7:	83 c4 1c             	add    esp,0x1c
c000cfaa:	89 f8                	mov    eax,edi
c000cfac:	5b                   	pop    ebx
c000cfad:	5e                   	pop    esi
c000cfae:	5f                   	pop    edi
c000cfaf:	5d                   	pop    ebp
c000cfb0:	c3                   	ret    
c000cfb1:	90                   	nop

c000cfb2 <Video::putTGA(int, int, unsigned char*, int)>:
c000cfb2:	55                   	push   ebp
c000cfb3:	57                   	push   edi
c000cfb4:	56                   	push   esi
c000cfb5:	53                   	push   ebx
c000cfb6:	83 ec 28             	sub    esp,0x28
c000cfb9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000cfbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000cfc1:	50                   	push   eax
c000cfc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000cfc6:	50                   	push   eax
c000cfc7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000cfcb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000cfcf:	56                   	push   esi
c000cfd0:	e8 75 fe ff ff       	call   c000ce4a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000cfd5:	83 c4 20             	add    esp,0x20
c000cfd8:	85 c0                	test   eax,eax
c000cfda:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000cfde:	74 35                	je     c000d015 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000cfe0:	89 c7                	mov    edi,eax
c000cfe2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfe6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000cfea:	39 d8                	cmp    eax,ebx
c000cfec:	7e 27                	jle    c000d015 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000cfee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cff2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cff6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000cffa:	39 e8                	cmp    eax,ebp
c000cffc:	7e 14                	jle    c000d012 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000cffe:	8b 06                	mov    eax,DWORD PTR [esi]
c000d000:	83 c7 04             	add    edi,0x4
c000d003:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000d006:	53                   	push   ebx
c000d007:	55                   	push   ebp
c000d008:	45                   	inc    ebp
c000d009:	56                   	push   esi
c000d00a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d00d:	83 c4 10             	add    esp,0x10
c000d010:	eb e0                	jmp    c000cff2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000d012:	43                   	inc    ebx
c000d013:	eb cd                	jmp    c000cfe2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000d015:	83 c4 1c             	add    esp,0x1c
c000d018:	5b                   	pop    ebx
c000d019:	5e                   	pop    esi
c000d01a:	5f                   	pop    edi
c000d01b:	5d                   	pop    ebp
c000d01c:	c3                   	ret    
c000d01d:	66 90                	xchg   ax,ax
c000d01f:	90                   	nop

c000d020 <ACPI::close(int, int, void*)>:
c000d020:	83 ec 1c             	sub    esp,0x1c
c000d023:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000d02b:	74 0b                	je     c000d038 <ACPI::close(int, int, void*)+0x18>
c000d02d:	b8 00 00 00 00       	mov    eax,0x0
c000d032:	e9 9d 00 00 00       	jmp    c000d0d4 <ACPI::close(int, int, void*)+0xb4>
c000d037:	90                   	nop
c000d038:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000d03d:	75 29                	jne    c000d068 <ACPI::close(int, int, void*)+0x48>
c000d03f:	a1 08 1a 02 c0       	mov    eax,ds:0xc0021a08
c000d044:	85 c0                	test   eax,eax
c000d046:	74 08                	je     c000d050 <ACPI::close(int, int, void*)+0x30>
c000d048:	a1 08 1a 02 c0       	mov    eax,ds:0xc0021a08
c000d04d:	ff d0                	call   eax
c000d04f:	90                   	nop
c000d050:	83 ec 0c             	sub    esp,0xc
c000d053:	68 44 d8 01 c0       	push   0xc001d844
c000d058:	e8 e2 23 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000d05d:	83 c4 10             	add    esp,0x10
c000d060:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d065:	eb 6d                	jmp    c000d0d4 <ACPI::close(int, int, void*)+0xb4>
c000d067:	90                   	nop
c000d068:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000d06d:	75 5d                	jne    c000d0cc <ACPI::close(int, int, void*)+0xac>
c000d06f:	a1 04 1a 02 c0       	mov    eax,ds:0xc0021a04
c000d074:	85 c0                	test   eax,eax
c000d076:	74 08                	je     c000d080 <ACPI::close(int, int, void*)+0x60>
c000d078:	a1 04 1a 02 c0       	mov    eax,ds:0xc0021a04
c000d07d:	ff d0                	call   eax
c000d07f:	90                   	nop
c000d080:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000d085:	8d 76 00             	lea    esi,[esi+0x0]
c000d088:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d08c:	25 ff 00 00 00       	and    eax,0xff
c000d091:	83 e0 02             	and    eax,0x2
c000d094:	74 1e                	je     c000d0b4 <ACPI::close(int, int, void*)+0x94>
c000d096:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000d09d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d0a1:	89 c2                	mov    edx,eax
c000d0a3:	ec                   	in     al,dx
c000d0a4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d0a8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d0ac:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d0b0:	eb d6                	jmp    c000d088 <ACPI::close(int, int, void*)+0x68>
c000d0b2:	66 90                	xchg   ax,ax
c000d0b4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000d0bb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000d0c0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000d0c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0c8:	ee                   	out    dx,al
c000d0c9:	8d 76 00             	lea    esi,[esi+0x0]
c000d0cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d0d1:	8d 76 00             	lea    esi,[esi+0x0]
c000d0d4:	83 c4 1c             	add    esp,0x1c
c000d0d7:	c3                   	ret    

c000d0d8 <findRSDP()>:
c000d0d8:	83 ec 1c             	sub    esp,0x1c
c000d0db:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d0e0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d0e6:	83 e0 04             	and    eax,0x4
c000d0e9:	84 c0                	test   al,al
c000d0eb:	75 07                	jne    c000d0f4 <findRSDP()+0x1c>
c000d0ed:	b8 00 00 00 00       	mov    eax,0x0
c000d0f2:	eb 70                	jmp    c000d164 <findRSDP()+0x8c>
c000d0f4:	a1 58 f4 01 c0       	mov    eax,ds:0xc001f458
c000d0f9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000d0fe:	7f 1c                	jg     c000d11c <findRSDP()+0x44>
c000d100:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d105:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d10b:	83 e2 fb             	and    edx,0xfffffffb
c000d10e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d114:	b8 00 00 00 00       	mov    eax,0x0
c000d119:	eb 49                	jmp    c000d164 <findRSDP()+0x8c>
c000d11b:	90                   	nop
c000d11c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000d124:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000d12c:	77 2e                	ja     c000d15c <findRSDP()+0x84>
c000d12e:	83 ec 04             	sub    esp,0x4
c000d131:	6a 08                	push   0x8
c000d133:	68 df d8 01 c0       	push   0xc001d8df
c000d138:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d13c:	e8 6f 32 ff ff       	call   c00003b0 <memcmp>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	85 c0                	test   eax,eax
c000d146:	0f 94 c0             	sete   al
c000d149:	84 c0                	test   al,al
c000d14b:	74 07                	je     c000d154 <findRSDP()+0x7c>
c000d14d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d151:	eb 11                	jmp    c000d164 <findRSDP()+0x8c>
c000d153:	90                   	nop
c000d154:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000d159:	eb c9                	jmp    c000d124 <findRSDP()+0x4c>
c000d15b:	90                   	nop
c000d15c:	b8 00 00 00 00       	mov    eax,0x0
c000d161:	8d 76 00             	lea    esi,[esi+0x0]
c000d164:	83 c4 1c             	add    esp,0x1c
c000d167:	c3                   	ret    

c000d168 <loadACPITables(unsigned char*)>:
c000d168:	57                   	push   edi
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	83 ec 60             	sub    esp,0x60
c000d16e:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d173:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d179:	83 e0 04             	and    eax,0x4
c000d17c:	84 c0                	test   al,al
c000d17e:	0f 84 3c 02 00 00    	je     c000d3c0 <loadACPITables(unsigned char*)+0x258>
c000d184:	a0 20 1c 02 c0       	mov    al,ds:0xc0021c20
c000d189:	84 c0                	test   al,al
c000d18b:	74 77                	je     c000d204 <loadACPITables(unsigned char*)+0x9c>
c000d18d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d191:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d195:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d199:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d19c:	83 e8 24             	sub    eax,0x24
c000d19f:	c1 e8 03             	shr    eax,0x3
c000d1a2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1a6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000d1ae:	66 90                	xchg   ax,ax
c000d1b0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d1b4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000d1b8:	0f 8d b6 00 00 00    	jge    c000d274 <loadACPITables(unsigned char*)+0x10c>
c000d1be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d1c2:	83 c0 24             	add    eax,0x24
c000d1c5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d1c9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d1cd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d1d1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d1d5:	c1 e0 03             	shl    eax,0x3
c000d1d8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000d1dc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d1e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d1e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1e5:	89 c1                	mov    ecx,eax
c000d1e7:	a1 0c 1a 02 c0       	mov    eax,ds:0xc0021a0c
c000d1ec:	8d 50 01             	lea    edx,[eax+0x1]
c000d1ef:	89 15 0c 1a 02 c0    	mov    DWORD PTR ds:0xc0021a0c,edx
c000d1f5:	89 ca                	mov    edx,ecx
c000d1f7:	89 14 c5 24 1a 02 c0 	mov    DWORD PTR [eax*8-0x3ffde5dc],edx
c000d1fe:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000d202:	eb ac                	jmp    c000d1b0 <loadACPITables(unsigned char*)+0x48>
c000d204:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d208:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d20c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d210:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d213:	83 e8 24             	sub    eax,0x24
c000d216:	c1 e8 02             	shr    eax,0x2
c000d219:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d21d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000d225:	8d 76 00             	lea    esi,[esi+0x0]
c000d228:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d22c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000d230:	7d 42                	jge    c000d274 <loadACPITables(unsigned char*)+0x10c>
c000d232:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d236:	83 c0 24             	add    eax,0x24
c000d239:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d23d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d241:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d245:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d249:	c1 e0 02             	shl    eax,0x2
c000d24c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d250:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d254:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d256:	a1 0c 1a 02 c0       	mov    eax,ds:0xc0021a0c
c000d25b:	8d 50 01             	lea    edx,[eax+0x1]
c000d25e:	89 15 0c 1a 02 c0    	mov    DWORD PTR ds:0xc0021a0c,edx
c000d264:	89 ca                	mov    edx,ecx
c000d266:	89 14 c5 24 1a 02 c0 	mov    DWORD PTR [eax*8-0x3ffde5dc],edx
c000d26d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000d271:	eb b5                	jmp    c000d228 <loadACPITables(unsigned char*)+0xc0>
c000d273:	90                   	nop
c000d274:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000d27c:	a1 0c 1a 02 c0       	mov    eax,ds:0xc0021a0c
c000d281:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000d285:	0f 8d 39 01 00 00    	jge    c000d3c4 <loadACPITables(unsigned char*)+0x25c>
c000d28b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d28f:	8b 04 c5 24 1a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffde5dc]
c000d296:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d29a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d29e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d2a6:	25 ff 0f 00 00       	and    eax,0xfff
c000d2ab:	89 c6                	mov    esi,eax
c000d2ad:	8b 1d 10 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f510
c000d2b3:	83 ec 0c             	sub    esp,0xc
c000d2b6:	6a 01                	push   0x1
c000d2b8:	e8 e0 b3 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d2c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d2ca:	83 ec 0c             	sub    esp,0xc
c000d2cd:	6a 01                	push   0x1
c000d2cf:	6a 01                	push   0x1
c000d2d1:	50                   	push   eax
c000d2d2:	52                   	push   edx
c000d2d3:	53                   	push   ebx
c000d2d4:	e8 53 bd ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d2d9:	83 c4 20             	add    esp,0x20
c000d2dc:	09 f0                	or     eax,esi
c000d2de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2e2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d2e6:	c1 e0 03             	shl    eax,0x3
c000d2e9:	05 20 1a 02 c0       	add    eax,0xc0021a20
c000d2ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d2f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d2f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2fa:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000d302:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d306:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d30a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d30e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d312:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d316:	89 c6                	mov    esi,eax
c000d318:	89 d7                	mov    edi,edx
c000d31a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d31c:	89 c8                	mov    eax,ecx
c000d31e:	89 fa                	mov    edx,edi
c000d320:	89 f3                	mov    ebx,esi
c000d322:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d326:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000d32a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d32e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d335:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d339:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d33d:	05 00 10 00 00       	add    eax,0x1000
c000d342:	c1 e8 0c             	shr    eax,0xc
c000d345:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d349:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d34d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d351:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d355:	25 ff 0f 00 00       	and    eax,0xfff
c000d35a:	89 c6                	mov    esi,eax
c000d35c:	8b 1d 10 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f510
c000d362:	83 ec 0c             	sub    esp,0xc
c000d365:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000d369:	e8 2f b3 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c000d36e:	83 c4 10             	add    esp,0x10
c000d371:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d375:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d37b:	83 ec 0c             	sub    esp,0xc
c000d37e:	6a 01                	push   0x1
c000d380:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d384:	50                   	push   eax
c000d385:	52                   	push   edx
c000d386:	53                   	push   ebx
c000d387:	e8 a0 bc ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d38c:	83 c4 20             	add    esp,0x20
c000d38f:	09 f0                	or     eax,esi
c000d391:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d399:	83 ec 0c             	sub    esp,0xc
c000d39c:	50                   	push   eax
c000d39d:	e8 2b b6 ff ff       	call   c00089cd <Virt::freeKernelVirtualPages(unsigned long)>
c000d3a2:	83 c4 10             	add    esp,0x10
c000d3a5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d3a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d3ad:	89 14 c5 24 1a 02 c0 	mov    DWORD PTR [eax*8-0x3ffde5dc],edx
c000d3b4:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000d3b8:	e9 bf fe ff ff       	jmp    c000d27c <loadACPITables(unsigned char*)+0x114>
c000d3bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d3c0:	90                   	nop
c000d3c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d3c4:	83 c4 60             	add    esp,0x60
c000d3c7:	5b                   	pop    ebx
c000d3c8:	5e                   	pop    esi
c000d3c9:	5f                   	pop    edi
c000d3ca:	c3                   	ret    
c000d3cb:	90                   	nop

c000d3cc <findRSDT(unsigned char*)>:
c000d3cc:	57                   	push   edi
c000d3cd:	56                   	push   esi
c000d3ce:	53                   	push   ebx
c000d3cf:	83 ec 50             	sub    esp,0x50
c000d3d2:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d3d7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d3dd:	83 e0 04             	and    eax,0x4
c000d3e0:	84 c0                	test   al,al
c000d3e2:	75 0c                	jne    c000d3f0 <findRSDT(unsigned char*)+0x24>
c000d3e4:	b8 00 00 00 00       	mov    eax,0x0
c000d3e9:	e9 26 01 00 00       	jmp    c000d514 <findRSDT(unsigned char*)+0x148>
c000d3ee:	66 90                	xchg   ax,ax
c000d3f0:	89 e0                	mov    eax,esp
c000d3f2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d3f6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d3fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d3fe:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000d406:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d40a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d40e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d412:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000d416:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000d41a:	89 c6                	mov    esi,eax
c000d41c:	89 d7                	mov    edi,edx
c000d41e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d420:	89 c8                	mov    eax,ecx
c000d422:	89 fa                	mov    edx,edi
c000d424:	89 f3                	mov    ebx,esi
c000d426:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000d42a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d42e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d432:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d436:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000d43a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000d442:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d446:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d44a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d452:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d456:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d45a:	25 ff 0f 00 00       	and    eax,0xfff
c000d45f:	89 c6                	mov    esi,eax
c000d461:	8b 1d 10 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f510
c000d467:	83 ec 0c             	sub    esp,0xc
c000d46a:	6a 02                	push   0x2
c000d46c:	e8 2c b2 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c000d471:	83 c4 10             	add    esp,0x10
c000d474:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d478:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d47e:	83 ec 0c             	sub    esp,0xc
c000d481:	6a 01                	push   0x1
c000d483:	6a 02                	push   0x2
c000d485:	50                   	push   eax
c000d486:	52                   	push   edx
c000d487:	53                   	push   ebx
c000d488:	e8 9f bb ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d48d:	83 c4 20             	add    esp,0x20
c000d490:	09 f0                	or     eax,esi
c000d492:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d496:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d49a:	25 ff 0f 00 00       	and    eax,0xfff
c000d49f:	89 c6                	mov    esi,eax
c000d4a1:	8b 1d 10 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f510
c000d4a7:	83 ec 0c             	sub    esp,0xc
c000d4aa:	6a 02                	push   0x2
c000d4ac:	e8 ec b1 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c000d4b1:	83 c4 10             	add    esp,0x10
c000d4b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d4b8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d4be:	83 ec 0c             	sub    esp,0xc
c000d4c1:	6a 01                	push   0x1
c000d4c3:	6a 02                	push   0x2
c000d4c5:	50                   	push   eax
c000d4c6:	52                   	push   edx
c000d4c7:	53                   	push   ebx
c000d4c8:	e8 5f bb ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d4cd:	83 c4 20             	add    esp,0x20
c000d4d0:	09 f0                	or     eax,esi
c000d4d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4d6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000d4db:	75 13                	jne    c000d4f0 <findRSDT(unsigned char*)+0x124>
c000d4dd:	c6 05 20 1c 02 c0 00 	mov    BYTE PTR ds:0xc0021c20,0x0
c000d4e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d4e8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d4ec:	eb 22                	jmp    c000d510 <findRSDT(unsigned char*)+0x144>
c000d4ee:	66 90                	xchg   ax,ax
c000d4f0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000d4f5:	75 11                	jne    c000d508 <findRSDT(unsigned char*)+0x13c>
c000d4f7:	c6 05 20 1c 02 c0 01 	mov    BYTE PTR ds:0xc0021c20,0x1
c000d4fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d502:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d506:	eb 08                	jmp    c000d510 <findRSDT(unsigned char*)+0x144>
c000d508:	b8 00 00 00 00       	mov    eax,0x0
c000d50d:	eb 05                	jmp    c000d514 <findRSDT(unsigned char*)+0x148>
c000d50f:	90                   	nop
c000d510:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d514:	83 c4 50             	add    esp,0x50
c000d517:	5b                   	pop    ebx
c000d518:	5e                   	pop    esi
c000d519:	5f                   	pop    edi
c000d51a:	c3                   	ret    
c000d51b:	90                   	nop

c000d51c <findDataTable(unsigned char*, char*)>:
c000d51c:	83 ec 1c             	sub    esp,0x1c
c000d51f:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d524:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d52a:	83 e0 04             	and    eax,0x4
c000d52d:	84 c0                	test   al,al
c000d52f:	75 07                	jne    c000d538 <findDataTable(unsigned char*, char*)+0x1c>
c000d531:	b8 00 00 00 00       	mov    eax,0x0
c000d536:	eb 58                	jmp    c000d590 <findDataTable(unsigned char*, char*)+0x74>
c000d538:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d540:	a1 0c 1a 02 c0       	mov    eax,ds:0xc0021a0c
c000d545:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000d549:	7d 3d                	jge    c000d588 <findDataTable(unsigned char*, char*)+0x6c>
c000d54b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d54f:	c1 e0 03             	shl    eax,0x3
c000d552:	05 20 1a 02 c0       	add    eax,0xc0021a20
c000d557:	83 ec 04             	sub    esp,0x4
c000d55a:	6a 04                	push   0x4
c000d55c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d560:	50                   	push   eax
c000d561:	e8 4a 2e ff ff       	call   c00003b0 <memcmp>
c000d566:	83 c4 10             	add    esp,0x10
c000d569:	85 c0                	test   eax,eax
c000d56b:	0f 94 c0             	sete   al
c000d56e:	84 c0                	test   al,al
c000d570:	74 0e                	je     c000d580 <findDataTable(unsigned char*, char*)+0x64>
c000d572:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d576:	8b 04 c5 24 1a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffde5dc]
c000d57d:	eb 11                	jmp    c000d590 <findDataTable(unsigned char*, char*)+0x74>
c000d57f:	90                   	nop
c000d580:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000d584:	eb ba                	jmp    c000d540 <findDataTable(unsigned char*, char*)+0x24>
c000d586:	66 90                	xchg   ax,ax
c000d588:	b8 00 00 00 00       	mov    eax,0x0
c000d58d:	8d 76 00             	lea    esi,[esi+0x0]
c000d590:	83 c4 1c             	add    esp,0x1c
c000d593:	c3                   	ret    

c000d594 <scanMADT()>:
c000d594:	53                   	push   ebx
c000d595:	83 ec 38             	sub    esp,0x38
c000d598:	a1 40 f4 01 c0       	mov    eax,ds:0xc001f440
c000d59d:	25 00 04 00 00       	and    eax,0x400
c000d5a2:	74 14                	je     c000d5b8 <scanMADT()+0x24>
c000d5a4:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d5a9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d5af:	83 e2 fb             	and    edx,0xfffffffb
c000d5b2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d5b8:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d5bd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d5c3:	83 e0 04             	and    eax,0x4
c000d5c6:	84 c0                	test   al,al
c000d5c8:	0f 84 8a 04 00 00    	je     c000da58 <scanMADT()+0x4c4>
c000d5ce:	e8 05 fb ff ff       	call   c000d0d8 <findRSDP()>
c000d5d3:	a3 2c 1c 02 c0       	mov    ds:0xc0021c2c,eax
c000d5d8:	a1 2c 1c 02 c0       	mov    eax,ds:0xc0021c2c
c000d5dd:	85 c0                	test   eax,eax
c000d5df:	75 1b                	jne    c000d5fc <scanMADT()+0x68>
c000d5e1:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d5e6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d5ec:	83 e2 fb             	and    edx,0xfffffffb
c000d5ef:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d5f5:	e9 66 04 00 00       	jmp    c000da60 <scanMADT()+0x4cc>
c000d5fa:	66 90                	xchg   ax,ax
c000d5fc:	a1 2c 1c 02 c0       	mov    eax,ds:0xc0021c2c
c000d601:	83 ec 0c             	sub    esp,0xc
c000d604:	50                   	push   eax
c000d605:	e8 c2 fd ff ff       	call   c000d3cc <findRSDT(unsigned char*)>
c000d60a:	83 c4 10             	add    esp,0x10
c000d60d:	a3 28 1c 02 c0       	mov    ds:0xc0021c28,eax
c000d612:	a1 28 1c 02 c0       	mov    eax,ds:0xc0021c28
c000d617:	85 c0                	test   eax,eax
c000d619:	75 19                	jne    c000d634 <scanMADT()+0xa0>
c000d61b:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d620:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d626:	83 e2 fb             	and    edx,0xfffffffb
c000d629:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d62f:	e9 2c 04 00 00       	jmp    c000da60 <scanMADT()+0x4cc>
c000d634:	a1 28 1c 02 c0       	mov    eax,ds:0xc0021c28
c000d639:	83 ec 0c             	sub    esp,0xc
c000d63c:	50                   	push   eax
c000d63d:	e8 26 fb ff ff       	call   c000d168 <loadACPITables(unsigned char*)>
c000d642:	83 c4 10             	add    esp,0x10
c000d645:	a1 28 1c 02 c0       	mov    eax,ds:0xc0021c28
c000d64a:	83 ec 08             	sub    esp,0x8
c000d64d:	68 e8 d8 01 c0       	push   0xc001d8e8
c000d652:	50                   	push   eax
c000d653:	e8 c4 fe ff ff       	call   c000d51c <findDataTable(unsigned char*, char*)>
c000d658:	83 c4 10             	add    esp,0x10
c000d65b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d65f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d664:	75 1a                	jne    c000d680 <scanMADT()+0xec>
c000d666:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d66b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d671:	83 e2 fe             	and    edx,0xfffffffe
c000d674:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d67a:	e9 e1 03 00 00       	jmp    c000da60 <scanMADT()+0x4cc>
c000d67f:	90                   	nop
c000d680:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000d688:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d68c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d68f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000d693:	0f 87 c7 03 00 00    	ja     c000da60 <scanMADT()+0x4cc>
c000d699:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000d6a1:	0f 87 b9 03 00 00    	ja     c000da60 <scanMADT()+0x4cc>
c000d6a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6ab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d6af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6b3:	8d 50 01             	lea    edx,[eax+0x1]
c000d6b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d6be:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d6c2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000d6c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6ca:	8d 50 01             	lea    edx,[eax+0x1]
c000d6cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d6d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d6d9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000d6dd:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000d6e2:	0f 86 74 03 00 00    	jbe    c000da5c <scanMADT()+0x4c8>
c000d6e8:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000d6ed:	75 5d                	jne    c000d74c <scanMADT()+0x1b8>
c000d6ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6f3:	8d 50 01             	lea    edx,[eax+0x1]
c000d6f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fa:	8a 15 20 1e 02 c0    	mov    dl,BYTE PTR ds:0xc0021e20
c000d700:	81 e2 ff 00 00 00    	and    edx,0xff
c000d706:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d70a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d70e:	88 82 60 1e 02 c0    	mov    BYTE PTR [edx-0x3ffde1a0],al
c000d714:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d718:	8d 42 01             	lea    eax,[edx+0x1]
c000d71b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d71f:	a0 20 1e 02 c0       	mov    al,ds:0xc0021e20
c000d724:	8d 48 01             	lea    ecx,[eax+0x1]
c000d727:	88 0d 20 1e 02 c0    	mov    BYTE PTR ds:0xc0021e20,cl
c000d72d:	25 ff 00 00 00       	and    eax,0xff
c000d732:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d736:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000d73a:	88 90 40 1e 02 c0    	mov    BYTE PTR [eax-0x3ffde1c0],dl
c000d740:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d745:	e9 f6 02 00 00       	jmp    c000da40 <scanMADT()+0x4ac>
c000d74a:	66 90                	xchg   ax,ax
c000d74c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000d751:	0f 85 29 01 00 00    	jne    c000d880 <scanMADT()+0x2ec>
c000d757:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d75b:	8d 50 01             	lea    edx,[eax+0x1]
c000d75e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d762:	8a 15 e0 1c 02 c0    	mov    dl,BYTE PTR ds:0xc0021ce0
c000d768:	81 e2 ff 00 00 00    	and    edx,0xff
c000d76e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d772:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d776:	88 82 00 1d 02 c0    	mov    BYTE PTR [edx-0x3ffde300],al
c000d77c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000d780:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d784:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d788:	01 d0                	add    eax,edx
c000d78a:	83 c0 2c             	add    eax,0x2c
c000d78d:	8a 00                	mov    al,BYTE PTR [eax]
c000d78f:	31 d2                	xor    edx,edx
c000d791:	88 c2                	mov    dl,al
c000d793:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d797:	8d 48 01             	lea    ecx,[eax+0x1]
c000d79a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d79e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d7a2:	25 ff 00 00 00       	and    eax,0xff
c000d7a7:	c1 e0 08             	shl    eax,0x8
c000d7aa:	89 d1                	mov    ecx,edx
c000d7ac:	09 c1                	or     ecx,eax
c000d7ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7b2:	8d 50 02             	lea    edx,[eax+0x2]
c000d7b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d7b9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d7bd:	25 ff 00 00 00       	and    eax,0xff
c000d7c2:	c1 e0 10             	shl    eax,0x10
c000d7c5:	09 c1                	or     ecx,eax
c000d7c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7cb:	8d 50 03             	lea    edx,[eax+0x3]
c000d7ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d7d2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d7d6:	25 ff 00 00 00       	and    eax,0xff
c000d7db:	c1 e0 18             	shl    eax,0x18
c000d7de:	09 c1                	or     ecx,eax
c000d7e0:	89 ca                	mov    edx,ecx
c000d7e2:	a0 e0 1c 02 c0       	mov    al,ds:0xc0021ce0
c000d7e7:	25 ff 00 00 00       	and    eax,0xff
c000d7ec:	89 14 85 20 1d 02 c0 	mov    DWORD PTR [eax*4-0x3ffde2e0],edx
c000d7f3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d7f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d7fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d800:	01 d0                	add    eax,edx
c000d802:	83 c0 2c             	add    eax,0x2c
c000d805:	8a 00                	mov    al,BYTE PTR [eax]
c000d807:	31 d2                	xor    edx,edx
c000d809:	88 c2                	mov    dl,al
c000d80b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d80f:	8d 48 01             	lea    ecx,[eax+0x1]
c000d812:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d816:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d81a:	25 ff 00 00 00       	and    eax,0xff
c000d81f:	c1 e0 08             	shl    eax,0x8
c000d822:	89 d1                	mov    ecx,edx
c000d824:	09 c1                	or     ecx,eax
c000d826:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d82a:	8d 50 02             	lea    edx,[eax+0x2]
c000d82d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d831:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d835:	25 ff 00 00 00       	and    eax,0xff
c000d83a:	c1 e0 10             	shl    eax,0x10
c000d83d:	09 c1                	or     ecx,eax
c000d83f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d843:	8d 50 03             	lea    edx,[eax+0x3]
c000d846:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d84a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d84e:	25 ff 00 00 00       	and    eax,0xff
c000d853:	c1 e0 18             	shl    eax,0x18
c000d856:	09 c1                	or     ecx,eax
c000d858:	89 ca                	mov    edx,ecx
c000d85a:	a0 e0 1c 02 c0       	mov    al,ds:0xc0021ce0
c000d85f:	25 ff 00 00 00       	and    eax,0xff
c000d864:	89 14 85 a0 1d 02 c0 	mov    DWORD PTR [eax*4-0x3ffde260],edx
c000d86b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d870:	a0 e0 1c 02 c0       	mov    al,ds:0xc0021ce0
c000d875:	40                   	inc    eax
c000d876:	a2 e0 1c 02 c0       	mov    ds:0xc0021ce0,al
c000d87b:	e9 c0 01 00 00       	jmp    c000da40 <scanMADT()+0x4ac>
c000d880:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000d885:	0f 85 fd 00 00 00    	jne    c000d988 <scanMADT()+0x3f4>
c000d88b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d88f:	8d 50 01             	lea    edx,[eax+0x1]
c000d892:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d896:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d89a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d89e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000d8a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8a6:	8d 50 01             	lea    edx,[eax+0x1]
c000d8a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d8b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d8b5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000d8b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d8bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8c1:	01 d0                	add    eax,edx
c000d8c3:	83 c0 2c             	add    eax,0x2c
c000d8c6:	8a 00                	mov    al,BYTE PTR [eax]
c000d8c8:	31 d2                	xor    edx,edx
c000d8ca:	88 c2                	mov    dl,al
c000d8cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8d0:	8d 48 01             	lea    ecx,[eax+0x1]
c000d8d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8d7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d8db:	25 ff 00 00 00       	and    eax,0xff
c000d8e0:	c1 e0 08             	shl    eax,0x8
c000d8e3:	89 d1                	mov    ecx,edx
c000d8e5:	09 c1                	or     ecx,eax
c000d8e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8eb:	8d 50 02             	lea    edx,[eax+0x2]
c000d8ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8f2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d8f6:	25 ff 00 00 00       	and    eax,0xff
c000d8fb:	c1 e0 10             	shl    eax,0x10
c000d8fe:	09 c1                	or     ecx,eax
c000d900:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d904:	8d 50 03             	lea    edx,[eax+0x3]
c000d907:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d90b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d90f:	25 ff 00 00 00       	and    eax,0xff
c000d914:	c1 e0 18             	shl    eax,0x18
c000d917:	09 c8                	or     eax,ecx
c000d919:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d91d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d922:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d92a:	01 d0                	add    eax,edx
c000d92c:	83 c0 2c             	add    eax,0x2c
c000d92f:	8a 00                	mov    al,BYTE PTR [eax]
c000d931:	25 ff 00 00 00       	and    eax,0xff
c000d936:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d93a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d93d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d941:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000d945:	81 e2 ff 00 00 00    	and    edx,0xff
c000d94b:	c1 e2 08             	shl    edx,0x8
c000d94e:	09 d0                	or     eax,edx
c000d950:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000d955:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d95a:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000d95e:	25 ff 00 00 00       	and    eax,0xff
c000d963:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d967:	88 90 e0 ed 01 c0    	mov    BYTE PTR [eax-0x3ffe1220],dl
c000d96d:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000d971:	31 d2                	xor    edx,edx
c000d973:	88 c2                	mov    dl,al
c000d975:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000d97a:	66 89 84 12 c0 1c 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffde340],ax
c000d982:	e9 b9 00 00 00       	jmp    c000da40 <scanMADT()+0x4ac>
c000d987:	90                   	nop
c000d988:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000d98d:	0f 85 a1 00 00 00    	jne    c000da34 <scanMADT()+0x4a0>
c000d993:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d997:	8d 50 01             	lea    edx,[eax+0x1]
c000d99a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d99e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9a2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d9a6:	25 ff 00 00 00       	and    eax,0xff
c000d9ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d9af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9b7:	01 d0                	add    eax,edx
c000d9b9:	83 c0 2c             	add    eax,0x2c
c000d9bc:	8a 00                	mov    al,BYTE PTR [eax]
c000d9be:	31 d2                	xor    edx,edx
c000d9c0:	88 c2                	mov    dl,al
c000d9c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9c6:	8d 48 01             	lea    ecx,[eax+0x1]
c000d9c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9cd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d9d1:	25 ff 00 00 00       	and    eax,0xff
c000d9d6:	c1 e0 08             	shl    eax,0x8
c000d9d9:	09 d0                	or     eax,edx
c000d9db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9df:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d9e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9e8:	8d 50 01             	lea    edx,[eax+0x1]
c000d9eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9f3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d9f7:	25 ff 00 00 00       	and    eax,0xff
c000d9fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da04:	c1 e0 08             	shl    eax,0x8
c000da07:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000da0b:	89 c1                	mov    ecx,eax
c000da0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da11:	c1 e0 18             	shl    eax,0x18
c000da14:	89 c3                	mov    ebx,eax
c000da16:	a1 30 1c 02 c0       	mov    eax,ds:0xc0021c30
c000da1b:	8d 50 01             	lea    edx,[eax+0x1]
c000da1e:	89 15 30 1c 02 c0    	mov    DWORD PTR ds:0xc0021c30,edx
c000da24:	09 d9                	or     ecx,ebx
c000da26:	89 ca                	mov    edx,ecx
c000da28:	89 14 85 40 1c 02 c0 	mov    DWORD PTR [eax*4-0x3ffde3c0],edx
c000da2f:	eb 0f                	jmp    c000da40 <scanMADT()+0x4ac>
c000da31:	8d 76 00             	lea    esi,[esi+0x0]
c000da34:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000da39:	75 05                	jne    c000da40 <scanMADT()+0x4ac>
c000da3b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000da40:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000da44:	31 d2                	xor    edx,edx
c000da46:	88 c2                	mov    dl,al
c000da48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da4c:	01 d0                	add    eax,edx
c000da4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000da52:	e9 31 fc ff ff       	jmp    c000d688 <scanMADT()+0xf4>
c000da57:	90                   	nop
c000da58:	90                   	nop
c000da59:	eb 05                	jmp    c000da60 <scanMADT()+0x4cc>
c000da5b:	90                   	nop
c000da5c:	90                   	nop
c000da5d:	8d 76 00             	lea    esi,[esi+0x0]
c000da60:	83 c4 38             	add    esp,0x38
c000da63:	5b                   	pop    ebx
c000da64:	c3                   	ret    
c000da65:	90                   	nop
c000da66:	66 90                	xchg   ax,ax

c000da68 <ACPI::ACPI()>:
c000da68:	83 ec 0c             	sub    esp,0xc
c000da6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da6f:	83 ec 08             	sub    esp,0x8
c000da72:	68 ed d8 01 c0       	push   0xc001d8ed
c000da77:	50                   	push   eax
c000da78:	e8 4b d4 ff ff       	call   c000aec8 <Device::Device(char const*)>
c000da7d:	83 c4 10             	add    esp,0x10
c000da80:	ba 24 da 01 c0       	mov    edx,0xc001da24
c000da85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da89:	89 10                	mov    DWORD PTR [eax],edx
c000da8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da8f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000da96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da9a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000daa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000dab2:	e8 dd fa ff ff       	call   c000d594 <scanMADT()>
c000dab7:	90                   	nop
c000dab8:	83 c4 0c             	add    esp,0xc
c000dabb:	c3                   	ret    

c000dabc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000dabc:	83 ec 2c             	sub    esp,0x2c
c000dabf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dac3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dac7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000dacb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000dacf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000dad4:	88 d0                	mov    al,dl
c000dad6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000dada:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000dadf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000dae7:	90                   	nop
c000dae8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000daec:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000daf2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000daf6:	0f 8d 9c 00 00 00    	jge    c000db98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000dafc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000db04:	83 c2 2a             	add    edx,0x2a
c000db07:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000db0b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000db10:	75 7a                	jne    c000db8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000db12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000db1a:	83 c2 2a             	add    edx,0x2a
c000db1d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000db21:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000db25:	75 65                	jne    c000db8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000db27:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000db2c:	74 3a                	je     c000db68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000db2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000db36:	83 c2 2a             	add    edx,0x2a
c000db39:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000db3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db44:	39 c2                	cmp    edx,eax
c000db46:	74 10                	je     c000db58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	68 68 d8 01 c0       	push   0xc001d868
c000db50:	e8 ea 18 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000db55:	83 c4 10             	add    esp,0x10
c000db58:	83 ec 0c             	sub    esp,0xc
c000db5b:	68 f2 d8 01 c0       	push   0xc001d8f2
c000db60:	e8 da 18 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000db65:	83 c4 10             	add    esp,0x10
c000db68:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000db6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000db74:	83 c2 2a             	add    edx,0x2a
c000db77:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000db7b:	8b 02                	mov    eax,DWORD PTR [edx]
c000db7d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000db80:	89 01                	mov    DWORD PTR [ecx],eax
c000db82:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000db85:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000db8a:	66 90                	xchg   ax,ax
c000db8c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000db90:	e9 53 ff ff ff       	jmp    c000dae8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000db95:	8d 76 00             	lea    esi,[esi+0x0]
c000db98:	90                   	nop
c000db99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db9d:	83 c4 2c             	add    esp,0x2c
c000dba0:	c2 04 00             	ret    0x4
c000dba3:	90                   	nop

c000dba4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000dba4:	83 ec 1c             	sub    esp,0x1c
c000dba7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dbab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dbaf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dbb3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000dbb8:	88 c8                	mov    al,cl
c000dbba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000dbbe:	88 d0                	mov    al,dl
c000dbc0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000dbc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dbce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000dbd5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000dbd9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000dbdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dbe7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dbeb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000dbee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dbf2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000dbf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbfb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dc01:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000dc05:	8d 48 01             	lea    ecx,[eax+0x1]
c000dc08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc0c:	83 c2 2a             	add    edx,0x2a
c000dc0f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000dc13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc17:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dc1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc21:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000dc24:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dc28:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000dc2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc30:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dc36:	8d 50 01             	lea    edx,[eax+0x1]
c000dc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000dc43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc47:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dc4d:	3d 00 02 00 00       	cmp    eax,0x200
c000dc52:	75 10                	jne    c000dc64 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000dc54:	83 ec 0c             	sub    esp,0xc
c000dc57:	68 01 d9 01 c0       	push   0xc001d901
c000dc5c:	e8 de 17 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000dc61:	83 c4 10             	add    esp,0x10
c000dc64:	90                   	nop
c000dc65:	83 c4 1c             	add    esp,0x1c
c000dc68:	c3                   	ret    
c000dc69:	90                   	nop
c000dc6a:	66 90                	xchg   ax,ax

c000dc6c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000dc6c:	b8 00 00 00 00       	mov    eax,0x0
c000dc71:	c3                   	ret    
c000dc72:	66 90                	xchg   ax,ax

c000dc74 <ACPI::detectPCI()>:
c000dc74:	53                   	push   ebx
c000dc75:	83 ec 28             	sub    esp,0x28
c000dc78:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000dc7d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000dc82:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000dc87:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc8d:	83 e0 04             	and    eax,0x4
c000dc90:	84 c0                	test   al,al
c000dc92:	74 2c                	je     c000dcc0 <ACPI::detectPCI()+0x4c>
c000dc94:	a1 28 1c 02 c0       	mov    eax,ds:0xc0021c28
c000dc99:	83 ec 08             	sub    esp,0x8
c000dc9c:	68 1e d9 01 c0       	push   0xc001d91e
c000dca1:	50                   	push   eax
c000dca2:	e8 75 f8 ff ff       	call   c000d51c <findDataTable(unsigned char*, char*)>
c000dca7:	83 c4 10             	add    esp,0x10
c000dcaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcae:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000dcb3:	74 0b                	je     c000dcc0 <ACPI::detectPCI()+0x4c>
c000dcb5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dcba:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dcbf:	90                   	nop
c000dcc0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000dcc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dccc:	8a 00                	mov    al,BYTE PTR [eax]
c000dcce:	3c 01                	cmp    al,0x1
c000dcd0:	75 0e                	jne    c000dce0 <ACPI::detectPCI()+0x6c>
c000dcd2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dcd7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dcdc:	eb 2a                	jmp    c000dd08 <ACPI::detectPCI()+0x94>
c000dcde:	66 90                	xchg   ax,ax
c000dce0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dce4:	8a 00                	mov    al,BYTE PTR [eax]
c000dce6:	3c 02                	cmp    al,0x2
c000dce8:	75 1e                	jne    c000dd08 <ACPI::detectPCI()+0x94>
c000dcea:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dcef:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000dcf4:	74 12                	je     c000dd08 <ACPI::detectPCI()+0x94>
c000dcf6:	83 ec 0c             	sub    esp,0xc
c000dcf9:	68 98 d8 01 c0       	push   0xc001d898
c000dcfe:	e8 3c 17 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000dd03:	83 c4 10             	add    esp,0x10
c000dd06:	66 90                	xchg   ax,ax
c000dd08:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000dd0c:	83 f0 01             	xor    eax,0x1
c000dd0f:	84 c0                	test   al,al
c000dd11:	74 41                	je     c000dd54 <ACPI::detectPCI()+0xe0>
c000dd13:	e8 38 24 ff ff       	call   c0000150 <manualPCIProbe>
c000dd18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd1c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dd21:	75 0d                	jne    c000dd30 <ACPI::detectPCI()+0xbc>
c000dd23:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dd28:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dd2d:	eb 25                	jmp    c000dd54 <ACPI::detectPCI()+0xe0>
c000dd2f:	90                   	nop
c000dd30:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000dd35:	75 1d                	jne    c000dd54 <ACPI::detectPCI()+0xe0>
c000dd37:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dd3c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000dd41:	74 11                	je     c000dd54 <ACPI::detectPCI()+0xe0>
c000dd43:	83 ec 0c             	sub    esp,0xc
c000dd46:	68 98 d8 01 c0       	push   0xc001d898
c000dd4b:	e8 ef 16 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000dd50:	83 c4 10             	add    esp,0x10
c000dd53:	90                   	nop
c000dd54:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000dd59:	0f 84 85 00 00 00    	je     c000dde4 <ACPI::detectPCI()+0x170>
c000dd5f:	83 ec 0c             	sub    esp,0xc
c000dd62:	68 23 d9 01 c0       	push   0xc001d923
c000dd67:	e8 4f 8e ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000dd6c:	83 c4 10             	add    esp,0x10
c000dd6f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000dd77:	83 ec 0c             	sub    esp,0xc
c000dd7a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd7e:	e8 de 8d ff ff       	call   c0006b61 <malloc>
c000dd83:	83 c4 10             	add    esp,0x10
c000dd86:	89 c3                	mov    ebx,eax
c000dd88:	83 ec 0c             	sub    esp,0xc
c000dd8b:	53                   	push   ebx
c000dd8c:	e8 bd 9b 00 00       	call   c001794e <PCI::PCI()>
c000dd91:	83 c4 10             	add    esp,0x10
c000dd94:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000dd98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dd9c:	83 ec 08             	sub    esp,0x8
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	50                   	push   eax
c000dda4:	e8 87 cf ff ff       	call   c000ad30 <Device::addChild(Device*)>
c000dda9:	83 c4 10             	add    esp,0x10
c000ddac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddb2:	83 c0 08             	add    eax,0x8
c000ddb5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddb7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ddbc:	74 0a                	je     c000ddc8 <ACPI::detectPCI()+0x154>
c000ddbe:	ba 01 00 00 00       	mov    edx,0x1
c000ddc3:	eb 0b                	jmp    c000ddd0 <ACPI::detectPCI()+0x15c>
c000ddc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddc8:	ba 02 00 00 00       	mov    edx,0x2
c000ddcd:	8d 76 00             	lea    esi,[esi+0x0]
c000ddd0:	6a 00                	push   0x0
c000ddd2:	6a 00                	push   0x0
c000ddd4:	52                   	push   edx
c000ddd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddd9:	ff d0                	call   eax
c000dddb:	83 c4 10             	add    esp,0x10
c000ddde:	e9 91 00 00 00       	jmp    c000de74 <ACPI::detectPCI()+0x200>
c000dde3:	90                   	nop
c000dde4:	83 ec 0c             	sub    esp,0xc
c000dde7:	68 3b d9 01 c0       	push   0xc001d93b
c000ddec:	e8 ca 8d ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000ddf1:	83 c4 10             	add    esp,0x10
c000ddf4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ddfb:	83 ec 0c             	sub    esp,0xc
c000ddfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de02:	e8 5a 8d ff ff       	call   c0006b61 <malloc>
c000de07:	83 c4 10             	add    esp,0x10
c000de0a:	89 c3                	mov    ebx,eax
c000de0c:	83 ec 0c             	sub    esp,0xc
c000de0f:	53                   	push   ebx
c000de10:	e8 65 a6 00 00       	call   c001847a <IDE::IDE()>
c000de15:	83 c4 10             	add    esp,0x10
c000de18:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000de1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de20:	83 ec 08             	sub    esp,0x8
c000de23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000de27:	50                   	push   eax
c000de28:	e8 03 cf ff ff       	call   c000ad30 <Device::addChild(Device*)>
c000de2d:	83 c4 10             	add    esp,0x10
c000de30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de34:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000de3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de42:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000de4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de4f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000de58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000de5e:	83 c0 08             	add    eax,0x8
c000de61:	8b 00                	mov    eax,DWORD PTR [eax]
c000de63:	6a 00                	push   0x0
c000de65:	6a 00                	push   0x0
c000de67:	6a 00                	push   0x0
c000de69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6d:	ff d0                	call   eax
c000de6f:	83 c4 10             	add    esp,0x10
c000de72:	66 90                	xchg   ax,ax
c000de74:	90                   	nop
c000de75:	83 c4 28             	add    esp,0x28
c000de78:	5b                   	pop    ebx
c000de79:	c3                   	ret    
c000de7a:	66 90                	xchg   ax,ax

c000de7c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000de7c:	83 ec 1c             	sub    esp,0x1c
c000de7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000de83:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000de86:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000de8a:	8b 15 28 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f428
c000de90:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000de94:	25 ff 00 00 00       	and    eax,0xff
c000de99:	83 ec 08             	sub    esp,0x8
c000de9c:	50                   	push   eax
c000de9d:	52                   	push   edx
c000de9e:	e8 6b 83 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c000dea3:	83 c4 10             	add    esp,0x10
c000dea6:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000deaa:	8b 15 28 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f428
c000deb0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000deb4:	25 ff 00 00 00       	and    eax,0xff
c000deb9:	83 ec 04             	sub    esp,0x4
c000debc:	6a 01                	push   0x1
c000debe:	50                   	push   eax
c000debf:	52                   	push   edx
c000dec0:	e8 5f 84 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c000dec5:	83 c4 10             	add    esp,0x10
c000dec8:	90                   	nop
c000dec9:	83 c4 1c             	add    esp,0x1c
c000decc:	c3                   	ret    
c000decd:	90                   	nop
c000dece:	66 90                	xchg   ax,ax

c000ded0 <ACPI::sleep()>:
c000ded0:	83 ec 0c             	sub    esp,0xc
c000ded3:	a1 00 1a 02 c0       	mov    eax,ds:0xc0021a00
c000ded8:	85 c0                	test   eax,eax
c000deda:	74 08                	je     c000dee4 <ACPI::sleep()+0x14>
c000dedc:	a1 00 1a 02 c0       	mov    eax,ds:0xc0021a00
c000dee1:	ff d0                	call   eax
c000dee3:	90                   	nop
c000dee4:	90                   	nop
c000dee5:	83 c4 0c             	add    esp,0xc
c000dee8:	c3                   	ret    
c000dee9:	90                   	nop
c000deea:	66 90                	xchg   ax,ax

c000deec <ACPI::open(int, int, void*)>:
c000deec:	57                   	push   edi
c000deed:	56                   	push   esi
c000deee:	53                   	push   ebx
c000deef:	81 ec 70 01 00 00    	sub    esp,0x170
c000def5:	83 ec 0c             	sub    esp,0xc
c000def8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000deff:	e8 70 fd ff ff       	call   c000dc74 <ACPI::detectPCI()>
c000df04:	83 c4 10             	add    esp,0x10
c000df07:	83 ec 0c             	sub    esp,0xc
c000df0a:	68 c0 d8 01 c0       	push   0xc001d8c0
c000df0f:	e8 a7 8c ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000df14:	83 c4 10             	add    esp,0x10
c000df17:	83 ec 0c             	sub    esp,0xc
c000df1a:	68 50 d9 01 c0       	push   0xc001d950
c000df1f:	e8 24 35 00 00       	call   c0011448 <Thr::loadKernelSymbolTable(char const*)>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000df2f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000df3a:	83 ec 0c             	sub    esp,0xc
c000df3d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000df44:	e8 18 8c ff ff       	call   c0006b61 <malloc>
c000df49:	83 c4 10             	add    esp,0x10
c000df4c:	89 c3                	mov    ebx,eax
c000df4e:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c000df53:	83 ec 04             	sub    esp,0x4
c000df56:	50                   	push   eax
c000df57:	68 6e d9 01 c0       	push   0xc001d96e
c000df5c:	53                   	push   ebx
c000df5d:	e8 04 bf ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000df62:	83 c4 10             	add    esp,0x10
c000df65:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000df6c:	83 ec 08             	sub    esp,0x8
c000df6f:	6a 01                	push   0x1
c000df71:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000df78:	e8 a9 bf ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c000df7d:	83 c4 10             	add    esp,0x10
c000df80:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000df87:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000df8f:	75 17                	jne    c000dfa8 <ACPI::open(int, int, void*)+0xbc>
c000df91:	83 ec 0c             	sub    esp,0xc
c000df94:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000df9b:	e8 e4 bf ff ff       	call   c0009f84 <File::close()>
c000dfa0:	83 c4 10             	add    esp,0x10
c000dfa3:	eb 0b                	jmp    c000dfb0 <ACPI::open(int, int, void*)+0xc4>
c000dfa5:	8d 76 00             	lea    esi,[esi+0x0]
c000dfa8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000dfb0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000dfb8:	74 1e                	je     c000dfd8 <ACPI::open(int, int, void*)+0xec>
c000dfba:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000dfc1:	8b 00                	mov    eax,DWORD PTR [eax]
c000dfc3:	83 c0 08             	add    eax,0x8
c000dfc6:	8b 00                	mov    eax,DWORD PTR [eax]
c000dfc8:	83 ec 0c             	sub    esp,0xc
c000dfcb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000dfd2:	ff d0                	call   eax
c000dfd4:	83 c4 10             	add    esp,0x10
c000dfd7:	90                   	nop
c000dfd8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000dfdf:	83 f0 01             	xor    eax,0x1
c000dfe2:	84 c0                	test   al,al
c000dfe4:	74 42                	je     c000e028 <ACPI::open(int, int, void*)+0x13c>
c000dfe6:	83 ec 0c             	sub    esp,0xc
c000dfe9:	68 8c d9 01 c0       	push   0xc001d98c
c000dfee:	e8 c8 8b ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000dff3:	83 c4 10             	add    esp,0x10
c000dff6:	83 ec 04             	sub    esp,0x4
c000dff9:	6a 0c                	push   0xc
c000dffb:	68 a7 d9 01 c0       	push   0xc001d9a7
c000e000:	68 b8 d9 01 c0       	push   0xc001d9b8
c000e005:	e8 3d 1c 00 00       	call   c000fc47 <Reg::readIntWithDefault(char*, char*, int)>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000e014:	83 ec 0c             	sub    esp,0xc
c000e017:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000e01e:	e8 84 a8 ff ff       	call   c00088a7 <Virt::setupPageSwapping(int)>
c000e023:	83 c4 10             	add    esp,0x10
c000e026:	66 90                	xchg   ax,ax
c000e028:	83 ec 0c             	sub    esp,0xc
c000e02b:	68 2f ca 01 c0       	push   0xc001ca2f
c000e030:	e8 86 8b ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000e03f:	83 ec 08             	sub    esp,0x8
c000e042:	6a 12                	push   0x12
c000e044:	50                   	push   eax
c000e045:	e8 fe cf ff ff       	call   c000b048 <getDevicesOfType(DeviceType)>
c000e04a:	83 c4 0c             	add    esp,0xc
c000e04d:	8d 76 00             	lea    esi,[esi+0x0]
c000e050:	83 ec 0c             	sub    esp,0xc
c000e053:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e05a:	50                   	push   eax
c000e05b:	e8 dc dd 00 00       	call   c001be3c <LinkedList<Device>::isEmpty()>
c000e060:	83 c4 10             	add    esp,0x10
c000e063:	83 f0 01             	xor    eax,0x1
c000e066:	84 c0                	test   al,al
c000e068:	0f 84 46 01 00 00    	je     c000e1b4 <ACPI::open(int, int, void*)+0x2c8>
c000e06e:	83 ec 0c             	sub    esp,0xc
c000e071:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e078:	50                   	push   eax
c000e079:	e8 da dd 00 00       	call   c001be58 <LinkedList<Device>::getFirstElement()>
c000e07e:	83 c4 10             	add    esp,0x10
c000e081:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000e088:	83 ec 0c             	sub    esp,0xc
c000e08b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e092:	50                   	push   eax
c000e093:	e8 c8 dd 00 00       	call   c001be60 <LinkedList<Device>::removeFirst()>
c000e098:	83 c4 10             	add    esp,0x10
c000e09b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000e0a2:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000e0a9:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000e0b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e0b4:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000e0ba:	ba 09 00 00 00       	mov    edx,0x9
c000e0bf:	fc                   	cld    
c000e0c0:	89 c7                	mov    edi,eax
c000e0c2:	89 de                	mov    esi,ebx
c000e0c4:	89 d1                	mov    ecx,edx
c000e0c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e0c8:	83 ec 08             	sub    esp,0x8
c000e0cb:	8d 44 24 38          	lea    eax,[esp+0x38]
c000e0cf:	50                   	push   eax
c000e0d0:	83 ec 24             	sub    esp,0x24
c000e0d3:	89 e0                	mov    eax,esp
c000e0d5:	89 c3                	mov    ebx,eax
c000e0d7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000e0db:	ba 09 00 00 00       	mov    edx,0x9
c000e0e0:	89 df                	mov    edi,ebx
c000e0e2:	89 c6                	mov    esi,eax
c000e0e4:	89 d1                	mov    ecx,edx
c000e0e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e0e8:	e8 43 9d 00 00       	call   c0017e30 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000e0ed:	83 c4 30             	add    esp,0x30
c000e0f0:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000e0f7:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000e0ff:	0f 84 4b ff ff ff    	je     c000e050 <ACPI::open(int, int, void*)+0x164>
c000e105:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000e110:	83 ec 0c             	sub    esp,0xc
c000e113:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e11a:	e8 42 8a ff ff       	call   c0006b61 <malloc>
c000e11f:	83 c4 10             	add    esp,0x10
c000e122:	89 c3                	mov    ebx,eax
c000e124:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c000e129:	83 ec 04             	sub    esp,0x4
c000e12c:	50                   	push   eax
c000e12d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e134:	53                   	push   ebx
c000e135:	e8 2c bd ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000e13a:	83 c4 10             	add    esp,0x10
c000e13d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000e144:	83 ec 0c             	sub    esp,0xc
c000e147:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e14e:	e8 41 c0 ff ff       	call   c000a194 <File::exists()>
c000e153:	83 c4 10             	add    esp,0x10
c000e156:	84 c0                	test   al,al
c000e158:	74 2a                	je     c000e184 <ACPI::open(int, int, void*)+0x298>
c000e15a:	83 ec 08             	sub    esp,0x8
c000e15d:	6a 01                	push   0x1
c000e15f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e166:	e8 54 3d 00 00       	call   c0011ebf <Thr::loadDLL(char const*, bool)>
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	83 ec 08             	sub    esp,0x8
c000e171:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e178:	50                   	push   eax
c000e179:	e8 72 3f 00 00       	call   c00120f0 <Thr::executeDLL(unsigned long, void*)>
c000e17e:	83 c4 10             	add    esp,0x10
c000e181:	8d 76 00             	lea    esi,[esi+0x0]
c000e184:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000e18c:	0f 84 be fe ff ff    	je     c000e050 <ACPI::open(int, int, void*)+0x164>
c000e192:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000e199:	8b 00                	mov    eax,DWORD PTR [eax]
c000e19b:	83 c0 08             	add    eax,0x8
c000e19e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1a0:	83 ec 0c             	sub    esp,0xc
c000e1a3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e1aa:	ff d0                	call   eax
c000e1ac:	83 c4 10             	add    esp,0x10
c000e1af:	e9 9c fe ff ff       	jmp    c000e050 <ACPI::open(int, int, void*)+0x164>
c000e1b4:	83 ec 0c             	sub    esp,0xc
c000e1b7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e1be:	50                   	push   eax
c000e1bf:	e8 74 dc 00 00       	call   c001be38 <LinkedList<Device>::~LinkedList()>
c000e1c4:	83 c4 10             	add    esp,0x10
c000e1c7:	8b 1d 28 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f428
c000e1cd:	83 ec 08             	sub    esp,0x8
c000e1d0:	6a 01                	push   0x1
c000e1d2:	68 bf d9 01 c0       	push   0xc001d9bf
c000e1d7:	e8 e3 3c 00 00       	call   c0011ebf <Thr::loadDLL(char const*, bool)>
c000e1dc:	83 c4 10             	add    esp,0x10
c000e1df:	83 ec 08             	sub    esp,0x8
c000e1e2:	53                   	push   ebx
c000e1e3:	50                   	push   eax
c000e1e4:	e8 07 3f 00 00       	call   c00120f0 <Thr::executeDLL(unsigned long, void*)>
c000e1e9:	83 c4 10             	add    esp,0x10
c000e1ec:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000e1f1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e1f7:	83 e0 04             	and    eax,0x4
c000e1fa:	84 c0                	test   al,al
c000e1fc:	0f 84 16 01 00 00    	je     c000e318 <ACPI::open(int, int, void*)+0x42c>
c000e202:	83 ec 0c             	sub    esp,0xc
c000e205:	68 dc d9 01 c0       	push   0xc001d9dc
c000e20a:	e8 ac 89 ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000e20f:	83 c4 10             	add    esp,0x10
c000e212:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000e21d:	83 ec 0c             	sub    esp,0xc
c000e220:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000e227:	e8 35 89 ff ff       	call   c0006b61 <malloc>
c000e22c:	83 c4 10             	add    esp,0x10
c000e22f:	89 c3                	mov    ebx,eax
c000e231:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c000e236:	83 ec 04             	sub    esp,0x4
c000e239:	50                   	push   eax
c000e23a:	68 f9 d9 01 c0       	push   0xc001d9f9
c000e23f:	53                   	push   ebx
c000e240:	e8 21 bc ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000e245:	83 c4 10             	add    esp,0x10
c000e248:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000e24f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e257:	74 1b                	je     c000e274 <ACPI::open(int, int, void*)+0x388>
c000e259:	83 ec 0c             	sub    esp,0xc
c000e25c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e263:	e8 2c bf ff ff       	call   c000a194 <File::exists()>
c000e268:	83 c4 10             	add    esp,0x10
c000e26b:	84 c0                	test   al,al
c000e26d:	74 05                	je     c000e274 <ACPI::open(int, int, void*)+0x388>
c000e26f:	b0 01                	mov    al,0x1
c000e271:	eb 05                	jmp    c000e278 <ACPI::open(int, int, void*)+0x38c>
c000e273:	90                   	nop
c000e274:	b0 00                	mov    al,0x0
c000e276:	66 90                	xchg   ax,ax
c000e278:	84 c0                	test   al,al
c000e27a:	74 28                	je     c000e2a4 <ACPI::open(int, int, void*)+0x3b8>
c000e27c:	83 ec 08             	sub    esp,0x8
c000e27f:	6a 01                	push   0x1
c000e281:	68 f9 d9 01 c0       	push   0xc001d9f9
c000e286:	e8 34 3c 00 00       	call   c0011ebf <Thr::loadDLL(char const*, bool)>
c000e28b:	83 c4 10             	add    esp,0x10
c000e28e:	83 ec 08             	sub    esp,0x8
c000e291:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000e298:	50                   	push   eax
c000e299:	e8 52 3e 00 00       	call   c00120f0 <Thr::executeDLL(unsigned long, void*)>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2a4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e2ac:	74 2a                	je     c000e2d8 <ACPI::open(int, int, void*)+0x3ec>
c000e2ae:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e2b6:	74 20                	je     c000e2d8 <ACPI::open(int, int, void*)+0x3ec>
c000e2b8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000e2bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2c1:	83 c0 08             	add    eax,0x8
c000e2c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2c6:	83 ec 0c             	sub    esp,0xc
c000e2c9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e2d0:	ff d0                	call   eax
c000e2d2:	83 c4 10             	add    esp,0x10
c000e2d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e2d8:	a1 28 1c 02 c0       	mov    eax,ds:0xc0021c28
c000e2dd:	83 ec 08             	sub    esp,0x8
c000e2e0:	68 16 da 01 c0       	push   0xc001da16
c000e2e5:	50                   	push   eax
c000e2e6:	e8 31 f2 ff ff       	call   c000d51c <findDataTable(unsigned char*, char*)>
c000e2eb:	83 c4 10             	add    esp,0x10
c000e2ee:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000e2f5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000e2fd:	74 19                	je     c000e318 <ACPI::open(int, int, void*)+0x42c>
c000e2ff:	83 ec 08             	sub    esp,0x8
c000e302:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000e309:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000e310:	e8 67 fb ff ff       	call   c000de7c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	b8 00 00 00 00       	mov    eax,0x0
c000e31d:	81 c4 70 01 00 00    	add    esp,0x170
c000e323:	5b                   	pop    ebx
c000e324:	5e                   	pop    esi
c000e325:	5f                   	pop    edi
c000e326:	c3                   	ret    
c000e327:	90                   	nop

c000e328 <CPU::close(int, int, void*)>:
c000e328:	31 c0                	xor    eax,eax
c000e32a:	c3                   	ret    
c000e32b:	90                   	nop

c000e32c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000e32c:	60                   	pusha  
c000e32d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e331:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e335:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e339:	9c                   	pushf  
c000e33a:	fa                   	cli    
c000e33b:	0f 09                	wbinvd 
c000e33d:	0f 30                	wrmsr  
c000e33f:	9d                   	popf   
c000e340:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e344:	89 02                	mov    DWORD PTR [edx],eax
c000e346:	61                   	popa   
c000e347:	c3                   	ret    

c000e348 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000e348:	60                   	pusha  
c000e349:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e34d:	9c                   	pushf  
c000e34e:	fa                   	cli    
c000e34f:	0f 09                	wbinvd 
c000e351:	31 c0                	xor    eax,eax
c000e353:	31 d2                	xor    edx,edx
c000e355:	0f 32                	rdmsr  
c000e357:	9d                   	popf   
c000e358:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e35c:	89 02                	mov    DWORD PTR [edx],eax
c000e35e:	61                   	popa   
c000e35f:	c3                   	ret    

c000e360 <CPU::AMD_K6_writeback(int, int, int)>:
c000e360:	56                   	push   esi
c000e361:	53                   	push   ebx
c000e362:	83 ec 10             	sub    esp,0x10
c000e365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e369:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000e36e:	75 5d                	jne    c000e3cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e370:	83 f8 08             	cmp    eax,0x8
c000e373:	75 09                	jne    c000e37e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000e375:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000e37a:	7e 13                	jle    c000e38f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e37c:	eb 30                	jmp    c000e3ae <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e37e:	83 f8 06             	cmp    eax,0x6
c000e381:	7c 4a                	jl     c000e3cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e383:	83 f8 07             	cmp    eax,0x7
c000e386:	7e 07                	jle    c000e38f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e388:	83 f8 09             	cmp    eax,0x9
c000e38b:	74 21                	je     c000e3ae <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e38d:	eb 3e                	jmp    c000e3cd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e38f:	89 e6                	mov    esi,esp
c000e391:	8b 1d 4c f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f44c
c000e397:	56                   	push   esi
c000e398:	c1 eb 15             	shr    ebx,0x15
c000e39b:	68 82 00 00 c0       	push   0xc0000082
c000e3a0:	83 e3 7e             	and    ebx,0x7e
c000e3a3:	e8 a0 ff ff ff       	call   c000e348 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e3a8:	56                   	push   esi
c000e3a9:	6a 00                	push   0x0
c000e3ab:	53                   	push   ebx
c000e3ac:	eb 12                	jmp    c000e3c0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000e3ae:	89 e3                	mov    ebx,esp
c000e3b0:	53                   	push   ebx
c000e3b1:	68 82 00 00 c0       	push   0xc0000082
c000e3b6:	e8 8d ff ff ff       	call   c000e348 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e3bb:	53                   	push   ebx
c000e3bc:	6a 00                	push   0x0
c000e3be:	6a 00                	push   0x0
c000e3c0:	68 82 00 00 c0       	push   0xc0000082
c000e3c5:	e8 62 ff ff ff       	call   c000e32c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000e3ca:	83 c4 18             	add    esp,0x18
c000e3cd:	83 c4 10             	add    esp,0x10
c000e3d0:	5b                   	pop    ebx
c000e3d1:	5e                   	pop    esi
c000e3d2:	c3                   	ret    
c000e3d3:	90                   	nop

c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000e3d4:	55                   	push   ebp
c000e3d5:	57                   	push   edi
c000e3d6:	56                   	push   esi
c000e3d7:	53                   	push   ebx
c000e3d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e3dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e3e0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3e4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000e3e8:	39 05 f0 ed 01 c0    	cmp    DWORD PTR ds:0xc001edf0,eax
c000e3ee:	75 23                	jne    c000e413 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000e3f0:	a1 8c 1e 02 c0       	mov    eax,ds:0xc0021e8c
c000e3f5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e3f9:	89 06                	mov    DWORD PTR [esi],eax
c000e3fb:	a1 88 1e 02 c0       	mov    eax,ds:0xc0021e88
c000e400:	89 07                	mov    DWORD PTR [edi],eax
c000e402:	a1 84 1e 02 c0       	mov    eax,ds:0xc0021e84
c000e407:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e40a:	a1 80 1e 02 c0       	mov    eax,ds:0xc0021e80
c000e40f:	89 02                	mov    DWORD PTR [edx],eax
c000e411:	eb 3f                	jmp    c000e452 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000e413:	31 c9                	xor    ecx,ecx
c000e415:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e419:	0f a2                	cpuid  
c000e41b:	89 06                	mov    DWORD PTR [esi],eax
c000e41d:	89 1f                	mov    DWORD PTR [edi],ebx
c000e41f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e423:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000e426:	89 10                	mov    DWORD PTR [eax],edx
c000e428:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e42c:	a3 f0 ed 01 c0       	mov    ds:0xc001edf0,eax
c000e431:	8b 06                	mov    eax,DWORD PTR [esi]
c000e433:	a3 8c 1e 02 c0       	mov    ds:0xc0021e8c,eax
c000e438:	8b 07                	mov    eax,DWORD PTR [edi]
c000e43a:	a3 88 1e 02 c0       	mov    ds:0xc0021e88,eax
c000e43f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e442:	a3 84 1e 02 c0       	mov    ds:0xc0021e84,eax
c000e447:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e44b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e44d:	a3 80 1e 02 c0       	mov    ds:0xc0021e80,eax
c000e452:	5b                   	pop    ebx
c000e453:	5e                   	pop    esi
c000e454:	5f                   	pop    edi
c000e455:	5d                   	pop    ebp
c000e456:	c3                   	ret    
c000e457:	90                   	nop

c000e458 <CPU::cpuidCheckEDX(unsigned int)>:
c000e458:	83 ec 10             	sub    esp,0x10
c000e45b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e45f:	50                   	push   eax
c000e460:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e464:	50                   	push   eax
c000e465:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e469:	50                   	push   eax
c000e46a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e46e:	50                   	push   eax
c000e46f:	6a 01                	push   0x1
c000e471:	e8 5e ff ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e476:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e47a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000e47e:	0f 95 c0             	setne  al
c000e481:	83 c4 24             	add    esp,0x24
c000e484:	c3                   	ret    
c000e485:	90                   	nop

c000e486 <CPU::cpuidCheckECX(unsigned int)>:
c000e486:	83 ec 10             	sub    esp,0x10
c000e489:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e48d:	50                   	push   eax
c000e48e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e492:	50                   	push   eax
c000e493:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e497:	50                   	push   eax
c000e498:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e49c:	50                   	push   eax
c000e49d:	6a 01                	push   0x1
c000e49f:	e8 30 ff ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e4a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4a8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e4ac:	0f 95 c0             	setne  al
c000e4af:	83 c4 24             	add    esp,0x24
c000e4b2:	c3                   	ret    
c000e4b3:	90                   	nop

c000e4b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000e4b4:	83 ec 10             	sub    esp,0x10
c000e4b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4bb:	50                   	push   eax
c000e4bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4c0:	50                   	push   eax
c000e4c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4c5:	50                   	push   eax
c000e4c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4ca:	50                   	push   eax
c000e4cb:	6a 07                	push   0x7
c000e4cd:	e8 02 ff ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e4d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4d6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000e4da:	0f 95 c0             	setne  al
c000e4dd:	83 c4 24             	add    esp,0x24
c000e4e0:	c3                   	ret    
c000e4e1:	90                   	nop

c000e4e2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000e4e2:	83 ec 10             	sub    esp,0x10
c000e4e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4e9:	50                   	push   eax
c000e4ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4ee:	50                   	push   eax
c000e4ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4f3:	50                   	push   eax
c000e4f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4f8:	50                   	push   eax
c000e4f9:	6a 07                	push   0x7
c000e4fb:	e8 d4 fe ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e500:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e504:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e508:	0f 95 c0             	setne  al
c000e50b:	83 c4 24             	add    esp,0x24
c000e50e:	c3                   	ret    
c000e50f:	90                   	nop

c000e510 <CPU::CPU()>:
c000e510:	83 ec 0c             	sub    esp,0xc
c000e513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e517:	83 ec 08             	sub    esp,0x8
c000e51a:	68 39 db 01 c0       	push   0xc001db39
c000e51f:	50                   	push   eax
c000e520:	e8 a3 c9 ff ff       	call   c000aec8 <Device::Device(char const*)>
c000e525:	83 c4 10             	add    esp,0x10
c000e528:	ba c0 db 01 c0       	mov    edx,0xc001dbc0
c000e52d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e531:	89 10                	mov    DWORD PTR [eax],edx
c000e533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e537:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000e541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e545:	05 78 01 00 00       	add    eax,0x178
c000e54a:	83 ec 0c             	sub    esp,0xc
c000e54d:	50                   	push   eax
c000e54e:	e8 8f 7e ff ff       	call   c00063e2 <GDT::GDT()>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e55a:	05 7c 09 00 00       	add    eax,0x97c
c000e55f:	83 ec 0c             	sub    esp,0xc
c000e562:	50                   	push   eax
c000e563:	e8 f4 80 ff ff       	call   c000665c <IDT::IDT()>
c000e568:	83 c4 10             	add    esp,0x10
c000e56b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e56f:	05 7c 11 00 00       	add    eax,0x117c
c000e574:	83 ec 0c             	sub    esp,0xc
c000e577:	50                   	push   eax
c000e578:	e8 63 9a ff ff       	call   c0007fe0 <TSS::TSS()>
c000e57d:	83 c4 10             	add    esp,0x10
c000e580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e584:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000e58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e58f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000e599:	90                   	nop
c000e59a:	83 c4 0c             	add    esp,0xc
c000e59d:	c3                   	ret    

c000e59e <CPU::displayFeatures()>:
c000e59e:	c3                   	ret    
c000e59f:	90                   	nop

c000e5a0 <CPU::detectFeatures()>:
c000e5a0:	55                   	push   ebp
c000e5a1:	57                   	push   edi
c000e5a2:	56                   	push   esi
c000e5a3:	53                   	push   ebx
c000e5a4:	83 ec 30             	sub    esp,0x30
c000e5a7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e5ab:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000e5b5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000e5bc:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000e5c2:	6a 0d                	push   0xd
c000e5c4:	6a 00                	push   0x0
c000e5c6:	55                   	push   ebp
c000e5c7:	e8 24 1f ff ff       	call   c00004f0 <memset>
c000e5cc:	83 c4 10             	add    esp,0x10
c000e5cf:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000e5d4:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000e5db:	0f 84 d5 05 00 00    	je     c000ebb6 <CPU::detectFeatures()+0x616>
c000e5e1:	83 ec 0c             	sub    esp,0xc
c000e5e4:	89 ef                	mov    edi,ebp
c000e5e6:	6a 10                	push   0x10
c000e5e8:	e8 6b fe ff ff       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000e5ed:	83 e0 01             	and    eax,0x1
c000e5f0:	8d 14 00             	lea    edx,[eax+eax*1]
c000e5f3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e5f9:	83 e0 fd             	and    eax,0xfffffffd
c000e5fc:	09 d0                	or     eax,edx
c000e5fe:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e604:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000e60b:	e8 48 fe ff ff       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000e610:	83 e0 01             	and    eax,0x1
c000e613:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e61a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e620:	83 e0 fb             	and    eax,0xfffffffb
c000e623:	09 d0                	or     eax,edx
c000e625:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e62b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e632:	e8 21 fe ff ff       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000e637:	83 e0 01             	and    eax,0x1
c000e63a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e641:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e647:	83 e0 f7             	and    eax,0xfffffff7
c000e64a:	09 d0                	or     eax,edx
c000e64c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e652:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000e659:	e8 fa fd ff ff       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000e65e:	83 e0 01             	and    eax,0x1
c000e661:	c1 e0 04             	shl    eax,0x4
c000e664:	88 c2                	mov    dl,al
c000e666:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e66c:	83 e0 ef             	and    eax,0xffffffef
c000e66f:	09 d0                	or     eax,edx
c000e671:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e677:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000e67e:	e8 d5 fd ff ff       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000e683:	83 e0 01             	and    eax,0x1
c000e686:	c1 e0 05             	shl    eax,0x5
c000e689:	88 c2                	mov    dl,al
c000e68b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e691:	83 e0 df             	and    eax,0xffffffdf
c000e694:	09 d0                	or     eax,edx
c000e696:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e69c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e6a3:	e8 b0 fd ff ff       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000e6a8:	83 e0 01             	and    eax,0x1
c000e6ab:	8d 14 00             	lea    edx,[eax+eax*1]
c000e6ae:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e6b4:	83 e0 fd             	and    eax,0xfffffffd
c000e6b7:	09 d0                	or     eax,edx
c000e6b9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e6bf:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000e6c6:	e8 8d fd ff ff       	call   c000e458 <CPU::cpuidCheckEDX(unsigned int)>
c000e6cb:	83 e0 01             	and    eax,0x1
c000e6ce:	c1 e0 06             	shl    eax,0x6
c000e6d1:	88 c2                	mov    dl,al
c000e6d3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e6d9:	83 e0 bf             	and    eax,0xffffffbf
c000e6dc:	09 d0                	or     eax,edx
c000e6de:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e6e4:	58                   	pop    eax
c000e6e5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e6e9:	50                   	push   eax
c000e6ea:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e6ee:	50                   	push   eax
c000e6ef:	8d 74 24 28          	lea    esi,[esp+0x28]
c000e6f3:	56                   	push   esi
c000e6f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e6f8:	50                   	push   eax
c000e6f9:	6a 00                	push   0x0
c000e6fb:	e8 d4 fc ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e700:	b8 04 00 00 00       	mov    eax,0x4
c000e705:	89 c1                	mov    ecx,eax
c000e707:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e709:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000e70f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e713:	89 c1                	mov    ecx,eax
c000e715:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e717:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000e71d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000e721:	89 c1                	mov    ecx,eax
c000e723:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e725:	83 c4 18             	add    esp,0x18
c000e728:	68 48 da 01 c0       	push   0xc001da48
c000e72d:	55                   	push   ebp
c000e72e:	e8 cd 1f ff ff       	call   c0000700 <strcmp>
c000e733:	83 c4 10             	add    esp,0x10
c000e736:	85 c0                	test   eax,eax
c000e738:	75 0f                	jne    c000e749 <CPU::detectFeatures()+0x1a9>
c000e73a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000e744:	e9 22 02 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e749:	50                   	push   eax
c000e74a:	50                   	push   eax
c000e74b:	68 55 da 01 c0       	push   0xc001da55
c000e750:	55                   	push   ebp
c000e751:	e8 aa 1f ff ff       	call   c0000700 <strcmp>
c000e756:	83 c4 10             	add    esp,0x10
c000e759:	85 c0                	test   eax,eax
c000e75b:	74 dd                	je     c000e73a <CPU::detectFeatures()+0x19a>
c000e75d:	50                   	push   eax
c000e75e:	50                   	push   eax
c000e75f:	68 62 da 01 c0       	push   0xc001da62
c000e764:	55                   	push   ebp
c000e765:	e8 96 1f ff ff       	call   c0000700 <strcmp>
c000e76a:	83 c4 10             	add    esp,0x10
c000e76d:	85 c0                	test   eax,eax
c000e76f:	74 2a                	je     c000e79b <CPU::detectFeatures()+0x1fb>
c000e771:	50                   	push   eax
c000e772:	50                   	push   eax
c000e773:	68 6f da 01 c0       	push   0xc001da6f
c000e778:	55                   	push   ebp
c000e779:	e8 82 1f ff ff       	call   c0000700 <strcmp>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	85 c0                	test   eax,eax
c000e783:	74 16                	je     c000e79b <CPU::detectFeatures()+0x1fb>
c000e785:	50                   	push   eax
c000e786:	50                   	push   eax
c000e787:	68 7c da 01 c0       	push   0xc001da7c
c000e78c:	55                   	push   ebp
c000e78d:	e8 6e 1f ff ff       	call   c0000700 <strcmp>
c000e792:	83 c4 10             	add    esp,0x10
c000e795:	85 c0                	test   eax,eax
c000e797:	74 48                	je     c000e7e1 <CPU::detectFeatures()+0x241>
c000e799:	eb 0f                	jmp    c000e7aa <CPU::detectFeatures()+0x20a>
c000e79b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000e7a5:	e9 c1 01 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e7aa:	50                   	push   eax
c000e7ab:	50                   	push   eax
c000e7ac:	68 89 da 01 c0       	push   0xc001da89
c000e7b1:	55                   	push   ebp
c000e7b2:	e8 49 1f ff ff       	call   c0000700 <strcmp>
c000e7b7:	83 c4 10             	add    esp,0x10
c000e7ba:	85 c0                	test   eax,eax
c000e7bc:	74 23                	je     c000e7e1 <CPU::detectFeatures()+0x241>
c000e7be:	57                   	push   edi
c000e7bf:	57                   	push   edi
c000e7c0:	68 96 da 01 c0       	push   0xc001da96
c000e7c5:	55                   	push   ebp
c000e7c6:	e8 35 1f ff ff       	call   c0000700 <strcmp>
c000e7cb:	83 c4 10             	add    esp,0x10
c000e7ce:	85 c0                	test   eax,eax
c000e7d0:	75 1e                	jne    c000e7f0 <CPU::detectFeatures()+0x250>
c000e7d2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000e7dc:	e9 8a 01 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e7e1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000e7eb:	e9 7b 01 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e7f0:	56                   	push   esi
c000e7f1:	56                   	push   esi
c000e7f2:	68 a3 da 01 c0       	push   0xc001daa3
c000e7f7:	55                   	push   ebp
c000e7f8:	e8 03 1f ff ff       	call   c0000700 <strcmp>
c000e7fd:	83 c4 10             	add    esp,0x10
c000e800:	85 c0                	test   eax,eax
c000e802:	75 0f                	jne    c000e813 <CPU::detectFeatures()+0x273>
c000e804:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000e80e:	e9 58 01 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e813:	51                   	push   ecx
c000e814:	51                   	push   ecx
c000e815:	68 62 da 01 c0       	push   0xc001da62
c000e81a:	55                   	push   ebp
c000e81b:	e8 e0 1e ff ff       	call   c0000700 <strcmp>
c000e820:	83 c4 10             	add    esp,0x10
c000e823:	85 c0                	test   eax,eax
c000e825:	75 0f                	jne    c000e836 <CPU::detectFeatures()+0x296>
c000e827:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000e831:	e9 35 01 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e836:	52                   	push   edx
c000e837:	52                   	push   edx
c000e838:	68 b0 da 01 c0       	push   0xc001dab0
c000e83d:	55                   	push   ebp
c000e83e:	e8 bd 1e ff ff       	call   c0000700 <strcmp>
c000e843:	83 c4 10             	add    esp,0x10
c000e846:	85 c0                	test   eax,eax
c000e848:	75 0f                	jne    c000e859 <CPU::detectFeatures()+0x2b9>
c000e84a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000e854:	e9 12 01 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e859:	50                   	push   eax
c000e85a:	50                   	push   eax
c000e85b:	68 bd da 01 c0       	push   0xc001dabd
c000e860:	55                   	push   ebp
c000e861:	e8 9a 1e ff ff       	call   c0000700 <strcmp>
c000e866:	83 c4 10             	add    esp,0x10
c000e869:	85 c0                	test   eax,eax
c000e86b:	75 0f                	jne    c000e87c <CPU::detectFeatures()+0x2dc>
c000e86d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000e877:	e9 ef 00 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e87c:	50                   	push   eax
c000e87d:	50                   	push   eax
c000e87e:	68 ca da 01 c0       	push   0xc001daca
c000e883:	55                   	push   ebp
c000e884:	e8 77 1e ff ff       	call   c0000700 <strcmp>
c000e889:	83 c4 10             	add    esp,0x10
c000e88c:	85 c0                	test   eax,eax
c000e88e:	75 0f                	jne    c000e89f <CPU::detectFeatures()+0x2ff>
c000e890:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000e89a:	e9 cc 00 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e89f:	50                   	push   eax
c000e8a0:	50                   	push   eax
c000e8a1:	68 d7 da 01 c0       	push   0xc001dad7
c000e8a6:	55                   	push   ebp
c000e8a7:	e8 54 1e ff ff       	call   c0000700 <strcmp>
c000e8ac:	83 c4 10             	add    esp,0x10
c000e8af:	85 c0                	test   eax,eax
c000e8b1:	75 0f                	jne    c000e8c2 <CPU::detectFeatures()+0x322>
c000e8b3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000e8bd:	e9 a9 00 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e8c2:	50                   	push   eax
c000e8c3:	50                   	push   eax
c000e8c4:	68 e4 da 01 c0       	push   0xc001dae4
c000e8c9:	55                   	push   ebp
c000e8ca:	e8 31 1e ff ff       	call   c0000700 <strcmp>
c000e8cf:	83 c4 10             	add    esp,0x10
c000e8d2:	85 c0                	test   eax,eax
c000e8d4:	75 0f                	jne    c000e8e5 <CPU::detectFeatures()+0x345>
c000e8d6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000e8e0:	e9 86 00 00 00       	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e8e5:	50                   	push   eax
c000e8e6:	50                   	push   eax
c000e8e7:	68 f1 da 01 c0       	push   0xc001daf1
c000e8ec:	55                   	push   ebp
c000e8ed:	e8 0e 1e ff ff       	call   c0000700 <strcmp>
c000e8f2:	83 c4 10             	add    esp,0x10
c000e8f5:	85 c0                	test   eax,eax
c000e8f7:	75 0c                	jne    c000e905 <CPU::detectFeatures()+0x365>
c000e8f9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000e903:	eb 66                	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e905:	50                   	push   eax
c000e906:	50                   	push   eax
c000e907:	68 fe da 01 c0       	push   0xc001dafe
c000e90c:	55                   	push   ebp
c000e90d:	e8 ee 1d ff ff       	call   c0000700 <strcmp>
c000e912:	83 c4 10             	add    esp,0x10
c000e915:	85 c0                	test   eax,eax
c000e917:	75 0c                	jne    c000e925 <CPU::detectFeatures()+0x385>
c000e919:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000e923:	eb 46                	jmp    c000e96b <CPU::detectFeatures()+0x3cb>
c000e925:	57                   	push   edi
c000e926:	57                   	push   edi
c000e927:	68 0b db 01 c0       	push   0xc001db0b
c000e92c:	55                   	push   ebp
c000e92d:	e8 ce 1d ff ff       	call   c0000700 <strcmp>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	85 c0                	test   eax,eax
c000e937:	74 e0                	je     c000e919 <CPU::detectFeatures()+0x379>
c000e939:	56                   	push   esi
c000e93a:	56                   	push   esi
c000e93b:	68 18 db 01 c0       	push   0xc001db18
c000e940:	55                   	push   ebp
c000e941:	e8 ba 1d ff ff       	call   c0000700 <strcmp>
c000e946:	83 c4 10             	add    esp,0x10
c000e949:	85 c0                	test   eax,eax
c000e94b:	74 cc                	je     c000e919 <CPU::detectFeatures()+0x379>
c000e94d:	51                   	push   ecx
c000e94e:	51                   	push   ecx
c000e94f:	68 25 db 01 c0       	push   0xc001db25
c000e954:	55                   	push   ebp
c000e955:	e8 a6 1d ff ff       	call   c0000700 <strcmp>
c000e95a:	83 c4 10             	add    esp,0x10
c000e95d:	85 c0                	test   eax,eax
c000e95f:	74 b8                	je     c000e919 <CPU::detectFeatures()+0x379>
c000e961:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000e96b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000e970:	0f 86 be 00 00 00    	jbe    c000ea34 <CPU::detectFeatures()+0x494>
c000e976:	83 ec 0c             	sub    esp,0xc
c000e979:	68 80 00 00 00       	push   0x80
c000e97e:	e8 31 fb ff ff       	call   c000e4b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e983:	83 e0 01             	and    eax,0x1
c000e986:	c1 e0 06             	shl    eax,0x6
c000e989:	88 c2                	mov    dl,al
c000e98b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e991:	83 e0 bf             	and    eax,0xffffffbf
c000e994:	09 d0                	or     eax,edx
c000e996:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e99c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000e9a3:	e8 0c fb ff ff       	call   c000e4b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e9a8:	83 e0 01             	and    eax,0x1
c000e9ab:	c1 e0 04             	shl    eax,0x4
c000e9ae:	88 c2                	mov    dl,al
c000e9b0:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e9b6:	83 e0 ef             	and    eax,0xffffffef
c000e9b9:	09 d0                	or     eax,edx
c000e9bb:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e9c1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000e9c8:	e8 e7 fa ff ff       	call   c000e4b4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e9cd:	c1 e0 07             	shl    eax,0x7
c000e9d0:	88 c2                	mov    dl,al
c000e9d2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e9d8:	83 e0 7f             	and    eax,0x7f
c000e9db:	09 d0                	or     eax,edx
c000e9dd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e9e3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000e9ea:	e8 f3 fa ff ff       	call   c000e4e2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000e9ef:	83 e0 01             	and    eax,0x1
c000e9f2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9f9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e9ff:	83 e0 f7             	and    eax,0xfffffff7
c000ea02:	09 d0                	or     eax,edx
c000ea04:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ea0a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000ea11:	e8 cc fa ff ff       	call   c000e4e2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ea16:	83 c4 10             	add    esp,0x10
c000ea19:	83 e0 01             	and    eax,0x1
c000ea1c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea23:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ea29:	83 e0 fb             	and    eax,0xfffffffb
c000ea2c:	09 d0                	or     eax,edx
c000ea2e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ea34:	83 ec 0c             	sub    esp,0xc
c000ea37:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ea3b:	50                   	push   eax
c000ea3c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ea40:	50                   	push   eax
c000ea41:	8d 74 24 28          	lea    esi,[esp+0x28]
c000ea45:	56                   	push   esi
c000ea46:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ea4a:	50                   	push   eax
c000ea4b:	6a 01                	push   0x1
c000ea4d:	e8 82 f9 ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea52:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea56:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000ea5c:	88 ca                	mov    dl,cl
c000ea5e:	83 e0 f0             	and    eax,0xfffffff0
c000ea61:	83 e2 0f             	and    edx,0xf
c000ea64:	09 d0                	or     eax,edx
c000ea66:	88 ca                	mov    dl,cl
c000ea68:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000ea6e:	c0 ea 04             	shr    dl,0x4
c000ea71:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000ea75:	0f b6 c2             	movzx  eax,dl
c000ea78:	83 c4 20             	add    esp,0x20
c000ea7b:	c1 e0 06             	shl    eax,0x6
c000ea7e:	89 c7                	mov    edi,eax
c000ea80:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ea86:	66 25 3f c0          	and    ax,0xc03f
c000ea8a:	09 f8                	or     eax,edi
c000ea8c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000ea93:	89 c8                	mov    eax,ecx
c000ea95:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000ea9c:	c1 e8 08             	shr    eax,0x8
c000ea9f:	83 e5 3f             	and    ebp,0x3f
c000eaa2:	83 e0 0f             	and    eax,0xf
c000eaa5:	89 c7                	mov    edi,eax
c000eaa7:	c1 e7 06             	shl    edi,0x6
c000eaaa:	09 ef                	or     edi,ebp
c000eaac:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000eab3:	89 fa                	mov    edx,edi
c000eab5:	83 e5 c0             	and    ebp,0xffffffc0
c000eab8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000eabe:	88 c2                	mov    dl,al
c000eac0:	c0 ea 02             	shr    dl,0x2
c000eac3:	89 d7                	mov    edi,edx
c000eac5:	09 ef                	or     edi,ebp
c000eac7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000eacd:	89 fa                	mov    edx,edi
c000eacf:	83 e5 cf             	and    ebp,0xffffffcf
c000ead2:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000ead8:	89 cf                	mov    edi,ecx
c000eada:	c1 ef 0c             	shr    edi,0xc
c000eadd:	83 e7 03             	and    edi,0x3
c000eae0:	c1 e7 04             	shl    edi,0x4
c000eae3:	09 ef                	or     edi,ebp
c000eae5:	3c 06                	cmp    al,0x6
c000eae7:	89 fa                	mov    edx,edi
c000eae9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000eaef:	74 04                	je     c000eaf5 <CPU::detectFeatures()+0x555>
c000eaf1:	3c 0f                	cmp    al,0xf
c000eaf3:	75 5c                	jne    c000eb51 <CPU::detectFeatures()+0x5b1>
c000eaf5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000eaf9:	89 cf                	mov    edi,ecx
c000eafb:	c1 ef 10             	shr    edi,0x10
c000eafe:	c1 e7 04             	shl    edi,0x4
c000eb01:	09 fa                	or     edx,edi
c000eb03:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000eb09:	0f b6 d2             	movzx  edx,dl
c000eb0c:	66 81 e7 3f c0       	and    di,0xc03f
c000eb11:	c1 e2 06             	shl    edx,0x6
c000eb14:	09 fa                	or     edx,edi
c000eb16:	3c 0f                	cmp    al,0xf
c000eb18:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000eb1f:	75 30                	jne    c000eb51 <CPU::detectFeatures()+0x5b1>
c000eb21:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000eb27:	c1 e9 14             	shr    ecx,0x14
c000eb2a:	83 e0 3f             	and    eax,0x3f
c000eb2d:	83 c1 0f             	add    ecx,0xf
c000eb30:	88 ca                	mov    dl,cl
c000eb32:	c0 e9 02             	shr    cl,0x2
c000eb35:	c1 e2 06             	shl    edx,0x6
c000eb38:	09 d0                	or     eax,edx
c000eb3a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000eb40:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000eb46:	83 e0 c0             	and    eax,0xffffffc0
c000eb49:	09 c1                	or     ecx,eax
c000eb4b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000eb51:	83 ec 0c             	sub    esp,0xc
c000eb54:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000eb5b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb5f:	50                   	push   eax
c000eb60:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000eb64:	55                   	push   ebp
c000eb65:	56                   	push   esi
c000eb66:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000eb6a:	57                   	push   edi
c000eb6b:	68 00 00 00 80       	push   0x80000000
c000eb70:	e8 5f f8 ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eb75:	83 c4 20             	add    esp,0x20
c000eb78:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000eb80:	76 22                	jbe    c000eba4 <CPU::detectFeatures()+0x604>
c000eb82:	83 ec 0c             	sub    esp,0xc
c000eb85:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb89:	50                   	push   eax
c000eb8a:	55                   	push   ebp
c000eb8b:	56                   	push   esi
c000eb8c:	57                   	push   edi
c000eb8d:	68 01 00 00 80       	push   0x80000001
c000eb92:	e8 3d f8 ff ff       	call   c000e3d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eb97:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000eba1:	83 c4 20             	add    esp,0x20
c000eba4:	52                   	push   edx
c000eba5:	52                   	push   edx
c000eba6:	68 31 db 01 c0       	push   0xc001db31
c000ebab:	53                   	push   ebx
c000ebac:	e8 09 c3 ff ff       	call   c000aeba <Device::setName(char const*)>
c000ebb1:	83 c4 10             	add    esp,0x10
c000ebb4:	eb 67                	jmp    c000ec1d <CPU::detectFeatures()+0x67d>
c000ebb6:	50                   	push   eax
c000ebb7:	50                   	push   eax
c000ebb8:	68 96 da 01 c0       	push   0xc001da96
c000ebbd:	55                   	push   ebp
c000ebbe:	e8 5d 1a ff ff       	call   c0000620 <strcpy>
c000ebc3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000ebcd:	e8 11 16 ff ff       	call   c00001e3 <is486>
c000ebd2:	83 c4 10             	add    esp,0x10
c000ebd5:	85 c0                	test   eax,eax
c000ebd7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ebdd:	74 1d                	je     c000ebfc <CPU::detectFeatures()+0x65c>
c000ebdf:	83 c8 07             	or     eax,0x7
c000ebe2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ebe8:	0f 20 c0             	mov    eax,cr0
c000ebeb:	83 e0 14             	and    eax,0x14
c000ebee:	83 f8 04             	cmp    eax,0x4
c000ebf1:	75 0e                	jne    c000ec01 <CPU::detectFeatures()+0x661>
c000ebf3:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000ebfa:	eb 21                	jmp    c000ec1d <CPU::detectFeatures()+0x67d>
c000ebfc:	83 e0 f8             	and    eax,0xfffffff8
c000ebff:	eb e1                	jmp    c000ebe2 <CPU::detectFeatures()+0x642>
c000ec01:	e8 b8 15 ff ff       	call   c00001be <hasLegacyFPU>
c000ec06:	83 e0 01             	and    eax,0x1
c000ec09:	8d 14 00             	lea    edx,[eax+eax*1]
c000ec0c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ec12:	83 e0 fd             	and    eax,0xfffffffd
c000ec15:	09 d0                	or     eax,edx
c000ec17:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ec1d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ec24:	74 0e                	je     c000ec34 <CPU::detectFeatures()+0x694>
c000ec26:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000ec2b:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000ec32:	eb 20                	jmp    c000ec54 <CPU::detectFeatures()+0x6b4>
c000ec34:	e8 85 15 ff ff       	call   c00001be <hasLegacyFPU>
c000ec39:	83 e0 01             	and    eax,0x1
c000ec3c:	8d 14 00             	lea    edx,[eax+eax*1]
c000ec3f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ec45:	83 e0 fd             	and    eax,0xfffffffd
c000ec48:	09 d0                	or     eax,edx
c000ec4a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ec50:	a8 02                	test   al,0x2
c000ec52:	75 d2                	jne    c000ec26 <CPU::detectFeatures()+0x686>
c000ec54:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ec5b:	83 c4 2c             	add    esp,0x2c
c000ec5e:	5b                   	pop    ebx
c000ec5f:	5e                   	pop    esi
c000ec60:	5f                   	pop    edi
c000ec61:	5d                   	pop    ebp
c000ec62:	c3                   	ret    
c000ec63:	90                   	nop

c000ec64 <CPU::setupSMEP()>:
c000ec64:	0f 20 e0             	mov    eax,cr4
c000ec67:	0d 00 00 10 00       	or     eax,0x100000
c000ec6c:	0f 22 e0             	mov    cr4,eax
c000ec6f:	c3                   	ret    

c000ec70 <CPU::setupUMIP()>:
c000ec70:	0f 20 e0             	mov    eax,cr4
c000ec73:	80 cc 08             	or     ah,0x8
c000ec76:	0f 22 e0             	mov    cr4,eax
c000ec79:	c3                   	ret    

c000ec7a <CPU::setupTSC()>:
c000ec7a:	0f 20 e0             	mov    eax,cr4
c000ec7d:	83 c8 04             	or     eax,0x4
c000ec80:	0f 22 e0             	mov    cr4,eax
c000ec83:	c3                   	ret    

c000ec84 <CPU::setupLargePages()>:
c000ec84:	0f 20 e0             	mov    eax,cr4
c000ec87:	83 c8 10             	or     eax,0x10
c000ec8a:	0f 22 e0             	mov    cr4,eax
c000ec8d:	c3                   	ret    

c000ec8e <CPU::setupPAT()>:
c000ec8e:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000ec93:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ec9a:	74 2c                	je     c000ecc8 <CPU::setupPAT()+0x3a>
c000ec9c:	53                   	push   ebx
c000ec9d:	83 ec 10             	sub    esp,0x10
c000eca0:	68 77 02 00 00       	push   0x277
c000eca5:	50                   	push   eax
c000eca6:	e8 af 74 ff ff       	call   c000615a <Computer::rdmsr(unsigned int)>
c000ecab:	83 e2 f8             	and    edx,0xfffffff8
c000ecae:	83 ca 01             	or     edx,0x1
c000ecb1:	52                   	push   edx
c000ecb2:	50                   	push   eax
c000ecb3:	68 77 02 00 00       	push   0x277
c000ecb8:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000ecbe:	e8 c3 74 ff ff       	call   c0006186 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ecc3:	83 c4 28             	add    esp,0x28
c000ecc6:	5b                   	pop    ebx
c000ecc7:	c3                   	ret    
c000ecc8:	c3                   	ret    
c000ecc9:	90                   	nop

c000ecca <CPU::setupMTRR()>:
c000ecca:	c3                   	ret    
c000eccb:	90                   	nop

c000eccc <CPU::setupGlobalPages()>:
c000eccc:	0f 20 e0             	mov    eax,cr4
c000eccf:	0c 80                	or     al,0x80
c000ecd1:	0f 22 e0             	mov    cr4,eax
c000ecd4:	c3                   	ret    
c000ecd5:	90                   	nop

c000ecd6 <CPU::allowUsermodeDataAccess()>:
c000ecd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecda:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ece1:	74 03                	je     c000ece6 <CPU::allowUsermodeDataAccess()+0x10>
c000ece3:	0f 01 cb             	stac   
c000ece6:	c3                   	ret    
c000ece7:	90                   	nop

c000ece8 <CPU::prohibitUsermodeDataAccess()>:
c000ece8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecec:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ecf3:	74 03                	je     c000ecf8 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ecf5:	0f 01 ca             	clac   
c000ecf8:	c3                   	ret    
c000ecf9:	90                   	nop

c000ecfa <CPU::setupSMAP()>:
c000ecfa:	0f 20 e0             	mov    eax,cr4
c000ecfd:	0d 00 00 20 00       	or     eax,0x200000
c000ed02:	0f 22 e0             	mov    cr4,eax
c000ed05:	eb e1                	jmp    c000ece8 <CPU::prohibitUsermodeDataAccess()>
c000ed07:	90                   	nop

c000ed08 <CPU::setupFeatures()>:
c000ed08:	53                   	push   ebx
c000ed09:	83 ec 08             	sub    esp,0x8
c000ed0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed10:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ed17:	74 18                	je     c000ed31 <CPU::setupFeatures()+0x29>
c000ed19:	83 ec 0c             	sub    esp,0xc
c000ed1c:	68 3d db 01 c0       	push   0xc001db3d
c000ed21:	e8 ca ab ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000ed26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed29:	e8 42 ff ff ff       	call   c000ec70 <CPU::setupUMIP()>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ed38:	74 18                	je     c000ed52 <CPU::setupFeatures()+0x4a>
c000ed3a:	83 ec 0c             	sub    esp,0xc
c000ed3d:	68 47 db 01 c0       	push   0xc001db47
c000ed42:	e8 a9 ab ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000ed47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed4a:	e8 2b ff ff ff       	call   c000ec7a <CPU::setupTSC()>
c000ed4f:	83 c4 10             	add    esp,0x10
c000ed52:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ed59:	74 18                	je     c000ed73 <CPU::setupFeatures()+0x6b>
c000ed5b:	83 ec 0c             	sub    esp,0xc
c000ed5e:	68 50 db 01 c0       	push   0xc001db50
c000ed63:	e8 88 ab ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000ed68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed6b:	e8 14 ff ff ff       	call   c000ec84 <CPU::setupLargePages()>
c000ed70:	83 c4 10             	add    esp,0x10
c000ed73:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ed7a:	74 18                	je     c000ed94 <CPU::setupFeatures()+0x8c>
c000ed7c:	83 ec 0c             	sub    esp,0xc
c000ed7f:	68 59 db 01 c0       	push   0xc001db59
c000ed84:	e8 67 ab ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000ed89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed8c:	e8 3b ff ff ff       	call   c000eccc <CPU::setupGlobalPages()>
c000ed91:	83 c4 10             	add    esp,0x10
c000ed94:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000ed9b:	74 18                	je     c000edb5 <CPU::setupFeatures()+0xad>
c000ed9d:	83 ec 0c             	sub    esp,0xc
c000eda0:	68 6b db 01 c0       	push   0xc001db6b
c000eda5:	e8 46 ab ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000edaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000edad:	e8 dc fe ff ff       	call   c000ec8e <CPU::setupPAT()>
c000edb2:	83 c4 10             	add    esp,0x10
c000edb5:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000edbc:	74 11                	je     c000edcf <CPU::setupFeatures()+0xc7>
c000edbe:	c7 44 24 10 74 db 01 c0 	mov    DWORD PTR [esp+0x10],0xc001db74
c000edc6:	83 c4 08             	add    esp,0x8
c000edc9:	5b                   	pop    ebx
c000edca:	e9 21 ab ff ff       	jmp    c00098f0 <Dbg::kprintf(char const*, ...)>
c000edcf:	83 c4 08             	add    esp,0x8
c000edd2:	5b                   	pop    ebx
c000edd3:	c3                   	ret    

c000edd4 <CPU::open(int, int, void*)>:
c000edd4:	57                   	push   edi
c000edd5:	56                   	push   esi
c000edd6:	53                   	push   ebx
c000edd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eddb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eddf:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000ede5:	83 ec 0c             	sub    esp,0xc
c000ede8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000edee:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000edf4:	50                   	push   eax
c000edf5:	e8 4a 76 ff ff       	call   c0006444 <GDT::setup()>
c000edfa:	83 c4 0c             	add    esp,0xc
c000edfd:	6a 00                	push   0x0
c000edff:	68 ef be ad de       	push   0xdeadbeef
c000ee04:	57                   	push   edi
c000ee05:	e8 1a 92 ff ff       	call   c0008024 <TSS::setup(unsigned long, unsigned long)>
c000ee0a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ee0d:	e8 f2 91 ff ff       	call   c0008004 <TSS::flush()>
c000ee12:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000ee18:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee1b:	e8 b2 78 ff ff       	call   c00066d2 <IDT::setup()>
c000ee20:	b8 00 04 00 00       	mov    eax,0x400
c000ee25:	0f 23 f8             	mov    db7,eax
c000ee28:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000ee32:	e8 f7 80 ff ff       	call   c0006f2e <Phys::allocatePage()>
c000ee37:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000ee3d:	89 30                	mov    DWORD PTR [eax],esi
c000ee3f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000ee45:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ee48:	58                   	pop    eax
c000ee49:	5a                   	pop    edx
c000ee4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000ee50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee54:	e8 b5 a1 ff ff       	call   c000900e <VAS::setCPUSpecific(unsigned long)>
c000ee59:	c7 04 24 7e db 01 c0 	mov    DWORD PTR [esp],0xc001db7e
c000ee60:	e8 56 7d ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000ee65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee68:	e8 33 f7 ff ff       	call   c000e5a0 <CPU::detectFeatures()>
c000ee6d:	c7 04 24 a1 db 01 c0 	mov    DWORD PTR [esp],0xc001dba1
c000ee74:	e8 42 7d ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000ee79:	e8 d8 57 00 00       	call   c0014656 <HalInitialise()>
c000ee7e:	a1 40 f4 01 c0       	mov    eax,ds:0xc001f440
c000ee83:	83 e0 10             	and    eax,0x10
c000ee86:	83 f8 01             	cmp    eax,0x1
c000ee89:	19 c0                	sbb    eax,eax
c000ee8b:	83 e0 46             	and    eax,0x46
c000ee8e:	83 c0 1e             	add    eax,0x1e
c000ee91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee94:	e8 f0 d6 ff ff       	call   c000c589 <setupTimer(int)>
c000ee99:	83 c4 10             	add    esp,0x10
c000ee9c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000eea2:	f6 05 40 f4 01 c0 20 	test   BYTE PTR ds:0xc001f440,0x20
c000eea9:	74 0c                	je     c000eeb7 <CPU::open(int, int, void*)+0xe3>
c000eeab:	83 ec 0c             	sub    esp,0xc
c000eeae:	53                   	push   ebx
c000eeaf:	e8 54 fe ff ff       	call   c000ed08 <CPU::setupFeatures()>
c000eeb4:	83 c4 10             	add    esp,0x10
c000eeb7:	5b                   	pop    ebx
c000eeb8:	31 c0                	xor    eax,eax
c000eeba:	5e                   	pop    esi
c000eebb:	5f                   	pop    edi
c000eebc:	c3                   	ret    
c000eebd:	90                   	nop

c000eebe <EnvVarContainer::getEnv(char const*)>:
c000eebe:	57                   	push   edi
c000eebf:	56                   	push   esi
c000eec0:	53                   	push   ebx
c000eec1:	31 db                	xor    ebx,ebx
c000eec3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eec7:	39 1e                	cmp    DWORD PTR [esi],ebx
c000eec9:	7e 2b                	jle    c000eef6 <EnvVarContainer::getEnv(char const*)+0x38>
c000eecb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000eed2:	50                   	push   eax
c000eed3:	50                   	push   eax
c000eed4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000eed7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000eeda:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eede:	e8 1d 18 ff ff       	call   c0000700 <strcmp>
c000eee3:	83 c4 10             	add    esp,0x10
c000eee6:	85 c0                	test   eax,eax
c000eee8:	75 09                	jne    c000eef3 <EnvVarContainer::getEnv(char const*)+0x35>
c000eeea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000eeed:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000eef1:	eb 05                	jmp    c000eef8 <EnvVarContainer::getEnv(char const*)+0x3a>
c000eef3:	43                   	inc    ebx
c000eef4:	eb d1                	jmp    c000eec7 <EnvVarContainer::getEnv(char const*)+0x9>
c000eef6:	31 c0                	xor    eax,eax
c000eef8:	5b                   	pop    ebx
c000eef9:	5e                   	pop    esi
c000eefa:	5f                   	pop    edi
c000eefb:	c3                   	ret    

c000eefc <EnvVarContainer::setEnv(char const*, char const*)>:
c000eefc:	55                   	push   ebp
c000eefd:	57                   	push   edi
c000eefe:	56                   	push   esi
c000eeff:	53                   	push   ebx
c000ef00:	83 ec 28             	sub    esp,0x28
c000ef03:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ef07:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ef0b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ef0f:	56                   	push   esi
c000ef10:	e8 4b 16 ff ff       	call   c0000560 <strlen>
c000ef15:	40                   	inc    eax
c000ef16:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef19:	e8 43 7c ff ff       	call   c0006b61 <malloc>
c000ef1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef25:	e8 36 16 ff ff       	call   c0000560 <strlen>
c000ef2a:	40                   	inc    eax
c000ef2b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef2e:	e8 2e 7c ff ff       	call   c0006b61 <malloc>
c000ef33:	89 34 24             	mov    DWORD PTR [esp],esi
c000ef36:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef3a:	e8 21 16 ff ff       	call   c0000560 <strlen>
c000ef3f:	83 c4 0c             	add    esp,0xc
c000ef42:	40                   	inc    eax
c000ef43:	50                   	push   eax
c000ef44:	6a 00                	push   0x0
c000ef46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ef4a:	e8 a1 15 ff ff       	call   c00004f0 <memset>
c000ef4f:	89 34 24             	mov    DWORD PTR [esp],esi
c000ef52:	e8 09 16 ff ff       	call   c0000560 <strlen>
c000ef57:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ef5b:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef63:	89 de                	mov    esi,ebx
c000ef65:	e8 f6 15 ff ff       	call   c0000560 <strlen>
c000ef6a:	83 c4 0c             	add    esp,0xc
c000ef6d:	40                   	inc    eax
c000ef6e:	50                   	push   eax
c000ef6f:	6a 00                	push   0x0
c000ef71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef75:	e8 76 15 ff ff       	call   c00004f0 <memset>
c000ef7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef7d:	e8 de 15 ff ff       	call   c0000560 <strlen>
c000ef82:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef86:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef8b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ef8e:	40                   	inc    eax
c000ef8f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ef92:	c1 e0 03             	shl    eax,0x3
c000ef95:	5a                   	pop    edx
c000ef96:	59                   	pop    ecx
c000ef97:	50                   	push   eax
c000ef98:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ef9b:	e8 ad 7b ff ff       	call   c0006b4d <realloc>
c000efa0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000efa4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000efa7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000efaa:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000efae:	b9 08 00 00 00       	mov    ecx,0x8
c000efb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000efb5:	83 c4 2c             	add    esp,0x2c
c000efb8:	5b                   	pop    ebx
c000efb9:	5e                   	pop    esi
c000efba:	5f                   	pop    edi
c000efbb:	5d                   	pop    ebp
c000efbc:	c3                   	ret    
c000efbd:	90                   	nop

c000efbe <EnvVarContainer::deleteEnv(char const*)>:
c000efbe:	c3                   	ret    
c000efbf:	90                   	nop

c000efc0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000efc0:	55                   	push   ebp
c000efc1:	57                   	push   edi
c000efc2:	56                   	push   esi
c000efc3:	53                   	push   ebx
c000efc4:	81 ec 38 01 00 00    	sub    esp,0x138
c000efca:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000efd1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000efd8:	68 14 01 00 00       	push   0x114
c000efdd:	e8 7f 7b ff ff       	call   c0006b61 <malloc>
c000efe2:	83 c4 0c             	add    esp,0xc
c000efe5:	89 c3                	mov    ebx,eax
c000efe7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000efea:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000eff1:	50                   	push   eax
c000eff2:	e8 6f ae ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000eff7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000effa:	e8 95 b1 ff ff       	call   c000a194 <File::exists()>
c000efff:	83 c4 10             	add    esp,0x10
c000f002:	84 c0                	test   al,al
c000f004:	75 31                	jne    c000f037 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000f006:	50                   	push   eax
c000f007:	50                   	push   eax
c000f008:	6a 12                	push   0x12
c000f00a:	53                   	push   ebx
c000f00b:	e8 16 af ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c000f010:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f012:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000f015:	89 34 24             	mov    DWORD PTR [esp],esi
c000f018:	e8 43 15 ff ff       	call   c0000560 <strlen>
c000f01d:	5a                   	pop    edx
c000f01e:	31 d2                	xor    edx,edx
c000f020:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f024:	51                   	push   ecx
c000f025:	56                   	push   esi
c000f026:	52                   	push   edx
c000f027:	50                   	push   eax
c000f028:	53                   	push   ebx
c000f029:	ff d7                	call   edi
c000f02b:	83 c4 14             	add    esp,0x14
c000f02e:	53                   	push   ebx
c000f02f:	e8 50 af ff ff       	call   c0009f84 <File::close()>
c000f034:	83 c4 10             	add    esp,0x10
c000f037:	56                   	push   esi
c000f038:	31 f6                	xor    esi,esi
c000f03a:	68 00 01 00 00       	push   0x100
c000f03f:	6a 00                	push   0x0
c000f041:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f045:	50                   	push   eax
c000f046:	e8 a5 14 ff ff       	call   c00004f0 <memset>
c000f04b:	5f                   	pop    edi
c000f04c:	58                   	pop    eax
c000f04d:	6a 01                	push   0x1
c000f04f:	53                   	push   ebx
c000f050:	e8 d1 ae ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c000f055:	83 c4 10             	add    esp,0x10
c000f058:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f060:	83 ec 0c             	sub    esp,0xc
c000f063:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f065:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f069:	51                   	push   ecx
c000f06a:	8d 54 24 23          	lea    edx,[esp+0x23]
c000f06e:	52                   	push   edx
c000f06f:	6a 00                	push   0x0
c000f071:	6a 01                	push   0x1
c000f073:	53                   	push   ebx
c000f074:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f077:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000f07b:	83 c4 20             	add    esp,0x20
c000f07e:	3c 0d                	cmp    al,0xd
c000f080:	0f 84 09 01 00 00    	je     c000f18f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f086:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f08b:	0f 84 ef 00 00 00    	je     c000f180 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f091:	3c 0a                	cmp    al,0xa
c000f093:	74 13                	je     c000f0a8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f095:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f09a:	74 0c                	je     c000f0a8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f09c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000f0a2:	0f 8e d8 00 00 00    	jle    c000f180 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f0a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0ac:	83 ec 0c             	sub    esp,0xc
c000f0af:	8d 78 01             	lea    edi,[eax+0x1]
c000f0b2:	57                   	push   edi
c000f0b3:	e8 a9 7a ff ff       	call   c0006b61 <malloc>
c000f0b8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000f0bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f0c0:	8d 56 04             	lea    edx,[esi+0x4]
c000f0c3:	89 14 24             	mov    DWORD PTR [esp],edx
c000f0c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f0ca:	e8 92 7a ff ff       	call   c0006b61 <malloc>
c000f0cf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f0d3:	83 c4 0c             	add    esp,0xc
c000f0d6:	57                   	push   edi
c000f0d7:	6a 00                	push   0x0
c000f0d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f0dd:	e8 0e 14 ff ff       	call   c00004f0 <memset>
c000f0e2:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f0e6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f0ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f0ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f0f0:	83 c4 0c             	add    esp,0xc
c000f0f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f0f7:	52                   	push   edx
c000f0f8:	6a 00                	push   0x0
c000f0fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f0fe:	e8 ed 13 ff ff       	call   c00004f0 <memset>
c000f103:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f107:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000f10b:	89 34 24             	mov    DWORD PTR [esp],esi
c000f10e:	e8 4d 14 ff ff       	call   c0000560 <strlen>
c000f113:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000f117:	89 c1                	mov    ecx,eax
c000f119:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f11b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f11e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000f121:	40                   	inc    eax
c000f122:	83 c4 10             	add    esp,0x10
c000f125:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f128:	85 d2                	test   edx,edx
c000f12a:	75 0c                	jne    c000f138 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000f12c:	83 ec 0c             	sub    esp,0xc
c000f12f:	6a 08                	push   0x8
c000f131:	e8 2b 7a ff ff       	call   c0006b61 <malloc>
c000f136:	eb 0c                	jmp    c000f144 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000f138:	c1 e0 03             	shl    eax,0x3
c000f13b:	51                   	push   ecx
c000f13c:	51                   	push   ecx
c000f13d:	50                   	push   eax
c000f13e:	52                   	push   edx
c000f13f:	e8 09 7a ff ff       	call   c0006b4d <realloc>
c000f144:	83 c4 10             	add    esp,0x10
c000f147:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f14a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f14d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000f150:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f154:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f158:	b9 08 00 00 00       	mov    ecx,0x8
c000f15d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f15f:	31 f6                	xor    esi,esi
c000f161:	50                   	push   eax
c000f162:	68 00 01 00 00       	push   0x100
c000f167:	6a 00                	push   0x0
c000f169:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f16d:	50                   	push   eax
c000f16e:	e8 7d 13 ff ff       	call   c00004f0 <memset>
c000f173:	83 c4 10             	add    esp,0x10
c000f176:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f17e:	eb 0f                	jmp    c000f18f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f180:	3c 3d                	cmp    al,0x3d
c000f182:	74 07                	je     c000f18b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000f184:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000f188:	46                   	inc    esi
c000f189:	eb 04                	jmp    c000f18f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f18b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000f18f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f194:	0f 85 c6 fe ff ff    	jne    c000f060 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000f19a:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f1a0:	5b                   	pop    ebx
c000f1a1:	5e                   	pop    esi
c000f1a2:	5f                   	pop    edi
c000f1a3:	5d                   	pop    ebp
c000f1a4:	c3                   	ret    
c000f1a5:	90                   	nop

c000f1a6 <EnvVarContainer::__loadSystem()>:
c000f1a6:	83 ec 10             	sub    esp,0x10
c000f1a9:	68 00 ee 01 c0       	push   0xc001ee00
c000f1ae:	68 e4 db 01 c0       	push   0xc001dbe4
c000f1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f1b7:	e8 04 fe ff ff       	call   c000efc0 <EnvVarContainer::loadFrom(char const*, char const*)>
c000f1bc:	83 c4 1c             	add    esp,0x1c
c000f1bf:	c3                   	ret    

c000f1c0 <EnvVarContainer::__loadUser()>:
c000f1c0:	c3                   	ret    
c000f1c1:	90                   	nop

c000f1c2 <EnvVarContainer::EnvVarContainer(Process*)>:
c000f1c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f1c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f1cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f1d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1d4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f1d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f1db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f1e2:	90                   	nop
c000f1e3:	c3                   	ret    

c000f1e4 <EnvVarContainer::~EnvVarContainer()>:
c000f1e4:	83 ec 0c             	sub    esp,0xc
c000f1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1ee:	85 c0                	test   eax,eax
c000f1f0:	74 1d                	je     c000f20f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1f8:	85 c0                	test   eax,eax
c000f1fa:	74 13                	je     c000f20f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f200:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f203:	83 ec 0c             	sub    esp,0xc
c000f206:	50                   	push   eax
c000f207:	e8 65 79 ff ff       	call   c0006b71 <free>
c000f20c:	83 c4 10             	add    esp,0x10
c000f20f:	90                   	nop
c000f210:	83 c4 0c             	add    esp,0xc
c000f213:	c3                   	ret    

c000f214 <Krnl::getEnv(Process*, char const*)>:
c000f214:	53                   	push   ebx
c000f215:	83 ec 08             	sub    esp,0x8
c000f218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f21c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f220:	39 05 10 29 02 c0    	cmp    DWORD PTR ds:0xc0022910,eax
c000f226:	74 04                	je     c000f22c <Krnl::getEnv(Process*, char const*)+0x18>
c000f228:	85 c0                	test   eax,eax
c000f22a:	75 0b                	jne    c000f237 <Krnl::getEnv(Process*, char const*)+0x23>
c000f22c:	a1 90 1e 02 c0       	mov    eax,ds:0xc0021e90
c000f231:	85 c0                	test   eax,eax
c000f233:	75 19                	jne    c000f24e <Krnl::getEnv(Process*, char const*)+0x3a>
c000f235:	eb 27                	jmp    c000f25e <Krnl::getEnv(Process*, char const*)+0x4a>
c000f237:	52                   	push   edx
c000f238:	52                   	push   edx
c000f239:	53                   	push   ebx
c000f23a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000f240:	e8 79 fc ff ff       	call   c000eebe <EnvVarContainer::getEnv(char const*)>
c000f245:	83 c4 10             	add    esp,0x10
c000f248:	85 c0                	test   eax,eax
c000f24a:	75 28                	jne    c000f274 <Krnl::getEnv(Process*, char const*)+0x60>
c000f24c:	eb de                	jmp    c000f22c <Krnl::getEnv(Process*, char const*)+0x18>
c000f24e:	52                   	push   edx
c000f24f:	52                   	push   edx
c000f250:	53                   	push   ebx
c000f251:	50                   	push   eax
c000f252:	e8 67 fc ff ff       	call   c000eebe <EnvVarContainer::getEnv(char const*)>
c000f257:	83 c4 10             	add    esp,0x10
c000f25a:	85 c0                	test   eax,eax
c000f25c:	75 16                	jne    c000f274 <Krnl::getEnv(Process*, char const*)+0x60>
c000f25e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000f262:	a1 94 1e 02 c0       	mov    eax,ds:0xc0021e94
c000f267:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f26b:	83 c4 08             	add    esp,0x8
c000f26e:	5b                   	pop    ebx
c000f26f:	e9 4a fc ff ff       	jmp    c000eebe <EnvVarContainer::getEnv(char const*)>
c000f274:	83 c4 08             	add    esp,0x8
c000f277:	5b                   	pop    ebx
c000f278:	c3                   	ret    

c000f279 <Krnl::setEnvSystem(char const*, char const*)>:
c000f279:	83 ec 10             	sub    esp,0x10
c000f27c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f280:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f284:	ff 35 94 1e 02 c0    	push   DWORD PTR ds:0xc0021e94
c000f28a:	e8 6d fc ff ff       	call   c000eefc <EnvVarContainer::setEnv(char const*, char const*)>
c000f28f:	83 c4 1c             	add    esp,0x1c
c000f292:	c3                   	ret    

c000f293 <Krnl::setEnvUser(char const*, char const*)>:
c000f293:	a1 90 1e 02 c0       	mov    eax,ds:0xc0021e90
c000f298:	85 c0                	test   eax,eax
c000f29a:	74 15                	je     c000f2b1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000f29c:	83 ec 10             	sub    esp,0x10
c000f29f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2a7:	50                   	push   eax
c000f2a8:	e8 4f fc ff ff       	call   c000eefc <EnvVarContainer::setEnv(char const*, char const*)>
c000f2ad:	83 c4 1c             	add    esp,0x1c
c000f2b0:	c3                   	ret    
c000f2b1:	c3                   	ret    

c000f2b2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000f2b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2b6:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000f2bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f2c0:	e9 37 fc ff ff       	jmp    c000eefc <EnvVarContainer::setEnv(char const*, char const*)>

c000f2c5 <Krnl::deleteEnvSystem(char const*)>:
c000f2c5:	c3                   	ret    

c000f2c6 <Krnl::deleteEnvUser(char const*)>:
c000f2c6:	c3                   	ret    

c000f2c7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000f2c7:	c3                   	ret    

c000f2c8 <Krnl::newProcessEnv(Process*)>:
c000f2c8:	83 ec 28             	sub    esp,0x28
c000f2cb:	6a 0c                	push   0xc
c000f2cd:	e8 8f 78 ff ff       	call   c0006b61 <malloc>
c000f2d2:	5a                   	pop    edx
c000f2d3:	59                   	pop    ecx
c000f2d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2d8:	50                   	push   eax
c000f2d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f2dd:	e8 e0 fe ff ff       	call   c000f1c2 <EnvVarContainer::EnvVarContainer(Process*)>
c000f2e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f2e6:	83 c4 2c             	add    esp,0x2c
c000f2e9:	c3                   	ret    

c000f2ea <Krnl::copyProcessEnv(Process*, Process*)>:
c000f2ea:	57                   	push   edi
c000f2eb:	56                   	push   esi
c000f2ec:	53                   	push   ebx
c000f2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2f1:	83 ec 0c             	sub    esp,0xc
c000f2f4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000f2fa:	6a 0c                	push   0xc
c000f2fc:	e8 60 78 ff ff       	call   c0006b61 <malloc>
c000f301:	89 c3                	mov    ebx,eax
c000f303:	58                   	pop    eax
c000f304:	5a                   	pop    edx
c000f305:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f309:	53                   	push   ebx
c000f30a:	e8 b3 fe ff ff       	call   c000f1c2 <EnvVarContainer::EnvVarContainer(Process*)>
c000f30f:	8b 07                	mov    eax,DWORD PTR [edi]
c000f311:	89 03                	mov    DWORD PTR [ebx],eax
c000f313:	c1 e0 03             	shl    eax,0x3
c000f316:	89 04 24             	mov    DWORD PTR [esp],eax
c000f319:	e8 43 78 ff ff       	call   c0006b61 <malloc>
c000f31e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000f321:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000f323:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000f326:	c1 e1 03             	shl    ecx,0x3
c000f329:	89 c7                	mov    edi,eax
c000f32b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f32d:	83 c4 10             	add    esp,0x10
c000f330:	89 d8                	mov    eax,ebx
c000f332:	5b                   	pop    ebx
c000f333:	5e                   	pop    esi
c000f334:	5f                   	pop    edi
c000f335:	c3                   	ret    

c000f336 <Krnl::loadSystemEnv()>:
c000f336:	53                   	push   ebx
c000f337:	83 ec 14             	sub    esp,0x14
c000f33a:	6a 0c                	push   0xc
c000f33c:	e8 20 78 ff ff       	call   c0006b61 <malloc>
c000f341:	89 c3                	mov    ebx,eax
c000f343:	58                   	pop    eax
c000f344:	5a                   	pop    edx
c000f345:	ff 35 10 29 02 c0    	push   DWORD PTR ds:0xc0022910
c000f34b:	53                   	push   ebx
c000f34c:	e8 71 fe ff ff       	call   c000f1c2 <EnvVarContainer::EnvVarContainer(Process*)>
c000f351:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f354:	89 1d 94 1e 02 c0    	mov    DWORD PTR ds:0xc0021e94,ebx
c000f35a:	e8 47 fe ff ff       	call   c000f1a6 <EnvVarContainer::__loadSystem()>
c000f35f:	83 c4 18             	add    esp,0x18
c000f362:	5b                   	pop    ebx
c000f363:	c3                   	ret    

c000f364 <Krnl::loadUserEnv()>:
c000f364:	53                   	push   ebx
c000f365:	83 ec 14             	sub    esp,0x14
c000f368:	6a 0c                	push   0xc
c000f36a:	e8 f2 77 ff ff       	call   c0006b61 <malloc>
c000f36f:	89 c3                	mov    ebx,eax
c000f371:	58                   	pop    eax
c000f372:	5a                   	pop    edx
c000f373:	ff 35 10 29 02 c0    	push   DWORD PTR ds:0xc0022910
c000f379:	53                   	push   ebx
c000f37a:	e8 43 fe ff ff       	call   c000f1c2 <EnvVarContainer::EnvVarContainer(Process*)>
c000f37f:	89 1d 90 1e 02 c0    	mov    DWORD PTR ds:0xc0021e90,ebx
c000f385:	83 c4 18             	add    esp,0x18
c000f388:	5b                   	pop    ebx
c000f389:	c3                   	ret    

c000f38a <Krnl::flushEnv()>:
c000f38a:	c3                   	ret    

c000f38b <Krnl::getProcessTotalEnvCount(Process*)>:
c000f38b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f38f:	8b 15 90 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e90
c000f395:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f39b:	a1 94 1e 02 c0       	mov    eax,ds:0xc0021e94
c000f3a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3a2:	03 01                	add    eax,DWORD PTR [ecx]
c000f3a4:	85 d2                	test   edx,edx
c000f3a6:	74 02                	je     c000f3aa <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000f3a8:	03 02                	add    eax,DWORD PTR [edx]
c000f3aa:	c3                   	ret    

c000f3ab <Krnl::getProcessEnvPair(Process*, int)>:
c000f3ab:	57                   	push   edi
c000f3ac:	56                   	push   esi
c000f3ad:	8b 35 90 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021e90
c000f3b3:	53                   	push   ebx
c000f3b4:	85 f6                	test   esi,esi
c000f3b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f3ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f3be:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f3c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f3c8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f3ca:	75 16                	jne    c000f3e2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000f3cc:	39 c2                	cmp    edx,eax
c000f3ce:	7c 16                	jl     c000f3e6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f3d0:	8b 0d 94 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e94
c000f3d6:	8b 31                	mov    esi,DWORD PTR [ecx]
c000f3d8:	01 c6                	add    esi,eax
c000f3da:	39 d6                	cmp    esi,edx
c000f3dc:	7e 3c                	jle    c000f41a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f3de:	29 c2                	sub    edx,eax
c000f3e0:	eb 04                	jmp    c000f3e6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f3e2:	39 c2                	cmp    edx,eax
c000f3e4:	7d 05                	jge    c000f3eb <Krnl::getProcessEnvPair(Process*, int)+0x40>
c000f3e6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000f3e9:	eb 20                	jmp    c000f40b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c000f3eb:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f3ed:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000f3f0:	39 d1                	cmp    ecx,edx
c000f3f2:	7e 04                	jle    c000f3f8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c000f3f4:	29 c2                	sub    edx,eax
c000f3f6:	eb 10                	jmp    c000f408 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c000f3f8:	8b 35 94 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021e94
c000f3fe:	03 0e                	add    ecx,DWORD PTR [esi]
c000f400:	39 d1                	cmp    ecx,edx
c000f402:	7e 16                	jle    c000f41a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f404:	29 c2                	sub    edx,eax
c000f406:	29 fa                	sub    edx,edi
c000f408:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f40b:	8d 14 d0             	lea    edx,[eax+edx*8]
c000f40e:	8b 02                	mov    eax,DWORD PTR [edx]
c000f410:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f413:	89 03                	mov    DWORD PTR [ebx],eax
c000f415:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000f418:	eb 1d                	jmp    c000f437 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c000f41a:	83 ec 0c             	sub    esp,0xc
c000f41d:	68 06 dc 01 c0       	push   0xc001dc06
c000f422:	e8 18 00 00 00       	call   c000f43f <Krnl::panic(char const*)>
c000f427:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000f42d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000f434:	83 c4 10             	add    esp,0x10
c000f437:	89 d8                	mov    eax,ebx
c000f439:	5b                   	pop    ebx
c000f43a:	5e                   	pop    esi
c000f43b:	5f                   	pop    edi
c000f43c:	c2 04 00             	ret    0x4

c000f43f <Krnl::panic(char const*)>:
c000f43f:	53                   	push   ebx
c000f440:	83 ec 10             	sub    esp,0x10
c000f443:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f447:	fa                   	cli    
c000f448:	c6 05 a0 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021ea0,0x1
c000f44f:	53                   	push   ebx
c000f450:	68 20 dc 01 c0       	push   0xc001dc20
c000f455:	e8 96 a4 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 0c             	add    esp,0xc
c000f45d:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f462:	6a 01                	push   0x1
c000f464:	6a 0f                	push   0xf
c000f466:	50                   	push   eax
c000f467:	e8 78 82 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f46c:	58                   	pop    eax
c000f46d:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f472:	50                   	push   eax
c000f473:	e8 64 84 ff ff       	call   c00078dc <VgaText::clearScreen()>
c000f478:	58                   	pop    eax
c000f479:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f47f:	5a                   	pop    edx
c000f480:	68 71 dc 01 c0       	push   0xc001dc71
c000f485:	51                   	push   ecx
c000f486:	e8 91 82 ff ff       	call   c000771c <VgaText::setTitle(char*)>
c000f48b:	83 c4 0c             	add    esp,0xc
c000f48e:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f493:	6a 01                	push   0x1
c000f495:	6a 0f                	push   0xf
c000f497:	50                   	push   eax
c000f498:	e8 47 82 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f49d:	58                   	pop    eax
c000f49e:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f4a4:	5a                   	pop    edx
c000f4a5:	68 39 dc 01 c0       	push   0xc001dc39
c000f4aa:	51                   	push   ecx
c000f4ab:	e8 20 87 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f4b0:	83 c4 0c             	add    esp,0xc
c000f4b3:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f4b8:	6a 0f                	push   0xf
c000f4ba:	6a 01                	push   0x1
c000f4bc:	50                   	push   eax
c000f4bd:	e8 22 82 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f4c2:	58                   	pop    eax
c000f4c3:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f4c9:	5a                   	pop    edx
c000f4ca:	68 42 dc 01 c0       	push   0xc001dc42
c000f4cf:	51                   	push   ecx
c000f4d0:	e8 fb 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f4d5:	83 c4 0c             	add    esp,0xc
c000f4d8:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f4dd:	6a 01                	push   0x1
c000f4df:	6a 0f                	push   0xf
c000f4e1:	50                   	push   eax
c000f4e2:	e8 fd 81 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f4e7:	58                   	pop    eax
c000f4e8:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f4ee:	5a                   	pop    edx
c000f4ef:	68 6f dc 01 c0       	push   0xc001dc6f
c000f4f4:	51                   	push   ecx
c000f4f5:	e8 d6 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f4fa:	58                   	pop    eax
c000f4fb:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f501:	5a                   	pop    edx
c000f502:	68 74 dc 01 c0       	push   0xc001dc74
c000f507:	51                   	push   ecx
c000f508:	e8 c3 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f50d:	58                   	pop    eax
c000f50e:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f514:	5a                   	pop    edx
c000f515:	68 4f dc 01 c0       	push   0xc001dc4f
c000f51a:	51                   	push   ecx
c000f51b:	e8 b0 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f520:	58                   	pop    eax
c000f521:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f527:	5a                   	pop    edx
c000f528:	53                   	push   ebx
c000f529:	51                   	push   ecx
c000f52a:	e8 a1 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f52f:	5b                   	pop    ebx
c000f530:	58                   	pop    eax
c000f531:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f536:	68 6f dc 01 c0       	push   0xc001dc6f
c000f53b:	50                   	push   eax
c000f53c:	e8 8f 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f541:	58                   	pop    eax
c000f542:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f546:	50                   	push   eax
c000f547:	e8 22 29 00 00       	call   c0011e6e <Thr::getDriverNameFromAddress(unsigned long)>
c000f54c:	83 c4 10             	add    esp,0x10
c000f54f:	85 c0                	test   eax,eax
c000f551:	0f 84 a2 00 00 00    	je     c000f5f9 <Krnl::panic(char const*)+0x1ba>
c000f557:	83 ec 08             	sub    esp,0x8
c000f55a:	89 c3                	mov    ebx,eax
c000f55c:	68 b0 dc 01 c0       	push   0xc001dcb0
c000f561:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f566:	50                   	push   eax
c000f567:	e8 64 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f56c:	58                   	pop    eax
c000f56d:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f573:	5a                   	pop    edx
c000f574:	68 4f dc 01 c0       	push   0xc001dc4f
c000f579:	51                   	push   ecx
c000f57a:	e8 51 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f57f:	58                   	pop    eax
c000f580:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f586:	5a                   	pop    edx
c000f587:	53                   	push   ebx
c000f588:	51                   	push   ecx
c000f589:	e8 42 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f58e:	83 c4 10             	add    esp,0x10
c000f591:	83 ec 08             	sub    esp,0x8
c000f594:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f599:	68 6e dc 01 c0       	push   0xc001dc6e
c000f59e:	50                   	push   eax
c000f59f:	e8 2c 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f5a4:	5a                   	pop    edx
c000f5a5:	8b 1d 74 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f474
c000f5ab:	59                   	pop    ecx
c000f5ac:	68 08 dd 01 c0       	push   0xc001dd08
c000f5b1:	53                   	push   ebx
c000f5b2:	e8 19 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f5b7:	58                   	pop    eax
c000f5b8:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f5be:	5a                   	pop    edx
c000f5bf:	68 48 dd 01 c0       	push   0xc001dd48
c000f5c4:	51                   	push   ecx
c000f5c5:	e8 06 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f5ca:	5b                   	pop    ebx
c000f5cb:	58                   	pop    eax
c000f5cc:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f5d1:	68 5a dc 01 c0       	push   0xc001dc5a
c000f5d6:	50                   	push   eax
c000f5d7:	e8 f4 85 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f5dc:	83 c4 10             	add    esp,0x10
c000f5df:	b2 fe                	mov    dl,0xfe
c000f5e1:	e4 60                	in     al,0x60
c000f5e3:	3c 1c                	cmp    al,0x1c
c000f5e5:	74 04                	je     c000f5eb <Krnl::panic(char const*)+0x1ac>
c000f5e7:	3c 5a                	cmp    al,0x5a
c000f5e9:	75 f6                	jne    c000f5e1 <Krnl::panic(char const*)+0x1a2>
c000f5eb:	e4 64                	in     al,0x64
c000f5ed:	a8 02                	test   al,0x2
c000f5ef:	75 fa                	jne    c000f5eb <Krnl::panic(char const*)+0x1ac>
c000f5f1:	88 d0                	mov    al,dl
c000f5f3:	e6 64                	out    0x64,al
c000f5f5:	fa                   	cli    
c000f5f6:	f4                   	hlt    
c000f5f7:	eb e8                	jmp    c000f5e1 <Krnl::panic(char const*)+0x1a2>
c000f5f9:	50                   	push   eax
c000f5fa:	50                   	push   eax
c000f5fb:	68 dc dc 01 c0       	push   0xc001dcdc
c000f600:	ff 35 74 f4 01 c0    	push   DWORD PTR ds:0xc001f474
c000f606:	e8 c5 85 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f60b:	58                   	pop    eax
c000f60c:	5a                   	pop    edx
c000f60d:	68 4f dc 01 c0       	push   0xc001dc4f
c000f612:	ff 35 74 f4 01 c0    	push   DWORD PTR ds:0xc001f474
c000f618:	e8 b3 85 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f61d:	59                   	pop    ecx
c000f61e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f623:	5b                   	pop    ebx
c000f624:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f627:	83 c0 0c             	add    eax,0xc
c000f62a:	50                   	push   eax
c000f62b:	ff 35 74 f4 01 c0    	push   DWORD PTR ds:0xc001f474
c000f631:	e8 9a 85 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f636:	83 c4 10             	add    esp,0x10
c000f639:	e9 53 ff ff ff       	jmp    c000f591 <Krnl::panic(char const*)+0x152>

c000f63e <Krnl::powerThread(void*)>:
c000f63e:	53                   	push   ebx
c000f63f:	83 ec 08             	sub    esp,0x8
c000f642:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c000f647:	48                   	dec    eax
c000f648:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c000f64d:	75 01                	jne    c000f650 <Krnl::powerThread(void*)+0x12>
c000f64f:	fb                   	sti    
c000f650:	83 ec 0c             	sub    esp,0xc
c000f653:	8b 1d f4 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ef4
c000f659:	6a 0a                	push   0xa
c000f65b:	c6 05 c0 1e 02 c0 00 	mov    BYTE PTR ds:0xc0021ec0,0x0
c000f662:	e8 5d 35 00 00       	call   c0012bc4 <sleep(unsigned int)>
c000f667:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c000f66c:	83 c4 10             	add    esp,0x10
c000f66f:	83 c0 0a             	add    eax,0xa
c000f672:	85 db                	test   ebx,ebx
c000f674:	a3 04 1f 02 c0       	mov    ds:0xc0021f04,eax
c000f679:	74 d5                	je     c000f650 <Krnl::powerThread(void*)+0x12>
c000f67b:	39 d8                	cmp    eax,ebx
c000f67d:	7e d1                	jle    c000f650 <Krnl::powerThread(void*)+0x12>
c000f67f:	83 ec 0c             	sub    esp,0xc
c000f682:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000f688:	e8 61 6b ff ff       	call   c00061ee <Computer::sleep()>
c000f68d:	83 c4 10             	add    esp,0x10
c000f690:	eb be                	jmp    c000f650 <Krnl::powerThread(void*)+0x12>

c000f692 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c000f692:	57                   	push   edi
c000f693:	b9 09 00 00 00       	mov    ecx,0x9
c000f698:	56                   	push   esi
c000f699:	bf e0 1e 02 c0       	mov    edi,0xc0021ee0
c000f69e:	fc                   	cld    
c000f69f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f6a3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f6a5:	5e                   	pop    esi
c000f6a6:	5f                   	pop    edi
c000f6a7:	c3                   	ret    

c000f6a8 <Krnl::userIOReceived()>:
c000f6a8:	c7 05 04 1f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021f04,0x0
c000f6b2:	c3                   	ret    

c000f6b3 <Krnl::handlePowerButton()>:
c000f6b3:	83 ec 0c             	sub    esp,0xc
c000f6b6:	a1 e0 1e 02 c0       	mov    eax,ds:0xc0021ee0
c000f6bb:	83 f8 02             	cmp    eax,0x2
c000f6be:	75 10                	jne    c000f6d0 <Krnl::handlePowerButton()+0x1d>
c000f6c0:	83 ec 0c             	sub    esp,0xc
c000f6c3:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000f6c9:	e8 f0 6a ff ff       	call   c00061be <Computer::shutdown()>
c000f6ce:	eb 11                	jmp    c000f6e1 <Krnl::handlePowerButton()+0x2e>
c000f6d0:	48                   	dec    eax
c000f6d1:	75 11                	jne    c000f6e4 <Krnl::handlePowerButton()+0x31>
c000f6d3:	83 ec 0c             	sub    esp,0xc
c000f6d6:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000f6dc:	e8 0d 6b ff ff       	call   c00061ee <Computer::sleep()>
c000f6e1:	83 c4 10             	add    esp,0x10
c000f6e4:	83 c4 0c             	add    esp,0xc
c000f6e7:	c3                   	ret    

c000f6e8 <Krnl::handleSleepButton()>:
c000f6e8:	83 ec 0c             	sub    esp,0xc
c000f6eb:	a1 e4 1e 02 c0       	mov    eax,ds:0xc0021ee4
c000f6f0:	83 f8 02             	cmp    eax,0x2
c000f6f3:	75 10                	jne    c000f705 <Krnl::handleSleepButton()+0x1d>
c000f6f5:	83 ec 0c             	sub    esp,0xc
c000f6f8:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000f6fe:	e8 bb 6a ff ff       	call   c00061be <Computer::shutdown()>
c000f703:	eb 11                	jmp    c000f716 <Krnl::handleSleepButton()+0x2e>
c000f705:	48                   	dec    eax
c000f706:	75 11                	jne    c000f719 <Krnl::handleSleepButton()+0x31>
c000f708:	83 ec 0c             	sub    esp,0xc
c000f70b:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000f711:	e8 d8 6a ff ff       	call   c00061ee <Computer::sleep()>
c000f716:	83 c4 10             	add    esp,0x10
c000f719:	83 c4 0c             	add    esp,0xc
c000f71c:	c3                   	ret    

c000f71d <Krnl::setupPowerManager()>:
c000f71d:	83 ec 0c             	sub    esp,0xc
c000f720:	c7 05 04 1f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021f04,0x0
c000f72a:	68 f0 00 00 00       	push   0xf0
c000f72f:	c6 05 c0 1e 02 c0 00 	mov    BYTE PTR ds:0xc0021ec0,0x0
c000f736:	6a 00                	push   0x0
c000f738:	68 3e f6 00 c0       	push   0xc000f63e
c000f73d:	ff 35 10 29 02 c0    	push   DWORD PTR ds:0xc0022910
c000f743:	e8 4c 2f 00 00       	call   c0012694 <Process::createThread(void (*)(void*), void*, int)>
c000f748:	c7 05 e0 1e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0021ee0,0x2
c000f752:	c7 05 e4 1e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0021ee4,0x1
c000f75c:	c7 05 e8 1e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0021ee8,0x3
c000f766:	c7 05 ec 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eec,0x0
c000f770:	c7 05 f8 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ef8,0x0
c000f77a:	c7 05 f0 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ef0,0x0
c000f784:	c7 05 fc 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021efc,0x0
c000f78e:	c7 05 f4 1e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0021ef4,0x3c
c000f798:	c7 05 00 1f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0021f00,0x3c
c000f7a2:	83 c4 1c             	add    esp,0x1c
c000f7a5:	c3                   	ret    

c000f7a6 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c000f7a6:	55                   	push   ebp
c000f7a7:	57                   	push   edi
c000f7a8:	56                   	push   esi
c000f7a9:	53                   	push   ebx
c000f7aa:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f7b0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c000f7b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c000f7b9:	8d 6e 01             	lea    ebp,[esi+0x1]
c000f7bc:	80 fb 40             	cmp    bl,0x40
c000f7bf:	75 1b                	jne    c000f7dc <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c000f7c1:	8a 16                	mov    dl,BYTE PTR [esi]
c000f7c3:	84 d2                	test   dl,dl
c000f7c5:	0f 84 f1 00 00 00    	je     c000f8bc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f7cb:	8d 46 01             	lea    eax,[esi+0x1]
c000f7ce:	80 fa 3a             	cmp    dl,0x3a
c000f7d1:	74 04                	je     c000f7d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c000f7d3:	89 c6                	mov    esi,eax
c000f7d5:	eb ea                	jmp    c000f7c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c000f7d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f7da:	89 c6                	mov    esi,eax
c000f7dc:	50                   	push   eax
c000f7dd:	6a 40                	push   0x40
c000f7df:	6a 00                	push   0x0
c000f7e1:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f7e5:	50                   	push   eax
c000f7e6:	e8 05 0d ff ff       	call   c00004f0 <memset>
c000f7eb:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c000f7f2:	31 c0                	xor    eax,eax
c000f7f4:	83 c4 10             	add    esp,0x10
c000f7f7:	8a 0f                	mov    cl,BYTE PTR [edi]
c000f7f9:	84 c9                	test   cl,cl
c000f7fb:	0f 84 bb 00 00 00    	je     c000f8bc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f801:	3d c7 00 00 00       	cmp    eax,0xc7
c000f806:	0f 8f b0 00 00 00    	jg     c000f8bc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f80c:	80 f9 0a             	cmp    cl,0xa
c000f80f:	0f 85 98 00 00 00    	jne    c000f8ad <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c000f815:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c000f81a:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c000f81e:	a8 df                	test   al,0xdf
c000f820:	0f 94 c1             	sete   cl
c000f823:	3c 23                	cmp    al,0x23
c000f825:	0f 94 c2             	sete   dl
c000f828:	08 d1                	or     cl,dl
c000f82a:	75 4a                	jne    c000f876 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f82c:	8d 50 f7             	lea    edx,[eax-0x9]
c000f82f:	80 fa 01             	cmp    dl,0x1
c000f832:	76 42                	jbe    c000f876 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f834:	3c 5b                	cmp    al,0x5b
c000f836:	75 42                	jne    c000f87a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c000f838:	80 fb 40             	cmp    bl,0x40
c000f83b:	75 39                	jne    c000f876 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f83d:	83 ec 0c             	sub    esp,0xc
c000f840:	8d 54 24 65          	lea    edx,[esp+0x65]
c000f844:	52                   	push   edx
c000f845:	e8 16 0d ff ff       	call   c0000560 <strlen>
c000f84a:	83 c4 10             	add    esp,0x10
c000f84d:	83 f8 3f             	cmp    eax,0x3f
c000f850:	77 6a                	ja     c000f8bc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f852:	50                   	push   eax
c000f853:	50                   	push   eax
c000f854:	8d 54 24 61          	lea    edx,[esp+0x61]
c000f858:	52                   	push   edx
c000f859:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f85d:	52                   	push   edx
c000f85e:	e8 bd 0d ff ff       	call   c0000620 <strcpy>
c000f863:	58                   	pop    eax
c000f864:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f868:	52                   	push   edx
c000f869:	e8 f2 0c ff ff       	call   c0000560 <strlen>
c000f86e:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c000f873:	83 c4 10             	add    esp,0x10
c000f876:	31 d2                	xor    edx,edx
c000f878:	eb 3a                	jmp    c000f8b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c000f87a:	80 fb 40             	cmp    bl,0x40
c000f87d:	74 06                	je     c000f885 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c000f87f:	8d 44 24 58          	lea    eax,[esp+0x58]
c000f883:	eb 20                	jmp    c000f8a5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c000f885:	50                   	push   eax
c000f886:	50                   	push   eax
c000f887:	55                   	push   ebp
c000f888:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f88c:	50                   	push   eax
c000f88d:	e8 6e 0e ff ff       	call   c0000700 <strcmp>
c000f892:	83 c4 10             	add    esp,0x10
c000f895:	85 c0                	test   eax,eax
c000f897:	75 dd                	jne    c000f876 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f899:	eb e4                	jmp    c000f87f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c000f89b:	8d 50 01             	lea    edx,[eax+0x1]
c000f89e:	80 f9 3d             	cmp    cl,0x3d
c000f8a1:	74 1d                	je     c000f8c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c000f8a3:	89 d0                	mov    eax,edx
c000f8a5:	8a 08                	mov    cl,BYTE PTR [eax]
c000f8a7:	84 c9                	test   cl,cl
c000f8a9:	75 f0                	jne    c000f89b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c000f8ab:	eb 0f                	jmp    c000f8bc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f8ad:	8d 50 01             	lea    edx,[eax+0x1]
c000f8b0:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c000f8b4:	47                   	inc    edi
c000f8b5:	89 d0                	mov    eax,edx
c000f8b7:	e9 3b ff ff ff       	jmp    c000f7f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c000f8bc:	31 c0                	xor    eax,eax
c000f8be:	eb 33                	jmp    c000f8f3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c000f8c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f8c4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c7:	50                   	push   eax
c000f8c8:	50                   	push   eax
c000f8c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c000f8cd:	50                   	push   eax
c000f8ce:	56                   	push   esi
c000f8cf:	e8 2c 0e ff ff       	call   c0000700 <strcmp>
c000f8d4:	83 c4 10             	add    esp,0x10
c000f8d7:	85 c0                	test   eax,eax
c000f8d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f8dd:	75 97                	jne    c000f876 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f8df:	51                   	push   ecx
c000f8e0:	51                   	push   ecx
c000f8e1:	52                   	push   edx
c000f8e2:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c000f8e9:	e8 32 0d ff ff       	call   c0000620 <strcpy>
c000f8ee:	83 c4 10             	add    esp,0x10
c000f8f1:	b0 01                	mov    al,0x1
c000f8f3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f8f9:	5b                   	pop    ebx
c000f8fa:	5e                   	pop    esi
c000f8fb:	5f                   	pop    edi
c000f8fc:	5d                   	pop    ebp
c000f8fd:	c3                   	ret    

c000f8fe <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c000f8fe:	57                   	push   edi
c000f8ff:	56                   	push   esi
c000f900:	53                   	push   ebx
c000f901:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f907:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c000f90e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c000f915:	53                   	push   ebx
c000f916:	e8 45 0c ff ff       	call   c0000560 <strlen>
c000f91b:	89 34 24             	mov    DWORD PTR [esp],esi
c000f91e:	89 c7                	mov    edi,eax
c000f920:	e8 3b 0c ff ff       	call   c0000560 <strlen>
c000f925:	83 c4 10             	add    esp,0x10
c000f928:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c000f92c:	3d ff 00 00 00       	cmp    eax,0xff
c000f931:	0f 87 d3 00 00 00    	ja     c000fa0a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000f937:	57                   	push   edi
c000f938:	57                   	push   edi
c000f939:	56                   	push   esi
c000f93a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f93e:	56                   	push   esi
c000f93f:	e8 dc 0c ff ff       	call   c0000620 <strcpy>
c000f944:	58                   	pop    eax
c000f945:	5a                   	pop    edx
c000f946:	68 70 e0 01 c0       	push   0xc001e070
c000f94b:	56                   	push   esi
c000f94c:	e8 8f 0e ff ff       	call   c00007e0 <strcat>
c000f951:	59                   	pop    ecx
c000f952:	5f                   	pop    edi
c000f953:	53                   	push   ebx
c000f954:	56                   	push   esi
c000f955:	e8 86 0e ff ff       	call   c00007e0 <strcat>
c000f95a:	58                   	pop    eax
c000f95b:	5a                   	pop    edx
c000f95c:	68 8b dd 01 c0       	push   0xc001dd8b
c000f961:	56                   	push   esi
c000f962:	e8 79 0e ff ff       	call   c00007e0 <strcat>
c000f967:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000f96e:	e8 ee 71 ff ff       	call   c0006b61 <malloc>
c000f973:	83 c4 0c             	add    esp,0xc
c000f976:	89 c3                	mov    ebx,eax
c000f978:	ff 35 10 29 02 c0    	push   DWORD PTR ds:0xc0022910
c000f97e:	56                   	push   esi
c000f97f:	50                   	push   eax
c000f980:	e8 e1 a4 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000f985:	83 c4 10             	add    esp,0x10
c000f988:	85 db                	test   ebx,ebx
c000f98a:	74 7e                	je     c000fa0a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000f98c:	51                   	push   ecx
c000f98d:	51                   	push   ecx
c000f98e:	6a 01                	push   0x1
c000f990:	53                   	push   ebx
c000f991:	e8 90 a5 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c000f996:	83 c4 10             	add    esp,0x10
c000f999:	85 c0                	test   eax,eax
c000f99b:	74 08                	je     c000f9a5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c000f99d:	83 ec 0c             	sub    esp,0xc
c000f9a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f9a2:	53                   	push   ebx
c000f9a3:	eb 5f                	jmp    c000fa04 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c000f9a5:	52                   	push   edx
c000f9a6:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f9aa:	50                   	push   eax
c000f9ab:	8d 44 24 20          	lea    eax,[esp+0x20]
c000f9af:	50                   	push   eax
c000f9b0:	53                   	push   ebx
c000f9b1:	e8 1c a8 ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c000f9b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9ba:	83 c4 10             	add    esp,0x10
c000f9bd:	89 c1                	mov    ecx,eax
c000f9bf:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c000f9c3:	74 31                	je     c000f9f6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000f9c5:	83 ec 0c             	sub    esp,0xc
c000f9c8:	50                   	push   eax
c000f9c9:	e8 93 71 ff ff       	call   c0006b61 <malloc>
c000f9ce:	89 c6                	mov    esi,eax
c000f9d0:	58                   	pop    eax
c000f9d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f9d3:	8d 54 24 20          	lea    edx,[esp+0x20]
c000f9d7:	52                   	push   edx
c000f9d8:	56                   	push   esi
c000f9d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f9dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f9e1:	53                   	push   ebx
c000f9e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f9e5:	83 c4 20             	add    esp,0x20
c000f9e8:	85 c0                	test   eax,eax
c000f9ea:	75 0a                	jne    c000f9f6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000f9ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f9f0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f9f4:	74 18                	je     c000fa0e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c000f9f6:	83 ec 0c             	sub    esp,0xc
c000f9f9:	53                   	push   ebx
c000f9fa:	e8 85 a5 ff ff       	call   c0009f84 <File::close()>
c000f9ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fa01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	31 c0                	xor    eax,eax
c000fa0c:	eb 3b                	jmp    c000fa49 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	53                   	push   ebx
c000fa12:	e8 6d a5 ff ff       	call   c0009f84 <File::close()>
c000fa17:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fa19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fa1f:	83 c4 0c             	add    esp,0xc
c000fa22:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000fa29:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000fa30:	56                   	push   esi
c000fa31:	e8 70 fd ff ff       	call   c000f7a6 <Reg::findLineFromLoadedData(char*, char*, char*)>
c000fa36:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000fa3d:	e8 2f 71 ff ff       	call   c0006b71 <free>
c000fa42:	83 c4 10             	add    esp,0x10
c000fa45:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fa49:	81 c4 20 01 00 00    	add    esp,0x120
c000fa4f:	5b                   	pop    ebx
c000fa50:	5e                   	pop    esi
c000fa51:	5f                   	pop    edi
c000fa52:	c3                   	ret    

c000fa53 <Reg::getLine(char*, char*, char*)>:
c000fa53:	57                   	push   edi
c000fa54:	56                   	push   esi
c000fa55:	53                   	push   ebx
c000fa56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa5a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa5e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fa62:	57                   	push   edi
c000fa63:	56                   	push   esi
c000fa64:	53                   	push   ebx
c000fa65:	68 90 dd 01 c0       	push   0xc001dd90
c000fa6a:	e8 8f fe ff ff       	call   c000f8fe <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fa6f:	83 c4 10             	add    esp,0x10
c000fa72:	84 c0                	test   al,al
c000fa74:	75 10                	jne    c000fa86 <Reg::getLine(char*, char*, char*)+0x33>
c000fa76:	57                   	push   edi
c000fa77:	56                   	push   esi
c000fa78:	53                   	push   ebx
c000fa79:	68 b5 dd 01 c0       	push   0xc001ddb5
c000fa7e:	e8 7b fe ff ff       	call   c000f8fe <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fa83:	83 c4 10             	add    esp,0x10
c000fa86:	5b                   	pop    ebx
c000fa87:	5e                   	pop    esi
c000fa88:	5f                   	pop    edi
c000fa89:	c3                   	ret    

c000fa8a <Reg::readInt(char*, char*, int*)>:
c000fa8a:	55                   	push   ebp
c000fa8b:	57                   	push   edi
c000fa8c:	56                   	push   esi
c000fa8d:	53                   	push   ebx
c000fa8e:	81 ec f0 00 00 00    	sub    esp,0xf0
c000fa94:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000fa98:	57                   	push   edi
c000fa99:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000faa0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000faa7:	e8 a7 ff ff ff       	call   c000fa53 <Reg::getLine(char*, char*, char*)>
c000faac:	83 c4 10             	add    esp,0x10
c000faaf:	84 c0                	test   al,al
c000fab1:	0f 84 b3 00 00 00    	je     c000fb6a <Reg::readInt(char*, char*, int*)+0xe0>
c000fab7:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c000fabb:	80 fa 2b             	cmp    dl,0x2b
c000fabe:	74 0c                	je     c000facc <Reg::readInt(char*, char*, int*)+0x42>
c000fac0:	80 fa 2d             	cmp    dl,0x2d
c000fac3:	75 0e                	jne    c000fad3 <Reg::readInt(char*, char*, int*)+0x49>
c000fac5:	ba 01 00 00 00       	mov    edx,0x1
c000faca:	eb 0b                	jmp    c000fad7 <Reg::readInt(char*, char*, int*)+0x4d>
c000facc:	ba 01 00 00 00       	mov    edx,0x1
c000fad1:	eb 02                	jmp    c000fad5 <Reg::readInt(char*, char*, int*)+0x4b>
c000fad3:	31 d2                	xor    edx,edx
c000fad5:	31 c0                	xor    eax,eax
c000fad7:	be 0a 00 00 00       	mov    esi,0xa
c000fadc:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c000fae1:	75 20                	jne    c000fb03 <Reg::readInt(char*, char*, int*)+0x79>
c000fae3:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c000fae7:	80 f9 78             	cmp    cl,0x78
c000faea:	75 0a                	jne    c000faf6 <Reg::readInt(char*, char*, int*)+0x6c>
c000faec:	83 c2 02             	add    edx,0x2
c000faef:	be 10 00 00 00       	mov    esi,0x10
c000faf4:	eb 0d                	jmp    c000fb03 <Reg::readInt(char*, char*, int*)+0x79>
c000faf6:	80 f9 62             	cmp    cl,0x62
c000faf9:	75 08                	jne    c000fb03 <Reg::readInt(char*, char*, int*)+0x79>
c000fafb:	83 c2 02             	add    edx,0x2
c000fafe:	be 02 00 00 00       	mov    esi,0x2
c000fb03:	01 d7                	add    edi,edx
c000fb05:	31 d2                	xor    edx,edx
c000fb07:	8a 1f                	mov    bl,BYTE PTR [edi]
c000fb09:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c000fb0d:	80 fb 0d             	cmp    bl,0xd
c000fb10:	0f 94 c3             	sete   bl
c000fb13:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000fb18:	0f 94 c1             	sete   cl
c000fb1b:	08 cb                	or     bl,cl
c000fb1d:	75 3a                	jne    c000fb59 <Reg::readInt(char*, char*, int*)+0xcf>
c000fb1f:	0f af d6             	imul   edx,esi
c000fb22:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c000fb27:	83 fe 10             	cmp    esi,0x10
c000fb2a:	75 26                	jne    c000fb52 <Reg::readInt(char*, char*, int*)+0xc8>
c000fb2c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fb30:	8d 69 bf             	lea    ebp,[ecx-0x41]
c000fb33:	89 e9                	mov    ecx,ebp
c000fb35:	80 f9 05             	cmp    cl,0x5
c000fb38:	77 06                	ja     c000fb40 <Reg::readInt(char*, char*, int*)+0xb6>
c000fb3a:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c000fb3e:	eb 16                	jmp    c000fb56 <Reg::readInt(char*, char*, int*)+0xcc>
c000fb40:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fb44:	83 e9 61             	sub    ecx,0x61
c000fb47:	80 f9 05             	cmp    cl,0x5
c000fb4a:	77 06                	ja     c000fb52 <Reg::readInt(char*, char*, int*)+0xc8>
c000fb4c:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c000fb50:	eb 04                	jmp    c000fb56 <Reg::readInt(char*, char*, int*)+0xcc>
c000fb52:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c000fb56:	47                   	inc    edi
c000fb57:	eb ae                	jmp    c000fb07 <Reg::readInt(char*, char*, int*)+0x7d>
c000fb59:	84 c0                	test   al,al
c000fb5b:	74 02                	je     c000fb5f <Reg::readInt(char*, char*, int*)+0xd5>
c000fb5d:	f7 da                	neg    edx
c000fb5f:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c000fb66:	89 10                	mov    DWORD PTR [eax],edx
c000fb68:	88 d8                	mov    al,bl
c000fb6a:	81 c4 ec 00 00 00    	add    esp,0xec
c000fb70:	5b                   	pop    ebx
c000fb71:	5e                   	pop    esi
c000fb72:	5f                   	pop    edi
c000fb73:	5d                   	pop    ebp
c000fb74:	c3                   	ret    

c000fb75 <Reg::readString(char*, char*, char*, int)>:
c000fb75:	57                   	push   edi
c000fb76:	56                   	push   esi
c000fb77:	53                   	push   ebx
c000fb78:	81 ec d4 00 00 00    	sub    esp,0xd4
c000fb7e:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c000fb85:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000fb89:	57                   	push   edi
c000fb8a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fb91:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fb98:	e8 b6 fe ff ff       	call   c000fa53 <Reg::getLine(char*, char*, char*)>
c000fb9d:	83 c4 10             	add    esp,0x10
c000fba0:	89 c6                	mov    esi,eax
c000fba2:	84 c0                	test   al,al
c000fba4:	74 44                	je     c000fbea <Reg::readString(char*, char*, char*, int)+0x75>
c000fba6:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c000fbad:	31 c0                	xor    eax,eax
c000fbaf:	4a                   	dec    edx
c000fbb0:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c000fbb3:	84 c9                	test   cl,cl
c000fbb5:	74 0f                	je     c000fbc6 <Reg::readString(char*, char*, char*, int)+0x51>
c000fbb7:	39 c2                	cmp    edx,eax
c000fbb9:	7e 0b                	jle    c000fbc6 <Reg::readString(char*, char*, char*, int)+0x51>
c000fbbb:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000fbbe:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c000fbc3:	40                   	inc    eax
c000fbc4:	eb ea                	jmp    c000fbb0 <Reg::readString(char*, char*, char*, int)+0x3b>
c000fbc6:	83 ec 0c             	sub    esp,0xc
c000fbc9:	53                   	push   ebx
c000fbca:	e8 91 09 ff ff       	call   c0000560 <strlen>
c000fbcf:	83 c4 10             	add    esp,0x10
c000fbd2:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c000fbd7:	75 11                	jne    c000fbea <Reg::readString(char*, char*, char*, int)+0x75>
c000fbd9:	83 ec 0c             	sub    esp,0xc
c000fbdc:	53                   	push   ebx
c000fbdd:	e8 7e 09 ff ff       	call   c0000560 <strlen>
c000fbe2:	83 c4 10             	add    esp,0x10
c000fbe5:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000fbea:	81 c4 d0 00 00 00    	add    esp,0xd0
c000fbf0:	89 f0                	mov    eax,esi
c000fbf2:	5b                   	pop    ebx
c000fbf3:	5e                   	pop    esi
c000fbf4:	5f                   	pop    edi
c000fbf5:	c3                   	ret    

c000fbf6 <Reg::readBool(char*, char*, bool*)>:
c000fbf6:	83 ec 20             	sub    esp,0x20
c000fbf9:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fbfd:	50                   	push   eax
c000fbfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc06:	e8 7f fe ff ff       	call   c000fa8a <Reg::readInt(char*, char*, int*)>
c000fc0b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fc10:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fc14:	0f 95 02             	setne  BYTE PTR [edx]
c000fc17:	83 c4 2c             	add    esp,0x2c
c000fc1a:	c3                   	ret    

c000fc1b <Reg::readBoolWithDefault(char*, char*, bool)>:
c000fc1b:	53                   	push   ebx
c000fc1c:	83 ec 1c             	sub    esp,0x1c
c000fc1f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c000fc23:	8d 44 24 13          	lea    eax,[esp+0x13]
c000fc27:	50                   	push   eax
c000fc28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc30:	e8 c1 ff ff ff       	call   c000fbf6 <Reg::readBool(char*, char*, bool*)>
c000fc35:	83 c4 10             	add    esp,0x10
c000fc38:	84 c0                	test   al,al
c000fc3a:	74 04                	je     c000fc40 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c000fc3c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c000fc40:	88 d8                	mov    al,bl
c000fc42:	83 c4 18             	add    esp,0x18
c000fc45:	5b                   	pop    ebx
c000fc46:	c3                   	ret    

c000fc47 <Reg::readIntWithDefault(char*, char*, int)>:
c000fc47:	53                   	push   ebx
c000fc48:	83 ec 1c             	sub    esp,0x1c
c000fc4b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fc4f:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fc53:	50                   	push   eax
c000fc54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc5c:	e8 29 fe ff ff       	call   c000fa8a <Reg::readInt(char*, char*, int*)>
c000fc61:	83 c4 10             	add    esp,0x10
c000fc64:	84 c0                	test   al,al
c000fc66:	74 04                	je     c000fc6c <Reg::readIntWithDefault(char*, char*, int)+0x25>
c000fc68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fc6c:	89 d8                	mov    eax,ebx
c000fc6e:	83 c4 18             	add    esp,0x18
c000fc71:	5b                   	pop    ebx
c000fc72:	c3                   	ret    

c000fc73 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c000fc73:	57                   	push   edi
c000fc74:	56                   	push   esi
c000fc75:	56                   	push   esi
c000fc76:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fc7a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000fc7e:	56                   	push   esi
c000fc7f:	57                   	push   edi
c000fc80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc88:	e8 e8 fe ff ff       	call   c000fb75 <Reg::readString(char*, char*, char*, int)>
c000fc8d:	83 c4 10             	add    esp,0x10
c000fc90:	84 c0                	test   al,al
c000fc92:	75 1a                	jne    c000fcae <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c000fc94:	51                   	push   ecx
c000fc95:	56                   	push   esi
c000fc96:	6a 00                	push   0x0
c000fc98:	57                   	push   edi
c000fc99:	e8 52 08 ff ff       	call   c00004f0 <memset>
c000fc9e:	8d 4e ff             	lea    ecx,[esi-0x1]
c000fca1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fca5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fca7:	83 c4 10             	add    esp,0x10
c000fcaa:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000fcae:	89 f8                	mov    eax,edi
c000fcb0:	5a                   	pop    edx
c000fcb1:	5e                   	pop    esi
c000fcb2:	5f                   	pop    edi
c000fcb3:	c3                   	ret    

c000fcb4 <Sys::eject(regs*)>:
c000fcb4:	83 ec 0c             	sub    esp,0xc
c000fcb7:	83 ca ff             	or     edx,0xffffffff
c000fcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcbe:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c000fcc1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000fcc6:	83 e9 41             	sub    ecx,0x41
c000fcc9:	83 f9 19             	cmp    ecx,0x19
c000fccc:	77 18                	ja     c000fce6 <Sys::eject(regs*)+0x32>
c000fcce:	8b 0c 8d 80 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde680]
c000fcd5:	85 c9                	test   ecx,ecx
c000fcd7:	74 0d                	je     c000fce6 <Sys::eject(regs*)+0x32>
c000fcd9:	83 ec 0c             	sub    esp,0xc
c000fcdc:	51                   	push   ecx
c000fcdd:	e8 8c c2 ff ff       	call   c000bf6e <LogicalDisk::eject()>
c000fce2:	83 c4 10             	add    esp,0x10
c000fce5:	99                   	cdq    
c000fce6:	83 c4 0c             	add    esp,0xc
c000fce9:	c3                   	ret    

c000fcea <Sys::exit(regs*)>:
c000fcea:	83 ec 18             	sub    esp,0x18
c000fced:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fcf1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fcf4:	e8 df 34 00 00       	call   c00131d8 <terminateTask(int)>
c000fcf9:	83 c8 ff             	or     eax,0xffffffff
c000fcfc:	83 c4 1c             	add    esp,0x1c
c000fcff:	89 c2                	mov    edx,eax
c000fd01:	c3                   	ret    

c000fd02 <Sys::getCwd(regs*)>:
c000fd02:	83 ec 10             	sub    esp,0x10
c000fd05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd09:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000fd0c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fd0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fd14:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fd17:	e8 4c 9f ff ff       	call   c0009c68 <Fs::getcwd(Process*, char*, int)>
c000fd1c:	83 c4 1c             	add    esp,0x1c
c000fd1f:	99                   	cdq    
c000fd20:	c3                   	ret    

c000fd21 <Sys::getPID(regs*)>:
c000fd21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fd26:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fd29:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd2b:	99                   	cdq    
c000fd2c:	c3                   	ret    

c000fd2d <Sys::getRAMData(regs*)>:
c000fd2d:	8b 0d 58 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f458
c000fd33:	69 05 54 f4 01 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc001f454,0xc8
c000fd3d:	99                   	cdq    
c000fd3e:	f7 f9                	idiv   ecx
c000fd40:	c1 e0 18             	shl    eax,0x18
c000fd43:	09 c8                	or     eax,ecx
c000fd45:	99                   	cdq    
c000fd46:	c3                   	ret    

c000fd47 <Sys::getVGAPtr(regs*)>:
c000fd47:	55                   	push   ebp
c000fd48:	57                   	push   edi
c000fd49:	56                   	push   esi
c000fd4a:	53                   	push   ebx
c000fd4b:	83 ec 18             	sub    esp,0x18
c000fd4e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fd52:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000fd55:	e8 7e 2f 00 00       	call   c0012cd8 <Thr::processFromPID(int)>
c000fd5a:	83 c4 10             	add    esp,0x10
c000fd5d:	89 c1                	mov    ecx,eax
c000fd5f:	b8 01 00 00 00       	mov    eax,0x1
c000fd64:	85 c9                	test   ecx,ecx
c000fd66:	74 57                	je     c000fdbf <Sys::getVGAPtr(regs*)+0x78>
c000fd68:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c000fd6e:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000fd72:	74 0c                	je     c000fd80 <Sys::getVGAPtr(regs*)+0x39>
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	55                   	push   ebp
c000fd78:	e8 14 7b ff ff       	call   c0007891 <setActiveTerminal(VgaText*)>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c000fd83:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c000fd86:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c000fd8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd8d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fd90:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fd93:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c000fd99:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fd9c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000fd9f:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c000fda5:	50                   	push   eax
c000fda6:	50                   	push   eax
c000fda7:	68 d0 dd 01 c0       	push   0xc001ddd0
c000fdac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fdaf:	05 a8 0f 00 00       	add    eax,0xfa8
c000fdb4:	50                   	push   eax
c000fdb5:	e8 66 08 ff ff       	call   c0000620 <strcpy>
c000fdba:	83 c4 10             	add    esp,0x10
c000fdbd:	31 c0                	xor    eax,eax
c000fdbf:	83 c4 0c             	add    esp,0xc
c000fdc2:	31 d2                	xor    edx,edx
c000fdc4:	5b                   	pop    ebx
c000fdc5:	5e                   	pop    esi
c000fdc6:	5f                   	pop    edi
c000fdc7:	5d                   	pop    ebp
c000fdc8:	c3                   	ret    

c000fdc9 <Sys::loadDLL(regs*)>:
c000fdc9:	56                   	push   esi
c000fdca:	53                   	push   ebx
c000fdcb:	31 d2                	xor    edx,edx
c000fdcd:	51                   	push   ecx
c000fdce:	b8 01 00 00 00       	mov    eax,0x1
c000fdd3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fdd7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000fddb:	0f 84 8c 00 00 00    	je     c000fe6d <Sys::loadDLL(regs*)+0xa4>
c000fde1:	83 ec 0c             	sub    esp,0xc
c000fde4:	68 14 01 00 00       	push   0x114
c000fde9:	e8 73 6d ff ff       	call   c0006b61 <malloc>
c000fdee:	83 c4 0c             	add    esp,0xc
c000fdf1:	89 c3                	mov    ebx,eax
c000fdf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fdf8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fdfb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000fdfe:	53                   	push   ebx
c000fdff:	e8 62 a0 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c000fe04:	83 c4 10             	add    esp,0x10
c000fe07:	31 d2                	xor    edx,edx
c000fe09:	b8 02 00 00 00       	mov    eax,0x2
c000fe0e:	85 db                	test   ebx,ebx
c000fe10:	74 5b                	je     c000fe6d <Sys::loadDLL(regs*)+0xa4>
c000fe12:	83 ec 0c             	sub    esp,0xc
c000fe15:	53                   	push   ebx
c000fe16:	e8 79 a3 ff ff       	call   c000a194 <File::exists()>
c000fe1b:	83 c4 10             	add    esp,0x10
c000fe1e:	84 c0                	test   al,al
c000fe20:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe22:	75 11                	jne    c000fe35 <Sys::loadDLL(regs*)+0x6c>
c000fe24:	83 ec 0c             	sub    esp,0xc
c000fe27:	53                   	push   ebx
c000fe28:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fe2b:	83 c4 10             	add    esp,0x10
c000fe2e:	b8 03 00 00 00       	mov    eax,0x3
c000fe33:	eb 36                	jmp    c000fe6b <Sys::loadDLL(regs*)+0xa2>
c000fe35:	83 ec 0c             	sub    esp,0xc
c000fe38:	53                   	push   ebx
c000fe39:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fe3c:	58                   	pop    eax
c000fe3d:	5a                   	pop    edx
c000fe3e:	6a 00                	push   0x0
c000fe40:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000fe43:	e8 77 20 00 00       	call   c0011ebf <Thr::loadDLL(char const*, bool)>
c000fe48:	83 c4 10             	add    esp,0x10
c000fe4b:	89 c1                	mov    ecx,eax
c000fe4d:	31 d2                	xor    edx,edx
c000fe4f:	b8 04 00 00 00       	mov    eax,0x4
c000fe54:	85 c9                	test   ecx,ecx
c000fe56:	74 15                	je     c000fe6d <Sys::loadDLL(regs*)+0xa4>
c000fe58:	53                   	push   ebx
c000fe59:	53                   	push   ebx
c000fe5a:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000fe60:	51                   	push   ecx
c000fe61:	e8 8a 22 00 00       	call   c00120f0 <Thr::executeDLL(unsigned long, void*)>
c000fe66:	83 c4 10             	add    esp,0x10
c000fe69:	31 c0                	xor    eax,eax
c000fe6b:	31 d2                	xor    edx,edx
c000fe6d:	59                   	pop    ecx
c000fe6e:	5b                   	pop    ebx
c000fe6f:	5e                   	pop    esi
c000fe70:	c3                   	ret    

c000fe71 <Sys::read(regs*)>:
c000fe71:	57                   	push   edi
c000fe72:	56                   	push   esi
c000fe73:	53                   	push   ebx
c000fe74:	83 ec 10             	sub    esp,0x10
c000fe77:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fe7b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fe7e:	83 f8 02             	cmp    eax,0x2
c000fe81:	77 10                	ja     c000fe93 <Sys::read(regs*)+0x22>
c000fe83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fe88:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fe8b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c000fe91:	eb 0e                	jmp    c000fea1 <Sys::read(regs*)+0x30>
c000fe93:	83 ec 0c             	sub    esp,0xc
c000fe96:	50                   	push   eax
c000fe97:	e8 ab 86 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c000fe9c:	83 c4 10             	add    esp,0x10
c000fe9f:	89 c1                	mov    ecx,eax
c000fea1:	83 c8 ff             	or     eax,0xffffffff
c000fea4:	85 c9                	test   ecx,ecx
c000fea6:	89 c2                	mov    edx,eax
c000fea8:	74 28                	je     c000fed2 <Sys::read(regs*)+0x61>
c000feaa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000feb2:	31 ff                	xor    edi,edi
c000feb4:	83 ec 0c             	sub    esp,0xc
c000feb7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000feb9:	8d 54 24 18          	lea    edx,[esp+0x18]
c000febd:	52                   	push   edx
c000febe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000fec1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c000fec4:	57                   	push   edi
c000fec5:	56                   	push   esi
c000fec6:	51                   	push   ecx
c000fec7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000feca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000fece:	83 c4 20             	add    esp,0x20
c000fed1:	99                   	cdq    
c000fed2:	83 c4 10             	add    esp,0x10
c000fed5:	5b                   	pop    ebx
c000fed6:	5e                   	pop    esi
c000fed7:	5f                   	pop    edi
c000fed8:	c3                   	ret    

c000fed9 <Sys::sbrk(regs*)>:
c000fed9:	56                   	push   esi
c000feda:	53                   	push   ebx
c000fedb:	50                   	push   eax
c000fedc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fee1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fee5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fee8:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c000feeb:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000fef1:	85 db                	test   ebx,ebx
c000fef3:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c000fef6:	74 02                	je     c000fefa <Sys::sbrk(regs*)+0x21>
c000fef8:	79 06                	jns    c000ff00 <Sys::sbrk(regs*)+0x27>
c000fefa:	89 f0                	mov    eax,esi
c000fefc:	31 d2                	xor    edx,edx
c000fefe:	eb 2a                	jmp    c000ff2a <Sys::sbrk(regs*)+0x51>
c000ff00:	83 c8 ff             	or     eax,0xffffffff
c000ff03:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c000ff09:	89 c2                	mov    edx,eax
c000ff0b:	77 1d                	ja     c000ff2a <Sys::sbrk(regs*)+0x51>
c000ff0d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c000ff13:	50                   	push   eax
c000ff14:	c1 ea 0c             	shr    edx,0xc
c000ff17:	68 07 0c 00 00       	push   0xc07
c000ff1c:	52                   	push   edx
c000ff1d:	51                   	push   ecx
c000ff1e:	e8 13 8f ff ff       	call   c0008e36 <VAS::allocatePages(int, int)>
c000ff23:	89 f0                	mov    eax,esi
c000ff25:	31 d2                	xor    edx,edx
c000ff27:	83 c4 10             	add    esp,0x10
c000ff2a:	59                   	pop    ecx
c000ff2b:	5b                   	pop    ebx
c000ff2c:	5e                   	pop    esi
c000ff2d:	c3                   	ret    

c000ff2e <Sys::setCwd(regs*)>:
c000ff2e:	83 ec 14             	sub    esp,0x14
c000ff31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff35:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000ff38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff3d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000ff40:	e8 ee a2 ff ff       	call   c000a233 <Fs::setcwd(Process*, char*)>
c000ff45:	83 c4 1c             	add    esp,0x1c
c000ff48:	99                   	cdq    
c000ff49:	c3                   	ret    

c000ff4a <Sys::setTime(regs*)>:
c000ff4a:	55                   	push   ebp
c000ff4b:	31 c9                	xor    ecx,ecx
c000ff4d:	57                   	push   edi
c000ff4e:	bd 0c 00 00 00       	mov    ebp,0xc
c000ff53:	56                   	push   esi
c000ff54:	53                   	push   ebx
c000ff55:	31 db                	xor    ebx,ebx
c000ff57:	83 ec 10             	sub    esp,0x10
c000ff5a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ff5e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c000ff61:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ff64:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c000ff67:	89 c2                	mov    edx,eax
c000ff69:	66 81 ef 6c 07       	sub    di,0x76c
c000ff6e:	83 e2 1f             	and    edx,0x1f
c000ff71:	c1 e7 10             	shl    edi,0x10
c000ff74:	42                   	inc    edx
c000ff75:	c1 e8 05             	shr    eax,0x5
c000ff78:	88 d1                	mov    cl,dl
c000ff7a:	31 d2                	xor    edx,edx
c000ff7c:	f7 f5                	div    ebp
c000ff7e:	89 dd                	mov    ebp,ebx
c000ff80:	88 d5                	mov    ch,dl
c000ff82:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c000ff88:	0f b7 c1             	movzx  eax,cx
c000ff8b:	31 d2                	xor    edx,edx
c000ff8d:	09 f8                	or     eax,edi
c000ff8f:	bf 3c 00 00 00       	mov    edi,0x3c
c000ff94:	89 c1                	mov    ecx,eax
c000ff96:	89 f0                	mov    eax,esi
c000ff98:	f7 f7                	div    edi
c000ff9a:	c1 e2 10             	shl    edx,0x10
c000ff9d:	09 d5                	or     ebp,edx
c000ff9f:	31 d2                	xor    edx,edx
c000ffa1:	89 eb                	mov    ebx,ebp
c000ffa3:	f7 f7                	div    edi
c000ffa5:	bf 10 0e 00 00       	mov    edi,0xe10
c000ffaa:	88 d7                	mov    bh,dl
c000ffac:	89 f0                	mov    eax,esi
c000ffae:	31 d2                	xor    edx,edx
c000ffb0:	f7 f7                	div    edi
c000ffb2:	bf 18 00 00 00       	mov    edi,0x18
c000ffb7:	31 d2                	xor    edx,edx
c000ffb9:	f7 f7                	div    edi
c000ffbb:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000ffc0:	88 d3                	mov    bl,dl
c000ffc2:	53                   	push   ebx
c000ffc3:	51                   	push   ecx
c000ffc4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000ffca:	e8 75 aa ff ff       	call   c000aa44 <Clock::setTimeInDatetimeLocal(datetime_t)>
c000ffcf:	83 c4 1c             	add    esp,0x1c
c000ffd2:	83 f0 01             	xor    eax,0x1
c000ffd5:	5b                   	pop    ebx
c000ffd6:	0f b6 c0             	movzx  eax,al
c000ffd9:	5e                   	pop    esi
c000ffda:	31 d2                	xor    edx,edx
c000ffdc:	5f                   	pop    edi
c000ffdd:	5d                   	pop    ebp
c000ffde:	c3                   	ret    

c000ffdf <Sys::timezone(regs*)>:
c000ffdf:	53                   	push   ebx
c000ffe0:	83 ec 08             	sub    esp,0x8
c000ffe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffe7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c000ffeb:	75 17                	jne    c0010004 <Sys::timezone(regs*)+0x25>
c000ffed:	83 ec 0c             	sub    esp,0xc
c000fff0:	68 da dd 01 c0       	push   0xc001ddda
c000fff5:	e8 f6 98 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c000fffa:	83 c8 ff             	or     eax,0xffffffff
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	89 c2                	mov    edx,eax
c0010002:	eb 20                	jmp    c0010024 <Sys::timezone(regs*)+0x45>
c0010004:	83 ec 0c             	sub    esp,0xc
c0010007:	68 ef dd 01 c0       	push   0xc001ddef
c001000c:	e8 df 98 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0010011:	58                   	pop    eax
c0010012:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010015:	e8 86 a7 ff ff       	call   c000a7a0 <User::loadClockSettings(int)>
c001001a:	83 c4 10             	add    esp,0x10
c001001d:	b8 01 00 00 00       	mov    eax,0x1
c0010022:	31 d2                	xor    edx,edx
c0010024:	83 c4 08             	add    esp,0x8
c0010027:	5b                   	pop    ebx
c0010028:	c3                   	ret    

c0010029 <Sys::write(regs*)>:
c0010029:	57                   	push   edi
c001002a:	56                   	push   esi
c001002b:	53                   	push   ebx
c001002c:	83 ec 10             	sub    esp,0x10
c001002f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010033:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010036:	83 f8 02             	cmp    eax,0x2
c0010039:	77 10                	ja     c001004b <Sys::write(regs*)+0x22>
c001003b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010040:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010043:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0010049:	eb 0e                	jmp    c0010059 <Sys::write(regs*)+0x30>
c001004b:	83 ec 0c             	sub    esp,0xc
c001004e:	50                   	push   eax
c001004f:	e8 f3 84 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c0010054:	83 c4 10             	add    esp,0x10
c0010057:	89 c1                	mov    ecx,eax
c0010059:	83 c8 ff             	or     eax,0xffffffff
c001005c:	85 c9                	test   ecx,ecx
c001005e:	89 c2                	mov    edx,eax
c0010060:	74 28                	je     c001008a <Sys::write(regs*)+0x61>
c0010062:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001006a:	31 ff                	xor    edi,edi
c001006c:	83 ec 0c             	sub    esp,0xc
c001006f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010071:	8d 54 24 18          	lea    edx,[esp+0x18]
c0010075:	52                   	push   edx
c0010076:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010079:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001007c:	57                   	push   edi
c001007d:	56                   	push   esi
c001007e:	51                   	push   ecx
c001007f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010082:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010086:	83 c4 20             	add    esp,0x20
c0010089:	99                   	cdq    
c001008a:	83 c4 10             	add    esp,0x10
c001008d:	5b                   	pop    ebx
c001008e:	5e                   	pop    esi
c001008f:	5f                   	pop    edi
c0010090:	c3                   	ret    

c0010091 <Sys::wsbe(regs*)>:
c0010091:	57                   	push   edi
c0010092:	b9 0b 00 00 00       	mov    ecx,0xb
c0010097:	56                   	push   esi
c0010098:	be 2e de 01 c0       	mov    esi,0xc001de2e
c001009d:	53                   	push   ebx
c001009e:	83 ec 30             	sub    esp,0x30
c00100a1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00100a5:	fc                   	cld    
c00100a6:	83 ec 0c             	sub    esp,0xc
c00100a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00100ab:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00100af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00100b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00100b7:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00100bd:	8b 06                	mov    eax,DWORD PTR [esi]
c00100bf:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00100c2:	57                   	push   edi
c00100c3:	e8 98 04 ff ff       	call   c0000560 <strlen>
c00100c8:	5a                   	pop    edx
c00100c9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00100cd:	52                   	push   edx
c00100ce:	31 d2                	xor    edx,edx
c00100d0:	57                   	push   edi
c00100d1:	52                   	push   edx
c00100d2:	50                   	push   eax
c00100d3:	56                   	push   esi
c00100d4:	ff d3                	call   ebx
c00100d6:	83 c4 14             	add    esp,0x14
c00100d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00100dd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00100e0:	e8 f3 30 00 00       	call   c00131d8 <terminateTask(int)>
c00100e5:	83 c4 40             	add    esp,0x40
c00100e8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00100ed:	5b                   	pop    ebx
c00100ee:	31 d2                	xor    edx,edx
c00100f0:	5e                   	pop    esi
c00100f1:	5f                   	pop    edi
c00100f2:	c3                   	ret    

c00100f3 <Sys::yield(regs*)>:
c00100f3:	83 ec 0c             	sub    esp,0xc
c00100f6:	fa                   	cli    
c00100f7:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c00100fd:	e8 b2 27 00 00       	call   c00128b4 <schedule()>
c0010102:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0010107:	48                   	dec    eax
c0010108:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c001010d:	75 01                	jne    c0010110 <Sys::yield(regs*)+0x1d>
c001010f:	fb                   	sti    
c0010110:	31 c0                	xor    eax,eax
c0010112:	31 d2                	xor    edx,edx
c0010114:	83 c4 0c             	add    esp,0xc
c0010117:	c3                   	ret    

c0010118 <sysCallSeekDir(regs*)>:
c0010118:	31 c0                	xor    eax,eax
c001011a:	31 d2                	xor    edx,edx
c001011c:	c3                   	ret    

c001011d <sysCallTellDir(regs*)>:
c001011d:	31 c0                	xor    eax,eax
c001011f:	31 d2                	xor    edx,edx
c0010121:	c3                   	ret    

c0010122 <sysCallVerify(regs*)>:
c0010122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010126:	31 d2                	xor    edx,edx
c0010128:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001012b:	c3                   	ret    

c001012c <sysCallGetArgc(regs*)>:
c001012c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010131:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010134:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001013a:	99                   	cdq    
c001013b:	c3                   	ret    

c001013c <sysCallTTYName(regs*)>:
c001013c:	b8 01 00 00 00       	mov    eax,0x1
c0010141:	31 d2                	xor    edx,edx
c0010143:	c3                   	ret    

c0010144 <sysFormatDisk(regs*)>:
c0010144:	56                   	push   esi
c0010145:	53                   	push   ebx
c0010146:	50                   	push   eax
c0010147:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001014b:	8b 1d 14 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f514
c0010151:	eb 28                	jmp    c001017b <sysFormatDisk(regs*)+0x37>
c0010153:	83 ec 0c             	sub    esp,0xc
c0010156:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010159:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001015c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001015e:	51                   	push   ecx
c001015f:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010162:	51                   	push   ecx
c0010163:	50                   	push   eax
c0010164:	8b 04 85 80 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde680]
c001016b:	50                   	push   eax
c001016c:	53                   	push   ebx
c001016d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010170:	83 c4 20             	add    esp,0x20
c0010173:	83 f8 08             	cmp    eax,0x8
c0010176:	75 12                	jne    c001018a <sysFormatDisk(regs*)+0x46>
c0010178:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001017b:	85 db                	test   ebx,ebx
c001017d:	75 d4                	jne    c0010153 <sysFormatDisk(regs*)+0xf>
c001017f:	59                   	pop    ecx
c0010180:	b8 03 00 00 00       	mov    eax,0x3
c0010185:	31 d2                	xor    edx,edx
c0010187:	5b                   	pop    ebx
c0010188:	5e                   	pop    esi
c0010189:	c3                   	ret    
c001018a:	85 c0                	test   eax,eax
c001018c:	74 1b                	je     c00101a9 <sysFormatDisk(regs*)+0x65>
c001018e:	83 f8 09             	cmp    eax,0x9
c0010191:	74 0b                	je     c001019e <sysFormatDisk(regs*)+0x5a>
c0010193:	59                   	pop    ecx
c0010194:	b8 02 00 00 00       	mov    eax,0x2
c0010199:	31 d2                	xor    edx,edx
c001019b:	5b                   	pop    ebx
c001019c:	5e                   	pop    esi
c001019d:	c3                   	ret    
c001019e:	59                   	pop    ecx
c001019f:	b8 01 00 00 00       	mov    eax,0x1
c00101a4:	31 d2                	xor    edx,edx
c00101a6:	5b                   	pop    ebx
c00101a7:	5e                   	pop    esi
c00101a8:	c3                   	ret    
c00101a9:	59                   	pop    ecx
c00101aa:	31 c0                	xor    eax,eax
c00101ac:	31 d2                	xor    edx,edx
c00101ae:	5b                   	pop    ebx
c00101af:	5e                   	pop    esi
c00101b0:	c3                   	ret    

c00101b1 <sysSetDiskVolumeLabel(regs*)>:
c00101b1:	56                   	push   esi
c00101b2:	53                   	push   ebx
c00101b3:	53                   	push   ebx
c00101b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00101b8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00101bb:	83 f8 19             	cmp    eax,0x19
c00101be:	77 2d                	ja     c00101ed <sysSetDiskVolumeLabel(regs*)+0x3c>
c00101c0:	8b 0c 85 80 19 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde680]
c00101c7:	85 c9                	test   ecx,ecx
c00101c9:	74 22                	je     c00101ed <sysSetDiskVolumeLabel(regs*)+0x3c>
c00101cb:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00101ce:	85 db                	test   ebx,ebx
c00101d0:	74 1b                	je     c00101ed <sysSetDiskVolumeLabel(regs*)+0x3c>
c00101d2:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00101d8:	85 d2                	test   edx,edx
c00101da:	74 11                	je     c00101ed <sysSetDiskVolumeLabel(regs*)+0x3c>
c00101dc:	8b 32                	mov    esi,DWORD PTR [edx]
c00101de:	53                   	push   ebx
c00101df:	50                   	push   eax
c00101e0:	51                   	push   ecx
c00101e1:	52                   	push   edx
c00101e2:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00101e5:	83 c4 10             	add    esp,0x10
c00101e8:	99                   	cdq    
c00101e9:	59                   	pop    ecx
c00101ea:	5b                   	pop    ebx
c00101eb:	5e                   	pop    esi
c00101ec:	c3                   	ret    
c00101ed:	59                   	pop    ecx
c00101ee:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00101f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00101f8:	5b                   	pop    ebx
c00101f9:	5e                   	pop    esi
c00101fa:	c3                   	ret    

c00101fb <sysGetDiskVolumeLabel(regs*)>:
c00101fb:	57                   	push   edi
c00101fc:	56                   	push   esi
c00101fd:	53                   	push   ebx
c00101fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010202:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010205:	83 fa 19             	cmp    edx,0x19
c0010208:	77 38                	ja     c0010242 <sysGetDiskVolumeLabel(regs*)+0x47>
c001020a:	8b 0c 95 80 19 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffde680]
c0010211:	85 c9                	test   ecx,ecx
c0010213:	74 2d                	je     c0010242 <sysGetDiskVolumeLabel(regs*)+0x47>
c0010215:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010218:	85 db                	test   ebx,ebx
c001021a:	74 26                	je     c0010242 <sysGetDiskVolumeLabel(regs*)+0x47>
c001021c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001021f:	85 f6                	test   esi,esi
c0010221:	74 1f                	je     c0010242 <sysGetDiskVolumeLabel(regs*)+0x47>
c0010223:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010229:	85 c0                	test   eax,eax
c001022b:	74 15                	je     c0010242 <sysGetDiskVolumeLabel(regs*)+0x47>
c001022d:	83 ec 0c             	sub    esp,0xc
c0010230:	8b 38                	mov    edi,DWORD PTR [eax]
c0010232:	56                   	push   esi
c0010233:	53                   	push   ebx
c0010234:	52                   	push   edx
c0010235:	51                   	push   ecx
c0010236:	50                   	push   eax
c0010237:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001023a:	83 c4 20             	add    esp,0x20
c001023d:	99                   	cdq    
c001023e:	5b                   	pop    ebx
c001023f:	5e                   	pop    esi
c0010240:	5f                   	pop    edi
c0010241:	c3                   	ret    
c0010242:	5b                   	pop    ebx
c0010243:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010248:	ba ff ff ff ff       	mov    edx,0xffffffff
c001024d:	5e                   	pop    esi
c001024e:	5f                   	pop    edi
c001024f:	c3                   	ret    

c0010250 <sysShutdown(regs*)>:
c0010250:	83 ec 0c             	sub    esp,0xc
c0010253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010257:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001025a:	85 c0                	test   eax,eax
c001025c:	74 18                	je     c0010276 <sysShutdown(regs*)+0x26>
c001025e:	83 f8 01             	cmp    eax,0x1
c0010261:	74 38                	je     c001029b <sysShutdown(regs*)+0x4b>
c0010263:	83 f8 02             	cmp    eax,0x2
c0010266:	74 24                	je     c001028c <sysShutdown(regs*)+0x3c>
c0010268:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001026d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010272:	83 c4 0c             	add    esp,0xc
c0010275:	c3                   	ret    
c0010276:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c001027b:	8b 10                	mov    edx,DWORD PTR [eax]
c001027d:	6a 00                	push   0x0
c001027f:	6a 00                	push   0x0
c0010281:	6a 00                	push   0x0
c0010283:	50                   	push   eax
c0010284:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010287:	83 c4 10             	add    esp,0x10
c001028a:	eb dc                	jmp    c0010268 <sysShutdown(regs*)+0x18>
c001028c:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0010291:	8b 10                	mov    edx,DWORD PTR [eax]
c0010293:	6a 00                	push   0x0
c0010295:	6a 00                	push   0x0
c0010297:	6a 01                	push   0x1
c0010299:	eb e8                	jmp    c0010283 <sysShutdown(regs*)+0x33>
c001029b:	a1 00 1a 02 c0       	mov    eax,ds:0xc0021a00
c00102a0:	85 c0                	test   eax,eax
c00102a2:	74 02                	je     c00102a6 <sysShutdown(regs*)+0x56>
c00102a4:	ff d0                	call   eax
c00102a6:	31 c0                	xor    eax,eax
c00102a8:	31 d2                	xor    edx,edx
c00102aa:	83 c4 0c             	add    esp,0xc
c00102ad:	c3                   	ret    

c00102ae <sysCallRealpath(regs*)>:
c00102ae:	83 ec 0c             	sub    esp,0xc
c00102b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00102b8:	85 d2                	test   edx,edx
c00102ba:	74 07                	je     c00102c3 <sysCallRealpath(regs*)+0x15>
c00102bc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00102bf:	85 c0                	test   eax,eax
c00102c1:	75 0b                	jne    c00102ce <sysCallRealpath(regs*)+0x20>
c00102c3:	b8 01 00 00 00       	mov    eax,0x1
c00102c8:	31 d2                	xor    edx,edx
c00102ca:	83 c4 0c             	add    esp,0xc
c00102cd:	c3                   	ret    
c00102ce:	51                   	push   ecx
c00102cf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00102d5:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00102d8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00102de:	51                   	push   ecx
c00102df:	52                   	push   edx
c00102e0:	50                   	push   eax
c00102e1:	e8 d6 99 ff ff       	call   c0009cbc <Fs::standardiseFiles(char*, char const*, char const*)>
c00102e6:	83 c4 10             	add    esp,0x10
c00102e9:	31 c0                	xor    eax,eax
c00102eb:	31 d2                	xor    edx,edx
c00102ed:	83 c4 0c             	add    esp,0xc
c00102f0:	c3                   	ret    

c00102f1 <sysCallReadDir(regs*)>:
c00102f1:	53                   	push   ebx
c00102f2:	83 ec 18             	sub    esp,0x18
c00102f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00102f9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00102fc:	83 f8 02             	cmp    eax,0x2
c00102ff:	76 61                	jbe    c0010362 <sysCallReadDir(regs*)+0x71>
c0010301:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010308:	77 49                	ja     c0010353 <sysCallReadDir(regs*)+0x62>
c001030a:	83 ec 0c             	sub    esp,0xc
c001030d:	50                   	push   eax
c001030e:	e8 34 82 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c0010313:	83 c4 10             	add    esp,0x10
c0010316:	85 c0                	test   eax,eax
c0010318:	74 39                	je     c0010353 <sysCallReadDir(regs*)+0x62>
c001031a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010322:	83 ec 0c             	sub    esp,0xc
c0010325:	8b 10                	mov    edx,DWORD PTR [eax]
c0010327:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001032b:	51                   	push   ecx
c001032c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001032f:	51                   	push   ecx
c0010330:	6a 00                	push   0x0
c0010332:	68 10 01 00 00       	push   0x110
c0010337:	50                   	push   eax
c0010338:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001033b:	83 c4 20             	add    esp,0x20
c001033e:	85 c0                	test   eax,eax
c0010340:	74 29                	je     c001036b <sysCallReadDir(regs*)+0x7a>
c0010342:	83 f8 07             	cmp    eax,0x7
c0010345:	74 1b                	je     c0010362 <sysCallReadDir(regs*)+0x71>
c0010347:	b8 02 00 00 00       	mov    eax,0x2
c001034c:	31 d2                	xor    edx,edx
c001034e:	83 c4 18             	add    esp,0x18
c0010351:	5b                   	pop    ebx
c0010352:	c3                   	ret    
c0010353:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010358:	ba ff ff ff ff       	mov    edx,0xffffffff
c001035d:	83 c4 18             	add    esp,0x18
c0010360:	5b                   	pop    ebx
c0010361:	c3                   	ret    
c0010362:	b8 01 00 00 00       	mov    eax,0x1
c0010367:	31 d2                	xor    edx,edx
c0010369:	eb e3                	jmp    c001034e <sysCallReadDir(regs*)+0x5d>
c001036b:	31 c0                	xor    eax,eax
c001036d:	31 d2                	xor    edx,edx
c001036f:	eb dd                	jmp    c001034e <sysCallReadDir(regs*)+0x5d>

c0010371 <sysCallIsATTY(regs*)>:
c0010371:	83 ec 0c             	sub    esp,0xc
c0010374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010378:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001037b:	83 f8 02             	cmp    eax,0x2
c001037e:	76 07                	jbe    c0010387 <sysCallIsATTY(regs*)+0x16>
c0010380:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010385:	75 28                	jne    c00103af <sysCallIsATTY(regs*)+0x3e>
c0010387:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001038c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001038f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010395:	85 c0                	test   eax,eax
c0010397:	74 26                	je     c00103bf <sysCallIsATTY(regs*)+0x4e>
c0010399:	83 ec 0c             	sub    esp,0xc
c001039c:	8b 10                	mov    edx,DWORD PTR [eax]
c001039e:	50                   	push   eax
c001039f:	ff 12                	call   DWORD PTR [edx]
c00103a1:	31 d2                	xor    edx,edx
c00103a3:	25 ff 00 00 00       	and    eax,0xff
c00103a8:	83 c4 10             	add    esp,0x10
c00103ab:	83 c4 0c             	add    esp,0xc
c00103ae:	c3                   	ret    
c00103af:	83 ec 0c             	sub    esp,0xc
c00103b2:	50                   	push   eax
c00103b3:	e8 8f 81 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c00103b8:	83 c4 10             	add    esp,0x10
c00103bb:	85 c0                	test   eax,eax
c00103bd:	75 da                	jne    c0010399 <sysCallIsATTY(regs*)+0x28>
c00103bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103c9:	83 c4 0c             	add    esp,0xc
c00103cc:	c3                   	ret    

c00103cd <sysCallSeek(regs*)>:
c00103cd:	53                   	push   ebx
c00103ce:	83 ec 08             	sub    esp,0x8
c00103d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103d5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00103d8:	8d 50 fd             	lea    edx,[eax-0x3]
c00103db:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00103e1:	77 34                	ja     c0010417 <sysCallSeek(regs*)+0x4a>
c00103e3:	83 ec 0c             	sub    esp,0xc
c00103e6:	50                   	push   eax
c00103e7:	e8 5b 81 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c00103ec:	83 c4 0c             	add    esp,0xc
c00103ef:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00103f2:	31 db                	xor    ebx,ebx
c00103f4:	53                   	push   ebx
c00103f5:	51                   	push   ecx
c00103f6:	50                   	push   eax
c00103f7:	e8 e8 9b ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c00103fc:	83 c4 10             	add    esp,0x10
c00103ff:	85 c0                	test   eax,eax
c0010401:	0f 95 c0             	setne  al
c0010404:	31 d2                	xor    edx,edx
c0010406:	25 ff 00 00 00       	and    eax,0xff
c001040b:	f7 d8                	neg    eax
c001040d:	83 d2 00             	adc    edx,0x0
c0010410:	83 c4 08             	add    esp,0x8
c0010413:	f7 da                	neg    edx
c0010415:	5b                   	pop    ebx
c0010416:	c3                   	ret    
c0010417:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001041c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010421:	83 c4 08             	add    esp,0x8
c0010424:	5b                   	pop    ebx
c0010425:	c3                   	ret    

c0010426 <sysCallTell(regs*)>:
c0010426:	53                   	push   ebx
c0010427:	83 ec 08             	sub    esp,0x8
c001042a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001042e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010431:	83 f8 02             	cmp    eax,0x2
c0010434:	76 50                	jbe    c0010486 <sysCallTell(regs*)+0x60>
c0010436:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001043b:	76 19                	jbe    c0010456 <sysCallTell(regs*)+0x30>
c001043d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010440:	31 d2                	xor    edx,edx
c0010442:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010448:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001044f:	31 c0                	xor    eax,eax
c0010451:	83 c4 08             	add    esp,0x8
c0010454:	5b                   	pop    ebx
c0010455:	c3                   	ret    
c0010456:	83 ec 0c             	sub    esp,0xc
c0010459:	50                   	push   eax
c001045a:	e8 e8 80 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c001045f:	5a                   	pop    edx
c0010460:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010463:	59                   	pop    ecx
c0010464:	53                   	push   ebx
c0010465:	50                   	push   eax
c0010466:	e8 cf 9b ff ff       	call   c000a03a <File::tell(unsigned long long*)>
c001046b:	83 c4 10             	add    esp,0x10
c001046e:	85 c0                	test   eax,eax
c0010470:	0f 95 c0             	setne  al
c0010473:	31 d2                	xor    edx,edx
c0010475:	25 ff 00 00 00       	and    eax,0xff
c001047a:	f7 d8                	neg    eax
c001047c:	83 d2 00             	adc    edx,0x0
c001047f:	83 c4 08             	add    esp,0x8
c0010482:	f7 da                	neg    edx
c0010484:	5b                   	pop    ebx
c0010485:	c3                   	ret    
c0010486:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001048b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010490:	83 c4 08             	add    esp,0x8
c0010493:	5b                   	pop    ebx
c0010494:	c3                   	ret    

c0010495 <sysCallSize(regs*)>:
c0010495:	53                   	push   ebx
c0010496:	83 ec 18             	sub    esp,0x18
c0010499:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001049d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00104a0:	83 f8 02             	cmp    eax,0x2
c00104a3:	76 56                	jbe    c00104fb <sysCallSize(regs*)+0x66>
c00104a5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00104aa:	76 19                	jbe    c00104c5 <sysCallSize(regs*)+0x30>
c00104ac:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00104af:	31 d2                	xor    edx,edx
c00104b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00104b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104be:	31 c0                	xor    eax,eax
c00104c0:	83 c4 18             	add    esp,0x18
c00104c3:	5b                   	pop    ebx
c00104c4:	c3                   	ret    
c00104c5:	83 ec 0c             	sub    esp,0xc
c00104c8:	50                   	push   eax
c00104c9:	e8 79 80 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c00104ce:	83 c4 0c             	add    esp,0xc
c00104d1:	8d 54 24 13          	lea    edx,[esp+0x13]
c00104d5:	52                   	push   edx
c00104d6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00104d9:	52                   	push   edx
c00104da:	50                   	push   eax
c00104db:	e8 f2 9c ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c00104e0:	83 c4 10             	add    esp,0x10
c00104e3:	85 c0                	test   eax,eax
c00104e5:	0f 95 c0             	setne  al
c00104e8:	31 d2                	xor    edx,edx
c00104ea:	25 ff 00 00 00       	and    eax,0xff
c00104ef:	f7 d8                	neg    eax
c00104f1:	83 d2 00             	adc    edx,0x0
c00104f4:	83 c4 18             	add    esp,0x18
c00104f7:	f7 da                	neg    edx
c00104f9:	5b                   	pop    ebx
c00104fa:	c3                   	ret    
c00104fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010500:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010505:	83 c4 18             	add    esp,0x18
c0010508:	5b                   	pop    ebx
c0010509:	c3                   	ret    

c001050a <sysCallSizeFromFilename(regs*)>:
c001050a:	57                   	push   edi
c001050b:	56                   	push   esi
c001050c:	53                   	push   ebx
c001050d:	83 ec 20             	sub    esp,0x20
c0010510:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010514:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010517:	83 fb 02             	cmp    ebx,0x2
c001051a:	0f 86 8c 00 00 00    	jbe    c00105ac <sysCallSizeFromFilename(regs*)+0xa2>
c0010520:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010526:	76 1b                	jbe    c0010543 <sysCallSizeFromFilename(regs*)+0x39>
c0010528:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001052b:	31 d2                	xor    edx,edx
c001052d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010533:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001053a:	83 c4 20             	add    esp,0x20
c001053d:	31 c0                	xor    eax,eax
c001053f:	5b                   	pop    ebx
c0010540:	5e                   	pop    esi
c0010541:	5f                   	pop    edi
c0010542:	c3                   	ret    
c0010543:	83 ec 0c             	sub    esp,0xc
c0010546:	68 14 01 00 00       	push   0x114
c001054b:	e8 11 66 ff ff       	call   c0006b61 <malloc>
c0010550:	83 c4 0c             	add    esp,0xc
c0010553:	89 c7                	mov    edi,eax
c0010555:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001055a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001055d:	50                   	push   eax
c001055e:	53                   	push   ebx
c001055f:	57                   	push   edi
c0010560:	e8 01 99 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c0010565:	83 c4 0c             	add    esp,0xc
c0010568:	8d 44 24 23          	lea    eax,[esp+0x23]
c001056c:	50                   	push   eax
c001056d:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010570:	52                   	push   edx
c0010571:	57                   	push   edi
c0010572:	e8 5b 9c ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c0010577:	83 c4 10             	add    esp,0x10
c001057a:	85 ff                	test   edi,edi
c001057c:	74 14                	je     c0010592 <sysCallSizeFromFilename(regs*)+0x88>
c001057e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010582:	8b 17                	mov    edx,DWORD PTR [edi]
c0010584:	83 ec 0c             	sub    esp,0xc
c0010587:	57                   	push   edi
c0010588:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001058b:	83 c4 10             	add    esp,0x10
c001058e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010592:	85 c0                	test   eax,eax
c0010594:	0f 95 c0             	setne  al
c0010597:	31 d2                	xor    edx,edx
c0010599:	25 ff 00 00 00       	and    eax,0xff
c001059e:	f7 d8                	neg    eax
c00105a0:	83 d2 00             	adc    edx,0x0
c00105a3:	83 c4 20             	add    esp,0x20
c00105a6:	f7 da                	neg    edx
c00105a8:	5b                   	pop    ebx
c00105a9:	5e                   	pop    esi
c00105aa:	5f                   	pop    edi
c00105ab:	c3                   	ret    
c00105ac:	83 c4 20             	add    esp,0x20
c00105af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105b4:	5b                   	pop    ebx
c00105b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105ba:	5e                   	pop    esi
c00105bb:	5f                   	pop    edi
c00105bc:	c3                   	ret    

c00105bd <sysCallClose(regs*)>:
c00105bd:	53                   	push   ebx
c00105be:	83 ec 08             	sub    esp,0x8
c00105c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105c5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00105c8:	83 f8 02             	cmp    eax,0x2
c00105cb:	76 41                	jbe    c001060e <sysCallClose(regs*)+0x51>
c00105cd:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00105d3:	83 fa 01             	cmp    edx,0x1
c00105d6:	76 2d                	jbe    c0010605 <sysCallClose(regs*)+0x48>
c00105d8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00105dd:	77 2f                	ja     c001060e <sysCallClose(regs*)+0x51>
c00105df:	83 ec 0c             	sub    esp,0xc
c00105e2:	50                   	push   eax
c00105e3:	e8 5f 7f ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c00105e8:	89 c3                	mov    ebx,eax
c00105ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00105ed:	e8 92 99 ff ff       	call   c0009f84 <File::close()>
c00105f2:	83 c4 10             	add    esp,0x10
c00105f5:	85 db                	test   ebx,ebx
c00105f7:	74 0c                	je     c0010605 <sysCallClose(regs*)+0x48>
c00105f9:	83 ec 0c             	sub    esp,0xc
c00105fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105fe:	53                   	push   ebx
c00105ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010602:	83 c4 10             	add    esp,0x10
c0010605:	31 c0                	xor    eax,eax
c0010607:	31 d2                	xor    edx,edx
c0010609:	83 c4 08             	add    esp,0x8
c001060c:	5b                   	pop    ebx
c001060d:	c3                   	ret    
c001060e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010613:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010618:	83 c4 08             	add    esp,0x8
c001061b:	5b                   	pop    ebx
c001061c:	c3                   	ret    

c001061d <sysCallOpenDir(regs*)>:
c001061d:	56                   	push   esi
c001061e:	53                   	push   ebx
c001061f:	50                   	push   eax
c0010620:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010624:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010627:	85 c0                	test   eax,eax
c0010629:	74 5b                	je     c0010686 <sysCallOpenDir(regs*)+0x69>
c001062b:	83 ec 0c             	sub    esp,0xc
c001062e:	68 14 01 00 00       	push   0x114
c0010633:	e8 29 65 ff ff       	call   c0006b61 <malloc>
c0010638:	83 c4 0c             	add    esp,0xc
c001063b:	89 c6                	mov    esi,eax
c001063d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010642:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010645:	50                   	push   eax
c0010646:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010649:	50                   	push   eax
c001064a:	56                   	push   esi
c001064b:	e8 40 9d ff ff       	call   c000a390 <Directory::Directory(char const*, Process*)>
c0010650:	83 c4 10             	add    esp,0x10
c0010653:	85 f6                	test   esi,esi
c0010655:	74 2f                	je     c0010686 <sysCallOpenDir(regs*)+0x69>
c0010657:	83 ec 0c             	sub    esp,0xc
c001065a:	56                   	push   esi
c001065b:	e8 f0 9d ff ff       	call   c000a450 <Directory::open()>
c0010660:	83 c4 10             	add    esp,0x10
c0010663:	85 c0                	test   eax,eax
c0010665:	75 1f                	jne    c0010686 <sysCallOpenDir(regs*)+0x69>
c0010667:	83 ec 0c             	sub    esp,0xc
c001066a:	56                   	push   esi
c001066b:	e8 e2 7b ff ff       	call   c0008252 <UnixFile::getFileDescriptor()>
c0010670:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010673:	83 c4 10             	add    esp,0x10
c0010676:	89 02                	mov    DWORD PTR [edx],eax
c0010678:	c1 f8 1f             	sar    eax,0x1f
c001067b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001067e:	31 c0                	xor    eax,eax
c0010680:	59                   	pop    ecx
c0010681:	31 d2                	xor    edx,edx
c0010683:	5b                   	pop    ebx
c0010684:	5e                   	pop    esi
c0010685:	c3                   	ret    
c0010686:	59                   	pop    ecx
c0010687:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001068c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010691:	5b                   	pop    ebx
c0010692:	5e                   	pop    esi
c0010693:	c3                   	ret    

c0010694 <sysCallCloseDir(regs*)>:
c0010694:	53                   	push   ebx
c0010695:	83 ec 08             	sub    esp,0x8
c0010698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001069c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001069f:	8d 50 fd             	lea    edx,[eax-0x3]
c00106a2:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00106a8:	77 2f                	ja     c00106d9 <sysCallCloseDir(regs*)+0x45>
c00106aa:	83 ec 0c             	sub    esp,0xc
c00106ad:	50                   	push   eax
c00106ae:	e8 94 7e ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c00106b3:	89 c3                	mov    ebx,eax
c00106b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00106b8:	e8 ef 9d ff ff       	call   c000a4ac <Directory::close()>
c00106bd:	83 c4 10             	add    esp,0x10
c00106c0:	85 db                	test   ebx,ebx
c00106c2:	74 0c                	je     c00106d0 <sysCallCloseDir(regs*)+0x3c>
c00106c4:	83 ec 0c             	sub    esp,0xc
c00106c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106c9:	53                   	push   ebx
c00106ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00106cd:	83 c4 10             	add    esp,0x10
c00106d0:	31 c0                	xor    eax,eax
c00106d2:	31 d2                	xor    edx,edx
c00106d4:	83 c4 08             	add    esp,0x8
c00106d7:	5b                   	pop    ebx
c00106d8:	c3                   	ret    
c00106d9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106de:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106e3:	83 c4 08             	add    esp,0x8
c00106e6:	5b                   	pop    ebx
c00106e7:	c3                   	ret    

c00106e8 <sysCallMakeDir(regs*)>:
c00106e8:	56                   	push   esi
c00106e9:	53                   	push   ebx
c00106ea:	83 ec 10             	sub    esp,0x10
c00106ed:	68 14 01 00 00       	push   0x114
c00106f2:	e8 6a 64 ff ff       	call   c0006b61 <malloc>
c00106f7:	83 c4 0c             	add    esp,0xc
c00106fa:	89 c3                	mov    ebx,eax
c00106fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010701:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010704:	56                   	push   esi
c0010705:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010709:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001070c:	50                   	push   eax
c001070d:	53                   	push   ebx
c001070e:	e8 7d 9c ff ff       	call   c000a390 <Directory::Directory(char const*, Process*)>
c0010713:	83 c4 10             	add    esp,0x10
c0010716:	85 db                	test   ebx,ebx
c0010718:	74 32                	je     c001074c <sysCallMakeDir(regs*)+0x64>
c001071a:	83 ec 0c             	sub    esp,0xc
c001071d:	53                   	push   ebx
c001071e:	e8 0d 9f ff ff       	call   c000a630 <Directory::create()>
c0010723:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010726:	89 c6                	mov    esi,eax
c0010728:	e8 7f 9d ff ff       	call   c000a4ac <Directory::close()>
c001072d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001072f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010732:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010735:	83 c4 10             	add    esp,0x10
c0010738:	31 c0                	xor    eax,eax
c001073a:	59                   	pop    ecx
c001073b:	85 f6                	test   esi,esi
c001073d:	5b                   	pop    ebx
c001073e:	0f 95 c0             	setne  al
c0010741:	5e                   	pop    esi
c0010742:	31 d2                	xor    edx,edx
c0010744:	f7 d8                	neg    eax
c0010746:	83 d2 00             	adc    edx,0x0
c0010749:	f7 da                	neg    edx
c001074b:	c3                   	ret    
c001074c:	59                   	pop    ecx
c001074d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010752:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010757:	5b                   	pop    ebx
c0010758:	5e                   	pop    esi
c0010759:	c3                   	ret    

c001075a <sysCallWait(regs*)>:
c001075a:	83 ec 10             	sub    esp,0x10
c001075d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010761:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010764:	52                   	push   edx
c0010765:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010768:	51                   	push   ecx
c0010769:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001076c:	50                   	push   eax
c001076d:	e8 6e 23 00 00       	call   c0012ae0 <waitTask(int, int*, int)>
c0010772:	83 c4 1c             	add    esp,0x1c
c0010775:	99                   	cdq    
c0010776:	c3                   	ret    

c0010777 <sysCallNotImpl(regs*)>:
c0010777:	83 ec 18             	sub    esp,0x18
c001077a:	68 5a de 01 c0       	push   0xc001de5a
c001077f:	e8 bb ec ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0010784:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010789:	ba ff ff ff ff       	mov    edx,0xffffffff
c001078e:	83 c4 1c             	add    esp,0x1c
c0010791:	c3                   	ret    

c0010792 <sysPanic(regs*)>:
c0010792:	83 ec 18             	sub    esp,0x18
c0010795:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010799:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001079c:	50                   	push   eax
c001079d:	e8 9d ec ff ff       	call   c000f43f <Krnl::panic(char const*)>
c00107a2:	b8 01 00 00 00       	mov    eax,0x1
c00107a7:	31 d2                	xor    edx,edx
c00107a9:	83 c4 1c             	add    esp,0x1c
c00107ac:	c3                   	ret    

c00107ad <sysCallRmdir(regs*)>:
c00107ad:	56                   	push   esi
c00107ae:	53                   	push   ebx
c00107af:	83 ec 20             	sub    esp,0x20
c00107b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107b6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00107b9:	68 14 01 00 00       	push   0x114
c00107be:	e8 9e 63 ff ff       	call   c0006b61 <malloc>
c00107c3:	83 c4 0c             	add    esp,0xc
c00107c6:	89 c3                	mov    ebx,eax
c00107c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107d0:	50                   	push   eax
c00107d1:	56                   	push   esi
c00107d2:	53                   	push   ebx
c00107d3:	e8 8e 96 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c00107d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107db:	e8 be 98 ff ff       	call   c000a09e <File::unlink()>
c00107e0:	83 c4 10             	add    esp,0x10
c00107e3:	85 db                	test   ebx,ebx
c00107e5:	74 14                	je     c00107fb <sysCallRmdir(regs*)+0x4e>
c00107e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107eb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00107ed:	83 ec 0c             	sub    esp,0xc
c00107f0:	53                   	push   ebx
c00107f1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00107f4:	83 c4 10             	add    esp,0x10
c00107f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107fb:	85 c0                	test   eax,eax
c00107fd:	0f 95 c0             	setne  al
c0010800:	31 d2                	xor    edx,edx
c0010802:	25 ff 00 00 00       	and    eax,0xff
c0010807:	f7 d8                	neg    eax
c0010809:	83 d2 00             	adc    edx,0x0
c001080c:	83 c4 14             	add    esp,0x14
c001080f:	f7 da                	neg    edx
c0010811:	5b                   	pop    ebx
c0010812:	5e                   	pop    esi
c0010813:	c3                   	ret    

c0010814 <sysCallUnlink(regs*)>:
c0010814:	56                   	push   esi
c0010815:	53                   	push   ebx
c0010816:	83 ec 20             	sub    esp,0x20
c0010819:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001081d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010820:	68 14 01 00 00       	push   0x114
c0010825:	e8 37 63 ff ff       	call   c0006b61 <malloc>
c001082a:	83 c4 0c             	add    esp,0xc
c001082d:	89 c3                	mov    ebx,eax
c001082f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010834:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010837:	50                   	push   eax
c0010838:	56                   	push   esi
c0010839:	53                   	push   ebx
c001083a:	e8 27 96 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c001083f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010842:	e8 57 98 ff ff       	call   c000a09e <File::unlink()>
c0010847:	83 c4 10             	add    esp,0x10
c001084a:	85 db                	test   ebx,ebx
c001084c:	74 14                	je     c0010862 <sysCallUnlink(regs*)+0x4e>
c001084e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010852:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010854:	83 ec 0c             	sub    esp,0xc
c0010857:	53                   	push   ebx
c0010858:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001085b:	83 c4 10             	add    esp,0x10
c001085e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010862:	85 c0                	test   eax,eax
c0010864:	0f 95 c0             	setne  al
c0010867:	31 d2                	xor    edx,edx
c0010869:	25 ff 00 00 00       	and    eax,0xff
c001086e:	f7 d8                	neg    eax
c0010870:	83 d2 00             	adc    edx,0x0
c0010873:	83 c4 14             	add    esp,0x14
c0010876:	f7 da                	neg    edx
c0010878:	5b                   	pop    ebx
c0010879:	5e                   	pop    esi
c001087a:	c3                   	ret    

c001087b <sysCallGetArgv(regs*)>:
c001087b:	83 ec 0c             	sub    esp,0xc
c001087e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010882:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010885:	85 c0                	test   eax,eax
c0010887:	78 2c                	js     c00108b5 <sysCallGetArgv(regs*)+0x3a>
c0010889:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001088f:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010892:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010898:	7d 1b                	jge    c00108b5 <sysCallGetArgv(regs*)+0x3a>
c001089a:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00108a1:	85 c0                	test   eax,eax
c00108a3:	74 18                	je     c00108bd <sysCallGetArgv(regs*)+0x42>
c00108a5:	83 ec 08             	sub    esp,0x8
c00108a8:	50                   	push   eax
c00108a9:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00108ac:	50                   	push   eax
c00108ad:	e8 6e fd fe ff       	call   c0000620 <strcpy>
c00108b2:	83 c4 10             	add    esp,0x10
c00108b5:	31 c0                	xor    eax,eax
c00108b7:	31 d2                	xor    edx,edx
c00108b9:	83 c4 0c             	add    esp,0xc
c00108bc:	c3                   	ret    
c00108bd:	b8 01 00 00 00       	mov    eax,0x1
c00108c2:	31 d2                	xor    edx,edx
c00108c4:	83 c4 0c             	add    esp,0xc
c00108c7:	c3                   	ret    

c00108c8 <sysCallUSleep(regs*)>:
c00108c8:	83 ec 1c             	sub    esp,0x1c
c00108cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00108cf:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00108d2:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00108d5:	6a 00                	push   0x0
c00108d7:	6a 64                	push   0x64
c00108d9:	52                   	push   edx
c00108da:	50                   	push   eax
c00108db:	e8 80 ad 00 00       	call   c001b660 <__udivdi3>
c00108e0:	83 c4 14             	add    esp,0x14
c00108e3:	50                   	push   eax
c00108e4:	e8 cb 22 00 00       	call   c0012bb4 <milliTenthSleep(unsigned int)>
c00108e9:	31 c0                	xor    eax,eax
c00108eb:	31 d2                	xor    edx,edx
c00108ed:	83 c4 1c             	add    esp,0x1c
c00108f0:	c3                   	ret    

c00108f1 <sysCallSpawn(regs*)>:
c00108f1:	56                   	push   esi
c00108f2:	53                   	push   ebx
c00108f3:	50                   	push   eax
c00108f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108f8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00108fb:	85 c0                	test   eax,eax
c00108fd:	75 08                	jne    c0010907 <sysCallSpawn(regs*)+0x16>
c00108ff:	59                   	pop    ecx
c0010900:	31 c0                	xor    eax,eax
c0010902:	31 d2                	xor    edx,edx
c0010904:	5b                   	pop    ebx
c0010905:	5e                   	pop    esi
c0010906:	c3                   	ret    
c0010907:	83 ec 0c             	sub    esp,0xc
c001090a:	68 1f 07 00 00       	push   0x71f
c001090f:	e8 4d 62 ff ff       	call   c0006b61 <malloc>
c0010914:	83 c4 10             	add    esp,0x10
c0010917:	89 c6                	mov    esi,eax
c0010919:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001091c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001091f:	85 c0                	test   eax,eax
c0010921:	75 33                	jne    c0010956 <sysCallSpawn(regs*)+0x65>
c0010923:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010928:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001092b:	52                   	push   edx
c001092c:	50                   	push   eax
c001092d:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010930:	53                   	push   ebx
c0010931:	56                   	push   esi
c0010932:	e8 61 19 00 00       	call   c0012298 <Process::Process(char const*, Process*, char**)>
c0010937:	83 c4 10             	add    esp,0x10
c001093a:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010941:	75 bc                	jne    c00108ff <sysCallSpawn(regs*)+0xe>
c0010943:	83 ec 0c             	sub    esp,0xc
c0010946:	56                   	push   esi
c0010947:	e8 40 1e 00 00       	call   c001278c <Process::createUserThread()>
c001094c:	8b 06                	mov    eax,DWORD PTR [esi]
c001094e:	83 c4 10             	add    esp,0x10
c0010951:	99                   	cdq    
c0010952:	59                   	pop    ecx
c0010953:	5b                   	pop    ebx
c0010954:	5e                   	pop    esi
c0010955:	c3                   	ret    
c0010956:	31 c0                	xor    eax,eax
c0010958:	eb d1                	jmp    c001092b <sysCallSpawn(regs*)+0x3a>

c001095a <sysCallGetEnv(regs*)>:
c001095a:	57                   	push   edi
c001095b:	56                   	push   esi
c001095c:	53                   	push   ebx
c001095d:	83 ec 1c             	sub    esp,0x1c
c0010960:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010964:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010969:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001096c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001096f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010972:	50                   	push   eax
c0010973:	e8 13 ea ff ff       	call   c000f38b <Krnl::getProcessTotalEnvCount(Process*)>
c0010978:	83 c4 10             	add    esp,0x10
c001097b:	39 c7                	cmp    edi,eax
c001097d:	7c 14                	jl     c0010993 <sysCallGetEnv(regs*)+0x39>
c001097f:	85 f6                	test   esi,esi
c0010981:	75 0b                	jne    c001098e <sysCallGetEnv(regs*)+0x34>
c0010983:	83 c4 10             	add    esp,0x10
c0010986:	31 c0                	xor    eax,eax
c0010988:	5b                   	pop    ebx
c0010989:	31 d2                	xor    edx,edx
c001098b:	5e                   	pop    esi
c001098c:	5f                   	pop    edi
c001098d:	c3                   	ret    
c001098e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010991:	eb f0                	jmp    c0010983 <sysCallGetEnv(regs*)+0x29>
c0010993:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010997:	52                   	push   edx
c0010998:	57                   	push   edi
c0010999:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001099f:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00109a2:	51                   	push   ecx
c00109a3:	50                   	push   eax
c00109a4:	e8 02 ea ff ff       	call   c000f3ab <Krnl::getProcessEnvPair(Process*, int)>
c00109a9:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00109ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109b0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00109b4:	83 c4 0c             	add    esp,0xc
c00109b7:	85 db                	test   ebx,ebx
c00109b9:	75 23                	jne    c00109de <sysCallGetEnv(regs*)+0x84>
c00109bb:	83 ec 0c             	sub    esp,0xc
c00109be:	50                   	push   eax
c00109bf:	e8 9c fb fe ff       	call   c0000560 <strlen>
c00109c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109c7:	89 c3                	mov    ebx,eax
c00109c9:	e8 92 fb fe ff       	call   c0000560 <strlen>
c00109ce:	31 d2                	xor    edx,edx
c00109d0:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00109d4:	83 c4 10             	add    esp,0x10
c00109d7:	83 c4 10             	add    esp,0x10
c00109da:	5b                   	pop    ebx
c00109db:	5e                   	pop    esi
c00109dc:	5f                   	pop    edi
c00109dd:	c3                   	ret    
c00109de:	83 ec 08             	sub    esp,0x8
c00109e1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00109e4:	50                   	push   eax
c00109e5:	56                   	push   esi
c00109e6:	e8 35 fc fe ff       	call   c0000620 <strcpy>
c00109eb:	58                   	pop    eax
c00109ec:	5a                   	pop    edx
c00109ed:	68 74 de 01 c0       	push   0xc001de74
c00109f2:	56                   	push   esi
c00109f3:	e8 e8 fd fe ff       	call   c00007e0 <strcat>
c00109f8:	59                   	pop    ecx
c00109f9:	5b                   	pop    ebx
c00109fa:	57                   	push   edi
c00109fb:	56                   	push   esi
c00109fc:	e8 df fd fe ff       	call   c00007e0 <strcat>
c0010a01:	83 c4 10             	add    esp,0x10
c0010a04:	e9 7a ff ff ff       	jmp    c0010983 <sysCallGetEnv(regs*)+0x29>

c0010a09 <sysSetFatAttrib(regs*)>:
c0010a09:	57                   	push   edi
c0010a0a:	56                   	push   esi
c0010a0b:	53                   	push   ebx
c0010a0c:	83 ec 1c             	sub    esp,0x1c
c0010a0f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010a13:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010a16:	68 14 01 00 00       	push   0x114
c0010a1b:	e8 41 61 ff ff       	call   c0006b61 <malloc>
c0010a20:	83 c4 0c             	add    esp,0xc
c0010a23:	89 c3                	mov    ebx,eax
c0010a25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a2d:	50                   	push   eax
c0010a2e:	57                   	push   edi
c0010a2f:	53                   	push   ebx
c0010a30:	e8 31 94 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c0010a35:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010a38:	83 c4 0c             	add    esp,0xc
c0010a3b:	0f b6 d4             	movzx  edx,ah
c0010a3e:	25 ff 00 00 00       	and    eax,0xff
c0010a43:	52                   	push   edx
c0010a44:	50                   	push   eax
c0010a45:	53                   	push   ebx
c0010a46:	e8 ed 96 ff ff       	call   c000a138 <File::chfatattr(unsigned char, unsigned char)>
c0010a4b:	83 c4 10             	add    esp,0x10
c0010a4e:	85 db                	test   ebx,ebx
c0010a50:	74 14                	je     c0010a66 <sysSetFatAttrib(regs*)+0x5d>
c0010a52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a56:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010a58:	83 ec 0c             	sub    esp,0xc
c0010a5b:	53                   	push   ebx
c0010a5c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010a5f:	83 c4 10             	add    esp,0x10
c0010a62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a66:	85 c0                	test   eax,eax
c0010a68:	0f 95 c0             	setne  al
c0010a6b:	31 d2                	xor    edx,edx
c0010a6d:	25 ff 00 00 00       	and    eax,0xff
c0010a72:	f7 d8                	neg    eax
c0010a74:	83 d2 00             	adc    edx,0x0
c0010a77:	83 c4 10             	add    esp,0x10
c0010a7a:	f7 da                	neg    edx
c0010a7c:	5b                   	pop    ebx
c0010a7d:	5e                   	pop    esi
c0010a7e:	5f                   	pop    edi
c0010a7f:	c3                   	ret    

c0010a80 <sysPipe(regs*)>:
c0010a80:	57                   	push   edi
c0010a81:	56                   	push   esi
c0010a82:	53                   	push   ebx
c0010a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a87:	83 ec 0c             	sub    esp,0xc
c0010a8a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010a8d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010a90:	6a 20                	push   0x20
c0010a92:	e8 ca 60 ff ff       	call   c0006b61 <malloc>
c0010a97:	89 c3                	mov    ebx,eax
c0010a99:	58                   	pop    eax
c0010a9a:	5a                   	pop    edx
c0010a9b:	68 00 50 00 00       	push   0x5000
c0010aa0:	53                   	push   ebx
c0010aa1:	e8 b2 6a ff ff       	call   c0007558 <Pipe::Pipe(int)>
c0010aa6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010aa9:	e8 a4 77 ff ff       	call   c0008252 <UnixFile::getFileDescriptor()>
c0010aae:	89 07                	mov    DWORD PTR [edi],eax
c0010ab0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ab3:	e8 9a 77 ff ff       	call   c0008252 <UnixFile::getFileDescriptor()>
c0010ab8:	83 c4 10             	add    esp,0x10
c0010abb:	89 06                	mov    DWORD PTR [esi],eax
c0010abd:	31 d2                	xor    edx,edx
c0010abf:	5b                   	pop    ebx
c0010ac0:	31 c0                	xor    eax,eax
c0010ac2:	5e                   	pop    esi
c0010ac3:	5f                   	pop    edi
c0010ac4:	c3                   	ret    

c0010ac5 <sysGetUnixTime(regs*)>:
c0010ac5:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0010aca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010ad0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ad4:	e9 9d 9d ff ff       	jmp    c000a876 <Clock::timeInSecondsLocal()>

c0010ad9 <string_ends_with(char const*, char const*)>:
c0010ad9:	57                   	push   edi
c0010ada:	56                   	push   esi
c0010adb:	53                   	push   ebx
c0010adc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ae0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010ae4:	83 ec 0c             	sub    esp,0xc
c0010ae7:	53                   	push   ebx
c0010ae8:	e8 73 fa fe ff       	call   c0000560 <strlen>
c0010aed:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010af0:	89 c6                	mov    esi,eax
c0010af2:	e8 69 fa fe ff       	call   c0000560 <strlen>
c0010af7:	83 c4 10             	add    esp,0x10
c0010afa:	39 c6                	cmp    esi,eax
c0010afc:	7d 06                	jge    c0010b04 <string_ends_with(char const*, char const*)+0x2b>
c0010afe:	5b                   	pop    ebx
c0010aff:	31 c0                	xor    eax,eax
c0010b01:	5e                   	pop    esi
c0010b02:	5f                   	pop    edi
c0010b03:	c3                   	ret    
c0010b04:	83 ec 08             	sub    esp,0x8
c0010b07:	29 c6                	sub    esi,eax
c0010b09:	57                   	push   edi
c0010b0a:	01 f3                	add    ebx,esi
c0010b0c:	53                   	push   ebx
c0010b0d:	e8 ee fb fe ff       	call   c0000700 <strcmp>
c0010b12:	83 c4 10             	add    esp,0x10
c0010b15:	85 c0                	test   eax,eax
c0010b17:	5b                   	pop    ebx
c0010b18:	0f 94 c0             	sete   al
c0010b1b:	5e                   	pop    esi
c0010b1c:	25 ff 00 00 00       	and    eax,0xff
c0010b21:	5f                   	pop    edi
c0010b22:	c3                   	ret    

c0010b23 <sysCallOpen(regs*)>:
c0010b23:	56                   	push   esi
c0010b24:	53                   	push   ebx
c0010b25:	81 ec 04 01 00 00    	sub    esp,0x104
c0010b2b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010b32:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010b35:	85 c9                	test   ecx,ecx
c0010b37:	0f 84 b9 01 00 00    	je     c0010cf6 <sysCallOpen(regs*)+0x1d3>
c0010b3d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010b40:	85 c0                	test   eax,eax
c0010b42:	0f 84 ae 01 00 00    	je     c0010cf6 <sysCallOpen(regs*)+0x1d3>
c0010b48:	52                   	push   edx
c0010b49:	68 76 de 01 c0       	push   0xc001de76
c0010b4e:	50                   	push   eax
c0010b4f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010b53:	56                   	push   esi
c0010b54:	e8 63 91 ff ff       	call   c0009cbc <Fs::standardiseFiles(char*, char const*, char const*)>
c0010b59:	89 34 24             	mov    DWORD PTR [esp],esi
c0010b5c:	e8 ff f9 fe ff       	call   c0000560 <strlen>
c0010b61:	83 c4 10             	add    esp,0x10
c0010b64:	48                   	dec    eax
c0010b65:	74 1d                	je     c0010b84 <sysCallOpen(regs*)+0x61>
c0010b67:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010b6a:	eb 0f                	jmp    c0010b7b <sysCallOpen(regs*)+0x58>
c0010b6c:	80 fa 3a             	cmp    dl,0x3a
c0010b6f:	74 0f                	je     c0010b80 <sysCallOpen(regs*)+0x5d>
c0010b71:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010b75:	48                   	dec    eax
c0010b76:	74 0c                	je     c0010b84 <sysCallOpen(regs*)+0x61>
c0010b78:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010b7b:	80 fa 2e             	cmp    dl,0x2e
c0010b7e:	75 ec                	jne    c0010b6c <sysCallOpen(regs*)+0x49>
c0010b80:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010b84:	83 ec 08             	sub    esp,0x8
c0010b87:	68 7a de 01 c0       	push   0xc001de7a
c0010b8c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010b8f:	50                   	push   eax
c0010b90:	e8 44 ff ff ff       	call   c0010ad9 <string_ends_with(char const*, char const*)>
c0010b95:	83 c4 10             	add    esp,0x10
c0010b98:	85 c0                	test   eax,eax
c0010b9a:	74 1d                	je     c0010bb9 <sysCallOpen(regs*)+0x96>
c0010b9c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b9f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010ba5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bac:	81 c4 04 01 00 00    	add    esp,0x104
c0010bb2:	31 c0                	xor    eax,eax
c0010bb4:	31 d2                	xor    edx,edx
c0010bb6:	5b                   	pop    ebx
c0010bb7:	5e                   	pop    esi
c0010bb8:	c3                   	ret    
c0010bb9:	83 ec 08             	sub    esp,0x8
c0010bbc:	68 7f de 01 c0       	push   0xc001de7f
c0010bc1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bc4:	50                   	push   eax
c0010bc5:	e8 0f ff ff ff       	call   c0010ad9 <string_ends_with(char const*, char const*)>
c0010bca:	83 c4 10             	add    esp,0x10
c0010bcd:	85 c0                	test   eax,eax
c0010bcf:	75 cb                	jne    c0010b9c <sysCallOpen(regs*)+0x79>
c0010bd1:	83 ec 08             	sub    esp,0x8
c0010bd4:	68 7b de 01 c0       	push   0xc001de7b
c0010bd9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bdc:	50                   	push   eax
c0010bdd:	e8 1e fb fe ff       	call   c0000700 <strcmp>
c0010be2:	83 c4 10             	add    esp,0x10
c0010be5:	85 c0                	test   eax,eax
c0010be7:	74 b3                	je     c0010b9c <sysCallOpen(regs*)+0x79>
c0010be9:	83 ec 08             	sub    esp,0x8
c0010bec:	68 7a de 01 c0       	push   0xc001de7a
c0010bf1:	56                   	push   esi
c0010bf2:	e8 e2 fe ff ff       	call   c0010ad9 <string_ends_with(char const*, char const*)>
c0010bf7:	83 c4 10             	add    esp,0x10
c0010bfa:	85 c0                	test   eax,eax
c0010bfc:	75 9e                	jne    c0010b9c <sysCallOpen(regs*)+0x79>
c0010bfe:	83 ec 08             	sub    esp,0x8
c0010c01:	68 84 de 01 c0       	push   0xc001de84
c0010c06:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c09:	50                   	push   eax
c0010c0a:	e8 ca fe ff ff       	call   c0010ad9 <string_ends_with(char const*, char const*)>
c0010c0f:	83 c4 10             	add    esp,0x10
c0010c12:	85 c0                	test   eax,eax
c0010c14:	0f 85 ef 00 00 00    	jne    c0010d09 <sysCallOpen(regs*)+0x1e6>
c0010c1a:	83 ec 08             	sub    esp,0x8
c0010c1d:	68 89 de 01 c0       	push   0xc001de89
c0010c22:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c25:	50                   	push   eax
c0010c26:	e8 ae fe ff ff       	call   c0010ad9 <string_ends_with(char const*, char const*)>
c0010c2b:	83 c4 10             	add    esp,0x10
c0010c2e:	85 c0                	test   eax,eax
c0010c30:	0f 85 d3 00 00 00    	jne    c0010d09 <sysCallOpen(regs*)+0x1e6>
c0010c36:	83 ec 08             	sub    esp,0x8
c0010c39:	68 85 de 01 c0       	push   0xc001de85
c0010c3e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010c41:	51                   	push   ecx
c0010c42:	e8 b9 fa fe ff       	call   c0000700 <strcmp>
c0010c47:	83 c4 10             	add    esp,0x10
c0010c4a:	85 c0                	test   eax,eax
c0010c4c:	0f 84 b7 00 00 00    	je     c0010d09 <sysCallOpen(regs*)+0x1e6>
c0010c52:	83 ec 08             	sub    esp,0x8
c0010c55:	68 84 de 01 c0       	push   0xc001de84
c0010c5a:	56                   	push   esi
c0010c5b:	e8 79 fe ff ff       	call   c0010ad9 <string_ends_with(char const*, char const*)>
c0010c60:	83 c4 10             	add    esp,0x10
c0010c63:	85 c0                	test   eax,eax
c0010c65:	0f 85 9e 00 00 00    	jne    c0010d09 <sysCallOpen(regs*)+0x1e6>
c0010c6b:	83 ec 0c             	sub    esp,0xc
c0010c6e:	68 14 01 00 00       	push   0x114
c0010c73:	e8 e9 5e ff ff       	call   c0006b61 <malloc>
c0010c78:	83 c4 0c             	add    esp,0xc
c0010c7b:	89 c6                	mov    esi,eax
c0010c7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c85:	50                   	push   eax
c0010c86:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010c89:	52                   	push   edx
c0010c8a:	56                   	push   esi
c0010c8b:	e8 d6 91 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c0010c90:	83 c4 10             	add    esp,0x10
c0010c93:	85 f6                	test   esi,esi
c0010c95:	74 5f                	je     c0010cf6 <sysCallOpen(regs*)+0x1d3>
c0010c97:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010c9a:	89 d0                	mov    eax,edx
c0010c9c:	25 ff 00 00 00       	and    eax,0xff
c0010ca1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010ca4:	89 d0                	mov    eax,edx
c0010ca6:	83 e0 01             	and    eax,0x1
c0010ca9:	f6 c2 02             	test   dl,0x2
c0010cac:	74 03                	je     c0010cb1 <sysCallOpen(regs*)+0x18e>
c0010cae:	83 c8 02             	or     eax,0x2
c0010cb1:	f6 c2 04             	test   dl,0x4
c0010cb4:	74 03                	je     c0010cb9 <sysCallOpen(regs*)+0x196>
c0010cb6:	83 c8 04             	or     eax,0x4
c0010cb9:	f6 c2 08             	test   dl,0x8
c0010cbc:	74 03                	je     c0010cc1 <sysCallOpen(regs*)+0x19e>
c0010cbe:	83 c8 0a             	or     eax,0xa
c0010cc1:	83 e2 10             	and    edx,0x10
c0010cc4:	74 03                	je     c0010cc9 <sysCallOpen(regs*)+0x1a6>
c0010cc6:	83 c8 12             	or     eax,0x12
c0010cc9:	83 ec 08             	sub    esp,0x8
c0010ccc:	50                   	push   eax
c0010ccd:	56                   	push   esi
c0010cce:	e8 53 92 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c0010cd3:	83 c4 10             	add    esp,0x10
c0010cd6:	85 c0                	test   eax,eax
c0010cd8:	75 1c                	jne    c0010cf6 <sysCallOpen(regs*)+0x1d3>
c0010cda:	83 ec 0c             	sub    esp,0xc
c0010cdd:	56                   	push   esi
c0010cde:	e8 6f 75 ff ff       	call   c0008252 <UnixFile::getFileDescriptor()>
c0010ce3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010ce6:	83 c4 10             	add    esp,0x10
c0010ce9:	89 02                	mov    DWORD PTR [edx],eax
c0010ceb:	c1 f8 1f             	sar    eax,0x1f
c0010cee:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010cf1:	e9 b6 fe ff ff       	jmp    c0010bac <sysCallOpen(regs*)+0x89>
c0010cf6:	81 c4 04 01 00 00    	add    esp,0x104
c0010cfc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d01:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d06:	5b                   	pop    ebx
c0010d07:	5e                   	pop    esi
c0010d08:	c3                   	ret    
c0010d09:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d0c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010d12:	e9 8e fe ff ff       	jmp    c0010ba5 <sysCallOpen(regs*)+0x82>

c0010d17 <Sys::loadSyscalls()>:
c0010d17:	c7 05 20 1f 02 c0 f3 00 01 c0 	mov    DWORD PTR ds:0xc0021f20,0xc00100f3
c0010d21:	c7 05 24 1f 02 c0 ea fc 00 c0 	mov    DWORD PTR ds:0xc0021f24,0xc000fcea
c0010d2b:	c7 05 28 1f 02 c0 d9 fe 00 c0 	mov    DWORD PTR ds:0xc0021f28,0xc000fed9
c0010d35:	c7 05 2c 1f 02 c0 29 00 01 c0 	mov    DWORD PTR ds:0xc0021f2c,0xc0010029
c0010d3f:	c7 05 30 1f 02 c0 71 fe 00 c0 	mov    DWORD PTR ds:0xc0021f30,0xc000fe71
c0010d49:	c7 05 34 1f 02 c0 21 fd 00 c0 	mov    DWORD PTR ds:0xc0021f34,0xc000fd21
c0010d53:	c7 05 38 1f 02 c0 02 fd 00 c0 	mov    DWORD PTR ds:0xc0021f38,0xc000fd02
c0010d5d:	c7 05 3c 1f 02 c0 2e ff 00 c0 	mov    DWORD PTR ds:0xc0021f3c,0xc000ff2e
c0010d67:	c7 05 44 1f 02 c0 bd 05 01 c0 	mov    DWORD PTR ds:0xc0021f44,0xc00105bd
c0010d71:	c7 05 40 1f 02 c0 23 0b 01 c0 	mov    DWORD PTR ds:0xc0021f40,0xc0010b23
c0010d7b:	c7 05 48 1f 02 c0 1d 06 01 c0 	mov    DWORD PTR ds:0xc0021f48,0xc001061d
c0010d85:	c7 05 4c 1f 02 c0 f1 02 01 c0 	mov    DWORD PTR ds:0xc0021f4c,0xc00102f1
c0010d8f:	c7 05 50 1f 02 c0 18 01 01 c0 	mov    DWORD PTR ds:0xc0021f50,0xc0010118
c0010d99:	c7 05 54 1f 02 c0 1d 01 01 c0 	mov    DWORD PTR ds:0xc0021f54,0xc001011d
c0010da3:	c7 05 58 1f 02 c0 e8 06 01 c0 	mov    DWORD PTR ds:0xc0021f58,0xc00106e8
c0010dad:	c7 05 5c 1f 02 c0 94 06 01 c0 	mov    DWORD PTR ds:0xc0021f5c,0xc0010694
c0010db7:	c7 05 60 1f 02 c0 cd 03 01 c0 	mov    DWORD PTR ds:0xc0021f60,0xc00103cd
c0010dc1:	c7 05 64 1f 02 c0 26 04 01 c0 	mov    DWORD PTR ds:0xc0021f64,0xc0010426
c0010dcb:	c7 05 68 1f 02 c0 95 04 01 c0 	mov    DWORD PTR ds:0xc0021f68,0xc0010495
c0010dd5:	c7 05 6c 1f 02 c0 22 01 01 c0 	mov    DWORD PTR ds:0xc0021f6c,0xc0010122
c0010ddf:	c7 05 70 1f 02 c0 5a 07 01 c0 	mov    DWORD PTR ds:0xc0021f70,0xc001075a
c0010de9:	c7 05 74 1f 02 c0 77 07 01 c0 	mov    DWORD PTR ds:0xc0021f74,0xc0010777
c0010df3:	c7 05 78 1f 02 c0 77 07 01 c0 	mov    DWORD PTR ds:0xc0021f78,0xc0010777
c0010dfd:	c7 05 7c 1f 02 c0 ad 07 01 c0 	mov    DWORD PTR ds:0xc0021f7c,0xc00107ad
c0010e07:	c7 05 80 1f 02 c0 14 08 01 c0 	mov    DWORD PTR ds:0xc0021f80,0xc0010814
c0010e11:	c7 05 84 1f 02 c0 2c 01 01 c0 	mov    DWORD PTR ds:0xc0021f84,0xc001012c
c0010e1b:	c7 05 88 1f 02 c0 7b 08 01 c0 	mov    DWORD PTR ds:0xc0021f88,0xc001087b
c0010e25:	c7 05 8c 1f 02 c0 ae 02 01 c0 	mov    DWORD PTR ds:0xc0021f8c,0xc00102ae
c0010e2f:	c7 05 90 1f 02 c0 3c 01 01 c0 	mov    DWORD PTR ds:0xc0021f90,0xc001013c
c0010e39:	c7 05 94 1f 02 c0 71 03 01 c0 	mov    DWORD PTR ds:0xc0021f94,0xc0010371
c0010e43:	c7 05 98 1f 02 c0 c8 08 01 c0 	mov    DWORD PTR ds:0xc0021f98,0xc00108c8
c0010e4d:	c7 05 9c 1f 02 c0 0a 05 01 c0 	mov    DWORD PTR ds:0xc0021f9c,0xc001050a
c0010e57:	c7 05 a0 1f 02 c0 f1 08 01 c0 	mov    DWORD PTR ds:0xc0021fa0,0xc00108f1
c0010e61:	c7 05 a4 1f 02 c0 5a 09 01 c0 	mov    DWORD PTR ds:0xc0021fa4,0xc001095a
c0010e6b:	c7 05 ac 1f 02 c0 44 01 01 c0 	mov    DWORD PTR ds:0xc0021fac,0xc0010144
c0010e75:	c7 05 b0 1f 02 c0 b1 01 01 c0 	mov    DWORD PTR ds:0xc0021fb0,0xc00101b1
c0010e7f:	c7 05 b4 1f 02 c0 fb 01 01 c0 	mov    DWORD PTR ds:0xc0021fb4,0xc00101fb
c0010e89:	c7 05 b8 1f 02 c0 09 0a 01 c0 	mov    DWORD PTR ds:0xc0021fb8,0xc0010a09
c0010e93:	c7 05 bc 1f 02 c0 92 07 01 c0 	mov    DWORD PTR ds:0xc0021fbc,0xc0010792
c0010e9d:	c7 05 c0 1f 02 c0 50 02 01 c0 	mov    DWORD PTR ds:0xc0021fc0,0xc0010250
c0010ea7:	c7 05 c4 1f 02 c0 80 0a 01 c0 	mov    DWORD PTR ds:0xc0021fc4,0xc0010a80
c0010eb1:	c7 05 c8 1f 02 c0 c5 0a 01 c0 	mov    DWORD PTR ds:0xc0021fc8,0xc0010ac5
c0010ebb:	c7 05 cc 1f 02 c0 c9 fd 00 c0 	mov    DWORD PTR ds:0xc0021fcc,0xc000fdc9
c0010ec5:	c7 05 d0 1f 02 c0 4a ff 00 c0 	mov    DWORD PTR ds:0xc0021fd0,0xc000ff4a
c0010ecf:	c7 05 d4 1f 02 c0 df ff 00 c0 	mov    DWORD PTR ds:0xc0021fd4,0xc000ffdf
c0010ed9:	c7 05 d8 1f 02 c0 b4 fc 00 c0 	mov    DWORD PTR ds:0xc0021fd8,0xc000fcb4
c0010ee3:	c7 05 dc 1f 02 c0 91 00 01 c0 	mov    DWORD PTR ds:0xc0021fdc,0xc0010091
c0010eed:	c7 05 e0 1f 02 c0 2d fd 00 c0 	mov    DWORD PTR ds:0xc0021fe0,0xc000fd2d
c0010ef7:	c7 05 e4 1f 02 c0 47 fd 00 c0 	mov    DWORD PTR ds:0xc0021fe4,0xc000fd47
c0010f01:	c3                   	ret    

c0010f02 <Sys::systemCall(regs*, void*)>:
c0010f02:	53                   	push   ebx
c0010f03:	83 ec 08             	sub    esp,0x8
c0010f06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010f0d:	83 f8 7f             	cmp    eax,0x7f
c0010f10:	77 16                	ja     c0010f28 <Sys::systemCall(regs*, void*)+0x26>
c0010f12:	8b 14 85 20 1f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde0e0]
c0010f19:	85 d2                	test   edx,edx
c0010f1b:	74 0b                	je     c0010f28 <Sys::systemCall(regs*, void*)+0x26>
c0010f1d:	83 ec 0c             	sub    esp,0xc
c0010f20:	53                   	push   ebx
c0010f21:	ff d2                	call   edx
c0010f23:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0010f26:	eb 0d                	jmp    c0010f35 <Sys::systemCall(regs*, void*)+0x33>
c0010f28:	52                   	push   edx
c0010f29:	52                   	push   edx
c0010f2a:	50                   	push   eax
c0010f2b:	68 8e de 01 c0       	push   0xc001de8e
c0010f30:	e8 bb 89 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0010f35:	83 c4 10             	add    esp,0x10
c0010f38:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010f3d:	31 d2                	xor    edx,edx
c0010f3f:	83 c4 08             	add    esp,0x8
c0010f42:	5b                   	pop    ebx
c0010f43:	c3                   	ret    

c0010f44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0010f44:	55                   	push   ebp
c0010f45:	57                   	push   edi
c0010f46:	56                   	push   esi
c0010f47:	53                   	push   ebx
c0010f48:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0010f4e:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0010f56:	0f 95 c2             	setne  dl
c0010f59:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0010f61:	0f 94 c0             	sete   al
c0010f64:	84 c2                	test   dl,al
c0010f66:	74 34                	je     c0010f9c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0010f68:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0010f73:	74 27                	je     c0010f9c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0010f75:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0010f7c:	05 00 10 00 00       	add    eax,0x1000
c0010f81:	89 c1                	mov    ecx,eax
c0010f83:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010f88:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0010f8e:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0010f95:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0010f9c:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0010fa3:	83 ec 0c             	sub    esp,0xc
c0010fa6:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0010fac:	6a 01                	push   0x1
c0010fae:	e8 ea 76 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0010fb3:	83 c4 10             	add    esp,0x10
c0010fb6:	89 c3                	mov    ebx,eax
c0010fb8:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0010fbe:	0f 86 25 01 00 00    	jbe    c00110e9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0010fc4:	c1 ee 0c             	shr    esi,0xc
c0010fc7:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0010fce:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010fd2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010fda:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0010fe1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fe5:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0010fec:	29 ef                	sub    edi,ebp
c0010fee:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0010ff2:	0f 83 f8 00 00 00    	jae    c00110f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0010ff8:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0010ffe:	76 05                	jbe    c0011005 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011000:	bf 00 10 00 00       	mov    edi,0x1000
c0011005:	83 ec 0c             	sub    esp,0xc
c0011008:	31 d2                	xor    edx,edx
c001100a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011011:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011013:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011017:	50                   	push   eax
c0011018:	8d 74 24 30          	lea    esi,[esp+0x30]
c001101c:	56                   	push   esi
c001101d:	52                   	push   edx
c001101e:	57                   	push   edi
c001101f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011026:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011029:	83 c4 20             	add    esp,0x20
c001102c:	85 c0                	test   eax,eax
c001102e:	75 06                	jne    c0011036 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011030:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011034:	74 13                	je     c0011049 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011036:	83 ec 0c             	sub    esp,0xc
c0011039:	53                   	push   ebx
c001103a:	e8 8e 79 ff ff       	call   c00089cd <Virt::freeKernelVirtualPages(unsigned long)>
c001103f:	83 c4 10             	add    esp,0x10
c0011042:	31 c0                	xor    eax,eax
c0011044:	e9 7c 01 00 00       	jmp    c00111c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011049:	fa                   	cli    
c001104a:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0011050:	e8 d9 5e ff ff       	call   c0006f2e <Phys::allocatePage()>
c0011055:	6a 07                	push   0x7
c0011057:	89 c7                	mov    edi,eax
c0011059:	53                   	push   ebx
c001105a:	50                   	push   eax
c001105b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011060:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011063:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011069:	e8 c4 7c ff ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c001106e:	83 c4 0c             	add    esp,0xc
c0011071:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011078:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001107e:	6a 00                	push   0x0
c0011080:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011085:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011088:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001108e:	e8 11 7b ff ff       	call   c0008ba4 <VAS::mapOtherVASIn(bool, VAS*)>
c0011093:	58                   	pop    eax
c0011094:	5a                   	pop    edx
c0011095:	68 07 0c 00 00       	push   0xc07
c001109a:	55                   	push   ebp
c001109b:	57                   	push   edi
c001109c:	89 df                	mov    edi,ebx
c001109e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00110a5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00110ab:	6a 00                	push   0x0
c00110ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110b5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00110bb:	e8 32 80 ff ff       	call   c00090f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00110c0:	b9 00 10 00 00       	mov    ecx,0x1000
c00110c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110c7:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c00110cc:	83 c4 20             	add    esp,0x20
c00110cf:	48                   	dec    eax
c00110d0:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c00110d5:	85 c0                	test   eax,eax
c00110d7:	75 01                	jne    c00110da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c00110d9:	fb                   	sti    
c00110da:	81 c5 00 10 00 00    	add    ebp,0x1000
c00110e0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00110e4:	e9 f1 fe ff ff       	jmp    c0010fda <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c00110e9:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00110f0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00110f7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00110fd:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011103:	0f 86 ae 00 00 00    	jbe    c00111b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011109:	fa                   	cli    
c001110a:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0011110:	c1 ee 0c             	shr    esi,0xc
c0011113:	51                   	push   ecx
c0011114:	31 ff                	xor    edi,edi
c0011116:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001111d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011123:	6a 00                	push   0x0
c0011125:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001112a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001112d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011133:	e8 6c 7a ff ff       	call   c0008ba4 <VAS::mapOtherVASIn(bool, VAS*)>
c0011138:	83 c4 10             	add    esp,0x10
c001113b:	e8 ee 5d ff ff       	call   c0006f2e <Phys::allocatePage()>
c0011140:	47                   	inc    edi
c0011141:	6a 07                	push   0x7
c0011143:	53                   	push   ebx
c0011144:	50                   	push   eax
c0011145:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011149:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001114f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011152:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011158:	e8 d5 7b ff ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c001115d:	58                   	pop    eax
c001115e:	5a                   	pop    edx
c001115f:	68 07 0c 00 00       	push   0xc07
c0011164:	55                   	push   ebp
c0011165:	81 c5 00 10 00 00    	add    ebp,0x1000
c001116b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001116f:	50                   	push   eax
c0011170:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011177:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001117d:	6a 00                	push   0x0
c001117f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011184:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011187:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001118d:	e8 60 7f ff ff       	call   c00090f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011192:	83 c4 1c             	add    esp,0x1c
c0011195:	68 00 10 00 00       	push   0x1000
c001119a:	6a 00                	push   0x0
c001119c:	53                   	push   ebx
c001119d:	e8 4e f3 fe ff       	call   c00004f0 <memset>
c00111a2:	83 c4 10             	add    esp,0x10
c00111a5:	39 fe                	cmp    esi,edi
c00111a7:	77 92                	ja     c001113b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c00111a9:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c00111ae:	48                   	dec    eax
c00111af:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c00111b4:	75 01                	jne    c00111b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00111b6:	fb                   	sti    
c00111b7:	83 ec 0c             	sub    esp,0xc
c00111ba:	53                   	push   ebx
c00111bb:	e8 0d 78 ff ff       	call   c00089cd <Virt::freeKernelVirtualPages(unsigned long)>
c00111c0:	83 c4 10             	add    esp,0x10
c00111c3:	b0 01                	mov    al,0x1
c00111c5:	81 c4 2c 10 00 00    	add    esp,0x102c
c00111cb:	5b                   	pop    ebx
c00111cc:	5e                   	pop    esi
c00111cd:	5f                   	pop    edi
c00111ce:	5d                   	pop    ebp
c00111cf:	c3                   	ret    

c00111d0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00111d0:	55                   	push   ebp
c00111d1:	57                   	push   edi
c00111d2:	56                   	push   esi
c00111d3:	53                   	push   ebx
c00111d4:	83 ec 48             	sub    esp,0x48
c00111d7:	68 14 01 00 00       	push   0x114
c00111dc:	e8 80 59 ff ff       	call   c0006b61 <malloc>
c00111e1:	83 c4 0c             	add    esp,0xc
c00111e4:	89 c6                	mov    esi,eax
c00111e6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00111ea:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00111ee:	50                   	push   eax
c00111ef:	e8 72 8c ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c00111f4:	58                   	pop    eax
c00111f5:	5a                   	pop    edx
c00111f6:	6a 01                	push   0x1
c00111f8:	56                   	push   esi
c00111f9:	e8 28 8d ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c00111fe:	83 c4 10             	add    esp,0x10
c0011201:	85 c0                	test   eax,eax
c0011203:	0f 85 47 01 00 00    	jne    c0011350 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011209:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011211:	83 ec 0c             	sub    esp,0xc
c0011214:	6a 34                	push   0x34
c0011216:	e8 46 59 ff ff       	call   c0006b61 <malloc>
c001121b:	89 c3                	mov    ebx,eax
c001121d:	58                   	pop    eax
c001121e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011220:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011224:	57                   	push   edi
c0011225:	53                   	push   ebx
c0011226:	6a 00                	push   0x0
c0011228:	6a 34                	push   0x34
c001122a:	56                   	push   esi
c001122b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001122e:	83 c4 20             	add    esp,0x20
c0011231:	85 c0                	test   eax,eax
c0011233:	0f 85 17 01 00 00    	jne    c0011350 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011239:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001123f:	0f 85 0b 01 00 00    	jne    c0011350 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011245:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011248:	85 c0                	test   eax,eax
c001124a:	0f 84 00 01 00 00    	je     c0011350 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011250:	31 d2                	xor    edx,edx
c0011252:	55                   	push   ebp
c0011253:	52                   	push   edx
c0011254:	50                   	push   eax
c0011255:	56                   	push   esi
c0011256:	e8 89 8d ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c001125b:	83 c4 10             	add    esp,0x10
c001125e:	85 c0                	test   eax,eax
c0011260:	0f 85 ea 00 00 00    	jne    c0011350 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011266:	83 ec 0c             	sub    esp,0xc
c0011269:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001126c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011270:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011274:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011278:	0f af c2             	imul   eax,edx
c001127b:	50                   	push   eax
c001127c:	e8 e0 58 ff ff       	call   c0006b61 <malloc>
c0011281:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011283:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011287:	89 3c 24             	mov    DWORD PTR [esp],edi
c001128a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001128e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011292:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011296:	0f af c2             	imul   eax,edx
c0011299:	99                   	cdq    
c001129a:	52                   	push   edx
c001129b:	50                   	push   eax
c001129c:	56                   	push   esi
c001129d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00112a0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00112a3:	83 c4 20             	add    esp,0x20
c00112a6:	85 c0                	test   eax,eax
c00112a8:	0f 84 a2 00 00 00    	je     c0011350 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00112ae:	31 d2                	xor    edx,edx
c00112b0:	51                   	push   ecx
c00112b1:	52                   	push   edx
c00112b2:	50                   	push   eax
c00112b3:	56                   	push   esi
c00112b4:	e8 2b 8d ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c00112b9:	83 c4 10             	add    esp,0x10
c00112bc:	85 c0                	test   eax,eax
c00112be:	0f 85 8c 00 00 00    	jne    c0011350 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00112c4:	83 ec 0c             	sub    esp,0xc
c00112c7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00112cb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00112cf:	31 ed                	xor    ebp,ebp
c00112d1:	0f af c2             	imul   eax,edx
c00112d4:	50                   	push   eax
c00112d5:	e8 87 58 ff ff       	call   c0006b61 <malloc>
c00112da:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00112dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00112eb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00112ef:	0f af c2             	imul   eax,edx
c00112f2:	99                   	cdq    
c00112f3:	52                   	push   edx
c00112f4:	50                   	push   eax
c00112f5:	56                   	push   esi
c00112f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00112f9:	83 c4 20             	add    esp,0x20
c00112fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011304:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0011308:	0f 86 80 00 00 00    	jbe    c001138e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001130e:	0f b7 fd             	movzx  edi,bp
c0011311:	c1 e7 05             	shl    edi,0x5
c0011314:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0011318:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001131b:	75 6b                	jne    c0011388 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001131d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011320:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011324:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0011327:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001132b:	52                   	push   edx
c001132c:	31 d2                	xor    edx,edx
c001132e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011331:	52                   	push   edx
c0011332:	50                   	push   eax
c0011333:	56                   	push   esi
c0011334:	e8 ab 8c ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c0011339:	83 c4 10             	add    esp,0x10
c001133c:	85 c0                	test   eax,eax
c001133e:	74 17                	je     c0011357 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011340:	83 ec 0c             	sub    esp,0xc
c0011343:	68 a2 de 01 c0       	push   0xc001dea2
c0011348:	e8 a3 85 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001134d:	83 c4 10             	add    esp,0x10
c0011350:	31 c0                	xor    eax,eax
c0011352:	e9 87 00 00 00       	jmp    c00113de <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0011357:	83 ec 0c             	sub    esp,0xc
c001135a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001135d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011360:	50                   	push   eax
c0011361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011365:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011369:	56                   	push   esi
c001136a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001136e:	e8 d1 fb ff ff       	call   c0010f44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011373:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011377:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001137b:	83 c4 20             	add    esp,0x20
c001137e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011382:	73 04                	jae    c0011388 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011384:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011388:	45                   	inc    ebp
c0011389:	e9 76 ff ff ff       	jmp    c0011304 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001138e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011392:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011396:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001139a:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00113a0:	83 ec 0c             	sub    esp,0xc
c00113a3:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00113a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00113ae:	05 00 10 00 00       	add    eax,0x1000
c00113b3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113ba:	e8 b2 57 ff ff       	call   c0006b71 <free>
c00113bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00113c2:	e8 aa 57 ff ff       	call   c0006b71 <free>
c00113c7:	58                   	pop    eax
c00113c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113cc:	e8 a0 57 ff ff       	call   c0006b71 <free>
c00113d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00113d4:	e8 ab 8b ff ff       	call   c0009f84 <File::close()>
c00113d9:	83 c4 10             	add    esp,0x10
c00113dc:	b0 01                	mov    al,0x1
c00113de:	83 c4 3c             	add    esp,0x3c
c00113e1:	5b                   	pop    ebx
c00113e2:	5e                   	pop    esi
c00113e3:	5f                   	pop    edi
c00113e4:	5d                   	pop    ebp
c00113e5:	c3                   	ret    

c00113e6 <Thr::runtimeReferenceHelper()>:
c00113e6:	83 ec 18             	sub    esp,0x18
c00113e9:	68 aa de 01 c0       	push   0xc001deaa
c00113ee:	e8 fd 84 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00113f3:	fa                   	cli    
c00113f4:	83 c4 10             	add    esp,0x10
c00113f7:	eb fe                	jmp    c00113f7 <Thr::runtimeReferenceHelper()+0x11>

c00113f9 <Thr::getAddressOfKernelSymbol(char const*)>:
c00113f9:	57                   	push   edi
c00113fa:	56                   	push   esi
c00113fb:	53                   	push   ebx
c00113fc:	31 db                	xor    ebx,ebx
c00113fe:	39 1d c0 28 02 c0    	cmp    DWORD PTR ds:0xc00228c0,ebx
c0011404:	7e 3c                	jle    c0011442 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0011406:	8b 34 9d 40 28 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdd7c0]
c001140d:	31 ff                	xor    edi,edi
c001140f:	39 3c 9d 40 27 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdd8c0],edi
c0011416:	7e 27                	jle    c001143f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0011418:	50                   	push   eax
c0011419:	50                   	push   eax
c001141a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001141e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011420:	03 04 9d c0 27 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdd840]
c0011427:	50                   	push   eax
c0011428:	e8 d3 f2 fe ff       	call   c0000700 <strcmp>
c001142d:	83 c4 10             	add    esp,0x10
c0011430:	85 c0                	test   eax,eax
c0011432:	75 05                	jne    c0011439 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0011434:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011437:	eb 0b                	jmp    c0011444 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0011439:	83 c6 10             	add    esi,0x10
c001143c:	47                   	inc    edi
c001143d:	eb d0                	jmp    c001140f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001143f:	43                   	inc    ebx
c0011440:	eb bc                	jmp    c00113fe <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0011442:	31 c0                	xor    eax,eax
c0011444:	5b                   	pop    ebx
c0011445:	5e                   	pop    esi
c0011446:	5f                   	pop    edi
c0011447:	c3                   	ret    

c0011448 <Thr::loadKernelSymbolTable(char const*)>:
c0011448:	55                   	push   ebp
c0011449:	57                   	push   edi
c001144a:	56                   	push   esi
c001144b:	53                   	push   ebx
c001144c:	83 ec 68             	sub    esp,0x68
c001144f:	8b 35 10 29 02 c0    	mov    esi,DWORD PTR ds:0xc0022910
c0011455:	68 14 01 00 00       	push   0x114
c001145a:	e8 02 57 ff ff       	call   c0006b61 <malloc>
c001145f:	83 c4 0c             	add    esp,0xc
c0011462:	89 c3                	mov    ebx,eax
c0011464:	56                   	push   esi
c0011465:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0011469:	50                   	push   eax
c001146a:	e8 f7 89 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c001146f:	5e                   	pop    esi
c0011470:	5f                   	pop    edi
c0011471:	6a 01                	push   0x1
c0011473:	53                   	push   ebx
c0011474:	e8 ad 8a ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c0011479:	83 c4 10             	add    esp,0x10
c001147c:	85 c0                	test   eax,eax
c001147e:	74 0a                	je     c001148a <Thr::loadKernelSymbolTable(char const*)+0x42>
c0011480:	83 ec 0c             	sub    esp,0xc
c0011483:	68 cc de 01 c0       	push   0xc001decc
c0011488:	eb 34                	jmp    c00114be <Thr::loadKernelSymbolTable(char const*)+0x76>
c001148a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011492:	83 ec 0c             	sub    esp,0xc
c0011495:	6a 34                	push   0x34
c0011497:	e8 c5 56 ff ff       	call   c0006b61 <malloc>
c001149c:	59                   	pop    ecx
c001149d:	89 c7                	mov    edi,eax
c001149f:	8d 74 24 34          	lea    esi,[esp+0x34]
c00114a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114a5:	56                   	push   esi
c00114a6:	57                   	push   edi
c00114a7:	6a 00                	push   0x0
c00114a9:	6a 34                	push   0x34
c00114ab:	53                   	push   ebx
c00114ac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00114af:	83 c4 20             	add    esp,0x20
c00114b2:	85 c0                	test   eax,eax
c00114b4:	74 17                	je     c00114cd <Thr::loadKernelSymbolTable(char const*)+0x85>
c00114b6:	83 ec 0c             	sub    esp,0xc
c00114b9:	68 e3 de 01 c0       	push   0xc001dee3
c00114be:	e8 7c df ff ff       	call   c000f43f <Krnl::panic(char const*)>
c00114c3:	83 c4 10             	add    esp,0x10
c00114c6:	31 c0                	xor    eax,eax
c00114c8:	e9 31 02 00 00       	jmp    c00116fe <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00114cd:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00114d3:	75 e1                	jne    c00114b6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00114d5:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00114d8:	85 c0                	test   eax,eax
c00114da:	74 da                	je     c00114b6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00114dc:	52                   	push   edx
c00114dd:	31 d2                	xor    edx,edx
c00114df:	52                   	push   edx
c00114e0:	50                   	push   eax
c00114e1:	53                   	push   ebx
c00114e2:	e8 fd 8a ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c00114e7:	83 c4 10             	add    esp,0x10
c00114ea:	85 c0                	test   eax,eax
c00114ec:	75 c8                	jne    c00114b6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00114ee:	83 ec 0c             	sub    esp,0xc
c00114f1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00114f5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00114f9:	31 ed                	xor    ebp,ebp
c00114fb:	0f af c2             	imul   eax,edx
c00114fe:	50                   	push   eax
c00114ff:	e8 5d 56 ff ff       	call   c0006b61 <malloc>
c0011504:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011506:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001150a:	89 34 24             	mov    DWORD PTR [esp],esi
c001150d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011511:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011515:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011519:	0f af c2             	imul   eax,edx
c001151c:	99                   	cdq    
c001151d:	52                   	push   edx
c001151e:	50                   	push   eax
c001151f:	53                   	push   ebx
c0011520:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011523:	83 c4 20             	add    esp,0x20
c0011526:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001152e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0011536:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001153e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011546:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001154a:	0f 86 aa 00 00 00    	jbe    c00115fa <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0011550:	0f b7 f5             	movzx  esi,bp
c0011553:	6b f6 28             	imul   esi,esi,0x28
c0011556:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001155a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001155d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011561:	50                   	push   eax
c0011562:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011566:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001156a:	8b 16                	mov    edx,DWORD PTR [esi]
c001156c:	6b c0 28             	imul   eax,eax,0x28
c001156f:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0011573:	89 d0                	mov    eax,edx
c0011575:	31 d2                	xor    edx,edx
c0011577:	52                   	push   edx
c0011578:	50                   	push   eax
c0011579:	53                   	push   ebx
c001157a:	e8 65 8a ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c001157f:	83 c4 0c             	add    esp,0xc
c0011582:	6a 20                	push   0x20
c0011584:	6a 00                	push   0x0
c0011586:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001158a:	52                   	push   edx
c001158b:	e8 60 ef fe ff       	call   c00004f0 <memset>
c0011590:	58                   	pop    eax
c0011591:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011593:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0011597:	51                   	push   ecx
c0011598:	8d 54 24 40          	lea    edx,[esp+0x40]
c001159c:	52                   	push   edx
c001159d:	6a 00                	push   0x0
c001159f:	6a 1f                	push   0x1f
c00115a1:	53                   	push   ebx
c00115a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00115a5:	83 c4 18             	add    esp,0x18
c00115a8:	68 fa de 01 c0       	push   0xc001defa
c00115ad:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00115b1:	52                   	push   edx
c00115b2:	e8 49 f1 fe ff       	call   c0000700 <strcmp>
c00115b7:	83 c4 10             	add    esp,0x10
c00115ba:	85 c0                	test   eax,eax
c00115bc:	75 0f                	jne    c00115cd <Thr::loadKernelSymbolTable(char const*)+0x185>
c00115be:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00115c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00115cd:	50                   	push   eax
c00115ce:	50                   	push   eax
c00115cf:	68 02 df 01 c0       	push   0xc001df02
c00115d4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00115d8:	50                   	push   eax
c00115d9:	e8 22 f1 fe ff       	call   c0000700 <strcmp>
c00115de:	83 c4 10             	add    esp,0x10
c00115e1:	85 c0                	test   eax,eax
c00115e3:	75 0f                	jne    c00115f4 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00115e5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00115e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00115ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00115f4:	45                   	inc    ebp
c00115f5:	e9 4c ff ff ff       	jmp    c0011546 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00115fa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00115ff:	75 10                	jne    c0011611 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0011601:	83 ec 0c             	sub    esp,0xc
c0011604:	68 0a df 01 c0       	push   0xc001df0a
c0011609:	e8 31 de ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001160e:	83 c4 10             	add    esp,0x10
c0011611:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0011616:	75 10                	jne    c0011628 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0011618:	83 ec 0c             	sub    esp,0xc
c001161b:	68 0a df 01 c0       	push   0xc001df0a
c0011620:	e8 1a de ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	31 d2                	xor    edx,edx
c001162a:	50                   	push   eax
c001162b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001162f:	52                   	push   edx
c0011630:	50                   	push   eax
c0011631:	53                   	push   ebx
c0011632:	e8 ad 89 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c0011637:	5a                   	pop    edx
c0011638:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001163c:	e8 20 55 ff ff       	call   c0006b61 <malloc>
c0011641:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011645:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011649:	31 c9                	xor    ecx,ecx
c001164b:	5e                   	pop    esi
c001164c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001164e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0011652:	55                   	push   ebp
c0011653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011657:	51                   	push   ecx
c0011658:	52                   	push   edx
c0011659:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001165d:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0011661:	53                   	push   ebx
c0011662:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011665:	83 c4 14             	add    esp,0x14
c0011668:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001166c:	e8 f0 54 ff ff       	call   c0006b61 <malloc>
c0011671:	89 c6                	mov    esi,eax
c0011673:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011675:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011678:	56                   	push   esi
c0011679:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001167d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011681:	51                   	push   ecx
c0011682:	52                   	push   edx
c0011683:	53                   	push   ebx
c0011684:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011687:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001168b:	8b 15 c0 28 02 c0    	mov    edx,DWORD PTR ds:0xc00228c0
c0011691:	83 c4 1c             	add    esp,0x1c
c0011694:	c1 e8 04             	shr    eax,0x4
c0011697:	89 04 95 40 27 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd8c0],eax
c001169e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116a2:	31 d2                	xor    edx,edx
c00116a4:	52                   	push   edx
c00116a5:	50                   	push   eax
c00116a6:	53                   	push   ebx
c00116a7:	e8 38 89 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c00116ac:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00116ae:	31 d2                	xor    edx,edx
c00116b0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00116b3:	56                   	push   esi
c00116b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00116b8:	52                   	push   edx
c00116b9:	50                   	push   eax
c00116ba:	53                   	push   ebx
c00116bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00116be:	83 c4 14             	add    esp,0x14
c00116c1:	53                   	push   ebx
c00116c2:	e8 bd 88 ff ff       	call   c0009f84 <File::close()>
c00116c7:	5d                   	pop    ebp
c00116c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00116cc:	e8 a0 54 ff ff       	call   c0006b71 <free>
c00116d1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00116d4:	e8 98 54 ff ff       	call   c0006b71 <free>
c00116d9:	a1 c0 28 02 c0       	mov    eax,ds:0xc00228c0
c00116de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00116e2:	8d 50 01             	lea    edx,[eax+0x1]
c00116e5:	89 0c 85 40 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd7c0],ecx
c00116ec:	89 34 85 c0 27 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd840],esi
c00116f3:	89 15 c0 28 02 c0    	mov    DWORD PTR ds:0xc00228c0,edx
c00116f9:	83 c4 10             	add    esp,0x10
c00116fc:	b0 01                	mov    al,0x1
c00116fe:	83 c4 5c             	add    esp,0x5c
c0011701:	5b                   	pop    ebx
c0011702:	5e                   	pop    esi
c0011703:	5f                   	pop    edi
c0011704:	5d                   	pop    ebp
c0011705:	c3                   	ret    

c0011706 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0011706:	55                   	push   ebp
c0011707:	57                   	push   edi
c0011708:	56                   	push   esi
c0011709:	53                   	push   ebx
c001170a:	81 ec 68 03 00 00    	sub    esp,0x368
c0011710:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0011717:	8b 1d 10 29 02 c0    	mov    ebx,DWORD PTR ds:0xc0022910
c001171d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0011721:	68 14 01 00 00       	push   0x114
c0011726:	e8 36 54 ff ff       	call   c0006b61 <malloc>
c001172b:	83 c4 0c             	add    esp,0xc
c001172e:	89 c5                	mov    ebp,eax
c0011730:	53                   	push   ebx
c0011731:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0011738:	50                   	push   eax
c0011739:	e8 28 87 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c001173e:	5e                   	pop    esi
c001173f:	5f                   	pop    edi
c0011740:	6a 01                	push   0x1
c0011742:	55                   	push   ebp
c0011743:	e8 de 87 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c0011748:	83 c4 10             	add    esp,0x10
c001174b:	85 c0                	test   eax,eax
c001174d:	0f 85 a7 06 00 00    	jne    c0011dfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011753:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001175b:	83 ec 0c             	sub    esp,0xc
c001175e:	6a 34                	push   0x34
c0011760:	e8 fc 53 ff ff       	call   c0006b61 <malloc>
c0011765:	5b                   	pop    ebx
c0011766:	89 c7                	mov    edi,eax
c0011768:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001176c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001176f:	53                   	push   ebx
c0011770:	57                   	push   edi
c0011771:	6a 00                	push   0x0
c0011773:	6a 34                	push   0x34
c0011775:	55                   	push   ebp
c0011776:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011779:	83 c4 20             	add    esp,0x20
c001177c:	85 c0                	test   eax,eax
c001177e:	0f 85 76 06 00 00    	jne    c0011dfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011784:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001178a:	0f 85 6a 06 00 00    	jne    c0011dfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011790:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011793:	85 c0                	test   eax,eax
c0011795:	0f 84 5f 06 00 00    	je     c0011dfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001179b:	31 d2                	xor    edx,edx
c001179d:	51                   	push   ecx
c001179e:	52                   	push   edx
c001179f:	50                   	push   eax
c00117a0:	55                   	push   ebp
c00117a1:	e8 3e 88 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	85 c0                	test   eax,eax
c00117ab:	0f 85 49 06 00 00    	jne    c0011dfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00117b1:	83 ec 0c             	sub    esp,0xc
c00117b4:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00117b7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00117bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00117bf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00117c3:	0f af c2             	imul   eax,edx
c00117c6:	50                   	push   eax
c00117c7:	e8 95 53 ff ff       	call   c0006b61 <malloc>
c00117cc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00117cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00117d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00117d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117da:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00117de:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00117e2:	0f af c2             	imul   eax,edx
c00117e5:	99                   	cdq    
c00117e6:	52                   	push   edx
c00117e7:	50                   	push   eax
c00117e8:	55                   	push   ebp
c00117e9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00117ec:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00117ef:	83 c4 20             	add    esp,0x20
c00117f2:	85 c0                	test   eax,eax
c00117f4:	0f 84 00 06 00 00    	je     c0011dfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00117fa:	52                   	push   edx
c00117fb:	31 d2                	xor    edx,edx
c00117fd:	52                   	push   edx
c00117fe:	50                   	push   eax
c00117ff:	55                   	push   ebp
c0011800:	e8 df 87 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c0011805:	83 c4 10             	add    esp,0x10
c0011808:	85 c0                	test   eax,eax
c001180a:	0f 85 ea 05 00 00    	jne    c0011dfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011810:	83 ec 0c             	sub    esp,0xc
c0011813:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0011817:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001181b:	31 f6                	xor    esi,esi
c001181d:	0f af c2             	imul   eax,edx
c0011820:	50                   	push   eax
c0011821:	e8 3b 53 ff ff       	call   c0006b61 <malloc>
c0011826:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011829:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001182d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011830:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011834:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0011838:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001183c:	0f af c2             	imul   eax,edx
c001183f:	99                   	cdq    
c0011840:	52                   	push   edx
c0011841:	50                   	push   eax
c0011842:	55                   	push   ebp
c0011843:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011846:	83 c4 20             	add    esp,0x20
c0011849:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001184d:	0f 86 8a 00 00 00    	jbe    c00118dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0011853:	0f b7 de             	movzx  ebx,si
c0011856:	c1 e3 05             	shl    ebx,0x5
c0011859:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001185d:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0011860:	75 75                	jne    c00118d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0011862:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011865:	31 d2                	xor    edx,edx
c0011867:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001186b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001186e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011872:	50                   	push   eax
c0011873:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0011876:	52                   	push   edx
c0011877:	50                   	push   eax
c0011878:	55                   	push   ebp
c0011879:	e8 66 87 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c001187e:	83 c4 10             	add    esp,0x10
c0011881:	85 c0                	test   eax,eax
c0011883:	0f 85 71 05 00 00    	jne    c0011dfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011889:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0011890:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011893:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0011897:	31 d2                	xor    edx,edx
c0011899:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001189d:	83 ec 0c             	sub    esp,0xc
c00118a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118a4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00118ab:	50                   	push   eax
c00118ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118b4:	52                   	push   edx
c00118b5:	50                   	push   eax
c00118b6:	55                   	push   ebp
c00118b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00118ba:	83 c4 1c             	add    esp,0x1c
c00118bd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00118c0:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00118c3:	50                   	push   eax
c00118c4:	6a 00                	push   0x0
c00118c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ca:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00118ce:	50                   	push   eax
c00118cf:	e8 1c ec fe ff       	call   c00004f0 <memset>
c00118d4:	83 c4 10             	add    esp,0x10
c00118d7:	46                   	inc    esi
c00118d8:	e9 6c ff ff ff       	jmp    c0011849 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00118dd:	53                   	push   ebx
c00118de:	31 db                	xor    ebx,ebx
c00118e0:	68 00 01 00 00       	push   0x100
c00118e5:	6a 00                	push   0x0
c00118e7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00118eb:	50                   	push   eax
c00118ec:	e8 ff eb fe ff       	call   c00004f0 <memset>
c00118f1:	83 c4 0c             	add    esp,0xc
c00118f4:	68 00 01 00 00       	push   0x100
c00118f9:	6a 00                	push   0x0
c00118fb:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0011902:	50                   	push   eax
c0011903:	e8 e8 eb fe ff       	call   c00004f0 <memset>
c0011908:	83 c4 10             	add    esp,0x10
c001190b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011913:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001191b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0011923:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001192b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011933:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0011937:	0f 86 30 01 00 00    	jbe    c0011a6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001193d:	0f b7 f3             	movzx  esi,bx
c0011940:	6b f6 28             	imul   esi,esi,0x28
c0011943:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0011947:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001194a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001194e:	52                   	push   edx
c001194f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011953:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0011957:	8b 06                	mov    eax,DWORD PTR [esi]
c0011959:	6b d2 28             	imul   edx,edx,0x28
c001195c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0011960:	31 d2                	xor    edx,edx
c0011962:	52                   	push   edx
c0011963:	50                   	push   eax
c0011964:	55                   	push   ebp
c0011965:	e8 7a 86 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c001196a:	83 c4 0c             	add    esp,0xc
c001196d:	6a 20                	push   0x20
c001196f:	6a 00                	push   0x0
c0011971:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0011978:	51                   	push   ecx
c0011979:	e8 72 eb fe ff       	call   c00004f0 <memset>
c001197e:	59                   	pop    ecx
c001197f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011982:	8d 54 24 58          	lea    edx,[esp+0x58]
c0011986:	52                   	push   edx
c0011987:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001198e:	51                   	push   ecx
c001198f:	6a 00                	push   0x0
c0011991:	6a 1f                	push   0x1f
c0011993:	55                   	push   ebp
c0011994:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011997:	83 c4 1c             	add    esp,0x1c
c001199a:	6a 09                	push   0x9
c001199c:	68 24 df 01 c0       	push   0xc001df24
c00119a1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00119a8:	51                   	push   ecx
c00119a9:	e8 02 ea fe ff       	call   c00003b0 <memcmp>
c00119ae:	83 c4 10             	add    esp,0x10
c00119b1:	85 c0                	test   eax,eax
c00119b3:	75 21                	jne    c00119d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00119b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00119bd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00119c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00119c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00119c8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00119cf:	89 d0                	mov    eax,edx
c00119d1:	40                   	inc    eax
c00119d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119d6:	50                   	push   eax
c00119d7:	6a 09                	push   0x9
c00119d9:	68 2e df 01 c0       	push   0xc001df2e
c00119de:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00119e5:	50                   	push   eax
c00119e6:	e8 c5 e9 fe ff       	call   c00003b0 <memcmp>
c00119eb:	83 c4 10             	add    esp,0x10
c00119ee:	85 c0                	test   eax,eax
c00119f0:	75 21                	jne    c0011a13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00119f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00119fa:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00119fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011a02:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011a05:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0011a0c:	89 d0                	mov    eax,edx
c0011a0e:	40                   	inc    eax
c0011a0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a13:	50                   	push   eax
c0011a14:	50                   	push   eax
c0011a15:	68 fa de 01 c0       	push   0xc001defa
c0011a1a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011a21:	50                   	push   eax
c0011a22:	e8 d9 ec fe ff       	call   c0000700 <strcmp>
c0011a27:	83 c4 10             	add    esp,0x10
c0011a2a:	85 c0                	test   eax,eax
c0011a2c:	75 0f                	jne    c0011a3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0011a2e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011a31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011a35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a3d:	50                   	push   eax
c0011a3e:	50                   	push   eax
c0011a3f:	68 02 df 01 c0       	push   0xc001df02
c0011a44:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011a4b:	50                   	push   eax
c0011a4c:	e8 af ec fe ff       	call   c0000700 <strcmp>
c0011a51:	83 c4 10             	add    esp,0x10
c0011a54:	85 c0                	test   eax,eax
c0011a56:	75 0f                	jne    c0011a67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0011a58:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011a5b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a63:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011a67:	43                   	inc    ebx
c0011a68:	e9 c6 fe ff ff       	jmp    c0011933 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0011a6d:	31 d2                	xor    edx,edx
c0011a6f:	50                   	push   eax
c0011a70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a74:	52                   	push   edx
c0011a75:	50                   	push   eax
c0011a76:	55                   	push   ebp
c0011a77:	e8 68 85 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c0011a7c:	58                   	pop    eax
c0011a7d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011a81:	e8 db 50 ff ff       	call   c0006b61 <malloc>
c0011a86:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011a89:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011a8d:	31 d2                	xor    edx,edx
c0011a8f:	58                   	pop    eax
c0011a90:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0011a94:	53                   	push   ebx
c0011a95:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011a99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a9d:	52                   	push   edx
c0011a9e:	50                   	push   eax
c0011a9f:	55                   	push   ebp
c0011aa0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011aa3:	83 c4 14             	add    esp,0x14
c0011aa6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011aaa:	e8 b2 50 ff ff       	call   c0006b61 <malloc>
c0011aaf:	31 d2                	xor    edx,edx
c0011ab1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011ab5:	83 c4 0c             	add    esp,0xc
c0011ab8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011abc:	52                   	push   edx
c0011abd:	50                   	push   eax
c0011abe:	55                   	push   ebp
c0011abf:	e8 20 85 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c0011ac4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011ac7:	31 d2                	xor    edx,edx
c0011ac9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011acc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011ad0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ad4:	52                   	push   edx
c0011ad5:	50                   	push   eax
c0011ad6:	55                   	push   ebp
c0011ad7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ada:	83 c4 20             	add    esp,0x20
c0011add:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ae5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011ae9:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0011aed:	0f 84 0b 03 00 00    	je     c0011dfe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0011af3:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0011afa:	31 d2                	xor    edx,edx
c0011afc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b00:	c1 e8 03             	shr    eax,0x3
c0011b03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011b07:	51                   	push   ecx
c0011b08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011b0c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0011b10:	52                   	push   edx
c0011b11:	50                   	push   eax
c0011b12:	55                   	push   ebp
c0011b13:	e8 cc 84 ff ff       	call   c0009fe4 <File::seek(unsigned long long)>
c0011b18:	5b                   	pop    ebx
c0011b19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b1d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0011b24:	e8 38 50 ff ff       	call   c0006b61 <malloc>
c0011b29:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011b2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b30:	31 d2                	xor    edx,edx
c0011b32:	5e                   	pop    esi
c0011b33:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011b37:	50                   	push   eax
c0011b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b40:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0011b47:	52                   	push   edx
c0011b48:	50                   	push   eax
c0011b49:	55                   	push   ebp
c0011b4a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011b4d:	83 c4 20             	add    esp,0x20
c0011b50:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0011b58:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b5c:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0011b60:	0f 8d 7c 02 00 00    	jge    c0011de2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0011b66:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b6e:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0011b73:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0011b76:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011b7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b7e:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0011b82:	89 d8                	mov    eax,ebx
c0011b84:	c1 e8 08             	shr    eax,0x8
c0011b87:	89 c6                	mov    esi,eax
c0011b89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011b8d:	c1 e6 04             	shl    esi,0x4
c0011b90:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0011b94:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0011b97:	85 d2                	test   edx,edx
c0011b99:	0f 85 bf 00 00 00    	jne    c0011c5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011b9f:	83 ec 0c             	sub    esp,0xc
c0011ba2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011ba6:	03 06                	add    eax,DWORD PTR [esi]
c0011ba8:	50                   	push   eax
c0011ba9:	e8 4b f8 ff ff       	call   c00113f9 <Thr::getAddressOfKernelSymbol(char const*)>
c0011bae:	83 c4 10             	add    esp,0x10
c0011bb1:	89 c2                	mov    edx,eax
c0011bb3:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0011bb8:	85 c0                	test   eax,eax
c0011bba:	0f 85 9e 00 00 00    	jne    c0011c5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011bc0:	83 ec 0c             	sub    esp,0xc
c0011bc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011bc7:	03 06                	add    eax,DWORD PTR [esi]
c0011bc9:	50                   	push   eax
c0011bca:	e8 35 40 ff ff       	call   c0005c04 <Krnl::resolveCompatibilitySymbol(char*)>
c0011bcf:	83 c4 10             	add    esp,0x10
c0011bd2:	89 c2                	mov    edx,eax
c0011bd4:	85 c0                	test   eax,eax
c0011bd6:	0f 85 82 00 00 00    	jne    c0011c5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011bdc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011be0:	50                   	push   eax
c0011be1:	50                   	push   eax
c0011be2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011be6:	03 06                	add    eax,DWORD PTR [esi]
c0011be8:	50                   	push   eax
c0011be9:	68 38 df 01 c0       	push   0xc001df38
c0011bee:	e8 fd 7c ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0011bf3:	58                   	pop    eax
c0011bf4:	5a                   	pop    edx
c0011bf5:	68 52 df 01 c0       	push   0xc001df52
c0011bfa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011c01:	50                   	push   eax
c0011c02:	e8 19 ea fe ff       	call   c0000620 <strcpy>
c0011c07:	59                   	pop    ecx
c0011c08:	58                   	pop    eax
c0011c09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c0d:	03 06                	add    eax,DWORD PTR [esi]
c0011c0f:	50                   	push   eax
c0011c10:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011c17:	50                   	push   eax
c0011c18:	e8 c3 eb fe ff       	call   c00007e0 <strcat>
c0011c1d:	58                   	pop    eax
c0011c1e:	5a                   	pop    edx
c0011c1f:	68 e8 df 01 c0       	push   0xc001dfe8
c0011c24:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011c2b:	50                   	push   eax
c0011c2c:	e8 af eb fe ff       	call   c00007e0 <strcat>
c0011c31:	83 c4 10             	add    esp,0x10
c0011c34:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011c39:	0f 84 5d 01 00 00    	je     c0011d9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011c3f:	83 ec 0c             	sub    esp,0xc
c0011c42:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011c49:	50                   	push   eax
c0011c4a:	e8 f0 d7 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011c4f:	83 c4 10             	add    esp,0x10
c0011c52:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011c56:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011c5a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0011c5e:	80 fb 01             	cmp    bl,0x1
c0011c61:	0f 85 88 00 00 00    	jne    c0011cef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0011c67:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0011c6e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011c72:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0011c76:	01 ce                	add    esi,ecx
c0011c78:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011c7e:	0f 94 c0             	sete   al
c0011c81:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011c87:	0f 94 c3             	sete   bl
c0011c8a:	09 c3                	or     ebx,eax
c0011c8c:	8b 06                	mov    eax,DWORD PTR [esi]
c0011c8e:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011c93:	74 41                	je     c0011cd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0011c95:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0011c98:	84 db                	test   bl,bl
c0011c9a:	75 15                	jne    c0011cb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0011c9c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011ca0:	66 83 f8 0c          	cmp    ax,0xc
c0011ca4:	76 05                	jbe    c0011cab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0011ca6:	b8 0c 00 00 00       	mov    eax,0xc
c0011cab:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011caf:	76 37                	jbe    c0011ce8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011cb1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0011cb5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011cba:	0f 84 dc 00 00 00    	je     c0011d9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011cc0:	83 ec 0c             	sub    esp,0xc
c0011cc3:	68 69 df 01 c0       	push   0xc001df69
c0011cc8:	e8 72 d7 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011ccd:	83 c4 10             	add    esp,0x10
c0011cd0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011cd4:	eb 12                	jmp    c0011ce8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011cd6:	01 c1                	add    ecx,eax
c0011cd8:	84 db                	test   bl,bl
c0011cda:	75 0c                	jne    c0011ce8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011cdc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011ce0:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011ce4:	77 02                	ja     c0011ce8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011ce6:	01 d1                	add    ecx,edx
c0011ce8:	89 0e                	mov    DWORD PTR [esi],ecx
c0011cea:	e9 ea 00 00 00       	jmp    c0011dd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011cef:	80 fb 02             	cmp    bl,0x2
c0011cf2:	75 7c                	jne    c0011d70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0011cf4:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0011cfb:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0011cff:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0011d03:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011d09:	74 20                	je     c0011d2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011d0b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011d11:	74 18                	je     c0011d2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011d13:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011d17:	b9 0a 00 00 00       	mov    ecx,0xa
c0011d1c:	66 83 f8 0e          	cmp    ax,0xe
c0011d20:	77 03                	ja     c0011d25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0011d22:	8d 48 fc             	lea    ecx,[eax-0x4]
c0011d25:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0011d29:	76 1f                	jbe    c0011d4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0011d2b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0011d2f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011d34:	74 66                	je     c0011d9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011d36:	83 ec 0c             	sub    esp,0xc
c0011d39:	68 85 df 01 c0       	push   0xc001df85
c0011d3e:	e8 fc d6 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011d43:	83 c4 10             	add    esp,0x10
c0011d46:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d4a:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d4c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011d51:	74 13                	je     c0011d66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0011d53:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d57:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0011d5e:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0011d62:	01 c8                	add    eax,ecx
c0011d64:	eb 04                	jmp    c0011d6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0011d66:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0011d6a:	01 c2                	add    edx,eax
c0011d6c:	89 16                	mov    DWORD PTR [esi],edx
c0011d6e:	eb 69                	jmp    c0011dd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011d70:	0f b6 db             	movzx  ebx,bl
c0011d73:	50                   	push   eax
c0011d74:	50                   	push   eax
c0011d75:	53                   	push   ebx
c0011d76:	68 a1 df 01 c0       	push   0xc001dfa1
c0011d7b:	e8 70 7b ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0011d80:	83 c4 10             	add    esp,0x10
c0011d83:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011d88:	74 12                	je     c0011d9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011d8a:	83 ec 0c             	sub    esp,0xc
c0011d8d:	68 ac df 01 c0       	push   0xc001dfac
c0011d92:	e8 a8 d6 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011d97:	83 c4 10             	add    esp,0x10
c0011d9a:	eb 3d                	jmp    c0011dd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011d9c:	83 ec 0c             	sub    esp,0xc
c0011d9f:	55                   	push   ebp
c0011da0:	e8 df 81 ff ff       	call   c0009f84 <File::close()>
c0011da5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011da8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011dab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011dae:	59                   	pop    ecx
c0011daf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011db3:	e8 b9 4d ff ff       	call   c0006b71 <free>
c0011db8:	5b                   	pop    ebx
c0011db9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011dbd:	e8 af 4d ff ff       	call   c0006b71 <free>
c0011dc2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011dc5:	e8 a7 4d ff ff       	call   c0006b71 <free>
c0011dca:	5e                   	pop    esi
c0011dcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dcf:	e8 9d 4d ff ff       	call   c0006b71 <free>
c0011dd4:	83 c4 10             	add    esp,0x10
c0011dd7:	eb 21                	jmp    c0011dfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011dd9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0011ddd:	e9 76 fd ff ff       	jmp    c0011b58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0011de2:	83 ec 0c             	sub    esp,0xc
c0011de5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011de9:	e8 83 4d ff ff       	call   c0006b71 <free>
c0011dee:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0011df2:	83 c4 10             	add    esp,0x10
c0011df5:	e9 eb fc ff ff       	jmp    c0011ae5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0011dfa:	31 c0                	xor    eax,eax
c0011dfc:	eb 33                	jmp    c0011e31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0011dfe:	83 ec 0c             	sub    esp,0xc
c0011e01:	55                   	push   ebp
c0011e02:	e8 7d 81 ff ff       	call   c0009f84 <File::close()>
c0011e07:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011e0a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011e0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e10:	58                   	pop    eax
c0011e11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e15:	e8 57 4d ff ff       	call   c0006b71 <free>
c0011e1a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e1d:	e8 4f 4d ff ff       	call   c0006b71 <free>
c0011e22:	5a                   	pop    edx
c0011e23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e27:	e8 45 4d ff ff       	call   c0006b71 <free>
c0011e2c:	83 c4 10             	add    esp,0x10
c0011e2f:	b0 01                	mov    al,0x1
c0011e31:	81 c4 5c 03 00 00    	add    esp,0x35c
c0011e37:	5b                   	pop    ebx
c0011e38:	5e                   	pop    esi
c0011e39:	5f                   	pop    edi
c0011e3a:	5d                   	pop    ebp
c0011e3b:	c3                   	ret    

c0011e3c <Thr::getDriverBaseFromAddress(unsigned long)>:
c0011e3c:	56                   	push   esi
c0011e3d:	31 d2                	xor    edx,edx
c0011e3f:	53                   	push   ebx
c0011e40:	8b 1d 20 21 02 c0    	mov    ebx,DWORD PTR ds:0xc0022120
c0011e46:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011e4a:	39 d3                	cmp    ebx,edx
c0011e4c:	7e 1b                	jle    c0011e69 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0011e4e:	8b 04 95 40 23 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddcc0]
c0011e55:	39 c8                	cmp    eax,ecx
c0011e57:	77 0d                	ja     c0011e66 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0011e59:	8b 34 95 40 21 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffddec0]
c0011e60:	01 c6                	add    esi,eax
c0011e62:	39 ce                	cmp    esi,ecx
c0011e64:	77 05                	ja     c0011e6b <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0011e66:	42                   	inc    edx
c0011e67:	eb e1                	jmp    c0011e4a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0011e69:	31 c0                	xor    eax,eax
c0011e6b:	5b                   	pop    ebx
c0011e6c:	5e                   	pop    esi
c0011e6d:	c3                   	ret    

c0011e6e <Thr::getDriverNameFromAddress(unsigned long)>:
c0011e6e:	53                   	push   ebx
c0011e6f:	31 c0                	xor    eax,eax
c0011e71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e75:	8b 1d 20 21 02 c0    	mov    ebx,DWORD PTR ds:0xc0022120
c0011e7b:	39 c3                	cmp    ebx,eax
c0011e7d:	7e 22                	jle    c0011ea1 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0011e7f:	8b 14 85 40 23 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddcc0]
c0011e86:	39 ca                	cmp    edx,ecx
c0011e88:	77 14                	ja     c0011e9e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0011e8a:	03 14 85 40 21 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffddec0]
c0011e91:	39 ca                	cmp    edx,ecx
c0011e93:	76 09                	jbe    c0011e9e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0011e95:	8b 04 85 40 25 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddac0]
c0011e9c:	eb 05                	jmp    c0011ea3 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0011e9e:	40                   	inc    eax
c0011e9f:	eb da                	jmp    c0011e7b <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0011ea1:	31 c0                	xor    eax,eax
c0011ea3:	5b                   	pop    ebx
c0011ea4:	c3                   	ret    

c0011ea5 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0011ea5:	53                   	push   ebx
c0011ea6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0011eaa:	53                   	push   ebx
c0011eab:	e8 8c ff ff ff       	call   c0011e3c <Thr::getDriverBaseFromAddress(unsigned long)>
c0011eb0:	5a                   	pop    edx
c0011eb1:	31 d2                	xor    edx,edx
c0011eb3:	85 c0                	test   eax,eax
c0011eb5:	74 04                	je     c0011ebb <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0011eb7:	89 da                	mov    edx,ebx
c0011eb9:	29 c2                	sub    edx,eax
c0011ebb:	89 d0                	mov    eax,edx
c0011ebd:	5b                   	pop    ebx
c0011ebe:	c3                   	ret    

c0011ebf <Thr::loadDLL(char const*, bool)>:
c0011ebf:	55                   	push   ebp
c0011ec0:	57                   	push   edi
c0011ec1:	56                   	push   esi
c0011ec2:	53                   	push   ebx
c0011ec3:	81 ec 34 01 00 00    	sub    esp,0x134
c0011ec9:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0011ed0:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0011ed7:	56                   	push   esi
c0011ed8:	68 c4 df 01 c0       	push   0xc001dfc4
c0011edd:	e8 0e 7a ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0011ee2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011ee9:	e8 73 4c ff ff       	call   c0006b61 <malloc>
c0011eee:	83 c4 0c             	add    esp,0xc
c0011ef1:	89 c3                	mov    ebx,eax
c0011ef3:	ff 35 10 29 02 c0    	push   DWORD PTR ds:0xc0022910
c0011ef9:	56                   	push   esi
c0011efa:	50                   	push   eax
c0011efb:	e8 66 7f ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c0011f00:	83 c4 10             	add    esp,0x10
c0011f03:	85 db                	test   ebx,ebx
c0011f05:	75 3c                	jne    c0011f43 <Thr::loadDLL(char const*, bool)+0x84>
c0011f07:	89 f8                	mov    eax,edi
c0011f09:	84 c0                	test   al,al
c0011f0b:	0f 84 d2 01 00 00    	je     c00120e3 <Thr::loadDLL(char const*, bool)+0x224>
c0011f11:	55                   	push   ebp
c0011f12:	55                   	push   ebp
c0011f13:	68 d5 df 01 c0       	push   0xc001dfd5
c0011f18:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0011f1c:	55                   	push   ebp
c0011f1d:	e8 fe e6 fe ff       	call   c0000620 <strcpy>
c0011f22:	58                   	pop    eax
c0011f23:	5a                   	pop    edx
c0011f24:	56                   	push   esi
c0011f25:	55                   	push   ebp
c0011f26:	e8 b5 e8 fe ff       	call   c00007e0 <strcat>
c0011f2b:	59                   	pop    ecx
c0011f2c:	58                   	pop    eax
c0011f2d:	68 e8 df 01 c0       	push   0xc001dfe8
c0011f32:	55                   	push   ebp
c0011f33:	e8 a8 e8 fe ff       	call   c00007e0 <strcat>
c0011f38:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011f3b:	e8 ff d4 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011f40:	83 c4 10             	add    esp,0x10
c0011f43:	51                   	push   ecx
c0011f44:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0011f48:	50                   	push   eax
c0011f49:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011f4d:	50                   	push   eax
c0011f4e:	53                   	push   ebx
c0011f4f:	e8 7e 82 ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c0011f54:	83 c4 10             	add    esp,0x10
c0011f57:	85 db                	test   ebx,ebx
c0011f59:	74 0c                	je     c0011f67 <Thr::loadDLL(char const*, bool)+0xa8>
c0011f5b:	83 ec 0c             	sub    esp,0xc
c0011f5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f60:	53                   	push   ebx
c0011f61:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f64:	83 c4 10             	add    esp,0x10
c0011f67:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0011f6c:	75 0a                	jne    c0011f78 <Thr::loadDLL(char const*, bool)+0xb9>
c0011f6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f72:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011f76:	75 3c                	jne    c0011fb4 <Thr::loadDLL(char const*, bool)+0xf5>
c0011f78:	89 f8                	mov    eax,edi
c0011f7a:	84 c0                	test   al,al
c0011f7c:	0f 84 49 01 00 00    	je     c00120cb <Thr::loadDLL(char const*, bool)+0x20c>
c0011f82:	51                   	push   ecx
c0011f83:	51                   	push   ecx
c0011f84:	68 d5 df 01 c0       	push   0xc001dfd5
c0011f89:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0011f8d:	53                   	push   ebx
c0011f8e:	e8 8d e6 fe ff       	call   c0000620 <strcpy>
c0011f93:	5d                   	pop    ebp
c0011f94:	58                   	pop    eax
c0011f95:	56                   	push   esi
c0011f96:	53                   	push   ebx
c0011f97:	e8 44 e8 fe ff       	call   c00007e0 <strcat>
c0011f9c:	58                   	pop    eax
c0011f9d:	5a                   	pop    edx
c0011f9e:	68 e8 df 01 c0       	push   0xc001dfe8
c0011fa3:	53                   	push   ebx
c0011fa4:	e8 37 e8 fe ff       	call   c00007e0 <strcat>
c0011fa9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fac:	e8 8e d4 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0011fb1:	83 c4 10             	add    esp,0x10
c0011fb4:	52                   	push   edx
c0011fb5:	6a 03                	push   0x3
c0011fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fbb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011fbf:	05 ff 0f 00 00       	add    eax,0xfff
c0011fc4:	83 d2 00             	adc    edx,0x0
c0011fc7:	0f ac d0 0c          	shrd   eax,edx,0xc
c0011fcb:	50                   	push   eax
c0011fcc:	ff 35 10 f5 01 c0    	push   DWORD PTR ds:0xc001f510
c0011fd2:	e8 5f 6e ff ff       	call   c0008e36 <VAS::allocatePages(int, int)>
c0011fd7:	59                   	pop    ecx
c0011fd8:	89 c3                	mov    ebx,eax
c0011fda:	5d                   	pop    ebp
c0011fdb:	50                   	push   eax
c0011fdc:	68 ce cc 01 c0       	push   0xc001ccce
c0011fe1:	e8 0a 79 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0011fe6:	89 34 24             	mov    DWORD PTR [esp],esi
c0011fe9:	e8 72 e5 fe ff       	call   c0000560 <strlen>
c0011fee:	8b 2d 20 21 02 c0    	mov    ebp,DWORD PTR ds:0xc0022120
c0011ff4:	40                   	inc    eax
c0011ff5:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ff8:	e8 64 4b ff ff       	call   c0006b61 <malloc>
c0011ffd:	89 04 ad 40 25 02 c0 	mov    DWORD PTR [ebp*4-0x3ffddac0],eax
c0012004:	58                   	pop    eax
c0012005:	a1 20 21 02 c0       	mov    eax,ds:0xc0022120
c001200a:	5a                   	pop    edx
c001200b:	56                   	push   esi
c001200c:	ff 34 85 40 25 02 c0 	push   DWORD PTR [eax*4-0x3ffddac0]
c0012013:	e8 08 e6 fe ff       	call   c0000620 <strcpy>
c0012018:	a1 20 21 02 c0       	mov    eax,ds:0xc0022120
c001201d:	8d 50 01             	lea    edx,[eax+0x1]
c0012020:	89 1c 85 40 23 02 c0 	mov    DWORD PTR [eax*4-0x3ffddcc0],ebx
c0012027:	89 15 20 21 02 c0    	mov    DWORD PTR ds:0xc0022120,edx
c001202d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012031:	83 c4 0c             	add    esp,0xc
c0012034:	89 14 85 40 21 02 c0 	mov    DWORD PTR [eax*4-0x3ffddec0],edx
c001203b:	6a 01                	push   0x1
c001203d:	53                   	push   ebx
c001203e:	56                   	push   esi
c001203f:	e8 c2 f6 ff ff       	call   c0011706 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012044:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012048:	83 c4 10             	add    esp,0x10
c001204b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012050:	0f 85 89 00 00 00    	jne    c00120df <Thr::loadDLL(char const*, bool)+0x220>
c0012056:	89 f8                	mov    eax,edi
c0012058:	84 c0                	test   al,al
c001205a:	74 73                	je     c00120cf <Thr::loadDLL(char const*, bool)+0x210>
c001205c:	83 ec 0c             	sub    esp,0xc
c001205f:	68 ea df 01 c0       	push   0xc001dfea
c0012064:	e8 d6 d3 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0012069:	83 c4 10             	add    esp,0x10
c001206c:	eb 61                	jmp    c00120cf <Thr::loadDLL(char const*, bool)+0x210>
c001206e:	50                   	push   eax
c001206f:	50                   	push   eax
c0012070:	89 e8                	mov    eax,ebp
c0012072:	c1 e0 0c             	shl    eax,0xc
c0012075:	01 d8                	add    eax,ebx
c0012077:	50                   	push   eax
c0012078:	ff 35 10 f5 01 c0    	push   DWORD PTR ds:0xc001f510
c001207e:	e8 2b 69 ff ff       	call   c00089ae <VAS::getPageTableEntry(unsigned long)>
c0012083:	83 c4 10             	add    esp,0x10
c0012086:	8b 00                	mov    eax,DWORD PTR [eax]
c0012088:	a8 60                	test   al,0x60
c001208a:	75 11                	jne    c001209d <Thr::loadDLL(char const*, bool)+0x1de>
c001208c:	83 ec 0c             	sub    esp,0xc
c001208f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012094:	50                   	push   eax
c0012095:	e8 32 4e ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c001209a:	83 c4 10             	add    esp,0x10
c001209d:	45                   	inc    ebp
c001209e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120a6:	05 ff 0f 00 00       	add    eax,0xfff
c00120ab:	bf 00 00 00 00       	mov    edi,0x0
c00120b0:	83 d2 00             	adc    edx,0x0
c00120b3:	0f ac d0 0c          	shrd   eax,edx,0xc
c00120b7:	c1 ea 0c             	shr    edx,0xc
c00120ba:	39 c5                	cmp    ebp,eax
c00120bc:	89 d1                	mov    ecx,edx
c00120be:	89 f8                	mov    eax,edi
c00120c0:	19 c8                	sbb    eax,ecx
c00120c2:	72 aa                	jb     c001206e <Thr::loadDLL(char const*, bool)+0x1af>
c00120c4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00120c9:	75 18                	jne    c00120e3 <Thr::loadDLL(char const*, bool)+0x224>
c00120cb:	31 db                	xor    ebx,ebx
c00120cd:	eb 14                	jmp    c00120e3 <Thr::loadDLL(char const*, bool)+0x224>
c00120cf:	83 ec 0c             	sub    esp,0xc
c00120d2:	68 09 e0 01 c0       	push   0xc001e009
c00120d7:	e8 63 d3 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c00120dc:	83 c4 10             	add    esp,0x10
c00120df:	31 ed                	xor    ebp,ebp
c00120e1:	eb bb                	jmp    c001209e <Thr::loadDLL(char const*, bool)+0x1df>
c00120e3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00120e9:	89 d8                	mov    eax,ebx
c00120eb:	5b                   	pop    ebx
c00120ec:	5e                   	pop    esi
c00120ed:	5f                   	pop    edi
c00120ee:	5d                   	pop    ebp
c00120ef:	c3                   	ret    

c00120f0 <Thr::executeDLL(unsigned long, void*)>:
c00120f0:	56                   	push   esi
c00120f1:	53                   	push   ebx
c00120f2:	52                   	push   edx
c00120f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00120fb:	85 db                	test   ebx,ebx
c00120fd:	75 10                	jne    c001210f <Thr::executeDLL(unsigned long, void*)+0x1f>
c00120ff:	83 ec 0c             	sub    esp,0xc
c0012102:	68 25 e0 01 c0       	push   0xc001e025
c0012107:	e8 33 d3 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001210c:	83 c4 10             	add    esp,0x10
c001210f:	50                   	push   eax
c0012110:	50                   	push   eax
c0012111:	53                   	push   ebx
c0012112:	68 4f e0 01 c0       	push   0xc001e04f
c0012117:	e8 d4 77 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001211c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012120:	89 d8                	mov    eax,ebx
c0012122:	83 c4 14             	add    esp,0x14
c0012125:	5b                   	pop    ebx
c0012126:	5e                   	pop    esi
c0012127:	ff e0                	jmp    eax
c0012129:	66 90                	xchg   ax,ax
c001212b:	90                   	nop

c001212c <userModeEntryPoint(void*)>:
c001212c:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0012131:	48                   	dec    eax
c0012132:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0012137:	75 03                	jne    c001213c <userModeEntryPoint(void*)+0x10>
c0012139:	fb                   	sti    
c001213a:	66 90                	xchg   ax,ax
c001213c:	fb                   	sti    
c001213d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012142:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012145:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001214b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001214f:	e9 0b e1 fe ff       	jmp    c000025f <goToUsermode>

c0012154 <changeTSS>:
c0012154:	83 ec 14             	sub    esp,0x14
c0012157:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001215c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001215f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012164:	c1 e2 15             	shl    edx,0x15
c0012167:	29 d0                	sub    eax,edx
c0012169:	50                   	push   eax
c001216a:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c001216f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012175:	05 7c 11 00 00       	add    eax,0x117c
c001217a:	50                   	push   eax
c001217b:	e8 70 5e ff ff       	call   c0007ff0 <TSS::setESP(unsigned long)>
c0012180:	83 c4 1c             	add    esp,0x1c
c0012183:	c3                   	ret    

c0012184 <switchToThread(ThreadControlBlock*)>:
c0012184:	57                   	push   edi
c0012185:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c001218a:	56                   	push   esi
c001218b:	85 c0                	test   eax,eax
c001218d:	53                   	push   ebx
c001218e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012192:	0f 85 90 00 00 00    	jne    c0012228 <switchToThread(ThreadControlBlock*)+0xa4>
c0012198:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c001219b:	80 fa ff             	cmp    dl,0xff
c001219e:	0f 84 80 00 00 00    	je     c0012224 <switchToThread(ThreadControlBlock*)+0xa0>
c00121a4:	81 e2 ff 00 00 00    	and    edx,0xff
c00121aa:	b8 00 04 00 00       	mov    eax,0x400
c00121af:	29 d0                	sub    eax,edx
c00121b1:	d1 f8                	sar    eax,1
c00121b3:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00121b6:	66 90                	xchg   ax,ax
c00121b8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00121bb:	e8 7b 24 00 00       	call   c001463b <HalQueryPerformanceCounter()>
c00121c0:	a3 28 29 02 c0       	mov    ds:0xc0022928,eax
c00121c5:	89 15 2c 29 02 c0    	mov    DWORD PTR ds:0xc002292c,edx
c00121cb:	89 c6                	mov    esi,eax
c00121cd:	89 d7                	mov    edi,edx
c00121cf:	2b 35 18 29 02 c0    	sub    esi,DWORD PTR ds:0xc0022918
c00121d5:	a3 18 29 02 c0       	mov    ds:0xc0022918,eax
c00121da:	1b 3d 1c 29 02 c0    	sbb    edi,DWORD PTR ds:0xc002291c
c00121e0:	89 35 20 29 02 c0    	mov    DWORD PTR ds:0xc0022920,esi
c00121e6:	89 3d 24 29 02 c0    	mov    DWORD PTR ds:0xc0022924,edi
c00121ec:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00121f2:	89 15 1c 29 02 c0    	mov    DWORD PTR ds:0xc002291c,edx
c00121f8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00121fb:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00121fe:	01 c6                	add    esi,eax
c0012200:	11 d7                	adc    edi,edx
c0012202:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012205:	83 ec 0c             	sub    esp,0xc
c0012208:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001220b:	53                   	push   ebx
c001220c:	e8 86 e0 fe ff       	call   c0000297 <switchToThreadASM>
c0012211:	0f 20 c0             	mov    eax,cr0
c0012214:	83 c8 08             	or     eax,0x8
c0012217:	0f 22 c0             	mov    cr0,eax
c001221a:	83 c4 10             	add    esp,0x10
c001221d:	5b                   	pop    ebx
c001221e:	5e                   	pop    esi
c001221f:	5f                   	pop    edi
c0012220:	c3                   	ret    
c0012221:	8d 76 00             	lea    esi,[esi+0x0]
c0012224:	31 c0                	xor    eax,eax
c0012226:	eb 90                	jmp    c00121b8 <switchToThread(ThreadControlBlock*)+0x34>
c0012228:	5b                   	pop    ebx
c0012229:	c7 05 e0 28 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00228e0,0x1
c0012233:	5e                   	pop    esi
c0012234:	5f                   	pop    edi
c0012235:	c3                   	ret    
c0012236:	66 90                	xchg   ax,ax

c0012238 <Process::addArgs(char**)>:
c0012238:	57                   	push   edi
c0012239:	56                   	push   esi
c001223a:	53                   	push   ebx
c001223b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001223f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012243:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c001224d:	85 ff                	test   edi,edi
c001224f:	74 43                	je     c0012294 <Process::addArgs(char**)+0x5c>
c0012251:	8b 07                	mov    eax,DWORD PTR [edi]
c0012253:	85 c0                	test   eax,eax
c0012255:	74 3d                	je     c0012294 <Process::addArgs(char**)+0x5c>
c0012257:	31 db                	xor    ebx,ebx
c0012259:	8d 76 00             	lea    esi,[esi+0x0]
c001225c:	83 ec 0c             	sub    esp,0xc
c001225f:	50                   	push   eax
c0012260:	e8 fb e2 fe ff       	call   c0000560 <strlen>
c0012265:	40                   	inc    eax
c0012266:	89 04 24             	mov    DWORD PTR [esp],eax
c0012269:	e8 f3 48 ff ff       	call   c0006b61 <malloc>
c001226e:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012275:	5a                   	pop    edx
c0012276:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012279:	59                   	pop    ecx
c001227a:	43                   	inc    ebx
c001227b:	52                   	push   edx
c001227c:	50                   	push   eax
c001227d:	e8 9e e3 fe ff       	call   c0000620 <strcpy>
c0012282:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012288:	83 c4 10             	add    esp,0x10
c001228b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001228e:	85 c0                	test   eax,eax
c0012290:	75 ca                	jne    c001225c <Process::addArgs(char**)+0x24>
c0012292:	66 90                	xchg   ax,ax
c0012294:	5b                   	pop    ebx
c0012295:	5e                   	pop    esi
c0012296:	5f                   	pop    edi
c0012297:	c3                   	ret    

c0012298 <Process::Process(char const*, Process*, char**)>:
c0012298:	56                   	push   esi
c0012299:	53                   	push   ebx
c001229a:	83 ec 14             	sub    esp,0x14
c001229d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122a1:	05 0c 02 00 00       	add    eax,0x20c
c00122a6:	bb 07 00 00 00       	mov    ebx,0x7
c00122ab:	89 c6                	mov    esi,eax
c00122ad:	8d 76 00             	lea    esi,[esi+0x0]
c00122b0:	85 db                	test   ebx,ebx
c00122b2:	78 14                	js     c00122c8 <Process::Process(char const*, Process*, char**)+0x30>
c00122b4:	83 ec 0c             	sub    esp,0xc
c00122b7:	56                   	push   esi
c00122b8:	e8 af 9c 00 00       	call   c001bf6c <ThreadControlBlock::ThreadControlBlock()>
c00122bd:	83 c4 10             	add    esp,0x10
c00122c0:	83 c6 5f             	add    esi,0x5f
c00122c3:	4b                   	dec    ebx
c00122c4:	eb ea                	jmp    c00122b0 <Process::Process(char const*, Process*, char**)+0x18>
c00122c6:	66 90                	xchg   ax,ax
c00122c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122cc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00122d3:	83 ec 0c             	sub    esp,0xc
c00122d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00122da:	e8 e9 cf ff ff       	call   c000f2c8 <Krnl::newProcessEnv(Process*)>
c00122df:	83 c4 10             	add    esp,0x10
c00122e2:	89 c2                	mov    edx,eax
c00122e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122e8:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00122ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122f2:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00122fb:	a1 50 ee 01 c0       	mov    eax,ds:0xc001ee50
c0012300:	8d 50 01             	lea    edx,[eax+0x1]
c0012303:	89 15 50 ee 01 c0    	mov    DWORD PTR ds:0xc001ee50,edx
c0012309:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001230d:	89 02                	mov    DWORD PTR [edx],eax
c001230f:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0012317:	83 ec 0c             	sub    esp,0xc
c001231a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001231e:	e8 3e 48 ff ff       	call   c0006b61 <malloc>
c0012323:	83 c4 10             	add    esp,0x10
c0012326:	89 c3                	mov    ebx,eax
c0012328:	83 ec 08             	sub    esp,0x8
c001232b:	6a 00                	push   0x0
c001232d:	53                   	push   ebx
c001232e:	e8 ad 6e ff ff       	call   c00091e0 <VAS::VAS(bool)>
c0012333:	83 c4 10             	add    esp,0x10
c0012336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001233a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012340:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012344:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001234e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012352:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012356:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001235c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012360:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012366:	85 c0                	test   eax,eax
c0012368:	74 42                	je     c00123ac <Process::Process(char const*, Process*, char**)+0x114>
c001236a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001236e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012374:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001237a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001237e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012384:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012388:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001238e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012398:	05 0c 01 00 00       	add    eax,0x10c
c001239d:	83 ec 08             	sub    esp,0x8
c00123a0:	52                   	push   edx
c00123a1:	50                   	push   eax
c00123a2:	e8 79 e2 fe ff       	call   c0000620 <strcpy>
c00123a7:	83 c4 10             	add    esp,0x10
c00123aa:	eb 64                	jmp    c0012410 <Process::Process(char const*, Process*, char**)+0x178>
c00123ac:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c00123b4:	83 ec 0c             	sub    esp,0xc
c00123b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00123bb:	e8 a1 47 ff ff       	call   c0006b61 <malloc>
c00123c0:	83 c4 10             	add    esp,0x10
c00123c3:	89 c3                	mov    ebx,eax
c00123c5:	83 ec 08             	sub    esp,0x8
c00123c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00123cc:	53                   	push   ebx
c00123cd:	e8 c2 59 ff ff       	call   c0007d94 <VgaText::VgaText(char const*)>
c00123d2:	83 c4 10             	add    esp,0x10
c00123d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123d9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00123df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00123e9:	83 ec 0c             	sub    esp,0xc
c00123ec:	50                   	push   eax
c00123ed:	e8 42 52 ff ff       	call   c0007634 <addToTerminalCycle(VgaText*)>
c00123f2:	83 c4 10             	add    esp,0x10
c00123f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123f9:	05 0c 01 00 00       	add    eax,0x10c
c00123fe:	83 ec 08             	sub    esp,0x8
c0012401:	68 6e e0 01 c0       	push   0xc001e06e
c0012406:	50                   	push   eax
c0012407:	e8 14 e2 fe ff       	call   c0000620 <strcpy>
c001240c:	83 c4 10             	add    esp,0x10
c001240f:	90                   	nop
c0012410:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012414:	83 c0 0c             	add    eax,0xc
c0012417:	83 ec 08             	sub    esp,0x8
c001241a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001241e:	50                   	push   eax
c001241f:	e8 fc e1 fe ff       	call   c0000620 <strcpy>
c0012424:	83 c4 10             	add    esp,0x10
c0012427:	83 ec 08             	sub    esp,0x8
c001242a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001242e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012432:	e8 01 fe ff ff       	call   c0012238 <Process::addArgs(char**)>
c0012437:	83 c4 10             	add    esp,0x10
c001243a:	83 ec 08             	sub    esp,0x8
c001243d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012441:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012445:	e8 86 ed ff ff       	call   c00111d0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001244a:	83 c4 10             	add    esp,0x10
c001244d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012451:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012455:	83 f0 01             	xor    eax,0x1
c0012458:	88 c2                	mov    dl,al
c001245a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001245e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0012464:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012468:	25 ff 00 00 00       	and    eax,0xff
c001246d:	83 ec 08             	sub    esp,0x8
c0012470:	50                   	push   eax
c0012471:	68 c8 e0 01 c0       	push   0xc001e0c8
c0012476:	e8 75 74 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001247b:	83 c4 10             	add    esp,0x10
c001247e:	90                   	nop
c001247f:	83 c4 14             	add    esp,0x14
c0012482:	5b                   	pop    ebx
c0012483:	5e                   	pop    esi
c0012484:	c3                   	ret    
c0012485:	90                   	nop
c0012486:	66 90                	xchg   ax,ax

c0012488 <Process::Process(bool, char const*, Process*, char**)>:
c0012488:	56                   	push   esi
c0012489:	53                   	push   ebx
c001248a:	83 ec 24             	sub    esp,0x24
c001248d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012491:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012499:	05 0c 02 00 00       	add    eax,0x20c
c001249e:	bb 07 00 00 00       	mov    ebx,0x7
c00124a3:	89 c6                	mov    esi,eax
c00124a5:	8d 76 00             	lea    esi,[esi+0x0]
c00124a8:	85 db                	test   ebx,ebx
c00124aa:	78 14                	js     c00124c0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00124ac:	83 ec 0c             	sub    esp,0xc
c00124af:	56                   	push   esi
c00124b0:	e8 b7 9a 00 00       	call   c001bf6c <ThreadControlBlock::ThreadControlBlock()>
c00124b5:	83 c4 10             	add    esp,0x10
c00124b8:	83 c6 5f             	add    esi,0x5f
c00124bb:	4b                   	dec    ebx
c00124bc:	eb ea                	jmp    c00124a8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00124be:	66 90                	xchg   ax,ax
c00124c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124c4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00124cb:	83 ec 0c             	sub    esp,0xc
c00124ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00124d2:	e8 f1 cd ff ff       	call   c000f2c8 <Krnl::newProcessEnv(Process*)>
c00124d7:	83 c4 10             	add    esp,0x10
c00124da:	89 c2                	mov    edx,eax
c00124dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124e0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00124e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124ea:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00124f3:	a1 50 ee 01 c0       	mov    eax,ds:0xc001ee50
c00124f8:	8d 50 01             	lea    edx,[eax+0x1]
c00124fb:	89 15 50 ee 01 c0    	mov    DWORD PTR ds:0xc001ee50,edx
c0012501:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012505:	89 02                	mov    DWORD PTR [edx],eax
c0012507:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001250f:	83 ec 0c             	sub    esp,0xc
c0012512:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012516:	e8 46 46 ff ff       	call   c0006b61 <malloc>
c001251b:	83 c4 10             	add    esp,0x10
c001251e:	89 c3                	mov    ebx,eax
c0012520:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0012524:	25 ff 00 00 00       	and    eax,0xff
c0012529:	83 ec 08             	sub    esp,0x8
c001252c:	50                   	push   eax
c001252d:	53                   	push   ebx
c001252e:	e8 ad 6c ff ff       	call   c00091e0 <VAS::VAS(bool)>
c0012533:	83 c4 10             	add    esp,0x10
c0012536:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001253a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012540:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012544:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001254e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012552:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012556:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001255c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012560:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012566:	85 c0                	test   eax,eax
c0012568:	74 42                	je     c00125ac <Process::Process(bool, char const*, Process*, char**)+0x124>
c001256a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001256e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012574:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001257a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001257e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012584:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012588:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001258e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012594:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012598:	05 0c 01 00 00       	add    eax,0x10c
c001259d:	83 ec 08             	sub    esp,0x8
c00125a0:	52                   	push   edx
c00125a1:	50                   	push   eax
c00125a2:	e8 79 e0 fe ff       	call   c0000620 <strcpy>
c00125a7:	83 c4 10             	add    esp,0x10
c00125aa:	eb 64                	jmp    c0012610 <Process::Process(bool, char const*, Process*, char**)+0x188>
c00125ac:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00125b4:	83 ec 0c             	sub    esp,0xc
c00125b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00125bb:	e8 a1 45 ff ff       	call   c0006b61 <malloc>
c00125c0:	83 c4 10             	add    esp,0x10
c00125c3:	89 c3                	mov    ebx,eax
c00125c5:	83 ec 08             	sub    esp,0x8
c00125c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00125cc:	53                   	push   ebx
c00125cd:	e8 c2 57 ff ff       	call   c0007d94 <VgaText::VgaText(char const*)>
c00125d2:	83 c4 10             	add    esp,0x10
c00125d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125d9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00125df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00125e9:	83 ec 0c             	sub    esp,0xc
c00125ec:	50                   	push   eax
c00125ed:	e8 42 50 ff ff       	call   c0007634 <addToTerminalCycle(VgaText*)>
c00125f2:	83 c4 10             	add    esp,0x10
c00125f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125f9:	05 0c 01 00 00       	add    eax,0x10c
c00125fe:	83 ec 08             	sub    esp,0x8
c0012601:	68 6e e0 01 c0       	push   0xc001e06e
c0012606:	50                   	push   eax
c0012607:	e8 14 e0 fe ff       	call   c0000620 <strcpy>
c001260c:	83 c4 10             	add    esp,0x10
c001260f:	90                   	nop
c0012610:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012614:	83 c0 0c             	add    eax,0xc
c0012617:	83 ec 08             	sub    esp,0x8
c001261a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001261e:	50                   	push   eax
c001261f:	e8 fc df fe ff       	call   c0000620 <strcpy>
c0012624:	83 c4 10             	add    esp,0x10
c0012627:	83 ec 08             	sub    esp,0x8
c001262a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001262e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012632:	e8 01 fc ff ff       	call   c0012238 <Process::addArgs(char**)>
c0012637:	83 c4 10             	add    esp,0x10
c001263a:	90                   	nop
c001263b:	83 c4 24             	add    esp,0x24
c001263e:	5b                   	pop    ebx
c001263f:	5e                   	pop    esi
c0012640:	c3                   	ret    
c0012641:	8d 76 00             	lea    esi,[esi+0x0]

c0012644 <taskStartupFunction>:
c0012644:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012649:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001264c:	c3                   	ret    
c001264d:	90                   	nop
c001264e:	66 90                	xchg   ax,ax

c0012650 <Semaphore::Semaphore(int)>:
c0012650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012654:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012658:	89 10                	mov    DWORD PTR [eax],edx
c001265a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001265e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0012665:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012669:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012674:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001267b:	90                   	nop
c001267c:	c3                   	ret    
c001267d:	90                   	nop
c001267e:	66 90                	xchg   ax,ax

c0012680 <Mutex::Mutex()>:
c0012680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012684:	6a 01                	push   0x1
c0012686:	50                   	push   eax
c0012687:	e8 c4 ff ff ff       	call   c0012650 <Semaphore::Semaphore(int)>
c001268c:	83 c4 08             	add    esp,0x8
c001268f:	90                   	nop
c0012690:	c3                   	ret    
c0012691:	90                   	nop
c0012692:	66 90                	xchg   ax,ax

c0012694 <Process::createThread(void (*)(void*), void*, int)>:
c0012694:	57                   	push   edi
c0012695:	31 c9                	xor    ecx,ecx
c0012697:	56                   	push   esi
c0012698:	53                   	push   ebx
c0012699:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001269d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00126a4:	89 f2                	mov    edx,esi
c00126a6:	66 90                	xchg   ax,ax
c00126a8:	31 c0                	xor    eax,eax
c00126aa:	66 89 d0             	mov    ax,dx
c00126ad:	83 e2 01             	and    edx,0x1
c00126b0:	74 12                	je     c00126c4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00126b2:	d1 f8                	sar    eax,1
c00126b4:	41                   	inc    ecx
c00126b5:	89 c2                	mov    edx,eax
c00126b7:	83 f9 10             	cmp    ecx,0x10
c00126ba:	75 ec                	jne    c00126a8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00126bc:	31 db                	xor    ebx,ebx
c00126be:	89 d8                	mov    eax,ebx
c00126c0:	5b                   	pop    ebx
c00126c1:	5e                   	pop    esi
c00126c2:	5f                   	pop    edi
c00126c3:	c3                   	ret    
c00126c4:	b8 01 00 00 00       	mov    eax,0x1
c00126c9:	d3 e0                	shl    eax,cl
c00126cb:	09 c6                	or     esi,eax
c00126cd:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00126d0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00126d7:	01 c0                	add    eax,eax
c00126d9:	01 c8                	add    eax,ecx
c00126db:	8d 04 80             	lea    eax,[eax+eax*4]
c00126de:	01 d8                	add    eax,ebx
c00126e0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00126e7:	75 0b                	jne    c00126f4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00126e9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00126f3:	90                   	nop
c00126f4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00126fa:	83 ec 08             	sub    esp,0x8
c00126fd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012700:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0012703:	01 c0                	add    eax,eax
c0012705:	01 c8                	add    eax,ecx
c0012707:	8d 3c 80             	lea    edi,[eax+eax*4]
c001270a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001270d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0012713:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0012719:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001271d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0012723:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0012729:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0012730:	89 ca                	mov    edx,ecx
c0012732:	f7 da                	neg    edx
c0012734:	c1 e2 15             	shl    edx,0x15
c0012737:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001273d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0012743:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012747:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0012751:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0012757:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001275b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0012761:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001276b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0012775:	53                   	push   ebx
c0012776:	68 04 29 02 c0       	push   0xc0022904
c001277b:	e8 8c 95 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012780:	83 c4 10             	add    esp,0x10
c0012783:	89 d8                	mov    eax,ebx
c0012785:	5b                   	pop    ebx
c0012786:	5e                   	pop    esi
c0012787:	5f                   	pop    edi
c0012788:	c3                   	ret    
c0012789:	90                   	nop
c001278a:	66 90                	xchg   ax,ax

c001278c <Process::createUserThread()>:
c001278c:	83 ec 0c             	sub    esp,0xc
c001278f:	68 80 00 00 00       	push   0x80
c0012794:	6a 00                	push   0x0
c0012796:	68 2c 21 01 c0       	push   0xc001212c
c001279b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001279f:	50                   	push   eax
c00127a0:	e8 ef fe ff ff       	call   c0012694 <Process::createThread(void (*)(void*), void*, int)>
c00127a5:	83 c4 1c             	add    esp,0x1c
c00127a8:	c3                   	ret    
c00127a9:	8d 76 00             	lea    esi,[esi+0x0]

c00127ac <setupMultitasking(void (*)())>:
c00127ac:	56                   	push   esi
c00127ad:	53                   	push   ebx
c00127ae:	53                   	push   ebx
c00127af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127b3:	eb 13                	jmp    c00127c8 <setupMultitasking(void (*)())+0x1c>
c00127b5:	8d 76 00             	lea    esi,[esi+0x0]
c00127b8:	83 ec 0c             	sub    esp,0xc
c00127bb:	68 04 29 02 c0       	push   0xc0022904
c00127c0:	e8 8f 94 00 00       	call   c001bc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00127c5:	83 c4 10             	add    esp,0x10
c00127c8:	83 ec 0c             	sub    esp,0xc
c00127cb:	68 04 29 02 c0       	push   0xc0022904
c00127d0:	e8 5b 94 00 00       	call   c001bc30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00127d5:	83 c4 10             	add    esp,0x10
c00127d8:	84 c0                	test   al,al
c00127da:	74 dc                	je     c00127b8 <setupMultitasking(void (*)())+0xc>
c00127dc:	83 ec 0c             	sub    esp,0xc
c00127df:	68 1f 07 00 00       	push   0x71f
c00127e4:	e8 78 43 ff ff       	call   c0006b61 <malloc>
c00127e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00127f0:	89 c3                	mov    ebx,eax
c00127f2:	6a 00                	push   0x0
c00127f4:	68 72 e0 01 c0       	push   0xc001e072
c00127f9:	6a 01                	push   0x1
c00127fb:	50                   	push   eax
c00127fc:	e8 87 fc ff ff       	call   c0012488 <Process::Process(bool, char const*, Process*, char**)>
c0012801:	83 c4 14             	add    esp,0x14
c0012804:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001280a:	89 1d 10 29 02 c0    	mov    DWORD PTR ds:0xc0022910,ebx
c0012810:	50                   	push   eax
c0012811:	e8 7b 50 ff ff       	call   c0007891 <setActiveTerminal(VgaText*)>
c0012816:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c001281e:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0012828:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001282e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012831:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001283b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0012841:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0012847:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0012851:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001285b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0012865:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001286b:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0012871:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001287b:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0012881:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001288b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0012891:	5a                   	pop    edx
c0012892:	59                   	pop    ecx
c0012893:	68 6e e0 01 c0       	push   0xc001e06e
c0012898:	50                   	push   eax
c0012899:	e8 82 dd fe ff       	call   c0000620 <strcpy>
c001289e:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00128a5:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00128a9:	83 c4 14             	add    esp,0x14
c00128ac:	5b                   	pop    ebx
c00128ad:	5e                   	pop    esi
c00128ae:	e9 d6 d9 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c00128b3:	90                   	nop

c00128b4 <schedule()>:
c00128b4:	8b 15 e4 28 02 c0    	mov    edx,DWORD PTR ds:0xc00228e4
c00128ba:	85 d2                	test   edx,edx
c00128bc:	74 0e                	je     c00128cc <schedule()+0x18>
c00128be:	c7 05 e0 28 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00228e0,0x1
c00128c8:	c3                   	ret    
c00128c9:	8d 76 00             	lea    esi,[esi+0x0]
c00128cc:	53                   	push   ebx
c00128cd:	83 ec 14             	sub    esp,0x14
c00128d0:	68 04 29 02 c0       	push   0xc0022904
c00128d5:	e8 56 93 00 00       	call   c001bc30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00128da:	83 c4 10             	add    esp,0x10
c00128dd:	84 c0                	test   al,al
c00128df:	75 3b                	jne    c001291c <schedule()+0x68>
c00128e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00128e6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00128e9:	4a                   	dec    edx
c00128ea:	74 38                	je     c0012924 <schedule()+0x70>
c00128ec:	83 ec 0c             	sub    esp,0xc
c00128ef:	68 04 29 02 c0       	push   0xc0022904
c00128f4:	e8 53 93 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00128f9:	c7 04 24 04 29 02 c0 	mov    DWORD PTR [esp],0xc0022904
c0012900:	89 c3                	mov    ebx,eax
c0012902:	e8 4d 93 00 00       	call   c001bc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012907:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001290e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012911:	e8 6e f8 ff ff       	call   c0012184 <switchToThread(ThreadControlBlock*)>
c0012916:	83 c4 10             	add    esp,0x10
c0012919:	8d 76 00             	lea    esi,[esi+0x0]
c001291c:	83 c4 08             	add    esp,0x8
c001291f:	5b                   	pop    ebx
c0012920:	c3                   	ret    
c0012921:	8d 76 00             	lea    esi,[esi+0x0]
c0012924:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001292b:	83 ec 08             	sub    esp,0x8
c001292e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012933:	50                   	push   eax
c0012934:	68 04 29 02 c0       	push   0xc0022904
c0012939:	e8 ce 93 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001293e:	83 c4 10             	add    esp,0x10
c0012941:	eb a9                	jmp    c00128ec <schedule()+0x38>
c0012943:	90                   	nop

c0012944 <Semaphore::tryAcquire()>:
c0012944:	53                   	push   ebx
c0012945:	83 ec 08             	sub    esp,0x8
c0012948:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001294c:	fa                   	cli    
c001294d:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0012952:	8d 50 01             	lea    edx,[eax+0x1]
c0012955:	89 15 e8 28 02 c0    	mov    DWORD PTR ds:0xc00228e8,edx
c001295b:	8b 15 e4 28 02 c0    	mov    edx,DWORD PTR ds:0xc00228e4
c0012961:	8d 5a 01             	lea    ebx,[edx+0x1]
c0012964:	89 1d e4 28 02 c0    	mov    DWORD PTR ds:0xc00228e4,ebx
c001296a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001296d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001296f:	7c 33                	jl     c00129a4 <Semaphore::tryAcquire()+0x60>
c0012971:	89 15 e4 28 02 c0    	mov    DWORD PTR ds:0xc00228e4,edx
c0012977:	85 d2                	test   edx,edx
c0012979:	75 0d                	jne    c0012988 <Semaphore::tryAcquire()+0x44>
c001297b:	8b 15 e0 28 02 c0    	mov    edx,DWORD PTR ds:0xc00228e0
c0012981:	85 d2                	test   edx,edx
c0012983:	75 6b                	jne    c00129f0 <Semaphore::tryAcquire()+0xac>
c0012985:	8d 76 00             	lea    esi,[esi+0x0]
c0012988:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c001298d:	85 c0                	test   eax,eax
c001298f:	74 0b                	je     c001299c <Semaphore::tryAcquire()+0x58>
c0012991:	8d 76 00             	lea    esi,[esi+0x0]
c0012994:	31 c0                	xor    eax,eax
c0012996:	83 c4 08             	add    esp,0x8
c0012999:	5b                   	pop    ebx
c001299a:	c3                   	ret    
c001299b:	90                   	nop
c001299c:	fb                   	sti    
c001299d:	83 c4 08             	add    esp,0x8
c00129a0:	5b                   	pop    ebx
c00129a1:	c3                   	ret    
c00129a2:	66 90                	xchg   ax,ax
c00129a4:	43                   	inc    ebx
c00129a5:	89 15 e4 28 02 c0    	mov    DWORD PTR ds:0xc00228e4,edx
c00129ab:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00129ae:	85 d2                	test   edx,edx
c00129b0:	75 22                	jne    c00129d4 <Semaphore::tryAcquire()+0x90>
c00129b2:	8b 0d e0 28 02 c0    	mov    ecx,DWORD PTR ds:0xc00228e0
c00129b8:	85 c9                	test   ecx,ecx
c00129ba:	74 18                	je     c00129d4 <Semaphore::tryAcquire()+0x90>
c00129bc:	c7 05 e0 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228e0,0x0
c00129c6:	e8 e9 fe ff ff       	call   c00128b4 <schedule()>
c00129cb:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c00129d0:	48                   	dec    eax
c00129d1:	8d 76 00             	lea    esi,[esi+0x0]
c00129d4:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c00129d9:	85 c0                	test   eax,eax
c00129db:	75 0b                	jne    c00129e8 <Semaphore::tryAcquire()+0xa4>
c00129dd:	fb                   	sti    
c00129de:	b0 01                	mov    al,0x1
c00129e0:	83 c4 08             	add    esp,0x8
c00129e3:	5b                   	pop    ebx
c00129e4:	c3                   	ret    
c00129e5:	8d 76 00             	lea    esi,[esi+0x0]
c00129e8:	b0 01                	mov    al,0x1
c00129ea:	83 c4 08             	add    esp,0x8
c00129ed:	5b                   	pop    ebx
c00129ee:	c3                   	ret    
c00129ef:	90                   	nop
c00129f0:	c7 05 e0 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228e0,0x0
c00129fa:	e8 b5 fe ff ff       	call   c00128b4 <schedule()>
c00129ff:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0012a04:	48                   	dec    eax
c0012a05:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0012a0a:	85 c0                	test   eax,eax
c0012a0c:	75 86                	jne    c0012994 <Semaphore::tryAcquire()+0x50>
c0012a0e:	eb 8c                	jmp    c001299c <Semaphore::tryAcquire()+0x58>

c0012a10 <Semaphore::assertLocked(char const*)>:
c0012a10:	83 ec 0c             	sub    esp,0xc
c0012a13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a17:	fa                   	cli    
c0012a18:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0012a1e:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c0012a23:	8d 48 01             	lea    ecx,[eax+0x1]
c0012a26:	89 0d e4 28 02 c0    	mov    DWORD PTR ds:0xc00228e4,ecx
c0012a2c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012a2e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0012a31:	7c 29                	jl     c0012a5c <Semaphore::assertLocked(char const*)+0x4c>
c0012a33:	90                   	nop
c0012a34:	a3 e4 28 02 c0       	mov    ds:0xc00228e4,eax
c0012a39:	85 c0                	test   eax,eax
c0012a3b:	75 0b                	jne    c0012a48 <Semaphore::assertLocked(char const*)+0x38>
c0012a3d:	a1 e0 28 02 c0       	mov    eax,ds:0xc00228e0
c0012a42:	85 c0                	test   eax,eax
c0012a44:	75 2e                	jne    c0012a74 <Semaphore::assertLocked(char const*)+0x64>
c0012a46:	66 90                	xchg   ax,ax
c0012a48:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0012a4d:	48                   	dec    eax
c0012a4e:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0012a53:	75 03                	jne    c0012a58 <Semaphore::assertLocked(char const*)+0x48>
c0012a55:	fb                   	sti    
c0012a56:	66 90                	xchg   ax,ax
c0012a58:	83 c4 0c             	add    esp,0xc
c0012a5b:	c3                   	ret    
c0012a5c:	83 ec 0c             	sub    esp,0xc
c0012a5f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012a63:	52                   	push   edx
c0012a64:	e8 d6 c9 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0012a69:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c0012a6e:	83 c4 10             	add    esp,0x10
c0012a71:	48                   	dec    eax
c0012a72:	eb c0                	jmp    c0012a34 <Semaphore::assertLocked(char const*)+0x24>
c0012a74:	c7 05 e0 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228e0,0x0
c0012a7e:	e8 31 fe ff ff       	call   c00128b4 <schedule()>
c0012a83:	eb c3                	jmp    c0012a48 <Semaphore::assertLocked(char const*)+0x38>
c0012a85:	8d 76 00             	lea    esi,[esi+0x0]

c0012a88 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0012a88:	83 ec 0c             	sub    esp,0xc
c0012a8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a94:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012a97:	e8 18 fe ff ff       	call   c00128b4 <schedule()>
c0012a9c:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0012aa1:	48                   	dec    eax
c0012aa2:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0012aa7:	75 03                	jne    c0012aac <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0012aa9:	fb                   	sti    
c0012aaa:	66 90                	xchg   ax,ax
c0012aac:	83 c4 0c             	add    esp,0xc
c0012aaf:	c3                   	ret    

c0012ab0 <blockTask(TaskState)>:
c0012ab0:	83 ec 0c             	sub    esp,0xc
c0012ab3:	fa                   	cli    
c0012ab4:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0012aba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012abe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ac3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012ac6:	e8 e9 fd ff ff       	call   c00128b4 <schedule()>
c0012acb:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0012ad0:	48                   	dec    eax
c0012ad1:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0012ad6:	75 04                	jne    c0012adc <blockTask(TaskState)+0x2c>
c0012ad8:	fb                   	sti    
c0012ad9:	8d 76 00             	lea    esi,[esi+0x0]
c0012adc:	83 c4 0c             	add    esp,0xc
c0012adf:	c3                   	ret    

c0012ae0 <waitTask(int, int*, int)>:
c0012ae0:	83 ec 18             	sub    esp,0x18
c0012ae3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ae8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012aec:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0012aef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012af3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012af8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0012afb:	6a 07                	push   0x7
c0012afd:	e8 ae ff ff ff       	call   c0012ab0 <blockTask(TaskState)>
c0012b02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b07:	83 c4 10             	add    esp,0x10
c0012b0a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0012b0d:	85 d2                	test   edx,edx
c0012b0f:	74 0b                	je     c0012b1c <waitTask(int, int*, int)+0x3c>
c0012b11:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0012b14:	89 02                	mov    DWORD PTR [edx],eax
c0012b16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b1b:	90                   	nop
c0012b1c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0012b1f:	83 c4 0c             	add    esp,0xc
c0012b22:	c3                   	ret    
c0012b23:	90                   	nop

c0012b24 <milliTenthSleepUntil(unsigned int)>:
c0012b24:	83 ec 0c             	sub    esp,0xc
c0012b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b2b:	39 05 ec 19 02 c0    	cmp    DWORD PTR ds:0xc00219ec,eax
c0012b31:	76 05                	jbe    c0012b38 <milliTenthSleepUntil(unsigned int)+0x14>
c0012b33:	90                   	nop
c0012b34:	83 c4 0c             	add    esp,0xc
c0012b37:	c3                   	ret    
c0012b38:	fa                   	cli    
c0012b39:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0012b3f:	83 ec 08             	sub    esp,0x8
c0012b42:	ff 05 e4 28 02 c0    	inc    DWORD PTR ds:0xc00228e4
c0012b48:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012b4e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0012b51:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012b57:	52                   	push   edx
c0012b58:	68 f8 28 02 c0       	push   0xc00228f8
c0012b5d:	e8 aa 91 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012b62:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012b69:	e8 42 ff ff ff       	call   c0012ab0 <blockTask(TaskState)>
c0012b6e:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c0012b73:	83 c4 10             	add    esp,0x10
c0012b76:	48                   	dec    eax
c0012b77:	a3 e4 28 02 c0       	mov    ds:0xc00228e4,eax
c0012b7c:	85 c0                	test   eax,eax
c0012b7e:	75 0c                	jne    c0012b8c <milliTenthSleepUntil(unsigned int)+0x68>
c0012b80:	a1 e0 28 02 c0       	mov    eax,ds:0xc00228e0
c0012b85:	85 c0                	test   eax,eax
c0012b87:	75 17                	jne    c0012ba0 <milliTenthSleepUntil(unsigned int)+0x7c>
c0012b89:	8d 76 00             	lea    esi,[esi+0x0]
c0012b8c:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0012b91:	48                   	dec    eax
c0012b92:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0012b97:	75 9b                	jne    c0012b34 <milliTenthSleepUntil(unsigned int)+0x10>
c0012b99:	fb                   	sti    
c0012b9a:	83 c4 0c             	add    esp,0xc
c0012b9d:	c3                   	ret    
c0012b9e:	66 90                	xchg   ax,ax
c0012ba0:	c7 05 e0 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228e0,0x0
c0012baa:	e8 05 fd ff ff       	call   c00128b4 <schedule()>
c0012baf:	eb db                	jmp    c0012b8c <milliTenthSleepUntil(unsigned int)+0x68>
c0012bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0012bb4 <milliTenthSleep(unsigned int)>:
c0012bb4:	a1 ec 19 02 c0       	mov    eax,ds:0xc00219ec
c0012bb9:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0012bbd:	e9 62 ff ff ff       	jmp    c0012b24 <milliTenthSleepUntil(unsigned int)>
c0012bc2:	66 90                	xchg   ax,ax

c0012bc4 <sleep(unsigned int)>:
c0012bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc8:	8d 04 80             	lea    eax,[eax+eax*4]
c0012bcb:	8d 04 80             	lea    eax,[eax+eax*4]
c0012bce:	8d 04 80             	lea    eax,[eax+eax*4]
c0012bd1:	8d 04 80             	lea    eax,[eax+eax*4]
c0012bd4:	c1 e0 04             	shl    eax,0x4
c0012bd7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bdb:	eb d7                	jmp    c0012bb4 <milliTenthSleep(unsigned int)>
c0012bdd:	90                   	nop
c0012bde:	66 90                	xchg   ax,ax

c0012be0 <Semaphore::acquire()>:
c0012be0:	83 ec 0c             	sub    esp,0xc
c0012be3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012be7:	fa                   	cli    
c0012be8:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c0012bed:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0012bf3:	8d 48 01             	lea    ecx,[eax+0x1]
c0012bf6:	89 0d e4 28 02 c0    	mov    DWORD PTR ds:0xc00228e4,ecx
c0012bfc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0012bff:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0012c01:	7d 2d                	jge    c0012c30 <Semaphore::acquire()+0x50>
c0012c03:	41                   	inc    ecx
c0012c04:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0012c07:	90                   	nop
c0012c08:	a3 e4 28 02 c0       	mov    ds:0xc00228e4,eax
c0012c0d:	85 c0                	test   eax,eax
c0012c0f:	75 0b                	jne    c0012c1c <Semaphore::acquire()+0x3c>
c0012c11:	a1 e0 28 02 c0       	mov    eax,ds:0xc00228e0
c0012c16:	85 c0                	test   eax,eax
c0012c18:	75 62                	jne    c0012c7c <Semaphore::acquire()+0x9c>
c0012c1a:	66 90                	xchg   ax,ax
c0012c1c:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0012c21:	48                   	dec    eax
c0012c22:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0012c27:	75 03                	jne    c0012c2c <Semaphore::acquire()+0x4c>
c0012c29:	fb                   	sti    
c0012c2a:	66 90                	xchg   ax,ax
c0012c2c:	83 c4 0c             	add    esp,0xc
c0012c2f:	c3                   	ret    
c0012c30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c35:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012c3c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0012c3f:	85 c9                	test   ecx,ecx
c0012c41:	74 4d                	je     c0012c90 <Semaphore::acquire()+0xb0>
c0012c43:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0012c46:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012c4c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0012c4f:	90                   	nop
c0012c50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c55:	83 ec 0c             	sub    esp,0xc
c0012c58:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0012c5b:	68 f0 e0 01 c0       	push   0xc001e0f0
c0012c60:	e8 8b 6c ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0012c65:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0012c6c:	e8 3f fe ff ff       	call   c0012ab0 <blockTask(TaskState)>
c0012c71:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c0012c76:	83 c4 10             	add    esp,0x10
c0012c79:	48                   	dec    eax
c0012c7a:	eb 8c                	jmp    c0012c08 <Semaphore::acquire()+0x28>
c0012c7c:	c7 05 e0 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228e0,0x0
c0012c86:	e8 29 fc ff ff       	call   c00128b4 <schedule()>
c0012c8b:	eb 8f                	jmp    c0012c1c <Semaphore::acquire()+0x3c>
c0012c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c95:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012c98:	eb b6                	jmp    c0012c50 <Semaphore::acquire()+0x70>
c0012c9a:	66 90                	xchg   ax,ax

c0012c9c <taskReturned>:
c0012c9c:	83 ec 18             	sub    esp,0x18
c0012c9f:	68 10 e1 01 c0       	push   0xc001e110
c0012ca4:	e8 96 c7 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0012ca9:	83 c4 10             	add    esp,0x10
c0012cac:	83 ec 0c             	sub    esp,0xc
c0012caf:	6a 02                	push   0x2
c0012cb1:	e8 fa fd ff ff       	call   c0012ab0 <blockTask(TaskState)>
c0012cb6:	fa                   	cli    
c0012cb7:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0012cbd:	e8 f2 fb ff ff       	call   c00128b4 <schedule()>
c0012cc2:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0012cc7:	83 c4 10             	add    esp,0x10
c0012cca:	48                   	dec    eax
c0012ccb:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0012cd0:	85 c0                	test   eax,eax
c0012cd2:	75 d8                	jne    c0012cac <taskReturned+0x10>
c0012cd4:	fb                   	sti    
c0012cd5:	eb d5                	jmp    c0012cac <taskReturned+0x10>
c0012cd7:	90                   	nop

c0012cd8 <Thr::processFromPID(int)>:
c0012cd8:	57                   	push   edi
c0012cd9:	56                   	push   esi
c0012cda:	53                   	push   ebx
c0012cdb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012cdf:	fa                   	cli    
c0012ce0:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0012ce6:	83 ec 0c             	sub    esp,0xc
c0012ce9:	68 04 29 02 c0       	push   0xc0022904
c0012cee:	e8 59 8f 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012cf3:	83 c4 10             	add    esp,0x10
c0012cf6:	89 c7                	mov    edi,eax
c0012cf8:	eb 16                	jmp    c0012d10 <Thr::processFromPID(int)+0x38>
c0012cfa:	66 90                	xchg   ax,ax
c0012cfc:	83 ec 0c             	sub    esp,0xc
c0012cff:	68 04 29 02 c0       	push   0xc0022904
c0012d04:	e8 43 8f 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d09:	83 c4 10             	add    esp,0x10
c0012d0c:	39 f8                	cmp    eax,edi
c0012d0e:	74 4c                	je     c0012d5c <Thr::processFromPID(int)+0x84>
c0012d10:	83 ec 0c             	sub    esp,0xc
c0012d13:	68 04 29 02 c0       	push   0xc0022904
c0012d18:	e8 2f 8f 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d1d:	c7 04 24 04 29 02 c0 	mov    DWORD PTR [esp],0xc0022904
c0012d24:	89 c3                	mov    ebx,eax
c0012d26:	e8 29 8f 00 00       	call   c001bc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012d2b:	58                   	pop    eax
c0012d2c:	5a                   	pop    edx
c0012d2d:	53                   	push   ebx
c0012d2e:	68 04 29 02 c0       	push   0xc0022904
c0012d33:	e8 d4 8f 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012d38:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012d3b:	83 c4 10             	add    esp,0x10
c0012d3e:	39 30                	cmp    DWORD PTR [eax],esi
c0012d40:	75 ba                	jne    c0012cfc <Thr::processFromPID(int)+0x24>
c0012d42:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0012d47:	48                   	dec    eax
c0012d48:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0012d4d:	74 09                	je     c0012d58 <Thr::processFromPID(int)+0x80>
c0012d4f:	90                   	nop
c0012d50:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012d53:	5b                   	pop    ebx
c0012d54:	5e                   	pop    esi
c0012d55:	5f                   	pop    edi
c0012d56:	c3                   	ret    
c0012d57:	90                   	nop
c0012d58:	fb                   	sti    
c0012d59:	eb f5                	jmp    c0012d50 <Thr::processFromPID(int)+0x78>
c0012d5b:	90                   	nop
c0012d5c:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0012d61:	48                   	dec    eax
c0012d62:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0012d67:	75 07                	jne    c0012d70 <Thr::processFromPID(int)+0x98>
c0012d69:	fb                   	sti    
c0012d6a:	5b                   	pop    ebx
c0012d6b:	5e                   	pop    esi
c0012d6c:	5f                   	pop    edi
c0012d6d:	c3                   	ret    
c0012d6e:	66 90                	xchg   ax,ax
c0012d70:	5b                   	pop    ebx
c0012d71:	31 c0                	xor    eax,eax
c0012d73:	5e                   	pop    esi
c0012d74:	5f                   	pop    edi
c0012d75:	c3                   	ret    
c0012d76:	66 90                	xchg   ax,ax

c0012d78 <unblockTask(ThreadControlBlock*)>:
c0012d78:	53                   	push   ebx
c0012d79:	83 ec 08             	sub    esp,0x8
c0012d7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d80:	fa                   	cli    
c0012d81:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0012d87:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012d8a:	85 c0                	test   eax,eax
c0012d8c:	74 66                	je     c0012df4 <unblockTask(ThreadControlBlock*)+0x7c>
c0012d8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012d91:	48                   	dec    eax
c0012d92:	74 38                	je     c0012dcc <unblockTask(ThreadControlBlock*)+0x54>
c0012d94:	83 ec 0c             	sub    esp,0xc
c0012d97:	68 04 29 02 c0       	push   0xc0022904
c0012d9c:	e8 ab 8e 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012da1:	83 c4 10             	add    esp,0x10
c0012da4:	85 c0                	test   eax,eax
c0012da6:	75 1c                	jne    c0012dc4 <unblockTask(ThreadControlBlock*)+0x4c>
c0012da8:	eb 5e                	jmp    c0012e08 <unblockTask(ThreadControlBlock*)+0x90>
c0012daa:	66 90                	xchg   ax,ax
c0012dac:	83 ec 08             	sub    esp,0x8
c0012daf:	50                   	push   eax
c0012db0:	68 04 29 02 c0       	push   0xc0022904
c0012db5:	e8 42 92 00 00       	call   c001bffc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012dba:	83 c4 10             	add    esp,0x10
c0012dbd:	85 c0                	test   eax,eax
c0012dbf:	74 47                	je     c0012e08 <unblockTask(ThreadControlBlock*)+0x90>
c0012dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0012dc4:	39 c3                	cmp    ebx,eax
c0012dc6:	75 e4                	jne    c0012dac <unblockTask(ThreadControlBlock*)+0x34>
c0012dc8:	eb 12                	jmp    c0012ddc <unblockTask(ThreadControlBlock*)+0x64>
c0012dca:	66 90                	xchg   ax,ax
c0012dcc:	83 ec 0c             	sub    esp,0xc
c0012dcf:	68 90 e0 01 c0       	push   0xc001e090
c0012dd4:	e8 17 6b ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0012dd9:	83 c4 10             	add    esp,0x10
c0012ddc:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0012de1:	48                   	dec    eax
c0012de2:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0012de7:	75 03                	jne    c0012dec <unblockTask(ThreadControlBlock*)+0x74>
c0012de9:	fb                   	sti    
c0012dea:	66 90                	xchg   ax,ax
c0012dec:	83 c4 08             	add    esp,0x8
c0012def:	5b                   	pop    ebx
c0012df0:	c3                   	ret    
c0012df1:	8d 76 00             	lea    esi,[esi+0x0]
c0012df4:	83 ec 0c             	sub    esp,0xc
c0012df7:	68 79 e0 01 c0       	push   0xc001e079
c0012dfc:	e8 ef 6a ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0012e01:	83 c4 10             	add    esp,0x10
c0012e04:	eb d6                	jmp    c0012ddc <unblockTask(ThreadControlBlock*)+0x64>
c0012e06:	66 90                	xchg   ax,ax
c0012e08:	83 ec 08             	sub    esp,0x8
c0012e0b:	53                   	push   ebx
c0012e0c:	68 04 29 02 c0       	push   0xc0022904
c0012e11:	e8 f6 8e 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012e16:	83 c4 10             	add    esp,0x10
c0012e19:	eb c1                	jmp    c0012ddc <unblockTask(ThreadControlBlock*)+0x64>
c0012e1b:	90                   	nop

c0012e1c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0012e1c:	55                   	push   ebp
c0012e1d:	57                   	push   edi
c0012e1e:	56                   	push   esi
c0012e1f:	53                   	push   ebx
c0012e20:	83 ec 1c             	sub    esp,0x1c
c0012e23:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0012e27:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012e2a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0012e30:	85 ed                	test   ebp,ebp
c0012e32:	7e 24                	jle    c0012e58 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0012e34:	31 f6                	xor    esi,esi
c0012e36:	66 90                	xchg   ax,ax
c0012e38:	83 ec 0c             	sub    esp,0xc
c0012e3b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0012e42:	46                   	inc    esi
c0012e43:	57                   	push   edi
c0012e44:	e8 28 3d ff ff       	call   c0006b71 <free>
c0012e49:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012e4c:	83 c4 10             	add    esp,0x10
c0012e4f:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0012e55:	7f e1                	jg     c0012e38 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0012e57:	90                   	nop
c0012e58:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012e62:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012e67:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0012e6a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0012e6d:	d3 c0                	rol    eax,cl
c0012e6f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0012e76:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012e79:	89 f7                	mov    edi,esi
c0012e7b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0012e83:	0f 85 77 01 00 00    	jne    c0013000 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0012e89:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0012e8f:	85 ed                	test   ebp,ebp
c0012e91:	74 1d                	je     c0012eb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0012e93:	83 ec 0c             	sub    esp,0xc
c0012e96:	55                   	push   ebp
c0012e97:	e8 48 c3 ff ff       	call   c000f1e4 <EnvVarContainer::~EnvVarContainer()>
c0012e9c:	59                   	pop    ecx
c0012e9d:	5e                   	pop    esi
c0012e9e:	6a 0c                	push   0xc
c0012ea0:	55                   	push   ebp
c0012ea1:	e8 54 69 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c0012ea6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012ea9:	83 c4 10             	add    esp,0x10
c0012eac:	89 f7                	mov    edi,esi
c0012eae:	66 90                	xchg   ax,ax
c0012eb0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012eb6:	85 c0                	test   eax,eax
c0012eb8:	0f 84 b6 00 00 00    	je     c0012f74 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0012ebe:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0012ec1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012ec5:	31 c9                	xor    ecx,ecx
c0012ec7:	eb 17                	jmp    c0012ee0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0012ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0012ecc:	41                   	inc    ecx
c0012ecd:	83 f9 10             	cmp    ecx,0x10
c0012ed0:	0f 84 9e 00 00 00    	je     c0012f74 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0012ed6:	66 90                	xchg   ax,ax
c0012ed8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012ede:	66 90                	xchg   ax,ax
c0012ee0:	31 d2                	xor    edx,edx
c0012ee2:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0012ee9:	d3 fa                	sar    edx,cl
c0012eeb:	83 e2 01             	and    edx,0x1
c0012eee:	74 dc                	je     c0012ecc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012ef0:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0012ef3:	01 d2                	add    edx,edx
c0012ef5:	01 ca                	add    edx,ecx
c0012ef7:	8d 14 92             	lea    edx,[edx+edx*4]
c0012efa:	01 d0                	add    eax,edx
c0012efc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0012f02:	83 fd 07             	cmp    ebp,0x7
c0012f05:	75 c5                	jne    c0012ecc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012f07:	05 40 02 00 00       	add    eax,0x240
c0012f0c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0012f0f:	83 fd ff             	cmp    ebp,0xffffffff
c0012f12:	0f 8c f0 00 00 00    	jl     c0013008 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0012f18:	0f 84 ae 01 00 00    	je     c00130cc <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0012f1e:	85 ed                	test   ebp,ebp
c0012f20:	0f 84 92 01 00 00    	je     c00130b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0012f26:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0012f28:	75 a2                	jne    c0012ecc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012f2a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012f30:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0012f34:	01 d0                	add    eax,edx
c0012f36:	66 90                	xchg   ax,ax
c0012f38:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0012f3c:	83 ec 0c             	sub    esp,0xc
c0012f3f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0012f45:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012f48:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012f4e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0012f55:	50                   	push   eax
c0012f56:	e8 1d fe ff ff       	call   c0012d78 <unblockTask(ThreadControlBlock*)>
c0012f5b:	83 c4 10             	add    esp,0x10
c0012f5e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012f61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012f65:	89 f7                	mov    edi,esi
c0012f67:	41                   	inc    ecx
c0012f68:	83 f9 10             	cmp    ecx,0x10
c0012f6b:	0f 85 67 ff ff ff    	jne    c0012ed8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0012f71:	8d 76 00             	lea    esi,[esi+0x0]
c0012f74:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0012f7a:	85 c0                	test   eax,eax
c0012f7c:	74 62                	je     c0012fe0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0012f7e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0012f84:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0012f8a:	74 54                	je     c0012fe0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0012f8c:	83 ec 0c             	sub    esp,0xc
c0012f8f:	68 04 29 02 c0       	push   0xc0022904
c0012f94:	e8 b3 8c 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012f99:	c7 04 24 04 29 02 c0 	mov    DWORD PTR [esp],0xc0022904
c0012fa0:	89 c7                	mov    edi,eax
c0012fa2:	e8 89 8c 00 00       	call   c001bc30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012fa7:	83 c4 10             	add    esp,0x10
c0012faa:	84 c0                	test   al,al
c0012fac:	0f 84 ce 00 00 00    	je     c0013080 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0012fb2:	66 90                	xchg   ax,ax
c0012fb4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012fb7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012fbd:	85 d2                	test   edx,edx
c0012fbf:	74 0f                	je     c0012fd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0012fc1:	83 ec 0c             	sub    esp,0xc
c0012fc4:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fc6:	52                   	push   edx
c0012fc7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fca:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012fcd:	83 c4 10             	add    esp,0x10
c0012fd0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0012fda:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0012fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0012fe0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0012fe6:	85 db                	test   ebx,ebx
c0012fe8:	74 16                	je     c0013000 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0012fea:	83 ec 0c             	sub    esp,0xc
c0012fed:	53                   	push   ebx
c0012fee:	e8 db 5b ff ff       	call   c0008bce <VAS::~VAS()>
c0012ff3:	58                   	pop    eax
c0012ff4:	5a                   	pop    edx
c0012ff5:	6a 14                	push   0x14
c0012ff7:	53                   	push   ebx
c0012ff8:	e8 fd 67 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c0012ffd:	83 c4 10             	add    esp,0x10
c0013000:	83 c4 1c             	add    esp,0x1c
c0013003:	5b                   	pop    ebx
c0013004:	5e                   	pop    esi
c0013005:	5f                   	pop    edi
c0013006:	5d                   	pop    ebp
c0013007:	c3                   	ret    
c0013008:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001300c:	83 ec 0c             	sub    esp,0xc
c001300f:	68 44 e1 01 c0       	push   0xc001e144
c0013014:	e8 26 c4 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0013019:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001301c:	83 c4 10             	add    esp,0x10
c001301f:	89 f7                	mov    edi,esi
c0013021:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013025:	e9 a2 fe ff ff       	jmp    c0012ecc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001302a:	66 90                	xchg   ax,ax
c001302c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013032:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013038:	75 1e                	jne    c0013058 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001303a:	83 ec 0c             	sub    esp,0xc
c001303d:	68 ac e1 01 c0       	push   0xc001e1ac
c0013042:	e8 a9 68 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013047:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001304e:	e8 5d fa ff ff       	call   c0012ab0 <blockTask(TaskState)>
c0013053:	83 c4 10             	add    esp,0x10
c0013056:	66 90                	xchg   ax,ax
c0013058:	83 ec 08             	sub    esp,0x8
c001305b:	56                   	push   esi
c001305c:	68 04 29 02 c0       	push   0xc0022904
c0013061:	e8 a6 8c 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013066:	c7 04 24 04 29 02 c0 	mov    DWORD PTR [esp],0xc0022904
c001306d:	e8 da 8b 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013072:	83 c4 10             	add    esp,0x10
c0013075:	39 f8                	cmp    eax,edi
c0013077:	0f 84 37 ff ff ff    	je     c0012fb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c001307d:	8d 76 00             	lea    esi,[esi+0x0]
c0013080:	83 ec 0c             	sub    esp,0xc
c0013083:	68 04 29 02 c0       	push   0xc0022904
c0013088:	e8 bf 8b 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001308d:	c7 04 24 04 29 02 c0 	mov    DWORD PTR [esp],0xc0022904
c0013094:	89 c6                	mov    esi,eax
c0013096:	e8 b9 8b 00 00       	call   c001bc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001309b:	83 c4 10             	add    esp,0x10
c001309e:	39 f3                	cmp    ebx,esi
c00130a0:	74 b6                	je     c0013058 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00130a2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00130a5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00130a8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00130ae:	75 a8                	jne    c0013058 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00130b0:	e9 77 ff ff ff       	jmp    c001302c <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c00130b5:	8d 76 00             	lea    esi,[esi+0x0]
c00130b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00130bc:	83 ec 0c             	sub    esp,0xc
c00130bf:	68 78 e1 01 c0       	push   0xc001e178
c00130c4:	e9 4b ff ff ff       	jmp    c0013014 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c00130c9:	8d 76 00             	lea    esi,[esi+0x0]
c00130cc:	8b 36                	mov    esi,DWORD PTR [esi]
c00130ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00130d2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00130d5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00130d8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00130de:	01 d7                	add    edi,edx
c00130e0:	89 f8                	mov    eax,edi
c00130e2:	e9 51 fe ff ff       	jmp    c0012f38 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c00130e7:	90                   	nop

c00130e8 <cleanerTaskFunction(void*)>:
c00130e8:	53                   	push   ebx
c00130e9:	83 ec 08             	sub    esp,0x8
c00130ec:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c00130f1:	48                   	dec    eax
c00130f2:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c00130f7:	75 03                	jne    c00130fc <cleanerTaskFunction(void*)+0x14>
c00130f9:	fb                   	sti    
c00130fa:	66 90                	xchg   ax,ax
c00130fc:	fa                   	cli    
c00130fd:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0013102:	80 3d cc 28 02 c0 00 	cmp    BYTE PTR ds:0xc00228cc,0x0
c0013109:	8d 50 01             	lea    edx,[eax+0x1]
c001310c:	89 15 e8 28 02 c0    	mov    DWORD PTR ds:0xc00228e8,edx
c0013112:	0f 84 ac 00 00 00    	je     c00131c4 <cleanerTaskFunction(void*)+0xdc>
c0013118:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c001311d:	85 c0                	test   eax,eax
c001311f:	75 03                	jne    c0013124 <cleanerTaskFunction(void*)+0x3c>
c0013121:	fb                   	sti    
c0013122:	66 90                	xchg   ax,ax
c0013124:	c6 05 cc 28 02 c0 00 	mov    BYTE PTR ds:0xc00228cc,0x0
c001312b:	fa                   	cli    
c001312c:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0013132:	ff 05 e4 28 02 c0    	inc    DWORD PTR ds:0xc00228e4
c0013138:	fa                   	cli    
c0013139:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c001313f:	eb 2b                	jmp    c001316c <cleanerTaskFunction(void*)+0x84>
c0013141:	8d 76 00             	lea    esi,[esi+0x0]
c0013144:	83 ec 0c             	sub    esp,0xc
c0013147:	68 ec 28 02 c0       	push   0xc00228ec
c001314c:	e8 fb 8a 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013151:	c7 04 24 ec 28 02 c0 	mov    DWORD PTR [esp],0xc00228ec
c0013158:	89 c3                	mov    ebx,eax
c001315a:	e8 f5 8a 00 00       	call   c001bc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001315f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013162:	e8 b5 fc ff ff       	call   c0012e1c <cleanupTerminatedTask(ThreadControlBlock*)>
c0013167:	83 c4 10             	add    esp,0x10
c001316a:	66 90                	xchg   ax,ax
c001316c:	83 ec 0c             	sub    esp,0xc
c001316f:	68 ec 28 02 c0       	push   0xc00228ec
c0013174:	e8 b7 8a 00 00       	call   c001bc30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013179:	83 c4 10             	add    esp,0x10
c001317c:	84 c0                	test   al,al
c001317e:	74 c4                	je     c0013144 <cleanerTaskFunction(void*)+0x5c>
c0013180:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0013185:	48                   	dec    eax
c0013186:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c001318b:	75 03                	jne    c0013190 <cleanerTaskFunction(void*)+0xa8>
c001318d:	fb                   	sti    
c001318e:	66 90                	xchg   ax,ax
c0013190:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c0013195:	48                   	dec    eax
c0013196:	a3 e4 28 02 c0       	mov    ds:0xc00228e4,eax
c001319b:	0f 85 4b ff ff ff    	jne    c00130ec <cleanerTaskFunction(void*)+0x4>
c00131a1:	a1 e0 28 02 c0       	mov    eax,ds:0xc00228e0
c00131a6:	85 c0                	test   eax,eax
c00131a8:	0f 84 3e ff ff ff    	je     c00130ec <cleanerTaskFunction(void*)+0x4>
c00131ae:	c7 05 e0 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228e0,0x0
c00131b8:	e8 f7 f6 ff ff       	call   c00128b4 <schedule()>
c00131bd:	e9 2a ff ff ff       	jmp    c00130ec <cleanerTaskFunction(void*)+0x4>
c00131c2:	66 90                	xchg   ax,ax
c00131c4:	83 ec 0c             	sub    esp,0xc
c00131c7:	6a 02                	push   0x2
c00131c9:	e8 ba f8 ff ff       	call   c0012a88 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00131ce:	83 c4 10             	add    esp,0x10
c00131d1:	e9 4e ff ff ff       	jmp    c0013124 <cleanerTaskFunction(void*)+0x3c>
c00131d6:	66 90                	xchg   ax,ax

c00131d8 <terminateTask(int)>:
c00131d8:	83 ec 14             	sub    esp,0x14
c00131db:	fa                   	cli    
c00131dc:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c00131e2:	ff 05 e4 28 02 c0    	inc    DWORD PTR ds:0xc00228e4
c00131e8:	fa                   	cli    
c00131e9:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c00131ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00131f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131f8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00131fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013200:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013203:	50                   	push   eax
c0013204:	68 ec 28 02 c0       	push   0xc00228ec
c0013209:	e8 fe 8a 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001320e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013213:	83 c4 10             	add    esp,0x10
c0013216:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001321d:	a1 c8 28 02 c0       	mov    eax,ds:0xc00228c8
c0013222:	85 c0                	test   eax,eax
c0013224:	74 5e                	je     c0013284 <terminateTask(int)+0xac>
c0013226:	83 ec 0c             	sub    esp,0xc
c0013229:	c6 05 cc 28 02 c0 01 	mov    BYTE PTR ds:0xc00228cc,0x1
c0013230:	50                   	push   eax
c0013231:	e8 42 fb ff ff       	call   c0012d78 <unblockTask(ThreadControlBlock*)>
c0013236:	83 c4 10             	add    esp,0x10
c0013239:	8d 76 00             	lea    esi,[esi+0x0]
c001323c:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0013241:	48                   	dec    eax
c0013242:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0013247:	75 03                	jne    c001324c <terminateTask(int)+0x74>
c0013249:	fb                   	sti    
c001324a:	66 90                	xchg   ax,ax
c001324c:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c0013251:	48                   	dec    eax
c0013252:	a3 e4 28 02 c0       	mov    ds:0xc00228e4,eax
c0013257:	75 0b                	jne    c0013264 <terminateTask(int)+0x8c>
c0013259:	83 3d e0 28 02 c0 00 	cmp    DWORD PTR ds:0xc00228e0,0x0
c0013260:	75 36                	jne    c0013298 <terminateTask(int)+0xc0>
c0013262:	66 90                	xchg   ax,ax
c0013264:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0013269:	48                   	dec    eax
c001326a:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c001326f:	75 03                	jne    c0013274 <terminateTask(int)+0x9c>
c0013271:	fb                   	sti    
c0013272:	66 90                	xchg   ax,ax
c0013274:	fa                   	cli    
c0013275:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c001327b:	90                   	nop
c001327c:	e8 33 f6 ff ff       	call   c00128b4 <schedule()>
c0013281:	eb e1                	jmp    c0013264 <terminateTask(int)+0x8c>
c0013283:	90                   	nop
c0013284:	83 ec 0c             	sub    esp,0xc
c0013287:	68 a7 e0 01 c0       	push   0xc001e0a7
c001328c:	e8 5f 66 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013291:	83 c4 10             	add    esp,0x10
c0013294:	eb a6                	jmp    c001323c <terminateTask(int)+0x64>
c0013296:	66 90                	xchg   ax,ax
c0013298:	c7 05 e0 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228e0,0x0
c00132a2:	eb d8                	jmp    c001327c <terminateTask(int)+0xa4>

c00132a4 <Thr::terminateFromIRQ(int)>:
c00132a4:	83 ec 18             	sub    esp,0x18
c00132a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132ab:	50                   	push   eax
c00132ac:	e8 27 ff ff ff       	call   c00131d8 <terminateTask(int)>
c00132b1:	90                   	nop
c00132b2:	66 90                	xchg   ax,ax

c00132b4 <Semaphore::release()>:
c00132b4:	83 ec 0c             	sub    esp,0xc
c00132b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132bb:	fa                   	cli    
c00132bc:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c00132c1:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c00132c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00132ca:	89 0d e4 28 02 c0    	mov    DWORD PTR ds:0xc00228e4,ecx
c00132d0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00132d3:	85 c9                	test   ecx,ecx
c00132d5:	74 41                	je     c0013318 <Semaphore::release()+0x64>
c00132d7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00132da:	83 ec 0c             	sub    esp,0xc
c00132dd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00132e0:	51                   	push   ecx
c00132e1:	e8 92 fa ff ff       	call   c0012d78 <unblockTask(ThreadControlBlock*)>
c00132e6:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c00132eb:	83 c4 10             	add    esp,0x10
c00132ee:	48                   	dec    eax
c00132ef:	90                   	nop
c00132f0:	a3 e4 28 02 c0       	mov    ds:0xc00228e4,eax
c00132f5:	85 c0                	test   eax,eax
c00132f7:	75 0b                	jne    c0013304 <Semaphore::release()+0x50>
c00132f9:	a1 e0 28 02 c0       	mov    eax,ds:0xc00228e0
c00132fe:	85 c0                	test   eax,eax
c0013300:	75 1e                	jne    c0013320 <Semaphore::release()+0x6c>
c0013302:	66 90                	xchg   ax,ax
c0013304:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0013309:	48                   	dec    eax
c001330a:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c001330f:	75 03                	jne    c0013314 <Semaphore::release()+0x60>
c0013311:	fb                   	sti    
c0013312:	66 90                	xchg   ax,ax
c0013314:	83 c4 0c             	add    esp,0xc
c0013317:	c3                   	ret    
c0013318:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001331b:	eb d3                	jmp    c00132f0 <Semaphore::release()+0x3c>
c001331d:	8d 76 00             	lea    esi,[esi+0x0]
c0013320:	c7 05 e0 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228e0,0x0
c001332a:	e8 85 f5 ff ff       	call   c00128b4 <schedule()>
c001332f:	eb d3                	jmp    c0013304 <Semaphore::release()+0x50>
c0013331:	8d 76 00             	lea    esi,[esi+0x0]

c0013334 <__static_initialization_and_destruction_0(int, int)>:
c0013334:	83 ec 0c             	sub    esp,0xc
c0013337:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001333c:	0f 85 8e 00 00 00    	jne    c00133d0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013342:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001334a:	0f 85 80 00 00 00    	jne    c00133d0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013350:	83 ec 0c             	sub    esp,0xc
c0013353:	68 04 29 02 c0       	push   0xc0022904
c0013358:	e8 5b 8c 00 00       	call   c001bfb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001335d:	83 c4 10             	add    esp,0x10
c0013360:	83 ec 04             	sub    esp,0x4
c0013363:	68 ec eb 01 c0       	push   0xc001ebec
c0013368:	68 04 29 02 c0       	push   0xc0022904
c001336d:	68 68 bf 01 c0       	push   0xc001bf68
c0013372:	e8 33 64 ff ff       	call   c00097aa <__cxa_atexit>
c0013377:	83 c4 10             	add    esp,0x10
c001337a:	83 ec 0c             	sub    esp,0xc
c001337d:	68 f8 28 02 c0       	push   0xc00228f8
c0013382:	e8 31 8c 00 00       	call   c001bfb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013387:	83 c4 10             	add    esp,0x10
c001338a:	83 ec 04             	sub    esp,0x4
c001338d:	68 ec eb 01 c0       	push   0xc001ebec
c0013392:	68 f8 28 02 c0       	push   0xc00228f8
c0013397:	68 68 bf 01 c0       	push   0xc001bf68
c001339c:	e8 09 64 ff ff       	call   c00097aa <__cxa_atexit>
c00133a1:	83 c4 10             	add    esp,0x10
c00133a4:	83 ec 0c             	sub    esp,0xc
c00133a7:	68 ec 28 02 c0       	push   0xc00228ec
c00133ac:	e8 07 8c 00 00       	call   c001bfb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00133b1:	83 c4 10             	add    esp,0x10
c00133b4:	83 ec 04             	sub    esp,0x4
c00133b7:	68 ec eb 01 c0       	push   0xc001ebec
c00133bc:	68 ec 28 02 c0       	push   0xc00228ec
c00133c1:	68 68 bf 01 c0       	push   0xc001bf68
c00133c6:	e8 df 63 ff ff       	call   c00097aa <__cxa_atexit>
c00133cb:	83 c4 10             	add    esp,0x10
c00133ce:	66 90                	xchg   ax,ax
c00133d0:	90                   	nop
c00133d1:	83 c4 0c             	add    esp,0xc
c00133d4:	c3                   	ret    
c00133d5:	8d 76 00             	lea    esi,[esi+0x0]

c00133d8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00133d8:	83 ec 0c             	sub    esp,0xc
c00133db:	83 ec 08             	sub    esp,0x8
c00133de:	68 ff ff 00 00       	push   0xffff
c00133e3:	6a 01                	push   0x1
c00133e5:	e8 4a ff ff ff       	call   c0013334 <__static_initialization_and_destruction_0(int, int)>
c00133ea:	83 c4 10             	add    esp,0x10
c00133ed:	83 c4 0c             	add    esp,0xc
c00133f0:	c3                   	ret    

c00133f1 <Vm::inbv(unsigned short)>:
c00133f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00133f5:	66 81 fa fe fe       	cmp    dx,0xfefe
c00133fa:	75 06                	jne    c0013402 <Vm::inbv(unsigned short)+0x11>
c00133fc:	a0 4c 29 02 c0       	mov    al,ds:0xc002294c
c0013401:	c3                   	ret    
c0013402:	ec                   	in     al,dx
c0013403:	c3                   	ret    

c0013404 <Vm::outbv(unsigned short, unsigned char)>:
c0013404:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013408:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001340c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013411:	75 25                	jne    c0013438 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0013413:	8b 0d 4c 29 02 c0    	mov    ecx,DWORD PTR ds:0xc002294c
c0013419:	8d 51 01             	lea    edx,[ecx+0x1]
c001341c:	88 81 60 29 02 c0    	mov    BYTE PTR [ecx-0x3ffdd6a0],al
c0013422:	89 15 4c 29 02 c0    	mov    DWORD PTR ds:0xc002294c,edx
c0013428:	83 fa 20             	cmp    edx,0x20
c001342b:	75 0c                	jne    c0013439 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001342d:	c7 05 4c 29 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002294c,0x1f
c0013437:	c3                   	ret    
c0013438:	ee                   	out    dx,al
c0013439:	c3                   	ret    

c001343a <Vm::realToLinear(unsigned short, unsigned short)>:
c001343a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001343f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013444:	c1 e0 04             	shl    eax,0x4
c0013447:	01 d0                	add    eax,edx
c0013449:	c3                   	ret    

c001344a <Vm::getSegment(unsigned int)>:
c001344a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001344e:	c1 e8 10             	shr    eax,0x10
c0013451:	c3                   	ret    

c0013452 <Vm::getOffset(unsigned int)>:
c0013452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013456:	c3                   	ret    

c0013457 <Vm::mainloop2()>:
c0013457:	83 ec 18             	sub    esp,0x18
c001345a:	fa                   	cli    
c001345b:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0013461:	6a 02                	push   0x2
c0013463:	c6 05 45 29 02 c0 01 	mov    BYTE PTR ds:0xc0022945,0x1
c001346a:	e8 19 f6 ff ff       	call   c0012a88 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001346f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013474:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013478:	52                   	push   edx
c0013479:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001347d:	52                   	push   edx
c001347e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0013482:	52                   	push   edx
c0013483:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0013487:	50                   	push   eax
c0013488:	e8 a2 cd fe ff       	call   c000022f <goToVM86>
c001348d:	83 c4 2c             	add    esp,0x2c
c0013490:	c3                   	ret    

c0013491 <Vm::mainVm8086Loop(void*)>:
c0013491:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0013496:	48                   	dec    eax
c0013497:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c001349c:	75 01                	jne    c001349f <Vm::mainVm8086Loop(void*)+0xe>
c001349e:	fb                   	sti    
c001349f:	eb b6                	jmp    c0013457 <Vm::mainloop2()>

c00134a1 <Vm::mainloop3(unsigned long)>:
c00134a1:	83 ec 18             	sub    esp,0x18
c00134a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134a8:	fa                   	cli    
c00134a9:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c00134af:	6a 02                	push   0x2
c00134b1:	c6 05 44 29 02 c0 01 	mov    BYTE PTR ds:0xc0022944,0x1
c00134b8:	a3 40 29 02 c0       	mov    ds:0xc0022940,eax
c00134bd:	e8 c6 f5 ff ff       	call   c0012a88 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00134c2:	83 c4 1c             	add    esp,0x1c
c00134c5:	eb 90                	jmp    c0013457 <Vm::mainloop2()>

c00134c7 <Vm::initialise8086()>:
c00134c7:	83 ec 0c             	sub    esp,0xc
c00134ca:	68 80 00 00 00       	push   0x80
c00134cf:	6a 00                	push   0x0
c00134d1:	68 91 34 01 c0       	push   0xc0013491
c00134d6:	ff 35 10 29 02 c0    	push   DWORD PTR ds:0xc0022910
c00134dc:	e8 b3 f1 ff ff       	call   c0012694 <Process::createThread(void (*)(void*), void*, int)>
c00134e1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00134e8:	a3 48 29 02 c0       	mov    ds:0xc0022948,eax
c00134ed:	68 00 01 00 00       	push   0x100
c00134f2:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c00134f7:	6a 00                	push   0x0
c00134f9:	6a 00                	push   0x0
c00134fb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013501:	e8 26 5b ff ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013506:	83 c4 2c             	add    esp,0x2c
c0013509:	c3                   	ret    

c001350a <Vm::finish8086()>:
c001350a:	53                   	push   ebx
c001350b:	83 ec 08             	sub    esp,0x8
c001350e:	fa                   	cli    
c001350f:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0013515:	80 3d 44 29 02 c0 00 	cmp    BYTE PTR ds:0xc0022944,0x0
c001351c:	75 15                	jne    c0013533 <Vm::finish8086()+0x29>
c001351e:	e8 91 f3 ff ff       	call   c00128b4 <schedule()>
c0013523:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0013528:	48                   	dec    eax
c0013529:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c001352e:	75 de                	jne    c001350e <Vm::finish8086()+0x4>
c0013530:	fb                   	sti    
c0013531:	eb db                	jmp    c001350e <Vm::finish8086()+0x4>
c0013533:	83 ec 0c             	sub    esp,0xc
c0013536:	8b 1d 40 29 02 c0    	mov    ebx,DWORD PTR ds:0xc0022940
c001353c:	ff 35 48 29 02 c0    	push   DWORD PTR ds:0xc0022948
c0013542:	c6 05 44 29 02 c0 00 	mov    BYTE PTR ds:0xc0022944,0x0
c0013549:	e8 2a f8 ff ff       	call   c0012d78 <unblockTask(ThreadControlBlock*)>
c001354e:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0013553:	83 c4 10             	add    esp,0x10
c0013556:	8d 50 ff             	lea    edx,[eax-0x1]
c0013559:	89 15 e8 28 02 c0    	mov    DWORD PTR ds:0xc00228e8,edx
c001355f:	85 d2                	test   edx,edx
c0013561:	75 01                	jne    c0013564 <Vm::finish8086()+0x5a>
c0013563:	fb                   	sti    
c0013564:	89 d8                	mov    eax,ebx
c0013566:	83 c4 08             	add    esp,0x8
c0013569:	5b                   	pop    ebx
c001356a:	c3                   	ret    

c001356b <Vm::getOutput8086(unsigned char*)>:
c001356b:	57                   	push   edi
c001356c:	8b 0d 4c 29 02 c0    	mov    ecx,DWORD PTR ds:0xc002294c
c0013572:	56                   	push   esi
c0013573:	be 60 29 02 c0       	mov    esi,0xc0022960
c0013578:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001357c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001357e:	a1 4c 29 02 c0       	mov    eax,ds:0xc002294c
c0013583:	5e                   	pop    esi
c0013584:	c7 05 4c 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002294c,0x0
c001358e:	5f                   	pop    edi
c001358f:	c3                   	ret    

c0013590 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0013590:	55                   	push   ebp
c0013591:	57                   	push   edi
c0013592:	56                   	push   esi
c0013593:	53                   	push   ebx
c0013594:	83 ec 0c             	sub    esp,0xc
c0013597:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001359b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001359f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00135a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00135a7:	fa                   	cli    
c00135a8:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c00135ae:	80 3d 45 29 02 c0 00 	cmp    BYTE PTR ds:0xc0022945,0x0
c00135b5:	75 15                	jne    c00135cc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00135b7:	e8 f8 f2 ff ff       	call   c00128b4 <schedule()>
c00135bc:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c00135c1:	48                   	dec    eax
c00135c2:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c00135c7:	75 de                	jne    c00135a7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00135c9:	fb                   	sti    
c00135ca:	eb db                	jmp    c00135a7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00135cc:	a1 48 29 02 c0       	mov    eax,ds:0xc0022948
c00135d1:	c7 05 4c 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002294c,0x0
c00135db:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00135df:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00135e3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00135e7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00135eb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00135ef:	0f b7 ff             	movzx  edi,di
c00135f2:	0f b7 f6             	movzx  esi,si
c00135f5:	50                   	push   eax
c00135f6:	6a 20                	push   0x20
c00135f8:	6a 00                	push   0x0
c00135fa:	68 60 29 02 c0       	push   0xc0022960
c00135ff:	e8 ec ce fe ff       	call   c00004f0 <memset>
c0013604:	5a                   	pop    edx
c0013605:	59                   	pop    ecx
c0013606:	57                   	push   edi
c0013607:	56                   	push   esi
c0013608:	e8 2d fe ff ff       	call   c001343a <Vm::realToLinear(unsigned short, unsigned short)>
c001360d:	83 c4 10             	add    esp,0x10
c0013610:	89 c7                	mov    edi,eax
c0013612:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013616:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001361a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001361c:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0013621:	c6 05 45 29 02 c0 00 	mov    BYTE PTR ds:0xc0022945,0x0
c0013628:	48                   	dec    eax
c0013629:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c001362e:	75 01                	jne    c0013631 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0013630:	fb                   	sti    
c0013631:	83 ec 0c             	sub    esp,0xc
c0013634:	ff 35 48 29 02 c0    	push   DWORD PTR ds:0xc0022948
c001363a:	e8 39 f7 ff ff       	call   c0012d78 <unblockTask(ThreadControlBlock*)>
c001363f:	83 c4 1c             	add    esp,0x1c
c0013642:	b0 01                	mov    al,0x1
c0013644:	5b                   	pop    ebx
c0013645:	5e                   	pop    esi
c0013646:	5f                   	pop    edi
c0013647:	5d                   	pop    ebp
c0013648:	c3                   	ret    

c0013649 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0013649:	55                   	push   ebp
c001364a:	57                   	push   edi
c001364b:	56                   	push   esi
c001364c:	53                   	push   ebx
c001364d:	83 ec 2c             	sub    esp,0x2c
c0013650:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0013654:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0013658:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001365c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013660:	fa                   	cli    
c0013661:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c0013667:	0f b6 35 45 29 02 c0 	movzx  esi,BYTE PTR ds:0xc0022945
c001366e:	89 f0                	mov    eax,esi
c0013670:	84 c0                	test   al,al
c0013672:	75 1d                	jne    c0013691 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0013674:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013678:	e8 37 f2 ff ff       	call   c00128b4 <schedule()>
c001367d:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0013682:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013686:	48                   	dec    eax
c0013687:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c001368c:	75 d2                	jne    c0013660 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001368e:	fb                   	sti    
c001368f:	eb cf                	jmp    c0013660 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013691:	a1 48 29 02 c0       	mov    eax,ds:0xc0022948
c0013696:	c7 05 4c 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002294c,0x0
c00136a0:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00136a4:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00136a8:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00136ac:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00136b0:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00136b4:	50                   	push   eax
c00136b5:	6a 20                	push   0x20
c00136b7:	6a 00                	push   0x0
c00136b9:	68 60 29 02 c0       	push   0xc0022960
c00136be:	e8 2d ce fe ff       	call   c00004f0 <memset>
c00136c3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00136ca:	e8 92 34 ff ff       	call   c0006b61 <malloc>
c00136cf:	83 c4 0c             	add    esp,0xc
c00136d2:	89 c3                	mov    ebx,eax
c00136d4:	ff 35 10 29 02 c0    	push   DWORD PTR ds:0xc0022910
c00136da:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00136de:	50                   	push   eax
c00136df:	e8 82 67 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c00136e4:	83 c4 10             	add    esp,0x10
c00136e7:	85 db                	test   ebx,ebx
c00136e9:	75 0a                	jne    c00136f5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00136eb:	83 ec 0c             	sub    esp,0xc
c00136ee:	68 d4 e1 01 c0       	push   0xc001e1d4
c00136f3:	eb 3e                	jmp    c0013733 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00136f5:	50                   	push   eax
c00136f6:	8d 44 24 17          	lea    eax,[esp+0x17]
c00136fa:	50                   	push   eax
c00136fb:	8d 44 24 20          	lea    eax,[esp+0x20]
c00136ff:	50                   	push   eax
c0013700:	53                   	push   ebx
c0013701:	e8 cc 6a ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c0013706:	83 c4 10             	add    esp,0x10
c0013709:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001370e:	74 0a                	je     c001371a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0013710:	83 ec 0c             	sub    esp,0xc
c0013713:	68 e8 e1 01 c0       	push   0xc001e1e8
c0013718:	eb 19                	jmp    c0013733 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001371a:	51                   	push   ecx
c001371b:	51                   	push   ecx
c001371c:	6a 01                	push   0x1
c001371e:	53                   	push   ebx
c001371f:	e8 02 68 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c0013724:	83 c4 10             	add    esp,0x10
c0013727:	85 c0                	test   eax,eax
c0013729:	74 24                	je     c001374f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001372b:	83 ec 0c             	sub    esp,0xc
c001372e:	68 01 e2 01 c0       	push   0xc001e201
c0013733:	e8 07 bd ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0013738:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c001373d:	83 c4 10             	add    esp,0x10
c0013740:	48                   	dec    eax
c0013741:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0013746:	85 c0                	test   eax,eax
c0013748:	75 01                	jne    c001374b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001374a:	fb                   	sti    
c001374b:	31 f6                	xor    esi,esi
c001374d:	eb 58                	jmp    c00137a7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001374f:	0f b7 ed             	movzx  ebp,bp
c0013752:	50                   	push   eax
c0013753:	0f b7 ff             	movzx  edi,di
c0013756:	50                   	push   eax
c0013757:	55                   	push   ebp
c0013758:	57                   	push   edi
c0013759:	e8 dc fc ff ff       	call   c001343a <Vm::realToLinear(unsigned short, unsigned short)>
c001375e:	5a                   	pop    edx
c001375f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013761:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013765:	51                   	push   ecx
c0013766:	50                   	push   eax
c0013767:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001376b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001376f:	53                   	push   ebx
c0013770:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013773:	83 c4 14             	add    esp,0x14
c0013776:	53                   	push   ebx
c0013777:	e8 08 68 ff ff       	call   c0009f84 <File::close()>
c001377c:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0013781:	83 c4 10             	add    esp,0x10
c0013784:	48                   	dec    eax
c0013785:	c6 05 45 29 02 c0 00 	mov    BYTE PTR ds:0xc0022945,0x0
c001378c:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0013791:	85 c0                	test   eax,eax
c0013793:	75 01                	jne    c0013796 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0013795:	fb                   	sti    
c0013796:	83 ec 0c             	sub    esp,0xc
c0013799:	ff 35 48 29 02 c0    	push   DWORD PTR ds:0xc0022948
c001379f:	e8 d4 f5 ff ff       	call   c0012d78 <unblockTask(ThreadControlBlock*)>
c00137a4:	83 c4 10             	add    esp,0x10
c00137a7:	83 c4 2c             	add    esp,0x2c
c00137aa:	89 f0                	mov    eax,esi
c00137ac:	5b                   	pop    ebx
c00137ad:	5e                   	pop    esi
c00137ae:	5f                   	pop    edi
c00137af:	5d                   	pop    ebp
c00137b0:	c3                   	ret    

c00137b1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00137b1:	57                   	push   edi
c00137b2:	56                   	push   esi
c00137b3:	53                   	push   ebx
c00137b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00137b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00137c0:	83 e8 06             	sub    eax,0x6
c00137c3:	0f b7 c0             	movzx  eax,ax
c00137c6:	50                   	push   eax
c00137c7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00137cc:	50                   	push   eax
c00137cd:	e8 68 fc ff ff       	call   c001343a <Vm::realToLinear(unsigned short, unsigned short)>
c00137d2:	5a                   	pop    edx
c00137d3:	5e                   	pop    esi
c00137d4:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00137d7:	8d 56 fa             	lea    edx,[esi-0x6]
c00137da:	81 e2 ff ff 00 00    	and    edx,0xffff
c00137e0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00137e3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00137e6:	83 c2 02             	add    edx,0x2
c00137e9:	66 89 10             	mov    WORD PTR [eax],dx
c00137ec:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00137ef:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00137f3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00137f6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00137fa:	89 d6                	mov    esi,edx
c00137fc:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0013802:	66 81 e6 ff fd       	and    si,0xfdff
c0013807:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001380b:	74 07                	je     c0013814 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001380d:	89 d6                	mov    esi,edx
c001380f:	66 81 ce 00 02       	or     si,0x200
c0013814:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0013818:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001381d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013821:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0013829:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001382c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0013834:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0013837:	5b                   	pop    ebx
c0013838:	5e                   	pop    esi
c0013839:	5f                   	pop    edi
c001383a:	c3                   	ret    

c001383b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001383b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013840:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013845:	c1 e0 04             	shl    eax,0x4
c0013848:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001384b:	c3                   	ret    

c001384c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001384c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013851:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013856:	c1 e0 04             	shl    eax,0x4
c0013859:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001385d:	c3                   	ret    

c001385e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001385e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013863:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013868:	c1 e0 04             	shl    eax,0x4
c001386b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001386e:	c3                   	ret    

c001386f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001386f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013874:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013879:	c1 e0 04             	shl    eax,0x4
c001387c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013880:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0013883:	c3                   	ret    

c0013884 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0013884:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013889:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001388e:	c1 e0 04             	shl    eax,0x4
c0013891:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013895:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0013899:	c3                   	ret    

c001389a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001389a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001389f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00138a4:	c1 e0 04             	shl    eax,0x4
c00138a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00138ab:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00138ae:	c3                   	ret    

c00138af <Vm::faultHandler(regs*)>:
c00138af:	55                   	push   ebp
c00138b0:	57                   	push   edi
c00138b1:	56                   	push   esi
c00138b2:	53                   	push   ebx
c00138b3:	83 ec 1c             	sub    esp,0x1c
c00138b6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00138ba:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00138bd:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00138c1:	0f b7 f8             	movzx  edi,ax
c00138c4:	52                   	push   edx
c00138c5:	0f b7 c0             	movzx  eax,ax
c00138c8:	50                   	push   eax
c00138c9:	e8 6c fb ff ff       	call   c001343a <Vm::realToLinear(unsigned short, unsigned short)>
c00138ce:	5a                   	pop    edx
c00138cf:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00138d2:	59                   	pop    ecx
c00138d3:	89 c1                	mov    ecx,eax
c00138d5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00138d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00138dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00138e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138e5:	0f b7 c5             	movzx  eax,bp
c00138e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138ec:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00138f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00138f4:	e8 41 fb ff ff       	call   c001343a <Vm::realToLinear(unsigned short, unsigned short)>
c00138f9:	5e                   	pop    esi
c00138fa:	be 06 00 00 00       	mov    esi,0x6
c00138ff:	5a                   	pop    edx
c0013900:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0013905:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001390a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001390d:	80 fa 9d             	cmp    dl,0x9d
c0013910:	0f 84 2c 02 00 00    	je     c0013b42 <Vm::faultHandler(regs*)+0x293>
c0013916:	0f 87 91 00 00 00    	ja     c00139ad <Vm::faultHandler(regs*)+0xfe>
c001391c:	80 fa 66             	cmp    dl,0x66
c001391f:	0f 84 98 01 00 00    	je     c0013abd <Vm::faultHandler(regs*)+0x20e>
c0013925:	77 47                	ja     c001396e <Vm::faultHandler(regs*)+0xbf>
c0013927:	80 fa 36             	cmp    dl,0x36
c001392a:	0f 84 80 01 00 00    	je     c0013ab0 <Vm::faultHandler(regs*)+0x201>
c0013930:	77 1a                	ja     c001394c <Vm::faultHandler(regs*)+0x9d>
c0013932:	80 fa 26             	cmp    dl,0x26
c0013935:	0f 84 4e 01 00 00    	je     c0013a89 <Vm::faultHandler(regs*)+0x1da>
c001393b:	80 fa 2e             	cmp    dl,0x2e
c001393e:	0f 85 e2 05 00 00    	jne    c0013f26 <Vm::faultHandler(regs*)+0x677>
c0013944:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013947:	31 f6                	xor    esi,esi
c0013949:	41                   	inc    ecx
c001394a:	eb be                	jmp    c001390a <Vm::faultHandler(regs*)+0x5b>
c001394c:	80 fa 64             	cmp    dl,0x64
c001394f:	0f 84 41 01 00 00    	je     c0013a96 <Vm::faultHandler(regs*)+0x1e7>
c0013955:	0f 87 48 01 00 00    	ja     c0013aa3 <Vm::faultHandler(regs*)+0x1f4>
c001395b:	80 fa 3e             	cmp    dl,0x3e
c001395e:	0f 85 c2 05 00 00    	jne    c0013f26 <Vm::faultHandler(regs*)+0x677>
c0013964:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013967:	be 01 00 00 00       	mov    esi,0x1
c001396c:	eb db                	jmp    c0013949 <Vm::faultHandler(regs*)+0x9a>
c001396e:	80 fa 6d             	cmp    dl,0x6d
c0013971:	0f 84 ec 02 00 00    	je     c0013c63 <Vm::faultHandler(regs*)+0x3b4>
c0013977:	77 17                	ja     c0013990 <Vm::faultHandler(regs*)+0xe1>
c0013979:	80 fa 67             	cmp    dl,0x67
c001397c:	0f 84 48 01 00 00    	je     c0013aca <Vm::faultHandler(regs*)+0x21b>
c0013982:	80 fa 6c             	cmp    dl,0x6c
c0013985:	0f 84 69 02 00 00    	je     c0013bf4 <Vm::faultHandler(regs*)+0x345>
c001398b:	e9 96 05 00 00       	jmp    c0013f26 <Vm::faultHandler(regs*)+0x677>
c0013990:	80 fa 6f             	cmp    dl,0x6f
c0013993:	0f 84 f4 03 00 00    	je     c0013d8d <Vm::faultHandler(regs*)+0x4de>
c0013999:	0f 82 59 03 00 00    	jb     c0013cf8 <Vm::faultHandler(regs*)+0x449>
c001399f:	80 fa 9c             	cmp    dl,0x9c
c00139a2:	0f 84 2f 01 00 00    	je     c0013ad7 <Vm::faultHandler(regs*)+0x228>
c00139a8:	e9 79 05 00 00       	jmp    c0013f26 <Vm::faultHandler(regs*)+0x677>
c00139ad:	80 fa ec             	cmp    dl,0xec
c00139b0:	0f 84 14 05 00 00    	je     c0013eca <Vm::faultHandler(regs*)+0x61b>
c00139b6:	77 7b                	ja     c0013a33 <Vm::faultHandler(regs*)+0x184>
c00139b8:	80 fa e4             	cmp    dl,0xe4
c00139bb:	0f 84 93 04 00 00    	je     c0013e54 <Vm::faultHandler(regs*)+0x5a5>
c00139c1:	77 53                	ja     c0013a16 <Vm::faultHandler(regs*)+0x167>
c00139c3:	80 fa cd             	cmp    dl,0xcd
c00139c6:	0f 84 d9 01 00 00    	je     c0013ba5 <Vm::faultHandler(regs*)+0x2f6>
c00139cc:	80 fa cf             	cmp    dl,0xcf
c00139cf:	0f 85 51 05 00 00    	jne    c0013f26 <Vm::faultHandler(regs*)+0x677>
c00139d5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00139d8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00139db:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00139df:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00139e2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00139e6:	81 ca 00 02 02 00    	or     edx,0x20200
c00139ec:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00139ef:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00139f3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00139f9:	66 c1 e8 09          	shr    ax,0x9
c00139fd:	83 e0 01             	and    eax,0x1
c0013a00:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013a03:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013a06:	83 c0 06             	add    eax,0x6
c0013a09:	25 ff ff 00 00       	and    eax,0xffff
c0013a0e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013a11:	e9 0c 05 00 00       	jmp    c0013f22 <Vm::faultHandler(regs*)+0x673>
c0013a16:	80 fa e6             	cmp    dl,0xe6
c0013a19:	0f 84 7f 04 00 00    	je     c0013e9e <Vm::faultHandler(regs*)+0x5ef>
c0013a1f:	0f 82 4b 04 00 00    	jb     c0013e70 <Vm::faultHandler(regs*)+0x5c1>
c0013a25:	80 fa e7             	cmp    dl,0xe7
c0013a28:	0f 84 87 04 00 00    	je     c0013eb5 <Vm::faultHandler(regs*)+0x606>
c0013a2e:	e9 f3 04 00 00       	jmp    c0013f26 <Vm::faultHandler(regs*)+0x677>
c0013a33:	80 fa ef             	cmp    dl,0xef
c0013a36:	0f 84 d1 04 00 00    	je     c0013f0d <Vm::faultHandler(regs*)+0x65e>
c0013a3c:	77 28                	ja     c0013a66 <Vm::faultHandler(regs*)+0x1b7>
c0013a3e:	80 fa ed             	cmp    dl,0xed
c0013a41:	0f 84 9f 04 00 00    	je     c0013ee6 <Vm::faultHandler(regs*)+0x637>
c0013a47:	80 fa ee             	cmp    dl,0xee
c0013a4a:	0f 85 d6 04 00 00    	jne    c0013f26 <Vm::faultHandler(regs*)+0x677>
c0013a50:	50                   	push   eax
c0013a51:	50                   	push   eax
c0013a52:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013a56:	50                   	push   eax
c0013a57:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013a5b:	50                   	push   eax
c0013a5c:	e8 a3 f9 ff ff       	call   c0013404 <Vm::outbv(unsigned short, unsigned char)>
c0013a61:	e9 9f 04 00 00       	jmp    c0013f05 <Vm::faultHandler(regs*)+0x656>
c0013a66:	80 fa fa             	cmp    dl,0xfa
c0013a69:	0f 84 69 01 00 00    	je     c0013bd8 <Vm::faultHandler(regs*)+0x329>
c0013a6f:	80 fa fb             	cmp    dl,0xfb
c0013a72:	0f 84 6e 01 00 00    	je     c0013be6 <Vm::faultHandler(regs*)+0x337>
c0013a78:	80 fa f3             	cmp    dl,0xf3
c0013a7b:	0f 85 a5 04 00 00    	jne    c0013f26 <Vm::faultHandler(regs*)+0x677>
c0013a81:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013a84:	e9 c0 fe ff ff       	jmp    c0013949 <Vm::faultHandler(regs*)+0x9a>
c0013a89:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013a8c:	be 02 00 00 00       	mov    esi,0x2
c0013a91:	e9 b3 fe ff ff       	jmp    c0013949 <Vm::faultHandler(regs*)+0x9a>
c0013a96:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013a99:	be 03 00 00 00       	mov    esi,0x3
c0013a9e:	e9 a6 fe ff ff       	jmp    c0013949 <Vm::faultHandler(regs*)+0x9a>
c0013aa3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013aa6:	be 04 00 00 00       	mov    esi,0x4
c0013aab:	e9 99 fe ff ff       	jmp    c0013949 <Vm::faultHandler(regs*)+0x9a>
c0013ab0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013ab3:	be 05 00 00 00       	mov    esi,0x5
c0013ab8:	e9 8c fe ff ff       	jmp    c0013949 <Vm::faultHandler(regs*)+0x9a>
c0013abd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013ac0:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0013ac5:	e9 7f fe ff ff       	jmp    c0013949 <Vm::faultHandler(regs*)+0x9a>
c0013aca:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013acd:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0013ad2:	e9 72 fe ff ff       	jmp    c0013949 <Vm::faultHandler(regs*)+0x9a>
c0013ad7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0013ada:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013ade:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013ae3:	74 30                	je     c0013b15 <Vm::faultHandler(regs*)+0x266>
c0013ae5:	83 e9 04             	sub    ecx,0x4
c0013ae8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013aee:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013af4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013af7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013afa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b00:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013b04:	0f 84 15 04 00 00    	je     c0013f1f <Vm::faultHandler(regs*)+0x670>
c0013b0a:	80 ce 02             	or     dh,0x2
c0013b0d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013b10:	e9 0a 04 00 00       	jmp    c0013f1f <Vm::faultHandler(regs*)+0x670>
c0013b15:	83 e9 02             	sub    ecx,0x2
c0013b18:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013b1e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013b21:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013b25:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b2b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013b2f:	74 05                	je     c0013b36 <Vm::faultHandler(regs*)+0x287>
c0013b31:	80 ce 02             	or     dh,0x2
c0013b34:	eb 03                	jmp    c0013b39 <Vm::faultHandler(regs*)+0x28a>
c0013b36:	80 e6 fd             	and    dh,0xfd
c0013b39:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013b3d:	e9 dd 03 00 00       	jmp    c0013f1f <Vm::faultHandler(regs*)+0x670>
c0013b42:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013b47:	74 2a                	je     c0013b73 <Vm::faultHandler(regs*)+0x2c4>
c0013b49:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b4b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013b51:	81 ca 00 02 02 00    	or     edx,0x20200
c0013b57:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013b5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b5c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b62:	c1 e8 09             	shr    eax,0x9
c0013b65:	83 e0 01             	and    eax,0x1
c0013b68:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013b6b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013b6e:	83 c0 04             	add    eax,0x4
c0013b71:	eb 25                	jmp    c0013b98 <Vm::faultHandler(regs*)+0x2e9>
c0013b73:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013b76:	81 ca 00 02 02 00    	or     edx,0x20200
c0013b7c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013b7f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013b82:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b88:	66 c1 e8 09          	shr    ax,0x9
c0013b8c:	83 e0 01             	and    eax,0x1
c0013b8f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013b92:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013b95:	83 c0 02             	add    eax,0x2
c0013b98:	25 ff ff 00 00       	and    eax,0xffff
c0013b9d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013ba0:	e9 7a 03 00 00       	jmp    c0013f1f <Vm::faultHandler(regs*)+0x670>
c0013ba5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013ba9:	3c ee                	cmp    al,0xee
c0013bab:	75 10                	jne    c0013bbd <Vm::faultHandler(regs*)+0x30e>
c0013bad:	83 ec 0c             	sub    esp,0xc
c0013bb0:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0013bb3:	e8 e9 f8 ff ff       	call   c00134a1 <Vm::mainloop3(unsigned long)>
c0013bb8:	e9 4b 03 00 00       	jmp    c0013f08 <Vm::faultHandler(regs*)+0x659>
c0013bbd:	83 ec 0c             	sub    esp,0xc
c0013bc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bc8:	51                   	push   ecx
c0013bc9:	50                   	push   eax
c0013bca:	53                   	push   ebx
c0013bcb:	e8 e1 fb ff ff       	call   c00137b1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0013bd0:	83 c4 20             	add    esp,0x20
c0013bd3:	e9 4a 03 00 00       	jmp    c0013f22 <Vm::faultHandler(regs*)+0x673>
c0013bd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bdd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013be1:	e9 39 03 00 00       	jmp    c0013f1f <Vm::faultHandler(regs*)+0x670>
c0013be6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013beb:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0013bef:	e9 2b 03 00 00       	jmp    c0013f1f <Vm::faultHandler(regs*)+0x670>
c0013bf4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013bf7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013bfc:	74 2b                	je     c0013c29 <Vm::faultHandler(regs*)+0x37a>
c0013bfe:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0013c05:	76 22                	jbe    c0013c29 <Vm::faultHandler(regs*)+0x37a>
c0013c07:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013c0b:	50                   	push   eax
c0013c0c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013c10:	50                   	push   eax
c0013c11:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013c15:	50                   	push   eax
c0013c16:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013c1a:	50                   	push   eax
c0013c1b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013c1f:	50                   	push   eax
c0013c20:	6a 6c                	push   0x6c
c0013c22:	6a 6c                	push   0x6c
c0013c24:	e9 b9 01 00 00       	jmp    c0013de2 <Vm::faultHandler(regs*)+0x533>
c0013c29:	83 ec 0c             	sub    esp,0xc
c0013c2c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013c30:	0f b7 f6             	movzx  esi,si
c0013c33:	50                   	push   eax
c0013c34:	e8 b8 f7 ff ff       	call   c00133f1 <Vm::inbv(unsigned short)>
c0013c39:	83 c4 0c             	add    esp,0xc
c0013c3c:	0f b6 c0             	movzx  eax,al
c0013c3f:	50                   	push   eax
c0013c40:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0013c44:	50                   	push   eax
c0013c45:	56                   	push   esi
c0013c46:	e8 24 fc ff ff       	call   c001386f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0013c4b:	83 c4 10             	add    esp,0x10
c0013c4e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013c51:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013c55:	74 03                	je     c0013c5a <Vm::faultHandler(regs*)+0x3ab>
c0013c57:	48                   	dec    eax
c0013c58:	eb 01                	jmp    c0013c5b <Vm::faultHandler(regs*)+0x3ac>
c0013c5a:	40                   	inc    eax
c0013c5b:	0f b7 c0             	movzx  eax,ax
c0013c5e:	e9 8d 00 00 00       	jmp    c0013cf0 <Vm::faultHandler(regs*)+0x441>
c0013c63:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013c66:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013c69:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013c6e:	74 29                	je     c0013c99 <Vm::faultHandler(regs*)+0x3ea>
c0013c70:	3d ff ff 00 00       	cmp    eax,0xffff
c0013c75:	76 22                	jbe    c0013c99 <Vm::faultHandler(regs*)+0x3ea>
c0013c77:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013c7b:	50                   	push   eax
c0013c7c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013c80:	50                   	push   eax
c0013c81:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013c85:	50                   	push   eax
c0013c86:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013c8a:	50                   	push   eax
c0013c8b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013c8f:	50                   	push   eax
c0013c90:	6a 6d                	push   0x6d
c0013c92:	6a 6d                	push   0x6d
c0013c94:	e9 49 01 00 00       	jmp    c0013de2 <Vm::faultHandler(regs*)+0x533>
c0013c99:	0f b7 c8             	movzx  ecx,ax
c0013c9c:	0f b7 f6             	movzx  esi,si
c0013c9f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013ca2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013ca7:	74 20                	je     c0013cc9 <Vm::faultHandler(regs*)+0x41a>
c0013ca9:	ed                   	in     eax,dx
c0013caa:	55                   	push   ebp
c0013cab:	50                   	push   eax
c0013cac:	51                   	push   ecx
c0013cad:	56                   	push   esi
c0013cae:	e8 e7 fb ff ff       	call   c001389a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0013cb3:	83 c4 10             	add    esp,0x10
c0013cb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013cb9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013cbd:	74 05                	je     c0013cc4 <Vm::faultHandler(regs*)+0x415>
c0013cbf:	83 e8 04             	sub    eax,0x4
c0013cc2:	eb 27                	jmp    c0013ceb <Vm::faultHandler(regs*)+0x43c>
c0013cc4:	83 c0 04             	add    eax,0x4
c0013cc7:	eb 22                	jmp    c0013ceb <Vm::faultHandler(regs*)+0x43c>
c0013cc9:	66 ed                	in     ax,dx
c0013ccb:	0f b7 c0             	movzx  eax,ax
c0013cce:	57                   	push   edi
c0013ccf:	50                   	push   eax
c0013cd0:	51                   	push   ecx
c0013cd1:	56                   	push   esi
c0013cd2:	e8 ad fb ff ff       	call   c0013884 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0013cd7:	83 c4 10             	add    esp,0x10
c0013cda:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013cdd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013ce1:	74 05                	je     c0013ce8 <Vm::faultHandler(regs*)+0x439>
c0013ce3:	83 e8 02             	sub    eax,0x2
c0013ce6:	eb 03                	jmp    c0013ceb <Vm::faultHandler(regs*)+0x43c>
c0013ce8:	83 c0 02             	add    eax,0x2
c0013ceb:	25 ff ff 00 00       	and    eax,0xffff
c0013cf0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0013cf3:	e9 27 02 00 00       	jmp    c0013f1f <Vm::faultHandler(regs*)+0x670>
c0013cf8:	8d 46 ff             	lea    eax,[esi-0x1]
c0013cfb:	3c 05                	cmp    al,0x5
c0013cfd:	77 24                	ja     c0013d23 <Vm::faultHandler(regs*)+0x474>
c0013cff:	0f b6 c0             	movzx  eax,al
c0013d02:	ff 24 85 74 e2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1d8c]
c0013d09:	0f b7 fd             	movzx  edi,bp
c0013d0c:	eb 15                	jmp    c0013d23 <Vm::faultHandler(regs*)+0x474>
c0013d0e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0013d12:	eb 0f                	jmp    c0013d23 <Vm::faultHandler(regs*)+0x474>
c0013d14:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0013d18:	eb 09                	jmp    c0013d23 <Vm::faultHandler(regs*)+0x474>
c0013d1a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0013d1e:	eb 03                	jmp    c0013d23 <Vm::faultHandler(regs*)+0x474>
c0013d20:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0013d23:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013d26:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013d2b:	74 29                	je     c0013d56 <Vm::faultHandler(regs*)+0x4a7>
c0013d2d:	3d ff ff 00 00       	cmp    eax,0xffff
c0013d32:	76 22                	jbe    c0013d56 <Vm::faultHandler(regs*)+0x4a7>
c0013d34:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013d38:	50                   	push   eax
c0013d39:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013d3d:	50                   	push   eax
c0013d3e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013d42:	50                   	push   eax
c0013d43:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013d47:	50                   	push   eax
c0013d48:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013d4c:	50                   	push   eax
c0013d4d:	6a 6e                	push   0x6e
c0013d4f:	6a 6e                	push   0x6e
c0013d51:	e9 8c 00 00 00       	jmp    c0013de2 <Vm::faultHandler(regs*)+0x533>
c0013d56:	0f b7 c0             	movzx  eax,ax
c0013d59:	52                   	push   edx
c0013d5a:	52                   	push   edx
c0013d5b:	50                   	push   eax
c0013d5c:	57                   	push   edi
c0013d5d:	e8 d9 fa ff ff       	call   c001383b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0013d62:	59                   	pop    ecx
c0013d63:	0f b6 c0             	movzx  eax,al
c0013d66:	5e                   	pop    esi
c0013d67:	50                   	push   eax
c0013d68:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013d6c:	50                   	push   eax
c0013d6d:	e8 92 f6 ff ff       	call   c0013404 <Vm::outbv(unsigned short, unsigned char)>
c0013d72:	83 c4 10             	add    esp,0x10
c0013d75:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013d78:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013d7c:	74 03                	je     c0013d81 <Vm::faultHandler(regs*)+0x4d2>
c0013d7e:	48                   	dec    eax
c0013d7f:	eb 01                	jmp    c0013d82 <Vm::faultHandler(regs*)+0x4d3>
c0013d81:	40                   	inc    eax
c0013d82:	0f b7 c0             	movzx  eax,ax
c0013d85:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0013d88:	e9 92 01 00 00       	jmp    c0013f1f <Vm::faultHandler(regs*)+0x670>
c0013d8d:	8d 46 ff             	lea    eax,[esi-0x1]
c0013d90:	3c 05                	cmp    al,0x5
c0013d92:	77 1f                	ja     c0013db3 <Vm::faultHandler(regs*)+0x504>
c0013d94:	0f b6 c0             	movzx  eax,al
c0013d97:	ff 24 85 8c e2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1d74]
c0013d9e:	89 ef                	mov    edi,ebp
c0013da0:	eb 11                	jmp    c0013db3 <Vm::faultHandler(regs*)+0x504>
c0013da2:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0013da5:	eb 0c                	jmp    c0013db3 <Vm::faultHandler(regs*)+0x504>
c0013da7:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0013daa:	eb 07                	jmp    c0013db3 <Vm::faultHandler(regs*)+0x504>
c0013dac:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0013daf:	eb 02                	jmp    c0013db3 <Vm::faultHandler(regs*)+0x504>
c0013db1:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0013db3:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0013db6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013dbb:	74 37                	je     c0013df4 <Vm::faultHandler(regs*)+0x545>
c0013dbd:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0013dc3:	76 2f                	jbe    c0013df4 <Vm::faultHandler(regs*)+0x545>
c0013dc5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013dc9:	50                   	push   eax
c0013dca:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013dce:	50                   	push   eax
c0013dcf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013dd3:	50                   	push   eax
c0013dd4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013dd8:	50                   	push   eax
c0013dd9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013ddd:	50                   	push   eax
c0013dde:	6a 6f                	push   0x6f
c0013de0:	6a 6f                	push   0x6f
c0013de2:	68 1a e2 01 c0       	push   0xc001e21a
c0013de7:	e8 04 5b ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013dec:	83 c4 20             	add    esp,0x20
c0013def:	e9 86 01 00 00       	jmp    c0013f7a <Vm::faultHandler(regs*)+0x6cb>
c0013df4:	0f b7 d7             	movzx  edx,di
c0013df7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0013dfa:	0f b7 c6             	movzx  eax,si
c0013dfd:	81 e1 00 04 00 00    	and    ecx,0x400
c0013e03:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0013e06:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013e0b:	74 1d                	je     c0013e2a <Vm::faultHandler(regs*)+0x57b>
c0013e0d:	55                   	push   ebp
c0013e0e:	55                   	push   ebp
c0013e0f:	50                   	push   eax
c0013e10:	52                   	push   edx
c0013e11:	e8 48 fa ff ff       	call   c001385e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0013e16:	83 c4 10             	add    esp,0x10
c0013e19:	89 fa                	mov    edx,edi
c0013e1b:	ef                   	out    dx,eax
c0013e1c:	85 c9                	test   ecx,ecx
c0013e1e:	74 05                	je     c0013e25 <Vm::faultHandler(regs*)+0x576>
c0013e20:	83 ee 04             	sub    esi,0x4
c0013e23:	eb 21                	jmp    c0013e46 <Vm::faultHandler(regs*)+0x597>
c0013e25:	83 c6 04             	add    esi,0x4
c0013e28:	eb 1c                	jmp    c0013e46 <Vm::faultHandler(regs*)+0x597>
c0013e2a:	55                   	push   ebp
c0013e2b:	55                   	push   ebp
c0013e2c:	50                   	push   eax
c0013e2d:	52                   	push   edx
c0013e2e:	e8 19 fa ff ff       	call   c001384c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0013e33:	83 c4 10             	add    esp,0x10
c0013e36:	89 fa                	mov    edx,edi
c0013e38:	66 ef                	out    dx,ax
c0013e3a:	85 c9                	test   ecx,ecx
c0013e3c:	74 05                	je     c0013e43 <Vm::faultHandler(regs*)+0x594>
c0013e3e:	83 ee 02             	sub    esi,0x2
c0013e41:	eb 03                	jmp    c0013e46 <Vm::faultHandler(regs*)+0x597>
c0013e43:	83 c6 02             	add    esi,0x2
c0013e46:	81 e6 ff ff 00 00    	and    esi,0xffff
c0013e4c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0013e4f:	e9 cb 00 00 00       	jmp    c0013f1f <Vm::faultHandler(regs*)+0x670>
c0013e54:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013e5b:	83 ec 0c             	sub    esp,0xc
c0013e5e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013e62:	50                   	push   eax
c0013e63:	e8 89 f5 ff ff       	call   c00133f1 <Vm::inbv(unsigned short)>
c0013e68:	0f b6 c0             	movzx  eax,al
c0013e6b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0013e6e:	eb 3f                	jmp    c0013eaf <Vm::faultHandler(regs*)+0x600>
c0013e70:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013e75:	74 07                	je     c0013e7e <Vm::faultHandler(regs*)+0x5cf>
c0013e77:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013e7b:	ed                   	in     eax,dx
c0013e7c:	eb 14                	jmp    c0013e92 <Vm::faultHandler(regs*)+0x5e3>
c0013e7e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0013e81:	66 31 f6             	xor    si,si
c0013e84:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0013e87:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013e8b:	66 ed                	in     ax,dx
c0013e8d:	0f b7 c0             	movzx  eax,ax
c0013e90:	09 f0                	or     eax,esi
c0013e92:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013e95:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0013e99:	e9 84 00 00 00       	jmp    c0013f22 <Vm::faultHandler(regs*)+0x673>
c0013e9e:	52                   	push   edx
c0013e9f:	52                   	push   edx
c0013ea0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013ea4:	50                   	push   eax
c0013ea5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013ea9:	50                   	push   eax
c0013eaa:	e8 55 f5 ff ff       	call   c0013404 <Vm::outbv(unsigned short, unsigned char)>
c0013eaf:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0013eb3:	eb 53                	jmp    c0013f08 <Vm::faultHandler(regs*)+0x659>
c0013eb5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013eb8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013ebc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013ec1:	74 03                	je     c0013ec6 <Vm::faultHandler(regs*)+0x617>
c0013ec3:	ef                   	out    dx,eax
c0013ec4:	eb cf                	jmp    c0013e95 <Vm::faultHandler(regs*)+0x5e6>
c0013ec6:	66 ef                	out    dx,ax
c0013ec8:	eb cb                	jmp    c0013e95 <Vm::faultHandler(regs*)+0x5e6>
c0013eca:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013ed1:	83 ec 0c             	sub    esp,0xc
c0013ed4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013ed8:	50                   	push   eax
c0013ed9:	e8 13 f5 ff ff       	call   c00133f1 <Vm::inbv(unsigned short)>
c0013ede:	0f b6 c0             	movzx  eax,al
c0013ee1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0013ee4:	eb 1f                	jmp    c0013f05 <Vm::faultHandler(regs*)+0x656>
c0013ee6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013ee9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013eee:	74 03                	je     c0013ef3 <Vm::faultHandler(regs*)+0x644>
c0013ef0:	ed                   	in     eax,dx
c0013ef1:	eb 0d                	jmp    c0013f00 <Vm::faultHandler(regs*)+0x651>
c0013ef3:	66 ed                	in     ax,dx
c0013ef5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0013ef8:	0f b7 c0             	movzx  eax,ax
c0013efb:	66 31 d2             	xor    dx,dx
c0013efe:	09 d0                	or     eax,edx
c0013f00:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013f03:	eb 1a                	jmp    c0013f1f <Vm::faultHandler(regs*)+0x670>
c0013f05:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013f08:	83 c4 10             	add    esp,0x10
c0013f0b:	eb 15                	jmp    c0013f22 <Vm::faultHandler(regs*)+0x673>
c0013f0d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013f10:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013f13:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013f18:	74 03                	je     c0013f1d <Vm::faultHandler(regs*)+0x66e>
c0013f1a:	ef                   	out    dx,eax
c0013f1b:	eb 02                	jmp    c0013f1f <Vm::faultHandler(regs*)+0x670>
c0013f1d:	66 ef                	out    dx,ax
c0013f1f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013f22:	b0 01                	mov    al,0x1
c0013f24:	eb 56                	jmp    c0013f7c <Vm::faultHandler(regs*)+0x6cd>
c0013f26:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013f2a:	50                   	push   eax
c0013f2b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013f2f:	50                   	push   eax
c0013f30:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013f34:	50                   	push   eax
c0013f35:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013f39:	50                   	push   eax
c0013f3a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013f3e:	50                   	push   eax
c0013f3f:	52                   	push   edx
c0013f40:	52                   	push   edx
c0013f41:	68 47 e2 01 c0       	push   0xc001e247
c0013f46:	e8 a5 59 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013f4b:	83 c4 20             	add    esp,0x20
c0013f4e:	83 ec 0c             	sub    esp,0xc
c0013f51:	6a 60                	push   0x60
c0013f53:	e8 99 f4 ff ff       	call   c00133f1 <Vm::inbv(unsigned short)>
c0013f58:	83 c4 10             	add    esp,0x10
c0013f5b:	3c 1c                	cmp    al,0x1c
c0013f5d:	74 04                	je     c0013f63 <Vm::faultHandler(regs*)+0x6b4>
c0013f5f:	3c 5a                	cmp    al,0x5a
c0013f61:	75 eb                	jne    c0013f4e <Vm::faultHandler(regs*)+0x69f>
c0013f63:	3c 5a                	cmp    al,0x5a
c0013f65:	74 04                	je     c0013f6b <Vm::faultHandler(regs*)+0x6bc>
c0013f67:	3c 1c                	cmp    al,0x1c
c0013f69:	75 0f                	jne    c0013f7a <Vm::faultHandler(regs*)+0x6cb>
c0013f6b:	83 ec 0c             	sub    esp,0xc
c0013f6e:	6a 60                	push   0x60
c0013f70:	e8 7c f4 ff ff       	call   c00133f1 <Vm::inbv(unsigned short)>
c0013f75:	83 c4 10             	add    esp,0x10
c0013f78:	eb e9                	jmp    c0013f63 <Vm::faultHandler(regs*)+0x6b4>
c0013f7a:	31 c0                	xor    eax,eax
c0013f7c:	83 c4 1c             	add    esp,0x1c
c0013f7f:	5b                   	pop    ebx
c0013f80:	5e                   	pop    esi
c0013f81:	5f                   	pop    edi
c0013f82:	5d                   	pop    ebp
c0013f83:	c3                   	ret    

c0013f84 <noCopro(unsigned long)>:
c0013f84:	c3                   	ret    

c0013f85 <nmiHandler(regs*, void*)>:
c0013f85:	83 ec 0c             	sub    esp,0xc
c0013f88:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0013f8d:	83 ec 0c             	sub    esp,0xc
c0013f90:	50                   	push   eax
c0013f91:	e8 ac 23 ff ff       	call   c0006342 <Computer::handleNMI()>
c0013f96:	83 c4 10             	add    esp,0x10
c0013f99:	90                   	nop
c0013f9a:	83 c4 0c             	add    esp,0xc
c0013f9d:	c3                   	ret    

c0013f9e <doubleFault(regs*, void*)>:
c0013f9e:	55                   	push   ebp
c0013f9f:	89 e5                	mov    ebp,esp
c0013fa1:	83 ec 08             	sub    esp,0x8
c0013fa4:	83 ec 0c             	sub    esp,0xc
c0013fa7:	68 a4 e2 01 c0       	push   0xc001e2a4
c0013fac:	e8 8e b4 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0013fb1:	83 c4 10             	add    esp,0x10
c0013fb4:	90                   	nop
c0013fb5:	c9                   	leave  
c0013fb6:	c3                   	ret    

c0013fb7 <displayDebugInfo(regs*)>:
c0013fb7:	83 ec 1c             	sub    esp,0x1c
c0013fba:	0f 20 c0             	mov    eax,cr0
c0013fbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013fc1:	0f 20 d0             	mov    eax,cr2
c0013fc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fc8:	0f 20 d8             	mov    eax,cr3
c0013fcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013fcf:	0f 20 e0             	mov    eax,cr4
c0013fd2:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0013fdc:	83 ec 08             	sub    esp,0x8
c0013fdf:	50                   	push   eax
c0013fe0:	68 c0 e2 01 c0       	push   0xc001e2c0
c0013fe5:	e8 06 59 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0013fea:	83 c4 10             	add    esp,0x10
c0013fed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0013ff4:	83 ec 08             	sub    esp,0x8
c0013ff7:	50                   	push   eax
c0013ff8:	68 b1 e2 01 c0       	push   0xc001e2b1
c0013ffd:	e8 ee 58 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0014002:	83 c4 10             	add    esp,0x10
c0014005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014009:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001400c:	83 ec 08             	sub    esp,0x8
c001400f:	50                   	push   eax
c0014010:	68 bc e2 01 c0       	push   0xc001e2bc
c0014015:	e8 d6 58 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001401a:	83 c4 10             	add    esp,0x10
c001401d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014021:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014024:	83 ec 08             	sub    esp,0x8
c0014027:	50                   	push   eax
c0014028:	68 cb e2 01 c0       	push   0xc001e2cb
c001402d:	e8 be 58 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0014032:	83 c4 10             	add    esp,0x10
c0014035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014039:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001403c:	83 ec 08             	sub    esp,0x8
c001403f:	50                   	push   eax
c0014040:	68 d6 e2 01 c0       	push   0xc001e2d6
c0014045:	e8 a6 58 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001404a:	83 c4 10             	add    esp,0x10
c001404d:	83 ec 08             	sub    esp,0x8
c0014050:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014054:	68 e1 e2 01 c0       	push   0xc001e2e1
c0014059:	e8 92 58 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001405e:	83 c4 10             	add    esp,0x10
c0014061:	83 ec 08             	sub    esp,0x8
c0014064:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014068:	68 ec e2 01 c0       	push   0xc001e2ec
c001406d:	e8 7e 58 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0014072:	83 c4 10             	add    esp,0x10
c0014075:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c001407a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014080:	83 ec 0c             	sub    esp,0xc
c0014083:	50                   	push   eax
c0014084:	e8 08 38 ff ff       	call   c0007891 <setActiveTerminal(VgaText*)>
c0014089:	83 c4 10             	add    esp,0x10
c001408c:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c0014091:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014097:	83 ec 08             	sub    esp,0x8
c001409a:	68 f7 e2 01 c0       	push   0xc001e2f7
c001409f:	50                   	push   eax
c00140a0:	e8 2b 3b ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c00140a5:	83 c4 10             	add    esp,0x10
c00140a8:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c00140ad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140b3:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00140b8:	8b 12                	mov    edx,DWORD PTR [edx]
c00140ba:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00140bd:	83 c2 0c             	add    edx,0xc
c00140c0:	83 ec 08             	sub    esp,0x8
c00140c3:	52                   	push   edx
c00140c4:	50                   	push   eax
c00140c5:	e8 06 3b ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c00140ca:	83 c4 10             	add    esp,0x10
c00140cd:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c00140d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140d8:	83 ec 08             	sub    esp,0x8
c00140db:	68 00 e3 01 c0       	push   0xc001e300
c00140e0:	50                   	push   eax
c00140e1:	e8 ea 3a ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c00140e6:	83 c4 10             	add    esp,0x10
c00140e9:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c00140ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00140f8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00140fb:	83 ec 08             	sub    esp,0x8
c00140fe:	52                   	push   edx
c00140ff:	50                   	push   eax
c0014100:	e8 85 3a ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c0014105:	83 c4 10             	add    esp,0x10
c0014108:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c001410d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014113:	83 ec 08             	sub    esp,0x8
c0014116:	68 08 e3 01 c0       	push   0xc001e308
c001411b:	50                   	push   eax
c001411c:	e8 af 3a ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c0014121:	83 c4 10             	add    esp,0x10
c0014124:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c0014129:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001412f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014133:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0014136:	83 ec 08             	sub    esp,0x8
c0014139:	52                   	push   edx
c001413a:	50                   	push   eax
c001413b:	e8 4a 3a ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c0014140:	83 c4 10             	add    esp,0x10
c0014143:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c0014148:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001414e:	83 ec 08             	sub    esp,0x8
c0014151:	68 10 e3 01 c0       	push   0xc001e310
c0014156:	50                   	push   eax
c0014157:	e8 74 3a ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c001415c:	83 c4 10             	add    esp,0x10
c001415f:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c0014164:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001416a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001416e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014171:	83 ec 08             	sub    esp,0x8
c0014174:	52                   	push   edx
c0014175:	50                   	push   eax
c0014176:	e8 0f 3a ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c001417b:	83 c4 10             	add    esp,0x10
c001417e:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c0014183:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014189:	83 ec 08             	sub    esp,0x8
c001418c:	68 18 e3 01 c0       	push   0xc001e318
c0014191:	50                   	push   eax
c0014192:	e8 39 3a ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c0014197:	83 c4 10             	add    esp,0x10
c001419a:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c001419f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141a9:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00141ac:	83 ec 08             	sub    esp,0x8
c00141af:	52                   	push   edx
c00141b0:	50                   	push   eax
c00141b1:	e8 d4 39 ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c00141b6:	83 c4 10             	add    esp,0x10
c00141b9:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c00141be:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141c4:	83 ec 08             	sub    esp,0x8
c00141c7:	68 20 e3 01 c0       	push   0xc001e320
c00141cc:	50                   	push   eax
c00141cd:	e8 fe 39 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c00141d2:	83 c4 10             	add    esp,0x10
c00141d5:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c00141da:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141e4:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00141e7:	83 ec 08             	sub    esp,0x8
c00141ea:	52                   	push   edx
c00141eb:	50                   	push   eax
c00141ec:	e8 99 39 ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c00141f1:	83 c4 10             	add    esp,0x10
c00141f4:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c00141f9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141ff:	83 ec 08             	sub    esp,0x8
c0014202:	68 28 e3 01 c0       	push   0xc001e328
c0014207:	50                   	push   eax
c0014208:	e8 c3 39 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c001420d:	83 c4 10             	add    esp,0x10
c0014210:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c0014215:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001421b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001421f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014222:	83 ec 08             	sub    esp,0x8
c0014225:	52                   	push   edx
c0014226:	50                   	push   eax
c0014227:	e8 5e 39 ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c001422c:	83 c4 10             	add    esp,0x10
c001422f:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c0014234:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001423a:	83 ec 08             	sub    esp,0x8
c001423d:	68 30 e3 01 c0       	push   0xc001e330
c0014242:	50                   	push   eax
c0014243:	e8 88 39 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c0014248:	83 c4 10             	add    esp,0x10
c001424b:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c0014250:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014256:	83 ec 08             	sub    esp,0x8
c0014259:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001425d:	50                   	push   eax
c001425e:	e8 27 39 ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c0014263:	83 c4 10             	add    esp,0x10
c0014266:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c001426b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014271:	83 ec 08             	sub    esp,0x8
c0014274:	68 39 e3 01 c0       	push   0xc001e339
c0014279:	50                   	push   eax
c001427a:	e8 51 39 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c001427f:	83 c4 10             	add    esp,0x10
c0014282:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c0014287:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001428d:	83 ec 08             	sub    esp,0x8
c0014290:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014294:	50                   	push   eax
c0014295:	e8 f0 38 ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c001429a:	83 c4 10             	add    esp,0x10
c001429d:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c00142a2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142a8:	83 ec 08             	sub    esp,0x8
c00142ab:	68 41 e3 01 c0       	push   0xc001e341
c00142b0:	50                   	push   eax
c00142b1:	e8 1a 39 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c00142b6:	83 c4 10             	add    esp,0x10
c00142b9:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c00142be:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142c4:	83 ec 08             	sub    esp,0x8
c00142c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00142cb:	50                   	push   eax
c00142cc:	e8 b9 38 ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c00142d1:	83 c4 10             	add    esp,0x10
c00142d4:	fa                   	cli    
c00142d5:	f4                   	hlt    
c00142d6:	eb fe                	jmp    c00142d6 <displayDebugInfo(regs*)+0x31f>

c00142d8 <displayProgramFault(char const*)>:
c00142d8:	83 ec 0c             	sub    esp,0xc
c00142db:	83 ec 0c             	sub    esp,0xc
c00142de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142e2:	e8 09 56 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00142e7:	83 c4 10             	add    esp,0x10
c00142ea:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00142ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00142f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142fa:	85 c0                	test   eax,eax
c00142fc:	74 21                	je     c001431f <displayProgramFault(char const*)+0x47>
c00142fe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014303:	8b 00                	mov    eax,DWORD PTR [eax]
c0014305:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014308:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001430e:	6a 04                	push   0x4
c0014310:	6a 0f                	push   0xf
c0014312:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014316:	50                   	push   eax
c0014317:	e8 26 39 ff ff       	call   c0007c42 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001431c:	83 c4 10             	add    esp,0x10
c001431f:	90                   	nop
c0014320:	83 c4 0c             	add    esp,0xc
c0014323:	c3                   	ret    

c0014324 <gpFault(regs*, void*)>:
c0014324:	83 ec 1c             	sub    esp,0x1c
c0014327:	c7 05 90 29 02 c0 af 38 01 c0 	mov    DWORD PTR ds:0xc0022990,0xc00138af
c0014331:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c0014336:	85 c0                	test   eax,eax
c0014338:	74 1c                	je     c0014356 <gpFault(regs*, void*)+0x32>
c001433a:	a1 90 29 02 c0       	mov    eax,ds:0xc0022990
c001433f:	83 ec 0c             	sub    esp,0xc
c0014342:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014346:	ff d0                	call   eax
c0014348:	83 c4 10             	add    esp,0x10
c001434b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001434f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014354:	75 2e                	jne    c0014384 <gpFault(regs*, void*)+0x60>
c0014356:	83 ec 0c             	sub    esp,0xc
c0014359:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001435d:	e8 55 fc ff ff       	call   c0013fb7 <displayDebugInfo(regs*)>
c0014362:	83 c4 10             	add    esp,0x10
c0014365:	83 ec 0c             	sub    esp,0xc
c0014368:	68 49 e3 01 c0       	push   0xc001e349
c001436d:	e8 66 ff ff ff       	call   c00142d8 <displayProgramFault(char const*)>
c0014372:	83 c4 10             	add    esp,0x10
c0014375:	83 ec 0c             	sub    esp,0xc
c0014378:	6a 00                	push   0x0
c001437a:	e8 25 ef ff ff       	call   c00132a4 <Thr::terminateFromIRQ(int)>
c001437f:	83 c4 10             	add    esp,0x10
c0014382:	eb 01                	jmp    c0014385 <gpFault(regs*, void*)+0x61>
c0014384:	90                   	nop
c0014385:	83 c4 1c             	add    esp,0x1c
c0014388:	c3                   	ret    

c0014389 <pgFault(regs*, void*)>:
c0014389:	83 ec 1c             	sub    esp,0x1c
c001438c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014390:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014393:	0f 20 d0             	mov    eax,cr2
c0014396:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001439a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001439e:	83 ec 04             	sub    esp,0x4
c00143a1:	52                   	push   edx
c00143a2:	50                   	push   eax
c00143a3:	68 b4 e3 01 c0       	push   0xc001e3b4
c00143a8:	e8 43 55 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c00143ad:	83 c4 10             	add    esp,0x10
c00143b0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00143b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00143b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143ba:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00143c0:	0f 20 d2             	mov    edx,cr2
c00143c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00143c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143cb:	83 ec 08             	sub    esp,0x8
c00143ce:	52                   	push   edx
c00143cf:	50                   	push   eax
c00143d0:	e8 4d 51 ff ff       	call   c0009522 <VAS::tryLoadBackOffDisk(unsigned long)>
c00143d5:	83 c4 10             	add    esp,0x10
c00143d8:	84 c0                	test   al,al
c00143da:	75 2e                	jne    c001440a <pgFault(regs*, void*)+0x81>
c00143dc:	83 ec 0c             	sub    esp,0xc
c00143df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143e3:	e8 cf fb ff ff       	call   c0013fb7 <displayDebugInfo(regs*)>
c00143e8:	83 c4 10             	add    esp,0x10
c00143eb:	83 ec 0c             	sub    esp,0xc
c00143ee:	68 62 e3 01 c0       	push   0xc001e362
c00143f3:	e8 e0 fe ff ff       	call   c00142d8 <displayProgramFault(char const*)>
c00143f8:	83 c4 10             	add    esp,0x10
c00143fb:	83 ec 0c             	sub    esp,0xc
c00143fe:	6a 00                	push   0x0
c0014400:	e8 9f ee ff ff       	call   c00132a4 <Thr::terminateFromIRQ(int)>
c0014405:	83 c4 10             	add    esp,0x10
c0014408:	eb 01                	jmp    c001440b <pgFault(regs*, void*)+0x82>
c001440a:	90                   	nop
c001440b:	83 c4 1c             	add    esp,0x1c
c001440e:	c3                   	ret    

c001440f <otherISRHandler(regs*, void*)>:
c001440f:	83 ec 0c             	sub    esp,0xc
c0014412:	83 ec 0c             	sub    esp,0xc
c0014415:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014419:	e8 99 fb ff ff       	call   c0013fb7 <displayDebugInfo(regs*)>
c001441e:	83 c4 10             	add    esp,0x10
c0014421:	83 ec 0c             	sub    esp,0xc
c0014424:	68 dc e3 01 c0       	push   0xc001e3dc
c0014429:	e8 aa fe ff ff       	call   c00142d8 <displayProgramFault(char const*)>
c001442e:	83 c4 10             	add    esp,0x10
c0014431:	83 ec 0c             	sub    esp,0xc
c0014434:	6a 00                	push   0x0
c0014436:	e8 69 ee ff ff       	call   c00132a4 <Thr::terminateFromIRQ(int)>
c001443b:	83 c4 10             	add    esp,0x10
c001443e:	90                   	nop
c001443f:	83 c4 0c             	add    esp,0xc
c0014442:	c3                   	ret    

c0014443 <opcodeFault(regs*, void*)>:
c0014443:	55                   	push   ebp
c0014444:	89 e5                	mov    ebp,esp
c0014446:	83 ec 08             	sub    esp,0x8
c0014449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001444c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001444f:	83 ec 08             	sub    esp,0x8
c0014452:	50                   	push   eax
c0014453:	68 6d e3 01 c0       	push   0xc001e36d
c0014458:	e8 93 54 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001445d:	83 c4 10             	add    esp,0x10
c0014460:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0014465:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001446b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0014471:	84 c0                	test   al,al
c0014473:	74 21                	je     c0014496 <opcodeFault(regs*, void*)+0x53>
c0014475:	83 ec 0c             	sub    esp,0xc
c0014478:	68 04 e4 01 c0       	push   0xc001e404
c001447d:	e8 6e 54 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0014482:	83 c4 10             	add    esp,0x10
c0014485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014488:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001448b:	8d 50 19             	lea    edx,[eax+0x19]
c001448e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014491:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014494:	eb 2b                	jmp    c00144c1 <opcodeFault(regs*, void*)+0x7e>
c0014496:	83 ec 0c             	sub    esp,0xc
c0014499:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001449c:	e8 16 fb ff ff       	call   c0013fb7 <displayDebugInfo(regs*)>
c00144a1:	83 c4 10             	add    esp,0x10
c00144a4:	83 ec 0c             	sub    esp,0xc
c00144a7:	68 7b e3 01 c0       	push   0xc001e37b
c00144ac:	e8 27 fe ff ff       	call   c00142d8 <displayProgramFault(char const*)>
c00144b1:	83 c4 10             	add    esp,0x10
c00144b4:	83 ec 0c             	sub    esp,0xc
c00144b7:	6a 00                	push   0x0
c00144b9:	e8 e6 ed ff ff       	call   c00132a4 <Thr::terminateFromIRQ(int)>
c00144be:	83 c4 10             	add    esp,0x10
c00144c1:	c9                   	leave  
c00144c2:	c3                   	ret    

c00144c3 <i386SaveCoprocessor(void*)>:
c00144c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144c7:	83 c0 3f             	add    eax,0x3f
c00144ca:	83 e0 c0             	and    eax,0xffffffc0
c00144cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00144d1:	ff 25 8c 29 02 c0    	jmp    DWORD PTR ds:0xc002298c

c00144d7 <i386LoadCoprocessor(void*)>:
c00144d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144db:	83 c0 3f             	add    eax,0x3f
c00144de:	83 e0 c0             	and    eax,0xffffffc0
c00144e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00144e5:	ff 25 88 29 02 c0    	jmp    DWORD PTR ds:0xc0022988

c00144eb <x87EmulHandler(regs*, void*)>:
c00144eb:	53                   	push   ebx
c00144ec:	83 ec 08             	sub    esp,0x8
c00144ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144f4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00144f8:	74 10                	je     c001450a <x87EmulHandler(regs*, void*)+0x1f>
c00144fa:	83 ec 0c             	sub    esp,0xc
c00144fd:	68 88 e3 01 c0       	push   0xc001e388
c0014502:	e8 38 af ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0014507:	83 c4 10             	add    esp,0x10
c001450a:	0f 20 c0             	mov    eax,cr0
c001450d:	a8 08                	test   al,0x8
c001450f:	74 59                	je     c001456a <x87EmulHandler(regs*, void*)+0x7f>
c0014511:	0f 06                	clts   
c0014513:	a1 84 29 02 c0       	mov    eax,ds:0xc0022984
c0014518:	85 c0                	test   eax,eax
c001451a:	74 0e                	je     c001452a <x87EmulHandler(regs*, void*)+0x3f>
c001451c:	83 ec 0c             	sub    esp,0xc
c001451f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014522:	e8 9c ff ff ff       	call   c00144c3 <i386SaveCoprocessor(void*)>
c0014527:	83 c4 10             	add    esp,0x10
c001452a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0014530:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0014534:	75 12                	jne    c0014548 <x87EmulHandler(regs*, void*)+0x5d>
c0014536:	83 ec 0c             	sub    esp,0xc
c0014539:	68 40 02 00 00       	push   0x240
c001453e:	e8 1e 26 ff ff       	call   c0006b61 <malloc>
c0014543:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0014546:	eb 10                	jmp    c0014558 <x87EmulHandler(regs*, void*)+0x6d>
c0014548:	83 ec 0c             	sub    esp,0xc
c001454b:	a1 84 29 02 c0       	mov    eax,ds:0xc0022984
c0014550:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014553:	e8 7f ff ff ff       	call   c00144d7 <i386LoadCoprocessor(void*)>
c0014558:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001455d:	83 c4 10             	add    esp,0x10
c0014560:	a3 84 29 02 c0       	mov    ds:0xc0022984,eax
c0014565:	83 c4 08             	add    esp,0x8
c0014568:	5b                   	pop    ebx
c0014569:	c3                   	ret    
c001456a:	83 ec 0c             	sub    esp,0xc
c001456d:	68 9c e3 01 c0       	push   0xc001e39c
c0014572:	e8 79 53 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0014577:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001457f:	83 c4 18             	add    esp,0x18
c0014582:	5b                   	pop    ebx
c0014583:	e9 1c ed ff ff       	jmp    c00132a4 <Thr::terminateFromIRQ(int)>

c0014588 <HalInitialiseCoprocessor()>:
c0014588:	83 ec 10             	sub    esp,0x10
c001458b:	c7 05 84 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022984,0x0
c0014595:	6a 00                	push   0x0
c0014597:	68 eb 44 01 c0       	push   0xc00144eb
c001459c:	6a 07                	push   0x7
c001459e:	e8 c1 6c ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00145a3:	e8 b8 6a 00 00       	call   c001b060 <avxDetect>
c00145a8:	83 c4 10             	add    esp,0x10
c00145ab:	85 c0                	test   eax,eax
c00145ad:	74 1c                	je     c00145cb <HalInitialiseCoprocessor()+0x43>
c00145af:	c7 05 8c 29 02 c0 8a b0 01 c0 	mov    DWORD PTR ds:0xc002298c,0xc001b08a
c00145b9:	c7 05 88 29 02 c0 9b b0 01 c0 	mov    DWORD PTR ds:0xc0022988,0xc001b09b
c00145c3:	83 c4 0c             	add    esp,0xc
c00145c6:	e9 e1 6a 00 00       	jmp    c001b0ac <avxInit>
c00145cb:	e8 10 6d 00 00       	call   c001b2e0 <absolutelyNoChanceInHell>
c00145d0:	85 c0                	test   eax,eax
c00145d2:	74 1c                	je     c00145f0 <HalInitialiseCoprocessor()+0x68>
c00145d4:	c7 05 8c 29 02 c0 f8 b2 01 c0 	mov    DWORD PTR ds:0xc002298c,0xc001b2f8
c00145de:	c7 05 88 29 02 c0 00 b3 01 c0 	mov    DWORD PTR ds:0xc0022988,0xc001b300
c00145e8:	83 c4 0c             	add    esp,0xc
c00145eb:	e9 18 6d 00 00       	jmp    c001b308 <sseInit>
c00145f0:	e8 31 6d 00 00       	call   c001b326 <x87Detect>
c00145f5:	85 c0                	test   eax,eax
c00145f7:	74 1c                	je     c0014615 <HalInitialiseCoprocessor()+0x8d>
c00145f9:	c7 05 8c 29 02 c0 41 b3 01 c0 	mov    DWORD PTR ds:0xc002298c,0xc001b341
c0014603:	c7 05 88 29 02 c0 48 b3 01 c0 	mov    DWORD PTR ds:0xc0022988,0xc001b348
c001460d:	83 c4 0c             	add    esp,0xc
c0014610:	e9 3a 6d 00 00       	jmp    c001b34f <x87Init>
c0014615:	c7 05 8c 29 02 c0 84 3f 01 c0 	mov    DWORD PTR ds:0xc002298c,0xc0013f84
c001461f:	c7 05 88 29 02 c0 84 3f 01 c0 	mov    DWORD PTR ds:0xc0022988,0xc0013f84
c0014629:	0f 20 c0             	mov    eax,cr0
c001462c:	83 c8 04             	or     eax,0x4
c001462f:	0f 22 c0             	mov    cr0,eax
c0014632:	83 c4 0c             	add    esp,0xc
c0014635:	c3                   	ret    

c0014636 <HalPanic(char const*)>:
c0014636:	e9 04 ae ff ff       	jmp    c000f43f <Krnl::panic(char const*)>

c001463b <HalQueryPerformanceCounter()>:
c001463b:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0014640:	31 d2                	xor    edx,edx
c0014642:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0014648:	31 c0                	xor    eax,eax
c001464a:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0014651:	74 02                	je     c0014655 <HalQueryPerformanceCounter()+0x1a>
c0014653:	0f 31                	rdtsc  
c0014655:	c3                   	ret    

c0014656 <HalInitialise()>:
c0014656:	53                   	push   ebx
c0014657:	83 ec 08             	sub    esp,0x8
c001465a:	e8 38 6e ff ff       	call   c000b497 <setupINTS()>
c001465f:	80 3d e0 1c 02 c0 00 	cmp    BYTE PTR ds:0xc0021ce0,0x0
c0014666:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c001466b:	75 07                	jne    c0014674 <HalInitialise()+0x1e>
c001466d:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0014674:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001467a:	83 e0 01             	and    eax,0x1
c001467d:	a2 80 29 02 c0       	mov    ds:0xc0022980,al
c0014682:	e8 a9 02 00 00       	call   c0014930 <picOpen()>
c0014687:	80 3d 80 29 02 c0 00 	cmp    BYTE PTR ds:0xc0022980,0x0
c001468e:	74 0a                	je     c001469a <HalInitialise()+0x44>
c0014690:	e8 e3 01 00 00       	call   c0014878 <picDisable()>
c0014695:	e8 3a 63 00 00       	call   c001a9d4 <apicOpen()>
c001469a:	bb 0f 00 00 00       	mov    ebx,0xf
c001469f:	50                   	push   eax
c00146a0:	6a 00                	push   0x0
c00146a2:	68 0f 44 01 c0       	push   0xc001440f
c00146a7:	6a 00                	push   0x0
c00146a9:	e8 b6 6b ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00146ae:	83 c4 0c             	add    esp,0xc
c00146b1:	6a 00                	push   0x0
c00146b3:	68 0f 44 01 c0       	push   0xc001440f
c00146b8:	6a 01                	push   0x1
c00146ba:	e8 a5 6b ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00146bf:	83 c4 0c             	add    esp,0xc
c00146c2:	6a 00                	push   0x0
c00146c4:	68 85 3f 01 c0       	push   0xc0013f85
c00146c9:	6a 02                	push   0x2
c00146cb:	e8 94 6b ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00146d0:	83 c4 0c             	add    esp,0xc
c00146d3:	6a 00                	push   0x0
c00146d5:	68 0f 44 01 c0       	push   0xc001440f
c00146da:	6a 03                	push   0x3
c00146dc:	e8 83 6b ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00146e1:	83 c4 0c             	add    esp,0xc
c00146e4:	6a 00                	push   0x0
c00146e6:	68 0f 44 01 c0       	push   0xc001440f
c00146eb:	6a 04                	push   0x4
c00146ed:	e8 72 6b ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00146f2:	83 c4 0c             	add    esp,0xc
c00146f5:	6a 00                	push   0x0
c00146f7:	68 0f 44 01 c0       	push   0xc001440f
c00146fc:	6a 05                	push   0x5
c00146fe:	e8 61 6b ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014703:	83 c4 0c             	add    esp,0xc
c0014706:	6a 00                	push   0x0
c0014708:	68 43 44 01 c0       	push   0xc0014443
c001470d:	6a 06                	push   0x6
c001470f:	e8 50 6b ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014714:	83 c4 0c             	add    esp,0xc
c0014717:	6a 00                	push   0x0
c0014719:	68 9e 3f 01 c0       	push   0xc0013f9e
c001471e:	6a 08                	push   0x8
c0014720:	e8 3f 6b ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014725:	83 c4 0c             	add    esp,0xc
c0014728:	6a 00                	push   0x0
c001472a:	68 0f 44 01 c0       	push   0xc001440f
c001472f:	6a 09                	push   0x9
c0014731:	e8 2e 6b ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014736:	83 c4 0c             	add    esp,0xc
c0014739:	6a 00                	push   0x0
c001473b:	68 0f 44 01 c0       	push   0xc001440f
c0014740:	6a 0a                	push   0xa
c0014742:	e8 1d 6b ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014747:	83 c4 0c             	add    esp,0xc
c001474a:	6a 00                	push   0x0
c001474c:	68 0f 44 01 c0       	push   0xc001440f
c0014751:	6a 0b                	push   0xb
c0014753:	e8 0c 6b ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014758:	83 c4 0c             	add    esp,0xc
c001475b:	6a 00                	push   0x0
c001475d:	68 24 43 01 c0       	push   0xc0014324
c0014762:	6a 0d                	push   0xd
c0014764:	e8 fb 6a ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014769:	83 c4 0c             	add    esp,0xc
c001476c:	6a 00                	push   0x0
c001476e:	68 89 43 01 c0       	push   0xc0014389
c0014773:	6a 0e                	push   0xe
c0014775:	e8 ea 6a ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001477a:	83 c4 10             	add    esp,0x10
c001477d:	50                   	push   eax
c001477e:	6a 00                	push   0x0
c0014780:	68 0f 44 01 c0       	push   0xc001440f
c0014785:	53                   	push   ebx
c0014786:	43                   	inc    ebx
c0014787:	e8 d8 6a ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001478c:	83 c4 10             	add    esp,0x10
c001478f:	83 fb 1e             	cmp    ebx,0x1e
c0014792:	75 e9                	jne    c001477d <HalInitialise()+0x127>
c0014794:	50                   	push   eax
c0014795:	6a 00                	push   0x0
c0014797:	68 02 0f 01 c0       	push   0xc0010f02
c001479c:	6a 60                	push   0x60
c001479e:	e8 c1 6a ff ff       	call   c000b264 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00147a3:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00147a8:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00147b2:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00147b9:	e8 a3 23 ff ff       	call   c0006b61 <malloc>
c00147be:	89 04 24             	mov    DWORD PTR [esp],eax
c00147c1:	89 c3                	mov    ebx,eax
c00147c3:	e8 30 09 00 00       	call   c00150f8 <RTC::RTC()>
c00147c8:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00147d2:	5a                   	pop    edx
c00147d3:	59                   	pop    ecx
c00147d4:	53                   	push   ebx
c00147d5:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c00147db:	e8 50 65 ff ff       	call   c000ad30 <Device::addChild(Device*)>
c00147e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147e2:	6a 00                	push   0x0
c00147e4:	6a 00                	push   0x0
c00147e6:	6a 00                	push   0x0
c00147e8:	53                   	push   ebx
c00147e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00147ec:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00147f1:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00147f7:	83 c4 28             	add    esp,0x28
c00147fa:	5b                   	pop    ebx
c00147fb:	c3                   	ret    

c00147fc <HalMakeBeep(int)>:
c00147fc:	53                   	push   ebx
c00147fd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014801:	85 db                	test   ebx,ebx
c0014803:	75 07                	jne    c001480c <HalMakeBeep(int)+0x10>
c0014805:	e4 61                	in     al,0x61
c0014807:	83 e0 fc             	and    eax,0xfffffffc
c001480a:	eb 26                	jmp    c0014832 <HalMakeBeep(int)+0x36>
c001480c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0014811:	99                   	cdq    
c0014812:	f7 fb                	idiv   ebx
c0014814:	89 c1                	mov    ecx,eax
c0014816:	b0 b6                	mov    al,0xb6
c0014818:	e6 43                	out    0x43,al
c001481a:	88 c8                	mov    al,cl
c001481c:	e6 42                	out    0x42,al
c001481e:	89 c8                	mov    eax,ecx
c0014820:	c1 e8 08             	shr    eax,0x8
c0014823:	e6 42                	out    0x42,al
c0014825:	e4 61                	in     al,0x61
c0014827:	88 c2                	mov    dl,al
c0014829:	83 ca 03             	or     edx,0x3
c001482c:	38 c2                	cmp    dl,al
c001482e:	74 04                	je     c0014834 <HalMakeBeep(int)+0x38>
c0014830:	88 d0                	mov    al,dl
c0014832:	e6 61                	out    0x61,al
c0014834:	5b                   	pop    ebx
c0014835:	c3                   	ret    

c0014836 <HalGetRand()>:
c0014836:	31 c0                	xor    eax,eax
c0014838:	c3                   	ret    

c0014839 <HalEndOfInterrupt(int)>:
c0014839:	80 3d 80 29 02 c0 00 	cmp    BYTE PTR ds:0xc0022980,0x0
c0014840:	74 23                	je     c0014865 <HalEndOfInterrupt(int)+0x2c>
c0014842:	83 ec 14             	sub    esp,0x14
c0014845:	6a 1b                	push   0x1b
c0014847:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c001484d:	e8 08 19 ff ff       	call   c000615a <Computer::rdmsr(unsigned int)>
c0014852:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014857:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0014861:	83 c4 1c             	add    esp,0x1c
c0014864:	c3                   	ret    
c0014865:	e9 56 02 00 00       	jmp    c0014ac0 <picEOI(int)>

c001486a <HalRestart()>:
c001486a:	c3                   	ret    

c001486b <HalShutdown()>:
c001486b:	c3                   	ret    

c001486c <HalSleep()>:
c001486c:	c3                   	ret    
c001486d:	66 90                	xchg   ax,ax
c001486f:	90                   	nop

c0014870 <picIoWait()>:
c0014870:	eb 00                	jmp    c0014872 <picIoWait()+0x2>
c0014872:	eb 00                	jmp    c0014874 <picIoWait()+0x4>
c0014874:	90                   	nop
c0014875:	c3                   	ret    
c0014876:	66 90                	xchg   ax,ax

c0014878 <picDisable()>:
c0014878:	83 ec 10             	sub    esp,0x10
c001487b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0014882:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0014887:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001488b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0014890:	ee                   	out    dx,al
c0014891:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0014898:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001489d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00148a1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00148a6:	ee                   	out    dx,al
c00148a7:	90                   	nop
c00148a8:	83 c4 10             	add    esp,0x10
c00148ab:	c3                   	ret    

c00148ac <picGetIRQReg(int)>:
c00148ac:	83 ec 10             	sub    esp,0x10
c00148af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00148b3:	25 ff 00 00 00       	and    eax,0xff
c00148b8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00148bf:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00148c3:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00148c7:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00148cc:	ee                   	out    dx,al
c00148cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00148d1:	25 ff 00 00 00       	and    eax,0xff
c00148d6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00148dd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00148e1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00148e5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00148ea:	ee                   	out    dx,al
c00148eb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00148f2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00148f7:	89 c2                	mov    edx,eax
c00148f9:	ec                   	in     al,dx
c00148fa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00148fe:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0014902:	25 ff 00 00 00       	and    eax,0xff
c0014907:	c1 e0 08             	shl    eax,0x8
c001490a:	89 c1                	mov    ecx,eax
c001490c:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0014913:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0014918:	89 c2                	mov    edx,eax
c001491a:	ec                   	in     al,dx
c001491b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001491f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0014923:	25 ff 00 00 00       	and    eax,0xff
c0014928:	09 c8                	or     eax,ecx
c001492a:	83 c4 10             	add    esp,0x10
c001492d:	c3                   	ret    
c001492e:	66 90                	xchg   ax,ax

c0014930 <picOpen()>:
c0014930:	83 ec 50             	sub    esp,0x50
c0014933:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001493a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001493f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014943:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014947:	ee                   	out    dx,al
c0014948:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001494f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0014954:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0014958:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001495c:	ee                   	out    dx,al
c001495d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0014965:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001496d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0014974:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014978:	89 c2                	mov    edx,eax
c001497a:	ec                   	in     al,dx
c001497b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001497f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014983:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014987:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001498e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014992:	89 c2                	mov    edx,eax
c0014994:	ec                   	in     al,dx
c0014995:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0014999:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001499d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00149a1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00149a8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00149ad:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00149b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149b5:	ee                   	out    dx,al
c00149b6:	e8 b5 fe ff ff       	call   c0014870 <picIoWait()>
c00149bb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00149c2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00149c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00149cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00149cf:	ee                   	out    dx,al
c00149d0:	e8 9b fe ff ff       	call   c0014870 <picIoWait()>
c00149d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00149d9:	25 ff 00 00 00       	and    eax,0xff
c00149de:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00149e5:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00149e9:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00149ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00149f1:	ee                   	out    dx,al
c00149f2:	e8 79 fe ff ff       	call   c0014870 <picIoWait()>
c00149f7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00149fb:	25 ff 00 00 00       	and    eax,0xff
c0014a00:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0014a07:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014a0b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0014a0f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014a13:	ee                   	out    dx,al
c0014a14:	e8 57 fe ff ff       	call   c0014870 <picIoWait()>
c0014a19:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0014a20:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0014a25:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0014a29:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014a2d:	ee                   	out    dx,al
c0014a2e:	e8 3d fe ff ff       	call   c0014870 <picIoWait()>
c0014a33:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0014a3a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0014a3f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014a43:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a47:	ee                   	out    dx,al
c0014a48:	e8 23 fe ff ff       	call   c0014870 <picIoWait()>
c0014a4d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0014a54:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0014a59:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014a5d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0014a61:	ee                   	out    dx,al
c0014a62:	e8 09 fe ff ff       	call   c0014870 <picIoWait()>
c0014a67:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0014a6e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0014a73:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014a77:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014a7b:	ee                   	out    dx,al
c0014a7c:	e8 ef fd ff ff       	call   c0014870 <picIoWait()>
c0014a81:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0014a85:	25 ff 00 00 00       	and    eax,0xff
c0014a8a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0014a91:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0014a95:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0014a99:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014a9d:	ee                   	out    dx,al
c0014a9e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0014aa2:	25 ff 00 00 00       	and    eax,0xff
c0014aa7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0014aae:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014ab2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0014ab6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0014aba:	ee                   	out    dx,al
c0014abb:	90                   	nop
c0014abc:	83 c4 50             	add    esp,0x50
c0014abf:	c3                   	ret    

c0014ac0 <picEOI(int)>:
c0014ac0:	83 ec 10             	sub    esp,0x10
c0014ac3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0014ac8:	75 22                	jne    c0014aec <picEOI(int)+0x2c>
c0014aca:	6a 0b                	push   0xb
c0014acc:	e8 db fd ff ff       	call   c00148ac <picGetIRQReg(int)>
c0014ad1:	83 c4 04             	add    esp,0x4
c0014ad4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014ad9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0014ade:	25 ff ff 00 00       	and    eax,0xffff
c0014ae3:	25 80 00 00 00       	and    eax,0x80
c0014ae8:	74 72                	je     c0014b5c <picEOI(int)+0x9c>
c0014aea:	66 90                	xchg   ax,ax
c0014aec:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014af1:	75 31                	jne    c0014b24 <picEOI(int)+0x64>
c0014af3:	6a 0b                	push   0xb
c0014af5:	e8 b2 fd ff ff       	call   c00148ac <picGetIRQReg(int)>
c0014afa:	83 c4 04             	add    esp,0x4
c0014afd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014b02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b06:	66 85 c0             	test   ax,ax
c0014b09:	78 19                	js     c0014b24 <picEOI(int)+0x64>
c0014b0b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0014b12:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0014b17:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0014b1b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0014b20:	ee                   	out    dx,al
c0014b21:	eb 3d                	jmp    c0014b60 <picEOI(int)+0xa0>
c0014b23:	90                   	nop
c0014b24:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0014b29:	7e 19                	jle    c0014b44 <picEOI(int)+0x84>
c0014b2b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0014b32:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0014b37:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0014b3b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0014b40:	ee                   	out    dx,al
c0014b41:	8d 76 00             	lea    esi,[esi+0x0]
c0014b44:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0014b4b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0014b50:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0014b54:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0014b59:	ee                   	out    dx,al
c0014b5a:	eb 04                	jmp    c0014b60 <picEOI(int)+0xa0>
c0014b5c:	90                   	nop
c0014b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0014b60:	83 c4 10             	add    esp,0x10
c0014b63:	c3                   	ret    

c0014b64 <RTC::open(int, int, void*)>:
c0014b64:	31 c0                	xor    eax,eax
c0014b66:	c3                   	ret    
c0014b67:	90                   	nop

c0014b68 <RTC::close(int, int, void*)>:
c0014b68:	31 c0                	xor    eax,eax
c0014b6a:	c3                   	ret    
c0014b6b:	90                   	nop

c0014b6c <RTC::timeInSecondsUTC()>:
c0014b6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b70:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0014b76:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014b7c:	c3                   	ret    
c0014b7d:	90                   	nop

c0014b7e <RTC::timeInDatetimeUTC()>:
c0014b7e:	53                   	push   ebx
c0014b7f:	83 ec 14             	sub    esp,0x14
c0014b82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014b86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0014b8c:	50                   	push   eax
c0014b8d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0014b90:	83 c4 0c             	add    esp,0xc
c0014b93:	52                   	push   edx
c0014b94:	50                   	push   eax
c0014b95:	53                   	push   ebx
c0014b96:	e8 09 5f ff ff       	call   c000aaa4 <secondsToDatetime(unsigned long long)>
c0014b9b:	89 d8                	mov    eax,ebx
c0014b9d:	83 c4 14             	add    esp,0x14
c0014ba0:	5b                   	pop    ebx
c0014ba1:	c2 04 00             	ret    0x4

c0014ba4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0014ba4:	56                   	push   esi
c0014ba5:	53                   	push   ebx
c0014ba6:	83 ec 14             	sub    esp,0x14
c0014ba9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014bad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014baf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0014bb2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014bb6:	52                   	push   edx
c0014bb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bbf:	50                   	push   eax
c0014bc0:	e8 df 5e ff ff       	call   c000aaa4 <secondsToDatetime(unsigned long long)>
c0014bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bc9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014bcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014bd1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0014bd5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014bd9:	89 f0                	mov    eax,esi
c0014bdb:	83 c4 20             	add    esp,0x20
c0014bde:	5b                   	pop    ebx
c0014bdf:	5e                   	pop    esi
c0014be0:	ff e0                	jmp    eax

c0014be2 <RTC::~RTC()>:
c0014be2:	83 ec 0c             	sub    esp,0xc
c0014be5:	ba 44 e4 01 c0       	mov    edx,0xc001e444
c0014bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bee:	89 10                	mov    DWORD PTR [eax],edx
c0014bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bf4:	83 ec 0c             	sub    esp,0xc
c0014bf7:	50                   	push   eax
c0014bf8:	e8 2b 5c ff ff       	call   c000a828 <Clock::~Clock()>
c0014bfd:	83 c4 10             	add    esp,0x10
c0014c00:	90                   	nop
c0014c01:	83 c4 0c             	add    esp,0xc
c0014c04:	c3                   	ret    
c0014c05:	90                   	nop

c0014c06 <RTC::~RTC()>:
c0014c06:	83 ec 0c             	sub    esp,0xc
c0014c09:	83 ec 0c             	sub    esp,0xc
c0014c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c10:	e8 cd ff ff ff       	call   c0014be2 <RTC::~RTC()>
c0014c15:	83 c4 10             	add    esp,0x10
c0014c18:	83 ec 08             	sub    esp,0x8
c0014c1b:	68 60 01 00 00       	push   0x160
c0014c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c24:	e8 d1 4b ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c0014c29:	83 c4 10             	add    esp,0x10
c0014c2c:	83 c4 0c             	add    esp,0xc
c0014c2f:	c3                   	ret    

c0014c30 <RTC::get_update_in_progress_flag()>:
c0014c30:	83 ec 14             	sub    esp,0x14
c0014c33:	6a 0a                	push   0xa
c0014c35:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014c3b:	e8 ce 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014c40:	83 c4 1c             	add    esp,0x1c
c0014c43:	c0 e8 07             	shr    al,0x7
c0014c46:	c3                   	ret    
c0014c47:	90                   	nop

c0014c48 <RTC::completeRTCRefresh()>:
c0014c48:	55                   	push   ebp
c0014c49:	57                   	push   edi
c0014c4a:	56                   	push   esi
c0014c4b:	53                   	push   ebx
c0014c4c:	83 ec 2c             	sub    esp,0x2c
c0014c4f:	8b 1d ec 19 02 c0    	mov    ebx,DWORD PTR ds:0xc00219ec
c0014c55:	83 ec 0c             	sub    esp,0xc
c0014c58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014c5c:	e8 cf ff ff ff       	call   c0014c30 <RTC::get_update_in_progress_flag()>
c0014c61:	83 c4 10             	add    esp,0x10
c0014c64:	84 c0                	test   al,al
c0014c66:	74 0e                	je     c0014c76 <RTC::completeRTCRefresh()+0x2e>
c0014c68:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0014c6e:	3b 05 ec 19 02 c0    	cmp    eax,DWORD PTR ds:0xc00219ec
c0014c74:	73 df                	jae    c0014c55 <RTC::completeRTCRefresh()+0xd>
c0014c76:	55                   	push   ebp
c0014c77:	55                   	push   ebp
c0014c78:	6a 00                	push   0x0
c0014c7a:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014c80:	e8 89 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014c85:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014c89:	58                   	pop    eax
c0014c8a:	5a                   	pop    edx
c0014c8b:	6a 02                	push   0x2
c0014c8d:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014c93:	e8 76 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014c98:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0014c9c:	59                   	pop    ecx
c0014c9d:	5b                   	pop    ebx
c0014c9e:	6a 04                	push   0x4
c0014ca0:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014ca6:	e8 63 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014cab:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0014caf:	5e                   	pop    esi
c0014cb0:	5f                   	pop    edi
c0014cb1:	6a 07                	push   0x7
c0014cb3:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014cb9:	e8 50 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014cbe:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0014cc2:	5d                   	pop    ebp
c0014cc3:	58                   	pop    eax
c0014cc4:	6a 08                	push   0x8
c0014cc6:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014ccc:	e8 3d 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014cd1:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0014cd5:	58                   	pop    eax
c0014cd6:	5a                   	pop    edx
c0014cd7:	6a 09                	push   0x9
c0014cd9:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014cdf:	e8 2a 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014ce4:	83 c4 10             	add    esp,0x10
c0014ce7:	0f b6 e8             	movzx  ebp,al
c0014cea:	8b 1d ec 19 02 c0    	mov    ebx,DWORD PTR ds:0xc00219ec
c0014cf0:	83 ec 0c             	sub    esp,0xc
c0014cf3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014cf7:	e8 34 ff ff ff       	call   c0014c30 <RTC::get_update_in_progress_flag()>
c0014cfc:	83 c4 10             	add    esp,0x10
c0014cff:	84 c0                	test   al,al
c0014d01:	74 0e                	je     c0014d11 <RTC::completeRTCRefresh()+0xc9>
c0014d03:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0014d09:	3b 05 ec 19 02 c0    	cmp    eax,DWORD PTR ds:0xc00219ec
c0014d0f:	73 df                	jae    c0014cf0 <RTC::completeRTCRefresh()+0xa8>
c0014d11:	50                   	push   eax
c0014d12:	50                   	push   eax
c0014d13:	6a 00                	push   0x0
c0014d15:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014d1b:	e8 ee 14 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014d20:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0014d24:	58                   	pop    eax
c0014d25:	5a                   	pop    edx
c0014d26:	6a 02                	push   0x2
c0014d28:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014d2e:	e8 db 14 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014d33:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014d37:	59                   	pop    ecx
c0014d38:	5b                   	pop    ebx
c0014d39:	6a 04                	push   0x4
c0014d3b:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014d41:	e8 c8 14 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014d46:	5e                   	pop    esi
c0014d47:	88 c3                	mov    bl,al
c0014d49:	5f                   	pop    edi
c0014d4a:	6a 07                	push   0x7
c0014d4c:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014d52:	e8 b7 14 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014d57:	89 c6                	mov    esi,eax
c0014d59:	58                   	pop    eax
c0014d5a:	5a                   	pop    edx
c0014d5b:	6a 08                	push   0x8
c0014d5d:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014d63:	e8 a6 14 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014d68:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0014d6c:	59                   	pop    ecx
c0014d6d:	5f                   	pop    edi
c0014d6e:	6a 09                	push   0x9
c0014d70:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014d76:	e8 93 14 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014d7b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0014d7f:	0f b6 f8             	movzx  edi,al
c0014d82:	83 c4 10             	add    esp,0x10
c0014d85:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0014d89:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014d8d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0014d91:	89 f1                	mov    ecx,esi
c0014d93:	0f 94 c0             	sete   al
c0014d96:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0014d9a:	0f 94 c2             	sete   dl
c0014d9d:	21 d0                	and    eax,edx
c0014d9f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0014da3:	0f 94 c2             	sete   dl
c0014da6:	21 c2                	and    edx,eax
c0014da8:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0014dac:	0f 94 c0             	sete   al
c0014daf:	21 d0                	and    eax,edx
c0014db1:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0014db5:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0014db9:	0f 94 c1             	sete   cl
c0014dbc:	84 c8                	test   al,cl
c0014dbe:	75 29                	jne    c0014de9 <RTC::completeRTCRefresh()+0x1a1>
c0014dc0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014dc4:	89 fd                	mov    ebp,edi
c0014dc6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014dca:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0014dce:	89 f0                	mov    eax,esi
c0014dd0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0014dd4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014dd8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014ddc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014de0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0014de4:	e9 01 ff ff ff       	jmp    c0014cea <RTC::completeRTCRefresh()+0xa2>
c0014de9:	39 fd                	cmp    ebp,edi
c0014deb:	75 d3                	jne    c0014dc0 <RTC::completeRTCRefresh()+0x178>
c0014ded:	55                   	push   ebp
c0014dee:	55                   	push   ebp
c0014def:	6a 0b                	push   0xb
c0014df1:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014df7:	e8 12 14 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014dfc:	83 c4 10             	add    esp,0x10
c0014dff:	89 c5                	mov    ebp,eax
c0014e01:	a8 04                	test   al,0x4
c0014e03:	75 78                	jne    c0014e7d <RTC::completeRTCRefresh()+0x235>
c0014e05:	b1 0a                	mov    cl,0xa
c0014e07:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0014e0b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014e0f:	83 e2 0f             	and    edx,0xf
c0014e12:	c0 e8 04             	shr    al,0x4
c0014e15:	c1 ef 04             	shr    edi,0x4
c0014e18:	f6 e1                	mul    cl
c0014e1a:	6b ff 0a             	imul   edi,edi,0xa
c0014e1d:	01 d0                	add    eax,edx
c0014e1f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014e23:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014e27:	83 e2 0f             	and    edx,0xf
c0014e2a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014e2e:	c0 e8 04             	shr    al,0x4
c0014e31:	f6 e1                	mul    cl
c0014e33:	01 d0                	add    eax,edx
c0014e35:	88 da                	mov    dl,bl
c0014e37:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014e3b:	83 e2 0f             	and    edx,0xf
c0014e3e:	88 d8                	mov    al,bl
c0014e40:	83 e3 80             	and    ebx,0xffffff80
c0014e43:	c0 e8 04             	shr    al,0x4
c0014e46:	83 e0 07             	and    eax,0x7
c0014e49:	f6 e1                	mul    cl
c0014e4b:	01 d0                	add    eax,edx
c0014e4d:	89 f2                	mov    edx,esi
c0014e4f:	09 c3                	or     ebx,eax
c0014e51:	83 e2 0f             	and    edx,0xf
c0014e54:	89 f0                	mov    eax,esi
c0014e56:	c0 e8 04             	shr    al,0x4
c0014e59:	f6 e1                	mul    cl
c0014e5b:	8d 34 02             	lea    esi,[edx+eax*1]
c0014e5e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0014e62:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014e66:	83 e2 0f             	and    edx,0xf
c0014e69:	c0 e8 04             	shr    al,0x4
c0014e6c:	f6 e1                	mul    cl
c0014e6e:	01 d0                	add    eax,edx
c0014e70:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0014e74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e78:	83 e0 0f             	and    eax,0xf
c0014e7b:	01 c7                	add    edi,eax
c0014e7d:	83 e5 02             	and    ebp,0x2
c0014e80:	75 14                	jne    c0014e96 <RTC::completeRTCRefresh()+0x24e>
c0014e82:	84 db                	test   bl,bl
c0014e84:	79 10                	jns    c0014e96 <RTC::completeRTCRefresh()+0x24e>
c0014e86:	83 e3 7f             	and    ebx,0x7f
c0014e89:	b9 18 00 00 00       	mov    ecx,0x18
c0014e8e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0014e91:	99                   	cdq    
c0014e92:	f7 f9                	idiv   ecx
c0014e94:	88 d3                	mov    bl,dl
c0014e96:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0014e9c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0014ea2:	77 06                	ja     c0014eaa <RTC::completeRTCRefresh()+0x262>
c0014ea4:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0014eaa:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0014eaf:	31 d2                	xor    edx,edx
c0014eb1:	c1 e1 10             	shl    ecx,0x10
c0014eb4:	89 d7                	mov    edi,edx
c0014eb6:	c1 e5 10             	shl    ebp,0x10
c0014eb9:	31 c0                	xor    eax,eax
c0014ebb:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0014ec1:	09 cf                	or     edi,ecx
c0014ec3:	89 fa                	mov    edx,edi
c0014ec5:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0014ec9:	88 da                	mov    dl,bl
c0014ecb:	89 f3                	mov    ebx,esi
c0014ecd:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0014ed1:	88 d8                	mov    al,bl
c0014ed3:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0014ed7:	0f b7 c8             	movzx  ecx,ax
c0014eda:	09 e9                	or     ecx,ebp
c0014edc:	89 c8                	mov    eax,ecx
c0014ede:	51                   	push   ecx
c0014edf:	51                   	push   ecx
c0014ee0:	52                   	push   edx
c0014ee1:	50                   	push   eax
c0014ee2:	e8 30 5a ff ff       	call   c000a917 <datetimeToSeconds(datetime_t)>
c0014ee7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0014eeb:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0014ef1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0014ef7:	83 c4 3c             	add    esp,0x3c
c0014efa:	5b                   	pop    ebx
c0014efb:	5e                   	pop    esi
c0014efc:	5f                   	pop    edi
c0014efd:	5d                   	pop    ebp
c0014efe:	c3                   	ret    
c0014eff:	90                   	nop

c0014f00 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0014f00:	55                   	push   ebp
c0014f01:	57                   	push   edi
c0014f02:	56                   	push   esi
c0014f03:	53                   	push   ebx
c0014f04:	83 ec 30             	sub    esp,0x30
c0014f07:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0014f0b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0014f0f:	6a 00                	push   0x0
c0014f11:	6a 00                	push   0x0
c0014f13:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014f19:	e8 06 14 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014f1e:	83 c4 0c             	add    esp,0xc
c0014f21:	6a 00                	push   0x0
c0014f23:	6a 02                	push   0x2
c0014f25:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014f2b:	e8 f4 13 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014f30:	31 d2                	xor    edx,edx
c0014f32:	89 f9                	mov    ecx,edi
c0014f34:	89 f8                	mov    eax,edi
c0014f36:	c1 e9 10             	shr    ecx,0x10
c0014f39:	0f b6 c4             	movzx  eax,ah
c0014f3c:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0014f40:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0014f44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f48:	b9 64 00 00 00       	mov    ecx,0x64
c0014f4d:	89 f0                	mov    eax,esi
c0014f4f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0014f53:	89 f0                	mov    eax,esi
c0014f55:	0f b6 c4             	movzx  eax,ah
c0014f58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014f5c:	89 f0                	mov    eax,esi
c0014f5e:	c1 e8 10             	shr    eax,0x10
c0014f61:	66 f7 f1             	div    cx
c0014f64:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0014f69:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0014f6e:	59                   	pop    ecx
c0014f6f:	5b                   	pop    ebx
c0014f70:	89 fb                	mov    ebx,edi
c0014f72:	6a 0b                	push   0xb
c0014f74:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014f7a:	e8 8f 12 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014f7f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0014f83:	83 c4 10             	add    esp,0x10
c0014f86:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0014f8b:	75 74                	jne    c0015001 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0014f8d:	b2 0a                	mov    dl,0xa
c0014f8f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014f93:	0f b6 c1             	movzx  eax,cl
c0014f96:	f6 f2                	div    dl
c0014f98:	88 c3                	mov    bl,al
c0014f9a:	88 e0                	mov    al,ah
c0014f9c:	c1 e3 04             	shl    ebx,0x4
c0014f9f:	09 c3                	or     ebx,eax
c0014fa1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014fa6:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0014faa:	f6 f2                	div    dl
c0014fac:	88 c1                	mov    cl,al
c0014fae:	88 e0                	mov    al,ah
c0014fb0:	c1 e1 04             	shl    ecx,0x4
c0014fb3:	09 c1                	or     ecx,eax
c0014fb5:	89 f8                	mov    eax,edi
c0014fb7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0014fbb:	0f b6 c0             	movzx  eax,al
c0014fbe:	f6 f2                	div    dl
c0014fc0:	88 c3                	mov    bl,al
c0014fc2:	88 e0                	mov    al,ah
c0014fc4:	c1 e3 04             	shl    ebx,0x4
c0014fc7:	09 c3                	or     ebx,eax
c0014fc9:	89 f0                	mov    eax,esi
c0014fcb:	0f b6 c0             	movzx  eax,al
c0014fce:	f6 f2                	div    dl
c0014fd0:	88 c1                	mov    cl,al
c0014fd2:	88 e0                	mov    al,ah
c0014fd4:	c1 e1 04             	shl    ecx,0x4
c0014fd7:	09 c1                	or     ecx,eax
c0014fd9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014fde:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0014fe2:	f6 f2                	div    dl
c0014fe4:	88 c1                	mov    cl,al
c0014fe6:	88 e0                	mov    al,ah
c0014fe8:	c1 e1 04             	shl    ecx,0x4
c0014feb:	09 c1                	or     ecx,eax
c0014fed:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0014ff2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0014ff6:	f6 f2                	div    dl
c0014ff8:	89 c5                	mov    ebp,eax
c0014ffa:	88 e0                	mov    al,ah
c0014ffc:	c1 e5 04             	shl    ebp,0x4
c0014fff:	09 c5                	or     ebp,eax
c0015001:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015006:	75 17                	jne    c001501f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015008:	80 fb 0b             	cmp    bl,0xb
c001500b:	76 0c                	jbe    c0015019 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c001500d:	80 eb 0c             	sub    bl,0xc
c0015010:	75 02                	jne    c0015014 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015012:	b3 0c                	mov    bl,0xc
c0015014:	83 cb 80             	or     ebx,0xffffff80
c0015017:	eb 06                	jmp    c001501f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015019:	84 db                	test   bl,bl
c001501b:	75 02                	jne    c001501f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001501d:	b3 0c                	mov    bl,0xc
c001501f:	0f b6 db             	movzx  ebx,bl
c0015022:	50                   	push   eax
c0015023:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015028:	50                   	push   eax
c0015029:	6a 00                	push   0x0
c001502b:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0015031:	e8 ee 12 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015036:	83 c4 0c             	add    esp,0xc
c0015039:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001503e:	50                   	push   eax
c001503f:	6a 02                	push   0x2
c0015041:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0015047:	e8 d8 12 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c001504c:	83 c4 0c             	add    esp,0xc
c001504f:	53                   	push   ebx
c0015050:	6a 04                	push   0x4
c0015052:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0015058:	e8 c7 12 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c001505d:	83 c4 0c             	add    esp,0xc
c0015060:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015065:	50                   	push   eax
c0015066:	6a 07                	push   0x7
c0015068:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c001506e:	e8 b1 12 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015073:	83 c4 0c             	add    esp,0xc
c0015076:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001507b:	50                   	push   eax
c001507c:	6a 08                	push   0x8
c001507e:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0015084:	e8 9b 12 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015089:	83 c4 0c             	add    esp,0xc
c001508c:	89 e8                	mov    eax,ebp
c001508e:	0f b6 e8             	movzx  ebp,al
c0015091:	55                   	push   ebp
c0015092:	6a 09                	push   0x9
c0015094:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c001509a:	e8 85 12 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c001509f:	5a                   	pop    edx
c00150a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00150a4:	e8 9f fb ff ff       	call   c0014c48 <RTC::completeRTCRefresh()>
c00150a9:	83 c4 3c             	add    esp,0x3c
c00150ac:	b0 01                	mov    al,0x1
c00150ae:	5b                   	pop    ebx
c00150af:	5e                   	pop    esi
c00150b0:	5f                   	pop    edi
c00150b1:	5d                   	pop    ebp
c00150b2:	c3                   	ret    

c00150b3 <rtcIRQHandler(regs*, void*)>:
c00150b3:	53                   	push   ebx
c00150b4:	83 ec 10             	sub    esp,0x10
c00150b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00150bb:	6a 0c                	push   0xc
c00150bd:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c00150c3:	e8 46 11 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c00150c8:	83 c4 10             	add    esp,0x10
c00150cb:	84 c0                	test   al,al
c00150cd:	79 24                	jns    c00150f3 <rtcIRQHandler(regs*, void*)+0x40>
c00150cf:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00150d6:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00150dd:	66 ff 05 94 29 02 c0 	inc    WORD PTR ds:0xc0022994
c00150e4:	75 0d                	jne    c00150f3 <rtcIRQHandler(regs*, void*)+0x40>
c00150e6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00150ea:	83 c4 08             	add    esp,0x8
c00150ed:	5b                   	pop    ebx
c00150ee:	e9 55 fb ff ff       	jmp    c0014c48 <RTC::completeRTCRefresh()>
c00150f3:	83 c4 08             	add    esp,0x8
c00150f6:	5b                   	pop    ebx
c00150f7:	c3                   	ret    

c00150f8 <RTC::RTC()>:
c00150f8:	83 ec 1c             	sub    esp,0x1c
c00150fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150ff:	83 ec 08             	sub    esp,0x8
c0015102:	68 27 e4 01 c0       	push   0xc001e427
c0015107:	50                   	push   eax
c0015108:	e8 e5 56 ff ff       	call   c000a7f2 <Clock::Clock(char const*)>
c001510d:	83 c4 10             	add    esp,0x10
c0015110:	ba 44 e4 01 c0       	mov    edx,0xc001e444
c0015115:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015119:	89 10                	mov    DWORD PTR [eax],edx
c001511b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001511f:	83 ec 0c             	sub    esp,0xc
c0015122:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015126:	6a 01                	push   0x1
c0015128:	68 b3 50 01 c0       	push   0xc00150b3
c001512d:	6a 08                	push   0x8
c001512f:	50                   	push   eax
c0015130:	e8 a7 5b ff ff       	call   c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015135:	83 c4 20             	add    esp,0x20
c0015138:	89 c2                	mov    edx,eax
c001513a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001513e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015144:	fa                   	cli    
c0015145:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c001514a:	40                   	inc    eax
c001514b:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0015150:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0015155:	83 ec 08             	sub    esp,0x8
c0015158:	6a 0b                	push   0xb
c001515a:	50                   	push   eax
c001515b:	e8 ae 10 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0015160:	83 c4 10             	add    esp,0x10
c0015163:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015167:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c001516c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015170:	83 ca 10             	or     edx,0x10
c0015173:	81 e2 ff 00 00 00    	and    edx,0xff
c0015179:	83 ec 04             	sub    esp,0x4
c001517c:	52                   	push   edx
c001517d:	6a 0b                	push   0xb
c001517f:	50                   	push   eax
c0015180:	e8 9f 11 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015185:	83 c4 10             	add    esp,0x10
c0015188:	83 ec 0c             	sub    esp,0xc
c001518b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001518f:	e8 b4 fa ff ff       	call   c0014c48 <RTC::completeRTCRefresh()>
c0015194:	83 c4 10             	add    esp,0x10
c0015197:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c001519c:	48                   	dec    eax
c001519d:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c00151a2:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c00151a7:	85 c0                	test   eax,eax
c00151a9:	75 01                	jne    c00151ac <RTC::RTC()+0xb4>
c00151ab:	fb                   	sti    
c00151ac:	90                   	nop
c00151ad:	83 c4 1c             	add    esp,0x1c
c00151b0:	c3                   	ret    
c00151b1:	66 90                	xchg   ax,ax
c00151b3:	90                   	nop

c00151b4 <HalConsoleScroll(int, int)>:
c00151b4:	83 ec 10             	sub    esp,0x10
c00151b7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00151bf:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00151c7:	90                   	nop
c00151c8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00151cd:	0f 8f e1 00 00 00    	jg     c00152b4 <HalConsoleScroll(int, int)+0x100>
c00151d3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00151db:	90                   	nop
c00151dc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00151e4:	0f 8f be 00 00 00    	jg     c00152a8 <HalConsoleScroll(int, int)+0xf4>
c00151ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00151ee:	89 d0                	mov    eax,edx
c00151f0:	c1 e0 02             	shl    eax,0x2
c00151f3:	01 d0                	add    eax,edx
c00151f5:	c1 e0 05             	shl    eax,0x5
c00151f8:	89 c2                	mov    edx,eax
c00151fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00151fe:	01 d0                	add    eax,edx
c0015200:	89 c2                	mov    edx,eax
c0015202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015206:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015209:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001520d:	89 d0                	mov    eax,edx
c001520f:	c1 e0 02             	shl    eax,0x2
c0015212:	01 d0                	add    eax,edx
c0015214:	c1 e0 05             	shl    eax,0x5
c0015217:	89 c2                	mov    edx,eax
c0015219:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001521d:	01 d0                	add    eax,edx
c001521f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015229:	01 c2                	add    edx,eax
c001522b:	8a 01                	mov    al,BYTE PTR [ecx]
c001522d:	88 02                	mov    BYTE PTR [edx],al
c001522f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015234:	75 66                	jne    c001529c <HalConsoleScroll(int, int)+0xe8>
c0015236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001523a:	83 e0 01             	and    eax,0x1
c001523d:	74 39                	je     c0015278 <HalConsoleScroll(int, int)+0xc4>
c001523f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015243:	83 e0 0f             	and    eax,0xf
c0015246:	88 c2                	mov    dl,al
c0015248:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001524c:	c1 e0 04             	shl    eax,0x4
c001524f:	88 d1                	mov    cl,dl
c0015251:	09 c1                	or     ecx,eax
c0015253:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015257:	89 d0                	mov    eax,edx
c0015259:	c1 e0 02             	shl    eax,0x2
c001525c:	01 d0                	add    eax,edx
c001525e:	c1 e0 05             	shl    eax,0x5
c0015261:	89 c2                	mov    edx,eax
c0015263:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015267:	01 d0                	add    eax,edx
c0015269:	89 c2                	mov    edx,eax
c001526b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001526f:	01 d0                	add    eax,edx
c0015271:	88 ca                	mov    dl,cl
c0015273:	88 10                	mov    BYTE PTR [eax],dl
c0015275:	eb 25                	jmp    c001529c <HalConsoleScroll(int, int)+0xe8>
c0015277:	90                   	nop
c0015278:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001527c:	89 d0                	mov    eax,edx
c001527e:	c1 e0 02             	shl    eax,0x2
c0015281:	01 d0                	add    eax,edx
c0015283:	c1 e0 05             	shl    eax,0x5
c0015286:	89 c2                	mov    edx,eax
c0015288:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001528c:	01 d0                	add    eax,edx
c001528e:	89 c2                	mov    edx,eax
c0015290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015294:	01 d0                	add    eax,edx
c0015296:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015299:	8d 76 00             	lea    esi,[esi+0x0]
c001529c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00152a0:	e9 37 ff ff ff       	jmp    c00151dc <HalConsoleScroll(int, int)+0x28>
c00152a5:	8d 76 00             	lea    esi,[esi+0x0]
c00152a8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00152ac:	e9 17 ff ff ff       	jmp    c00151c8 <HalConsoleScroll(int, int)+0x14>
c00152b1:	8d 76 00             	lea    esi,[esi+0x0]
c00152b4:	90                   	nop
c00152b5:	83 c4 10             	add    esp,0x10
c00152b8:	c3                   	ret    
c00152b9:	8d 76 00             	lea    esi,[esi+0x0]

c00152bc <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00152bc:	83 ec 14             	sub    esp,0x14
c00152bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152c3:	88 04 24             	mov    BYTE PTR [esp],al
c00152c6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00152c9:	25 ff 00 00 00       	and    eax,0xff
c00152ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00152d2:	89 d1                	mov    ecx,edx
c00152d4:	83 e1 0f             	and    ecx,0xf
c00152d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152db:	c1 e2 04             	shl    edx,0x4
c00152de:	81 e2 ff 00 00 00    	and    edx,0xff
c00152e4:	09 ca                	or     edx,ecx
c00152e6:	c1 e2 08             	shl    edx,0x8
c00152e9:	09 d0                	or     eax,edx
c00152eb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00152f0:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00152f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00152fc:	89 d0                	mov    eax,edx
c00152fe:	c1 e0 02             	shl    eax,0x2
c0015301:	01 d0                	add    eax,edx
c0015303:	c1 e0 04             	shl    eax,0x4
c0015306:	89 c2                	mov    edx,eax
c0015308:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001530c:	01 d0                	add    eax,edx
c001530e:	01 c0                	add    eax,eax
c0015310:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0015314:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015318:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001531d:	66 89 02             	mov    WORD PTR [edx],ax
c0015320:	90                   	nop
c0015321:	83 c4 14             	add    esp,0x14
c0015324:	c3                   	ret    
c0015325:	8d 76 00             	lea    esi,[esi+0x0]

c0015328 <HalConsoleCursorUpdate(int, int)>:
c0015328:	83 ec 20             	sub    esp,0x20
c001532b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001532f:	89 c2                	mov    edx,eax
c0015331:	89 d0                	mov    eax,edx
c0015333:	c1 e0 02             	shl    eax,0x2
c0015336:	01 d0                	add    eax,edx
c0015338:	c1 e0 04             	shl    eax,0x4
c001533b:	89 c2                	mov    edx,eax
c001533d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015341:	01 d0                	add    eax,edx
c0015343:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0015348:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001534f:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0015354:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015358:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001535c:	ee                   	out    dx,al
c001535d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015362:	25 ff 00 00 00       	and    eax,0xff
c0015367:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001536e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0015372:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015376:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001537a:	ee                   	out    dx,al
c001537b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0015382:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0015387:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001538b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001538f:	ee                   	out    dx,al
c0015390:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015395:	66 c1 e8 08          	shr    ax,0x8
c0015399:	25 ff 00 00 00       	and    eax,0xff
c001539e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00153a5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00153a9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00153ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00153b1:	ee                   	out    dx,al
c00153b2:	90                   	nop
c00153b3:	83 c4 20             	add    esp,0x20
c00153b6:	c3                   	ret    
c00153b7:	90                   	nop

c00153b8 <FAT::getName()>:
c00153b8:	b8 78 e4 01 c0       	mov    eax,0xc001e478
c00153bd:	c3                   	ret    
c00153be:	66 90                	xchg   ax,ax

c00153c0 <FAT::tell(void*, unsigned long long*)>:
c00153c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00153c5:	75 09                	jne    c00153d0 <FAT::tell(void*, unsigned long long*)+0x10>
c00153c7:	b8 04 00 00 00       	mov    eax,0x4
c00153cc:	c3                   	ret    
c00153cd:	8d 76 00             	lea    esi,[esi+0x0]
c00153d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00153d5:	75 09                	jne    c00153e0 <FAT::tell(void*, unsigned long long*)+0x20>
c00153d7:	b8 04 00 00 00       	mov    eax,0x4
c00153dc:	c3                   	ret    
c00153dd:	8d 76 00             	lea    esi,[esi+0x0]
c00153e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00153e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00153e7:	ba 00 00 00 00       	mov    edx,0x0
c00153ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00153f0:	89 01                	mov    DWORD PTR [ecx],eax
c00153f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00153f5:	b8 00 00 00 00       	mov    eax,0x0
c00153fa:	c3                   	ret    
c00153fb:	90                   	nop

c00153fc <FAT::stat(void*, unsigned long long*)>:
c00153fc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015401:	75 09                	jne    c001540c <FAT::stat(void*, unsigned long long*)+0x10>
c0015403:	b8 04 00 00 00       	mov    eax,0x4
c0015408:	c3                   	ret    
c0015409:	8d 76 00             	lea    esi,[esi+0x0]
c001540c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015411:	75 09                	jne    c001541c <FAT::stat(void*, unsigned long long*)+0x20>
c0015413:	b8 04 00 00 00       	mov    eax,0x4
c0015418:	c3                   	ret    
c0015419:	8d 76 00             	lea    esi,[esi+0x0]
c001541c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015420:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0015423:	ba 00 00 00 00       	mov    edx,0x0
c0015428:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001542c:	89 01                	mov    DWORD PTR [ecx],eax
c001542e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015431:	b8 00 00 00 00       	mov    eax,0x0
c0015436:	c3                   	ret    
c0015437:	90                   	nop

c0015438 <FAT::~FAT()>:
c0015438:	83 ec 0c             	sub    esp,0xc
c001543b:	ba c4 e4 01 c0       	mov    edx,0xc001e4c4
c0015440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015444:	89 10                	mov    DWORD PTR [eax],edx
c0015446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001544a:	83 ec 0c             	sub    esp,0xc
c001544d:	50                   	push   eax
c001544e:	e8 e3 47 ff ff       	call   c0009c36 <Filesystem::~Filesystem()>
c0015453:	83 c4 10             	add    esp,0x10
c0015456:	90                   	nop
c0015457:	83 c4 0c             	add    esp,0xc
c001545a:	c3                   	ret    
c001545b:	90                   	nop

c001545c <FAT::~FAT()>:
c001545c:	83 ec 0c             	sub    esp,0xc
c001545f:	83 ec 0c             	sub    esp,0xc
c0015462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015466:	e8 cd ff ff ff       	call   c0015438 <FAT::~FAT()>
c001546b:	83 c4 10             	add    esp,0x10
c001546e:	83 ec 08             	sub    esp,0x8
c0015471:	6a 08                	push   0x8
c0015473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015477:	e8 7e 43 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001547c:	83 c4 10             	add    esp,0x10
c001547f:	83 c4 0c             	add    esp,0xc
c0015482:	c3                   	ret    
c0015483:	90                   	nop

c0015484 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0015484:	83 ec 1c             	sub    esp,0x1c
c0015487:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001548e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015493:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015497:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c001549e:	83 f8 ff             	cmp    eax,0xffffffff
c00154a1:	75 35                	jne    c00154d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00154a3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00154a7:	88 c2                	mov    dl,al
c00154a9:	a1 a0 29 02 c0       	mov    eax,ds:0xc00229a0
c00154ae:	01 d0                	add    eax,edx
c00154b0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00154b4:	8b 15 a0 29 02 c0    	mov    edx,DWORD PTR ds:0xc00229a0
c00154ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00154be:	89 14 85 c0 29 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd640],edx
c00154c5:	a1 a0 29 02 c0       	mov    eax,ds:0xc00229a0
c00154ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00154ce:	89 14 85 40 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd5c0],edx
c00154d5:	eb 19                	jmp    c00154f0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00154d7:	90                   	nop
c00154d8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00154dc:	88 c2                	mov    dl,al
c00154de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00154e2:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c00154e9:	01 d0                	add    eax,edx
c00154eb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00154ef:	90                   	nop
c00154f0:	83 ec 04             	sub    esp,0x4
c00154f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00154f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00154fb:	8d 44 24 15          	lea    eax,[esp+0x15]
c00154ff:	50                   	push   eax
c0015500:	e8 7c f7 fe ff       	call   c0004c81 <f_getlabel>
c0015505:	83 c4 10             	add    esp,0x10
c0015508:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001550c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015511:	75 09                	jne    c001551c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0015513:	b8 00 00 00 00       	mov    eax,0x0
c0015518:	eb 0a                	jmp    c0015524 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001551a:	66 90                	xchg   ax,ax
c001551c:	b8 01 00 00 00       	mov    eax,0x1
c0015521:	8d 76 00             	lea    esi,[esi+0x0]
c0015524:	83 c4 1c             	add    esp,0x1c
c0015527:	c3                   	ret    

c0015528 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0015528:	57                   	push   edi
c0015529:	83 ec 58             	sub    esp,0x58
c001552c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0015534:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015538:	b8 00 00 00 00       	mov    eax,0x0
c001553d:	b9 0f 00 00 00       	mov    ecx,0xf
c0015542:	fc                   	cld    
c0015543:	89 d7                	mov    edi,edx
c0015545:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0015547:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001554b:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c0015552:	83 f8 ff             	cmp    eax,0xffffffff
c0015555:	75 35                	jne    c001558c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0015557:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001555b:	88 c2                	mov    dl,al
c001555d:	a1 a0 29 02 c0       	mov    eax,ds:0xc00229a0
c0015562:	01 d0                	add    eax,edx
c0015564:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015568:	8b 15 a0 29 02 c0    	mov    edx,DWORD PTR ds:0xc00229a0
c001556e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015572:	89 14 85 c0 29 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd640],edx
c0015579:	a1 a0 29 02 c0       	mov    eax,ds:0xc00229a0
c001557e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0015582:	89 14 85 40 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd5c0],edx
c0015589:	eb 19                	jmp    c00155a4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001558b:	90                   	nop
c001558c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015590:	88 c2                	mov    dl,al
c0015592:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015596:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c001559d:	01 d0                	add    eax,edx
c001559f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00155a3:	90                   	nop
c00155a4:	83 ec 08             	sub    esp,0x8
c00155a7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00155ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c00155af:	50                   	push   eax
c00155b0:	e8 2b b2 fe ff       	call   c00007e0 <strcat>
c00155b5:	83 c4 10             	add    esp,0x10
c00155b8:	83 ec 0c             	sub    esp,0xc
c00155bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00155bf:	50                   	push   eax
c00155c0:	e8 0d f8 fe ff       	call   c0004dd2 <f_setlabel>
c00155c5:	83 c4 10             	add    esp,0x10
c00155c8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00155cc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00155d1:	75 09                	jne    c00155dc <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00155d3:	b8 00 00 00 00       	mov    eax,0x0
c00155d8:	eb 0a                	jmp    c00155e4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00155da:	66 90                	xchg   ax,ax
c00155dc:	b8 01 00 00 00       	mov    eax,0x1
c00155e1:	8d 76 00             	lea    esi,[esi+0x0]
c00155e4:	83 c4 58             	add    esp,0x58
c00155e7:	5f                   	pop    edi
c00155e8:	c3                   	ret    
c00155e9:	90                   	nop
c00155ea:	66 90                	xchg   ax,ax

c00155ec <FAT::format(LogicalDisk*, int, char const*, int)>:
c00155ec:	83 ec 2c             	sub    esp,0x2c
c00155ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00155f7:	83 ec 08             	sub    esp,0x8
c00155fa:	68 9c e4 01 c0       	push   0xc001e49c
c00155ff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015603:	e8 f8 b0 fe ff       	call   c0000700 <strcmp>
c0015608:	83 c4 10             	add    esp,0x10
c001560b:	85 c0                	test   eax,eax
c001560d:	0f 94 c0             	sete   al
c0015610:	84 c0                	test   al,al
c0015612:	74 10                	je     c0015624 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0015614:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001561c:	e9 b3 00 00 00       	jmp    c00156d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0015621:	8d 76 00             	lea    esi,[esi+0x0]
c0015624:	83 ec 08             	sub    esp,0x8
c0015627:	68 8e e4 01 c0       	push   0xc001e48e
c001562c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015630:	e8 cb b0 fe ff       	call   c0000700 <strcmp>
c0015635:	83 c4 10             	add    esp,0x10
c0015638:	85 c0                	test   eax,eax
c001563a:	0f 94 c0             	sete   al
c001563d:	84 c0                	test   al,al
c001563f:	74 0f                	je     c0015650 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0015641:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0015649:	e9 86 00 00 00       	jmp    c00156d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001564e:	66 90                	xchg   ax,ax
c0015650:	83 ec 08             	sub    esp,0x8
c0015653:	68 94 e4 01 c0       	push   0xc001e494
c0015658:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001565c:	e8 9f b0 fe ff       	call   c0000700 <strcmp>
c0015661:	83 c4 10             	add    esp,0x10
c0015664:	85 c0                	test   eax,eax
c0015666:	0f 94 c0             	sete   al
c0015669:	84 c0                	test   al,al
c001566b:	74 0b                	je     c0015678 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001566d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0015675:	eb 5d                	jmp    c00156d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0015677:	90                   	nop
c0015678:	83 ec 08             	sub    esp,0x8
c001567b:	68 5c c4 01 c0       	push   0xc001c45c
c0015680:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015684:	e8 77 b0 fe ff       	call   c0000700 <strcmp>
c0015689:	83 c4 10             	add    esp,0x10
c001568c:	85 c0                	test   eax,eax
c001568e:	0f 94 c0             	sete   al
c0015691:	84 c0                	test   al,al
c0015693:	74 0b                	je     c00156a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0015695:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001569d:	eb 35                	jmp    c00156d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001569f:	90                   	nop
c00156a0:	83 ec 08             	sub    esp,0x8
c00156a3:	68 9a e4 01 c0       	push   0xc001e49a
c00156a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00156ac:	e8 4f b0 fe ff       	call   c0000700 <strcmp>
c00156b1:	83 c4 10             	add    esp,0x10
c00156b4:	85 c0                	test   eax,eax
c00156b6:	0f 94 c0             	sete   al
c00156b9:	84 c0                	test   al,al
c00156bb:	74 0b                	je     c00156c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00156bd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00156c5:	eb 0d                	jmp    c00156d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00156c7:	90                   	nop
c00156c8:	b8 08 00 00 00       	mov    eax,0x8
c00156cd:	e9 ea 00 00 00       	jmp    c00157bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00156d2:	66 90                	xchg   ax,ax
c00156d4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00156db:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00156e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00156e4:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c00156eb:	83 f8 ff             	cmp    eax,0xffffffff
c00156ee:	75 34                	jne    c0015724 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00156f0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00156f4:	88 c2                	mov    dl,al
c00156f6:	a1 a0 29 02 c0       	mov    eax,ds:0xc00229a0
c00156fb:	01 d0                	add    eax,edx
c00156fd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0015701:	8b 15 a0 29 02 c0    	mov    edx,DWORD PTR ds:0xc00229a0
c0015707:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001570b:	89 14 85 c0 29 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd640],edx
c0015712:	a1 a0 29 02 c0       	mov    eax,ds:0xc00229a0
c0015717:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001571b:	89 14 85 40 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd5c0],edx
c0015722:	eb 18                	jmp    c001573c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0015724:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0015728:	88 c2                	mov    dl,al
c001572a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001572e:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c0015735:	01 d0                	add    eax,edx
c0015737:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001573b:	90                   	nop
c001573c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015740:	88 04 24             	mov    BYTE PTR [esp],al
c0015743:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015747:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001574b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015753:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0015758:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015760:	83 ec 0c             	sub    esp,0xc
c0015763:	68 00 20 00 00       	push   0x2000
c0015768:	e8 f4 13 ff ff       	call   c0006b61 <malloc>
c001576d:	83 c4 10             	add    esp,0x10
c0015770:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015774:	68 00 20 00 00       	push   0x2000
c0015779:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001577d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015781:	50                   	push   eax
c0015782:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0015786:	50                   	push   eax
c0015787:	e8 36 f9 fe ff       	call   c00050c2 <f_mkfs>
c001578c:	83 c4 10             	add    esp,0x10
c001578f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015793:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0015798:	75 0a                	jne    c00157a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001579a:	b8 00 00 00 00       	mov    eax,0x0
c001579f:	eb 1b                	jmp    c00157bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00157a1:	8d 76 00             	lea    esi,[esi+0x0]
c00157a4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00157a9:	75 09                	jne    c00157b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00157ab:	b8 09 00 00 00       	mov    eax,0x9
c00157b0:	eb 0a                	jmp    c00157bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00157b2:	66 90                	xchg   ax,ax
c00157b4:	b8 01 00 00 00       	mov    eax,0x1
c00157b9:	8d 76 00             	lea    esi,[esi+0x0]
c00157bc:	83 c4 2c             	add    esp,0x2c
c00157bf:	c3                   	ret    

c00157c0 <FAT::tryMount(LogicalDisk*, int)>:
c00157c0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00157c6:	a1 a0 29 02 c0       	mov    eax,ds:0xc00229a0
c00157cb:	83 f8 14             	cmp    eax,0x14
c00157ce:	75 18                	jne    c00157e8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00157d0:	83 ec 0c             	sub    esp,0xc
c00157d3:	68 a0 e4 01 c0       	push   0xc001e4a0
c00157d8:	e8 62 9c ff ff       	call   c000f43f <Krnl::panic(char const*)>
c00157dd:	83 c4 10             	add    esp,0x10
c00157e0:	b0 00                	mov    al,0x0
c00157e2:	e9 e9 01 00 00       	jmp    c00159d0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00157e7:	90                   	nop
c00157e8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00157ef:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00157f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00157fb:	3d 00 02 00 00       	cmp    eax,0x200
c0015800:	74 0a                	je     c001580c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0015802:	b0 00                	mov    al,0x0
c0015804:	e9 c7 01 00 00       	jmp    c00159d0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0015809:	8d 76 00             	lea    esi,[esi+0x0]
c001580c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0015814:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001581b:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c0015822:	83 f8 ff             	cmp    eax,0xffffffff
c0015825:	74 09                	je     c0015830 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0015827:	b0 01                	mov    al,0x1
c0015829:	e9 a2 01 00 00       	jmp    c00159d0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001582e:	66 90                	xchg   ax,ax
c0015830:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001583a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0015842:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0015849:	88 c2                	mov    dl,al
c001584b:	a1 a0 29 02 c0       	mov    eax,ds:0xc00229a0
c0015850:	01 d0                	add    eax,edx
c0015852:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0015859:	8b 15 a0 29 02 c0    	mov    edx,DWORD PTR ds:0xc00229a0
c001585f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0015866:	89 14 85 c0 29 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd640],edx
c001586d:	a1 a0 29 02 c0       	mov    eax,ds:0xc00229a0
c0015872:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0015879:	89 14 85 40 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd5c0],edx
c0015880:	83 ec 0c             	sub    esp,0xc
c0015883:	68 34 02 00 00       	push   0x234
c0015888:	e8 d4 12 ff ff       	call   c0006b61 <malloc>
c001588d:	83 c4 10             	add    esp,0x10
c0015890:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0015897:	83 ec 04             	sub    esp,0x4
c001589a:	6a 00                	push   0x0
c001589c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00158a3:	50                   	push   eax
c00158a4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00158ab:	e8 38 e0 fe ff       	call   c00038e8 <f_mount>
c00158b0:	83 c4 10             	add    esp,0x10
c00158b3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00158ba:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00158c2:	74 1c                	je     c00158e0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00158c4:	83 ec 0c             	sub    esp,0xc
c00158c7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00158ce:	e8 ae 12 ff ff       	call   c0006b81 <rfree>
c00158d3:	83 c4 10             	add    esp,0x10
c00158d6:	b0 00                	mov    al,0x0
c00158d8:	e9 f3 00 00 00       	jmp    c00159d0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00158dd:	8d 76 00             	lea    esi,[esi+0x0]
c00158e0:	83 ec 04             	sub    esp,0x4
c00158e3:	68 00 01 00 00       	push   0x100
c00158e8:	6a 00                	push   0x0
c00158ea:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00158f1:	50                   	push   eax
c00158f2:	e8 f9 ab fe ff       	call   c00004f0 <memset>
c00158f7:	83 c4 10             	add    esp,0x10
c00158fa:	83 ec 08             	sub    esp,0x8
c00158fd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0015904:	50                   	push   eax
c0015905:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001590c:	50                   	push   eax
c001590d:	e8 ce ae fe ff       	call   c00007e0 <strcat>
c0015912:	83 c4 10             	add    esp,0x10
c0015915:	83 ec 08             	sub    esp,0x8
c0015918:	68 ae e4 01 c0       	push   0xc001e4ae
c001591d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0015924:	50                   	push   eax
c0015925:	e8 b6 ae fe ff       	call   c00007e0 <strcat>
c001592a:	83 c4 10             	add    esp,0x10
c001592d:	83 ec 04             	sub    esp,0x4
c0015930:	6a 01                	push   0x1
c0015932:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0015939:	50                   	push   eax
c001593a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001593e:	50                   	push   eax
c001593f:	e8 06 e0 fe ff       	call   c000394a <f_open>
c0015944:	83 c4 10             	add    esp,0x10
c0015947:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001594e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0015955:	85 c0                	test   eax,eax
c0015957:	74 0b                	je     c0015964 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0015959:	78 31                	js     c001598c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001595b:	83 e8 04             	sub    eax,0x4
c001595e:	83 f8 01             	cmp    eax,0x1
c0015961:	77 29                	ja     c001598c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0015963:	90                   	nop
c0015964:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001596c:	83 ec 0c             	sub    esp,0xc
c001596f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015973:	50                   	push   eax
c0015974:	e8 84 e7 fe ff       	call   c00040fd <f_close>
c0015979:	83 c4 10             	add    esp,0x10
c001597c:	90                   	nop
c001597d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0015985:	74 41                	je     c00159c8 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0015987:	eb 33                	jmp    c00159bc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0015989:	8d 76 00             	lea    esi,[esi+0x0]
c001598c:	83 ec 0c             	sub    esp,0xc
c001598f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0015996:	e8 e6 11 ff ff       	call   c0006b81 <rfree>
c001599b:	83 c4 10             	add    esp,0x10
c001599e:	83 ec 04             	sub    esp,0x4
c00159a1:	6a 00                	push   0x0
c00159a3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00159aa:	50                   	push   eax
c00159ab:	6a 00                	push   0x0
c00159ad:	e8 36 df fe ff       	call   c00038e8 <f_mount>
c00159b2:	83 c4 10             	add    esp,0x10
c00159b5:	b0 00                	mov    al,0x0
c00159b7:	eb 17                	jmp    c00159d0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00159b9:	8d 76 00             	lea    esi,[esi+0x0]
c00159bc:	a1 a0 29 02 c0       	mov    eax,ds:0xc00229a0
c00159c1:	40                   	inc    eax
c00159c2:	a3 a0 29 02 c0       	mov    ds:0xc00229a0,eax
c00159c7:	90                   	nop
c00159c8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00159cf:	90                   	nop
c00159d0:	81 c4 4c 03 00 00    	add    esp,0x34c
c00159d6:	c3                   	ret    
c00159d7:	90                   	nop

c00159d8 <FAT::allocateSwapfile(char const*, int)>:
c00159d8:	55                   	push   ebp
c00159d9:	57                   	push   edi
c00159da:	56                   	push   esi
c00159db:	53                   	push   ebx
c00159dc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00159e2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00159ed:	83 ec 0c             	sub    esp,0xc
c00159f0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00159f7:	e8 65 11 ff ff       	call   c0006b61 <malloc>
c00159fc:	83 c4 10             	add    esp,0x10
c00159ff:	89 c7                	mov    edi,eax
c0015a01:	a1 10 29 02 c0       	mov    eax,ds:0xc0022910
c0015a06:	83 ec 04             	sub    esp,0x4
c0015a09:	50                   	push   eax
c0015a0a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0015a11:	57                   	push   edi
c0015a12:	e8 4f 44 ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c0015a17:	83 c4 10             	add    esp,0x10
c0015a1a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0015a21:	83 ec 04             	sub    esp,0x4
c0015a24:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015a28:	50                   	push   eax
c0015a29:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015a2d:	50                   	push   eax
c0015a2e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015a35:	e8 98 47 ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c0015a3a:	83 c4 10             	add    esp,0x10
c0015a3d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0015a44:	c1 e0 14             	shl    eax,0x14
c0015a47:	89 c7                	mov    edi,eax
c0015a49:	89 c5                	mov    ebp,eax
c0015a4b:	c1 fd 1f             	sar    ebp,0x1f
c0015a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a56:	89 f9                	mov    ecx,edi
c0015a58:	31 c1                	xor    ecx,eax
c0015a5a:	89 cb                	mov    ebx,ecx
c0015a5c:	89 e9                	mov    ecx,ebp
c0015a5e:	31 d1                	xor    ecx,edx
c0015a60:	89 ce                	mov    esi,ecx
c0015a62:	89 f0                	mov    eax,esi
c0015a64:	09 d8                	or     eax,ebx
c0015a66:	0f 84 9c 00 00 00    	je     c0015b08 <FAT::allocateSwapfile(char const*, int)+0x130>
c0015a6c:	83 ec 0c             	sub    esp,0xc
c0015a6f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015a76:	e8 23 46 ff ff       	call   c000a09e <File::unlink()>
c0015a7b:	83 c4 10             	add    esp,0x10
c0015a7e:	83 ec 08             	sub    esp,0x8
c0015a81:	6a 12                	push   0x12
c0015a83:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015a8a:	e8 97 44 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c0015a8f:	83 c4 10             	add    esp,0x10
c0015a92:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015a99:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0015a9f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0015aa6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0015aad:	c1 e0 14             	shl    eax,0x14
c0015ab0:	83 ec 04             	sub    esp,0x4
c0015ab3:	6a 01                	push   0x1
c0015ab5:	50                   	push   eax
c0015ab6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0015abd:	e8 a0 f4 fe ff       	call   c0004f62 <f_expand>
c0015ac2:	83 c4 10             	add    esp,0x10
c0015ac5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015acc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ace:	83 c0 10             	add    eax,0x10
c0015ad1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad3:	83 ec 0c             	sub    esp,0xc
c0015ad6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015ada:	52                   	push   edx
c0015adb:	8d 54 24 30          	lea    edx,[esp+0x30]
c0015adf:	52                   	push   edx
c0015ae0:	6a 00                	push   0x0
c0015ae2:	68 00 04 00 00       	push   0x400
c0015ae7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0015aee:	ff d0                	call   eax
c0015af0:	83 c4 20             	add    esp,0x20
c0015af3:	83 ec 0c             	sub    esp,0xc
c0015af6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015afd:	e8 82 44 ff ff       	call   c0009f84 <File::close()>
c0015b02:	83 c4 10             	add    esp,0x10
c0015b05:	8d 76 00             	lea    esi,[esi+0x0]
c0015b08:	83 ec 08             	sub    esp,0x8
c0015b0b:	6a 01                	push   0x1
c0015b0d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015b14:	e8 0d 44 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c0015b19:	83 c4 10             	add    esp,0x10
c0015b1c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015b23:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b25:	83 c0 0c             	add    eax,0xc
c0015b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2a:	83 ec 0c             	sub    esp,0xc
c0015b2d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015b31:	52                   	push   edx
c0015b32:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0015b36:	52                   	push   edx
c0015b37:	6a 00                	push   0x0
c0015b39:	6a 04                	push   0x4
c0015b3b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0015b42:	ff d0                	call   eax
c0015b44:	83 c4 20             	add    esp,0x20
c0015b47:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015b4e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0015b54:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0015b5b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0015b62:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015b65:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0015b6c:	83 ec 0c             	sub    esp,0xc
c0015b6f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015b76:	e8 09 44 ff ff       	call   c0009f84 <File::close()>
c0015b7b:	83 c4 10             	add    esp,0x10
c0015b7e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0015b85:	ba 00 00 00 00       	mov    edx,0x0
c0015b8a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0015b90:	5b                   	pop    ebx
c0015b91:	5e                   	pop    esi
c0015b92:	5f                   	pop    edi
c0015b93:	5d                   	pop    ebp
c0015b94:	c3                   	ret    
c0015b95:	90                   	nop
c0015b96:	66 90                	xchg   ax,ax

c0015b98 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0015b98:	57                   	push   edi
c0015b99:	56                   	push   esi
c0015b9a:	53                   	push   ebx
c0015b9b:	81 ec 50 02 00 00    	sub    esp,0x250
c0015ba1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0015ba9:	74 0d                	je     c0015bb8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0015bab:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0015bb3:	75 0f                	jne    c0015bc4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0015bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bb8:	b8 04 00 00 00       	mov    eax,0x4
c0015bbd:	e9 36 01 00 00       	jmp    c0015cf8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015bc2:	66 90                	xchg   ax,ax
c0015bc4:	83 ec 08             	sub    esp,0x8
c0015bc7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0015bce:	50                   	push   eax
c0015bcf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0015bd6:	e8 e5 e7 fe ff       	call   c00043c0 <f_readdir>
c0015bdb:	83 c4 10             	add    esp,0x10
c0015bde:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0015be5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0015bec:	83 ec 0c             	sub    esp,0xc
c0015bef:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0015bf6:	83 c0 16             	add    eax,0x16
c0015bf9:	50                   	push   eax
c0015bfa:	e8 61 a9 fe ff       	call   c0000560 <strlen>
c0015bff:	83 c4 10             	add    esp,0x10
c0015c02:	ba 00 00 00 00       	mov    edx,0x0
c0015c07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c0b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015c0f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0015c16:	25 ff 00 00 00       	and    eax,0xff
c0015c1b:	83 e0 10             	and    eax,0x10
c0015c1e:	74 08                	je     c0015c28 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0015c20:	b8 02 00 00 00       	mov    eax,0x2
c0015c25:	eb 09                	jmp    c0015c30 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0015c27:	90                   	nop
c0015c28:	b8 01 00 00 00       	mov    eax,0x1
c0015c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015c34:	83 ec 08             	sub    esp,0x8
c0015c37:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0015c3e:	83 c0 16             	add    eax,0x16
c0015c41:	50                   	push   eax
c0015c42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015c46:	83 c0 10             	add    eax,0x10
c0015c49:	50                   	push   eax
c0015c4a:	e8 d1 a9 fe ff       	call   c0000620 <strcpy>
c0015c4f:	83 c4 10             	add    esp,0x10
c0015c52:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0015c59:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0015c60:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c64:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0015c6b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0015c72:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0015c79:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0015c80:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0015c87:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0015c8e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0015c95:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0015c9c:	89 c6                	mov    esi,eax
c0015c9e:	89 d7                	mov    edi,edx
c0015ca0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015ca2:	89 c8                	mov    eax,ecx
c0015ca4:	89 fa                	mov    edx,edi
c0015ca6:	89 f3                	mov    ebx,esi
c0015ca8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0015caf:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0015cb6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0015cbd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0015cc4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0015cca:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0015cd1:	84 c0                	test   al,al
c0015cd3:	75 07                	jne    c0015cdc <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0015cd5:	b8 07 00 00 00       	mov    eax,0x7
c0015cda:	eb 1c                	jmp    c0015cf8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015cdc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0015ce3:	85 c0                	test   eax,eax
c0015ce5:	75 09                	jne    c0015cf0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0015ce7:	b8 00 00 00 00       	mov    eax,0x0
c0015cec:	eb 0a                	jmp    c0015cf8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015cee:	66 90                	xchg   ax,ax
c0015cf0:	b8 01 00 00 00       	mov    eax,0x1
c0015cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0015cf8:	81 c4 50 02 00 00    	add    esp,0x250
c0015cfe:	5b                   	pop    ebx
c0015cff:	5e                   	pop    esi
c0015d00:	5f                   	pop    edi
c0015d01:	c3                   	ret    
c0015d02:	66 90                	xchg   ax,ax

c0015d04 <FAT::read(void*, unsigned long, void*, int*)>:
c0015d04:	83 ec 1c             	sub    esp,0x1c
c0015d07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015d0c:	74 0a                	je     c0015d18 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0015d0e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015d13:	75 0b                	jne    c0015d20 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0015d15:	8d 76 00             	lea    esi,[esi+0x0]
c0015d18:	b8 04 00 00 00       	mov    eax,0x4
c0015d1d:	eb 41                	jmp    c0015d60 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0015d1f:	90                   	nop
c0015d20:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d24:	50                   	push   eax
c0015d25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015d2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015d31:	e8 df de fe ff       	call   c0003c15 <f_read>
c0015d36:	83 c4 10             	add    esp,0x10
c0015d39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d41:	89 c2                	mov    edx,eax
c0015d43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d47:	89 10                	mov    DWORD PTR [eax],edx
c0015d49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d4d:	85 c0                	test   eax,eax
c0015d4f:	75 07                	jne    c0015d58 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0015d51:	b8 00 00 00 00       	mov    eax,0x0
c0015d56:	eb 08                	jmp    c0015d60 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0015d58:	b8 01 00 00 00       	mov    eax,0x1
c0015d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d60:	83 c4 1c             	add    esp,0x1c
c0015d63:	c3                   	ret    

c0015d64 <FAT::write(void*, unsigned long, void*, int*)>:
c0015d64:	83 ec 1c             	sub    esp,0x1c
c0015d67:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015d6c:	74 0a                	je     c0015d78 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0015d6e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015d73:	75 0b                	jne    c0015d80 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0015d75:	8d 76 00             	lea    esi,[esi+0x0]
c0015d78:	b8 04 00 00 00       	mov    eax,0x4
c0015d7d:	eb 41                	jmp    c0015dc0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0015d7f:	90                   	nop
c0015d80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d84:	50                   	push   eax
c0015d85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015d8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015d91:	e8 7e e0 fe ff       	call   c0003e14 <f_write>
c0015d96:	83 c4 10             	add    esp,0x10
c0015d99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015da1:	89 c2                	mov    edx,eax
c0015da3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015da7:	89 10                	mov    DWORD PTR [eax],edx
c0015da9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015dad:	85 c0                	test   eax,eax
c0015daf:	75 07                	jne    c0015db8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0015db1:	b8 00 00 00 00       	mov    eax,0x0
c0015db6:	eb 08                	jmp    c0015dc0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0015db8:	b8 01 00 00 00       	mov    eax,0x1
c0015dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0015dc0:	83 c4 1c             	add    esp,0x1c
c0015dc3:	c3                   	ret    

c0015dc4 <FAT::close(void*)>:
c0015dc4:	83 ec 1c             	sub    esp,0x1c
c0015dc7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015dcc:	75 0a                	jne    c0015dd8 <FAT::close(void*)+0x14>
c0015dce:	b8 04 00 00 00       	mov    eax,0x4
c0015dd3:	eb 3f                	jmp    c0015e14 <FAT::close(void*)+0x50>
c0015dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0015dd8:	83 ec 0c             	sub    esp,0xc
c0015ddb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ddf:	e8 19 e3 fe ff       	call   c00040fd <f_close>
c0015de4:	83 c4 10             	add    esp,0x10
c0015de7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015deb:	83 ec 0c             	sub    esp,0xc
c0015dee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015df2:	e8 7a 0d ff ff       	call   c0006b71 <free>
c0015df7:	83 c4 10             	add    esp,0x10
c0015dfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015dfe:	85 c0                	test   eax,eax
c0015e00:	75 0a                	jne    c0015e0c <FAT::close(void*)+0x48>
c0015e02:	b8 00 00 00 00       	mov    eax,0x0
c0015e07:	eb 0b                	jmp    c0015e14 <FAT::close(void*)+0x50>
c0015e09:	8d 76 00             	lea    esi,[esi+0x0]
c0015e0c:	b8 01 00 00 00       	mov    eax,0x1
c0015e11:	8d 76 00             	lea    esi,[esi+0x0]
c0015e14:	83 c4 1c             	add    esp,0x1c
c0015e17:	c3                   	ret    

c0015e18 <FAT::closeDir(void*)>:
c0015e18:	83 ec 1c             	sub    esp,0x1c
c0015e1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015e20:	75 0a                	jne    c0015e2c <FAT::closeDir(void*)+0x14>
c0015e22:	b8 04 00 00 00       	mov    eax,0x4
c0015e27:	eb 3f                	jmp    c0015e68 <FAT::closeDir(void*)+0x50>
c0015e29:	8d 76 00             	lea    esi,[esi+0x0]
c0015e2c:	83 ec 0c             	sub    esp,0xc
c0015e2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e33:	e8 66 e5 fe ff       	call   c000439e <f_closedir>
c0015e38:	83 c4 10             	add    esp,0x10
c0015e3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e3f:	83 ec 0c             	sub    esp,0xc
c0015e42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e46:	e8 26 0d ff ff       	call   c0006b71 <free>
c0015e4b:	83 c4 10             	add    esp,0x10
c0015e4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e52:	85 c0                	test   eax,eax
c0015e54:	75 0a                	jne    c0015e60 <FAT::closeDir(void*)+0x48>
c0015e56:	b8 00 00 00 00       	mov    eax,0x0
c0015e5b:	eb 0b                	jmp    c0015e68 <FAT::closeDir(void*)+0x50>
c0015e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0015e60:	b8 01 00 00 00       	mov    eax,0x1
c0015e65:	8d 76 00             	lea    esi,[esi+0x0]
c0015e68:	83 c4 1c             	add    esp,0x1c
c0015e6b:	c3                   	ret    

c0015e6c <FAT::seek(void*, unsigned long long)>:
c0015e6c:	83 ec 2c             	sub    esp,0x2c
c0015e6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015e7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e7f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0015e84:	75 0a                	jne    c0015e90 <FAT::seek(void*, unsigned long long)+0x24>
c0015e86:	b8 04 00 00 00       	mov    eax,0x4
c0015e8b:	eb 33                	jmp    c0015ec0 <FAT::seek(void*, unsigned long long)+0x54>
c0015e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0015e90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e94:	83 ec 08             	sub    esp,0x8
c0015e97:	50                   	push   eax
c0015e98:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e9c:	e8 8b e2 fe ff       	call   c000412c <f_lseek>
c0015ea1:	83 c4 10             	add    esp,0x10
c0015ea4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ea8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015eac:	85 c0                	test   eax,eax
c0015eae:	75 08                	jne    c0015eb8 <FAT::seek(void*, unsigned long long)+0x4c>
c0015eb0:	b8 00 00 00 00       	mov    eax,0x0
c0015eb5:	eb 09                	jmp    c0015ec0 <FAT::seek(void*, unsigned long long)+0x54>
c0015eb7:	90                   	nop
c0015eb8:	b8 01 00 00 00       	mov    eax,0x1
c0015ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0015ec0:	83 c4 2c             	add    esp,0x2c
c0015ec3:	c3                   	ret    

c0015ec4 <fatWrapperReadDisk>:
c0015ec4:	53                   	push   ebx
c0015ec5:	83 ec 18             	sub    esp,0x18
c0015ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ecc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015ed0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015ed4:	25 ff 00 00 00       	and    eax,0xff
c0015ed9:	8b 0c 85 80 19 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde680]
c0015ee0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015ee4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ee8:	ba 00 00 00 00       	mov    edx,0x0
c0015eed:	83 ec 0c             	sub    esp,0xc
c0015ef0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ef4:	53                   	push   ebx
c0015ef5:	52                   	push   edx
c0015ef6:	50                   	push   eax
c0015ef7:	51                   	push   ecx
c0015ef8:	e8 db 60 ff ff       	call   c000bfd8 <LogicalDisk::read(unsigned long long, int, void*)>
c0015efd:	83 c4 20             	add    esp,0x20
c0015f00:	83 c4 18             	add    esp,0x18
c0015f03:	5b                   	pop    ebx
c0015f04:	c3                   	ret    
c0015f05:	8d 76 00             	lea    esi,[esi+0x0]

c0015f08 <fatWrapperWriteDisk>:
c0015f08:	53                   	push   ebx
c0015f09:	83 ec 18             	sub    esp,0x18
c0015f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f10:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015f14:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f18:	25 ff 00 00 00       	and    eax,0xff
c0015f1d:	8b 0c 85 80 19 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde680]
c0015f24:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015f28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f2c:	ba 00 00 00 00       	mov    edx,0x0
c0015f31:	83 ec 0c             	sub    esp,0xc
c0015f34:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f38:	53                   	push   ebx
c0015f39:	52                   	push   edx
c0015f3a:	50                   	push   eax
c0015f3b:	51                   	push   ecx
c0015f3c:	e8 03 61 ff ff       	call   c000c044 <LogicalDisk::write(unsigned long long, int, void*)>
c0015f41:	83 c4 20             	add    esp,0x20
c0015f44:	83 c4 18             	add    esp,0x18
c0015f47:	5b                   	pop    ebx
c0015f48:	c3                   	ret    
c0015f49:	8d 76 00             	lea    esi,[esi+0x0]

c0015f4c <fatWrapperIoctl>:
c0015f4c:	53                   	push   ebx
c0015f4d:	83 ec 28             	sub    esp,0x28
c0015f50:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015f54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015f58:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0015f5c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0015f60:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0015f65:	75 35                	jne    c0015f9c <fatWrapperIoctl+0x50>
c0015f67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015f6b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015f6f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f73:	25 ff 00 00 00       	and    eax,0xff
c0015f78:	8b 04 85 80 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde680]
c0015f7f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015f85:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015f8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015f8f:	66 89 02             	mov    WORD PTR [edx],ax
c0015f92:	b8 00 00 00 00       	mov    eax,0x0
c0015f97:	e9 c4 00 00 00       	jmp    c0016060 <fatWrapperIoctl+0x114>
c0015f9c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0015fa1:	75 75                	jne    c0016018 <fatWrapperIoctl+0xcc>
c0015fa3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015fa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015fab:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015faf:	25 ff 00 00 00       	and    eax,0xff
c0015fb4:	8b 04 85 80 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde680]
c0015fbb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015fc1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015fc7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0015fcd:	89 c8                	mov    eax,ecx
c0015fcf:	89 da                	mov    edx,ebx
c0015fd1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015fd5:	c1 e0 0a             	shl    eax,0xa
c0015fd8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0015fdc:	81 e1 ff 00 00 00    	and    ecx,0xff
c0015fe2:	8b 0c 8d 80 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde680]
c0015fe9:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0015fef:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0015ff5:	89 cb                	mov    ebx,ecx
c0015ff7:	c1 fb 1f             	sar    ebx,0x1f
c0015ffa:	53                   	push   ebx
c0015ffb:	51                   	push   ecx
c0015ffc:	52                   	push   edx
c0015ffd:	50                   	push   eax
c0015ffe:	e8 5d 56 00 00       	call   c001b660 <__udivdi3>
c0016003:	83 c4 10             	add    esp,0x10
c0016006:	89 c2                	mov    edx,eax
c0016008:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001600c:	89 10                	mov    DWORD PTR [eax],edx
c001600e:	b8 00 00 00 00       	mov    eax,0x0
c0016013:	eb 4b                	jmp    c0016060 <fatWrapperIoctl+0x114>
c0016015:	8d 76 00             	lea    esi,[esi+0x0]
c0016018:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001601d:	75 09                	jne    c0016028 <fatWrapperIoctl+0xdc>
c001601f:	b8 00 00 00 00       	mov    eax,0x0
c0016024:	eb 3a                	jmp    c0016060 <fatWrapperIoctl+0x114>
c0016026:	66 90                	xchg   ax,ax
c0016028:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001602d:	75 19                	jne    c0016048 <fatWrapperIoctl+0xfc>
c001602f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016033:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016037:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001603b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016041:	b8 00 00 00 00       	mov    eax,0x0
c0016046:	eb 18                	jmp    c0016060 <fatWrapperIoctl+0x114>
c0016048:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001604d:	75 09                	jne    c0016058 <fatWrapperIoctl+0x10c>
c001604f:	b8 00 00 00 00       	mov    eax,0x0
c0016054:	eb 0a                	jmp    c0016060 <fatWrapperIoctl+0x114>
c0016056:	66 90                	xchg   ax,ax
c0016058:	b8 04 00 00 00       	mov    eax,0x4
c001605d:	8d 76 00             	lea    esi,[esi+0x0]
c0016060:	83 c4 28             	add    esp,0x28
c0016063:	5b                   	pop    ebx
c0016064:	c3                   	ret    
c0016065:	90                   	nop
c0016066:	66 90                	xchg   ax,ax

c0016068 <FAT::FAT()>:
c0016068:	83 ec 1c             	sub    esp,0x1c
c001606b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001606f:	83 ec 0c             	sub    esp,0xc
c0016072:	50                   	push   eax
c0016073:	e8 9a 3b ff ff       	call   c0009c12 <Filesystem::Filesystem()>
c0016078:	83 c4 10             	add    esp,0x10
c001607b:	ba c4 e4 01 c0       	mov    edx,0xc001e4c4
c0016080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016084:	89 10                	mov    DWORD PTR [eax],edx
c0016086:	c7 05 a0 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229a0,0x0
c0016090:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016098:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001609d:	7f 15                	jg     c00160b4 <FAT::FAT()+0x4c>
c001609f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160a3:	c7 04 85 c0 29 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdd640],0xffffffff
c00160ae:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00160b2:	eb e4                	jmp    c0016098 <FAT::FAT()+0x30>
c00160b4:	90                   	nop
c00160b5:	83 c4 1c             	add    esp,0x1c
c00160b8:	c3                   	ret    
c00160b9:	90                   	nop
c00160ba:	66 90                	xchg   ax,ax

c00160bc <FAT::fixFilepath(char*)>:
c00160bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160c0:	8a 00                	mov    al,BYTE PTR [eax]
c00160c2:	3c 40                	cmp    al,0x40
c00160c4:	7e 2e                	jle    c00160f4 <FAT::fixFilepath(char*)+0x38>
c00160c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160ca:	8a 00                	mov    al,BYTE PTR [eax]
c00160cc:	83 e8 41             	sub    eax,0x41
c00160cf:	88 c2                	mov    dl,al
c00160d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160d5:	88 10                	mov    BYTE PTR [eax],dl
c00160d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160db:	8a 00                	mov    al,BYTE PTR [eax]
c00160dd:	0f be c0             	movsx  eax,al
c00160e0:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c00160e7:	83 c0 30             	add    eax,0x30
c00160ea:	88 c2                	mov    dl,al
c00160ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160f0:	88 10                	mov    BYTE PTR [eax],dl
c00160f2:	66 90                	xchg   ax,ax
c00160f4:	90                   	nop
c00160f5:	c3                   	ret    
c00160f6:	66 90                	xchg   ax,ax

c00160f8 <FAT::open(char const*, void**, FileOpenMode)>:
c00160f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00160fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016106:	74 0c                	je     c0016114 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016108:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016110:	75 0e                	jne    c0016120 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016112:	66 90                	xchg   ax,ax
c0016114:	b8 04 00 00 00       	mov    eax,0x4
c0016119:	e9 0a 01 00 00       	jmp    c0016228 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001611e:	66 90                	xchg   ax,ax
c0016120:	83 ec 08             	sub    esp,0x8
c0016123:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001612a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001612e:	50                   	push   eax
c001612f:	e8 ec a4 fe ff       	call   c0000620 <strcpy>
c0016134:	83 c4 10             	add    esp,0x10
c0016137:	83 ec 08             	sub    esp,0x8
c001613a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001613e:	50                   	push   eax
c001613f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016146:	e8 71 ff ff ff       	call   c00160bc <FAT::fixFilepath(char*)>
c001614b:	83 c4 10             	add    esp,0x10
c001614e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0016156:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001615d:	83 e0 01             	and    eax,0x1
c0016160:	74 0a                	je     c001616c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016162:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001616a:	66 90                	xchg   ax,ax
c001616c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016173:	83 e0 04             	and    eax,0x4
c0016176:	74 10                	je     c0016188 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016178:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016180:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016188:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001618f:	83 e0 02             	and    eax,0x2
c0016192:	74 08                	je     c001619c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016194:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001619c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00161a3:	83 e0 08             	and    eax,0x8
c00161a6:	74 08                	je     c00161b0 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00161a8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00161b0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00161b7:	83 e0 10             	and    eax,0x10
c00161ba:	74 08                	je     c00161c4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00161bc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00161c4:	83 ec 0c             	sub    esp,0xc
c00161c7:	68 28 02 00 00       	push   0x228
c00161cc:	e8 90 09 ff ff       	call   c0006b61 <malloc>
c00161d1:	83 c4 10             	add    esp,0x10
c00161d4:	89 c2                	mov    edx,eax
c00161d6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00161dd:	89 10                	mov    DWORD PTR [eax],edx
c00161df:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00161e6:	31 d2                	xor    edx,edx
c00161e8:	88 c2                	mov    dl,al
c00161ea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00161f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00161f3:	83 ec 04             	sub    esp,0x4
c00161f6:	52                   	push   edx
c00161f7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00161fb:	52                   	push   edx
c00161fc:	50                   	push   eax
c00161fd:	e8 48 d7 fe ff       	call   c000394a <f_open>
c0016202:	83 c4 10             	add    esp,0x10
c0016205:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001620c:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016214:	74 0a                	je     c0016220 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0016216:	b8 01 00 00 00       	mov    eax,0x1
c001621b:	eb 0b                	jmp    c0016228 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001621d:	8d 76 00             	lea    esi,[esi+0x0]
c0016220:	b8 00 00 00 00       	mov    eax,0x0
c0016225:	8d 76 00             	lea    esi,[esi+0x0]
c0016228:	81 c4 1c 01 00 00    	add    esp,0x11c
c001622e:	c3                   	ret    
c001622f:	90                   	nop

c0016230 <FAT::openDir(char const*, void**)>:
c0016230:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016236:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001623e:	74 0c                	je     c001624c <FAT::openDir(char const*, void**)+0x1c>
c0016240:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016248:	75 0e                	jne    c0016258 <FAT::openDir(char const*, void**)+0x28>
c001624a:	66 90                	xchg   ax,ax
c001624c:	b8 04 00 00 00       	mov    eax,0x4
c0016251:	e9 82 00 00 00       	jmp    c00162d8 <FAT::openDir(char const*, void**)+0xa8>
c0016256:	66 90                	xchg   ax,ax
c0016258:	83 ec 08             	sub    esp,0x8
c001625b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016262:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016266:	50                   	push   eax
c0016267:	e8 b4 a3 fe ff       	call   c0000620 <strcpy>
c001626c:	83 c4 10             	add    esp,0x10
c001626f:	83 ec 08             	sub    esp,0x8
c0016272:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016276:	50                   	push   eax
c0016277:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001627e:	e8 39 fe ff ff       	call   c00160bc <FAT::fixFilepath(char*)>
c0016283:	83 c4 10             	add    esp,0x10
c0016286:	83 ec 0c             	sub    esp,0xc
c0016289:	6a 30                	push   0x30
c001628b:	e8 d1 08 ff ff       	call   c0006b61 <malloc>
c0016290:	83 c4 10             	add    esp,0x10
c0016293:	89 c2                	mov    edx,eax
c0016295:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001629c:	89 10                	mov    DWORD PTR [eax],edx
c001629e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00162a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00162a7:	83 ec 08             	sub    esp,0x8
c00162aa:	8d 54 24 14          	lea    edx,[esp+0x14]
c00162ae:	52                   	push   edx
c00162af:	50                   	push   eax
c00162b0:	e8 1e e0 fe ff       	call   c00042d3 <f_opendir>
c00162b5:	83 c4 10             	add    esp,0x10
c00162b8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00162bf:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00162c7:	74 07                	je     c00162d0 <FAT::openDir(char const*, void**)+0xa0>
c00162c9:	b8 01 00 00 00       	mov    eax,0x1
c00162ce:	eb 08                	jmp    c00162d8 <FAT::openDir(char const*, void**)+0xa8>
c00162d0:	b8 00 00 00 00       	mov    eax,0x0
c00162d5:	8d 76 00             	lea    esi,[esi+0x0]
c00162d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00162de:	c3                   	ret    
c00162df:	90                   	nop

c00162e0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00162e0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00162e6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00162ee:	75 0c                	jne    c00162fc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00162f0:	b8 04 00 00 00       	mov    eax,0x4
c00162f5:	e9 d6 00 00 00       	jmp    c00163d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00162fa:	66 90                	xchg   ax,ax
c00162fc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0016304:	75 0a                	jne    c0016310 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0016306:	b8 04 00 00 00       	mov    eax,0x4
c001630b:	e9 c0 00 00 00       	jmp    c00163d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016310:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0016318:	75 0a                	jne    c0016324 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001631a:	b8 04 00 00 00       	mov    eax,0x4
c001631f:	e9 ac 00 00 00       	jmp    c00163d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016324:	83 ec 08             	sub    esp,0x8
c0016327:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001632e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016335:	50                   	push   eax
c0016336:	e8 e5 a2 fe ff       	call   c0000620 <strcpy>
c001633b:	83 c4 10             	add    esp,0x10
c001633e:	83 ec 08             	sub    esp,0x8
c0016341:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016348:	50                   	push   eax
c0016349:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016350:	e8 67 fd ff ff       	call   c00160bc <FAT::fixFilepath(char*)>
c0016355:	83 c4 10             	add    esp,0x10
c0016358:	83 ec 08             	sub    esp,0x8
c001635b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001635f:	50                   	push   eax
c0016360:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016367:	50                   	push   eax
c0016368:	e8 e5 e0 fe ff       	call   c0004452 <f_stat>
c001636d:	83 c4 10             	add    esp,0x10
c0016370:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016377:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001637e:	85 c0                	test   eax,eax
c0016380:	74 0a                	je     c001638c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0016382:	83 f8 04             	cmp    eax,0x4
c0016385:	74 39                	je     c00163c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0016387:	eb 3f                	jmp    c00163c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0016389:	8d 76 00             	lea    esi,[esi+0x0]
c001638c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016390:	25 ff 00 00 00       	and    eax,0xff
c0016395:	83 e0 10             	and    eax,0x10
c0016398:	0f 95 c2             	setne  dl
c001639b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00163a2:	88 10                	mov    BYTE PTR [eax],dl
c00163a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163a8:	ba 00 00 00 00       	mov    edx,0x0
c00163ad:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00163b4:	89 01                	mov    DWORD PTR [ecx],eax
c00163b6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00163b9:	b8 00 00 00 00       	mov    eax,0x0
c00163be:	eb 10                	jmp    c00163d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00163c0:	b8 02 00 00 00       	mov    eax,0x2
c00163c5:	eb 09                	jmp    c00163d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00163c7:	90                   	nop
c00163c8:	b8 01 00 00 00       	mov    eax,0x1
c00163cd:	8d 76 00             	lea    esi,[esi+0x0]
c00163d0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00163d6:	c3                   	ret    
c00163d7:	90                   	nop

c00163d8 <FAT::unlink(char const*)>:
c00163d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00163de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00163e6:	75 08                	jne    c00163f0 <FAT::unlink(char const*)+0x18>
c00163e8:	b8 04 00 00 00       	mov    eax,0x4
c00163ed:	eb 61                	jmp    c0016450 <FAT::unlink(char const*)+0x78>
c00163ef:	90                   	nop
c00163f0:	83 ec 08             	sub    esp,0x8
c00163f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00163fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00163fe:	50                   	push   eax
c00163ff:	e8 1c a2 fe ff       	call   c0000620 <strcpy>
c0016404:	83 c4 10             	add    esp,0x10
c0016407:	83 ec 08             	sub    esp,0x8
c001640a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001640e:	50                   	push   eax
c001640f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016416:	e8 a1 fc ff ff       	call   c00160bc <FAT::fixFilepath(char*)>
c001641b:	83 c4 10             	add    esp,0x10
c001641e:	83 ec 0c             	sub    esp,0xc
c0016421:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016425:	50                   	push   eax
c0016426:	e8 8c e2 fe ff       	call   c00046b7 <f_unlink>
c001642b:	83 c4 10             	add    esp,0x10
c001642e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016435:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001643c:	85 c0                	test   eax,eax
c001643e:	75 08                	jne    c0016448 <FAT::unlink(char const*)+0x70>
c0016440:	b8 00 00 00 00       	mov    eax,0x0
c0016445:	eb 09                	jmp    c0016450 <FAT::unlink(char const*)+0x78>
c0016447:	90                   	nop
c0016448:	b8 01 00 00 00       	mov    eax,0x1
c001644d:	8d 76 00             	lea    esi,[esi+0x0]
c0016450:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016456:	c3                   	ret    
c0016457:	90                   	nop

c0016458 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0016458:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001645e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0016465:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001646c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016470:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016474:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001647c:	75 0a                	jne    c0016488 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001647e:	b8 04 00 00 00       	mov    eax,0x4
c0016483:	e9 54 01 00 00       	jmp    c00165dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0016488:	83 ec 08             	sub    esp,0x8
c001648b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016492:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016496:	50                   	push   eax
c0016497:	e8 84 a1 fe ff       	call   c0000620 <strcpy>
c001649c:	83 c4 10             	add    esp,0x10
c001649f:	83 ec 08             	sub    esp,0x8
c00164a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00164a6:	50                   	push   eax
c00164a7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00164ae:	e8 09 fc ff ff       	call   c00160bc <FAT::fixFilepath(char*)>
c00164b3:	83 c4 10             	add    esp,0x10
c00164b6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00164be:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00164c6:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00164ca:	25 ff 00 00 00       	and    eax,0xff
c00164cf:	83 e0 01             	and    eax,0x1
c00164d2:	74 08                	je     c00164dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00164d4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00164dc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00164e0:	25 ff 00 00 00       	and    eax,0xff
c00164e5:	83 e0 02             	and    eax,0x2
c00164e8:	74 0a                	je     c00164f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00164ea:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00164f2:	66 90                	xchg   ax,ax
c00164f4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00164f8:	25 ff 00 00 00       	and    eax,0xff
c00164fd:	83 e0 04             	and    eax,0x4
c0016500:	74 0a                	je     c001650c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c0016502:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001650a:	66 90                	xchg   ax,ax
c001650c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016510:	25 ff 00 00 00       	and    eax,0xff
c0016515:	83 e0 08             	and    eax,0x8
c0016518:	74 0a                	je     c0016524 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c001651a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0016522:	66 90                	xchg   ax,ax
c0016524:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016528:	25 ff 00 00 00       	and    eax,0xff
c001652d:	83 e0 01             	and    eax,0x1
c0016530:	74 0a                	je     c001653c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0016532:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001653a:	66 90                	xchg   ax,ax
c001653c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016540:	25 ff 00 00 00       	and    eax,0xff
c0016545:	83 e0 02             	and    eax,0x2
c0016548:	74 0a                	je     c0016554 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001654a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0016552:	66 90                	xchg   ax,ax
c0016554:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016558:	25 ff 00 00 00       	and    eax,0xff
c001655d:	83 e0 04             	and    eax,0x4
c0016560:	74 0a                	je     c001656c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0016562:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001656a:	66 90                	xchg   ax,ax
c001656c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016570:	25 ff 00 00 00       	and    eax,0xff
c0016575:	83 e0 08             	and    eax,0x8
c0016578:	74 0a                	je     c0016584 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001657a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0016582:	66 90                	xchg   ax,ax
c0016584:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001658b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0016592:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0016599:	31 d2                	xor    edx,edx
c001659b:	88 c2                	mov    dl,al
c001659d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00165a4:	25 ff 00 00 00       	and    eax,0xff
c00165a9:	83 ec 04             	sub    esp,0x4
c00165ac:	52                   	push   edx
c00165ad:	50                   	push   eax
c00165ae:	8d 44 24 24          	lea    eax,[esp+0x24]
c00165b2:	50                   	push   eax
c00165b3:	e8 72 e5 fe ff       	call   c0004b2a <f_chmod>
c00165b8:	83 c4 10             	add    esp,0x10
c00165bb:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00165c2:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00165c9:	85 c0                	test   eax,eax
c00165cb:	75 07                	jne    c00165d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00165cd:	b8 00 00 00 00       	mov    eax,0x0
c00165d2:	eb 08                	jmp    c00165dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00165d4:	b8 01 00 00 00       	mov    eax,0x1
c00165d9:	8d 76 00             	lea    esi,[esi+0x0]
c00165dc:	81 c4 2c 01 00 00    	add    esp,0x12c
c00165e2:	c3                   	ret    
c00165e3:	90                   	nop

c00165e4 <FAT::rename(char const*, char const*)>:
c00165e4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00165ea:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00165f2:	74 0c                	je     c0016600 <FAT::rename(char const*, char const*)+0x1c>
c00165f4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00165fc:	75 0e                	jne    c001660c <FAT::rename(char const*, char const*)+0x28>
c00165fe:	66 90                	xchg   ax,ax
c0016600:	b8 04 00 00 00       	mov    eax,0x4
c0016605:	e9 9e 00 00 00       	jmp    c00166a8 <FAT::rename(char const*, char const*)+0xc4>
c001660a:	66 90                	xchg   ax,ax
c001660c:	83 ec 08             	sub    esp,0x8
c001660f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0016616:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001661d:	50                   	push   eax
c001661e:	e8 fd 9f fe ff       	call   c0000620 <strcpy>
c0016623:	83 c4 10             	add    esp,0x10
c0016626:	83 ec 08             	sub    esp,0x8
c0016629:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0016630:	50                   	push   eax
c0016631:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0016638:	e8 7f fa ff ff       	call   c00160bc <FAT::fixFilepath(char*)>
c001663d:	83 c4 10             	add    esp,0x10
c0016640:	83 ec 08             	sub    esp,0x8
c0016643:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001664a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001664e:	50                   	push   eax
c001664f:	e8 cc 9f fe ff       	call   c0000620 <strcpy>
c0016654:	83 c4 10             	add    esp,0x10
c0016657:	83 ec 08             	sub    esp,0x8
c001665a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001665e:	50                   	push   eax
c001665f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0016666:	e8 51 fa ff ff       	call   c00160bc <FAT::fixFilepath(char*)>
c001666b:	83 c4 10             	add    esp,0x10
c001666e:	83 ec 08             	sub    esp,0x8
c0016671:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016675:	50                   	push   eax
c0016676:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001667d:	50                   	push   eax
c001667e:	e8 f1 e2 fe ff       	call   c0004974 <f_rename>
c0016683:	83 c4 10             	add    esp,0x10
c0016686:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001668d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0016694:	85 c0                	test   eax,eax
c0016696:	75 08                	jne    c00166a0 <FAT::rename(char const*, char const*)+0xbc>
c0016698:	b8 00 00 00 00       	mov    eax,0x0
c001669d:	eb 09                	jmp    c00166a8 <FAT::rename(char const*, char const*)+0xc4>
c001669f:	90                   	nop
c00166a0:	b8 01 00 00 00       	mov    eax,0x1
c00166a5:	8d 76 00             	lea    esi,[esi+0x0]
c00166a8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00166ae:	c3                   	ret    
c00166af:	90                   	nop

c00166b0 <FAT::mkdir(char const*)>:
c00166b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00166b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00166be:	75 08                	jne    c00166c8 <FAT::mkdir(char const*)+0x18>
c00166c0:	b8 04 00 00 00       	mov    eax,0x4
c00166c5:	eb 61                	jmp    c0016728 <FAT::mkdir(char const*)+0x78>
c00166c7:	90                   	nop
c00166c8:	83 ec 08             	sub    esp,0x8
c00166cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00166d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00166d6:	50                   	push   eax
c00166d7:	e8 44 9f fe ff       	call   c0000620 <strcpy>
c00166dc:	83 c4 10             	add    esp,0x10
c00166df:	83 ec 08             	sub    esp,0x8
c00166e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00166e6:	50                   	push   eax
c00166e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00166ee:	e8 c9 f9 ff ff       	call   c00160bc <FAT::fixFilepath(char*)>
c00166f3:	83 c4 10             	add    esp,0x10
c00166f6:	83 ec 0c             	sub    esp,0xc
c00166f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00166fd:	50                   	push   eax
c00166fe:	e8 d6 e0 fe ff       	call   c00047d9 <f_mkdir>
c0016703:	83 c4 10             	add    esp,0x10
c0016706:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001670d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0016714:	85 c0                	test   eax,eax
c0016716:	75 08                	jne    c0016720 <FAT::mkdir(char const*)+0x70>
c0016718:	b8 00 00 00 00       	mov    eax,0x0
c001671d:	eb 09                	jmp    c0016728 <FAT::mkdir(char const*)+0x78>
c001671f:	90                   	nop
c0016720:	b8 01 00 00 00       	mov    eax,0x1
c0016725:	8d 76 00             	lea    esi,[esi+0x0]
c0016728:	81 c4 1c 01 00 00    	add    esp,0x11c
c001672e:	c3                   	ret    
c001672f:	90                   	nop

c0016730 <FAT::exists(char const*)>:
c0016730:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0016736:	83 ec 08             	sub    esp,0x8
c0016739:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016740:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016744:	50                   	push   eax
c0016745:	e8 d6 9e fe ff       	call   c0000620 <strcpy>
c001674a:	83 c4 10             	add    esp,0x10
c001674d:	83 ec 08             	sub    esp,0x8
c0016750:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016754:	50                   	push   eax
c0016755:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001675c:	e8 5b f9 ff ff       	call   c00160bc <FAT::fixFilepath(char*)>
c0016761:	83 c4 10             	add    esp,0x10
c0016764:	83 ec 08             	sub    esp,0x8
c0016767:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001676e:	50                   	push   eax
c001676f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016773:	50                   	push   eax
c0016774:	e8 d9 dc fe ff       	call   c0004452 <f_stat>
c0016779:	83 c4 10             	add    esp,0x10
c001677c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016783:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001678a:	85 c0                	test   eax,eax
c001678c:	75 06                	jne    c0016794 <FAT::exists(char const*)+0x64>
c001678e:	b0 01                	mov    al,0x1
c0016790:	eb 06                	jmp    c0016798 <FAT::exists(char const*)+0x68>
c0016792:	66 90                	xchg   ax,ax
c0016794:	b0 00                	mov    al,0x0
c0016796:	66 90                	xchg   ax,ax
c0016798:	81 c4 2c 02 00 00    	add    esp,0x22c
c001679e:	c3                   	ret    
c001679f:	90                   	nop

c00167a0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00167a0:	b8 08 00 00 00       	mov    eax,0x8
c00167a5:	c3                   	ret    

c00167a6 <ISO9660::seek(void*, unsigned long long)>:
c00167a6:	53                   	push   ebx
c00167a7:	b8 04 00 00 00       	mov    eax,0x4
c00167ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167b8:	85 d2                	test   edx,edx
c00167ba:	74 17                	je     c00167d3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00167bc:	89 c8                	mov    eax,ecx
c00167be:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00167c1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00167c4:	b8 01 00 00 00       	mov    eax,0x1
c00167c9:	73 08                	jae    c00167d3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00167cb:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00167ce:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00167d1:	31 c0                	xor    eax,eax
c00167d3:	5b                   	pop    ebx
c00167d4:	c3                   	ret    
c00167d5:	90                   	nop

c00167d6 <ISO9660::tell(void*, unsigned long long*)>:
c00167d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00167da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00167de:	85 d2                	test   edx,edx
c00167e0:	74 12                	je     c00167f4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00167e2:	85 c0                	test   eax,eax
c00167e4:	74 0e                	je     c00167f4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00167e6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00167e9:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00167ec:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00167ef:	89 10                	mov    DWORD PTR [eax],edx
c00167f1:	31 c0                	xor    eax,eax
c00167f3:	c3                   	ret    
c00167f4:	b8 04 00 00 00       	mov    eax,0x4
c00167f9:	c3                   	ret    

c00167fa <ISO9660::getName()>:
c00167fa:	b8 24 e5 01 c0       	mov    eax,0xc001e524
c00167ff:	c3                   	ret    

c0016800 <ISO9660::stat(void*, unsigned long long*)>:
c0016800:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016804:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016808:	85 d2                	test   edx,edx
c001680a:	74 12                	je     c001681e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001680c:	85 c0                	test   eax,eax
c001680e:	74 0e                	je     c001681e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0016810:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016813:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0016816:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0016819:	89 10                	mov    DWORD PTR [eax],edx
c001681b:	31 c0                	xor    eax,eax
c001681d:	c3                   	ret    
c001681e:	b8 04 00 00 00       	mov    eax,0x4
c0016823:	c3                   	ret    

c0016824 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0016824:	b8 01 00 00 00       	mov    eax,0x1
c0016829:	c3                   	ret    

c001682a <ISO9660::unlink(char const*)>:
c001682a:	b8 01 00 00 00       	mov    eax,0x1
c001682f:	c3                   	ret    

c0016830 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0016830:	b8 01 00 00 00       	mov    eax,0x1
c0016835:	c3                   	ret    

c0016836 <ISO9660::rename(char const*, char const*)>:
c0016836:	b8 01 00 00 00       	mov    eax,0x1
c001683b:	c3                   	ret    

c001683c <ISO9660::mkdir(char const*)>:
c001683c:	b8 01 00 00 00       	mov    eax,0x1
c0016841:	c3                   	ret    

c0016842 <ISO9660::close(void*)>:
c0016842:	83 ec 0c             	sub    esp,0xc
c0016845:	b8 04 00 00 00       	mov    eax,0x4
c001684a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001684e:	85 d2                	test   edx,edx
c0016850:	74 0e                	je     c0016860 <ISO9660::close(void*)+0x1e>
c0016852:	83 ec 0c             	sub    esp,0xc
c0016855:	52                   	push   edx
c0016856:	e8 16 03 ff ff       	call   c0006b71 <free>
c001685b:	83 c4 10             	add    esp,0x10
c001685e:	31 c0                	xor    eax,eax
c0016860:	83 c4 0c             	add    esp,0xc
c0016863:	c3                   	ret    

c0016864 <ISO9660::closeDir(void*)>:
c0016864:	83 ec 0c             	sub    esp,0xc
c0016867:	b8 04 00 00 00       	mov    eax,0x4
c001686c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016870:	85 d2                	test   edx,edx
c0016872:	74 0e                	je     c0016882 <ISO9660::closeDir(void*)+0x1e>
c0016874:	83 ec 0c             	sub    esp,0xc
c0016877:	52                   	push   edx
c0016878:	e8 f4 02 ff ff       	call   c0006b71 <free>
c001687d:	83 c4 10             	add    esp,0x10
c0016880:	31 c0                	xor    eax,eax
c0016882:	83 c4 0c             	add    esp,0xc
c0016885:	c3                   	ret    

c0016886 <ISO9660::~ISO9660()>:
c0016886:	83 ec 0c             	sub    esp,0xc
c0016889:	ba 48 e5 01 c0       	mov    edx,0xc001e548
c001688e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016892:	89 10                	mov    DWORD PTR [eax],edx
c0016894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016898:	83 ec 0c             	sub    esp,0xc
c001689b:	50                   	push   eax
c001689c:	e8 95 33 ff ff       	call   c0009c36 <Filesystem::~Filesystem()>
c00168a1:	83 c4 10             	add    esp,0x10
c00168a4:	90                   	nop
c00168a5:	83 c4 0c             	add    esp,0xc
c00168a8:	c3                   	ret    
c00168a9:	90                   	nop

c00168aa <ISO9660::~ISO9660()>:
c00168aa:	83 ec 0c             	sub    esp,0xc
c00168ad:	83 ec 0c             	sub    esp,0xc
c00168b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168b4:	e8 cd ff ff ff       	call   c0016886 <ISO9660::~ISO9660()>
c00168b9:	83 c4 10             	add    esp,0x10
c00168bc:	83 ec 08             	sub    esp,0x8
c00168bf:	6a 08                	push   0x8
c00168c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168c5:	e8 30 2f ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c00168ca:	83 c4 10             	add    esp,0x10
c00168cd:	83 c4 0c             	add    esp,0xc
c00168d0:	c3                   	ret    

c00168d1 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00168d1:	55                   	push   ebp
c00168d2:	31 c9                	xor    ecx,ecx
c00168d4:	57                   	push   edi
c00168d5:	56                   	push   esi
c00168d6:	53                   	push   ebx
c00168d7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00168db:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00168df:	89 eb                	mov    ebx,ebp
c00168e1:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00168e5:	39 ce                	cmp    esi,ecx
c00168e7:	7e 17                	jle    c0016900 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00168e9:	31 d2                	xor    edx,edx
c00168eb:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00168ef:	7d 13                	jge    c0016904 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00168f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00168f5:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00168f8:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00168fb:	75 0d                	jne    c001690a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00168fd:	42                   	inc    edx
c00168fe:	eb eb                	jmp    c00168eb <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0016900:	31 c0                	xor    eax,eax
c0016902:	eb 0a                	jmp    c001690e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0016904:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0016908:	eb 04                	jmp    c001690e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001690a:	41                   	inc    ecx
c001690b:	43                   	inc    ebx
c001690c:	eb d7                	jmp    c00168e5 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001690e:	5b                   	pop    ebx
c001690f:	5e                   	pop    esi
c0016910:	5f                   	pop    edi
c0016911:	5d                   	pop    ebp
c0016912:	c3                   	ret    

c0016913 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0016913:	57                   	push   edi
c0016914:	56                   	push   esi
c0016915:	53                   	push   ebx
c0016916:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001691a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001691e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016922:	39 35 a0 2a 02 c0    	cmp    DWORD PTR ds:0xc0022aa0,esi
c0016928:	75 08                	jne    c0016932 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001692a:	38 1d 54 ee 01 c0    	cmp    BYTE PTR ds:0xc001ee54,bl
c0016930:	74 4a                	je     c001697c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0016932:	83 ec 0c             	sub    esp,0xc
c0016935:	31 d2                	xor    edx,edx
c0016937:	68 c0 2a 02 c0       	push   0xc0022ac0
c001693c:	0f be c3             	movsx  eax,bl
c001693f:	6a 01                	push   0x1
c0016941:	52                   	push   edx
c0016942:	56                   	push   esi
c0016943:	ff 34 85 7c 18 02 c0 	push   DWORD PTR [eax*4-0x3ffde784]
c001694a:	e8 89 56 ff ff       	call   c000bfd8 <LogicalDisk::read(unsigned long long, int, void*)>
c001694f:	83 c4 20             	add    esp,0x20
c0016952:	85 c0                	test   eax,eax
c0016954:	75 0e                	jne    c0016964 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0016956:	89 35 a0 2a 02 c0    	mov    DWORD PTR ds:0xc0022aa0,esi
c001695c:	88 1d 54 ee 01 c0    	mov    BYTE PTR ds:0xc001ee54,bl
c0016962:	eb 18                	jmp    c001697c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0016964:	50                   	push   eax
c0016965:	68 00 08 00 00       	push   0x800
c001696a:	6a 00                	push   0x0
c001696c:	57                   	push   edi
c001696d:	e8 7e 9b fe ff       	call   c00004f0 <memset>
c0016972:	83 c4 10             	add    esp,0x10
c0016975:	b8 01 00 00 00       	mov    eax,0x1
c001697a:	eb 0e                	jmp    c001698a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001697c:	be c0 2a 02 c0       	mov    esi,0xc0022ac0
c0016981:	b9 00 08 00 00       	mov    ecx,0x800
c0016986:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016988:	31 c0                	xor    eax,eax
c001698a:	5b                   	pop    ebx
c001698b:	5e                   	pop    esi
c001698c:	5f                   	pop    edi
c001698d:	c3                   	ret    

c001698e <ISO9660::tryMount(LogicalDisk*, int)>:
c001698e:	81 ec 10 08 00 00    	sub    esp,0x810
c0016994:	c7 05 a0 2a 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0022aa0,0xdeadbeef
c001699e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00169a5:	83 c0 41             	add    eax,0x41
c00169a8:	0f be c0             	movsx  eax,al
c00169ab:	50                   	push   eax
c00169ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c00169b0:	50                   	push   eax
c00169b1:	6a 10                	push   0x10
c00169b3:	e8 5b ff ff ff       	call   c0016913 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00169b8:	83 c4 10             	add    esp,0x10
c00169bb:	31 d2                	xor    edx,edx
c00169bd:	85 c0                	test   eax,eax
c00169bf:	75 24                	jne    c00169e5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00169c1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00169c6:	75 1d                	jne    c00169e5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00169c8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00169cd:	75 16                	jne    c00169e5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00169cf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00169d4:	75 0f                	jne    c00169e5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00169d6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00169db:	75 08                	jne    c00169e5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00169dd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00169e2:	0f 94 c2             	sete   dl
c00169e5:	88 d0                	mov    al,dl
c00169e7:	81 c4 0c 08 00 00    	add    esp,0x80c
c00169ed:	c3                   	ret    

c00169ee <ISO9660::read(void*, unsigned long, void*, int*)>:
c00169ee:	55                   	push   ebp
c00169ef:	57                   	push   edi
c00169f0:	56                   	push   esi
c00169f1:	53                   	push   ebx
c00169f2:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00169f8:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00169ff:	85 ed                	test   ebp,ebp
c0016a01:	0f 84 da 01 00 00    	je     c0016be1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0016a07:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0016a0f:	0f 84 cc 01 00 00    	je     c0016be1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0016a15:	b8 01 00 00 00       	mov    eax,0x1
c0016a1a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0016a1e:	0f 85 c2 01 00 00    	jne    c0016be6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0016a24:	31 d2                	xor    edx,edx
c0016a26:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0016a2d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016a30:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016a33:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016a36:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a39:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016a3d:	01 c8                	add    eax,ecx
c0016a3f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0016a42:	11 da                	adc    edx,ebx
c0016a44:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0016a48:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016a4c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016a50:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016a54:	19 d7                	sbb    edi,edx
c0016a56:	72 11                	jb     c0016a69 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0016a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016a5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016a67:	eb 0c                	jmp    c0016a75 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0016a69:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0016a6d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016a71:	29 ce                	sub    esi,ecx
c0016a73:	19 df                	sbb    edi,ebx
c0016a75:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016a78:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0016a7b:	0f a4 c2 0b          	shld   edx,eax,0xb
c0016a7f:	c1 e0 0b             	shl    eax,0xb
c0016a82:	01 c8                	add    eax,ecx
c0016a84:	11 da                	adc    edx,ebx
c0016a86:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a89:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016a8d:	51                   	push   ecx
c0016a8e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016a92:	50                   	push   eax
c0016a93:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0016a97:	53                   	push   ebx
c0016a98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016a9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016aa0:	0f ac d0 0b          	shrd   eax,edx,0xb
c0016aa4:	50                   	push   eax
c0016aa5:	e8 69 fe ff ff       	call   c0016913 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016aaa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0016aad:	b8 00 08 00 00       	mov    eax,0x800
c0016ab2:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0016ab8:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0016abc:	29 d0                	sub    eax,edx
c0016abe:	83 c4 10             	add    esp,0x10
c0016ac1:	89 f9                	mov    ecx,edi
c0016ac3:	39 c6                	cmp    esi,eax
c0016ac5:	83 d9 00             	sbb    ecx,0x0
c0016ac8:	7d 1b                	jge    c0016ae5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0016aca:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016acf:	75 12                	jne    c0016ae3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0016ad1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016ad8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016ade:	e9 fa 00 00 00       	jmp    c0016bdd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0016ae3:	89 f0                	mov    eax,esi
c0016ae5:	01 d3                	add    ebx,edx
c0016ae7:	31 d2                	xor    edx,edx
c0016ae9:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016aed:	39 c2                	cmp    edx,eax
c0016aef:	7d 14                	jge    c0016b05 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0016af1:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0016af8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016afc:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0016aff:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0016b02:	42                   	inc    edx
c0016b03:	eb e8                	jmp    c0016aed <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0016b05:	89 c2                	mov    edx,eax
c0016b07:	85 c0                	test   eax,eax
c0016b09:	79 02                	jns    c0016b0d <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0016b0b:	31 d2                	xor    edx,edx
c0016b0d:	01 c2                	add    edx,eax
c0016b0f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016b12:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0016b19:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0016b1d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016b21:	99                   	cdq    
c0016b22:	01 c1                	add    ecx,eax
c0016b24:	11 d3                	adc    ebx,edx
c0016b26:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0016b2a:	29 c6                	sub    esi,eax
c0016b2c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0016b30:	19 d7                	sbb    edi,edx
c0016b32:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b35:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0016b39:	b8 ff 07 00 00       	mov    eax,0x7ff
c0016b3e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0016b41:	b8 00 00 00 00       	mov    eax,0x0
c0016b46:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0016b4a:	7d 43                	jge    c0016b8f <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0016b4c:	52                   	push   edx
c0016b4d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016b51:	50                   	push   eax
c0016b52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b5a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b5e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0016b62:	50                   	push   eax
c0016b63:	e8 ab fd ff ff       	call   c0016913 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016b68:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0016b70:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0016b75:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0016b7d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0016b85:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0016b8a:	83 c4 10             	add    esp,0x10
c0016b8d:	eb aa                	jmp    c0016b39 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0016b8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b93:	0b 04 24             	or     eax,DWORD PTR [esp]
c0016b96:	74 2a                	je     c0016bc2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0016b98:	50                   	push   eax
c0016b99:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016b9d:	50                   	push   eax
c0016b9e:	8d 74 24 28          	lea    esi,[esp+0x28]
c0016ba2:	56                   	push   esi
c0016ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016ba7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016bab:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0016baf:	51                   	push   ecx
c0016bb0:	e8 5e fd ff ff       	call   c0016913 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016bb5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016bb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016bbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bbf:	83 c4 10             	add    esp,0x10
c0016bc2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016bc9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016bcd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bd1:	89 18                	mov    DWORD PTR [eax],ebx
c0016bd3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bd7:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016bda:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0016bdd:	31 c0                	xor    eax,eax
c0016bdf:	eb 05                	jmp    c0016be6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0016be1:	b8 04 00 00 00       	mov    eax,0x4
c0016be6:	81 c4 2c 08 00 00    	add    esp,0x82c
c0016bec:	5b                   	pop    ebx
c0016bed:	5e                   	pop    esi
c0016bee:	5f                   	pop    edi
c0016bef:	5d                   	pop    ebp
c0016bf0:	c3                   	ret    
c0016bf1:	90                   	nop

c0016bf2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0016bf2:	55                   	push   ebp
c0016bf3:	57                   	push   edi
c0016bf4:	56                   	push   esi
c0016bf5:	53                   	push   ebx
c0016bf6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0016bfc:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0016c03:	85 ed                	test   ebp,ebp
c0016c05:	0f 84 4f 02 00 00    	je     c0016e5a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0016c0b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0016c13:	0f 84 41 02 00 00    	je     c0016e5a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0016c19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016c1c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0016c1f:	75 0a                	jne    c0016c2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0016c21:	b8 07 00 00 00       	mov    eax,0x7
c0016c26:	e9 34 02 00 00       	jmp    c0016e5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0016c2b:	50                   	push   eax
c0016c2c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016c30:	50                   	push   eax
c0016c31:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0016c38:	53                   	push   ebx
c0016c39:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016c3c:	c1 e0 0b             	shl    eax,0xb
c0016c3f:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0016c42:	c1 e8 0b             	shr    eax,0xb
c0016c45:	50                   	push   eax
c0016c46:	e8 c8 fc ff ff       	call   c0016913 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016c4b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016c4e:	83 c4 10             	add    esp,0x10
c0016c51:	89 c1                	mov    ecx,eax
c0016c53:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016c56:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0016c5c:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0016c5f:	84 db                	test   bl,bl
c0016c61:	0f 85 8b 00 00 00    	jne    c0016cf2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0016c67:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0016c6d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016c70:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0016c76:	29 c6                	sub    esi,eax
c0016c78:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016c7c:	89 f3                	mov    ebx,esi
c0016c7e:	89 f1                	mov    ecx,esi
c0016c80:	c1 fb 1f             	sar    ebx,0x1f
c0016c83:	01 f0                	add    eax,esi
c0016c85:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0016c88:	11 da                	adc    edx,ebx
c0016c8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c8d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016c91:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0016c94:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016c97:	89 d8                	mov    eax,ebx
c0016c99:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0016c9d:	ba 00 00 00 00       	mov    edx,0x0
c0016ca2:	19 f8                	sbb    eax,edi
c0016ca4:	b8 00 00 00 00       	mov    eax,0x0
c0016ca9:	73 08                	jae    c0016cb3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0016cab:	89 f0                	mov    eax,esi
c0016cad:	89 fa                	mov    edx,edi
c0016caf:	29 c8                	sub    eax,ecx
c0016cb1:	19 da                	sbb    edx,ebx
c0016cb3:	89 d7                	mov    edi,edx
c0016cb5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0016cb8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016cbb:	09 c7                	or     edi,eax
c0016cbd:	0f 84 5e ff ff ff    	je     c0016c21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0016cc3:	57                   	push   edi
c0016cc4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016cc8:	50                   	push   eax
c0016cc9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0016cd0:	53                   	push   ebx
c0016cd1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016cd4:	c1 e0 0b             	shl    eax,0xb
c0016cd7:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016cdb:	c1 e8 0b             	shr    eax,0xb
c0016cde:	50                   	push   eax
c0016cdf:	e8 2f fc ff ff       	call   c0016913 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016ce4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016ce7:	83 c4 10             	add    esp,0x10
c0016cea:	25 ff 07 00 00       	and    eax,0x7ff
c0016cef:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0016cf2:	31 ff                	xor    edi,edi
c0016cf4:	56                   	push   esi
c0016cf5:	6a 28                	push   0x28
c0016cf7:	6a 00                	push   0x0
c0016cf9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016cfd:	50                   	push   eax
c0016cfe:	e8 ed 97 fe ff       	call   c00004f0 <memset>
c0016d03:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016d06:	25 ff 07 00 00       	and    eax,0x7ff
c0016d0b:	89 c6                	mov    esi,eax
c0016d0d:	83 c6 21             	add    esi,0x21
c0016d10:	83 d7 00             	adc    edi,0x0
c0016d13:	83 c4 10             	add    esp,0x10
c0016d16:	31 c9                	xor    ecx,ecx
c0016d18:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0016d1f:	83 f9 28             	cmp    ecx,0x28
c0016d22:	88 04 24             	mov    BYTE PTR [esp],al
c0016d25:	0f 94 c2             	sete   dl
c0016d28:	88 d0                	mov    al,dl
c0016d2a:	ba ff 07 00 00       	mov    edx,0x7ff
c0016d2f:	39 f2                	cmp    edx,esi
c0016d31:	ba 00 00 00 00       	mov    edx,0x0
c0016d36:	19 fa                	sbb    edx,edi
c0016d38:	0f 92 c2             	setb   dl
c0016d3b:	09 c2                	or     edx,eax
c0016d3d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0016d41:	0f 94 c0             	sete   al
c0016d44:	08 d0                	or     al,dl
c0016d46:	75 16                	jne    c0016d5e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0016d48:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0016d4c:	74 10                	je     c0016d5e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0016d4e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016d51:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0016d55:	41                   	inc    ecx
c0016d56:	83 c6 01             	add    esi,0x1
c0016d59:	83 d7 00             	adc    edi,0x0
c0016d5c:	eb ba                	jmp    c0016d18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0016d5e:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0016d65:	83 ec 0c             	sub    esp,0xc
c0016d68:	8d 74 24 24          	lea    esi,[esp+0x24]
c0016d6c:	56                   	push   esi
c0016d6d:	e8 ee 97 fe ff       	call   c0000560 <strlen>
c0016d72:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0016d79:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016d7d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0016d85:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016d88:	5a                   	pop    edx
c0016d89:	25 ff 07 00 00       	and    eax,0x7ff
c0016d8e:	59                   	pop    ecx
c0016d8f:	01 f8                	add    eax,edi
c0016d91:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c0016d98:	0f 95 c0             	setne  al
c0016d9b:	0f b6 c0             	movzx  eax,al
c0016d9e:	40                   	inc    eax
c0016d9f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016da3:	56                   	push   esi
c0016da4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016da8:	50                   	push   eax
c0016da9:	e8 72 98 fe ff       	call   c0000620 <strcpy>
c0016dae:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0016db2:	83 c4 10             	add    esp,0x10
c0016db5:	84 c0                	test   al,al
c0016db7:	75 21                	jne    c0016dda <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1e8>
c0016db9:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0016dc1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016dc9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0016dd1:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0016dd8:	eb 28                	jmp    c0016e02 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0016dda:	fe c8                	dec    al
c0016ddc:	75 24                	jne    c0016e02 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0016dde:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0016de6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016dee:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0016df6:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0016dfd:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0016e02:	8d 74 24 40          	lea    esi,[esp+0x40]
c0016e06:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0016e0d:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0016e14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e16:	0f b6 f3             	movzx  esi,bl
c0016e19:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0016e20:	31 db                	xor    ebx,ebx
c0016e22:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016e28:	89 df                	mov    edi,ebx
c0016e2a:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0016e2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016e30:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0016e33:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0016e36:	39 c6                	cmp    esi,eax
c0016e38:	19 d7                	sbb    edi,edx
c0016e3a:	72 10                	jb     c0016e4c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25a>
c0016e3c:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0016e43:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0016e4a:	eb 0a                	jmp    c0016e56 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x264>
c0016e4c:	29 f0                	sub    eax,esi
c0016e4e:	19 da                	sbb    edx,ebx
c0016e50:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0016e53:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016e56:	31 c0                	xor    eax,eax
c0016e58:	eb 05                	jmp    c0016e5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0016e5a:	b8 04 00 00 00       	mov    eax,0x4
c0016e5f:	81 c4 5c 09 00 00    	add    esp,0x95c
c0016e65:	5b                   	pop    ebx
c0016e66:	5e                   	pop    esi
c0016e67:	5f                   	pop    edi
c0016e68:	5d                   	pop    ebp
c0016e69:	c3                   	ret    

c0016e6a <readRoot(unsigned int*, unsigned int*, char)>:
c0016e6a:	57                   	push   edi
c0016e6b:	56                   	push   esi
c0016e6c:	81 ec 38 08 00 00    	sub    esp,0x838
c0016e72:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0016e7a:	50                   	push   eax
c0016e7b:	8d 44 24 38          	lea    eax,[esp+0x38]
c0016e7f:	50                   	push   eax
c0016e80:	6a 10                	push   0x10
c0016e82:	e8 8c fa ff ff       	call   c0016913 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016e87:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0016e8e:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0016e92:	b9 22 00 00 00       	mov    ecx,0x22
c0016e97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e99:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016ea0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ea4:	89 10                	mov    DWORD PTR [eax],edx
c0016ea6:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0016ead:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016eb1:	89 10                	mov    DWORD PTR [eax],edx
c0016eb3:	81 c4 44 08 00 00    	add    esp,0x844
c0016eb9:	b0 01                	mov    al,0x1
c0016ebb:	5e                   	pop    esi
c0016ebc:	5f                   	pop    edi
c0016ebd:	c3                   	ret    

c0016ebe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0016ebe:	55                   	push   ebp
c0016ebf:	57                   	push   edi
c0016ec0:	56                   	push   esi
c0016ec1:	53                   	push   ebx
c0016ec2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016ec8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0016ecf:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0016ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016eda:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0016ede:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016ee2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016ee6:	75 03                	jne    c0016eeb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0016ee8:	83 c3 02             	add    ebx,0x2
c0016eeb:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0016eee:	75 03                	jne    c0016ef3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0016ef0:	43                   	inc    ebx
c0016ef1:	eb f8                	jmp    c0016eeb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0016ef3:	52                   	push   edx
c0016ef4:	68 00 01 00 00       	push   0x100
c0016ef9:	6a 00                	push   0x0
c0016efb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0016eff:	50                   	push   eax
c0016f00:	e8 eb 95 fe ff       	call   c00004f0 <memset>
c0016f05:	83 c4 10             	add    esp,0x10
c0016f08:	31 d2                	xor    edx,edx
c0016f0a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0016f0d:	84 c0                	test   al,al
c0016f0f:	74 21                	je     c0016f32 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0016f11:	3c 2f                	cmp    al,0x2f
c0016f13:	75 0b                	jne    c0016f20 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0016f15:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0016f19:	bd 01 00 00 00       	mov    ebp,0x1
c0016f1e:	eb 14                	jmp    c0016f34 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0016f20:	8d 48 9f             	lea    ecx,[eax-0x61]
c0016f23:	80 f9 19             	cmp    cl,0x19
c0016f26:	77 03                	ja     c0016f2b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0016f28:	83 e8 20             	sub    eax,0x20
c0016f2b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0016f2f:	42                   	inc    edx
c0016f30:	eb d8                	jmp    c0016f0a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0016f32:	31 ed                	xor    ebp,ebp
c0016f34:	83 ec 0c             	sub    esp,0xc
c0016f37:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016f3e:	e8 1e fc fe ff       	call   c0006b61 <malloc>
c0016f43:	89 c6                	mov    esi,eax
c0016f45:	89 c2                	mov    edx,eax
c0016f47:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0016f4e:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0016f54:	c1 ef 0b             	shr    edi,0xb
c0016f57:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0016f5e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016f62:	83 c4 10             	add    esp,0x10
c0016f65:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0016f6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f6e:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c0016f75:	74 29                	je     c0016fa0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c0016f77:	50                   	push   eax
c0016f78:	57                   	push   edi
c0016f79:	52                   	push   edx
c0016f7a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016f7e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0016f85:	e8 89 f9 ff ff       	call   c0016913 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016f8e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0016f95:	81 c2 00 08 00 00    	add    edx,0x800
c0016f9b:	83 c4 10             	add    esp,0x10
c0016f9e:	eb ca                	jmp    c0016f6a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c0016fa0:	83 ec 0c             	sub    esp,0xc
c0016fa3:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0016fa7:	57                   	push   edi
c0016fa8:	e8 b3 95 fe ff       	call   c0000560 <strlen>
c0016fad:	50                   	push   eax
c0016fae:	57                   	push   edi
c0016faf:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0016fb6:	56                   	push   esi
c0016fb7:	e8 15 f9 ff ff       	call   c00168d1 <__memmem(unsigned char*, int, unsigned char*, int)>
c0016fbc:	83 c4 20             	add    esp,0x20
c0016fbf:	85 c0                	test   eax,eax
c0016fc1:	75 13                	jne    c0016fd6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c0016fc3:	83 ec 0c             	sub    esp,0xc
c0016fc6:	56                   	push   esi
c0016fc7:	e8 a5 fb fe ff       	call   c0006b71 <free>
c0016fcc:	83 c4 10             	add    esp,0x10
c0016fcf:	31 c0                	xor    eax,eax
c0016fd1:	e9 b3 00 00 00       	jmp    c0017089 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c0016fd6:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0016fda:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0016fde:	c1 e7 08             	shl    edi,0x8
c0016fe1:	c1 e2 10             	shl    edx,0x10
c0016fe4:	09 d7                	or     edi,edx
c0016fe6:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0016fea:	09 d7                	or     edi,edx
c0016fec:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0016ff0:	c1 e2 18             	shl    edx,0x18
c0016ff3:	09 d7                	or     edi,edx
c0016ff5:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0016ff9:	89 d1                	mov    ecx,edx
c0016ffb:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0016fff:	c1 e1 08             	shl    ecx,0x8
c0017002:	c1 e2 10             	shl    edx,0x10
c0017005:	09 ca                	or     edx,ecx
c0017007:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001700b:	09 ca                	or     edx,ecx
c001700d:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0017011:	c1 e1 18             	shl    ecx,0x18
c0017014:	09 ca                	or     edx,ecx
c0017016:	89 e9                	mov    ecx,ebp
c0017018:	84 c9                	test   cl,cl
c001701a:	74 3c                	je     c0017058 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001701c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017020:	83 ec 0c             	sub    esp,0xc
c0017023:	56                   	push   esi
c0017024:	e8 48 fb fe ff       	call   c0006b71 <free>
c0017029:	83 c4 0c             	add    esp,0xc
c001702c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017033:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017038:	50                   	push   eax
c0017039:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017040:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017047:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001704b:	52                   	push   edx
c001704c:	57                   	push   edi
c001704d:	53                   	push   ebx
c001704e:	e8 6b fe ff ff       	call   c0016ebe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0017053:	83 c4 20             	add    esp,0x20
c0017056:	eb 31                	jmp    c0017089 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c0017058:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001705b:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0017062:	d0 e8                	shr    al,1
c0017064:	89 3b                	mov    DWORD PTR [ebx],edi
c0017066:	83 e0 01             	and    eax,0x1
c0017069:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017070:	83 ec 0c             	sub    esp,0xc
c0017073:	89 13                	mov    DWORD PTR [ebx],edx
c0017075:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001707c:	89 03                	mov    DWORD PTR [ebx],eax
c001707e:	56                   	push   esi
c001707f:	e8 ed fa fe ff       	call   c0006b71 <free>
c0017084:	83 c4 10             	add    esp,0x10
c0017087:	b0 01                	mov    al,0x1
c0017089:	81 c4 1c 01 00 00    	add    esp,0x11c
c001708f:	5b                   	pop    ebx
c0017090:	5e                   	pop    esi
c0017091:	5f                   	pop    edi
c0017092:	5d                   	pop    ebp
c0017093:	c3                   	ret    

c0017094 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0017094:	55                   	push   ebp
c0017095:	57                   	push   edi
c0017096:	56                   	push   esi
c0017097:	53                   	push   ebx
c0017098:	83 ec 20             	sub    esp,0x20
c001709b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001709f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00170a3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00170a7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00170af:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00170b7:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00170bc:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00170c2:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00170c8:	57                   	push   edi
c00170c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00170cd:	50                   	push   eax
c00170ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00170d2:	50                   	push   eax
c00170d3:	e8 92 fd ff ff       	call   c0016e6a <readRoot(unsigned int*, unsigned int*, char)>
c00170d8:	5a                   	pop    edx
c00170d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00170dd:	e8 7e 94 fe ff       	call   c0000560 <strlen>
c00170e2:	83 c4 10             	add    esp,0x10
c00170e5:	83 f8 03             	cmp    eax,0x3
c00170e8:	77 17                	ja     c0017101 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00170ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170ee:	89 03                	mov    DWORD PTR [ebx],eax
c00170f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170f4:	89 06                	mov    DWORD PTR [esi],eax
c00170f6:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00170fd:	b0 01                	mov    al,0x1
c00170ff:	eb 19                	jmp    c001711a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0017101:	50                   	push   eax
c0017102:	55                   	push   ebp
c0017103:	57                   	push   edi
c0017104:	56                   	push   esi
c0017105:	53                   	push   ebx
c0017106:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001710a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001710e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017112:	e8 a7 fd ff ff       	call   c0016ebe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0017117:	83 c4 20             	add    esp,0x20
c001711a:	83 c4 1c             	add    esp,0x1c
c001711d:	5b                   	pop    ebx
c001711e:	5e                   	pop    esi
c001711f:	5f                   	pop    edi
c0017120:	5d                   	pop    ebp
c0017121:	c3                   	ret    

c0017122 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017122:	57                   	push   edi
c0017123:	56                   	push   esi
c0017124:	53                   	push   ebx
c0017125:	83 ec 10             	sub    esp,0x10
c0017128:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001712c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0017130:	85 ff                	test   edi,edi
c0017132:	0f 84 8b 00 00 00    	je     c00171c3 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0017138:	85 f6                	test   esi,esi
c001713a:	0f 84 83 00 00 00    	je     c00171c3 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0017140:	b8 03 00 00 00       	mov    eax,0x3
c0017145:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001714a:	75 7c                	jne    c00171c8 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001714c:	83 ec 0c             	sub    esp,0xc
c001714f:	6a 1c                	push   0x1c
c0017151:	e8 0b fa fe ff       	call   c0006b61 <malloc>
c0017156:	89 07                	mov    DWORD PTR [edi],eax
c0017158:	89 c3                	mov    ebx,eax
c001715a:	58                   	pop    eax
c001715b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001715f:	50                   	push   eax
c0017160:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017163:	50                   	push   eax
c0017164:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017168:	50                   	push   eax
c0017169:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001716d:	50                   	push   eax
c001716e:	56                   	push   esi
c001716f:	e8 20 ff ff ff       	call   c0017094 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0017174:	83 c4 20             	add    esp,0x20
c0017177:	84 c0                	test   al,al
c0017179:	74 07                	je     c0017182 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001717b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017180:	74 0b                	je     c001718d <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0017182:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0017186:	b8 01 00 00 00       	mov    eax,0x1
c001718b:	eb 3b                	jmp    c00171c8 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001718d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017191:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0017195:	89 03                	mov    DWORD PTR [ebx],eax
c0017197:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001719e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171a2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00171a9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00171b0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00171b3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00171ba:	8a 06                	mov    al,BYTE PTR [esi]
c00171bc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00171bf:	31 c0                	xor    eax,eax
c00171c1:	eb 05                	jmp    c00171c8 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00171c3:	b8 04 00 00 00       	mov    eax,0x4
c00171c8:	83 c4 10             	add    esp,0x10
c00171cb:	5b                   	pop    ebx
c00171cc:	5e                   	pop    esi
c00171cd:	5f                   	pop    edi
c00171ce:	c3                   	ret    
c00171cf:	90                   	nop

c00171d0 <ISO9660::exists(char const*)>:
c00171d0:	83 ec 28             	sub    esp,0x28
c00171d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171d7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00171db:	52                   	push   edx
c00171dc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00171df:	52                   	push   edx
c00171e0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00171e4:	52                   	push   edx
c00171e5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00171e9:	52                   	push   edx
c00171ea:	50                   	push   eax
c00171eb:	e8 a4 fe ff ff       	call   c0017094 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00171f0:	83 c4 3c             	add    esp,0x3c
c00171f3:	c3                   	ret    

c00171f4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00171f4:	56                   	push   esi
c00171f5:	53                   	push   ebx
c00171f6:	83 ec 14             	sub    esp,0x14
c00171f9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00171fd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017201:	85 db                	test   ebx,ebx
c0017203:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017207:	0f 94 c2             	sete   dl
c001720a:	85 f6                	test   esi,esi
c001720c:	0f 94 c0             	sete   al
c001720f:	08 c2                	or     dl,al
c0017211:	75 68                	jne    c001727b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0017213:	85 c9                	test   ecx,ecx
c0017215:	74 64                	je     c001727b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0017217:	83 ec 0c             	sub    esp,0xc
c001721a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001721d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017221:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0017227:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001722e:	50                   	push   eax
c001722f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0017232:	50                   	push   eax
c0017233:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017237:	50                   	push   eax
c0017238:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001723c:	50                   	push   eax
c001723d:	51                   	push   ecx
c001723e:	e8 51 fe ff ff       	call   c0017094 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0017243:	83 c4 20             	add    esp,0x20
c0017246:	ba 01 00 00 00       	mov    edx,0x1
c001724b:	84 c0                	test   al,al
c001724d:	74 31                	je     c0017280 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001724f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017253:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001725a:	89 03                	mov    DWORD PTR [ebx],eax
c001725c:	ba 00 00 00 00       	mov    edx,0x0
c0017261:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017265:	85 c0                	test   eax,eax
c0017267:	0f 95 06             	setne  BYTE PTR [esi]
c001726a:	74 14                	je     c0017280 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001726c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0017272:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017279:	eb 05                	jmp    c0017280 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001727b:	ba 04 00 00 00       	mov    edx,0x4
c0017280:	83 c4 14             	add    esp,0x14
c0017283:	89 d0                	mov    eax,edx
c0017285:	5b                   	pop    ebx
c0017286:	5e                   	pop    esi
c0017287:	c3                   	ret    

c0017288 <ISO9660::openDir(char const*, void**)>:
c0017288:	57                   	push   edi
c0017289:	56                   	push   esi
c001728a:	53                   	push   ebx
c001728b:	83 ec 10             	sub    esp,0x10
c001728e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0017292:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0017296:	85 ff                	test   edi,edi
c0017298:	74 7b                	je     c0017315 <ISO9660::openDir(char const*, void**)+0x8d>
c001729a:	85 f6                	test   esi,esi
c001729c:	74 77                	je     c0017315 <ISO9660::openDir(char const*, void**)+0x8d>
c001729e:	83 ec 0c             	sub    esp,0xc
c00172a1:	6a 1c                	push   0x1c
c00172a3:	e8 b9 f8 fe ff       	call   c0006b61 <malloc>
c00172a8:	89 07                	mov    DWORD PTR [edi],eax
c00172aa:	89 c3                	mov    ebx,eax
c00172ac:	58                   	pop    eax
c00172ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172b1:	50                   	push   eax
c00172b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00172b5:	50                   	push   eax
c00172b6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00172ba:	50                   	push   eax
c00172bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00172bf:	50                   	push   eax
c00172c0:	56                   	push   esi
c00172c1:	e8 ce fd ff ff       	call   c0017094 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00172c6:	83 c4 20             	add    esp,0x20
c00172c9:	84 c0                	test   al,al
c00172cb:	74 07                	je     c00172d4 <ISO9660::openDir(char const*, void**)+0x4c>
c00172cd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00172d2:	75 0b                	jne    c00172df <ISO9660::openDir(char const*, void**)+0x57>
c00172d4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00172d8:	b8 01 00 00 00       	mov    eax,0x1
c00172dd:	eb 3b                	jmp    c001731a <ISO9660::openDir(char const*, void**)+0x92>
c00172df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172e3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00172e7:	89 03                	mov    DWORD PTR [ebx],eax
c00172e9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00172f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172f4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00172fb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017302:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0017305:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001730c:	8a 06                	mov    al,BYTE PTR [esi]
c001730e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0017311:	31 c0                	xor    eax,eax
c0017313:	eb 05                	jmp    c001731a <ISO9660::openDir(char const*, void**)+0x92>
c0017315:	b8 04 00 00 00       	mov    eax,0x4
c001731a:	83 c4 10             	add    esp,0x10
c001731d:	5b                   	pop    ebx
c001731e:	5e                   	pop    esi
c001731f:	5f                   	pop    edi
c0017320:	c3                   	ret    
c0017321:	90                   	nop

c0017322 <ISO9660::ISO9660()>:
c0017322:	83 ec 0c             	sub    esp,0xc
c0017325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017329:	83 ec 0c             	sub    esp,0xc
c001732c:	50                   	push   eax
c001732d:	e8 e0 28 ff ff       	call   c0009c12 <Filesystem::Filesystem()>
c0017332:	83 c4 10             	add    esp,0x10
c0017335:	ba 48 e5 01 c0       	mov    edx,0xc001e548
c001733a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001733e:	89 10                	mov    DWORD PTR [eax],edx
c0017340:	90                   	nop
c0017341:	83 c4 0c             	add    esp,0xc
c0017344:	c3                   	ret    
c0017345:	90                   	nop

c0017346 <SoundCard::beginPlayback()>:
c0017346:	c7 44 24 04 a8 e5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e5a8
c001734e:	e9 ec 80 ff ff       	jmp    c000f43f <Krnl::panic(char const*)>
c0017353:	90                   	nop

c0017354 <SoundCard::stopPlayback()>:
c0017354:	c7 44 24 04 a8 e5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e5a8
c001735c:	e9 de 80 ff ff       	jmp    c000f43f <Krnl::panic(char const*)>
c0017361:	90                   	nop

c0017362 <SoundCard::SoundCard(char const*)>:
c0017362:	83 ec 1c             	sub    esp,0x1c
c0017365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017369:	83 ec 08             	sub    esp,0x8
c001736c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017370:	50                   	push   eax
c0017371:	e8 52 3b ff ff       	call   c000aec8 <Device::Device(char const*)>
c0017376:	83 c4 10             	add    esp,0x10
c0017379:	ba f4 e5 01 c0       	mov    edx,0xc001e5f4
c001737e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017382:	89 10                	mov    DWORD PTR [eax],edx
c0017384:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017388:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001738f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017393:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001739d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173a1:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00173ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173af:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c00173b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173bd:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00173c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00173cf:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00173d4:	7f 19                	jg     c00173ef <SoundCard::SoundCard(char const*)+0x8d>
c00173d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00173de:	83 c2 54             	add    edx,0x54
c00173e1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00173e9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00173ed:	eb e0                	jmp    c00173cf <SoundCard::SoundCard(char const*)+0x6d>
c00173ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173f3:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00173fa:	90                   	nop
c00173fb:	83 c4 1c             	add    esp,0x1c
c00173fe:	c3                   	ret    
c00173ff:	90                   	nop

c0017400 <SoundCard::~SoundCard()>:
c0017400:	83 ec 0c             	sub    esp,0xc
c0017403:	ba f4 e5 01 c0       	mov    edx,0xc001e5f4
c0017408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001740c:	89 10                	mov    DWORD PTR [eax],edx
c001740e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017412:	83 ec 0c             	sub    esp,0xc
c0017415:	50                   	push   eax
c0017416:	e8 17 38 ff ff       	call   c000ac32 <Device::~Device()>
c001741b:	83 c4 10             	add    esp,0x10
c001741e:	90                   	nop
c001741f:	83 c4 0c             	add    esp,0xc
c0017422:	c3                   	ret    
c0017423:	90                   	nop

c0017424 <SoundCard::~SoundCard()>:
c0017424:	83 ec 0c             	sub    esp,0xc
c0017427:	83 ec 0c             	sub    esp,0xc
c001742a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001742e:	e8 cd ff ff ff       	call   c0017400 <SoundCard::~SoundCard()>
c0017433:	83 c4 10             	add    esp,0x10
c0017436:	83 ec 08             	sub    esp,0x8
c0017439:	68 e8 01 00 00       	push   0x1e8
c001743e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017442:	e8 b3 23 ff ff       	call   c00097fa <operator delete(void*, unsigned long)>
c0017447:	83 c4 10             	add    esp,0x10
c001744a:	83 c4 0c             	add    esp,0xc
c001744d:	c3                   	ret    

c001744e <SoundCard::configureRates(int, int, int)>:
c001744e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017452:	31 c0                	xor    eax,eax
c0017454:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001745b:	75 20                	jne    c001747d <SoundCard::configureRates(int, int, int)+0x2f>
c001745d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017461:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017467:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001746b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017475:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001747b:	b0 01                	mov    al,0x1
c001747d:	c3                   	ret    

c001747e <SoundCard::getSamples16(int, short*)>:
c001747e:	55                   	push   ebp
c001747f:	57                   	push   edi
c0017480:	31 ff                	xor    edi,edi
c0017482:	56                   	push   esi
c0017483:	53                   	push   ebx
c0017484:	31 db                	xor    ebx,ebx
c0017486:	83 ec 10             	sub    esp,0x10
c0017489:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001748d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017491:	8d 04 36             	lea    eax,[esi+esi*1]
c0017494:	50                   	push   eax
c0017495:	6a 00                	push   0x0
c0017497:	55                   	push   ebp
c0017498:	e8 53 90 fe ff       	call   c00004f0 <memset>
c001749d:	83 c4 10             	add    esp,0x10
c00174a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174a4:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c00174ab:	85 c0                	test   eax,eax
c00174ad:	74 1b                	je     c00174ca <SoundCard::getSamples16(int, short*)+0x4c>
c00174af:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00174b3:	75 15                	jne    c00174ca <SoundCard::getSamples16(int, short*)+0x4c>
c00174b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00174b9:	55                   	push   ebp
c00174ba:	56                   	push   esi
c00174bb:	50                   	push   eax
c00174bc:	e8 ef 02 00 00       	call   c00177b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00174c1:	83 c4 10             	add    esp,0x10
c00174c4:	39 c7                	cmp    edi,eax
c00174c6:	7d 02                	jge    c00174ca <SoundCard::getSamples16(int, short*)+0x4c>
c00174c8:	89 c7                	mov    edi,eax
c00174ca:	43                   	inc    ebx
c00174cb:	83 fb 20             	cmp    ebx,0x20
c00174ce:	75 d0                	jne    c00174a0 <SoundCard::getSamples16(int, short*)+0x22>
c00174d0:	83 c4 0c             	add    esp,0xc
c00174d3:	89 f8                	mov    eax,edi
c00174d5:	5b                   	pop    ebx
c00174d6:	5e                   	pop    esi
c00174d7:	5f                   	pop    edi
c00174d8:	5d                   	pop    ebp
c00174d9:	c3                   	ret    

c00174da <SoundCard::getSamples32(int, int*)>:
c00174da:	55                   	push   ebp
c00174db:	57                   	push   edi
c00174dc:	31 ff                	xor    edi,edi
c00174de:	56                   	push   esi
c00174df:	31 f6                	xor    esi,esi
c00174e1:	53                   	push   ebx
c00174e2:	83 ec 10             	sub    esp,0x10
c00174e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174e9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00174ed:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00174f1:	c1 e0 02             	shl    eax,0x2
c00174f4:	50                   	push   eax
c00174f5:	6a 00                	push   0x0
c00174f7:	55                   	push   ebp
c00174f8:	e8 f3 8f fe ff       	call   c00004f0 <memset>
c00174fd:	83 c4 10             	add    esp,0x10
c0017500:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017507:	85 c0                	test   eax,eax
c0017509:	74 1b                	je     c0017526 <SoundCard::getSamples32(int, int*)+0x4c>
c001750b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001750f:	75 15                	jne    c0017526 <SoundCard::getSamples32(int, int*)+0x4c>
c0017511:	53                   	push   ebx
c0017512:	55                   	push   ebp
c0017513:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017517:	50                   	push   eax
c0017518:	e8 57 03 00 00       	call   c0017874 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001751d:	83 c4 10             	add    esp,0x10
c0017520:	39 c6                	cmp    esi,eax
c0017522:	7d 02                	jge    c0017526 <SoundCard::getSamples32(int, int*)+0x4c>
c0017524:	89 c6                	mov    esi,eax
c0017526:	47                   	inc    edi
c0017527:	83 ff 20             	cmp    edi,0x20
c001752a:	75 d4                	jne    c0017500 <SoundCard::getSamples32(int, int*)+0x26>
c001752c:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017532:	85 f6                	test   esi,esi
c0017534:	75 0f                	jne    c0017545 <SoundCard::getSamples32(int, int*)+0x6b>
c0017536:	84 c0                	test   al,al
c0017538:	74 1b                	je     c0017555 <SoundCard::getSamples32(int, int*)+0x7b>
c001753a:	83 ec 0c             	sub    esp,0xc
c001753d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001753f:	53                   	push   ebx
c0017540:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017543:	eb 0d                	jmp    c0017552 <SoundCard::getSamples32(int, int*)+0x78>
c0017545:	84 c0                	test   al,al
c0017547:	75 0c                	jne    c0017555 <SoundCard::getSamples32(int, int*)+0x7b>
c0017549:	83 ec 0c             	sub    esp,0xc
c001754c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001754e:	53                   	push   ebx
c001754f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017552:	83 c4 10             	add    esp,0x10
c0017555:	83 c4 0c             	add    esp,0xc
c0017558:	89 f0                	mov    eax,esi
c001755a:	5b                   	pop    ebx
c001755b:	5e                   	pop    esi
c001755c:	5f                   	pop    edi
c001755d:	5d                   	pop    ebp
c001755e:	c3                   	ret    
c001755f:	90                   	nop

c0017560 <SoundCard::addChannel(SoundPort*)>:
c0017560:	83 ec 0c             	sub    esp,0xc
c0017563:	31 c0                	xor    eax,eax
c0017565:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017569:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017571:	74 1b                	je     c001758e <SoundCard::addChannel(SoundPort*)+0x2e>
c0017573:	40                   	inc    eax
c0017574:	83 f8 20             	cmp    eax,0x20
c0017577:	75 f0                	jne    c0017569 <SoundCard::addChannel(SoundPort*)+0x9>
c0017579:	83 ec 0c             	sub    esp,0xc
c001757c:	68 cd e5 01 c0       	push   0xc001e5cd
c0017581:	e8 b9 7e ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0017586:	83 c4 10             	add    esp,0x10
c0017589:	83 c8 ff             	or     eax,0xffffffff
c001758c:	eb 0b                	jmp    c0017599 <SoundCard::addChannel(SoundPort*)+0x39>
c001758e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017592:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0017599:	83 c4 0c             	add    esp,0xc
c001759c:	c3                   	ret    
c001759d:	90                   	nop

c001759e <SoundCard::removeChannel(int)>:
c001759e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00175a6:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00175b1:	c3                   	ret    
c00175b2:	66 90                	xchg   ax,ax

c00175b4 <SoundPort::SoundPort(int, int, int, int)>:
c00175b4:	83 ec 0c             	sub    esp,0xc
c00175b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175bb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00175c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00175ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00175d2:	89 10                	mov    DWORD PTR [eax],edx
c00175d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00175dc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00175df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00175e7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00175ea:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00175ef:	75 13                	jne    c0017604 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00175f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00175f7:	05 a0 0f 00 00       	add    eax,0xfa0
c00175fc:	01 c0                	add    eax,eax
c00175fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017602:	66 90                	xchg   ax,ax
c0017604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017608:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001760c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001760f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017613:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001761a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001761e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017621:	c1 e0 02             	shl    eax,0x2
c0017624:	83 ec 0c             	sub    esp,0xc
c0017627:	50                   	push   eax
c0017628:	e8 34 f5 fe ff       	call   c0006b61 <malloc>
c001762d:	83 c4 10             	add    esp,0x10
c0017630:	89 c2                	mov    edx,eax
c0017632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017636:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017639:	90                   	nop
c001763a:	83 c4 0c             	add    esp,0xc
c001763d:	c3                   	ret    
c001763e:	66 90                	xchg   ax,ax

c0017640 <SoundPort::~SoundPort()>:
c0017640:	83 ec 0c             	sub    esp,0xc
c0017643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017647:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001764a:	85 c0                	test   eax,eax
c001764c:	74 1e                	je     c001766c <SoundPort::~SoundPort()+0x2c>
c001764e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017652:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017655:	83 ec 0c             	sub    esp,0xc
c0017658:	50                   	push   eax
c0017659:	e8 13 f5 fe ff       	call   c0006b71 <free>
c001765e:	83 c4 10             	add    esp,0x10
c0017661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017665:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001766c:	90                   	nop
c001766d:	83 c4 0c             	add    esp,0xc
c0017670:	c3                   	ret    
c0017671:	90                   	nop
c0017672:	66 90                	xchg   ax,ax

c0017674 <SoundPort::unpause()>:
c0017674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017678:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001767c:	c3                   	ret    
c001767d:	90                   	nop
c001767e:	66 90                	xchg   ax,ax

c0017680 <SoundPort::pause()>:
c0017680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017684:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017688:	c3                   	ret    
c0017689:	90                   	nop
c001768a:	66 90                	xchg   ax,ax

c001768c <SoundPort::getBufferUsed()>:
c001768c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017690:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017693:	c3                   	ret    

c0017694 <SoundPort::getBufferSize()>:
c0017694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017698:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001769b:	c3                   	ret    

c001769c <SoundPort::buffer16(short*, int)>:
c001769c:	55                   	push   ebp
c001769d:	57                   	push   edi
c001769e:	56                   	push   esi
c001769f:	53                   	push   ebx
c00176a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00176a4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00176a8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00176ab:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00176ae:	74 68                	je     c0017718 <SoundPort::buffer16(short*, int)+0x7c>
c00176b0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00176b4:	85 c9                	test   ecx,ecx
c00176b6:	7e 60                	jle    c0017718 <SoundPort::buffer16(short*, int)+0x7c>
c00176b8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00176bc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00176bf:	c1 e1 0f             	shl    ecx,0xf
c00176c2:	8d 70 01             	lea    esi,[eax+0x1]
c00176c5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00176c8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00176cb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00176ce:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00176d1:	74 4d                	je     c0017720 <SoundPort::buffer16(short*, int)+0x84>
c00176d3:	31 f6                	xor    esi,esi
c00176d5:	eb 21                	jmp    c00176f8 <SoundPort::buffer16(short*, int)+0x5c>
c00176d7:	90                   	nop
c00176d8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00176dd:	8d 79 01             	lea    edi,[ecx+0x1]
c00176e0:	c1 e3 0f             	shl    ebx,0xf
c00176e3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00176e6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00176e9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00176ec:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00176ef:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00176f2:	74 1c                	je     c0017710 <SoundPort::buffer16(short*, int)+0x74>
c00176f4:	89 c6                	mov    esi,eax
c00176f6:	66 90                	xchg   ax,ax
c00176f8:	8d 46 01             	lea    eax,[esi+0x1]
c00176fb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00176ff:	75 d7                	jne    c00176d8 <SoundPort::buffer16(short*, int)+0x3c>
c0017701:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017705:	8d 76 00             	lea    esi,[esi+0x0]
c0017708:	5b                   	pop    ebx
c0017709:	5e                   	pop    esi
c001770a:	5f                   	pop    edi
c001770b:	5d                   	pop    ebp
c001770c:	c3                   	ret    
c001770d:	8d 76 00             	lea    esi,[esi+0x0]
c0017710:	5b                   	pop    ebx
c0017711:	8d 46 02             	lea    eax,[esi+0x2]
c0017714:	5e                   	pop    esi
c0017715:	5f                   	pop    edi
c0017716:	5d                   	pop    ebp
c0017717:	c3                   	ret    
c0017718:	5b                   	pop    ebx
c0017719:	31 c0                	xor    eax,eax
c001771b:	5e                   	pop    esi
c001771c:	5f                   	pop    edi
c001771d:	5d                   	pop    ebp
c001771e:	c3                   	ret    
c001771f:	90                   	nop
c0017720:	b8 01 00 00 00       	mov    eax,0x1
c0017725:	eb e1                	jmp    c0017708 <SoundPort::buffer16(short*, int)+0x6c>
c0017727:	90                   	nop

c0017728 <SoundPort::buffer32(int*, int)>:
c0017728:	55                   	push   ebp
c0017729:	57                   	push   edi
c001772a:	56                   	push   esi
c001772b:	53                   	push   ebx
c001772c:	51                   	push   ecx
c001772d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017731:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017735:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017738:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001773c:	89 04 24             	mov    DWORD PTR [esp],eax
c001773f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017742:	74 5c                	je     c00177a0 <SoundPort::buffer32(int*, int)+0x78>
c0017744:	85 c0                	test   eax,eax
c0017746:	7e 58                	jle    c00177a0 <SoundPort::buffer32(int*, int)+0x78>
c0017748:	8d 71 01             	lea    esi,[ecx+0x1]
c001774b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001774e:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017751:	8b 37                	mov    esi,DWORD PTR [edi]
c0017753:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0017756:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017759:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001775c:	74 4a                	je     c00177a8 <SoundPort::buffer32(int*, int)+0x80>
c001775e:	31 f6                	xor    esi,esi
c0017760:	eb 1e                	jmp    c0017780 <SoundPort::buffer32(int*, int)+0x58>
c0017762:	66 90                	xchg   ax,ax
c0017764:	8d 69 01             	lea    ebp,[ecx+0x1]
c0017767:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001776a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001776d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017770:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017774:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017777:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001777a:	74 18                	je     c0017794 <SoundPort::buffer32(int*, int)+0x6c>
c001777c:	89 de                	mov    esi,ebx
c001777e:	66 90                	xchg   ax,ax
c0017780:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017783:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0017786:	75 dc                	jne    c0017764 <SoundPort::buffer32(int*, int)+0x3c>
c0017788:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001778b:	90                   	nop
c001778c:	5a                   	pop    edx
c001778d:	5b                   	pop    ebx
c001778e:	5e                   	pop    esi
c001778f:	5f                   	pop    edi
c0017790:	5d                   	pop    ebp
c0017791:	c3                   	ret    
c0017792:	66 90                	xchg   ax,ax
c0017794:	5a                   	pop    edx
c0017795:	8d 46 02             	lea    eax,[esi+0x2]
c0017798:	5b                   	pop    ebx
c0017799:	5e                   	pop    esi
c001779a:	5f                   	pop    edi
c001779b:	5d                   	pop    ebp
c001779c:	c3                   	ret    
c001779d:	8d 76 00             	lea    esi,[esi+0x0]
c00177a0:	5a                   	pop    edx
c00177a1:	31 c0                	xor    eax,eax
c00177a3:	5b                   	pop    ebx
c00177a4:	5e                   	pop    esi
c00177a5:	5f                   	pop    edi
c00177a6:	5d                   	pop    ebp
c00177a7:	c3                   	ret    
c00177a8:	b8 01 00 00 00       	mov    eax,0x1
c00177ad:	eb dd                	jmp    c001778c <SoundPort::buffer32(int*, int)+0x64>
c00177af:	90                   	nop

c00177b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00177b0:	57                   	push   edi
c00177b1:	56                   	push   esi
c00177b2:	53                   	push   ebx
c00177b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00177b7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00177bb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00177c1:	39 03                	cmp    DWORD PTR [ebx],eax
c00177c3:	74 13                	je     c00177d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00177c5:	83 ec 0c             	sub    esp,0xc
c00177c8:	68 20 e6 01 c0       	push   0xc001e620
c00177cd:	e8 6d 7c ff ff       	call   c000f43f <Krnl::panic(char const*)>
c00177d2:	83 c4 10             	add    esp,0x10
c00177d5:	8d 76 00             	lea    esi,[esi+0x0]
c00177d8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00177de:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00177e1:	74 11                	je     c00177f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00177e3:	83 ec 0c             	sub    esp,0xc
c00177e6:	68 5f e6 01 c0       	push   0xc001e65f
c00177eb:	e8 4f 7c ff ff       	call   c000f43f <Krnl::panic(char const*)>
c00177f0:	83 c4 10             	add    esp,0x10
c00177f3:	90                   	nop
c00177f4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00177fa:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00177fd:	74 11                	je     c0017810 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00177ff:	83 ec 0c             	sub    esp,0xc
c0017802:	68 5f e6 01 c0       	push   0xc001e65f
c0017807:	e8 33 7c ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001780c:	83 c4 10             	add    esp,0x10
c001780f:	90                   	nop
c0017810:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017813:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0017817:	7e 07                	jle    c0017820 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0017819:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001781d:	8d 76 00             	lea    esi,[esi+0x0]
c0017820:	85 f6                	test   esi,esi
c0017822:	7e 2c                	jle    c0017850 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0017824:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017828:	8d 3c 36             	lea    edi,[esi+esi*1]
c001782b:	31 c9                	xor    ecx,ecx
c001782d:	01 d7                	add    edi,edx
c001782f:	90                   	nop
c0017830:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0017833:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0017836:	85 c0                	test   eax,eax
c0017838:	79 06                	jns    c0017840 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001783a:	05 ff 7f 00 00       	add    eax,0x7fff
c001783f:	90                   	nop
c0017840:	c1 f8 0f             	sar    eax,0xf
c0017843:	83 c1 04             	add    ecx,0x4
c0017846:	66 01 02             	add    WORD PTR [edx],ax
c0017849:	83 c2 02             	add    edx,0x2
c001784c:	39 d7                	cmp    edi,edx
c001784e:	75 e0                	jne    c0017830 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017850:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017853:	50                   	push   eax
c0017854:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017857:	29 f0                	sub    eax,esi
c0017859:	c1 e0 02             	shl    eax,0x2
c001785c:	50                   	push   eax
c001785d:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017860:	50                   	push   eax
c0017861:	52                   	push   edx
c0017862:	e8 99 8b fe ff       	call   c0000400 <memmove>
c0017867:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001786a:	83 c4 10             	add    esp,0x10
c001786d:	89 f0                	mov    eax,esi
c001786f:	5b                   	pop    ebx
c0017870:	5e                   	pop    esi
c0017871:	5f                   	pop    edi
c0017872:	c3                   	ret    
c0017873:	90                   	nop

c0017874 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0017874:	57                   	push   edi
c0017875:	56                   	push   esi
c0017876:	53                   	push   ebx
c0017877:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001787b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001787f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017883:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0017889:	39 06                	cmp    DWORD PTR [esi],eax
c001788b:	74 13                	je     c00178a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001788d:	83 ec 0c             	sub    esp,0xc
c0017890:	68 40 e6 01 c0       	push   0xc001e640
c0017895:	e8 a5 7b ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001789a:	83 c4 10             	add    esp,0x10
c001789d:	8d 76 00             	lea    esi,[esi+0x0]
c00178a0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00178a6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00178a9:	74 11                	je     c00178bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00178ab:	83 ec 0c             	sub    esp,0xc
c00178ae:	68 7b e6 01 c0       	push   0xc001e67b
c00178b3:	e8 87 7b ff ff       	call   c000f43f <Krnl::panic(char const*)>
c00178b8:	83 c4 10             	add    esp,0x10
c00178bb:	90                   	nop
c00178bc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00178c2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00178c5:	74 11                	je     c00178d8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00178c7:	83 ec 0c             	sub    esp,0xc
c00178ca:	68 7b e6 01 c0       	push   0xc001e67b
c00178cf:	e8 6b 7b ff ff       	call   c000f43f <Krnl::panic(char const*)>
c00178d4:	83 c4 10             	add    esp,0x10
c00178d7:	90                   	nop
c00178d8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00178db:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00178df:	7e 07                	jle    c00178e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00178e1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00178e5:	8d 76 00             	lea    esi,[esi+0x0]
c00178e8:	85 ff                	test   edi,edi
c00178ea:	7e 1c                	jle    c0017908 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00178ec:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00178f3:	31 c0                	xor    eax,eax
c00178f5:	8d 76 00             	lea    esi,[esi+0x0]
c00178f8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00178fb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00178fe:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017901:	83 c0 04             	add    eax,0x4
c0017904:	39 c1                	cmp    ecx,eax
c0017906:	75 f0                	jne    c00178f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0017908:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001790b:	50                   	push   eax
c001790c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001790f:	29 f8                	sub    eax,edi
c0017911:	c1 e0 02             	shl    eax,0x2
c0017914:	50                   	push   eax
c0017915:	8d 04 ba             	lea    eax,[edx+edi*4]
c0017918:	50                   	push   eax
c0017919:	52                   	push   edx
c001791a:	e8 e1 8a fe ff       	call   c0000400 <memmove>
c001791f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0017922:	83 c4 10             	add    esp,0x10
c0017925:	89 f8                	mov    eax,edi
c0017927:	5b                   	pop    ebx
c0017928:	5e                   	pop    esi
c0017929:	5f                   	pop    edi
c001792a:	c3                   	ret    
c001792b:	90                   	nop

c001792c <PCI::open(int, int, void*)>:
c001792c:	83 ec 18             	sub    esp,0x18
c001792f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017933:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017937:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001793d:	8b 10                	mov    edx,DWORD PTR [eax]
c001793f:	50                   	push   eax
c0017940:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0017943:	31 c0                	xor    eax,eax
c0017945:	83 c4 1c             	add    esp,0x1c
c0017948:	c3                   	ret    
c0017949:	90                   	nop

c001794a <PCI::close(int, int, void*)>:
c001794a:	31 c0                	xor    eax,eax
c001794c:	c3                   	ret    
c001794d:	90                   	nop

c001794e <PCI::PCI()>:
c001794e:	83 ec 0c             	sub    esp,0xc
c0017951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017955:	83 ec 08             	sub    esp,0x8
c0017958:	68 97 e6 01 c0       	push   0xc001e697
c001795d:	50                   	push   eax
c001795e:	e8 21 2d ff ff       	call   c000a684 <Bus::Bus(char const*)>
c0017963:	83 c4 10             	add    esp,0x10
c0017966:	ba 40 e7 01 c0       	mov    edx,0xc001e740
c001796b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001796f:	89 10                	mov    DWORD PTR [eax],edx
c0017971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017975:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001797f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017983:	a3 c0 32 02 c0       	mov    ds:0xc00232c0,eax
c0017988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001798c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017992:	31 d2                	xor    edx,edx
c0017994:	88 c2                	mov    dl,al
c0017996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001799a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00179a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00179ab:	31 d2                	xor    edx,edx
c00179ad:	88 c2                	mov    dl,al
c00179af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00179b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00179c2:	8d 50 01             	lea    edx,[eax+0x1]
c00179c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00179c9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00179cf:	31 d2                	xor    edx,edx
c00179d1:	88 c2                	mov    dl,al
c00179d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179d7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00179db:	83 c9 c0             	or     ecx,0xffffffc0
c00179de:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00179e2:	90                   	nop
c00179e3:	83 c4 0c             	add    esp,0xc
c00179e6:	c3                   	ret    
c00179e7:	90                   	nop

c00179e8 <PCI::readBAR8(unsigned int, int)>:
c00179e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00179ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179f0:	f6 c2 01             	test   dl,0x1
c00179f3:	74 07                	je     c00179fc <PCI::readBAR8(unsigned int, int)+0x14>
c00179f5:	83 e2 fc             	and    edx,0xfffffffc
c00179f8:	01 c2                	add    edx,eax
c00179fa:	ec                   	in     al,dx
c00179fb:	c3                   	ret    
c00179fc:	83 e2 f0             	and    edx,0xfffffff0
c00179ff:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0017a02:	c3                   	ret    
c0017a03:	90                   	nop

c0017a04 <PCI::readBAR16(unsigned int, int)>:
c0017a04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a0c:	f6 c2 01             	test   dl,0x1
c0017a0f:	74 08                	je     c0017a19 <PCI::readBAR16(unsigned int, int)+0x15>
c0017a11:	83 e2 fc             	and    edx,0xfffffffc
c0017a14:	01 c2                	add    edx,eax
c0017a16:	66 ed                	in     ax,dx
c0017a18:	c3                   	ret    
c0017a19:	83 e2 f0             	and    edx,0xfffffff0
c0017a1c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0017a20:	c3                   	ret    
c0017a21:	90                   	nop

c0017a22 <PCI::readBAR32(unsigned int, int)>:
c0017a22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a2a:	f6 c2 01             	test   dl,0x1
c0017a2d:	74 07                	je     c0017a36 <PCI::readBAR32(unsigned int, int)+0x14>
c0017a2f:	83 e2 fc             	and    edx,0xfffffffc
c0017a32:	01 c2                	add    edx,eax
c0017a34:	ed                   	in     eax,dx
c0017a35:	c3                   	ret    
c0017a36:	83 e2 f0             	and    edx,0xfffffff0
c0017a39:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0017a3c:	c3                   	ret    
c0017a3d:	90                   	nop

c0017a3e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0017a3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017a4a:	f6 c2 01             	test   dl,0x1
c0017a4d:	74 07                	je     c0017a56 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0017a4f:	83 e2 fc             	and    edx,0xfffffffc
c0017a52:	01 ca                	add    edx,ecx
c0017a54:	ee                   	out    dx,al
c0017a55:	c3                   	ret    
c0017a56:	83 e2 f0             	and    edx,0xfffffff0
c0017a59:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0017a5c:	c3                   	ret    
c0017a5d:	90                   	nop

c0017a5e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0017a5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017a6a:	f6 c2 01             	test   dl,0x1
c0017a6d:	74 08                	je     c0017a77 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0017a6f:	83 e2 fc             	and    edx,0xfffffffc
c0017a72:	01 ca                	add    edx,ecx
c0017a74:	66 ef                	out    dx,ax
c0017a76:	c3                   	ret    
c0017a77:	83 e2 f0             	and    edx,0xfffffff0
c0017a7a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0017a7e:	c3                   	ret    
c0017a7f:	90                   	nop

c0017a80 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0017a80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017a8c:	f6 c2 01             	test   dl,0x1
c0017a8f:	74 07                	je     c0017a98 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0017a91:	83 e2 fc             	and    edx,0xfffffffc
c0017a94:	01 ca                	add    edx,ecx
c0017a96:	ef                   	out    dx,eax
c0017a97:	c3                   	ret    
c0017a98:	83 e2 f0             	and    edx,0xfffffff0
c0017a9b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0017a9e:	c3                   	ret    
c0017a9f:	90                   	nop

c0017aa0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017aa0:	55                   	push   ebp
c0017aa1:	57                   	push   edi
c0017aa2:	56                   	push   esi
c0017aa3:	53                   	push   ebx
c0017aa4:	83 ec 0c             	sub    esp,0xc
c0017aa7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017aab:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0017aaf:	89 f0                	mov    eax,esi
c0017ab1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0017ab5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0017ab9:	3c 07                	cmp    al,0x7
c0017abb:	76 10                	jbe    c0017acd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0017abd:	83 ec 0c             	sub    esp,0xc
c0017ac0:	68 9f e6 01 c0       	push   0xc001e69f
c0017ac5:	e8 75 79 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0017aca:	83 c4 10             	add    esp,0x10
c0017acd:	80 fb 0f             	cmp    bl,0xf
c0017ad0:	76 10                	jbe    c0017ae2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0017ad2:	83 ec 0c             	sub    esp,0xc
c0017ad5:	68 cf e6 01 c0       	push   0xc001e6cf
c0017ada:	e8 60 79 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0017adf:	83 c4 10             	add    esp,0x10
c0017ae2:	8d 04 36             	lea    eax,[esi+esi*1]
c0017ae5:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017aea:	83 c8 f0             	or     eax,0xfffffff0
c0017aed:	ee                   	out    dx,al
c0017aee:	ba fa 0c 00 00       	mov    edx,0xcfa
c0017af3:	89 e8                	mov    eax,ebp
c0017af5:	ee                   	out    dx,al
c0017af6:	83 c4 0c             	add    esp,0xc
c0017af9:	89 d8                	mov    eax,ebx
c0017afb:	66 81 e7 fc 00       	and    di,0xfc
c0017b00:	5b                   	pop    ebx
c0017b01:	c1 e0 08             	shl    eax,0x8
c0017b04:	5e                   	pop    esi
c0017b05:	09 f8                	or     eax,edi
c0017b07:	5f                   	pop    edi
c0017b08:	66 0d 00 c0          	or     ax,0xc000
c0017b0c:	5d                   	pop    ebp
c0017b0d:	c3                   	ret    

c0017b0e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017b0e:	57                   	push   edi
c0017b0f:	56                   	push   esi
c0017b10:	53                   	push   ebx
c0017b11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017b15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b19:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0017b1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b23:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017b27:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017b2b:	83 ff 01             	cmp    edi,0x1
c0017b2e:	75 3e                	jne    c0017b6e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0017b30:	89 de                	mov    esi,ebx
c0017b32:	0f b6 c0             	movzx  eax,al
c0017b35:	81 e6 fc 00 00 00    	and    esi,0xfc
c0017b3b:	c1 e0 10             	shl    eax,0x10
c0017b3e:	0f b6 c9             	movzx  ecx,cl
c0017b41:	09 f0                	or     eax,esi
c0017b43:	c1 e1 08             	shl    ecx,0x8
c0017b46:	0f b6 d2             	movzx  edx,dl
c0017b49:	09 c8                	or     eax,ecx
c0017b4b:	c1 e2 0b             	shl    edx,0xb
c0017b4e:	09 d0                	or     eax,edx
c0017b50:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017b55:	0d 00 00 00 80       	or     eax,0x80000000
c0017b5a:	ef                   	out    dx,eax
c0017b5b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017b60:	ed                   	in     eax,dx
c0017b61:	83 e3 02             	and    ebx,0x2
c0017b64:	0f b6 cb             	movzx  ecx,bl
c0017b67:	c1 e1 03             	shl    ecx,0x3
c0017b6a:	d3 e8                	shr    eax,cl
c0017b6c:	eb 43                	jmp    c0017bb1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0017b6e:	83 ff 02             	cmp    edi,0x2
c0017b71:	75 2c                	jne    c0017b9f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0017b73:	83 ec 0c             	sub    esp,0xc
c0017b76:	0f b6 c9             	movzx  ecx,cl
c0017b79:	0f b6 d2             	movzx  edx,dl
c0017b7c:	0f b6 fb             	movzx  edi,bl
c0017b7f:	0f b6 c0             	movzx  eax,al
c0017b82:	57                   	push   edi
c0017b83:	51                   	push   ecx
c0017b84:	52                   	push   edx
c0017b85:	50                   	push   eax
c0017b86:	56                   	push   esi
c0017b87:	e8 14 ff ff ff       	call   c0017aa0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017b8c:	89 c2                	mov    edx,eax
c0017b8e:	ed                   	in     eax,dx
c0017b8f:	83 e3 02             	and    ebx,0x2
c0017b92:	83 c4 20             	add    esp,0x20
c0017b95:	0f b6 cb             	movzx  ecx,bl
c0017b98:	c1 e1 03             	shl    ecx,0x3
c0017b9b:	d3 e8                	shr    eax,cl
c0017b9d:	eb 12                	jmp    c0017bb1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0017b9f:	83 ec 0c             	sub    esp,0xc
c0017ba2:	68 ff e6 01 c0       	push   0xc001e6ff
c0017ba7:	e8 93 78 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0017bac:	83 c4 10             	add    esp,0x10
c0017baf:	31 c0                	xor    eax,eax
c0017bb1:	5b                   	pop    ebx
c0017bb2:	5e                   	pop    esi
c0017bb3:	5f                   	pop    edi
c0017bb4:	c3                   	ret    
c0017bb5:	90                   	nop

c0017bb6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0017bb6:	83 ec 18             	sub    esp,0x18
c0017bb9:	6a 00                	push   0x0
c0017bbb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017bc0:	50                   	push   eax
c0017bc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017bc6:	50                   	push   eax
c0017bc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017bcc:	50                   	push   eax
c0017bcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bd1:	e8 38 ff ff ff       	call   c0017b0e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017bd6:	83 c4 2c             	add    esp,0x2c
c0017bd9:	c3                   	ret    

c0017bda <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0017bda:	83 ec 18             	sub    esp,0x18
c0017bdd:	6a 0e                	push   0xe
c0017bdf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017be4:	50                   	push   eax
c0017be5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017bea:	50                   	push   eax
c0017beb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017bf0:	50                   	push   eax
c0017bf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bf5:	e8 14 ff ff ff       	call   c0017b0e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017bfa:	83 c4 2c             	add    esp,0x2c
c0017bfd:	0f b6 c0             	movzx  eax,al
c0017c00:	c3                   	ret    
c0017c01:	90                   	nop

c0017c02 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0017c02:	55                   	push   ebp
c0017c03:	57                   	push   edi
c0017c04:	56                   	push   esi
c0017c05:	53                   	push   ebx
c0017c06:	83 ec 18             	sub    esp,0x18
c0017c09:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0017c0e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0017c13:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0017c18:	6a 0a                	push   0xa
c0017c1a:	56                   	push   esi
c0017c1b:	55                   	push   ebp
c0017c1c:	57                   	push   edi
c0017c1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017c21:	e8 e8 fe ff ff       	call   c0017b0e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c26:	83 c4 14             	add    esp,0x14
c0017c29:	89 c3                	mov    ebx,eax
c0017c2b:	6a 0a                	push   0xa
c0017c2d:	0f b6 db             	movzx  ebx,bl
c0017c30:	56                   	push   esi
c0017c31:	55                   	push   ebp
c0017c32:	57                   	push   edi
c0017c33:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017c37:	e8 d2 fe ff ff       	call   c0017b0e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c3c:	83 c4 2c             	add    esp,0x2c
c0017c3f:	25 00 ff 00 00       	and    eax,0xff00
c0017c44:	09 d8                	or     eax,ebx
c0017c46:	5b                   	pop    ebx
c0017c47:	5e                   	pop    esi
c0017c48:	5f                   	pop    edi
c0017c49:	5d                   	pop    ebp
c0017c4a:	c3                   	ret    
c0017c4b:	90                   	nop

c0017c4c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0017c4c:	83 ec 18             	sub    esp,0x18
c0017c4f:	6a 08                	push   0x8
c0017c51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c56:	50                   	push   eax
c0017c57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c5c:	50                   	push   eax
c0017c5d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c62:	50                   	push   eax
c0017c63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c67:	e8 a2 fe ff ff       	call   c0017b0e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c6c:	83 c4 2c             	add    esp,0x2c
c0017c6f:	0f b6 c4             	movzx  eax,ah
c0017c72:	c3                   	ret    
c0017c73:	90                   	nop

c0017c74 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0017c74:	83 ec 18             	sub    esp,0x18
c0017c77:	6a 08                	push   0x8
c0017c79:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c7e:	50                   	push   eax
c0017c7f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c84:	50                   	push   eax
c0017c85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c8a:	50                   	push   eax
c0017c8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c8f:	e8 7a fe ff ff       	call   c0017b0e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c94:	83 c4 2c             	add    esp,0x2c
c0017c97:	c3                   	ret    

c0017c98 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0017c98:	83 ec 18             	sub    esp,0x18
c0017c9b:	6a 3c                	push   0x3c
c0017c9d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017ca2:	50                   	push   eax
c0017ca3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017ca8:	50                   	push   eax
c0017ca9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017cae:	50                   	push   eax
c0017caf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cb3:	e8 56 fe ff ff       	call   c0017b0e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017cb8:	83 c4 2c             	add    esp,0x2c
c0017cbb:	c3                   	ret    

c0017cbc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0017cbc:	83 ec 18             	sub    esp,0x18
c0017cbf:	6a 18                	push   0x18
c0017cc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017cc6:	50                   	push   eax
c0017cc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017ccc:	50                   	push   eax
c0017ccd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017cd2:	50                   	push   eax
c0017cd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cd7:	e8 32 fe ff ff       	call   c0017b0e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017cdc:	83 c4 2c             	add    esp,0x2c
c0017cdf:	0f b6 c4             	movzx  eax,ah
c0017ce2:	c3                   	ret    
c0017ce3:	90                   	nop

c0017ce4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017ce4:	55                   	push   ebp
c0017ce5:	57                   	push   edi
c0017ce6:	56                   	push   esi
c0017ce7:	53                   	push   ebx
c0017ce8:	83 ec 28             	sub    esp,0x28
c0017ceb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0017cef:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0017cf4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0017cf9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0017cfe:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0017d05:	8d 43 12             	lea    eax,[ebx+0x12]
c0017d08:	83 c3 10             	add    ebx,0x10
c0017d0b:	0f b6 c0             	movzx  eax,al
c0017d0e:	0f b6 db             	movzx  ebx,bl
c0017d11:	50                   	push   eax
c0017d12:	51                   	push   ecx
c0017d13:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0017d17:	57                   	push   edi
c0017d18:	55                   	push   ebp
c0017d19:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017d1d:	e8 ec fd ff ff       	call   c0017b0e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d22:	83 c4 14             	add    esp,0x14
c0017d25:	89 c6                	mov    esi,eax
c0017d27:	53                   	push   ebx
c0017d28:	c1 e6 10             	shl    esi,0x10
c0017d2b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017d2f:	51                   	push   ecx
c0017d30:	57                   	push   edi
c0017d31:	55                   	push   ebp
c0017d32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017d36:	e8 d3 fd ff ff       	call   c0017b0e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d3b:	83 c4 3c             	add    esp,0x3c
c0017d3e:	0f b7 c0             	movzx  eax,ax
c0017d41:	5b                   	pop    ebx
c0017d42:	09 f0                	or     eax,esi
c0017d44:	5e                   	pop    esi
c0017d45:	5f                   	pop    edi
c0017d46:	5d                   	pop    ebp
c0017d47:	c3                   	ret    

c0017d48 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0017d48:	55                   	push   ebp
c0017d49:	57                   	push   edi
c0017d4a:	56                   	push   esi
c0017d4b:	53                   	push   ebx
c0017d4c:	83 ec 0c             	sub    esp,0xc
c0017d4f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017d53:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0017d57:	89 f5                	mov    ebp,esi
c0017d59:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0017d5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d63:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017d6b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017d6f:	83 f9 01             	cmp    ecx,0x1
c0017d72:	75 5d                	jne    c0017dd1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0017d74:	0f b6 c8             	movzx  ecx,al
c0017d77:	0f b6 d2             	movzx  edx,dl
c0017d7a:	c1 e1 10             	shl    ecx,0x10
c0017d7d:	c1 e2 0b             	shl    edx,0xb
c0017d80:	89 f0                	mov    eax,esi
c0017d82:	25 fc 00 00 00       	and    eax,0xfc
c0017d87:	09 c1                	or     ecx,eax
c0017d89:	89 e8                	mov    eax,ebp
c0017d8b:	0f b6 c0             	movzx  eax,al
c0017d8e:	c1 e0 08             	shl    eax,0x8
c0017d91:	09 c1                	or     ecx,eax
c0017d93:	09 d1                	or     ecx,edx
c0017d95:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017d9a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0017da0:	89 c8                	mov    eax,ecx
c0017da2:	ef                   	out    dx,eax
c0017da3:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017da8:	ed                   	in     eax,dx
c0017da9:	0f b7 db             	movzx  ebx,bx
c0017dac:	83 e6 02             	and    esi,0x2
c0017daf:	74 0a                	je     c0017dbb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0017db1:	0f b7 d0             	movzx  edx,ax
c0017db4:	c1 e3 10             	shl    ebx,0x10
c0017db7:	09 d3                	or     ebx,edx
c0017db9:	eb 05                	jmp    c0017dc0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0017dbb:	66 31 c0             	xor    ax,ax
c0017dbe:	09 c3                	or     ebx,eax
c0017dc0:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017dc5:	89 c8                	mov    eax,ecx
c0017dc7:	ef                   	out    dx,eax
c0017dc8:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017dcd:	89 d8                	mov    eax,ebx
c0017dcf:	eb 41                	jmp    c0017e12 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0017dd1:	83 f9 02             	cmp    ecx,0x2
c0017dd4:	75 45                	jne    c0017e1b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0017dd6:	83 ec 0c             	sub    esp,0xc
c0017dd9:	0f b6 d2             	movzx  edx,dl
c0017ddc:	89 f1                	mov    ecx,esi
c0017dde:	0f b6 c0             	movzx  eax,al
c0017de1:	0f b6 f1             	movzx  esi,cl
c0017de4:	89 e9                	mov    ecx,ebp
c0017de6:	56                   	push   esi
c0017de7:	0f b6 c9             	movzx  ecx,cl
c0017dea:	51                   	push   ecx
c0017deb:	52                   	push   edx
c0017dec:	50                   	push   eax
c0017ded:	57                   	push   edi
c0017dee:	e8 ad fc ff ff       	call   c0017aa0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017df3:	89 c2                	mov    edx,eax
c0017df5:	ed                   	in     eax,dx
c0017df6:	83 c4 20             	add    esp,0x20
c0017df9:	0f b7 db             	movzx  ebx,bx
c0017dfc:	f6 c2 02             	test   dl,0x2
c0017dff:	74 0c                	je     c0017e0d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0017e01:	0f b7 c8             	movzx  ecx,ax
c0017e04:	89 d8                	mov    eax,ebx
c0017e06:	c1 e0 10             	shl    eax,0x10
c0017e09:	09 c8                	or     eax,ecx
c0017e0b:	eb 05                	jmp    c0017e12 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0017e0d:	66 31 c0             	xor    ax,ax
c0017e10:	09 d8                	or     eax,ebx
c0017e12:	ef                   	out    dx,eax
c0017e13:	83 c4 0c             	add    esp,0xc
c0017e16:	5b                   	pop    ebx
c0017e17:	5e                   	pop    esi
c0017e18:	5f                   	pop    edi
c0017e19:	5d                   	pop    ebp
c0017e1a:	c3                   	ret    
c0017e1b:	c7 44 24 20 ff e6 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e6ff
c0017e23:	83 c4 0c             	add    esp,0xc
c0017e26:	5b                   	pop    ebx
c0017e27:	5e                   	pop    esi
c0017e28:	5f                   	pop    edi
c0017e29:	5d                   	pop    ebp
c0017e2a:	e9 10 76 ff ff       	jmp    c000f43f <Krnl::panic(char const*)>
c0017e2f:	90                   	nop

c0017e30 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0017e30:	55                   	push   ebp
c0017e31:	57                   	push   edi
c0017e32:	56                   	push   esi
c0017e33:	53                   	push   ebx
c0017e34:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017e3a:	80 3d cc 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232cc,0x0
c0017e41:	0f 85 84 00 00 00    	jne    c0017ecb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0017e47:	83 ec 0c             	sub    esp,0xc
c0017e4a:	68 14 01 00 00       	push   0x114
c0017e4f:	e8 0d ed fe ff       	call   c0006b61 <malloc>
c0017e54:	83 c4 0c             	add    esp,0xc
c0017e57:	89 c3                	mov    ebx,eax
c0017e59:	ff 35 10 29 02 c0    	push   DWORD PTR ds:0xc0022910
c0017e5f:	68 05 e7 01 c0       	push   0xc001e705
c0017e64:	50                   	push   eax
c0017e65:	e8 fc 1f ff ff       	call   c0009e66 <File::File(char const*, Process*)>
c0017e6a:	5a                   	pop    edx
c0017e6b:	59                   	pop    ecx
c0017e6c:	6a 01                	push   0x1
c0017e6e:	53                   	push   ebx
c0017e6f:	e8 b2 20 ff ff       	call   c0009f26 <File::open(FileOpenMode)>
c0017e74:	83 c4 0c             	add    esp,0xc
c0017e77:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0017e7b:	50                   	push   eax
c0017e7c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017e80:	50                   	push   eax
c0017e81:	53                   	push   ebx
c0017e82:	e8 4b 23 ff ff       	call   c000a1d2 <File::stat(unsigned long long*, bool*)>
c0017e87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e8b:	40                   	inc    eax
c0017e8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e8f:	e8 cd ec fe ff       	call   c0006b61 <malloc>
c0017e94:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017e98:	a3 c8 32 02 c0       	mov    ds:0xc00232c8,eax
c0017e9d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0017ea1:	5e                   	pop    esi
c0017ea2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017ea4:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017ea8:	51                   	push   ecx
c0017ea9:	50                   	push   eax
c0017eaa:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017eae:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017eb2:	53                   	push   ebx
c0017eb3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017eb6:	83 c4 14             	add    esp,0x14
c0017eb9:	53                   	push   ebx
c0017eba:	e8 c5 20 ff ff       	call   c0009f84 <File::close()>
c0017ebf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ec3:	83 c4 10             	add    esp,0x10
c0017ec6:	a3 c4 32 02 c0       	mov    ds:0xc00232c4,eax
c0017ecb:	a1 c4 32 02 c0       	mov    eax,ds:0xc00232c4
c0017ed0:	8b 15 c8 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232c8
c0017ed6:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ed9:	31 ff                	xor    edi,edi
c0017edb:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0017ee3:	31 f6                	xor    esi,esi
c0017ee5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0017eea:	31 db                	xor    ebx,ebx
c0017eec:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0017ef4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017ef9:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0017f00:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0017f04:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0017f0b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017f0f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0017f12:	0f 8e 6b 01 00 00    	jle    c0018083 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0017f18:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0017f1b:	d4 40                	aam    0x40
c0017f1d:	d5 39                	aad    0x39
c0017f1f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f23:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0017f27:	d4 40                	aam    0x40
c0017f29:	d5 39                	aad    0x39
c0017f2b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017f2f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0017f33:	d4 40                	aam    0x40
c0017f35:	d5 39                	aad    0x39
c0017f37:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017f3b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0017f3f:	d4 40                	aam    0x40
c0017f41:	d5 39                	aad    0x39
c0017f43:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f47:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0017f4b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017f4f:	3c 56                	cmp    al,0x56
c0017f51:	74 45                	je     c0017f98 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0017f53:	d4 40                	aam    0x40
c0017f55:	d5 39                	aad    0x39
c0017f57:	8d 48 d0             	lea    ecx,[eax-0x30]
c0017f5a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0017f5e:	0f b6 c9             	movzx  ecx,cl
c0017f61:	c1 e1 04             	shl    ecx,0x4
c0017f64:	d4 40                	aam    0x40
c0017f66:	d5 39                	aad    0x39
c0017f68:	8d 58 d0             	lea    ebx,[eax-0x30]
c0017f6b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0017f6f:	0f b6 db             	movzx  ebx,bl
c0017f72:	09 cb                	or     ebx,ecx
c0017f74:	c1 e3 04             	shl    ebx,0x4
c0017f77:	d4 40                	aam    0x40
c0017f79:	d5 39                	aad    0x39
c0017f7b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0017f7e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0017f82:	0f b6 c9             	movzx  ecx,cl
c0017f85:	09 cb                	or     ebx,ecx
c0017f87:	c1 e3 04             	shl    ebx,0x4
c0017f8a:	89 d9                	mov    ecx,ebx
c0017f8c:	d4 40                	aam    0x40
c0017f8e:	d5 39                	aad    0x39
c0017f90:	8d 58 d0             	lea    ebx,[eax-0x30]
c0017f93:	0f b6 db             	movzx  ebx,bl
c0017f96:	09 cb                	or     ebx,ecx
c0017f98:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0017f9c:	80 f9 44             	cmp    cl,0x44
c0017f9f:	74 47                	je     c0017fe8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0017fa1:	88 c8                	mov    al,cl
c0017fa3:	d4 40                	aam    0x40
c0017fa5:	d5 39                	aad    0x39
c0017fa7:	83 e8 30             	sub    eax,0x30
c0017faa:	0f b6 e8             	movzx  ebp,al
c0017fad:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0017fb1:	c1 e5 04             	shl    ebp,0x4
c0017fb4:	d4 40                	aam    0x40
c0017fb6:	d5 39                	aad    0x39
c0017fb8:	83 e8 30             	sub    eax,0x30
c0017fbb:	0f b6 f0             	movzx  esi,al
c0017fbe:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0017fc2:	09 ee                	or     esi,ebp
c0017fc4:	c1 e6 04             	shl    esi,0x4
c0017fc7:	d4 40                	aam    0x40
c0017fc9:	d5 39                	aad    0x39
c0017fcb:	83 e8 30             	sub    eax,0x30
c0017fce:	0f b6 e8             	movzx  ebp,al
c0017fd1:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0017fd5:	09 ee                	or     esi,ebp
c0017fd7:	c1 e6 04             	shl    esi,0x4
c0017fda:	89 f5                	mov    ebp,esi
c0017fdc:	d4 40                	aam    0x40
c0017fde:	d5 39                	aad    0x39
c0017fe0:	83 e8 30             	sub    eax,0x30
c0017fe3:	0f b6 f0             	movzx  esi,al
c0017fe6:	09 ee                	or     esi,ebp
c0017fe8:	83 c7 10             	add    edi,0x10
c0017feb:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0017fef:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0017ff2:	3c 0a                	cmp    al,0xa
c0017ff4:	74 09                	je     c0017fff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0017ff6:	45                   	inc    ebp
c0017ff7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0017ffa:	75 16                	jne    c0018012 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0017ffc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0017fff:	3c 0a                	cmp    al,0xa
c0018001:	0f 94 c0             	sete   al
c0018004:	0f b6 c0             	movzx  eax,al
c0018007:	01 c7                	add    edi,eax
c0018009:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001800e:	75 0c                	jne    c001801c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018010:	eb 15                	jmp    c0018027 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018012:	47                   	inc    edi
c0018013:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018016:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001801a:	eb d3                	jmp    c0017fef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001801c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018021:	0f 85 e8 fe ff ff    	jne    c0017f0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018027:	80 f9 44             	cmp    cl,0x44
c001802a:	74 0b                	je     c0018037 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001802c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018031:	0f 85 d8 fe ff ff    	jne    c0017f0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018037:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001803b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001803f:	c1 e1 04             	shl    ecx,0x4
c0018042:	83 e8 30             	sub    eax,0x30
c0018045:	09 c8                	or     eax,ecx
c0018047:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001804b:	0f 85 be fe ff ff    	jne    c0017f0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018051:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018055:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018059:	c1 e1 04             	shl    ecx,0x4
c001805c:	83 e8 30             	sub    eax,0x30
c001805f:	09 c8                	or     eax,ecx
c0018061:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018065:	0f 85 a4 fe ff ff    	jne    c0017f0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001806b:	50                   	push   eax
c001806c:	50                   	push   eax
c001806d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018071:	50                   	push   eax
c0018072:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018079:	e8 a2 85 fe ff       	call   c0000620 <strcpy>
c001807e:	83 c4 10             	add    esp,0x10
c0018081:	eb 15                	jmp    c0018098 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018083:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001808a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018095:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018098:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001809f:	81 c4 2c 01 00 00    	add    esp,0x12c
c00180a5:	5b                   	pop    ebx
c00180a6:	5e                   	pop    esi
c00180a7:	5f                   	pop    edi
c00180a8:	5d                   	pop    ebp
c00180a9:	c3                   	ret    

c00180aa <PCI::checkBus(unsigned char)>:
c00180aa:	56                   	push   esi
c00180ab:	53                   	push   ebx
c00180ac:	31 f6                	xor    esi,esi
c00180ae:	51                   	push   ecx
c00180af:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c00180b3:	0f b6 c3             	movzx  eax,bl
c00180b6:	52                   	push   edx
c00180b7:	56                   	push   esi
c00180b8:	46                   	inc    esi
c00180b9:	50                   	push   eax
c00180ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180be:	e8 f3 02 00 00       	call   c00183b6 <PCI::checkDevice(unsigned char, unsigned char)>
c00180c3:	83 c4 10             	add    esp,0x10
c00180c6:	83 fe 20             	cmp    esi,0x20
c00180c9:	75 e8                	jne    c00180b3 <PCI::checkBus(unsigned char)+0x9>
c00180cb:	58                   	pop    eax
c00180cc:	5b                   	pop    ebx
c00180cd:	5e                   	pop    esi
c00180ce:	c3                   	ret    
c00180cf:	90                   	nop

c00180d0 <PCI::foundDevice(PCIDeviceInfo)>:
c00180d0:	55                   	push   ebp
c00180d1:	57                   	push   edi
c00180d2:	56                   	push   esi
c00180d3:	53                   	push   ebx
c00180d4:	83 ec 1c             	sub    esp,0x1c
c00180d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00180db:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00180e1:	0f 84 52 01 00 00    	je     c0018239 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00180e7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00180eb:	66 81 f9 06 04       	cmp    cx,0x406
c00180f0:	75 2c                	jne    c001811e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00180f2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00180f7:	50                   	push   eax
c00180f8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00180fd:	50                   	push   eax
c00180fe:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018103:	50                   	push   eax
c0018104:	56                   	push   esi
c0018105:	e8 b2 fb ff ff       	call   c0017cbc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001810a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001810e:	0f b6 c0             	movzx  eax,al
c0018111:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018115:	83 c4 2c             	add    esp,0x2c
c0018118:	5b                   	pop    ebx
c0018119:	5e                   	pop    esi
c001811a:	5f                   	pop    edi
c001811b:	5d                   	pop    ebp
c001811c:	eb 8c                	jmp    c00180aa <PCI::checkBus(unsigned char)>
c001811e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018122:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018128:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001812c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018130:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018134:	88 d3                	mov    bl,dl
c0018136:	85 c0                	test   eax,eax
c0018138:	74 33                	je     c001816d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001813a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001813d:	85 d2                	test   edx,edx
c001813f:	74 28                	je     c0018169 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018141:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018147:	31 ef                	xor    edi,ebp
c0018149:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001814f:	75 18                	jne    c0018169 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018151:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018155:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001815b:	75 0c                	jne    c0018169 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001815d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018163:	0f 84 d0 00 00 00    	je     c0018239 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018169:	8b 00                	mov    eax,DWORD PTR [eax]
c001816b:	eb c9                	jmp    c0018136 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001816d:	66 81 f9 01 06       	cmp    cx,0x601
c0018172:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018176:	75 19                	jne    c0018191 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018178:	83 ec 0c             	sub    esp,0xc
c001817b:	68 64 01 00 00       	push   0x164
c0018180:	e8 dc e9 fe ff       	call   c0006b61 <malloc>
c0018185:	89 c5                	mov    ebp,eax
c0018187:	89 04 24             	mov    DWORD PTR [esp],eax
c001818a:	e8 47 0e 00 00       	call   c0018fd6 <SATABus::SATABus()>
c001818f:	eb 1e                	jmp    c00181af <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018191:	66 81 f9 01 01       	cmp    cx,0x101
c0018196:	75 60                	jne    c00181f8 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018198:	83 ec 0c             	sub    esp,0xc
c001819b:	68 70 02 00 00       	push   0x270
c00181a0:	e8 bc e9 fe ff       	call   c0006b61 <malloc>
c00181a5:	89 c5                	mov    ebp,eax
c00181a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00181aa:	e8 cb 02 00 00       	call   c001847a <IDE::IDE()>
c00181af:	58                   	pop    eax
c00181b0:	5a                   	pop    edx
c00181b1:	55                   	push   ebp
c00181b2:	56                   	push   esi
c00181b3:	e8 78 2b ff ff       	call   c000ad30 <Device::addChild(Device*)>
c00181b8:	83 ec 1c             	sub    esp,0x1c
c00181bb:	b9 09 00 00 00       	mov    ecx,0x9
c00181c0:	fc                   	cld    
c00181c1:	89 e7                	mov    edi,esp
c00181c3:	89 de                	mov    esi,ebx
c00181c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00181c7:	55                   	push   ebp
c00181c8:	e8 a9 2a ff ff       	call   c000ac76 <Device::preOpenPCI(PCIDeviceInfo)>
c00181cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00181d0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00181d4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00181dc:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00181e4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00181ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00181ef:	83 c4 4c             	add    esp,0x4c
c00181f2:	5b                   	pop    ebx
c00181f3:	5e                   	pop    esi
c00181f4:	5f                   	pop    edi
c00181f5:	5d                   	pop    ebp
c00181f6:	ff e0                	jmp    eax
c00181f8:	83 ec 0c             	sub    esp,0xc
c00181fb:	68 58 01 00 00       	push   0x158
c0018200:	e8 5c e9 fe ff       	call   c0006b61 <malloc>
c0018205:	89 c5                	mov    ebp,eax
c0018207:	58                   	pop    eax
c0018208:	5a                   	pop    edx
c0018209:	68 1e e7 01 c0       	push   0xc001e71e
c001820e:	55                   	push   ebp
c001820f:	e8 ba 2d ff ff       	call   c000afce <DriverlessDevice::DriverlessDevice(char const*)>
c0018214:	59                   	pop    ecx
c0018215:	5f                   	pop    edi
c0018216:	55                   	push   ebp
c0018217:	56                   	push   esi
c0018218:	e8 13 2b ff ff       	call   c000ad30 <Device::addChild(Device*)>
c001821d:	b9 09 00 00 00       	mov    ecx,0x9
c0018222:	fc                   	cld    
c0018223:	89 df                	mov    edi,ebx
c0018225:	89 de                	mov    esi,ebx
c0018227:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018229:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001822d:	83 c4 2c             	add    esp,0x2c
c0018230:	5b                   	pop    ebx
c0018231:	5e                   	pop    esi
c0018232:	5f                   	pop    edi
c0018233:	5d                   	pop    ebp
c0018234:	e9 3d 2a ff ff       	jmp    c000ac76 <Device::preOpenPCI(PCIDeviceInfo)>
c0018239:	83 c4 1c             	add    esp,0x1c
c001823c:	5b                   	pop    ebx
c001823d:	5e                   	pop    esi
c001823e:	5f                   	pop    edi
c001823f:	5d                   	pop    ebp
c0018240:	c3                   	ret    
c0018241:	90                   	nop

c0018242 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018242:	55                   	push   ebp
c0018243:	57                   	push   edi
c0018244:	56                   	push   esi
c0018245:	53                   	push   ebx
c0018246:	83 ec 68             	sub    esp,0x68
c0018249:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001824d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018254:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018258:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001825f:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018264:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018268:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001826f:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018274:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018278:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001827d:	6a 0c                	push   0xc
c001827f:	57                   	push   edi
c0018280:	53                   	push   ebx
c0018281:	56                   	push   esi
c0018282:	55                   	push   ebp
c0018283:	e8 86 f8 ff ff       	call   c0017b0e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018288:	83 c4 20             	add    esp,0x20
c001828b:	57                   	push   edi
c001828c:	53                   	push   ebx
c001828d:	56                   	push   esi
c001828e:	55                   	push   ebp
c001828f:	e8 6e f9 ff ff       	call   c0017c02 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018294:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018299:	57                   	push   edi
c001829a:	53                   	push   ebx
c001829b:	56                   	push   esi
c001829c:	55                   	push   ebp
c001829d:	e8 f6 f9 ff ff       	call   c0017c98 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00182a2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00182a6:	83 c4 14             	add    esp,0x14
c00182a9:	6a 3c                	push   0x3c
c00182ab:	57                   	push   edi
c00182ac:	53                   	push   ebx
c00182ad:	56                   	push   esi
c00182ae:	55                   	push   ebp
c00182af:	e8 5a f8 ff ff       	call   c0017b0e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182b4:	0f b6 c4             	movzx  eax,ah
c00182b7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182bb:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00182bf:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00182c3:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00182c8:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c00182ce:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c00182d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00182d8:	83 c4 20             	add    esp,0x20
c00182db:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00182e0:	74 30                	je     c0018312 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00182e2:	31 c0                	xor    eax,eax
c00182e4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00182e8:	7e 28                	jle    c0018312 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00182ea:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c00182f2:	39 cb                	cmp    ebx,ecx
c00182f4:	75 19                	jne    c001830f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00182f6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c00182fe:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018302:	75 0b                	jne    c001830f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018304:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001830b:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c001830f:	40                   	inc    eax
c0018310:	eb d2                	jmp    c00182e4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018312:	31 d2                	xor    edx,edx
c0018314:	83 ec 0c             	sub    esp,0xc
c0018317:	57                   	push   edi
c0018318:	53                   	push   ebx
c0018319:	56                   	push   esi
c001831a:	52                   	push   edx
c001831b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001831f:	55                   	push   ebp
c0018320:	e8 bf f9 ff ff       	call   c0017ce4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018325:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018329:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001832d:	42                   	inc    edx
c001832e:	83 c4 20             	add    esp,0x20
c0018331:	83 fa 06             	cmp    edx,0x6
c0018334:	75 de                	jne    c0018314 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018336:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001833b:	83 ec 0c             	sub    esp,0xc
c001833e:	86 e0                	xchg   al,ah
c0018340:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018345:	6a 02                	push   0x2
c0018347:	57                   	push   edi
c0018348:	53                   	push   ebx
c0018349:	56                   	push   esi
c001834a:	55                   	push   ebp
c001834b:	e8 be f7 ff ff       	call   c0017b0e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018350:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018355:	83 c4 20             	add    esp,0x20
c0018358:	57                   	push   edi
c0018359:	53                   	push   ebx
c001835a:	56                   	push   esi
c001835b:	55                   	push   ebp
c001835c:	e8 eb f8 ff ff       	call   c0017c4c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018361:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018365:	57                   	push   edi
c0018366:	53                   	push   ebx
c0018367:	56                   	push   esi
c0018368:	55                   	push   ebp
c0018369:	e8 48 f8 ff ff       	call   c0017bb6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001836e:	b9 09 00 00 00       	mov    ecx,0x9
c0018373:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018378:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001837c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018380:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018384:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018388:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001838c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018390:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018394:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018398:	83 ec 0c             	sub    esp,0xc
c001839b:	fc                   	cld    
c001839c:	89 e7                	mov    edi,esp
c001839e:	8d 74 24 58          	lea    esi,[esp+0x58]
c00183a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00183a4:	55                   	push   ebp
c00183a5:	e8 26 fd ff ff       	call   c00180d0 <PCI::foundDevice(PCIDeviceInfo)>
c00183aa:	81 c4 8c 00 00 00    	add    esp,0x8c
c00183b0:	5b                   	pop    ebx
c00183b1:	5e                   	pop    esi
c00183b2:	5f                   	pop    edi
c00183b3:	5d                   	pop    ebp
c00183b4:	c3                   	ret    
c00183b5:	90                   	nop

c00183b6 <PCI::checkDevice(unsigned char, unsigned char)>:
c00183b6:	55                   	push   ebp
c00183b7:	57                   	push   edi
c00183b8:	56                   	push   esi
c00183b9:	53                   	push   ebx
c00183ba:	83 ec 0c             	sub    esp,0xc
c00183bd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00183c1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00183c6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00183cb:	6a 00                	push   0x0
c00183cd:	56                   	push   esi
c00183ce:	57                   	push   edi
c00183cf:	55                   	push   ebp
c00183d0:	e8 e1 f7 ff ff       	call   c0017bb6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00183d5:	6a 00                	push   0x0
c00183d7:	56                   	push   esi
c00183d8:	57                   	push   edi
c00183d9:	55                   	push   ebp
c00183da:	e8 63 fe ff ff       	call   c0018242 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00183df:	83 c4 20             	add    esp,0x20
c00183e2:	6a 00                	push   0x0
c00183e4:	56                   	push   esi
c00183e5:	57                   	push   edi
c00183e6:	55                   	push   ebp
c00183e7:	e8 ee f7 ff ff       	call   c0017bda <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00183ec:	83 c4 10             	add    esp,0x10
c00183ef:	84 c0                	test   al,al
c00183f1:	79 27                	jns    c001841a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00183f3:	bb 01 00 00 00       	mov    ebx,0x1
c00183f8:	53                   	push   ebx
c00183f9:	56                   	push   esi
c00183fa:	57                   	push   edi
c00183fb:	55                   	push   ebp
c00183fc:	e8 b5 f7 ff ff       	call   c0017bb6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018401:	83 c4 10             	add    esp,0x10
c0018404:	66 40                	inc    ax
c0018406:	74 0c                	je     c0018414 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018408:	53                   	push   ebx
c0018409:	56                   	push   esi
c001840a:	57                   	push   edi
c001840b:	55                   	push   ebp
c001840c:	e8 31 fe ff ff       	call   c0018242 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018411:	83 c4 10             	add    esp,0x10
c0018414:	43                   	inc    ebx
c0018415:	83 fb 08             	cmp    ebx,0x8
c0018418:	75 de                	jne    c00183f8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001841a:	83 c4 0c             	add    esp,0xc
c001841d:	5b                   	pop    ebx
c001841e:	5e                   	pop    esi
c001841f:	5f                   	pop    edi
c0018420:	5d                   	pop    ebp
c0018421:	c3                   	ret    

c0018422 <PCI::detect()>:
c0018422:	56                   	push   esi
c0018423:	53                   	push   ebx
c0018424:	53                   	push   ebx
c0018425:	31 db                	xor    ebx,ebx
c0018427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001842b:	6a 00                	push   0x0
c001842d:	6a 00                	push   0x0
c001842f:	6a 00                	push   0x0
c0018431:	56                   	push   esi
c0018432:	e8 a3 f7 ff ff       	call   c0017bda <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018437:	83 c4 10             	add    esp,0x10
c001843a:	a8 80                	test   al,0x80
c001843c:	75 21                	jne    c001845f <PCI::detect()+0x3d>
c001843e:	51                   	push   ecx
c001843f:	51                   	push   ecx
c0018440:	6a 00                	push   0x0
c0018442:	56                   	push   esi
c0018443:	e8 62 fc ff ff       	call   c00180aa <PCI::checkBus(unsigned char)>
c0018448:	83 c4 10             	add    esp,0x10
c001844b:	eb 24                	jmp    c0018471 <PCI::detect()+0x4f>
c001844d:	52                   	push   edx
c001844e:	52                   	push   edx
c001844f:	53                   	push   ebx
c0018450:	43                   	inc    ebx
c0018451:	56                   	push   esi
c0018452:	e8 53 fc ff ff       	call   c00180aa <PCI::checkBus(unsigned char)>
c0018457:	83 c4 10             	add    esp,0x10
c001845a:	83 fb 08             	cmp    ebx,0x8
c001845d:	74 12                	je     c0018471 <PCI::detect()+0x4f>
c001845f:	53                   	push   ebx
c0018460:	6a 00                	push   0x0
c0018462:	6a 00                	push   0x0
c0018464:	56                   	push   esi
c0018465:	e8 4c f7 ff ff       	call   c0017bb6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001846a:	83 c4 10             	add    esp,0x10
c001846d:	66 40                	inc    ax
c001846f:	74 dc                	je     c001844d <PCI::detect()+0x2b>
c0018471:	58                   	pop    eax
c0018472:	5b                   	pop    ebx
c0018473:	5e                   	pop    esi
c0018474:	c3                   	ret    
c0018475:	90                   	nop

c0018476 <IDE::close(int, int, void*)>:
c0018476:	83 c8 ff             	or     eax,0xffffffff
c0018479:	c3                   	ret    

c001847a <IDE::IDE()>:
c001847a:	83 ec 0c             	sub    esp,0xc
c001847d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018481:	83 ec 08             	sub    esp,0x8
c0018484:	68 64 e7 01 c0       	push   0xc001e764
c0018489:	50                   	push   eax
c001848a:	e8 e5 2b ff ff       	call   c000b074 <HardDiskController::HardDiskController(char const*)>
c001848f:	83 c4 10             	add    esp,0x10
c0018492:	ba f4 e7 01 c0       	mov    edx,0xc001e7f4
c0018497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001849b:	89 10                	mov    DWORD PTR [eax],edx
c001849d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184a1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00184a8:	90                   	nop
c00184a9:	83 c4 0c             	add    esp,0xc
c00184ac:	c3                   	ret    
c00184ad:	90                   	nop

c00184ae <IDE::prepareInterrupt(unsigned char)>:
c00184ae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00184b3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00184b7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00184bf:	c3                   	ret    

c00184c0 <selectDrive(unsigned char, unsigned char)>:
c00184c0:	c3                   	ret    
c00184c1:	90                   	nop

c00184c2 <IDE::getBase(unsigned char)>:
c00184c2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00184c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184cb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00184d3:	c3                   	ret    

c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00184d4:	55                   	push   ebp
c00184d5:	57                   	push   edi
c00184d6:	56                   	push   esi
c00184d7:	53                   	push   ebx
c00184d8:	83 ec 1c             	sub    esp,0x1c
c00184db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00184df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00184e3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00184e6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00184ea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00184ee:	80 f9 03             	cmp    cl,0x3
c00184f1:	77 51                	ja     c0018544 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00184f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00184f7:	0f b6 f2             	movzx  esi,dl
c00184fa:	0f b6 db             	movzx  ebx,bl
c00184fd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018500:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018504:	83 ca 80             	or     edx,0xffffff80
c0018507:	0f b6 d2             	movzx  edx,dl
c001850a:	52                   	push   edx
c001850b:	6a 0c                	push   0xc
c001850d:	56                   	push   esi
c001850e:	57                   	push   edi
c001850f:	e8 c0 ff ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018514:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018519:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001851d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018521:	ee                   	out    dx,al
c0018522:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018527:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001852b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001852f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018533:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001853b:	83 c4 2c             	add    esp,0x2c
c001853e:	5b                   	pop    ebx
c001853f:	5e                   	pop    esi
c0018540:	5f                   	pop    edi
c0018541:	5d                   	pop    ebp
c0018542:	eb 90                	jmp    c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018544:	80 fb 07             	cmp    bl,0x7
c0018547:	77 12                	ja     c001855b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018549:	0f b6 d2             	movzx  edx,dl
c001854c:	0f b6 db             	movzx  ebx,bl
c001854f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0018557:	89 da                	mov    edx,ebx
c0018559:	eb 2f                	jmp    c001858a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001855b:	80 fb 0d             	cmp    bl,0xd
c001855e:	77 13                	ja     c0018573 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018560:	0f b6 d2             	movzx  edx,dl
c0018563:	0f b6 db             	movzx  ebx,bl
c0018566:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001856d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018571:	eb 17                	jmp    c001858a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018573:	80 fb 15             	cmp    bl,0x15
c0018576:	77 13                	ja     c001858b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0018578:	0f b6 d2             	movzx  edx,dl
c001857b:	0f b6 db             	movzx  ebx,bl
c001857e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0018586:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001858a:	ee                   	out    dx,al
c001858b:	83 c4 1c             	add    esp,0x1c
c001858e:	5b                   	pop    ebx
c001858f:	5e                   	pop    esi
c0018590:	5f                   	pop    edi
c0018591:	5d                   	pop    ebp
c0018592:	c3                   	ret    
c0018593:	90                   	nop

c0018594 <IDE::read(unsigned char, unsigned char)>:
c0018594:	55                   	push   ebp
c0018595:	57                   	push   edi
c0018596:	56                   	push   esi
c0018597:	53                   	push   ebx
c0018598:	83 ec 1c             	sub    esp,0x1c
c001859b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001859f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00185a3:	8d 43 f8             	lea    eax,[ebx-0x8]
c00185a6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00185aa:	3c 03                	cmp    al,0x3
c00185ac:	77 43                	ja     c00185f1 <IDE::read(unsigned char, unsigned char)+0x5d>
c00185ae:	0f b6 f2             	movzx  esi,dl
c00185b1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00185b4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00185b8:	83 c8 80             	or     eax,0xffffff80
c00185bb:	0f b6 c0             	movzx  eax,al
c00185be:	50                   	push   eax
c00185bf:	6a 0c                	push   0xc
c00185c1:	56                   	push   esi
c00185c2:	57                   	push   edi
c00185c3:	e8 0c ff ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00185c8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00185cd:	0f b6 c3             	movzx  eax,bl
c00185d0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00185d4:	ec                   	in     al,dx
c00185d5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00185d9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00185de:	52                   	push   edx
c00185df:	6a 0c                	push   0xc
c00185e1:	56                   	push   esi
c00185e2:	57                   	push   edi
c00185e3:	e8 ec fe ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00185e8:	83 c4 20             	add    esp,0x20
c00185eb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00185ef:	eb 49                	jmp    c001863a <IDE::read(unsigned char, unsigned char)+0xa6>
c00185f1:	80 fb 07             	cmp    bl,0x7
c00185f4:	77 12                	ja     c0018608 <IDE::read(unsigned char, unsigned char)+0x74>
c00185f6:	0f b6 d2             	movzx  edx,dl
c00185f9:	0f b6 c3             	movzx  eax,bl
c00185fc:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018604:	89 c2                	mov    edx,eax
c0018606:	eb 31                	jmp    c0018639 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018608:	80 fb 0d             	cmp    bl,0xd
c001860b:	77 13                	ja     c0018620 <IDE::read(unsigned char, unsigned char)+0x8c>
c001860d:	0f b6 d2             	movzx  edx,dl
c0018610:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0018617:	0f b6 d3             	movzx  edx,bl
c001861a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001861e:	eb 19                	jmp    c0018639 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018620:	31 c0                	xor    eax,eax
c0018622:	80 fb 15             	cmp    bl,0x15
c0018625:	77 13                	ja     c001863a <IDE::read(unsigned char, unsigned char)+0xa6>
c0018627:	0f b6 d2             	movzx  edx,dl
c001862a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0018632:	0f b6 d3             	movzx  edx,bl
c0018635:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0018639:	ec                   	in     al,dx
c001863a:	83 c4 1c             	add    esp,0x1c
c001863d:	5b                   	pop    ebx
c001863e:	5e                   	pop    esi
c001863f:	5f                   	pop    edi
c0018640:	5d                   	pop    ebp
c0018641:	c3                   	ret    

c0018642 <IDE::waitInterrupt(unsigned char)>:
c0018642:	57                   	push   edi
c0018643:	56                   	push   esi
c0018644:	31 f6                	xor    esi,esi
c0018646:	53                   	push   ebx
c0018647:	83 ec 10             	sub    esp,0x10
c001864a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001864e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018652:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018656:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001865b:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018662:	84 db                	test   bl,bl
c0018664:	75 33                	jne    c0018699 <IDE::waitInterrupt(unsigned char)+0x57>
c0018666:	52                   	push   edx
c0018667:	6a 0c                	push   0xc
c0018669:	50                   	push   eax
c001866a:	57                   	push   edi
c001866b:	e8 24 ff ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018670:	83 c4 10             	add    esp,0x10
c0018673:	a8 01                	test   al,0x1
c0018675:	75 2a                	jne    c00186a1 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018677:	f7 c6 04 00 00 00    	test   esi,0x4
c001867d:	75 12                	jne    c0018691 <IDE::waitInterrupt(unsigned char)+0x4f>
c001867f:	83 fe 32             	cmp    esi,0x32
c0018682:	7e 0d                	jle    c0018691 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018684:	83 ec 0c             	sub    esp,0xc
c0018687:	6a 64                	push   0x64
c0018689:	e8 26 a5 ff ff       	call   c0012bb4 <milliTenthSleep(unsigned int)>
c001868e:	83 c4 10             	add    esp,0x10
c0018691:	83 fe 3c             	cmp    esi,0x3c
c0018694:	74 0b                	je     c00186a1 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018696:	46                   	inc    esi
c0018697:	eb bd                	jmp    c0018656 <IDE::waitInterrupt(unsigned char)+0x14>
c0018699:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00186a1:	83 c4 10             	add    esp,0x10
c00186a4:	88 d8                	mov    al,bl
c00186a6:	5b                   	pop    ebx
c00186a7:	5e                   	pop    esi
c00186a8:	5f                   	pop    edi
c00186a9:	c3                   	ret    

c00186aa <ideChannel0IRQHandler(regs*, void*)>:
c00186aa:	83 ec 10             	sub    esp,0x10
c00186ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00186b1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00186b8:	6a 07                	push   0x7
c00186ba:	6a 00                	push   0x0
c00186bc:	50                   	push   eax
c00186bd:	e8 d2 fe ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c00186c2:	83 c4 1c             	add    esp,0x1c
c00186c5:	c3                   	ret    

c00186c6 <ideChannel1IRQHandler(regs*, void*)>:
c00186c6:	83 ec 10             	sub    esp,0x10
c00186c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00186cd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00186d4:	6a 07                	push   0x7
c00186d6:	6a 01                	push   0x1
c00186d8:	50                   	push   eax
c00186d9:	e8 b6 fe ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c00186de:	83 c4 1c             	add    esp,0x1c
c00186e1:	c3                   	ret    

c00186e2 <IDE::enableIRQs(unsigned char, bool)>:
c00186e2:	57                   	push   edi
c00186e3:	56                   	push   esi
c00186e4:	be 04 00 00 00       	mov    esi,0x4
c00186e9:	53                   	push   ebx
c00186ea:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00186ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00186f3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00186f8:	0f 94 c0             	sete   al
c00186fb:	01 c0                	add    eax,eax
c00186fd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018704:	0f b6 c0             	movzx  eax,al
c0018707:	50                   	push   eax
c0018708:	6a 0c                	push   0xc
c001870a:	57                   	push   edi
c001870b:	53                   	push   ebx
c001870c:	e8 c3 fd ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018711:	83 c4 10             	add    esp,0x10
c0018714:	50                   	push   eax
c0018715:	6a 0c                	push   0xc
c0018717:	57                   	push   edi
c0018718:	53                   	push   ebx
c0018719:	e8 76 fe ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c001871e:	83 c4 10             	add    esp,0x10
c0018721:	4e                   	dec    esi
c0018722:	75 f0                	jne    c0018714 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018724:	5b                   	pop    ebx
c0018725:	5e                   	pop    esi
c0018726:	5f                   	pop    edi
c0018727:	c3                   	ret    

c0018728 <IDE::open(int, int, void*)>:
c0018728:	55                   	push   ebp
c0018729:	57                   	push   edi
c001872a:	56                   	push   esi
c001872b:	53                   	push   ebx
c001872c:	83 ec 1c             	sub    esp,0x1c
c001872f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018733:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001873c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018745:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001874c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018753:	0f 85 b0 02 00 00    	jne    c0018a09 <IDE::open(int, int, void*)+0x2e1>
c0018759:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001875f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018763:	83 e0 7f             	and    eax,0x7f
c0018766:	3c 05                	cmp    al,0x5
c0018768:	74 04                	je     c001876e <IDE::open(int, int, void*)+0x46>
c001876a:	3c 0f                	cmp    al,0xf
c001876c:	75 32                	jne    c00187a0 <IDE::open(int, int, void*)+0x78>
c001876e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018774:	83 e0 fc             	and    eax,0xfffffffc
c0018777:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001877e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018784:	83 e0 fc             	and    eax,0xfffffffc
c0018787:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001878e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018794:	83 e0 fc             	and    eax,0xfffffffc
c0018797:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001879e:	eb 14                	jmp    c00187b4 <IDE::open(int, int, void*)+0x8c>
c00187a0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00187aa:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00187b4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00187bb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00187c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187c6:	89 c6                	mov    esi,eax
c00187c8:	bf f8 0c 00 00       	mov    edi,0xcf8
c00187cd:	c1 e6 10             	shl    esi,0x10
c00187d0:	89 e8                	mov    eax,ebp
c00187d2:	89 fa                	mov    edx,edi
c00187d4:	c1 e0 0b             	shl    eax,0xb
c00187d7:	09 f0                	or     eax,esi
c00187d9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00187e0:	c1 e6 08             	shl    esi,0x8
c00187e3:	09 c6                	or     esi,eax
c00187e5:	89 f0                	mov    eax,esi
c00187e7:	0d 08 00 00 80       	or     eax,0x80000008
c00187ec:	ef                   	out    dx,eax
c00187ed:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00187f2:	89 ca                	mov    edx,ecx
c00187f4:	ed                   	in     eax,dx
c00187f5:	c1 e8 10             	shr    eax,0x10
c00187f8:	3d ff ff 00 00       	cmp    eax,0xffff
c00187fd:	0f 84 f5 00 00 00    	je     c00188f8 <IDE::open(int, int, void*)+0x1d0>
c0018803:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0018809:	89 fa                	mov    edx,edi
c001880b:	89 f0                	mov    eax,esi
c001880d:	ef                   	out    dx,eax
c001880e:	b0 fe                	mov    al,0xfe
c0018810:	89 ca                	mov    edx,ecx
c0018812:	ee                   	out    dx,al
c0018813:	89 f0                	mov    eax,esi
c0018815:	89 fa                	mov    edx,edi
c0018817:	ef                   	out    dx,eax
c0018818:	89 ca                	mov    edx,ecx
c001881a:	ed                   	in     eax,dx
c001881b:	3c fe                	cmp    al,0xfe
c001881d:	0f 85 a9 00 00 00    	jne    c00188cc <IDE::open(int, int, void*)+0x1a4>
c0018823:	8b 15 28 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f428
c0018829:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0018830:	74 33                	je     c0018865 <IDE::open(int, int, void*)+0x13d>
c0018832:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0018838:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001883c:	40                   	inc    eax
c001883d:	83 ec 0c             	sub    esp,0xc
c0018840:	0f b6 c0             	movzx  eax,al
c0018843:	50                   	push   eax
c0018844:	55                   	push   ebp
c0018845:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018849:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001884f:	51                   	push   ecx
c0018850:	e8 67 52 ff ff       	call   c000dabc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018855:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001885a:	83 c4 1c             	add    esp,0x1c
c001885d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018863:	eb 0a                	jmp    c001886f <IDE::open(int, int, void*)+0x147>
c0018865:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001886f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0018876:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001887d:	c1 e1 10             	shl    ecx,0x10
c0018880:	c1 e0 08             	shl    eax,0x8
c0018883:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018888:	09 c1                	or     ecx,eax
c001888a:	89 fa                	mov    edx,edi
c001888c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0018893:	c1 e0 0b             	shl    eax,0xb
c0018896:	09 c1                	or     ecx,eax
c0018898:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001889e:	89 c8                	mov    eax,ecx
c00188a0:	ef                   	out    dx,eax
c00188a1:	be fc 0c 00 00       	mov    esi,0xcfc
c00188a6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00188ac:	89 f2                	mov    edx,esi
c00188ae:	ee                   	out    dx,al
c00188af:	89 c8                	mov    eax,ecx
c00188b1:	89 fa                	mov    edx,edi
c00188b3:	ef                   	out    dx,eax
c00188b4:	89 f2                	mov    edx,esi
c00188b6:	ed                   	in     eax,dx
c00188b7:	0f b6 c0             	movzx  eax,al
c00188ba:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00188c0:	74 46                	je     c0018908 <IDE::open(int, int, void*)+0x1e0>
c00188c2:	83 ec 0c             	sub    esp,0xc
c00188c5:	68 7c e7 01 c0       	push   0xc001e77c
c00188ca:	eb 34                	jmp    c0018900 <IDE::open(int, int, void*)+0x1d8>
c00188cc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00188d5:	75 17                	jne    c00188ee <IDE::open(int, int, void*)+0x1c6>
c00188d7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00188dc:	74 07                	je     c00188e5 <IDE::open(int, int, void*)+0x1bd>
c00188de:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00188e3:	75 09                	jne    c00188ee <IDE::open(int, int, void*)+0x1c6>
c00188e5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00188ec:	eb 1a                	jmp    c0018908 <IDE::open(int, int, void*)+0x1e0>
c00188ee:	83 ec 0c             	sub    esp,0xc
c00188f1:	68 84 e7 01 c0       	push   0xc001e784
c00188f6:	eb 08                	jmp    c0018900 <IDE::open(int, int, void*)+0x1d8>
c00188f8:	83 ec 0c             	sub    esp,0xc
c00188fb:	68 b5 e7 01 c0       	push   0xc001e7b5
c0018900:	e8 3a 6b ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0018905:	83 c4 10             	add    esp,0x10
c0018908:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001890f:	79 1a                	jns    c001892b <IDE::open(int, int, void*)+0x203>
c0018911:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0018917:	83 e0 fc             	and    eax,0xfffffffc
c001891a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0018921:	83 c0 08             	add    eax,0x8
c0018924:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001892b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018931:	89 c2                	mov    edx,eax
c0018933:	83 e2 0f             	and    edx,0xf
c0018936:	66 83 fa 08          	cmp    dx,0x8
c001893a:	75 0a                	jne    c0018946 <IDE::open(int, int, void*)+0x21e>
c001893c:	83 e8 02             	sub    eax,0x2
c001893f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018946:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001894c:	89 c2                	mov    edx,eax
c001894e:	83 e2 0f             	and    edx,0xf
c0018951:	66 83 fa 08          	cmp    dx,0x8
c0018955:	75 0a                	jne    c0018961 <IDE::open(int, int, void*)+0x239>
c0018957:	83 e8 02             	sub    eax,0x2
c001895a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018961:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018968:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001896f:	89 d0                	mov    eax,edx
c0018971:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018974:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018978:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001897c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001897f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018984:	0f b6 c9             	movzx  ecx,cl
c0018987:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001898e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018991:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018995:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0018999:	8d 50 02             	lea    edx,[eax+0x2]
c001899c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00189a1:	0f b6 d2             	movzx  edx,dl
c00189a4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00189aa:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00189ad:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00189b1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00189b5:	8d 48 03             	lea    ecx,[eax+0x3]
c00189b8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00189bd:	0f b6 c9             	movzx  ecx,cl
c00189c0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00189c6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00189c9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00189cd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00189d1:	8d 50 04             	lea    edx,[eax+0x4]
c00189d4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00189da:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00189df:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00189e6:	66 85 f6             	test   si,si
c00189e9:	74 5b                	je     c0018a46 <IDE::open(int, int, void*)+0x31e>
c00189eb:	0f b6 d2             	movzx  edx,dl
c00189ee:	83 c0 05             	add    eax,0x5
c00189f1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00189f4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00189f8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00189fc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018a02:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018a07:	eb 3d                	jmp    c0018a46 <IDE::open(int, int, void*)+0x31e>
c0018a09:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0018a0f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018a16:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018a1d:	66 05 06 02          	add    ax,0x206
c0018a21:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018a28:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0018a2f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018a36:	66 05 06 02          	add    ax,0x206
c0018a3a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018a41:	e9 e5 fe ff ff       	jmp    c001892b <IDE::open(int, int, void*)+0x203>
c0018a46:	50                   	push   eax
c0018a47:	50                   	push   eax
c0018a48:	6a 00                	push   0x0
c0018a4a:	53                   	push   ebx
c0018a4b:	e8 5e fa ff ff       	call   c00184ae <IDE::prepareInterrupt(unsigned char)>
c0018a50:	5a                   	pop    edx
c0018a51:	59                   	pop    ecx
c0018a52:	6a 01                	push   0x1
c0018a54:	53                   	push   ebx
c0018a55:	e8 54 fa ff ff       	call   c00184ae <IDE::prepareInterrupt(unsigned char)>
c0018a5a:	83 c4 0c             	add    esp,0xc
c0018a5d:	6a 00                	push   0x0
c0018a5f:	6a 00                	push   0x0
c0018a61:	53                   	push   ebx
c0018a62:	e8 7b fc ff ff       	call   c00186e2 <IDE::enableIRQs(unsigned char, bool)>
c0018a67:	83 c4 0c             	add    esp,0xc
c0018a6a:	6a 00                	push   0x0
c0018a6c:	6a 01                	push   0x1
c0018a6e:	53                   	push   ebx
c0018a6f:	e8 6e fc ff ff       	call   c00186e2 <IDE::enableIRQs(unsigned char, bool)>
c0018a74:	83 c4 10             	add    esp,0x10
c0018a77:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0018a7e:	74 34                	je     c0018ab4 <IDE::open(int, int, void*)+0x38c>
c0018a80:	83 ec 0c             	sub    esp,0xc
c0018a83:	53                   	push   ebx
c0018a84:	6a 01                	push   0x1
c0018a86:	68 aa 86 01 c0       	push   0xc00186aa
c0018a8b:	6a 0e                	push   0xe
c0018a8d:	53                   	push   ebx
c0018a8e:	e8 49 22 ff ff       	call   c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018a93:	83 c4 14             	add    esp,0x14
c0018a96:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018a9c:	53                   	push   ebx
c0018a9d:	6a 01                	push   0x1
c0018a9f:	68 c6 86 01 c0       	push   0xc00186c6
c0018aa4:	6a 0f                	push   0xf
c0018aa6:	53                   	push   ebx
c0018aa7:	e8 30 22 ff ff       	call   c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018aac:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0018ab2:	eb 38                	jmp    c0018aec <IDE::open(int, int, void*)+0x3c4>
c0018ab4:	83 ec 0c             	sub    esp,0xc
c0018ab7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0018ac1:	53                   	push   ebx
c0018ac2:	6a 00                	push   0x0
c0018ac4:	68 aa 86 01 c0       	push   0xc00186aa
c0018ac9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0018acf:	53                   	push   ebx
c0018ad0:	e8 07 22 ff ff       	call   c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018ad5:	83 c4 14             	add    esp,0x14
c0018ad8:	53                   	push   ebx
c0018ad9:	6a 00                	push   0x0
c0018adb:	68 c6 86 01 c0       	push   0xc00186c6
c0018ae0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0018ae6:	53                   	push   ebx
c0018ae7:	e8 f0 21 ff ff       	call   c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018aec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018aee:	83 c4 20             	add    esp,0x20
c0018af1:	83 ec 0c             	sub    esp,0xc
c0018af4:	53                   	push   ebx
c0018af5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0018af8:	83 c4 0c             	add    esp,0xc
c0018afb:	6a 07                	push   0x7
c0018afd:	6a 00                	push   0x0
c0018aff:	53                   	push   ebx
c0018b00:	e8 8f fa ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018b05:	83 c4 0c             	add    esp,0xc
c0018b08:	6a 07                	push   0x7
c0018b0a:	6a 01                	push   0x1
c0018b0c:	53                   	push   ebx
c0018b0d:	e8 82 fa ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018b12:	83 c4 0c             	add    esp,0xc
c0018b15:	6a 01                	push   0x1
c0018b17:	6a 00                	push   0x0
c0018b19:	53                   	push   ebx
c0018b1a:	e8 c3 fb ff ff       	call   c00186e2 <IDE::enableIRQs(unsigned char, bool)>
c0018b1f:	83 c4 0c             	add    esp,0xc
c0018b22:	6a 01                	push   0x1
c0018b24:	6a 01                	push   0x1
c0018b26:	53                   	push   ebx
c0018b27:	e8 b6 fb ff ff       	call   c00186e2 <IDE::enableIRQs(unsigned char, bool)>
c0018b2c:	83 c4 2c             	add    esp,0x2c
c0018b2f:	31 c0                	xor    eax,eax
c0018b31:	5b                   	pop    ebx
c0018b32:	5e                   	pop    esi
c0018b33:	5f                   	pop    edi
c0018b34:	5d                   	pop    ebp
c0018b35:	c3                   	ret    

c0018b36 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0018b36:	55                   	push   ebp
c0018b37:	57                   	push   edi
c0018b38:	56                   	push   esi
c0018b39:	53                   	push   ebx
c0018b3a:	83 ec 1c             	sub    esp,0x1c
c0018b3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018b41:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018b45:	8d 50 f8             	lea    edx,[eax-0x8]
c0018b48:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018b4c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018b50:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018b54:	80 fa 03             	cmp    dl,0x3
c0018b57:	77 5d                	ja     c0018bb6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0018b59:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018b5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018b61:	0f b6 db             	movzx  ebx,bl
c0018b64:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0018b67:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0018b6b:	83 ca 80             	or     edx,0xffffff80
c0018b6e:	0f b6 d2             	movzx  edx,dl
c0018b71:	52                   	push   edx
c0018b72:	6a 0c                	push   0xc
c0018b74:	53                   	push   ebx
c0018b75:	56                   	push   esi
c0018b76:	e8 59 f9 ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018b7b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0018b80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018b88:	0f b6 c0             	movzx  eax,al
c0018b8b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0018b8f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0018b91:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0018b96:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0018b9a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018b9e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018ba2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018baa:	83 c4 2c             	add    esp,0x2c
c0018bad:	5b                   	pop    ebx
c0018bae:	5e                   	pop    esi
c0018baf:	5f                   	pop    edi
c0018bb0:	5d                   	pop    ebp
c0018bb1:	e9 1e f9 ff ff       	jmp    c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018bb6:	3c 07                	cmp    al,0x7
c0018bb8:	77 10                	ja     c0018bca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0018bba:	0f b6 db             	movzx  ebx,bl
c0018bbd:	0f b6 d0             	movzx  edx,al
c0018bc0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0018bc8:	eb 2d                	jmp    c0018bf7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0018bca:	3c 0d                	cmp    al,0xd
c0018bcc:	77 13                	ja     c0018be1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0018bce:	0f b6 db             	movzx  ebx,bl
c0018bd1:	0f b6 c0             	movzx  eax,al
c0018bd4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0018bdb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0018bdf:	eb 16                	jmp    c0018bf7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0018be1:	3c 15                	cmp    al,0x15
c0018be3:	77 14                	ja     c0018bf9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0018be5:	0f b6 db             	movzx  ebx,bl
c0018be8:	0f b6 c0             	movzx  eax,al
c0018beb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0018bf3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0018bf7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0018bf9:	83 c4 1c             	add    esp,0x1c
c0018bfc:	5b                   	pop    ebx
c0018bfd:	5e                   	pop    esi
c0018bfe:	5f                   	pop    edi
c0018bff:	5d                   	pop    ebp
c0018c00:	c3                   	ret    
c0018c01:	90                   	nop

c0018c02 <IDE::detect()>:
c0018c02:	55                   	push   ebp
c0018c03:	57                   	push   edi
c0018c04:	56                   	push   esi
c0018c05:	53                   	push   ebx
c0018c06:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0018c0c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0018c13:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0018c1a:	0f 85 97 02 00 00    	jne    c0018eb7 <IDE::detect()+0x2b5>
c0018c20:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0018c27:	31 f6                	xor    esi,esi
c0018c29:	31 ed                	xor    ebp,ebp
c0018c2b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018c33:	89 e8                	mov    eax,ebp
c0018c35:	c1 e0 06             	shl    eax,0x6
c0018c38:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0018c40:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018c44:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018c48:	c1 e0 04             	shl    eax,0x4
c0018c4b:	83 c8 a0             	or     eax,0xffffffa0
c0018c4e:	0f b6 c0             	movzx  eax,al
c0018c51:	50                   	push   eax
c0018c52:	6a 06                	push   0x6
c0018c54:	56                   	push   esi
c0018c55:	53                   	push   ebx
c0018c56:	e8 79 f8 ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c5b:	83 c4 0c             	add    esp,0xc
c0018c5e:	6a 0c                	push   0xc
c0018c60:	56                   	push   esi
c0018c61:	53                   	push   ebx
c0018c62:	e8 2d f9 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018c67:	83 c4 0c             	add    esp,0xc
c0018c6a:	6a 0c                	push   0xc
c0018c6c:	56                   	push   esi
c0018c6d:	53                   	push   ebx
c0018c6e:	e8 21 f9 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018c73:	83 c4 0c             	add    esp,0xc
c0018c76:	6a 0c                	push   0xc
c0018c78:	56                   	push   esi
c0018c79:	53                   	push   ebx
c0018c7a:	e8 15 f9 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018c7f:	83 c4 0c             	add    esp,0xc
c0018c82:	6a 0c                	push   0xc
c0018c84:	56                   	push   esi
c0018c85:	53                   	push   ebx
c0018c86:	e8 09 f9 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018c8b:	68 ec 00 00 00       	push   0xec
c0018c90:	6a 07                	push   0x7
c0018c92:	56                   	push   esi
c0018c93:	53                   	push   ebx
c0018c94:	e8 3b f8 ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c99:	83 c4 1c             	add    esp,0x1c
c0018c9c:	6a 0c                	push   0xc
c0018c9e:	56                   	push   esi
c0018c9f:	53                   	push   ebx
c0018ca0:	e8 ef f8 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018ca5:	83 c4 0c             	add    esp,0xc
c0018ca8:	6a 0c                	push   0xc
c0018caa:	56                   	push   esi
c0018cab:	53                   	push   ebx
c0018cac:	e8 e3 f8 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018cb1:	83 c4 0c             	add    esp,0xc
c0018cb4:	6a 0c                	push   0xc
c0018cb6:	56                   	push   esi
c0018cb7:	53                   	push   ebx
c0018cb8:	e8 d7 f8 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018cbd:	83 c4 0c             	add    esp,0xc
c0018cc0:	6a 0c                	push   0xc
c0018cc2:	56                   	push   esi
c0018cc3:	53                   	push   ebx
c0018cc4:	e8 cb f8 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018cc9:	83 c4 0c             	add    esp,0xc
c0018ccc:	6a 0c                	push   0xc
c0018cce:	56                   	push   esi
c0018ccf:	53                   	push   ebx
c0018cd0:	e8 bf f8 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018cd5:	83 c4 10             	add    esp,0x10
c0018cd8:	84 c0                	test   al,al
c0018cda:	0f 84 5f 01 00 00    	je     c0018e3f <IDE::detect()+0x23d>
c0018ce0:	31 ff                	xor    edi,edi
c0018ce2:	50                   	push   eax
c0018ce3:	6a 0c                	push   0xc
c0018ce5:	56                   	push   esi
c0018ce6:	53                   	push   ebx
c0018ce7:	e8 a8 f8 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018cec:	83 c4 10             	add    esp,0x10
c0018cef:	a8 01                	test   al,0x1
c0018cf1:	0f 85 69 01 00 00    	jne    c0018e60 <IDE::detect()+0x25e>
c0018cf7:	84 c0                	test   al,al
c0018cf9:	78 04                	js     c0018cff <IDE::detect()+0xfd>
c0018cfb:	a8 08                	test   al,0x8
c0018cfd:	75 23                	jne    c0018d22 <IDE::detect()+0x120>
c0018cff:	47                   	inc    edi
c0018d00:	81 ff 17 01 00 00    	cmp    edi,0x117
c0018d06:	7e da                	jle    c0018ce2 <IDE::detect()+0xe0>
c0018d08:	83 ec 0c             	sub    esp,0xc
c0018d0b:	6a 32                	push   0x32
c0018d0d:	e8 a2 9e ff ff       	call   c0012bb4 <milliTenthSleep(unsigned int)>
c0018d12:	83 c4 10             	add    esp,0x10
c0018d15:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0018d1b:	75 c5                	jne    c0018ce2 <IDE::detect()+0xe0>
c0018d1d:	e9 3e 01 00 00       	jmp    c0018e60 <IDE::detect()+0x25e>
c0018d22:	31 c9                	xor    ecx,ecx
c0018d24:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0018d28:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0018d2c:	83 ec 0c             	sub    esp,0xc
c0018d2f:	68 80 00 00 00       	push   0x80
c0018d34:	57                   	push   edi
c0018d35:	6a 00                	push   0x0
c0018d37:	56                   	push   esi
c0018d38:	53                   	push   ebx
c0018d39:	e8 f8 fd ff ff       	call   c0018b36 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0018d3e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0018d43:	89 e8                	mov    eax,ebp
c0018d45:	89 d1                	mov    ecx,edx
c0018d47:	c1 e0 06             	shl    eax,0x6
c0018d4a:	01 d8                	add    eax,ebx
c0018d4c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0018d53:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0018d5a:	89 f2                	mov    edx,esi
c0018d5c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0018d62:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0018d66:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0018d6c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018d70:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0018d77:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0018d7f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0018d86:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0018d8e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0018d94:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0018d9b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0018da1:	8d 54 24 58          	lea    edx,[esp+0x58]
c0018da5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018da9:	83 c4 20             	add    esp,0x20
c0018dac:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0018daf:	83 c0 02             	add    eax,0x2
c0018db2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0018db8:	83 c7 02             	add    edi,0x2
c0018dbb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0018dbe:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0018dc4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0018dc8:	75 e2                	jne    c0018dac <IDE::detect()+0x1aa>
c0018dca:	89 e8                	mov    eax,ebp
c0018dcc:	c1 e0 06             	shl    eax,0x6
c0018dcf:	01 d8                	add    eax,ebx
c0018dd1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0018dd7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0018dde:	66 c1 ea 09          	shr    dx,0x9
c0018de2:	83 e2 01             	and    edx,0x1
c0018de5:	84 c9                	test   cl,cl
c0018de7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0018ded:	75 22                	jne    c0018e11 <IDE::detect()+0x20f>
c0018def:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0018df6:	74 46                	je     c0018e3e <IDE::detect()+0x23c>
c0018df8:	83 ec 0c             	sub    esp,0xc
c0018dfb:	68 7c 01 00 00       	push   0x17c
c0018e00:	e8 5c dd fe ff       	call   c0006b61 <malloc>
c0018e05:	89 c7                	mov    edi,eax
c0018e07:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e0a:	e8 39 05 00 00       	call   c0019348 <ATA::ATA()>
c0018e0f:	eb 17                	jmp    c0018e28 <IDE::detect()+0x226>
c0018e11:	83 ec 0c             	sub    esp,0xc
c0018e14:	68 84 01 00 00       	push   0x184
c0018e19:	e8 43 dd fe ff       	call   c0006b61 <malloc>
c0018e1e:	89 c7                	mov    edi,eax
c0018e20:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e23:	e8 18 0b 00 00       	call   c0019940 <ATAPI::ATAPI()>
c0018e28:	5a                   	pop    edx
c0018e29:	59                   	pop    ecx
c0018e2a:	57                   	push   edi
c0018e2b:	53                   	push   ebx
c0018e2c:	e8 ff 1e ff ff       	call   c000ad30 <Device::addChild(Device*)>
c0018e31:	8b 07                	mov    eax,DWORD PTR [edi]
c0018e33:	53                   	push   ebx
c0018e34:	55                   	push   ebp
c0018e35:	6a 00                	push   0x0
c0018e37:	57                   	push   edi
c0018e38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018e3b:	83 c4 20             	add    esp,0x20
c0018e3e:	45                   	inc    ebp
c0018e3f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0018e44:	74 0d                	je     c0018e53 <IDE::detect()+0x251>
c0018e46:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0018e4e:	e9 e0 fd ff ff       	jmp    c0018c33 <IDE::detect()+0x31>
c0018e53:	4e                   	dec    esi
c0018e54:	74 61                	je     c0018eb7 <IDE::detect()+0x2b5>
c0018e56:	be 01 00 00 00       	mov    esi,0x1
c0018e5b:	e9 cb fd ff ff       	jmp    c0018c2b <IDE::detect()+0x29>
c0018e60:	50                   	push   eax
c0018e61:	6a 04                	push   0x4
c0018e63:	56                   	push   esi
c0018e64:	53                   	push   ebx
c0018e65:	e8 2a f7 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018e6a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018e6e:	83 c4 0c             	add    esp,0xc
c0018e71:	6a 05                	push   0x5
c0018e73:	56                   	push   esi
c0018e74:	53                   	push   ebx
c0018e75:	e8 1a f7 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018e7a:	83 c4 10             	add    esp,0x10
c0018e7d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018e81:	80 fa 14             	cmp    dl,0x14
c0018e84:	75 04                	jne    c0018e8a <IDE::detect()+0x288>
c0018e86:	3c eb                	cmp    al,0xeb
c0018e88:	eb 07                	jmp    c0018e91 <IDE::detect()+0x28f>
c0018e8a:	3c 96                	cmp    al,0x96
c0018e8c:	75 b1                	jne    c0018e3f <IDE::detect()+0x23d>
c0018e8e:	80 fa 69             	cmp    dl,0x69
c0018e91:	75 ac                	jne    c0018e3f <IDE::detect()+0x23d>
c0018e93:	68 a1 00 00 00       	push   0xa1
c0018e98:	6a 07                	push   0x7
c0018e9a:	56                   	push   esi
c0018e9b:	53                   	push   ebx
c0018e9c:	e8 33 f6 ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018ea1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0018ea8:	e8 07 9d ff ff       	call   c0012bb4 <milliTenthSleep(unsigned int)>
c0018ead:	83 c4 10             	add    esp,0x10
c0018eb0:	b1 01                	mov    cl,0x1
c0018eb2:	e9 6d fe ff ff       	jmp    c0018d24 <IDE::detect()+0x122>
c0018eb7:	81 c4 1c 02 00 00    	add    esp,0x21c
c0018ebd:	5b                   	pop    ebx
c0018ebe:	5e                   	pop    esi
c0018ebf:	5f                   	pop    edi
c0018ec0:	5d                   	pop    ebp
c0018ec1:	c3                   	ret    

c0018ec2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0018ec2:	55                   	push   ebp
c0018ec3:	57                   	push   edi
c0018ec4:	56                   	push   esi
c0018ec5:	53                   	push   ebx
c0018ec6:	83 ec 1c             	sub    esp,0x1c
c0018ec9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018ecd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018ed1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0018ed5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0018ed9:	88 c3                	mov    bl,al
c0018edb:	84 c0                	test   al,al
c0018edd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ee1:	0f 84 81 00 00 00    	je     c0018f68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018ee7:	83 ec 0c             	sub    esp,0xc
c0018eea:	68 df e7 01 c0       	push   0xc001e7df
c0018eef:	e8 fc 09 ff ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0018ef4:	83 c4 10             	add    esp,0x10
c0018ef7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018efb:	3c 01                	cmp    al,0x1
c0018efd:	74 63                	je     c0018f62 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0018eff:	3c 02                	cmp    al,0x2
c0018f01:	75 53                	jne    c0018f56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0018f03:	01 f6                	add    esi,esi
c0018f05:	09 ee                	or     esi,ebp
c0018f07:	50                   	push   eax
c0018f08:	89 f0                	mov    eax,esi
c0018f0a:	6a 01                	push   0x1
c0018f0c:	0f b6 f0             	movzx  esi,al
c0018f0f:	c1 e6 06             	shl    esi,0x6
c0018f12:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0018f1a:	50                   	push   eax
c0018f1b:	57                   	push   edi
c0018f1c:	e8 73 f6 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018f21:	83 c4 10             	add    esp,0x10
c0018f24:	a8 01                	test   al,0x1
c0018f26:	74 02                	je     c0018f2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0018f28:	b3 07                	mov    bl,0x7
c0018f2a:	a8 02                	test   al,0x2
c0018f2c:	74 02                	je     c0018f30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0018f2e:	b3 03                	mov    bl,0x3
c0018f30:	a8 04                	test   al,0x4
c0018f32:	74 02                	je     c0018f36 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0018f34:	b3 14                	mov    bl,0x14
c0018f36:	a8 08                	test   al,0x8
c0018f38:	74 02                	je     c0018f3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0018f3a:	b3 03                	mov    bl,0x3
c0018f3c:	a8 10                	test   al,0x10
c0018f3e:	74 02                	je     c0018f42 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0018f40:	b3 15                	mov    bl,0x15
c0018f42:	a8 20                	test   al,0x20
c0018f44:	74 02                	je     c0018f48 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0018f46:	b3 03                	mov    bl,0x3
c0018f48:	a8 40                	test   al,0x40
c0018f4a:	74 02                	je     c0018f4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0018f4c:	b3 16                	mov    bl,0x16
c0018f4e:	84 c0                	test   al,al
c0018f50:	79 16                	jns    c0018f68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018f52:	b3 0d                	mov    bl,0xd
c0018f54:	eb 12                	jmp    c0018f68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018f56:	3c 03                	cmp    al,0x3
c0018f58:	74 0c                	je     c0018f66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0018f5a:	3c 04                	cmp    al,0x4
c0018f5c:	75 0a                	jne    c0018f68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018f5e:	b3 08                	mov    bl,0x8
c0018f60:	eb 06                	jmp    c0018f68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018f62:	b3 13                	mov    bl,0x13
c0018f64:	eb 02                	jmp    c0018f68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018f66:	b3 17                	mov    bl,0x17
c0018f68:	83 c4 1c             	add    esp,0x1c
c0018f6b:	88 d8                	mov    al,bl
c0018f6d:	5b                   	pop    ebx
c0018f6e:	5e                   	pop    esi
c0018f6f:	5f                   	pop    edi
c0018f70:	5d                   	pop    ebp
c0018f71:	c3                   	ret    

c0018f72 <IDE::polling(unsigned char, unsigned int)>:
c0018f72:	55                   	push   ebp
c0018f73:	bd 04 00 00 00       	mov    ebp,0x4
c0018f78:	57                   	push   edi
c0018f79:	56                   	push   esi
c0018f7a:	53                   	push   ebx
c0018f7b:	83 ec 0c             	sub    esp,0xc
c0018f7e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018f82:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0018f86:	0f b6 f3             	movzx  esi,bl
c0018f89:	52                   	push   edx
c0018f8a:	6a 0c                	push   0xc
c0018f8c:	56                   	push   esi
c0018f8d:	57                   	push   edi
c0018f8e:	e8 01 f6 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018f93:	83 c4 10             	add    esp,0x10
c0018f96:	4d                   	dec    ebp
c0018f97:	75 ed                	jne    c0018f86 <IDE::polling(unsigned char, unsigned int)+0x14>
c0018f99:	bb a0 86 01 00       	mov    ebx,0x186a0
c0018f9e:	50                   	push   eax
c0018f9f:	6a 0c                	push   0xc
c0018fa1:	56                   	push   esi
c0018fa2:	57                   	push   edi
c0018fa3:	e8 ec f5 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0018fa8:	83 c4 10             	add    esp,0x10
c0018fab:	a8 01                	test   al,0x1
c0018fad:	75 17                	jne    c0018fc6 <IDE::polling(unsigned char, unsigned int)+0x54>
c0018faf:	a8 20                	test   al,0x20
c0018fb1:	75 0f                	jne    c0018fc2 <IDE::polling(unsigned char, unsigned int)+0x50>
c0018fb3:	4b                   	dec    ebx
c0018fb4:	74 10                	je     c0018fc6 <IDE::polling(unsigned char, unsigned int)+0x54>
c0018fb6:	84 c0                	test   al,al
c0018fb8:	78 e4                	js     c0018f9e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0018fba:	a8 08                	test   al,0x8
c0018fbc:	74 e0                	je     c0018f9e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0018fbe:	31 c0                	xor    eax,eax
c0018fc0:	eb 06                	jmp    c0018fc8 <IDE::polling(unsigned char, unsigned int)+0x56>
c0018fc2:	b0 01                	mov    al,0x1
c0018fc4:	eb 02                	jmp    c0018fc8 <IDE::polling(unsigned char, unsigned int)+0x56>
c0018fc6:	b0 02                	mov    al,0x2
c0018fc8:	83 c4 0c             	add    esp,0xc
c0018fcb:	5b                   	pop    ebx
c0018fcc:	5e                   	pop    esi
c0018fcd:	5f                   	pop    edi
c0018fce:	5d                   	pop    ebp
c0018fcf:	c3                   	ret    

c0018fd0 <SATABus::close(int, int, void*)>:
c0018fd0:	31 c0                	xor    eax,eax
c0018fd2:	c3                   	ret    
c0018fd3:	90                   	nop

c0018fd4 <SATABus::detect()>:
c0018fd4:	c3                   	ret    
c0018fd5:	90                   	nop

c0018fd6 <SATABus::SATABus()>:
c0018fd6:	83 ec 0c             	sub    esp,0xc
c0018fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fdd:	83 ec 08             	sub    esp,0x8
c0018fe0:	68 18 e8 01 c0       	push   0xc001e818
c0018fe5:	50                   	push   eax
c0018fe6:	e8 89 20 ff ff       	call   c000b074 <HardDiskController::HardDiskController(char const*)>
c0018feb:	83 c4 10             	add    esp,0x10
c0018fee:	ba 44 e8 01 c0       	mov    edx,0xc001e844
c0018ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ff7:	89 10                	mov    DWORD PTR [eax],edx
c0018ff9:	83 ec 0c             	sub    esp,0xc
c0018ffc:	6a 50                	push   0x50
c0018ffe:	e8 e9 df fe ff       	call   c0006fec <Phys::allocateContiguousPages(int)>
c0019003:	83 c4 10             	add    esp,0x10
c0019006:	89 c2                	mov    edx,eax
c0019008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001900c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019012:	83 ec 0c             	sub    esp,0xc
c0019015:	6a 50                	push   0x50
c0019017:	e8 81 f6 fe ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c001901c:	83 c4 10             	add    esp,0x10
c001901f:	89 c2                	mov    edx,eax
c0019021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019025:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001902b:	a1 10 f5 01 c0       	mov    eax,ds:0xc001f510
c0019030:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019034:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001903a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001903e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019044:	83 ec 0c             	sub    esp,0xc
c0019047:	6a 03                	push   0x3
c0019049:	6a 50                	push   0x50
c001904b:	51                   	push   ecx
c001904c:	52                   	push   edx
c001904d:	50                   	push   eax
c001904e:	e8 d9 ff fe ff       	call   c000902c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019053:	83 c4 20             	add    esp,0x20
c0019056:	90                   	nop
c0019057:	83 c4 0c             	add    esp,0xc
c001905a:	c3                   	ret    
c001905b:	90                   	nop

c001905c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001905c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019060:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019063:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019066:	09 c2                	or     edx,eax
c0019068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001906c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019072:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019074:	31 c0                	xor    eax,eax
c0019076:	c1 e9 08             	shr    ecx,0x8
c0019079:	83 e1 0f             	and    ecx,0xf
c001907c:	39 c8                	cmp    eax,ecx
c001907e:	74 0a                	je     c001908a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019080:	f6 c2 01             	test   dl,0x1
c0019083:	74 08                	je     c001908d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019085:	d1 ea                	shr    edx,1
c0019087:	40                   	inc    eax
c0019088:	eb f2                	jmp    c001907c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001908a:	83 c8 ff             	or     eax,0xffffffff
c001908d:	c3                   	ret    

c001908e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001908e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019092:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019095:	89 c2                	mov    edx,eax
c0019097:	c1 ea 08             	shr    edx,0x8
c001909a:	83 e2 0f             	and    edx,0xf
c001909d:	fe ca                	dec    dl
c001909f:	75 31                	jne    c00190d2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00190a1:	83 e0 0f             	and    eax,0xf
c00190a4:	3c 03                	cmp    al,0x3
c00190a6:	75 2a                	jne    c00190d2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00190a8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00190ab:	b8 02 00 00 00       	mov    eax,0x2
c00190b0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00190b6:	74 1c                	je     c00190d4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00190b8:	b8 04 00 00 00       	mov    eax,0x4
c00190bd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00190c3:	74 0f                	je     c00190d4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00190c5:	31 c0                	xor    eax,eax
c00190c7:	83 fa 03             	cmp    edx,0x3
c00190ca:	0f 94 c0             	sete   al
c00190cd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00190d1:	c3                   	ret    
c00190d2:	31 c0                	xor    eax,eax
c00190d4:	c3                   	ret    
c00190d5:	90                   	nop

c00190d6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00190d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190da:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00190dd:	0f ba e2 0f          	bt     edx,0xf
c00190e1:	72 f7                	jb     c00190da <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00190e3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00190e6:	83 ca 10             	or     edx,0x10
c00190e9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00190ec:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00190ef:	83 ca 01             	or     edx,0x1
c00190f2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00190f5:	c3                   	ret    

c00190f6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00190f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190fa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00190fd:	83 e2 fe             	and    edx,0xfffffffe
c0019100:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019103:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019106:	83 e2 ef             	and    edx,0xffffffef
c0019109:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001910c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001910f:	0f ba e2 0e          	bt     edx,0xe
c0019113:	72 f7                	jb     c001910c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019115:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019118:	0f ba e2 0f          	bt     edx,0xf
c001911c:	72 ee                	jb     c001910c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001911e:	c3                   	ret    
c001911f:	90                   	nop

c0019120 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019120:	55                   	push   ebp
c0019121:	57                   	push   edi
c0019122:	56                   	push   esi
c0019123:	53                   	push   ebx
c0019124:	83 ec 1c             	sub    esp,0x1c
c0019127:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001912b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001912f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0019133:	53                   	push   ebx
c0019134:	89 fd                	mov    ebp,edi
c0019136:	56                   	push   esi
c0019137:	c1 e5 0a             	shl    ebp,0xa
c001913a:	e8 b7 ff ff ff       	call   c00190f6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001913f:	83 ec 0c             	sub    esp,0xc
c0019142:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019148:	01 e8                	add    eax,ebp
c001914a:	89 03                	mov    DWORD PTR [ebx],eax
c001914c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001914e:	68 00 04 00 00       	push   0x400
c0019153:	6a 00                	push   0x0
c0019155:	50                   	push   eax
c0019156:	e8 95 73 fe ff       	call   c00004f0 <memset>
c001915b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019161:	89 fa                	mov    edx,edi
c0019163:	01 e8                	add    eax,ebp
c0019165:	c1 e7 0d             	shl    edi,0xd
c0019168:	89 03                	mov    DWORD PTR [ebx],eax
c001916a:	c1 e2 08             	shl    edx,0x8
c001916d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019174:	81 c2 00 80 00 00    	add    edx,0x8000
c001917a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001917e:	89 d0                	mov    eax,edx
c0019180:	83 c4 1c             	add    esp,0x1c
c0019183:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019189:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001918c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001918f:	68 00 01 00 00       	push   0x100
c0019194:	6a 00                	push   0x0
c0019196:	50                   	push   eax
c0019197:	e8 54 73 fe ff       	call   c00004f0 <memset>
c001919c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00191a0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00191a6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00191ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00191b0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00191b3:	83 c4 10             	add    esp,0x10
c00191b6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00191bd:	31 ff                	xor    edi,edi
c00191bf:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00191c5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00191cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00191cf:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00191d5:	83 c5 20             	add    ebp,0x20
c00191d8:	01 f8                	add    eax,edi
c00191da:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00191dd:	52                   	push   edx
c00191de:	68 00 01 00 00       	push   0x100
c00191e3:	6a 00                	push   0x0
c00191e5:	50                   	push   eax
c00191e6:	e8 05 73 fe ff       	call   c00004f0 <memset>
c00191eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00191ef:	83 c4 10             	add    esp,0x10
c00191f2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00191f8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00191ff:	01 f8                	add    eax,edi
c0019201:	81 c7 00 01 00 00    	add    edi,0x100
c0019207:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001920a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019210:	75 b3                	jne    c00191c5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0019212:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0019216:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001921a:	83 c4 1c             	add    esp,0x1c
c001921d:	5b                   	pop    ebx
c001921e:	5e                   	pop    esi
c001921f:	5f                   	pop    edi
c0019220:	5d                   	pop    ebp
c0019221:	e9 b0 fe ff ff       	jmp    c00190d6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0019226 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019226:	55                   	push   ebp
c0019227:	57                   	push   edi
c0019228:	56                   	push   esi
c0019229:	53                   	push   ebx
c001922a:	31 db                	xor    ebx,ebx
c001922c:	83 ec 0c             	sub    esp,0xc
c001922f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019233:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019237:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001923a:	f7 c7 01 00 00 00    	test   edi,0x1
c0019240:	74 7a                	je     c00192bc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019242:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019246:	89 d8                	mov    eax,ebx
c0019248:	c1 e0 07             	shl    eax,0x7
c001924b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019252:	55                   	push   ebp
c0019253:	56                   	push   esi
c0019254:	e8 35 fe ff ff       	call   c001908e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019259:	5a                   	pop    edx
c001925a:	83 f8 01             	cmp    eax,0x1
c001925d:	59                   	pop    ecx
c001925e:	75 21                	jne    c0019281 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019260:	50                   	push   eax
c0019261:	53                   	push   ebx
c0019262:	55                   	push   ebp
c0019263:	56                   	push   esi
c0019264:	e8 b7 fe ff ff       	call   c0019120 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019269:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019270:	e8 ec d8 fe ff       	call   c0006b61 <malloc>
c0019275:	89 c5                	mov    ebp,eax
c0019277:	89 04 24             	mov    DWORD PTR [esp],eax
c001927a:	e8 75 0d 00 00       	call   c0019ff4 <SATA::SATA()>
c001927f:	eb 24                	jmp    c00192a5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019281:	83 f8 04             	cmp    eax,0x4
c0019284:	75 36                	jne    c00192bc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019286:	51                   	push   ecx
c0019287:	53                   	push   ebx
c0019288:	55                   	push   ebp
c0019289:	56                   	push   esi
c001928a:	e8 91 fe ff ff       	call   c0019120 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001928f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019296:	e8 c6 d8 fe ff       	call   c0006b61 <malloc>
c001929b:	89 c5                	mov    ebp,eax
c001929d:	89 04 24             	mov    DWORD PTR [esp],eax
c00192a0:	e8 ab 10 00 00       	call   c001a350 <SATAPI::SATAPI()>
c00192a5:	58                   	pop    eax
c00192a6:	5a                   	pop    edx
c00192a7:	55                   	push   ebp
c00192a8:	56                   	push   esi
c00192a9:	e8 82 1a ff ff       	call   c000ad30 <Device::addChild(Device*)>
c00192ae:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00192b1:	56                   	push   esi
c00192b2:	6a 00                	push   0x0
c00192b4:	53                   	push   ebx
c00192b5:	55                   	push   ebp
c00192b6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00192b9:	83 c4 20             	add    esp,0x20
c00192bc:	d1 ef                	shr    edi,1
c00192be:	43                   	inc    ebx
c00192bf:	83 fb 20             	cmp    ebx,0x20
c00192c2:	0f 85 72 ff ff ff    	jne    c001923a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00192c8:	83 c4 0c             	add    esp,0xc
c00192cb:	5b                   	pop    ebx
c00192cc:	5e                   	pop    esi
c00192cd:	5f                   	pop    edi
c00192ce:	5d                   	pop    ebp
c00192cf:	c3                   	ret    

c00192d0 <SATABus::open(int, int, void*)>:
c00192d0:	83 ec 14             	sub    esp,0x14
c00192d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192d7:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00192dd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00192e3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00192e6:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00192ec:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00192ef:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00192f5:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
c00192f8:	81 ca 00 00 00 80    	or     edx,0x80000000
c00192fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019301:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019307:	8b 51 04             	mov    edx,DWORD PTR [ecx+0x4]
c001930a:	83 ca 02             	or     edx,0x2
c001930d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019310:	ff b0 60 01 00 00    	push   DWORD PTR [eax+0x160]
c0019316:	50                   	push   eax
c0019317:	e8 0a ff ff ff       	call   c0019226 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001931c:	31 c0                	xor    eax,eax
c001931e:	83 c4 1c             	add    esp,0x1c
c0019321:	c3                   	ret    

c0019322 <ATA::close(int, int, void*)>:
c0019322:	83 ec 0c             	sub    esp,0xc
c0019325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019329:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001932f:	85 c0                	test   eax,eax
c0019331:	74 0c                	je     c001933f <ATA::close(int, int, void*)+0x1d>
c0019333:	83 ec 0c             	sub    esp,0xc
c0019336:	8b 10                	mov    edx,DWORD PTR [eax]
c0019338:	50                   	push   eax
c0019339:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001933c:	83 c4 10             	add    esp,0x10
c001933f:	31 c0                	xor    eax,eax
c0019341:	83 c4 0c             	add    esp,0xc
c0019344:	c3                   	ret    
c0019345:	90                   	nop

c0019346 <ATA::powerSaving(PowerSavingLevel)>:
c0019346:	c3                   	ret    
c0019347:	90                   	nop

c0019348 <ATA::ATA()>:
c0019348:	83 ec 0c             	sub    esp,0xc
c001934b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001934f:	83 ec 04             	sub    esp,0x4
c0019352:	68 00 02 00 00       	push   0x200
c0019357:	68 11 e9 01 c0       	push   0xc001e911
c001935c:	50                   	push   eax
c001935d:	e8 9c 1d ff ff       	call   c000b0fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019362:	83 c4 10             	add    esp,0x10
c0019365:	ba 84 e8 01 c0       	mov    edx,0xc001e884
c001936a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001936e:	89 10                	mov    DWORD PTR [eax],edx
c0019370:	90                   	nop
c0019371:	83 c4 0c             	add    esp,0xc
c0019374:	c3                   	ret    
c0019375:	90                   	nop

c0019376 <ATA::flush(bool)>:
c0019376:	53                   	push   ebx
c0019377:	83 ec 08             	sub    esp,0x8
c001937a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001937f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019383:	19 c0                	sbb    eax,eax
c0019385:	83 e0 fd             	and    eax,0xfffffffd
c0019388:	05 ea 00 00 00       	add    eax,0xea
c001938d:	50                   	push   eax
c001938e:	6a 07                	push   0x7
c0019390:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019397:	50                   	push   eax
c0019398:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001939e:	e8 31 f1 ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00193a3:	83 c4 0c             	add    esp,0xc
c00193a6:	6a 00                	push   0x0
c00193a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00193af:	50                   	push   eax
c00193b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00193b6:	e8 b7 fb ff ff       	call   c0018f72 <IDE::polling(unsigned char, unsigned int)>
c00193bb:	83 c4 18             	add    esp,0x18
c00193be:	5b                   	pop    ebx
c00193bf:	c3                   	ret    

c00193c0 <ATA::readyForCommand()>:
c00193c0:	56                   	push   esi
c00193c1:	53                   	push   ebx
c00193c2:	53                   	push   ebx
c00193c3:	31 db                	xor    ebx,ebx
c00193c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00193c9:	51                   	push   ecx
c00193ca:	6a 0c                	push   0xc
c00193cc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00193d3:	50                   	push   eax
c00193d4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00193da:	e8 b5 f1 ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c00193df:	83 c4 10             	add    esp,0x10
c00193e2:	a8 88                	test   al,0x88
c00193e4:	74 1f                	je     c0019405 <ATA::readyForCommand()+0x45>
c00193e6:	43                   	inc    ebx
c00193e7:	83 fb 63             	cmp    ebx,0x63
c00193ea:	7e dd                	jle    c00193c9 <ATA::readyForCommand()+0x9>
c00193ec:	83 ec 0c             	sub    esp,0xc
c00193ef:	6a 0a                	push   0xa
c00193f1:	e8 be 97 ff ff       	call   c0012bb4 <milliTenthSleep(unsigned int)>
c00193f6:	83 c4 10             	add    esp,0x10
c00193f9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00193ff:	75 c8                	jne    c00193c9 <ATA::readyForCommand()+0x9>
c0019401:	31 c0                	xor    eax,eax
c0019403:	eb 02                	jmp    c0019407 <ATA::readyForCommand()+0x47>
c0019405:	b0 01                	mov    al,0x1
c0019407:	5a                   	pop    edx
c0019408:	5b                   	pop    ebx
c0019409:	5e                   	pop    esi
c001940a:	c3                   	ret    
c001940b:	90                   	nop

c001940c <ATA::access(unsigned long long, int, void*, bool)>:
c001940c:	55                   	push   ebp
c001940d:	57                   	push   edi
c001940e:	56                   	push   esi
c001940f:	53                   	push   ebx
c0019410:	83 ec 2c             	sub    esp,0x2c
c0019413:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019417:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001941b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001941f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019423:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019427:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001942b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001942f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019435:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019439:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001943f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019443:	c1 e0 06             	shl    eax,0x6
c0019446:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001944e:	74 5d                	je     c00194ad <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019450:	89 fa                	mov    edx,edi
c0019452:	89 f0                	mov    eax,esi
c0019454:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019458:	c1 ea 1c             	shr    edx,0x1c
c001945b:	89 d1                	mov    ecx,edx
c001945d:	09 c1                	or     ecx,eax
c001945f:	74 25                	je     c0019486 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019461:	31 ed                	xor    ebp,ebp
c0019463:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001946a:	89 fa                	mov    edx,edi
c001946c:	89 f0                	mov    eax,esi
c001946e:	0f ad d0             	shrd   eax,edx,cl
c0019471:	d3 ea                	shr    edx,cl
c0019473:	f6 c1 20             	test   cl,0x20
c0019476:	74 02                	je     c001947a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019478:	89 d0                	mov    eax,edx
c001947a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001947e:	45                   	inc    ebp
c001947f:	83 fd 06             	cmp    ebp,0x6
c0019482:	75 df                	jne    c0019463 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019484:	eb 76                	jmp    c00194fc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019486:	89 f0                	mov    eax,esi
c0019488:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001948d:	89 fa                	mov    edx,edi
c001948f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019496:	0f ac d0 10          	shrd   eax,edx,0x10
c001949a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001949f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00194a3:	c1 ee 18             	shr    esi,0x18
c00194a6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00194ab:	eb 56                	jmp    c0019503 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00194ad:	6a 00                	push   0x0
c00194af:	6a 3f                	push   0x3f
c00194b1:	57                   	push   edi
c00194b2:	56                   	push   esi
c00194b3:	e8 a8 22 00 00       	call   c001b760 <__umoddi3>
c00194b8:	83 c4 10             	add    esp,0x10
c00194bb:	40                   	inc    eax
c00194bc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00194c0:	6a 00                	push   0x0
c00194c2:	68 f0 03 00 00       	push   0x3f0
c00194c7:	57                   	push   edi
c00194c8:	56                   	push   esi
c00194c9:	e8 92 21 00 00       	call   c001b660 <__udivdi3>
c00194ce:	83 c4 10             	add    esp,0x10
c00194d1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00194d6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00194dd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00194e2:	6a 00                	push   0x0
c00194e4:	6a 3f                	push   0x3f
c00194e6:	57                   	push   edi
c00194e7:	56                   	push   esi
c00194e8:	e8 73 21 00 00       	call   c001b660 <__udivdi3>
c00194ed:	83 c4 10             	add    esp,0x10
c00194f0:	89 c6                	mov    esi,eax
c00194f2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00194f7:	83 e6 0f             	and    esi,0xf
c00194fa:	eb 07                	jmp    c0019503 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00194fc:	31 f6                	xor    esi,esi
c00194fe:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019503:	bf 01 00 00 00       	mov    edi,0x1
c0019508:	50                   	push   eax
c0019509:	6a 00                	push   0x0
c001950b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019512:	50                   	push   eax
c0019513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019517:	e8 c6 f1 ff ff       	call   c00186e2 <IDE::enableIRQs(unsigned char, bool)>
c001951c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001951f:	e8 9c fe ff ff       	call   c00193c0 <ATA::readyForCommand()>
c0019524:	83 c4 10             	add    esp,0x10
c0019527:	84 c0                	test   al,al
c0019529:	0f 84 4e 02 00 00    	je     c001977d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001952f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019535:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001953b:	c1 e0 04             	shl    eax,0x4
c001953e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019545:	09 c6                	or     esi,eax
c0019547:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001954c:	75 05                	jne    c0019553 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001954e:	83 ce a0             	or     esi,0xffffffa0
c0019551:	eb 03                	jmp    c0019556 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019553:	83 ce e0             	or     esi,0xffffffe0
c0019556:	89 f0                	mov    eax,esi
c0019558:	0f b6 f0             	movzx  esi,al
c001955b:	56                   	push   esi
c001955c:	6a 06                	push   0x6
c001955e:	51                   	push   ecx
c001955f:	52                   	push   edx
c0019560:	e8 6f ef ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019565:	83 c4 10             	add    esp,0x10
c0019568:	6a 00                	push   0x0
c001956a:	6a 01                	push   0x1
c001956c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019573:	50                   	push   eax
c0019574:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001957a:	e8 55 ef ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001957f:	83 c4 10             	add    esp,0x10
c0019582:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019587:	75 6e                	jne    c00195f7 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0019589:	6a 00                	push   0x0
c001958b:	6a 08                	push   0x8
c001958d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019594:	50                   	push   eax
c0019595:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001959b:	e8 34 ef ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00195a0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00195a5:	50                   	push   eax
c00195a6:	6a 09                	push   0x9
c00195a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00195af:	50                   	push   eax
c00195b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00195b6:	e8 19 ef ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00195bb:	83 c4 20             	add    esp,0x20
c00195be:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00195c3:	50                   	push   eax
c00195c4:	6a 0a                	push   0xa
c00195c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00195cd:	50                   	push   eax
c00195ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00195d4:	e8 fb ee ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00195d9:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00195de:	50                   	push   eax
c00195df:	6a 0b                	push   0xb
c00195e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00195e8:	50                   	push   eax
c00195e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00195ef:	e8 e0 ee ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00195f4:	83 c4 20             	add    esp,0x20
c00195f7:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00195fc:	50                   	push   eax
c00195fd:	6a 02                	push   0x2
c00195ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019606:	50                   	push   eax
c0019607:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001960d:	e8 c2 ee ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019612:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019617:	50                   	push   eax
c0019618:	6a 03                	push   0x3
c001961a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019621:	50                   	push   eax
c0019622:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019628:	e8 a7 ee ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001962d:	83 c4 20             	add    esp,0x20
c0019630:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019635:	50                   	push   eax
c0019636:	6a 04                	push   0x4
c0019638:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001963f:	50                   	push   eax
c0019640:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019646:	e8 89 ee ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001964b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019650:	50                   	push   eax
c0019651:	6a 05                	push   0x5
c0019653:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001965a:	50                   	push   eax
c001965b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019661:	e8 6e ee ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019666:	83 c4 20             	add    esp,0x20
c0019669:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001966e:	0f 94 c0             	sete   al
c0019671:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019676:	74 09                	je     c0019681 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0019678:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001967f:	eb 07                	jmp    c0019688 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019681:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0019688:	0f b6 c0             	movzx  eax,al
c001968b:	50                   	push   eax
c001968c:	6a 07                	push   0x7
c001968e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019695:	50                   	push   eax
c0019696:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001969c:	e8 33 ee ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196a1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00196a5:	83 c4 10             	add    esp,0x10
c00196a8:	85 f6                	test   esi,esi
c00196aa:	0f 84 ae 00 00 00    	je     c001975e <ATA::access(unsigned long long, int, void*, bool)+0x352>
c00196b0:	50                   	push   eax
c00196b1:	6a 01                	push   0x1
c00196b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00196ba:	50                   	push   eax
c00196bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00196c1:	e8 ac f8 ff ff       	call   c0018f72 <IDE::polling(unsigned char, unsigned int)>
c00196c6:	83 c4 10             	add    esp,0x10
c00196c9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00196cf:	84 c0                	test   al,al
c00196d1:	74 20                	je     c00196f3 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c00196d3:	0f b6 f8             	movzx  edi,al
c00196d6:	0f b6 d2             	movzx  edx,dl
c00196d9:	57                   	push   edi
c00196da:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00196e1:	50                   	push   eax
c00196e2:	52                   	push   edx
c00196e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00196e9:	e8 d4 f7 ff ff       	call   c0018ec2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00196ee:	e9 87 00 00 00       	jmp    c001977a <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c00196f3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00196f8:	74 33                	je     c001972d <ATA::access(unsigned long long, int, void*, bool)+0x321>
c00196fa:	31 ed                	xor    ebp,ebp
c00196fc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019700:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019704:	50                   	push   eax
c0019705:	50                   	push   eax
c0019706:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001970d:	50                   	push   eax
c001970e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019714:	e8 a9 ed ff ff       	call   c00184c2 <IDE::getBase(unsigned char)>
c0019719:	89 c2                	mov    edx,eax
c001971b:	89 f8                	mov    eax,edi
c001971d:	66 ef                	out    dx,ax
c001971f:	45                   	inc    ebp
c0019720:	83 c4 10             	add    esp,0x10
c0019723:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019729:	75 d1                	jne    c00196fc <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001972b:	eb 23                	jmp    c0019750 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001972d:	0f b6 d2             	movzx  edx,dl
c0019730:	51                   	push   ecx
c0019731:	51                   	push   ecx
c0019732:	52                   	push   edx
c0019733:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019739:	e8 84 ed ff ff       	call   c00184c2 <IDE::getBase(unsigned char)>
c001973e:	b9 00 01 00 00       	mov    ecx,0x100
c0019743:	89 c2                	mov    edx,eax
c0019745:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0019749:	fc                   	cld    
c001974a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001974d:	83 c4 10             	add    esp,0x10
c0019750:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0019758:	4e                   	dec    esi
c0019759:	e9 4a ff ff ff       	jmp    c00196a8 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001975e:	31 ff                	xor    edi,edi
c0019760:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019765:	74 16                	je     c001977d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019767:	50                   	push   eax
c0019768:	50                   	push   eax
c0019769:	31 c0                	xor    eax,eax
c001976b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019770:	0f 94 c0             	sete   al
c0019773:	50                   	push   eax
c0019774:	53                   	push   ebx
c0019775:	e8 fc fb ff ff       	call   c0019376 <ATA::flush(bool)>
c001977a:	83 c4 10             	add    esp,0x10
c001977d:	83 c4 2c             	add    esp,0x2c
c0019780:	89 f8                	mov    eax,edi
c0019782:	5b                   	pop    ebx
c0019783:	5e                   	pop    esi
c0019784:	5f                   	pop    edi
c0019785:	5d                   	pop    ebp
c0019786:	c3                   	ret    
c0019787:	90                   	nop

c0019788 <ATA::read(unsigned long long, int, void*)>:
c0019788:	57                   	push   edi
c0019789:	b8 04 00 00 00       	mov    eax,0x4
c001978e:	56                   	push   esi
c001978f:	53                   	push   ebx
c0019790:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019794:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019798:	8d 7a ff             	lea    edi,[edx-0x1]
c001979b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001979f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00197a3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00197a9:	77 25                	ja     c00197d0 <ATA::read(unsigned long long, int, void*)+0x48>
c00197ab:	b8 06 00 00 00       	mov    eax,0x6
c00197b0:	85 f6                	test   esi,esi
c00197b2:	74 1c                	je     c00197d0 <ATA::read(unsigned long long, int, void*)+0x48>
c00197b4:	50                   	push   eax
c00197b5:	50                   	push   eax
c00197b6:	6a 00                	push   0x0
c00197b8:	56                   	push   esi
c00197b9:	52                   	push   edx
c00197ba:	53                   	push   ebx
c00197bb:	51                   	push   ecx
c00197bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00197c0:	e8 47 fc ff ff       	call   c001940c <ATA::access(unsigned long long, int, void*, bool)>
c00197c5:	83 c4 20             	add    esp,0x20
c00197c8:	85 c0                	test   eax,eax
c00197ca:	0f 95 c0             	setne  al
c00197cd:	0f b6 c0             	movzx  eax,al
c00197d0:	5b                   	pop    ebx
c00197d1:	5e                   	pop    esi
c00197d2:	5f                   	pop    edi
c00197d3:	c3                   	ret    

c00197d4 <ATA::write(unsigned long long, int, void*)>:
c00197d4:	57                   	push   edi
c00197d5:	b8 04 00 00 00       	mov    eax,0x4
c00197da:	56                   	push   esi
c00197db:	53                   	push   ebx
c00197dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00197e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00197e4:	8d 7a ff             	lea    edi,[edx-0x1]
c00197e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00197eb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00197ef:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00197f5:	77 25                	ja     c001981c <ATA::write(unsigned long long, int, void*)+0x48>
c00197f7:	b8 06 00 00 00       	mov    eax,0x6
c00197fc:	85 f6                	test   esi,esi
c00197fe:	74 1c                	je     c001981c <ATA::write(unsigned long long, int, void*)+0x48>
c0019800:	50                   	push   eax
c0019801:	50                   	push   eax
c0019802:	6a 01                	push   0x1
c0019804:	56                   	push   esi
c0019805:	52                   	push   edx
c0019806:	53                   	push   ebx
c0019807:	51                   	push   ecx
c0019808:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001980c:	e8 fb fb ff ff       	call   c001940c <ATA::access(unsigned long long, int, void*, bool)>
c0019811:	83 c4 20             	add    esp,0x20
c0019814:	85 c0                	test   eax,eax
c0019816:	0f 95 c0             	setne  al
c0019819:	0f b6 c0             	movzx  eax,al
c001981c:	5b                   	pop    ebx
c001981d:	5e                   	pop    esi
c001981e:	5f                   	pop    edi
c001981f:	c3                   	ret    

c0019820 <ATA::detectCHS()>:
c0019820:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019824:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001982a:	c1 e0 06             	shl    eax,0x6
c001982d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0019833:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001983d:	c7 44 24 04 68 e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e868
c0019845:	e9 f5 5b ff ff       	jmp    c000f43f <Krnl::panic(char const*)>

c001984a <ATA::open(int, int, void*)>:
c001984a:	53                   	push   ebx
c001984b:	83 ec 08             	sub    esp,0x8
c001984e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019856:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001985a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019860:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019866:	c1 e0 06             	shl    eax,0x6
c0019869:	01 d0                	add    eax,edx
c001986b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0019872:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0019878:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001987f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019889:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001988f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019896:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001989d:	75 0c                	jne    c00198ab <ATA::open(int, int, void*)+0x61>
c001989f:	83 ec 0c             	sub    esp,0xc
c00198a2:	53                   	push   ebx
c00198a3:	e8 78 ff ff ff       	call   c0019820 <ATA::detectCHS()>
c00198a8:	83 c4 10             	add    esp,0x10
c00198ab:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00198b1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00198b7:	c1 e0 06             	shl    eax,0x6
c00198ba:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00198c1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00198cb:	d1 e8                	shr    eax,1
c00198cd:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00198d3:	6a 04                	push   0x4
c00198d5:	6a 0c                	push   0xc
c00198d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00198de:	50                   	push   eax
c00198df:	52                   	push   edx
c00198e0:	e8 ef eb ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198e5:	90                   	nop
c00198e6:	90                   	nop
c00198e7:	6a 00                	push   0x0
c00198e9:	6a 0c                	push   0xc
c00198eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00198f2:	50                   	push   eax
c00198f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00198f9:	e8 d6 eb ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198fe:	83 c4 14             	add    esp,0x14
c0019901:	53                   	push   ebx
c0019902:	e8 5f 18 ff ff       	call   c000b166 <PhysicalDisk::startCache()>
c0019907:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001990a:	e8 cf 28 ff ff       	call   c000c1de <createPartitionsForDisk(PhysicalDisk*)>
c001990f:	31 c0                	xor    eax,eax
c0019911:	83 c4 18             	add    esp,0x18
c0019914:	5b                   	pop    ebx
c0019915:	c3                   	ret    

c0019916 <ATAPI::write(unsigned long long, int, void*)>:
c0019916:	b8 03 00 00 00       	mov    eax,0x3
c001991b:	c3                   	ret    

c001991c <ATAPI::close(int, int, void*)>:
c001991c:	83 ec 0c             	sub    esp,0xc
c001991f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019923:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019929:	85 c0                	test   eax,eax
c001992b:	74 0c                	je     c0019939 <ATAPI::close(int, int, void*)+0x1d>
c001992d:	83 ec 0c             	sub    esp,0xc
c0019930:	8b 10                	mov    edx,DWORD PTR [eax]
c0019932:	50                   	push   eax
c0019933:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019936:	83 c4 10             	add    esp,0x10
c0019939:	31 c0                	xor    eax,eax
c001993b:	83 c4 0c             	add    esp,0xc
c001993e:	c3                   	ret    
c001993f:	90                   	nop

c0019940 <ATAPI::ATAPI()>:
c0019940:	83 ec 0c             	sub    esp,0xc
c0019943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019947:	83 ec 04             	sub    esp,0x4
c001994a:	68 00 08 00 00       	push   0x800
c001994f:	68 b1 e9 01 c0       	push   0xc001e9b1
c0019954:	50                   	push   eax
c0019955:	e8 a4 17 ff ff       	call   c000b0fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001995a:	83 c4 10             	add    esp,0x10
c001995d:	ba cc e8 01 c0       	mov    edx,0xc001e8cc
c0019962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019966:	89 10                	mov    DWORD PTR [eax],edx
c0019968:	90                   	nop
c0019969:	83 c4 0c             	add    esp,0xc
c001996c:	c3                   	ret    
c001996d:	90                   	nop

c001996e <ATAPI::readyForCommand()>:
c001996e:	56                   	push   esi
c001996f:	53                   	push   ebx
c0019970:	53                   	push   ebx
c0019971:	31 db                	xor    ebx,ebx
c0019973:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019977:	51                   	push   ecx
c0019978:	6a 0c                	push   0xc
c001997a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019981:	50                   	push   eax
c0019982:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019988:	e8 07 ec ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c001998d:	83 c4 10             	add    esp,0x10
c0019990:	a8 88                	test   al,0x88
c0019992:	74 25                	je     c00199b9 <ATAPI::readyForCommand()+0x4b>
c0019994:	43                   	inc    ebx
c0019995:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001999b:	7e da                	jle    c0019977 <ATAPI::readyForCommand()+0x9>
c001999d:	83 ec 0c             	sub    esp,0xc
c00199a0:	68 5e 01 00 00       	push   0x15e
c00199a5:	e8 0a 92 ff ff       	call   c0012bb4 <milliTenthSleep(unsigned int)>
c00199aa:	83 c4 10             	add    esp,0x10
c00199ad:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c00199b3:	75 c2                	jne    c0019977 <ATAPI::readyForCommand()+0x9>
c00199b5:	31 c0                	xor    eax,eax
c00199b7:	eb 02                	jmp    c00199bb <ATAPI::readyForCommand()+0x4d>
c00199b9:	b0 01                	mov    al,0x1
c00199bb:	5a                   	pop    edx
c00199bc:	5b                   	pop    ebx
c00199bd:	5e                   	pop    esi
c00199be:	c3                   	ret    
c00199bf:	90                   	nop

c00199c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00199c0:	55                   	push   ebp
c00199c1:	57                   	push   edi
c00199c2:	56                   	push   esi
c00199c3:	53                   	push   ebx
c00199c4:	83 ec 20             	sub    esp,0x20
c00199c7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00199cb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00199cf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00199d3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00199d7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00199db:	6a 01                	push   0x1
c00199dd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00199e4:	50                   	push   eax
c00199e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00199eb:	e8 f2 ec ff ff       	call   c00186e2 <IDE::enableIRQs(unsigned char, bool)>
c00199f0:	5e                   	pop    esi
c00199f1:	58                   	pop    eax
c00199f2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00199f9:	50                   	push   eax
c00199fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a00:	e8 a9 ea ff ff       	call   c00184ae <IDE::prepareInterrupt(unsigned char)>
c0019a05:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019a08:	e8 61 ff ff ff       	call   c001996e <ATAPI::readyForCommand()>
c0019a0d:	83 c4 10             	add    esp,0x10
c0019a10:	84 c0                	test   al,al
c0019a12:	75 0a                	jne    c0019a1e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0019a14:	bb 01 00 00 00       	mov    ebx,0x1
c0019a19:	e9 57 02 00 00       	jmp    c0019c75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019a1e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0019a24:	c1 e0 04             	shl    eax,0x4
c0019a27:	0f b6 c0             	movzx  eax,al
c0019a2a:	50                   	push   eax
c0019a2b:	6a 06                	push   0x6
c0019a2d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a34:	50                   	push   eax
c0019a35:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a3b:	e8 94 ea ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a40:	6a 00                	push   0x0
c0019a42:	6a 01                	push   0x1
c0019a44:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a4b:	50                   	push   eax
c0019a4c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a52:	e8 7d ea ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a57:	83 c4 20             	add    esp,0x20
c0019a5a:	0f b6 c3             	movzx  eax,bl
c0019a5d:	0f b6 df             	movzx  ebx,bh
c0019a60:	50                   	push   eax
c0019a61:	6a 04                	push   0x4
c0019a63:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a6a:	50                   	push   eax
c0019a6b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a71:	e8 5e ea ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a76:	53                   	push   ebx
c0019a77:	6a 05                	push   0x5
c0019a79:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a80:	50                   	push   eax
c0019a81:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a87:	e8 48 ea ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a8c:	83 c4 20             	add    esp,0x20
c0019a8f:	68 a0 00 00 00       	push   0xa0
c0019a94:	6a 07                	push   0x7
c0019a96:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a9d:	50                   	push   eax
c0019a9e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019aa4:	e8 2b ea ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019aa9:	83 c4 0c             	add    esp,0xc
c0019aac:	6a 01                	push   0x1
c0019aae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019ab5:	50                   	push   eax
c0019ab6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019abc:	e8 b1 f4 ff ff       	call   c0018f72 <IDE::polling(unsigned char, unsigned int)>
c0019ac1:	83 c4 10             	add    esp,0x10
c0019ac4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0019aca:	84 c0                	test   al,al
c0019acc:	74 23                	je     c0019af1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0019ace:	0f b6 d8             	movzx  ebx,al
c0019ad1:	0f b6 d2             	movzx  edx,dl
c0019ad4:	53                   	push   ebx
c0019ad5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0019adc:	50                   	push   eax
c0019add:	52                   	push   edx
c0019ade:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019ae4:	e8 d9 f3 ff ff       	call   c0018ec2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019ae9:	83 c4 10             	add    esp,0x10
c0019aec:	e9 84 01 00 00       	jmp    c0019c75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019af1:	0f b6 d2             	movzx  edx,dl
c0019af4:	53                   	push   ebx
c0019af5:	53                   	push   ebx
c0019af6:	52                   	push   edx
c0019af7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019afd:	e8 c0 e9 ff ff       	call   c00184c2 <IDE::getBase(unsigned char)>
c0019b02:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019b06:	b9 06 00 00 00       	mov    ecx,0x6
c0019b0b:	89 c2                	mov    edx,eax
c0019b0d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0019b10:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0019b14:	83 c4 10             	add    esp,0x10
c0019b17:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019b1d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019b24:	85 db                	test   ebx,ebx
c0019b26:	0f 84 ec 00 00 00    	je     c0019c18 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0019b2c:	51                   	push   ecx
c0019b2d:	51                   	push   ecx
c0019b2e:	52                   	push   edx
c0019b2f:	50                   	push   eax
c0019b30:	e8 0d eb ff ff       	call   c0018642 <IDE::waitInterrupt(unsigned char)>
c0019b35:	83 c4 10             	add    esp,0x10
c0019b38:	84 c0                	test   al,al
c0019b3a:	0f 84 d4 fe ff ff    	je     c0019a14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0019b40:	56                   	push   esi
c0019b41:	56                   	push   esi
c0019b42:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b49:	50                   	push   eax
c0019b4a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b50:	e8 59 e9 ff ff       	call   c00184ae <IDE::prepareInterrupt(unsigned char)>
c0019b55:	83 c4 0c             	add    esp,0xc
c0019b58:	6a 04                	push   0x4
c0019b5a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b61:	50                   	push   eax
c0019b62:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b68:	e8 27 ea ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0019b6d:	83 c4 0c             	add    esp,0xc
c0019b70:	89 c6                	mov    esi,eax
c0019b72:	6a 05                	push   0x5
c0019b74:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b7b:	50                   	push   eax
c0019b7c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b82:	e8 0d ea ff ff       	call   c0018594 <IDE::read(unsigned char, unsigned char)>
c0019b87:	89 f1                	mov    ecx,esi
c0019b89:	0f b6 c0             	movzx  eax,al
c0019b8c:	0f b6 f1             	movzx  esi,cl
c0019b8f:	c1 e0 08             	shl    eax,0x8
c0019b92:	09 c6                	or     esi,eax
c0019b94:	d1 fe                	sar    esi,1
c0019b96:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0019b9a:	83 c4 10             	add    esp,0x10
c0019b9d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019ba2:	74 41                	je     c0019be5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0019ba4:	31 c9                	xor    ecx,ecx
c0019ba6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019bac:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019bb3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0019bb7:	75 0a                	jne    c0019bc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0019bb9:	01 c9                	add    ecx,ecx
c0019bbb:	01 cd                	add    ebp,ecx
c0019bbd:	4b                   	dec    ebx
c0019bbe:	e9 54 ff ff ff       	jmp    c0019b17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0019bc3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0019bc8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019bcc:	51                   	push   ecx
c0019bcd:	51                   	push   ecx
c0019bce:	52                   	push   edx
c0019bcf:	50                   	push   eax
c0019bd0:	e8 ed e8 ff ff       	call   c00184c2 <IDE::getBase(unsigned char)>
c0019bd5:	89 c2                	mov    edx,eax
c0019bd7:	89 f0                	mov    eax,esi
c0019bd9:	66 ef                	out    dx,ax
c0019bdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019bdf:	83 c4 10             	add    esp,0x10
c0019be2:	41                   	inc    ecx
c0019be3:	eb c1                	jmp    c0019ba6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0019be5:	31 f6                	xor    esi,esi
c0019be7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019bed:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019bf4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0019bf8:	75 06                	jne    c0019c00 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0019bfa:	01 f6                	add    esi,esi
c0019bfc:	01 f5                	add    ebp,esi
c0019bfe:	eb bd                	jmp    c0019bbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0019c00:	51                   	push   ecx
c0019c01:	51                   	push   ecx
c0019c02:	52                   	push   edx
c0019c03:	50                   	push   eax
c0019c04:	e8 b9 e8 ff ff       	call   c00184c2 <IDE::getBase(unsigned char)>
c0019c09:	89 c2                	mov    edx,eax
c0019c0b:	66 ed                	in     ax,dx
c0019c0d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0019c12:	83 c4 10             	add    esp,0x10
c0019c15:	46                   	inc    esi
c0019c16:	eb cf                	jmp    c0019be7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0019c18:	51                   	push   ecx
c0019c19:	51                   	push   ecx
c0019c1a:	52                   	push   edx
c0019c1b:	50                   	push   eax
c0019c1c:	e8 21 ea ff ff       	call   c0018642 <IDE::waitInterrupt(unsigned char)>
c0019c21:	83 c4 10             	add    esp,0x10
c0019c24:	84 c0                	test   al,al
c0019c26:	0f 84 e8 fd ff ff    	je     c0019a14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0019c2c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019c31:	52                   	push   edx
c0019c32:	52                   	push   edx
c0019c33:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019c3a:	50                   	push   eax
c0019c3b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019c41:	e8 68 e8 ff ff       	call   c00184ae <IDE::prepareInterrupt(unsigned char)>
c0019c46:	83 c4 10             	add    esp,0x10
c0019c49:	50                   	push   eax
c0019c4a:	50                   	push   eax
c0019c4b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019c52:	50                   	push   eax
c0019c53:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019c59:	e8 64 e8 ff ff       	call   c00184c2 <IDE::getBase(unsigned char)>
c0019c5e:	8d 50 07             	lea    edx,[eax+0x7]
c0019c61:	ec                   	in     al,dx
c0019c62:	83 c4 10             	add    esp,0x10
c0019c65:	a8 88                	test   al,0x88
c0019c67:	74 0a                	je     c0019c73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0019c69:	4b                   	dec    ebx
c0019c6a:	75 dd                	jne    c0019c49 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0019c6c:	bb 02 00 00 00       	mov    ebx,0x2
c0019c71:	eb 02                	jmp    c0019c75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019c73:	31 db                	xor    ebx,ebx
c0019c75:	83 c4 1c             	add    esp,0x1c
c0019c78:	89 d8                	mov    eax,ebx
c0019c7a:	5b                   	pop    ebx
c0019c7b:	5e                   	pop    esi
c0019c7c:	5f                   	pop    edi
c0019c7d:	5d                   	pop    ebp
c0019c7e:	c3                   	ret    
c0019c7f:	90                   	nop

c0019c80 <ATAPI::diskRemoved()>:
c0019c80:	53                   	push   ebx
c0019c81:	83 ec 14             	sub    esp,0x14
c0019c84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019c88:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0019c8f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0019c95:	e8 c4 22 ff ff       	call   c000bf5e <LogicalDisk::unmount()>
c0019c9a:	58                   	pop    eax
c0019c9b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0019ca1:	e8 fe 2b ff ff       	call   c000c8a4 <VCache::writeWriteBuffer()>
c0019ca6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019cac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019cb0:	83 c4 18             	add    esp,0x18
c0019cb3:	5b                   	pop    ebx
c0019cb4:	e9 db 2b ff ff       	jmp    c000c894 <VCache::invalidateReadBuffer()>
c0019cb9:	90                   	nop

c0019cba <ATAPI::eject()>:
c0019cba:	57                   	push   edi
c0019cbb:	b9 03 00 00 00       	mov    ecx,0x3
c0019cc0:	53                   	push   ebx
c0019cc1:	83 ec 14             	sub    esp,0x14
c0019cc4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019cc8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0019ccc:	fc                   	cld    
c0019ccd:	31 c0                	xor    eax,eax
c0019ccf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019cd1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0019cd6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0019cdb:	50                   	push   eax
c0019cdc:	50                   	push   eax
c0019cdd:	6a 00                	push   0x0
c0019cdf:	6a 00                	push   0x0
c0019ce1:	6a 00                	push   0x0
c0019ce3:	6a 02                	push   0x2
c0019ce5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019ce9:	50                   	push   eax
c0019cea:	53                   	push   ebx
c0019ceb:	e8 d0 fc ff ff       	call   c00199c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019cf0:	83 c4 14             	add    esp,0x14
c0019cf3:	53                   	push   ebx
c0019cf4:	e8 87 ff ff ff       	call   c0019c80 <ATAPI::diskRemoved()>
c0019cf9:	83 c4 24             	add    esp,0x24
c0019cfc:	31 c0                	xor    eax,eax
c0019cfe:	5b                   	pop    ebx
c0019cff:	5f                   	pop    edi
c0019d00:	c3                   	ret    
c0019d01:	90                   	nop

c0019d02 <ATAPI::diskInserted()>:
c0019d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d06:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0019d0d:	c3                   	ret    

c0019d0e <ATAPI::detectMedia()>:
c0019d0e:	56                   	push   esi
c0019d0f:	53                   	push   ebx
c0019d10:	83 ec 28             	sub    esp,0x28
c0019d13:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d17:	6a 0c                	push   0xc
c0019d19:	6a 00                	push   0x0
c0019d1b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0019d1f:	56                   	push   esi
c0019d20:	e8 cb 67 fe ff       	call   c00004f0 <memset>
c0019d25:	58                   	pop    eax
c0019d26:	5a                   	pop    edx
c0019d27:	6a 00                	push   0x0
c0019d29:	6a 00                	push   0x0
c0019d2b:	6a 00                	push   0x0
c0019d2d:	6a 00                	push   0x0
c0019d2f:	56                   	push   esi
c0019d30:	53                   	push   ebx
c0019d31:	e8 8a fc ff ff       	call   c00199c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019d36:	83 c4 1c             	add    esp,0x1c
c0019d39:	6a 0c                	push   0xc
c0019d3b:	6a 00                	push   0x0
c0019d3d:	56                   	push   esi
c0019d3e:	e8 ad 67 fe ff       	call   c00004f0 <memset>
c0019d43:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0019d48:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0019d4d:	59                   	pop    ecx
c0019d4e:	58                   	pop    eax
c0019d4f:	6a 01                	push   0x1
c0019d51:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0019d55:	50                   	push   eax
c0019d56:	6a 00                	push   0x0
c0019d58:	6a 12                	push   0x12
c0019d5a:	56                   	push   esi
c0019d5b:	53                   	push   ebx
c0019d5c:	e8 5f fc ff ff       	call   c00199c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019d61:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0019d65:	83 c4 20             	add    esp,0x20
c0019d68:	83 e0 7f             	and    eax,0x7f
c0019d6b:	3c 70                	cmp    al,0x70
c0019d6d:	74 15                	je     c0019d84 <ATAPI::detectMedia()+0x76>
c0019d6f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019d76:	75 0c                	jne    c0019d84 <ATAPI::detectMedia()+0x76>
c0019d78:	83 ec 0c             	sub    esp,0xc
c0019d7b:	53                   	push   ebx
c0019d7c:	e8 81 ff ff ff       	call   c0019d02 <ATAPI::diskInserted()>
c0019d81:	83 c4 10             	add    esp,0x10
c0019d84:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019d88:	83 e0 0f             	and    eax,0xf
c0019d8b:	3c 02                	cmp    al,0x2
c0019d8d:	75 1b                	jne    c0019daa <ATAPI::detectMedia()+0x9c>
c0019d8f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0019d94:	75 2d                	jne    c0019dc3 <ATAPI::detectMedia()+0xb5>
c0019d96:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019d9d:	74 24                	je     c0019dc3 <ATAPI::detectMedia()+0xb5>
c0019d9f:	83 ec 0c             	sub    esp,0xc
c0019da2:	53                   	push   ebx
c0019da3:	e8 d8 fe ff ff       	call   c0019c80 <ATAPI::diskRemoved()>
c0019da8:	eb 16                	jmp    c0019dc0 <ATAPI::detectMedia()+0xb2>
c0019daa:	84 c0                	test   al,al
c0019dac:	75 15                	jne    c0019dc3 <ATAPI::detectMedia()+0xb5>
c0019dae:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019db5:	75 0c                	jne    c0019dc3 <ATAPI::detectMedia()+0xb5>
c0019db7:	83 ec 0c             	sub    esp,0xc
c0019dba:	53                   	push   ebx
c0019dbb:	e8 42 ff ff ff       	call   c0019d02 <ATAPI::diskInserted()>
c0019dc0:	83 c4 10             	add    esp,0x10
c0019dc3:	83 c4 24             	add    esp,0x24
c0019dc6:	5b                   	pop    ebx
c0019dc7:	5e                   	pop    esi
c0019dc8:	c3                   	ret    
c0019dc9:	90                   	nop

c0019dca <ATAPI::open(int, int, void*)>:
c0019dca:	56                   	push   esi
c0019dcb:	53                   	push   ebx
c0019dcc:	50                   	push   eax
c0019dcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019dd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019dd5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019dd9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019ddf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019de5:	c1 e0 06             	shl    eax,0x6
c0019de8:	01 d0                	add    eax,edx
c0019dea:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0019df1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0019df7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0019dfe:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0019e08:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0019e0e:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0019e15:	6a 04                	push   0x4
c0019e17:	6a 0c                	push   0xc
c0019e19:	51                   	push   ecx
c0019e1a:	52                   	push   edx
c0019e1b:	e8 b4 e6 ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e20:	90                   	nop
c0019e21:	90                   	nop
c0019e22:	6a 00                	push   0x0
c0019e24:	6a 0c                	push   0xc
c0019e26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e2d:	50                   	push   eax
c0019e2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e34:	e8 9b e6 ff ff       	call   c00184d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e39:	83 c4 14             	add    esp,0x14
c0019e3c:	68 74 01 00 00       	push   0x174
c0019e41:	e8 1b cd fe ff       	call   c0006b61 <malloc>
c0019e46:	83 c4 0c             	add    esp,0xc
c0019e49:	89 c6                	mov    esi,eax
c0019e4b:	6a 00                	push   0x0
c0019e4d:	68 ff ff ff 7f       	push   0x7fffffff
c0019e52:	6a 00                	push   0x0
c0019e54:	6a 00                	push   0x0
c0019e56:	53                   	push   ebx
c0019e57:	68 9a ea 01 c0       	push   0xc001ea9a
c0019e5c:	50                   	push   eax
c0019e5d:	e8 48 1f ff ff       	call   c000bdaa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0019e62:	83 c4 14             	add    esp,0x14
c0019e65:	56                   	push   esi
c0019e66:	e8 f5 1f ff ff       	call   c000be60 <LogicalDisk::assignDriveLetter()>
c0019e6b:	5a                   	pop    edx
c0019e6c:	0f be c0             	movsx  eax,al
c0019e6f:	59                   	pop    ecx
c0019e70:	50                   	push   eax
c0019e71:	68 b4 e8 01 c0       	push   0xc001e8b4
c0019e76:	e8 75 fa fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c0019e7b:	58                   	pop    eax
c0019e7c:	5a                   	pop    edx
c0019e7d:	56                   	push   esi
c0019e7e:	53                   	push   ebx
c0019e7f:	e8 ac 0e ff ff       	call   c000ad30 <Device::addChild(Device*)>
c0019e84:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0019e8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e8d:	e8 d4 12 ff ff       	call   c000b166 <PhysicalDisk::startCache()>
c0019e92:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0019e99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e9c:	e8 6d fe ff ff       	call   c0019d0e <ATAPI::detectMedia()>
c0019ea1:	83 c4 14             	add    esp,0x14
c0019ea4:	31 c0                	xor    eax,eax
c0019ea6:	5b                   	pop    ebx
c0019ea7:	5e                   	pop    esi
c0019ea8:	c3                   	ret    
c0019ea9:	90                   	nop

c0019eaa <ATAPI::read(unsigned long long, int, void*)>:
c0019eaa:	55                   	push   ebp
c0019eab:	57                   	push   edi
c0019eac:	56                   	push   esi
c0019ead:	53                   	push   ebx
c0019eae:	83 ec 1c             	sub    esp,0x1c
c0019eb1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019eb5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019eb9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019ebd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019ec4:	74 3c                	je     c0019f02 <ATAPI::read(unsigned long long, int, void*)+0x58>
c0019ec6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0019eca:	b9 03 00 00 00       	mov    ecx,0x3
c0019ecf:	fc                   	cld    
c0019ed0:	31 c0                	xor    eax,eax
c0019ed2:	0f ce                	bswap  esi
c0019ed4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019ed6:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0019edb:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0019edf:	89 e8                	mov    eax,ebp
c0019ee1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019ee5:	50                   	push   eax
c0019ee6:	50                   	push   eax
c0019ee7:	55                   	push   ebp
c0019ee8:	c1 e5 0b             	shl    ebp,0xb
c0019eeb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019eef:	6a 00                	push   0x0
c0019ef1:	55                   	push   ebp
c0019ef2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019ef6:	50                   	push   eax
c0019ef7:	53                   	push   ebx
c0019ef8:	e8 c3 fa ff ff       	call   c00199c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019efd:	83 c4 20             	add    esp,0x20
c0019f00:	eb 1a                	jmp    c0019f1c <ATAPI::read(unsigned long long, int, void*)+0x72>
c0019f02:	83 ec 0c             	sub    esp,0xc
c0019f05:	53                   	push   ebx
c0019f06:	e8 03 fe ff ff       	call   c0019d0e <ATAPI::detectMedia()>
c0019f0b:	83 c4 10             	add    esp,0x10
c0019f0e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019f15:	75 af                	jne    c0019ec6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0019f17:	b8 02 00 00 00       	mov    eax,0x2
c0019f1c:	83 c4 1c             	add    esp,0x1c
c0019f1f:	5b                   	pop    ebx
c0019f20:	5e                   	pop    esi
c0019f21:	5f                   	pop    edi
c0019f22:	5d                   	pop    ebp
c0019f23:	c3                   	ret    

c0019f24 <SATA::close(int, int, void*)>:
c0019f24:	83 ec 0c             	sub    esp,0xc
c0019f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f2b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f31:	85 c0                	test   eax,eax
c0019f33:	74 0c                	je     c0019f41 <SATA::close(int, int, void*)+0x1d>
c0019f35:	83 ec 0c             	sub    esp,0xc
c0019f38:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f3a:	50                   	push   eax
c0019f3b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f3e:	83 c4 10             	add    esp,0x10
c0019f41:	31 c0                	xor    eax,eax
c0019f43:	83 c4 0c             	add    esp,0xc
c0019f46:	c3                   	ret    
c0019f47:	90                   	nop

c0019f48 <SATA::powerSaving(PowerSavingLevel)>:
c0019f48:	c3                   	ret    
c0019f49:	90                   	nop

c0019f4a <SATA::open(int, int, void*)>:
c0019f4a:	56                   	push   esi
c0019f4b:	53                   	push   ebx
c0019f4c:	50                   	push   eax
c0019f4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f55:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019f5f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0019f65:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0019f6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f73:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019f7d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019f83:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019f8a:	e8 9f cf fe ff       	call   c0006f2e <Phys::allocatePage()>
c0019f8f:	89 c6                	mov    esi,eax
c0019f91:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0019f97:	81 c6 00 10 00 00    	add    esi,0x1000
c0019f9d:	e8 8c cf fe ff       	call   c0006f2e <Phys::allocatePage()>
c0019fa2:	39 c6                	cmp    esi,eax
c0019fa4:	74 10                	je     c0019fb6 <SATA::open(int, int, void*)+0x6c>
c0019fa6:	83 ec 0c             	sub    esp,0xc
c0019fa9:	68 fc e8 01 c0       	push   0xc001e8fc
c0019fae:	e8 8c 54 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c0019fb3:	83 c4 10             	add    esp,0x10
c0019fb6:	83 ec 0c             	sub    esp,0xc
c0019fb9:	6a 02                	push   0x2
c0019fbb:	e8 dd e6 fe ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0019fc0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019fc6:	6a 03                	push   0x3
c0019fc8:	50                   	push   eax
c0019fc9:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019fcf:	ff 35 10 f5 01 c0    	push   DWORD PTR ds:0xc001f510
c0019fd5:	e8 58 ed fe ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0019fda:	83 c4 14             	add    esp,0x14
c0019fdd:	53                   	push   ebx
c0019fde:	e8 83 11 ff ff       	call   c000b166 <PhysicalDisk::startCache()>
c0019fe3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fe6:	e8 f3 21 ff ff       	call   c000c1de <createPartitionsForDisk(PhysicalDisk*)>
c0019feb:	83 c4 14             	add    esp,0x14
c0019fee:	31 c0                	xor    eax,eax
c0019ff0:	5b                   	pop    ebx
c0019ff1:	5e                   	pop    esi
c0019ff2:	c3                   	ret    
c0019ff3:	90                   	nop

c0019ff4 <SATA::SATA()>:
c0019ff4:	83 ec 0c             	sub    esp,0xc
c0019ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ffb:	83 ec 04             	sub    esp,0x4
c0019ffe:	68 00 02 00 00       	push   0x200
c001a003:	68 10 e9 01 c0       	push   0xc001e910
c001a008:	50                   	push   eax
c001a009:	e8 f0 10 ff ff       	call   c000b0fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a00e:	83 c4 10             	add    esp,0x10
c001a011:	ba 80 e9 01 c0       	mov    edx,0xc001e980
c001a016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a01a:	89 10                	mov    DWORD PTR [eax],edx
c001a01c:	90                   	nop
c001a01d:	83 c4 0c             	add    esp,0xc
c001a020:	c3                   	ret    
c001a021:	90                   	nop

c001a022 <SATA::access(unsigned long long, int, void*, bool)>:
c001a022:	55                   	push   ebp
c001a023:	57                   	push   edi
c001a024:	56                   	push   esi
c001a025:	53                   	push   ebx
c001a026:	83 ec 2c             	sub    esp,0x2c
c001a029:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a02d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a031:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a035:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a039:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a03d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a042:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a046:	7e 10                	jle    c001a058 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a048:	83 ec 0c             	sub    esp,0xc
c001a04b:	68 20 e9 01 c0       	push   0xc001e920
c001a050:	e8 ea 53 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001a055:	83 c4 10             	add    esp,0x10
c001a058:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a05e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a064:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a06a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a06e:	89 d0                	mov    eax,edx
c001a070:	c1 e0 07             	shl    eax,0x7
c001a073:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a077:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a081:	51                   	push   ecx
c001a082:	8d 42 02             	lea    eax,[edx+0x2]
c001a085:	51                   	push   ecx
c001a086:	c1 e0 07             	shl    eax,0x7
c001a089:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a08d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a091:	50                   	push   eax
c001a092:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a098:	e8 bf ef ff ff       	call   c001905c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a09d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a0a1:	83 c4 10             	add    esp,0x10
c001a0a4:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a0a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a0ad:	0f 84 4f 01 00 00    	je     c001a202 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a0b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a0b7:	c1 e0 09             	shl    eax,0x9
c001a0ba:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a0bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a0c3:	74 0e                	je     c001a0d3 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a0c5:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a0cb:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a0cf:	89 c1                	mov    ecx,eax
c001a0d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a0d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a0d7:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a0dd:	8d 42 02             	lea    eax,[edx+0x2]
c001a0e0:	c1 e0 07             	shl    eax,0x7
c001a0e3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a0e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0e9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a0ef:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a0f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0f9:	c1 e1 05             	shl    ecx,0x5
c001a0fc:	01 c8                	add    eax,ecx
c001a0fe:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a102:	83 e1 01             	and    ecx,0x1
c001a105:	89 ce                	mov    esi,ecx
c001a107:	8a 08                	mov    cl,BYTE PTR [eax]
c001a109:	c1 e6 06             	shl    esi,0x6
c001a10c:	83 e1 bf             	and    ecx,0xffffffbf
c001a10f:	09 f1                	or     ecx,esi
c001a111:	88 08                	mov    BYTE PTR [eax],cl
c001a113:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a115:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a11b:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a121:	89 08                	mov    DWORD PTR [eax],ecx
c001a123:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a129:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a12f:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a135:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a138:	50                   	push   eax
c001a139:	68 90 00 00 00       	push   0x90
c001a13e:	6a 00                	push   0x0
c001a140:	56                   	push   esi
c001a141:	e8 aa 63 fe ff       	call   c00004f0 <memset>
c001a146:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a14c:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a150:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a156:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a15a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a15e:	83 c4 10             	add    esp,0x10
c001a161:	48                   	dec    eax
c001a162:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a167:	89 c1                	mov    ecx,eax
c001a169:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a16f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a174:	09 c8                	or     eax,ecx
c001a176:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a17c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a17f:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a186:	66 25 00 7f          	and    ax,0x7f00
c001a18a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a18e:	66 0d 27 80          	or     ax,0x8027
c001a192:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a197:	66 89 06             	mov    WORD PTR [esi],ax
c001a19a:	19 c0                	sbb    eax,eax
c001a19c:	83 e0 f0             	and    eax,0xfffffff0
c001a19f:	83 c0 35             	add    eax,0x35
c001a1a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a1a5:	89 e8                	mov    eax,ebp
c001a1a7:	c1 e8 10             	shr    eax,0x10
c001a1aa:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a1ad:	89 e8                	mov    eax,ebp
c001a1af:	c1 e8 18             	shr    eax,0x18
c001a1b2:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a1b5:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a1b9:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a1bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a1c0:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a1c3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a1c7:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a1cb:	89 d6                	mov    esi,edx
c001a1cd:	31 c0                	xor    eax,eax
c001a1cf:	c1 e6 07             	shl    esi,0x7
c001a1d2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a1d6:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a1dc:	80 e1 88             	and    cl,0x88
c001a1df:	74 0a                	je     c001a1eb <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a1e1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a1e6:	74 0a                	je     c001a1f2 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a1e8:	40                   	inc    eax
c001a1e9:	eb eb                	jmp    c001a1d6 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a1eb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a1f0:	75 17                	jne    c001a209 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a1f2:	83 ec 0c             	sub    esp,0xc
c001a1f5:	68 59 e9 01 c0       	push   0xc001e959
c001a1fa:	e8 f1 f6 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a1ff:	83 c4 10             	add    esp,0x10
c001a202:	b8 01 00 00 00       	mov    eax,0x1
c001a207:	eb 5d                	jmp    c001a266 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a209:	b8 01 00 00 00       	mov    eax,0x1
c001a20e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a212:	c1 e2 07             	shl    edx,0x7
c001a215:	d3 e0                	shl    eax,cl
c001a217:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a21b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a221:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a227:	85 c8                	test   eax,ecx
c001a229:	74 16                	je     c001a241 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a22b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a231:	0f ba e1 1e          	bt     ecx,0x1e
c001a235:	73 ea                	jae    c001a221 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a237:	83 ec 0c             	sub    esp,0xc
c001a23a:	68 67 e9 01 c0       	push   0xc001e967
c001a23f:	eb b9                	jmp    c001a1fa <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a241:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a247:	0f ba e0 1e          	bt     eax,0x1e
c001a24b:	72 b5                	jb     c001a202 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a24d:	31 c0                	xor    eax,eax
c001a24f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a254:	75 10                	jne    c001a266 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a256:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a25c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a260:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a264:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a266:	83 c4 2c             	add    esp,0x2c
c001a269:	5b                   	pop    ebx
c001a26a:	5e                   	pop    esi
c001a26b:	5f                   	pop    edi
c001a26c:	5d                   	pop    ebp
c001a26d:	c3                   	ret    

c001a26e <SATA::read(unsigned long long, int, void*)>:
c001a26e:	57                   	push   edi
c001a26f:	b8 04 00 00 00       	mov    eax,0x4
c001a274:	56                   	push   esi
c001a275:	53                   	push   ebx
c001a276:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a27a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a27e:	8d 7a ff             	lea    edi,[edx-0x1]
c001a281:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a285:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a289:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a28f:	77 25                	ja     c001a2b6 <SATA::read(unsigned long long, int, void*)+0x48>
c001a291:	b8 06 00 00 00       	mov    eax,0x6
c001a296:	85 f6                	test   esi,esi
c001a298:	74 1c                	je     c001a2b6 <SATA::read(unsigned long long, int, void*)+0x48>
c001a29a:	50                   	push   eax
c001a29b:	50                   	push   eax
c001a29c:	6a 00                	push   0x0
c001a29e:	56                   	push   esi
c001a29f:	52                   	push   edx
c001a2a0:	53                   	push   ebx
c001a2a1:	51                   	push   ecx
c001a2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2a6:	e8 77 fd ff ff       	call   c001a022 <SATA::access(unsigned long long, int, void*, bool)>
c001a2ab:	83 c4 20             	add    esp,0x20
c001a2ae:	85 c0                	test   eax,eax
c001a2b0:	0f 95 c0             	setne  al
c001a2b3:	0f b6 c0             	movzx  eax,al
c001a2b6:	5b                   	pop    ebx
c001a2b7:	5e                   	pop    esi
c001a2b8:	5f                   	pop    edi
c001a2b9:	c3                   	ret    

c001a2ba <SATA::write(unsigned long long, int, void*)>:
c001a2ba:	55                   	push   ebp
c001a2bb:	b8 04 00 00 00       	mov    eax,0x4
c001a2c0:	57                   	push   edi
c001a2c1:	56                   	push   esi
c001a2c2:	53                   	push   ebx
c001a2c3:	83 ec 0c             	sub    esp,0xc
c001a2c6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a2ca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a2ce:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a2d1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a2d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a2d9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a2df:	77 3d                	ja     c001a31e <SATA::write(unsigned long long, int, void*)+0x64>
c001a2e1:	b8 06 00 00 00       	mov    eax,0x6
c001a2e6:	85 ed                	test   ebp,ebp
c001a2e8:	74 34                	je     c001a31e <SATA::write(unsigned long long, int, void*)+0x64>
c001a2ea:	c1 e3 09             	shl    ebx,0x9
c001a2ed:	01 eb                	add    ebx,ebp
c001a2ef:	89 d6                	mov    esi,edx
c001a2f1:	89 cf                	mov    edi,ecx
c001a2f3:	83 c6 01             	add    esi,0x1
c001a2f6:	83 d7 00             	adc    edi,0x0
c001a2f9:	50                   	push   eax
c001a2fa:	50                   	push   eax
c001a2fb:	6a 01                	push   0x1
c001a2fd:	55                   	push   ebp
c001a2fe:	81 c5 00 02 00 00    	add    ebp,0x200
c001a304:	6a 01                	push   0x1
c001a306:	51                   	push   ecx
c001a307:	52                   	push   edx
c001a308:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a30c:	e8 11 fd ff ff       	call   c001a022 <SATA::access(unsigned long long, int, void*, bool)>
c001a311:	83 c4 20             	add    esp,0x20
c001a314:	89 f2                	mov    edx,esi
c001a316:	89 f9                	mov    ecx,edi
c001a318:	39 dd                	cmp    ebp,ebx
c001a31a:	75 d3                	jne    c001a2ef <SATA::write(unsigned long long, int, void*)+0x35>
c001a31c:	31 c0                	xor    eax,eax
c001a31e:	83 c4 0c             	add    esp,0xc
c001a321:	5b                   	pop    ebx
c001a322:	5e                   	pop    esi
c001a323:	5f                   	pop    edi
c001a324:	5d                   	pop    ebp
c001a325:	c3                   	ret    

c001a326 <SATAPI::write(unsigned long long, int, void*)>:
c001a326:	b8 03 00 00 00       	mov    eax,0x3
c001a32b:	c3                   	ret    

c001a32c <SATAPI::close(int, int, void*)>:
c001a32c:	83 ec 0c             	sub    esp,0xc
c001a32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a333:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a339:	85 c0                	test   eax,eax
c001a33b:	74 0c                	je     c001a349 <SATAPI::close(int, int, void*)+0x1d>
c001a33d:	83 ec 0c             	sub    esp,0xc
c001a340:	8b 10                	mov    edx,DWORD PTR [eax]
c001a342:	50                   	push   eax
c001a343:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a346:	83 c4 10             	add    esp,0x10
c001a349:	31 c0                	xor    eax,eax
c001a34b:	83 c4 0c             	add    esp,0xc
c001a34e:	c3                   	ret    
c001a34f:	90                   	nop

c001a350 <SATAPI::SATAPI()>:
c001a350:	83 ec 0c             	sub    esp,0xc
c001a353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a357:	83 ec 04             	sub    esp,0x4
c001a35a:	68 00 08 00 00       	push   0x800
c001a35f:	68 b0 e9 01 c0       	push   0xc001e9b0
c001a364:	50                   	push   eax
c001a365:	e8 94 0d ff ff       	call   c000b0fe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a36a:	83 c4 10             	add    esp,0x10
c001a36d:	ba ec ea 01 c0       	mov    edx,0xc001eaec
c001a372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a376:	89 10                	mov    DWORD PTR [eax],edx
c001a378:	90                   	nop
c001a379:	83 c4 0c             	add    esp,0xc
c001a37c:	c3                   	ret    
c001a37d:	90                   	nop

c001a37e <SATAPI::diskRemoved()>:
c001a37e:	c3                   	ret    
c001a37f:	90                   	nop

c001a380 <SATAPI::diskInserted()>:
c001a380:	83 ec 18             	sub    esp,0x18
c001a383:	68 bc e9 01 c0       	push   0xc001e9bc
c001a388:	e8 63 f5 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a38d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a391:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001a398:	83 c4 1c             	add    esp,0x1c
c001a39b:	c3                   	ret    

c001a39c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001a39c:	55                   	push   ebp
c001a39d:	57                   	push   edi
c001a39e:	56                   	push   esi
c001a39f:	53                   	push   ebx
c001a3a0:	83 ec 38             	sub    esp,0x38
c001a3a3:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001a3a7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a3ab:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001a3af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a3b3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a3b7:	68 d4 e9 01 c0       	push   0xc001e9d4
c001a3bc:	e8 2f f5 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a3c1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001a3c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a3cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a3d1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001a3d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3db:	c1 e0 07             	shl    eax,0x7
c001a3de:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001a3e2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a3e6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a3f0:	5a                   	pop    edx
c001a3f1:	59                   	pop    ecx
c001a3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3f6:	8d 58 02             	lea    ebx,[eax+0x2]
c001a3f9:	c1 e3 07             	shl    ebx,0x7
c001a3fc:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001a400:	53                   	push   ebx
c001a401:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001a407:	e8 50 ec ff ff       	call   c001905c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a40c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a410:	83 c4 10             	add    esp,0x10
c001a413:	b8 01 00 00 00       	mov    eax,0x1
c001a418:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a41d:	0f 84 ff 01 00 00    	je     c001a622 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001a423:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001a429:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a42b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a431:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a437:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a43b:	c1 e1 05             	shl    ecx,0x5
c001a43e:	01 c8                	add    eax,ecx
c001a440:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a442:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001a448:	81 c9 25 00 01 00    	or     ecx,0x10025
c001a44e:	89 08                	mov    DWORD PTR [eax],ecx
c001a450:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001a456:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001a45c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001a462:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001a465:	8d 7b 40             	lea    edi,[ebx+0x40]
c001a468:	50                   	push   eax
c001a469:	68 90 00 00 00       	push   0x90
c001a46e:	6a 00                	push   0x0
c001a470:	53                   	push   ebx
c001a471:	e8 7a 60 fe ff       	call   c00004f0 <memset>
c001a476:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001a47a:	b9 0c 00 00 00       	mov    ecx,0xc
c001a47f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a481:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001a487:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001a48b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001a491:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001a495:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001a499:	48                   	dec    eax
c001a49a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a49f:	89 c1                	mov    ecx,eax
c001a4a1:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001a4a7:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a4ac:	09 c8                	or     eax,ecx
c001a4ae:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001a4b4:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001a4b7:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001a4be:	66 25 00 7f          	and    ax,0x7f00
c001a4c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a4c6:	66 0d 27 80          	or     ax,0x8027
c001a4ca:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001a4ce:	66 89 03             	mov    WORD PTR [ebx],ax
c001a4d1:	89 d0                	mov    eax,edx
c001a4d3:	c1 ea 18             	shr    edx,0x18
c001a4d6:	c1 e8 10             	shr    eax,0x10
c001a4d9:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001a4dc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001a4df:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a4e3:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001a4e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a4ea:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001a4ed:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a4f1:	83 c4 10             	add    esp,0x10
c001a4f4:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001a4f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a4fc:	31 c0                	xor    eax,eax
c001a4fe:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001a504:	80 e1 88             	and    cl,0x88
c001a507:	74 0a                	je     c001a513 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001a509:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a50e:	74 0a                	je     c001a51a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001a510:	40                   	inc    eax
c001a511:	eb eb                	jmp    c001a4fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001a513:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a518:	75 0a                	jne    c001a524 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001a51a:	83 ec 0c             	sub    esp,0xc
c001a51d:	68 ee e9 01 c0       	push   0xc001e9ee
c001a522:	eb 43                	jmp    c001a567 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a524:	be 01 00 00 00       	mov    esi,0x1
c001a529:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a52d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a531:	d3 e6                	shl    esi,cl
c001a533:	c1 e7 07             	shl    edi,0x7
c001a536:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001a53c:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c001a541:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001a545:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001a54b:	85 c6                	test   esi,eax
c001a54d:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001a553:	0f 84 96 00 00 00    	je     c001a5ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c001a559:	0f ba e0 1e          	bt     eax,0x1e
c001a55d:	73 1a                	jae    c001a579 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c001a55f:	83 ec 0c             	sub    esp,0xc
c001a562:	68 03 ea 01 c0       	push   0xc001ea03
c001a567:	e8 84 f3 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a56c:	83 c4 10             	add    esp,0x10
c001a56f:	b8 01 00 00 00       	mov    eax,0x1
c001a574:	e9 a9 00 00 00       	jmp    c001a622 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001a579:	83 fb 0d             	cmp    ebx,0xd
c001a57c:	77 12                	ja     c001a590 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c001a57e:	83 ec 0c             	sub    esp,0xc
c001a581:	68 c8 00 00 00       	push   0xc8
c001a586:	e8 29 86 ff ff       	call   c0012bb4 <milliTenthSleep(unsigned int)>
c001a58b:	83 c4 10             	add    esp,0x10
c001a58e:	eb 2a                	jmp    c001a5ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001a590:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c001a596:	83 f8 0d             	cmp    eax,0xd
c001a599:	77 0a                	ja     c001a5a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c001a59b:	83 ec 0c             	sub    esp,0xc
c001a59e:	68 58 02 00 00       	push   0x258
c001a5a3:	eb 28                	jmp    c001a5cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001a5a5:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c001a5ab:	83 f8 0d             	cmp    eax,0xd
c001a5ae:	77 0a                	ja     c001a5ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001a5b0:	83 ec 0c             	sub    esp,0xc
c001a5b3:	68 dc 05 00 00       	push   0x5dc
c001a5b8:	eb 13                	jmp    c001a5cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001a5ba:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c001a5c0:	83 f8 0d             	cmp    eax,0xd
c001a5c3:	77 10                	ja     c001a5d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c001a5c5:	83 ec 0c             	sub    esp,0xc
c001a5c8:	68 c4 09 00 00       	push   0x9c4
c001a5cd:	e8 e2 85 ff ff       	call   c0012bb4 <milliTenthSleep(unsigned int)>
c001a5d2:	83 c4 10             	add    esp,0x10
c001a5d5:	43                   	inc    ebx
c001a5d6:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c001a5dc:	0f 85 63 ff ff ff    	jne    c001a545 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c001a5e2:	83 ec 0c             	sub    esp,0xc
c001a5e5:	68 16 ea 01 c0       	push   0xc001ea16
c001a5ea:	e9 78 ff ff ff       	jmp    c001a567 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a5ef:	0f ba e0 1e          	bt     eax,0x1e
c001a5f3:	73 0d                	jae    c001a602 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001a5f5:	83 ec 0c             	sub    esp,0xc
c001a5f8:	68 2a ea 01 c0       	push   0xc001ea2a
c001a5fd:	e9 65 ff ff ff       	jmp    c001a567 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a602:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001a607:	74 17                	je     c001a620 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001a609:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001a60e:	74 10                	je     c001a620 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001a610:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001a616:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001a61a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a61e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a620:	31 c0                	xor    eax,eax
c001a622:	83 c4 2c             	add    esp,0x2c
c001a625:	5b                   	pop    ebx
c001a626:	5e                   	pop    esi
c001a627:	5f                   	pop    edi
c001a628:	5d                   	pop    ebp
c001a629:	c3                   	ret    

c001a62a <SATAPI::eject()>:
c001a62a:	57                   	push   edi
c001a62b:	b9 03 00 00 00       	mov    ecx,0x3
c001a630:	83 ec 18             	sub    esp,0x18
c001a633:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a637:	fc                   	cld    
c001a638:	31 c0                	xor    eax,eax
c001a63a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a63c:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a641:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a646:	50                   	push   eax
c001a647:	6a 00                	push   0x0
c001a649:	6a 00                	push   0x0
c001a64b:	6a 00                	push   0x0
c001a64d:	6a 00                	push   0x0
c001a64f:	6a 02                	push   0x2
c001a651:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a655:	50                   	push   eax
c001a656:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a65a:	e8 3d fd ff ff       	call   c001a39c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a65f:	31 c0                	xor    eax,eax
c001a661:	83 c4 38             	add    esp,0x38
c001a664:	5f                   	pop    edi
c001a665:	c3                   	ret    

c001a666 <SATAPI::detectMedia()>:
c001a666:	56                   	push   esi
c001a667:	53                   	push   ebx
c001a668:	83 ec 30             	sub    esp,0x30
c001a66b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a66f:	68 3f ea 01 c0       	push   0xc001ea3f
c001a674:	e8 77 f2 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a679:	83 c4 0c             	add    esp,0xc
c001a67c:	6a 0c                	push   0xc
c001a67e:	6a 00                	push   0x0
c001a680:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a684:	56                   	push   esi
c001a685:	e8 66 5e fe ff       	call   c00004f0 <memset>
c001a68a:	83 c4 0c             	add    esp,0xc
c001a68d:	6a 00                	push   0x0
c001a68f:	6a 00                	push   0x0
c001a691:	6a 00                	push   0x0
c001a693:	6a 00                	push   0x0
c001a695:	6a 00                	push   0x0
c001a697:	56                   	push   esi
c001a698:	53                   	push   ebx
c001a699:	e8 fe fc ff ff       	call   c001a39c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a69e:	83 c4 20             	add    esp,0x20
c001a6a1:	48                   	dec    eax
c001a6a2:	74 34                	je     c001a6d8 <SATAPI::detectMedia()+0x72>
c001a6a4:	50                   	push   eax
c001a6a5:	6a 0c                	push   0xc
c001a6a7:	6a 00                	push   0x0
c001a6a9:	56                   	push   esi
c001a6aa:	e8 41 5e fe ff       	call   c00004f0 <memset>
c001a6af:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a6b4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a6b9:	83 c4 0c             	add    esp,0xc
c001a6bc:	6a 01                	push   0x1
c001a6be:	8d 44 24 16          	lea    eax,[esp+0x16]
c001a6c2:	50                   	push   eax
c001a6c3:	6a 00                	push   0x0
c001a6c5:	6a 00                	push   0x0
c001a6c7:	6a 12                	push   0x12
c001a6c9:	56                   	push   esi
c001a6ca:	53                   	push   ebx
c001a6cb:	e8 cc fc ff ff       	call   c001a39c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a6d0:	83 c4 20             	add    esp,0x20
c001a6d3:	48                   	dec    eax
c001a6d4:	75 39                	jne    c001a70f <SATAPI::detectMedia()+0xa9>
c001a6d6:	eb 1e                	jmp    c001a6f6 <SATAPI::detectMedia()+0x90>
c001a6d8:	83 ec 0c             	sub    esp,0xc
c001a6db:	68 53 ea 01 c0       	push   0xc001ea53
c001a6e0:	e8 0b f2 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a6e5:	83 c4 10             	add    esp,0x10
c001a6e8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a6ef:	74 b3                	je     c001a6a4 <SATAPI::detectMedia()+0x3e>
c001a6f1:	e9 93 00 00 00       	jmp    c001a789 <SATAPI::detectMedia()+0x123>
c001a6f6:	83 ec 0c             	sub    esp,0xc
c001a6f9:	68 5d ea 01 c0       	push   0xc001ea5d
c001a6fe:	e8 ed f1 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a703:	83 c4 10             	add    esp,0x10
c001a706:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a70d:	75 7a                	jne    c001a789 <SATAPI::detectMedia()+0x123>
c001a70f:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a713:	83 e0 7f             	and    eax,0x7f
c001a716:	3c 70                	cmp    al,0x70
c001a718:	74 25                	je     c001a73f <SATAPI::detectMedia()+0xd9>
c001a71a:	83 ec 0c             	sub    esp,0xc
c001a71d:	68 67 ea 01 c0       	push   0xc001ea67
c001a722:	e8 c9 f1 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a727:	83 c4 10             	add    esp,0x10
c001a72a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a731:	75 0c                	jne    c001a73f <SATAPI::detectMedia()+0xd9>
c001a733:	83 ec 0c             	sub    esp,0xc
c001a736:	53                   	push   ebx
c001a737:	e8 44 fc ff ff       	call   c001a380 <SATAPI::diskInserted()>
c001a73c:	83 c4 10             	add    esp,0x10
c001a73f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a743:	83 e0 0f             	and    eax,0xf
c001a746:	3c 02                	cmp    al,0x2
c001a748:	75 16                	jne    c001a760 <SATAPI::detectMedia()+0xfa>
c001a74a:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a74f:	75 38                	jne    c001a789 <SATAPI::detectMedia()+0x123>
c001a751:	83 ec 0c             	sub    esp,0xc
c001a754:	68 70 ea 01 c0       	push   0xc001ea70
c001a759:	e8 92 f1 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a75e:	eb 26                	jmp    c001a786 <SATAPI::detectMedia()+0x120>
c001a760:	84 c0                	test   al,al
c001a762:	75 25                	jne    c001a789 <SATAPI::detectMedia()+0x123>
c001a764:	83 ec 0c             	sub    esp,0xc
c001a767:	68 79 ea 01 c0       	push   0xc001ea79
c001a76c:	e8 7f f1 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a771:	83 c4 10             	add    esp,0x10
c001a774:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a77b:	75 0c                	jne    c001a789 <SATAPI::detectMedia()+0x123>
c001a77d:	83 ec 0c             	sub    esp,0xc
c001a780:	53                   	push   ebx
c001a781:	e8 fa fb ff ff       	call   c001a380 <SATAPI::diskInserted()>
c001a786:	83 c4 10             	add    esp,0x10
c001a789:	83 c4 24             	add    esp,0x24
c001a78c:	5b                   	pop    ebx
c001a78d:	5e                   	pop    esi
c001a78e:	c3                   	ret    
c001a78f:	90                   	nop

c001a790 <SATAPI::open(int, int, void*)>:
c001a790:	56                   	push   esi
c001a791:	53                   	push   ebx
c001a792:	51                   	push   ecx
c001a793:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a79b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a7a5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a7ab:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a7b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7b9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a7c3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a7c9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a7d0:	e8 59 c7 fe ff       	call   c0006f2e <Phys::allocatePage()>
c001a7d5:	89 c6                	mov    esi,eax
c001a7d7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001a7dd:	81 c6 00 10 00 00    	add    esi,0x1000
c001a7e3:	e8 46 c7 fe ff       	call   c0006f2e <Phys::allocatePage()>
c001a7e8:	39 c6                	cmp    esi,eax
c001a7ea:	74 10                	je     c001a7fc <SATAPI::open(int, int, void*)+0x6c>
c001a7ec:	83 ec 0c             	sub    esp,0xc
c001a7ef:	68 83 ea 01 c0       	push   0xc001ea83
c001a7f4:	e8 46 4c ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001a7f9:	83 c4 10             	add    esp,0x10
c001a7fc:	83 ec 0c             	sub    esp,0xc
c001a7ff:	6a 02                	push   0x2
c001a801:	e8 97 de fe ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c001a806:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001a80c:	6a 03                	push   0x3
c001a80e:	50                   	push   eax
c001a80f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001a815:	ff 35 10 f5 01 c0    	push   DWORD PTR ds:0xc001f510
c001a81b:	e8 12 e5 fe ff       	call   c0008d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a820:	83 c4 14             	add    esp,0x14
c001a823:	68 74 01 00 00       	push   0x174
c001a828:	e8 34 c3 fe ff       	call   c0006b61 <malloc>
c001a82d:	83 c4 0c             	add    esp,0xc
c001a830:	89 c6                	mov    esi,eax
c001a832:	6a 00                	push   0x0
c001a834:	68 ff ff ff 7f       	push   0x7fffffff
c001a839:	6a 00                	push   0x0
c001a83b:	6a 00                	push   0x0
c001a83d:	53                   	push   ebx
c001a83e:	68 99 ea 01 c0       	push   0xc001ea99
c001a843:	50                   	push   eax
c001a844:	e8 61 15 ff ff       	call   c000bdaa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a849:	83 c4 14             	add    esp,0x14
c001a84c:	56                   	push   esi
c001a84d:	e8 0e 16 ff ff       	call   c000be60 <LogicalDisk::assignDriveLetter()>
c001a852:	5a                   	pop    edx
c001a853:	0f be c0             	movsx  eax,al
c001a856:	59                   	pop    ecx
c001a857:	50                   	push   eax
c001a858:	68 b4 e8 01 c0       	push   0xc001e8b4
c001a85d:	e8 8e f0 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a862:	58                   	pop    eax
c001a863:	5a                   	pop    edx
c001a864:	56                   	push   esi
c001a865:	53                   	push   ebx
c001a866:	e8 c5 04 ff ff       	call   c000ad30 <Device::addChild(Device*)>
c001a86b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001a871:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a874:	e8 ed 08 ff ff       	call   c000b166 <PhysicalDisk::startCache()>
c001a879:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001a880:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a883:	e8 de fd ff ff       	call   c001a666 <SATAPI::detectMedia()>
c001a888:	83 c4 14             	add    esp,0x14
c001a88b:	31 c0                	xor    eax,eax
c001a88d:	5b                   	pop    ebx
c001a88e:	5e                   	pop    esi
c001a88f:	c3                   	ret    

c001a890 <SATAPI::read(unsigned long long, int, void*)>:
c001a890:	55                   	push   ebp
c001a891:	57                   	push   edi
c001a892:	56                   	push   esi
c001a893:	53                   	push   ebx
c001a894:	83 ec 48             	sub    esp,0x48
c001a897:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a89b:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001a89f:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c001a8a3:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a8a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a8af:	68 a7 ea 01 c0       	push   0xc001eaa7
c001a8b4:	e8 37 f0 fe ff       	call   c00098f0 <Dbg::kprintf(char const*, ...)>
c001a8b9:	83 c4 10             	add    esp,0x10
c001a8bc:	83 fb 04             	cmp    ebx,0x4
c001a8bf:	7e 10                	jle    c001a8d1 <SATAPI::read(unsigned long long, int, void*)+0x41>
c001a8c1:	83 ec 0c             	sub    esp,0xc
c001a8c4:	68 b8 ea 01 c0       	push   0xc001eab8
c001a8c9:	e8 71 4b ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001a8ce:	83 c4 10             	add    esp,0x10
c001a8d1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001a8d5:	31 ed                	xor    ebp,ebp
c001a8d7:	b9 03 00 00 00       	mov    ecx,0x3
c001a8dc:	fc                   	cld    
c001a8dd:	89 e8                	mov    eax,ebp
c001a8df:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a8e1:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c001a8e6:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001a8eb:	50                   	push   eax
c001a8ec:	6a 00                	push   0x0
c001a8ee:	6a 00                	push   0x0
c001a8f0:	6a 00                	push   0x0
c001a8f2:	6a 00                	push   0x0
c001a8f4:	6a 02                	push   0x2
c001a8f6:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a8fa:	50                   	push   eax
c001a8fb:	56                   	push   esi
c001a8fc:	e8 9b fa ff ff       	call   c001a39c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a901:	8d 7c 24 44          	lea    edi,[esp+0x44]
c001a905:	89 e8                	mov    eax,ebp
c001a907:	b9 03 00 00 00       	mov    ecx,0x3
c001a90c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a90e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a912:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c001a916:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c001a91b:	0f c8                	bswap  eax
c001a91d:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c001a921:	83 c4 1c             	add    esp,0x1c
c001a924:	53                   	push   ebx
c001a925:	c1 e3 0b             	shl    ebx,0xb
c001a928:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001a92c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a930:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a934:	53                   	push   ebx
c001a935:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001a939:	50                   	push   eax
c001a93a:	56                   	push   esi
c001a93b:	e8 5c fa ff ff       	call   c001a39c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a940:	83 c4 20             	add    esp,0x20
c001a943:	85 c0                	test   eax,eax
c001a945:	74 14                	je     c001a95b <SATAPI::read(unsigned long long, int, void*)+0xcb>
c001a947:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a94b:	83 ec 0c             	sub    esp,0xc
c001a94e:	56                   	push   esi
c001a94f:	e8 12 fd ff ff       	call   c001a666 <SATAPI::detectMedia()>
c001a954:	83 c4 10             	add    esp,0x10
c001a957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a95b:	83 c4 3c             	add    esp,0x3c
c001a95e:	5b                   	pop    ebx
c001a95f:	5e                   	pop    esi
c001a960:	5f                   	pop    edi
c001a961:	5d                   	pop    ebp
c001a962:	c3                   	ret    
c001a963:	90                   	nop

c001a964 <IOAPIC::close(int, int, void*)>:
c001a964:	b8 00 00 00 00       	mov    eax,0x0
c001a969:	c3                   	ret    

c001a96a <apicGetBase()>:
c001a96a:	55                   	push   ebp
c001a96b:	89 e5                	mov    ebp,esp
c001a96d:	83 ec 18             	sub    esp,0x18
c001a970:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c001a975:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001a97b:	83 e0 08             	and    eax,0x8
c001a97e:	84 c0                	test   al,al
c001a980:	75 07                	jne    c001a989 <apicGetBase()+0x1f>
c001a982:	b8 00 00 00 00       	mov    eax,0x0
c001a987:	eb 21                	jmp    c001a9aa <apicGetBase()+0x40>
c001a989:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c001a98e:	83 ec 08             	sub    esp,0x8
c001a991:	6a 1b                	push   0x1b
c001a993:	50                   	push   eax
c001a994:	e8 c1 b7 fe ff       	call   c000615a <Computer::rdmsr(unsigned int)>
c001a999:	83 c4 10             	add    esp,0x10
c001a99c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001a99f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001a9a2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001a9a5:	25 00 00 ff ff       	and    eax,0xffff0000
c001a9aa:	c9                   	leave  
c001a9ab:	c3                   	ret    

c001a9ac <IOAPIC::IOAPIC()>:
c001a9ac:	83 ec 0c             	sub    esp,0xc
c001a9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9b3:	83 ec 08             	sub    esp,0x8
c001a9b6:	68 1c eb 01 c0       	push   0xc001eb1c
c001a9bb:	50                   	push   eax
c001a9bc:	e8 07 05 ff ff       	call   c000aec8 <Device::Device(char const*)>
c001a9c1:	83 c4 10             	add    esp,0x10
c001a9c4:	ba 2c eb 01 c0       	mov    edx,0xc001eb2c
c001a9c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9cd:	89 10                	mov    DWORD PTR [eax],edx
c001a9cf:	90                   	nop
c001a9d0:	83 c4 0c             	add    esp,0xc
c001a9d3:	c3                   	ret    

c001a9d4 <apicOpen()>:
c001a9d4:	55                   	push   ebp
c001a9d5:	89 e5                	mov    ebp,esp
c001a9d7:	53                   	push   ebx
c001a9d8:	83 ec 34             	sub    esp,0x34
c001a9db:	a0 20 33 02 c0       	mov    al,ds:0xc0023320
c001a9e0:	83 f0 01             	xor    eax,0x1
c001a9e3:	84 c0                	test   al,al
c001a9e5:	0f 84 9d 00 00 00    	je     c001aa88 <apicOpen()+0xb4>
c001a9eb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001a9ef:	a0 e0 1c 02 c0       	mov    al,ds:0xc0021ce0
c001a9f4:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001a9f7:	0f 83 84 00 00 00    	jae    c001aa81 <apicOpen()+0xad>
c001a9fd:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001aa04:	83 ec 0c             	sub    esp,0xc
c001aa07:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001aa0a:	e8 52 c1 fe ff       	call   c0006b61 <malloc>
c001aa0f:	83 c4 10             	add    esp,0x10
c001aa12:	89 c3                	mov    ebx,eax
c001aa14:	83 ec 0c             	sub    esp,0xc
c001aa17:	53                   	push   ebx
c001aa18:	e8 8f ff ff ff       	call   c001a9ac <IOAPIC::IOAPIC()>
c001aa1d:	83 c4 10             	add    esp,0x10
c001aa20:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001aa23:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001aa26:	25 ff 00 00 00       	and    eax,0xff
c001aa2b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001aa2e:	89 14 85 00 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd00],edx
c001aa35:	a1 e0 32 02 c0       	mov    eax,ds:0xc00232e0
c001aa3a:	40                   	inc    eax
c001aa3b:	a3 e0 32 02 c0       	mov    ds:0xc00232e0,eax
c001aa40:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c001aa45:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001aa4b:	83 ec 08             	sub    esp,0x8
c001aa4e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001aa51:	50                   	push   eax
c001aa52:	e8 d9 02 ff ff       	call   c000ad30 <Device::addChild(Device*)>
c001aa57:	83 c4 10             	add    esp,0x10
c001aa5a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001aa5d:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa5f:	83 c0 08             	add    eax,0x8
c001aa62:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa64:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001aa67:	25 ff 00 00 00       	and    eax,0xff
c001aa6c:	6a 00                	push   0x0
c001aa6e:	6a 00                	push   0x0
c001aa70:	50                   	push   eax
c001aa71:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001aa74:	ff d2                	call   edx
c001aa76:	83 c4 10             	add    esp,0x10
c001aa79:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001aa7c:	e9 6e ff ff ff       	jmp    c001a9ef <apicOpen()+0x1b>
c001aa81:	c6 05 20 33 02 c0 01 	mov    BYTE PTR ds:0xc0023320,0x1
c001aa88:	e8 dd fe ff ff       	call   c001a96a <apicGetBase()>
c001aa8d:	05 f0 00 00 00       	add    eax,0xf0
c001aa92:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001aa95:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001aa98:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa9a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001aa9d:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001aaa4:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001aaab:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001aaae:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001aab1:	89 10                	mov    DWORD PTR [eax],edx
c001aab3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001aaba:	a1 30 1c 02 c0       	mov    eax,ds:0xc0021c30
c001aabf:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001aac2:	7d 70                	jge    c001ab34 <apicOpen()+0x160>
c001aac4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001aac7:	8b 04 85 40 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde3c0]
c001aace:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001aad1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001aad4:	8b 04 85 40 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde3c0]
c001aadb:	c1 e8 08             	shr    eax,0x8
c001aade:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001aae2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001aae5:	8b 04 85 40 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde3c0]
c001aaec:	c1 e8 18             	shr    eax,0x18
c001aaef:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001aaf2:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001aaf6:	75 37                	jne    c001ab2f <apicOpen()+0x15b>
c001aaf8:	e8 6d fe ff ff       	call   c001a96a <apicGetBase()>
c001aafd:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001ab01:	75 07                	jne    c001ab0a <apicOpen()+0x136>
c001ab03:	ba 60 03 00 00       	mov    edx,0x360
c001ab08:	eb 05                	jmp    c001ab0f <apicOpen()+0x13b>
c001ab0a:	ba 50 03 00 00       	mov    edx,0x350
c001ab0f:	01 d0                	add    eax,edx
c001ab11:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ab14:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ab17:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab19:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ab1c:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ab23:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ab27:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ab2a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ab2d:	89 10                	mov    DWORD PTR [eax],edx
c001ab2f:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001ab32:	eb 86                	jmp    c001aaba <apicOpen()+0xe6>
c001ab34:	90                   	nop
c001ab35:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ab38:	c9                   	leave  
c001ab39:	c3                   	ret    

c001ab3a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ab3a:	55                   	push   ebp
c001ab3b:	89 e5                	mov    ebp,esp
c001ab3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ab40:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab46:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ab49:	72 1d                	jb     c001ab68 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ab4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ab4e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ab54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ab57:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ab5d:	01 d0                	add    eax,edx
c001ab5f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ab62:	73 04                	jae    c001ab68 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ab64:	b0 01                	mov    al,0x1
c001ab66:	eb 02                	jmp    c001ab6a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ab68:	b0 00                	mov    al,0x0
c001ab6a:	5d                   	pop    ebp
c001ab6b:	c3                   	ret    

c001ab6c <IOAPIC::read(int)>:
c001ab6c:	55                   	push   ebp
c001ab6d:	89 e5                	mov    ebp,esp
c001ab6f:	83 ec 10             	sub    esp,0x10
c001ab72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ab75:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ab7b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ab7e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ab81:	31 d2                	xor    edx,edx
c001ab83:	88 c2                	mov    dl,al
c001ab85:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ab88:	89 10                	mov    DWORD PTR [eax],edx
c001ab8a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ab8d:	83 c0 10             	add    eax,0x10
c001ab90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab92:	c9                   	leave  
c001ab93:	c3                   	ret    

c001ab94 <IOAPIC::open(int, int, void*)>:
c001ab94:	55                   	push   ebp
c001ab95:	89 e5                	mov    ebp,esp
c001ab97:	57                   	push   edi
c001ab98:	56                   	push   esi
c001ab99:	53                   	push   ebx
c001ab9a:	83 ec 04             	sub    esp,0x4
c001ab9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aba0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001aba3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001aba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abac:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001abb2:	8b 14 85 20 1d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde2e0]
c001abb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abbc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001abc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abc5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001abcb:	8b 14 85 a0 1d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde260]
c001abd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abd5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001abdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abde:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001abe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abe7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001abed:	89 c6                	mov    esi,eax
c001abef:	81 e6 ff 00 00 00    	and    esi,0xff
c001abf5:	89 d0                	mov    eax,edx
c001abf7:	ba 00 00 00 00       	mov    edx,0x0
c001abfc:	89 c7                	mov    edi,eax
c001abfe:	83 e7 ff             	and    edi,0xffffffff
c001ac01:	89 f9                	mov    ecx,edi
c001ac03:	89 d0                	mov    eax,edx
c001ac05:	25 ff 00 00 00       	and    eax,0xff
c001ac0a:	89 c3                	mov    ebx,eax
c001ac0c:	89 c8                	mov    eax,ecx
c001ac0e:	89 da                	mov    edx,ebx
c001ac10:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ac13:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ac16:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ac1a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ac1e:	83 e0 00             	and    eax,0x0
c001ac21:	09 d0                	or     eax,edx
c001ac23:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ac27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac2a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ac30:	8d 50 01             	lea    edx,[eax+0x1]
c001ac33:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ac36:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ac3c:	31 d2                	xor    edx,edx
c001ac3e:	88 c2                	mov    dl,al
c001ac40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac43:	83 c2 08             	add    edx,0x8
c001ac46:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ac4a:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ac50:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ac56:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ac5a:	6a 01                	push   0x1
c001ac5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ac5f:	e8 08 ff ff ff       	call   c001ab6c <IOAPIC::read(int)>
c001ac64:	83 c4 08             	add    esp,0x8
c001ac67:	c1 f8 10             	sar    eax,0x10
c001ac6a:	25 ff 00 00 00       	and    eax,0xff
c001ac6f:	8d 50 01             	lea    edx,[eax+0x1]
c001ac72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac75:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ac7b:	b8 00 00 00 00       	mov    eax,0x0
c001ac80:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ac83:	5b                   	pop    ebx
c001ac84:	5e                   	pop    esi
c001ac85:	5f                   	pop    edi
c001ac86:	5d                   	pop    ebp
c001ac87:	c3                   	ret    

c001ac88 <IOAPIC::write(int, int)>:
c001ac88:	55                   	push   ebp
c001ac89:	89 e5                	mov    ebp,esp
c001ac8b:	83 ec 10             	sub    esp,0x10
c001ac8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac91:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ac97:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ac9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ac9d:	31 d2                	xor    edx,edx
c001ac9f:	88 c2                	mov    dl,al
c001aca1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001aca4:	89 10                	mov    DWORD PTR [eax],edx
c001aca6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001aca9:	8d 50 10             	lea    edx,[eax+0x10]
c001acac:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001acaf:	89 02                	mov    DWORD PTR [edx],eax
c001acb1:	90                   	nop
c001acb2:	c9                   	leave  
c001acb3:	c3                   	ret    

c001acb4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001acb4:	55                   	push   ebp
c001acb5:	89 e5                	mov    ebp,esp
c001acb7:	53                   	push   ebx
c001acb8:	83 ec 2c             	sub    esp,0x2c
c001acbb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001acbe:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001acc1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001acc4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001acc7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001acca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001accd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001acd0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001acd3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001acd6:	88 d8                	mov    al,bl
c001acd8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001acdb:	88 c8                	mov    al,cl
c001acdd:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ace0:	88 d0                	mov    al,dl
c001ace2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ace5:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ace8:	25 ff 00 00 00       	and    eax,0xff
c001aced:	83 c0 08             	add    eax,0x8
c001acf0:	01 c0                	add    eax,eax
c001acf2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001acf5:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001acf8:	25 ff 00 00 00       	and    eax,0xff
c001acfd:	83 c0 08             	add    eax,0x8
c001ad00:	01 c0                	add    eax,eax
c001ad02:	40                   	inc    eax
c001ad03:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ad06:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ad09:	50                   	push   eax
c001ad0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ad0d:	e8 5a fe ff ff       	call   c001ab6c <IOAPIC::read(int)>
c001ad12:	83 c4 08             	add    esp,0x8
c001ad15:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ad18:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ad1f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ad22:	c1 e0 18             	shl    eax,0x18
c001ad25:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ad28:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ad2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ad2e:	52                   	push   edx
c001ad2f:	50                   	push   eax
c001ad30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ad33:	e8 50 ff ff ff       	call   c001ac88 <IOAPIC::write(int, int)>
c001ad38:	83 c4 0c             	add    esp,0xc
c001ad3b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ad3e:	50                   	push   eax
c001ad3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ad42:	e8 25 fe ff ff       	call   c001ab6c <IOAPIC::read(int)>
c001ad47:	83 c4 08             	add    esp,0x8
c001ad4a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ad4d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ad54:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ad5b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ad62:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001ad66:	74 09                	je     c001ad71 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001ad68:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ad6f:	eb 07                	jmp    c001ad78 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001ad71:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ad78:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001ad7c:	74 09                	je     c001ad87 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001ad7e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ad85:	eb 07                	jmp    c001ad8e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001ad87:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ad8e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ad95:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001ad98:	25 ff 00 00 00       	and    eax,0xff
c001ad9d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ada0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ada3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ada6:	52                   	push   edx
c001ada7:	50                   	push   eax
c001ada8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001adab:	e8 d8 fe ff ff       	call   c001ac88 <IOAPIC::write(int, int)>
c001adb0:	83 c4 0c             	add    esp,0xc
c001adb3:	90                   	nop
c001adb4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001adb7:	c9                   	leave  
c001adb8:	c3                   	ret    
c001adb9:	66 90                	xchg   ax,ax
c001adbb:	90                   	nop

c001adbc <APICTimer::close(int, int, void*)>:
c001adbc:	b8 00 00 00 00       	mov    eax,0x0
c001adc1:	c3                   	ret    
c001adc2:	66 90                	xchg   ax,ax

c001adc4 <apicTimerHandler(regs*, void*)>:
c001adc4:	83 ec 0c             	sub    esp,0xc
c001adc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adcb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001adcd:	b8 10 27 00 00       	mov    eax,0x2710
c001add2:	ba 00 00 00 00       	mov    edx,0x0
c001add7:	f7 f1                	div    ecx
c001add9:	83 ec 0c             	sub    esp,0xc
c001addc:	50                   	push   eax
c001addd:	e8 e2 17 ff ff       	call   c000c5c4 <timerHandler(unsigned int)>
c001ade2:	83 c4 10             	add    esp,0x10
c001ade5:	90                   	nop
c001ade6:	83 c4 0c             	add    esp,0xc
c001ade9:	c3                   	ret    
c001adea:	66 90                	xchg   ax,ax

c001adec <APICTimer::open(int, int, void*)>:
c001adec:	83 ec 0c             	sub    esp,0xc
c001adef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf3:	8b 00                	mov    eax,DWORD PTR [eax]
c001adf5:	83 c0 24             	add    eax,0x24
c001adf8:	8b 00                	mov    eax,DWORD PTR [eax]
c001adfa:	83 ec 08             	sub    esp,0x8
c001adfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae05:	ff d0                	call   eax
c001ae07:	83 c4 10             	add    esp,0x10
c001ae0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae12:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ae18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae20:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ae26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae2a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ae30:	83 ec 0c             	sub    esp,0xc
c001ae33:	51                   	push   ecx
c001ae34:	6a 01                	push   0x1
c001ae36:	68 c4 ad 01 c0       	push   0xc001adc4
c001ae3b:	52                   	push   edx
c001ae3c:	50                   	push   eax
c001ae3d:	e8 9a fe fe ff       	call   c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ae42:	83 c4 20             	add    esp,0x20
c001ae45:	89 c2                	mov    edx,eax
c001ae47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ae51:	b8 00 00 00 00       	mov    eax,0x0
c001ae56:	83 c4 0c             	add    esp,0xc
c001ae59:	c3                   	ret    
c001ae5a:	66 90                	xchg   ax,ax

c001ae5c <APICTimer::write(int)>:
c001ae5c:	83 ec 0c             	sub    esp,0xc
c001ae5f:	83 ec 0c             	sub    esp,0xc
c001ae62:	68 50 eb 01 c0       	push   0xc001eb50
c001ae67:	e8 d3 45 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001ae6c:	83 c4 10             	add    esp,0x10
c001ae6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae77:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ae7d:	90                   	nop
c001ae7e:	83 c4 0c             	add    esp,0xc
c001ae81:	c3                   	ret    
c001ae82:	66 90                	xchg   ax,ax

c001ae84 <APICTimer::APICTimer()>:
c001ae84:	83 ec 0c             	sub    esp,0xc
c001ae87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8b:	83 ec 08             	sub    esp,0x8
c001ae8e:	68 60 eb 01 c0       	push   0xc001eb60
c001ae93:	50                   	push   eax
c001ae94:	e8 5f 16 ff ff       	call   c000c4f8 <Timer::Timer(char const*)>
c001ae99:	83 c4 10             	add    esp,0x10
c001ae9c:	ba 74 eb 01 c0       	mov    edx,0xc001eb74
c001aea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aea5:	89 10                	mov    DWORD PTR [eax],edx
c001aea7:	90                   	nop
c001aea8:	83 c4 0c             	add    esp,0xc
c001aeab:	c3                   	ret    

c001aeac <PIT::write(int)>:
c001aeac:	83 ec 10             	sub    esp,0x10
c001aeaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aeb3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aeb7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001aebd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aec1:	a3 24 33 02 c0       	mov    ds:0xc0023324,eax
c001aec6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001aecb:	99                   	cdq    
c001aecc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001aed0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aed4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001aedb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001aee0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001aee4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001aee9:	ee                   	out    dx,al
c001aeea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aeee:	25 ff 00 00 00       	and    eax,0xff
c001aef3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001aefa:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001aefe:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001af02:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001af07:	ee                   	out    dx,al
c001af08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af0c:	c1 f8 08             	sar    eax,0x8
c001af0f:	25 ff 00 00 00       	and    eax,0xff
c001af14:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001af1b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001af1f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001af23:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001af28:	ee                   	out    dx,al
c001af29:	90                   	nop
c001af2a:	83 c4 10             	add    esp,0x10
c001af2d:	c3                   	ret    
c001af2e:	66 90                	xchg   ax,ax

c001af30 <pitHandler(regs*, void*)>:
c001af30:	83 ec 0c             	sub    esp,0xc
c001af33:	8b 0d 24 33 02 c0    	mov    ecx,DWORD PTR ds:0xc0023324
c001af39:	b8 10 27 00 00       	mov    eax,0x2710
c001af3e:	99                   	cdq    
c001af3f:	f7 f9                	idiv   ecx
c001af41:	83 ec 0c             	sub    esp,0xc
c001af44:	50                   	push   eax
c001af45:	e8 7a 16 ff ff       	call   c000c5c4 <timerHandler(unsigned int)>
c001af4a:	83 c4 10             	add    esp,0x10
c001af4d:	90                   	nop
c001af4e:	83 c4 0c             	add    esp,0xc
c001af51:	c3                   	ret    
c001af52:	66 90                	xchg   ax,ax

c001af54 <PIT::open(int, int, void*)>:
c001af54:	83 ec 0c             	sub    esp,0xc
c001af57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001af5d:	83 c0 24             	add    eax,0x24
c001af60:	8b 00                	mov    eax,DWORD PTR [eax]
c001af62:	83 ec 08             	sub    esp,0x8
c001af65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af6d:	ff d0                	call   eax
c001af6f:	83 c4 10             	add    esp,0x10
c001af72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af76:	83 ec 0c             	sub    esp,0xc
c001af79:	6a 00                	push   0x0
c001af7b:	6a 01                	push   0x1
c001af7d:	68 30 af 01 c0       	push   0xc001af30
c001af82:	6a 00                	push   0x0
c001af84:	50                   	push   eax
c001af85:	e8 52 fd fe ff       	call   c000acdc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001af8a:	83 c4 20             	add    esp,0x20
c001af8d:	89 c2                	mov    edx,eax
c001af8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af93:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001af99:	b8 00 00 00 00       	mov    eax,0x0
c001af9e:	83 c4 0c             	add    esp,0xc
c001afa1:	c3                   	ret    
c001afa2:	66 90                	xchg   ax,ax

c001afa4 <PIT::close(int, int, void*)>:
c001afa4:	83 ec 0c             	sub    esp,0xc
c001afa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afab:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001afb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb9:	6a 01                	push   0x1
c001afbb:	68 30 af 01 c0       	push   0xc001af30
c001afc0:	6a 00                	push   0x0
c001afc2:	50                   	push   eax
c001afc3:	e8 4a fd fe ff       	call   c000ad12 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001afc8:	83 c4 10             	add    esp,0x10
c001afcb:	b8 00 00 00 00       	mov    eax,0x0
c001afd0:	83 c4 0c             	add    esp,0xc
c001afd3:	c3                   	ret    

c001afd4 <PIT::PIT()>:
c001afd4:	83 ec 0c             	sub    esp,0xc
c001afd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afdb:	83 ec 08             	sub    esp,0x8
c001afde:	68 9c eb 01 c0       	push   0xc001eb9c
c001afe3:	50                   	push   eax
c001afe4:	e8 0f 15 ff ff       	call   c000c4f8 <Timer::Timer(char const*)>
c001afe9:	83 c4 10             	add    esp,0x10
c001afec:	ba c4 eb 01 c0       	mov    edx,0xc001ebc4
c001aff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aff5:	89 10                	mov    DWORD PTR [eax],edx
c001aff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001affb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b001:	31 d2                	xor    edx,edx
c001b003:	88 c2                	mov    dl,al
c001b005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b009:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b014:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b01a:	31 d2                	xor    edx,edx
c001b01c:	88 c2                	mov    dl,al
c001b01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b022:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b02b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b031:	8d 50 01             	lea    edx,[eax+0x1]
c001b034:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b038:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b03e:	31 d2                	xor    edx,edx
c001b040:	88 c2                	mov    dl,al
c001b042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b046:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b04a:	83 e1 3f             	and    ecx,0x3f
c001b04d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b051:	90                   	nop
c001b052:	83 c4 0c             	add    esp,0xc
c001b055:	c3                   	ret    
c001b056:	66 90                	xchg   ax,ax
c001b058:	66 90                	xchg   ax,ax
c001b05a:	66 90                	xchg   ax,ax
c001b05c:	66 90                	xchg   ax,ax
c001b05e:	66 90                	xchg   ax,ax

c001b060 <avxDetect>:
c001b060:	b8 01 00 00 00       	mov    eax,0x1
c001b065:	0f a2                	cpuid  
c001b067:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b06d:	74 15                	je     c001b084 <avxDetect.noAVX>
c001b06f:	b8 01 00 00 00       	mov    eax,0x1
c001b074:	0f a2                	cpuid  
c001b076:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b07c:	74 06                	je     c001b084 <avxDetect.noAVX>
c001b07e:	b8 01 00 00 00       	mov    eax,0x1
c001b083:	c3                   	ret    

c001b084 <avxDetect.noAVX>:
c001b084:	b8 00 00 00 00       	mov    eax,0x0
c001b089:	c3                   	ret    

c001b08a <avxSave>:
c001b08a:	53                   	push   ebx
c001b08b:	52                   	push   edx
c001b08c:	31 c0                	xor    eax,eax
c001b08e:	48                   	dec    eax
c001b08f:	89 c2                	mov    edx,eax
c001b091:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b095:	0f ae 23             	xsave  [ebx]
c001b098:	5a                   	pop    edx
c001b099:	5b                   	pop    ebx
c001b09a:	c3                   	ret    

c001b09b <avxLoad>:
c001b09b:	53                   	push   ebx
c001b09c:	52                   	push   edx
c001b09d:	31 c0                	xor    eax,eax
c001b09f:	48                   	dec    eax
c001b0a0:	89 c2                	mov    edx,eax
c001b0a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b0a6:	0f ae 2b             	xrstor [ebx]
c001b0a9:	5a                   	pop    edx
c001b0aa:	5b                   	pop    ebx
c001b0ab:	c3                   	ret    

c001b0ac <avxInit>:
c001b0ac:	e8 57 02 00 00       	call   c001b308 <sseInit>
c001b0b1:	50                   	push   eax
c001b0b2:	51                   	push   ecx
c001b0b3:	0f 20 e0             	mov    eax,cr4
c001b0b6:	0d 00 00 04 00       	or     eax,0x40000
c001b0bb:	0f 22 e0             	mov    cr4,eax
c001b0be:	31 c9                	xor    ecx,ecx
c001b0c0:	0f 01 d0             	xgetbv 
c001b0c3:	0d 07 00 00 00       	or     eax,0x7
c001b0c8:	0f 01 d1             	xsetbv 
c001b0cb:	59                   	pop    ecx
c001b0cc:	58                   	pop    eax
c001b0cd:	c3                   	ret    

c001b0ce <avxClose>:
c001b0ce:	c3                   	ret    

c001b0cf <wouldSheSayYes>:
c001b0cf:	c3                   	ret    
c001b0d0:	49                   	dec    ecx
c001b0d1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b0d5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b0d9:	75 20                	jne    c001b0fb <isr0+0xb>
c001b0db:	4e                   	dec    esi
c001b0dc:	79 61                	jns    c001b13f <isr7+0x3>
c001b0de:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b0e3:	66 90                	xchg   ax,ax
c001b0e5:	66 90                	xchg   ax,ax
c001b0e7:	66 90                	xchg   ax,ax
c001b0e9:	66 90                	xchg   ax,ax
c001b0eb:	66 90                	xchg   ax,ax
c001b0ed:	66 90                	xchg   ax,ax
c001b0ef:	90                   	nop

c001b0f0 <isr0>:
c001b0f0:	fa                   	cli    
c001b0f1:	68 00 00 00 00       	push   0x0
c001b0f6:	68 00 00 00 00       	push   0x0
c001b0fb:	e9 44 01 00 00       	jmp    c001b244 <int_common_stub>

c001b100 <isr1>:
c001b100:	fa                   	cli    
c001b101:	6a 00                	push   0x0
c001b103:	6a 01                	push   0x1
c001b105:	e9 3a 01 00 00       	jmp    c001b244 <int_common_stub>

c001b10a <isr2>:
c001b10a:	fa                   	cli    
c001b10b:	6a 00                	push   0x0
c001b10d:	6a 02                	push   0x2
c001b10f:	e9 30 01 00 00       	jmp    c001b244 <int_common_stub>

c001b114 <isr3>:
c001b114:	fa                   	cli    
c001b115:	6a 00                	push   0x0
c001b117:	6a 03                	push   0x3
c001b119:	e9 26 01 00 00       	jmp    c001b244 <int_common_stub>

c001b11e <isr4>:
c001b11e:	fa                   	cli    
c001b11f:	6a 00                	push   0x0
c001b121:	6a 04                	push   0x4
c001b123:	e9 1c 01 00 00       	jmp    c001b244 <int_common_stub>

c001b128 <isr5>:
c001b128:	fa                   	cli    
c001b129:	6a 00                	push   0x0
c001b12b:	6a 05                	push   0x5
c001b12d:	e9 12 01 00 00       	jmp    c001b244 <int_common_stub>

c001b132 <isr6>:
c001b132:	fa                   	cli    
c001b133:	6a 00                	push   0x0
c001b135:	6a 06                	push   0x6
c001b137:	e9 08 01 00 00       	jmp    c001b244 <int_common_stub>

c001b13c <isr7>:
c001b13c:	fa                   	cli    
c001b13d:	6a 00                	push   0x0
c001b13f:	6a 07                	push   0x7
c001b141:	e9 fe 00 00 00       	jmp    c001b244 <int_common_stub>

c001b146 <isr8>:
c001b146:	fa                   	cli    
c001b147:	6a 08                	push   0x8
c001b149:	e9 f6 00 00 00       	jmp    c001b244 <int_common_stub>

c001b14e <isr9>:
c001b14e:	fa                   	cli    
c001b14f:	6a 00                	push   0x0
c001b151:	6a 09                	push   0x9
c001b153:	e9 ec 00 00 00       	jmp    c001b244 <int_common_stub>

c001b158 <isr10>:
c001b158:	fa                   	cli    
c001b159:	6a 0a                	push   0xa
c001b15b:	e9 e4 00 00 00       	jmp    c001b244 <int_common_stub>

c001b160 <isr11>:
c001b160:	fa                   	cli    
c001b161:	6a 0b                	push   0xb
c001b163:	e9 dc 00 00 00       	jmp    c001b244 <int_common_stub>

c001b168 <isr12>:
c001b168:	fa                   	cli    
c001b169:	6a 0c                	push   0xc
c001b16b:	e9 d4 00 00 00       	jmp    c001b244 <int_common_stub>

c001b170 <isr13>:
c001b170:	fa                   	cli    
c001b171:	6a 0d                	push   0xd
c001b173:	e9 cc 00 00 00       	jmp    c001b244 <int_common_stub>

c001b178 <isr14>:
c001b178:	fa                   	cli    
c001b179:	6a 0e                	push   0xe
c001b17b:	e9 c4 00 00 00       	jmp    c001b244 <int_common_stub>

c001b180 <isr15>:
c001b180:	fa                   	cli    
c001b181:	6a 00                	push   0x0
c001b183:	6a 0f                	push   0xf
c001b185:	e9 ba 00 00 00       	jmp    c001b244 <int_common_stub>

c001b18a <isr16>:
c001b18a:	fa                   	cli    
c001b18b:	6a 00                	push   0x0
c001b18d:	6a 10                	push   0x10
c001b18f:	e9 b0 00 00 00       	jmp    c001b244 <int_common_stub>

c001b194 <isr17>:
c001b194:	fa                   	cli    
c001b195:	6a 00                	push   0x0
c001b197:	6a 11                	push   0x11
c001b199:	e9 a6 00 00 00       	jmp    c001b244 <int_common_stub>

c001b19e <isr18>:
c001b19e:	fa                   	cli    
c001b19f:	6a 00                	push   0x0
c001b1a1:	6a 12                	push   0x12
c001b1a3:	e9 9c 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1a8 <irq3>:
c001b1a8:	fa                   	cli    
c001b1a9:	6a 00                	push   0x0
c001b1ab:	6a 23                	push   0x23
c001b1ad:	e9 92 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1b2 <irq4>:
c001b1b2:	fa                   	cli    
c001b1b3:	6a 00                	push   0x0
c001b1b5:	6a 24                	push   0x24
c001b1b7:	e9 88 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1bc <irq5>:
c001b1bc:	fa                   	cli    
c001b1bd:	6a 00                	push   0x0
c001b1bf:	6a 25                	push   0x25
c001b1c1:	e9 7e 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1c6 <irq6>:
c001b1c6:	fa                   	cli    
c001b1c7:	6a 00                	push   0x0
c001b1c9:	6a 26                	push   0x26
c001b1cb:	e9 74 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1d0 <irq7>:
c001b1d0:	fa                   	cli    
c001b1d1:	6a 00                	push   0x0
c001b1d3:	6a 27                	push   0x27
c001b1d5:	e9 6a 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1da <irq8>:
c001b1da:	fa                   	cli    
c001b1db:	6a 00                	push   0x0
c001b1dd:	6a 28                	push   0x28
c001b1df:	e9 60 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1e4 <irq9>:
c001b1e4:	fa                   	cli    
c001b1e5:	6a 00                	push   0x0
c001b1e7:	6a 29                	push   0x29
c001b1e9:	e9 56 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1ee <irq10>:
c001b1ee:	fa                   	cli    
c001b1ef:	6a 00                	push   0x0
c001b1f1:	6a 2a                	push   0x2a
c001b1f3:	e9 4c 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1f8 <irq11>:
c001b1f8:	fa                   	cli    
c001b1f9:	6a 00                	push   0x0
c001b1fb:	6a 2b                	push   0x2b
c001b1fd:	e9 42 00 00 00       	jmp    c001b244 <int_common_stub>

c001b202 <irq12>:
c001b202:	fa                   	cli    
c001b203:	6a 00                	push   0x0
c001b205:	6a 2c                	push   0x2c
c001b207:	e9 38 00 00 00       	jmp    c001b244 <int_common_stub>

c001b20c <irq13>:
c001b20c:	fa                   	cli    
c001b20d:	6a 00                	push   0x0
c001b20f:	6a 2d                	push   0x2d
c001b211:	e9 2e 00 00 00       	jmp    c001b244 <int_common_stub>

c001b216 <irq14>:
c001b216:	fa                   	cli    
c001b217:	6a 00                	push   0x0
c001b219:	6a 2e                	push   0x2e
c001b21b:	e9 24 00 00 00       	jmp    c001b244 <int_common_stub>

c001b220 <irq15>:
c001b220:	fa                   	cli    
c001b221:	6a 00                	push   0x0
c001b223:	6a 2f                	push   0x2f
c001b225:	e9 1a 00 00 00       	jmp    c001b244 <int_common_stub>

c001b22a <irq1>:
c001b22a:	fa                   	cli    
c001b22b:	6a 00                	push   0x0
c001b22d:	6a 21                	push   0x21
c001b22f:	eb 13                	jmp    c001b244 <int_common_stub>

c001b231 <irq2>:
c001b231:	fa                   	cli    
c001b232:	6a 00                	push   0x0
c001b234:	6a 22                	push   0x22
c001b236:	eb 0c                	jmp    c001b244 <int_common_stub>

c001b238 <isr96>:
c001b238:	6a 00                	push   0x0
c001b23a:	6a 60                	push   0x60
c001b23c:	fb                   	sti    
c001b23d:	eb 05                	jmp    c001b244 <int_common_stub>

c001b23f <irq0>:
c001b23f:	fa                   	cli    
c001b240:	6a 00                	push   0x0
c001b242:	6a 20                	push   0x20

c001b244 <int_common_stub>:
c001b244:	60                   	pusha  
c001b245:	1e                   	push   ds
c001b246:	06                   	push   es
c001b247:	0f a0                	push   fs
c001b249:	0f a8                	push   gs
c001b24b:	66 b8 10 00          	mov    ax,0x10
c001b24f:	66 8e d8             	mov    ds,ax
c001b252:	66 8e c0             	mov    es,ax
c001b255:	66 8e e0             	mov    fs,ax
c001b258:	66 8e e8             	mov    gs,ax
c001b25b:	54                   	push   esp
c001b25c:	fc                   	cld    
c001b25d:	e8 7a ff fe ff       	call   c000b1dc <int_handler>
c001b262:	81 c4 04 00 00 00    	add    esp,0x4
c001b268:	0f a9                	pop    gs
c001b26a:	0f a1                	pop    fs
c001b26c:	07                   	pop    es
c001b26d:	1f                   	pop    ds
c001b26e:	61                   	popa   
c001b26f:	81 c4 08 00 00 00    	add    esp,0x8
c001b275:	cf                   	iret   

c001b276 <irq16>:
c001b276:	fa                   	cli    
c001b277:	6a 00                	push   0x0
c001b279:	6a 30                	push   0x30
c001b27b:	e9 c4 ff ff ff       	jmp    c001b244 <int_common_stub>

c001b280 <irq17>:
c001b280:	fa                   	cli    
c001b281:	6a 00                	push   0x0
c001b283:	6a 31                	push   0x31
c001b285:	e9 ba ff ff ff       	jmp    c001b244 <int_common_stub>

c001b28a <irq18>:
c001b28a:	fa                   	cli    
c001b28b:	6a 00                	push   0x0
c001b28d:	6a 32                	push   0x32
c001b28f:	e9 b0 ff ff ff       	jmp    c001b244 <int_common_stub>

c001b294 <irq19>:
c001b294:	fa                   	cli    
c001b295:	6a 00                	push   0x0
c001b297:	6a 33                	push   0x33
c001b299:	e9 a6 ff ff ff       	jmp    c001b244 <int_common_stub>

c001b29e <irq20>:
c001b29e:	fa                   	cli    
c001b29f:	6a 00                	push   0x0
c001b2a1:	6a 34                	push   0x34
c001b2a3:	e9 9c ff ff ff       	jmp    c001b244 <int_common_stub>

c001b2a8 <irq21>:
c001b2a8:	fa                   	cli    
c001b2a9:	6a 00                	push   0x0
c001b2ab:	6a 35                	push   0x35
c001b2ad:	e9 92 ff ff ff       	jmp    c001b244 <int_common_stub>

c001b2b2 <irq22>:
c001b2b2:	fa                   	cli    
c001b2b3:	6a 00                	push   0x0
c001b2b5:	6a 36                	push   0x36
c001b2b7:	e9 88 ff ff ff       	jmp    c001b244 <int_common_stub>

c001b2bc <irq23>:
c001b2bc:	fa                   	cli    
c001b2bd:	6a 00                	push   0x0
c001b2bf:	6a 37                	push   0x37
c001b2c1:	e9 7e ff ff ff       	jmp    c001b244 <int_common_stub>
c001b2c6:	66 90                	xchg   ax,ax
c001b2c8:	66 90                	xchg   ax,ax
c001b2ca:	66 90                	xchg   ax,ax
c001b2cc:	66 90                	xchg   ax,ax
c001b2ce:	66 90                	xchg   ax,ax

c001b2d0 <i386GetRDRAND>:
c001b2d0:	b9 64 00 00 00       	mov    ecx,0x64

c001b2d5 <retry>:
c001b2d5:	0f c7 f0             	rdrand eax
c001b2d8:	72 05                	jb     c001b2df <retry.done>
c001b2da:	e2 f9                	loop   c001b2d5 <retry>

c001b2dc <retry.fail>:
c001b2dc:	31 c0                	xor    eax,eax
c001b2de:	c3                   	ret    

c001b2df <retry.done>:
c001b2df:	c3                   	ret    

c001b2e0 <absolutelyNoChanceInHell>:
c001b2e0:	b8 01 00 00 00       	mov    eax,0x1
c001b2e5:	0f a2                	cpuid  
c001b2e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b2ed:	74 06                	je     c001b2f5 <sseDetect.noSSE>
c001b2ef:	b8 01 00 00 00       	mov    eax,0x1
c001b2f4:	c3                   	ret    

c001b2f5 <sseDetect.noSSE>:
c001b2f5:	31 c0                	xor    eax,eax
c001b2f7:	c3                   	ret    

c001b2f8 <sseSave>:
c001b2f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2fc:	0f ae 00             	fxsave [eax]
c001b2ff:	c3                   	ret    

c001b300 <sseLoad>:
c001b300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b304:	0f ae 08             	fxrstor [eax]
c001b307:	c3                   	ret    

c001b308 <sseInit>:
c001b308:	e8 42 00 00 00       	call   c001b34f <x87Init>
c001b30d:	0f 20 e0             	mov    eax,cr4
c001b310:	66 0d 00 06          	or     ax,0x600
c001b314:	0f 22 e0             	mov    cr4,eax
c001b317:	c3                   	ret    

c001b318 <sseClose>:
c001b318:	c3                   	ret    
c001b319:	66 90                	xchg   ax,ax
c001b31b:	66 90                	xchg   ax,ax
c001b31d:	66 90                	xchg   ax,ax
c001b31f:	90                   	nop

c001b320 <value_37F>:
c001b320:	7f 03                	jg     c001b325 <value_37A+0x1>

c001b322 <value_37E>:
c001b322:	7e 03                	jle    c001b327 <x87Detect+0x1>

c001b324 <value_37A>:
c001b324:	7a 03                	jp     c001b329 <x87Detect+0x3>

c001b326 <x87Detect>:
c001b326:	b8 01 00 00 00       	mov    eax,0x1
c001b32b:	0f a2                	cpuid  
c001b32d:	f7 c2 01 00 00 00    	test   edx,0x1
c001b333:	74 06                	je     c001b33b <x87Detect.nox87>
c001b335:	b8 01 00 00 00       	mov    eax,0x1
c001b33a:	c3                   	ret    

c001b33b <x87Detect.nox87>:
c001b33b:	b8 00 00 00 00       	mov    eax,0x0
c001b340:	c3                   	ret    

c001b341 <x87Save>:
c001b341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b345:	dd 30                	fnsave [eax]
c001b347:	c3                   	ret    

c001b348 <x87Load>:
c001b348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b34c:	dd 20                	frstor [eax]
c001b34e:	c3                   	ret    

c001b34f <x87Init>:
c001b34f:	0f 20 c0             	mov    eax,cr0
c001b352:	66 25 fb ff          	and    ax,0xfffb
c001b356:	66 0d 22 00          	or     ax,0x22
c001b35a:	0f 22 c0             	mov    cr0,eax
c001b35d:	db e3                	fninit 
c001b35f:	0f 06                	clts   
c001b361:	d9 2d 24 b3 01 c0    	fldcw  WORD PTR ds:0xc001b324
c001b367:	c3                   	ret    

c001b368 <x87Close>:
c001b368:	c3                   	ret    
c001b369:	66 90                	xchg   ax,ax
c001b36b:	90                   	nop

c001b36c <__do_global_ctors_aux>:
c001b36c:	a1 1c c3 01 c0       	mov    eax,ds:0xc001c31c
c001b371:	83 f8 ff             	cmp    eax,0xffffffff
c001b374:	74 1a                	je     c001b390 <__do_global_ctors_aux+0x24>
c001b376:	55                   	push   ebp
c001b377:	89 e5                	mov    ebp,esp
c001b379:	53                   	push   ebx
c001b37a:	52                   	push   edx
c001b37b:	bb 1c c3 01 c0       	mov    ebx,0xc001c31c
c001b380:	ff d0                	call   eax
c001b382:	83 eb 04             	sub    ebx,0x4
c001b385:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b387:	83 f8 ff             	cmp    eax,0xffffffff
c001b38a:	75 f4                	jne    c001b380 <__do_global_ctors_aux+0x14>
c001b38c:	58                   	pop    eax
c001b38d:	5b                   	pop    ebx
c001b38e:	5d                   	pop    ebp
c001b38f:	c3                   	ret    
c001b390:	c3                   	ret    
c001b391:	66 90                	xchg   ax,ax
c001b393:	90                   	nop

c001b394 <__divdi3>:
c001b394:	55                   	push   ebp
c001b395:	57                   	push   edi
c001b396:	56                   	push   esi
c001b397:	53                   	push   ebx
c001b398:	83 ec 1c             	sub    esp,0x1c
c001b39b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b39f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b3a3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b3a6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b3aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b3ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b3b2:	85 db                	test   ebx,ebx
c001b3b4:	0f 88 8e 00 00 00    	js     c001b448 <__divdi3+0xb4>
c001b3ba:	89 dd                	mov    ebp,ebx
c001b3bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b3c4:	89 d3                	mov    ebx,edx
c001b3c6:	85 d2                	test   edx,edx
c001b3c8:	79 0d                	jns    c001b3d7 <__divdi3+0x43>
c001b3ca:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b3ce:	f7 d8                	neg    eax
c001b3d0:	83 d2 00             	adc    edx,0x0
c001b3d3:	f7 da                	neg    edx
c001b3d5:	89 d3                	mov    ebx,edx
c001b3d7:	89 c7                	mov    edi,eax
c001b3d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b3dc:	85 db                	test   ebx,ebx
c001b3de:	75 48                	jne    c001b428 <__divdi3+0x94>
c001b3e0:	39 ef                	cmp    edi,ebp
c001b3e2:	76 24                	jbe    c001b408 <__divdi3+0x74>
c001b3e4:	89 ea                	mov    edx,ebp
c001b3e6:	f7 f7                	div    edi
c001b3e8:	89 c1                	mov    ecx,eax
c001b3ea:	31 f6                	xor    esi,esi
c001b3ec:	89 c8                	mov    eax,ecx
c001b3ee:	89 f2                	mov    edx,esi
c001b3f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b3f4:	85 c9                	test   ecx,ecx
c001b3f6:	74 07                	je     c001b3ff <__divdi3+0x6b>
c001b3f8:	f7 d8                	neg    eax
c001b3fa:	83 d2 00             	adc    edx,0x0
c001b3fd:	f7 da                	neg    edx
c001b3ff:	83 c4 1c             	add    esp,0x1c
c001b402:	5b                   	pop    ebx
c001b403:	5e                   	pop    esi
c001b404:	5f                   	pop    edi
c001b405:	5d                   	pop    ebp
c001b406:	c3                   	ret    
c001b407:	90                   	nop
c001b408:	85 ff                	test   edi,edi
c001b40a:	75 0b                	jne    c001b417 <__divdi3+0x83>
c001b40c:	b8 01 00 00 00       	mov    eax,0x1
c001b411:	31 d2                	xor    edx,edx
c001b413:	f7 f3                	div    ebx
c001b415:	89 c7                	mov    edi,eax
c001b417:	31 d2                	xor    edx,edx
c001b419:	89 e8                	mov    eax,ebp
c001b41b:	f7 f7                	div    edi
c001b41d:	89 c6                	mov    esi,eax
c001b41f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b422:	f7 f7                	div    edi
c001b424:	89 c1                	mov    ecx,eax
c001b426:	eb c4                	jmp    c001b3ec <__divdi3+0x58>
c001b428:	39 eb                	cmp    ebx,ebp
c001b42a:	77 3c                	ja     c001b468 <__divdi3+0xd4>
c001b42c:	0f bd f3             	bsr    esi,ebx
c001b42f:	83 f6 1f             	xor    esi,0x1f
c001b432:	75 40                	jne    c001b474 <__divdi3+0xe0>
c001b434:	39 eb                	cmp    ebx,ebp
c001b436:	72 09                	jb     c001b441 <__divdi3+0xad>
c001b438:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b43b:	0f 87 97 00 00 00    	ja     c001b4d8 <__divdi3+0x144>
c001b441:	b9 01 00 00 00       	mov    ecx,0x1
c001b446:	eb a4                	jmp    c001b3ec <__divdi3+0x58>
c001b448:	f7 d9                	neg    ecx
c001b44a:	83 d3 00             	adc    ebx,0x0
c001b44d:	f7 db                	neg    ebx
c001b44f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b452:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b456:	89 dd                	mov    ebp,ebx
c001b458:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001b460:	e9 5f ff ff ff       	jmp    c001b3c4 <__divdi3+0x30>
c001b465:	8d 76 00             	lea    esi,[esi+0x0]
c001b468:	31 f6                	xor    esi,esi
c001b46a:	31 c9                	xor    ecx,ecx
c001b46c:	e9 7b ff ff ff       	jmp    c001b3ec <__divdi3+0x58>
c001b471:	8d 76 00             	lea    esi,[esi+0x0]
c001b474:	b8 20 00 00 00       	mov    eax,0x20
c001b479:	29 f0                	sub    eax,esi
c001b47b:	89 f1                	mov    ecx,esi
c001b47d:	d3 e3                	shl    ebx,cl
c001b47f:	89 fa                	mov    edx,edi
c001b481:	88 c1                	mov    cl,al
c001b483:	d3 ea                	shr    edx,cl
c001b485:	09 da                	or     edx,ebx
c001b487:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b48b:	89 f1                	mov    ecx,esi
c001b48d:	d3 e7                	shl    edi,cl
c001b48f:	89 eb                	mov    ebx,ebp
c001b491:	88 c1                	mov    cl,al
c001b493:	d3 eb                	shr    ebx,cl
c001b495:	89 f1                	mov    ecx,esi
c001b497:	d3 e5                	shl    ebp,cl
c001b499:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001b49c:	88 c1                	mov    cl,al
c001b49e:	d3 ea                	shr    edx,cl
c001b4a0:	09 d5                	or     ebp,edx
c001b4a2:	89 e8                	mov    eax,ebp
c001b4a4:	89 da                	mov    edx,ebx
c001b4a6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001b4aa:	89 d3                	mov    ebx,edx
c001b4ac:	89 c5                	mov    ebp,eax
c001b4ae:	f7 e7                	mul    edi
c001b4b0:	39 d3                	cmp    ebx,edx
c001b4b2:	72 18                	jb     c001b4cc <__divdi3+0x138>
c001b4b4:	74 0a                	je     c001b4c0 <__divdi3+0x12c>
c001b4b6:	89 e9                	mov    ecx,ebp
c001b4b8:	31 f6                	xor    esi,esi
c001b4ba:	e9 2d ff ff ff       	jmp    c001b3ec <__divdi3+0x58>
c001b4bf:	90                   	nop
c001b4c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001b4c3:	89 f1                	mov    ecx,esi
c001b4c5:	d3 e7                	shl    edi,cl
c001b4c7:	39 c7                	cmp    edi,eax
c001b4c9:	73 eb                	jae    c001b4b6 <__divdi3+0x122>
c001b4cb:	90                   	nop
c001b4cc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001b4cf:	31 f6                	xor    esi,esi
c001b4d1:	e9 16 ff ff ff       	jmp    c001b3ec <__divdi3+0x58>
c001b4d6:	66 90                	xchg   ax,ax
c001b4d8:	31 c9                	xor    ecx,ecx
c001b4da:	e9 0d ff ff ff       	jmp    c001b3ec <__divdi3+0x58>
c001b4df:	90                   	nop

c001b4e0 <__moddi3>:
c001b4e0:	55                   	push   ebp
c001b4e1:	57                   	push   edi
c001b4e2:	56                   	push   esi
c001b4e3:	53                   	push   ebx
c001b4e4:	83 ec 2c             	sub    esp,0x2c
c001b4e7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b4eb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001b4ef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b4f3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001b4f7:	85 db                	test   ebx,ebx
c001b4f9:	0f 88 85 00 00 00    	js     c001b584 <__moddi3+0xa4>
c001b4ff:	89 de                	mov    esi,ebx
c001b501:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b509:	89 d7                	mov    edi,edx
c001b50b:	85 d2                	test   edx,edx
c001b50d:	79 09                	jns    c001b518 <__moddi3+0x38>
c001b50f:	f7 d8                	neg    eax
c001b511:	83 d2 00             	adc    edx,0x0
c001b514:	f7 da                	neg    edx
c001b516:	89 d7                	mov    edi,edx
c001b518:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b51c:	89 cd                	mov    ebp,ecx
c001b51e:	85 ff                	test   edi,edi
c001b520:	75 52                	jne    c001b574 <__moddi3+0x94>
c001b522:	89 c3                	mov    ebx,eax
c001b524:	39 f0                	cmp    eax,esi
c001b526:	76 24                	jbe    c001b54c <__moddi3+0x6c>
c001b528:	89 c8                	mov    eax,ecx
c001b52a:	89 f2                	mov    edx,esi
c001b52c:	f7 f3                	div    ebx
c001b52e:	89 d6                	mov    esi,edx
c001b530:	89 f0                	mov    eax,esi
c001b532:	31 d2                	xor    edx,edx
c001b534:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b538:	85 c9                	test   ecx,ecx
c001b53a:	74 07                	je     c001b543 <__moddi3+0x63>
c001b53c:	f7 d8                	neg    eax
c001b53e:	83 d2 00             	adc    edx,0x0
c001b541:	f7 da                	neg    edx
c001b543:	83 c4 2c             	add    esp,0x2c
c001b546:	5b                   	pop    ebx
c001b547:	5e                   	pop    esi
c001b548:	5f                   	pop    edi
c001b549:	5d                   	pop    ebp
c001b54a:	c3                   	ret    
c001b54b:	90                   	nop
c001b54c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b550:	85 db                	test   ebx,ebx
c001b552:	75 0d                	jne    c001b561 <__moddi3+0x81>
c001b554:	b8 01 00 00 00       	mov    eax,0x1
c001b559:	31 d2                	xor    edx,edx
c001b55b:	f7 f7                	div    edi
c001b55d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b561:	89 f0                	mov    eax,esi
c001b563:	31 d2                	xor    edx,edx
c001b565:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b569:	f7 f7                	div    edi
c001b56b:	89 e8                	mov    eax,ebp
c001b56d:	f7 f7                	div    edi
c001b56f:	89 d6                	mov    esi,edx
c001b571:	eb bd                	jmp    c001b530 <__moddi3+0x50>
c001b573:	90                   	nop
c001b574:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001b578:	39 f7                	cmp    edi,esi
c001b57a:	76 20                	jbe    c001b59c <__moddi3+0xbc>
c001b57c:	89 c8                	mov    eax,ecx
c001b57e:	89 f2                	mov    edx,esi
c001b580:	eb b2                	jmp    c001b534 <__moddi3+0x54>
c001b582:	66 90                	xchg   ax,ax
c001b584:	f7 d9                	neg    ecx
c001b586:	83 d3 00             	adc    ebx,0x0
c001b589:	f7 db                	neg    ebx
c001b58b:	89 de                	mov    esi,ebx
c001b58d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001b595:	e9 6f ff ff ff       	jmp    c001b509 <__moddi3+0x29>
c001b59a:	66 90                	xchg   ax,ax
c001b59c:	0f bd c7             	bsr    eax,edi
c001b59f:	83 f0 1f             	xor    eax,0x1f
c001b5a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b5a6:	75 24                	jne    c001b5cc <__moddi3+0xec>
c001b5a8:	39 f7                	cmp    edi,esi
c001b5aa:	72 06                	jb     c001b5b2 <__moddi3+0xd2>
c001b5ac:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001b5b0:	77 0c                	ja     c001b5be <__moddi3+0xde>
c001b5b2:	89 e9                	mov    ecx,ebp
c001b5b4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001b5b8:	19 fe                	sbb    esi,edi
c001b5ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001b5be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5c2:	89 f2                	mov    edx,esi
c001b5c4:	e9 6b ff ff ff       	jmp    c001b534 <__moddi3+0x54>
c001b5c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5cc:	b8 20 00 00 00       	mov    eax,0x20
c001b5d1:	89 c2                	mov    edx,eax
c001b5d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b5d7:	29 da                	sub    edx,ebx
c001b5d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001b5dd:	88 d9                	mov    cl,bl
c001b5df:	d3 e7                	shl    edi,cl
c001b5e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5e5:	88 d1                	mov    cl,dl
c001b5e7:	d3 e8                	shr    eax,cl
c001b5e9:	09 c7                	or     edi,eax
c001b5eb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001b5ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b5f3:	89 d8                	mov    eax,ebx
c001b5f5:	88 d9                	mov    cl,bl
c001b5f7:	d3 e7                	shl    edi,cl
c001b5f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b5fd:	89 f3                	mov    ebx,esi
c001b5ff:	88 d1                	mov    cl,dl
c001b601:	d3 eb                	shr    ebx,cl
c001b603:	89 c7                	mov    edi,eax
c001b605:	88 c1                	mov    cl,al
c001b607:	d3 e6                	shl    esi,cl
c001b609:	89 e8                	mov    eax,ebp
c001b60b:	88 d1                	mov    cl,dl
c001b60d:	d3 e8                	shr    eax,cl
c001b60f:	09 f0                	or     eax,esi
c001b611:	89 f9                	mov    ecx,edi
c001b613:	d3 e5                	shl    ebp,cl
c001b615:	89 da                	mov    edx,ebx
c001b617:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001b61b:	89 d3                	mov    ebx,edx
c001b61d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b621:	89 c6                	mov    esi,eax
c001b623:	89 d1                	mov    ecx,edx
c001b625:	39 d3                	cmp    ebx,edx
c001b627:	72 27                	jb     c001b650 <__moddi3+0x170>
c001b629:	74 21                	je     c001b64c <__moddi3+0x16c>
c001b62b:	29 f5                	sub    ebp,esi
c001b62d:	19 cb                	sbb    ebx,ecx
c001b62f:	89 de                	mov    esi,ebx
c001b631:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001b635:	d3 e6                	shl    esi,cl
c001b637:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b63b:	89 f9                	mov    ecx,edi
c001b63d:	d3 ed                	shr    ebp,cl
c001b63f:	09 ee                	or     esi,ebp
c001b641:	89 f0                	mov    eax,esi
c001b643:	d3 eb                	shr    ebx,cl
c001b645:	89 da                	mov    edx,ebx
c001b647:	e9 e8 fe ff ff       	jmp    c001b534 <__moddi3+0x54>
c001b64c:	39 c5                	cmp    ebp,eax
c001b64e:	73 db                	jae    c001b62b <__moddi3+0x14b>
c001b650:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001b654:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001b658:	89 d1                	mov    ecx,edx
c001b65a:	89 c6                	mov    esi,eax
c001b65c:	eb cd                	jmp    c001b62b <__moddi3+0x14b>
c001b65e:	66 90                	xchg   ax,ax

c001b660 <__udivdi3>:
c001b660:	55                   	push   ebp
c001b661:	57                   	push   edi
c001b662:	56                   	push   esi
c001b663:	53                   	push   ebx
c001b664:	83 ec 1c             	sub    esp,0x1c
c001b667:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b66b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b66f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001b673:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b677:	85 d2                	test   edx,edx
c001b679:	75 41                	jne    c001b6bc <__udivdi3+0x5c>
c001b67b:	39 f7                	cmp    edi,esi
c001b67d:	76 15                	jbe    c001b694 <__udivdi3+0x34>
c001b67f:	89 e8                	mov    eax,ebp
c001b681:	89 f2                	mov    edx,esi
c001b683:	f7 f7                	div    edi
c001b685:	31 db                	xor    ebx,ebx
c001b687:	89 da                	mov    edx,ebx
c001b689:	83 c4 1c             	add    esp,0x1c
c001b68c:	5b                   	pop    ebx
c001b68d:	5e                   	pop    esi
c001b68e:	5f                   	pop    edi
c001b68f:	5d                   	pop    ebp
c001b690:	c3                   	ret    
c001b691:	8d 76 00             	lea    esi,[esi+0x0]
c001b694:	89 f9                	mov    ecx,edi
c001b696:	85 ff                	test   edi,edi
c001b698:	75 0b                	jne    c001b6a5 <__udivdi3+0x45>
c001b69a:	b8 01 00 00 00       	mov    eax,0x1
c001b69f:	31 d2                	xor    edx,edx
c001b6a1:	f7 f7                	div    edi
c001b6a3:	89 c1                	mov    ecx,eax
c001b6a5:	31 d2                	xor    edx,edx
c001b6a7:	89 f0                	mov    eax,esi
c001b6a9:	f7 f1                	div    ecx
c001b6ab:	89 c3                	mov    ebx,eax
c001b6ad:	89 e8                	mov    eax,ebp
c001b6af:	f7 f1                	div    ecx
c001b6b1:	89 da                	mov    edx,ebx
c001b6b3:	83 c4 1c             	add    esp,0x1c
c001b6b6:	5b                   	pop    ebx
c001b6b7:	5e                   	pop    esi
c001b6b8:	5f                   	pop    edi
c001b6b9:	5d                   	pop    ebp
c001b6ba:	c3                   	ret    
c001b6bb:	90                   	nop
c001b6bc:	39 f2                	cmp    edx,esi
c001b6be:	77 1c                	ja     c001b6dc <__udivdi3+0x7c>
c001b6c0:	0f bd da             	bsr    ebx,edx
c001b6c3:	83 f3 1f             	xor    ebx,0x1f
c001b6c6:	75 24                	jne    c001b6ec <__udivdi3+0x8c>
c001b6c8:	39 f2                	cmp    edx,esi
c001b6ca:	72 08                	jb     c001b6d4 <__udivdi3+0x74>
c001b6cc:	39 ef                	cmp    edi,ebp
c001b6ce:	0f 87 84 00 00 00    	ja     c001b758 <__udivdi3+0xf8>
c001b6d4:	b8 01 00 00 00       	mov    eax,0x1
c001b6d9:	eb ac                	jmp    c001b687 <__udivdi3+0x27>
c001b6db:	90                   	nop
c001b6dc:	31 db                	xor    ebx,ebx
c001b6de:	31 c0                	xor    eax,eax
c001b6e0:	89 da                	mov    edx,ebx
c001b6e2:	83 c4 1c             	add    esp,0x1c
c001b6e5:	5b                   	pop    ebx
c001b6e6:	5e                   	pop    esi
c001b6e7:	5f                   	pop    edi
c001b6e8:	5d                   	pop    ebp
c001b6e9:	c3                   	ret    
c001b6ea:	66 90                	xchg   ax,ax
c001b6ec:	b8 20 00 00 00       	mov    eax,0x20
c001b6f1:	29 d8                	sub    eax,ebx
c001b6f3:	88 d9                	mov    cl,bl
c001b6f5:	d3 e2                	shl    edx,cl
c001b6f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b6fb:	89 fa                	mov    edx,edi
c001b6fd:	88 c1                	mov    cl,al
c001b6ff:	d3 ea                	shr    edx,cl
c001b701:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b705:	09 d1                	or     ecx,edx
c001b707:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b70b:	88 d9                	mov    cl,bl
c001b70d:	d3 e7                	shl    edi,cl
c001b70f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b713:	89 f7                	mov    edi,esi
c001b715:	88 c1                	mov    cl,al
c001b717:	d3 ef                	shr    edi,cl
c001b719:	88 d9                	mov    cl,bl
c001b71b:	d3 e6                	shl    esi,cl
c001b71d:	89 ea                	mov    edx,ebp
c001b71f:	88 c1                	mov    cl,al
c001b721:	d3 ea                	shr    edx,cl
c001b723:	09 d6                	or     esi,edx
c001b725:	89 f0                	mov    eax,esi
c001b727:	89 fa                	mov    edx,edi
c001b729:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001b72d:	89 d7                	mov    edi,edx
c001b72f:	89 c6                	mov    esi,eax
c001b731:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b735:	39 d7                	cmp    edi,edx
c001b737:	72 13                	jb     c001b74c <__udivdi3+0xec>
c001b739:	74 09                	je     c001b744 <__udivdi3+0xe4>
c001b73b:	89 f0                	mov    eax,esi
c001b73d:	31 db                	xor    ebx,ebx
c001b73f:	e9 43 ff ff ff       	jmp    c001b687 <__udivdi3+0x27>
c001b744:	88 d9                	mov    cl,bl
c001b746:	d3 e5                	shl    ebp,cl
c001b748:	39 c5                	cmp    ebp,eax
c001b74a:	73 ef                	jae    c001b73b <__udivdi3+0xdb>
c001b74c:	8d 46 ff             	lea    eax,[esi-0x1]
c001b74f:	31 db                	xor    ebx,ebx
c001b751:	e9 31 ff ff ff       	jmp    c001b687 <__udivdi3+0x27>
c001b756:	66 90                	xchg   ax,ax
c001b758:	31 c0                	xor    eax,eax
c001b75a:	e9 28 ff ff ff       	jmp    c001b687 <__udivdi3+0x27>
c001b75f:	90                   	nop

c001b760 <__umoddi3>:
c001b760:	55                   	push   ebp
c001b761:	57                   	push   edi
c001b762:	56                   	push   esi
c001b763:	53                   	push   ebx
c001b764:	83 ec 1c             	sub    esp,0x1c
c001b767:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b76b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b76f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001b773:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b777:	89 da                	mov    edx,ebx
c001b779:	85 c0                	test   eax,eax
c001b77b:	75 37                	jne    c001b7b4 <__umoddi3+0x54>
c001b77d:	39 df                	cmp    edi,ebx
c001b77f:	76 13                	jbe    c001b794 <__umoddi3+0x34>
c001b781:	89 f0                	mov    eax,esi
c001b783:	f7 f7                	div    edi
c001b785:	89 d0                	mov    eax,edx
c001b787:	31 d2                	xor    edx,edx
c001b789:	83 c4 1c             	add    esp,0x1c
c001b78c:	5b                   	pop    ebx
c001b78d:	5e                   	pop    esi
c001b78e:	5f                   	pop    edi
c001b78f:	5d                   	pop    ebp
c001b790:	c3                   	ret    
c001b791:	8d 76 00             	lea    esi,[esi+0x0]
c001b794:	89 fd                	mov    ebp,edi
c001b796:	85 ff                	test   edi,edi
c001b798:	75 0b                	jne    c001b7a5 <__umoddi3+0x45>
c001b79a:	b8 01 00 00 00       	mov    eax,0x1
c001b79f:	31 d2                	xor    edx,edx
c001b7a1:	f7 f7                	div    edi
c001b7a3:	89 c5                	mov    ebp,eax
c001b7a5:	89 d8                	mov    eax,ebx
c001b7a7:	31 d2                	xor    edx,edx
c001b7a9:	f7 f5                	div    ebp
c001b7ab:	89 f0                	mov    eax,esi
c001b7ad:	f7 f5                	div    ebp
c001b7af:	89 d0                	mov    eax,edx
c001b7b1:	eb d4                	jmp    c001b787 <__umoddi3+0x27>
c001b7b3:	90                   	nop
c001b7b4:	89 f1                	mov    ecx,esi
c001b7b6:	39 d8                	cmp    eax,ebx
c001b7b8:	76 0a                	jbe    c001b7c4 <__umoddi3+0x64>
c001b7ba:	89 f0                	mov    eax,esi
c001b7bc:	83 c4 1c             	add    esp,0x1c
c001b7bf:	5b                   	pop    ebx
c001b7c0:	5e                   	pop    esi
c001b7c1:	5f                   	pop    edi
c001b7c2:	5d                   	pop    ebp
c001b7c3:	c3                   	ret    
c001b7c4:	0f bd e8             	bsr    ebp,eax
c001b7c7:	83 f5 1f             	xor    ebp,0x1f
c001b7ca:	75 1c                	jne    c001b7e8 <__umoddi3+0x88>
c001b7cc:	39 d8                	cmp    eax,ebx
c001b7ce:	72 04                	jb     c001b7d4 <__umoddi3+0x74>
c001b7d0:	39 f7                	cmp    edi,esi
c001b7d2:	77 08                	ja     c001b7dc <__umoddi3+0x7c>
c001b7d4:	89 da                	mov    edx,ebx
c001b7d6:	29 fe                	sub    esi,edi
c001b7d8:	19 c2                	sbb    edx,eax
c001b7da:	89 f1                	mov    ecx,esi
c001b7dc:	89 c8                	mov    eax,ecx
c001b7de:	83 c4 1c             	add    esp,0x1c
c001b7e1:	5b                   	pop    ebx
c001b7e2:	5e                   	pop    esi
c001b7e3:	5f                   	pop    edi
c001b7e4:	5d                   	pop    ebp
c001b7e5:	c3                   	ret    
c001b7e6:	66 90                	xchg   ax,ax
c001b7e8:	ba 20 00 00 00       	mov    edx,0x20
c001b7ed:	29 ea                	sub    edx,ebp
c001b7ef:	89 e9                	mov    ecx,ebp
c001b7f1:	d3 e0                	shl    eax,cl
c001b7f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b7f7:	89 f8                	mov    eax,edi
c001b7f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b7fd:	88 d1                	mov    cl,dl
c001b7ff:	d3 e8                	shr    eax,cl
c001b801:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b805:	09 c1                	or     ecx,eax
c001b807:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b80b:	89 e9                	mov    ecx,ebp
c001b80d:	d3 e7                	shl    edi,cl
c001b80f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b813:	89 d8                	mov    eax,ebx
c001b815:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b819:	88 d1                	mov    cl,dl
c001b81b:	d3 e8                	shr    eax,cl
c001b81d:	89 c7                	mov    edi,eax
c001b81f:	89 e9                	mov    ecx,ebp
c001b821:	d3 e3                	shl    ebx,cl
c001b823:	89 f0                	mov    eax,esi
c001b825:	88 d1                	mov    cl,dl
c001b827:	d3 e8                	shr    eax,cl
c001b829:	09 d8                	or     eax,ebx
c001b82b:	89 e9                	mov    ecx,ebp
c001b82d:	d3 e6                	shl    esi,cl
c001b82f:	89 f3                	mov    ebx,esi
c001b831:	89 fa                	mov    edx,edi
c001b833:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001b837:	89 d1                	mov    ecx,edx
c001b839:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b83d:	89 c6                	mov    esi,eax
c001b83f:	89 d7                	mov    edi,edx
c001b841:	39 d1                	cmp    ecx,edx
c001b843:	72 27                	jb     c001b86c <__umoddi3+0x10c>
c001b845:	74 21                	je     c001b868 <__umoddi3+0x108>
c001b847:	89 ca                	mov    edx,ecx
c001b849:	29 f3                	sub    ebx,esi
c001b84b:	19 fa                	sbb    edx,edi
c001b84d:	89 d0                	mov    eax,edx
c001b84f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001b853:	d3 e0                	shl    eax,cl
c001b855:	89 e9                	mov    ecx,ebp
c001b857:	d3 eb                	shr    ebx,cl
c001b859:	09 d8                	or     eax,ebx
c001b85b:	d3 ea                	shr    edx,cl
c001b85d:	83 c4 1c             	add    esp,0x1c
c001b860:	5b                   	pop    ebx
c001b861:	5e                   	pop    esi
c001b862:	5f                   	pop    edi
c001b863:	5d                   	pop    ebp
c001b864:	c3                   	ret    
c001b865:	8d 76 00             	lea    esi,[esi+0x0]
c001b868:	39 c3                	cmp    ebx,eax
c001b86a:	73 db                	jae    c001b847 <__umoddi3+0xe7>
c001b86c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001b870:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001b874:	89 d7                	mov    edi,edx
c001b876:	89 c6                	mov    esi,eax
c001b878:	eb cd                	jmp    c001b847 <__umoddi3+0xe7>

Disassembly of section .init:

c001b87a <_init>:
c001b87a:	55                   	push   ebp
c001b87b:	89 e5                	mov    ebp,esp
c001b87d:	e8 96 48 fe ff       	call   c0000118 <frame_dummy>
c001b882:	e8 e5 fa ff ff       	call   c001b36c <__do_global_ctors_aux>
c001b887:	5d                   	pop    ebp
c001b888:	c3                   	ret    

Disassembly of section .fini:

c001b889 <_fini>:
c001b889:	55                   	push   ebp
c001b88a:	89 e5                	mov    ebp,esp
c001b88c:	e8 17 48 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001b891:	5d                   	pop    ebp
c001b892:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001b894 <Computer::~Computer()>:
c001b894:	83 ec 0c             	sub    esp,0xc
c001b897:	ba 90 cb 01 c0       	mov    edx,0xc001cb90
c001b89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a0:	89 10                	mov    DWORD PTR [eax],edx
c001b8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a6:	83 ec 0c             	sub    esp,0xc
c001b8a9:	50                   	push   eax
c001b8aa:	e8 83 f3 fe ff       	call   c000ac32 <Device::~Device()>
c001b8af:	83 c4 10             	add    esp,0x10
c001b8b2:	90                   	nop
c001b8b3:	83 c4 0c             	add    esp,0xc
c001b8b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001b8b8 <Computer::~Computer()>:
c001b8b8:	83 ec 0c             	sub    esp,0xc
c001b8bb:	83 ec 0c             	sub    esp,0xc
c001b8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8c2:	e8 cd ff ff ff       	call   c001b894 <Computer::~Computer()>
c001b8c7:	83 c4 10             	add    esp,0x10
c001b8ca:	83 ec 08             	sub    esp,0x8
c001b8cd:	68 70 01 00 00       	push   0x170
c001b8d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8d6:	e8 1f df fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001b8db:	83 c4 10             	add    esp,0x10
c001b8de:	83 c4 0c             	add    esp,0xc
c001b8e1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001b8e2 <idleCommon()>:
c001b8e2:	83 ec 0c             	sub    esp,0xc
c001b8e5:	fa                   	cli    
c001b8e6:	ff 05 e8 28 02 c0    	inc    DWORD PTR ds:0xc00228e8
c001b8ec:	e8 c3 6f ff ff       	call   c00128b4 <schedule()>
c001b8f1:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c001b8f6:	48                   	dec    eax
c001b8f7:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c001b8fc:	75 01                	jne    c001b8ff <idleCommon()+0x1d>
c001b8fe:	fb                   	sti    
c001b8ff:	83 c4 0c             	add    esp,0xc
c001b902:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001b904 <LinkedList<UnixFile>::~LinkedList()>:
c001b904:	90                   	nop
c001b905:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001b906 <LinkedList<UnixFile>::LinkedList()>:
c001b906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b90a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b914:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b91b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b91f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b92a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b934:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b93b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b93f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b946:	90                   	nop
c001b947:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001b948 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001b948:	83 ec 0c             	sub    esp,0xc
c001b94b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b950:	75 10                	jne    c001b962 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001b952:	83 ec 0c             	sub    esp,0xc
c001b955:	68 e4 cd 01 c0       	push   0xc001cde4
c001b95a:	e8 e0 3a ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001b95f:	83 c4 10             	add    esp,0x10
c001b962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b966:	8b 00                	mov    eax,DWORD PTR [eax]
c001b968:	85 c0                	test   eax,eax
c001b96a:	74 34                	je     c001b9a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001b96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b970:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b973:	85 c0                	test   eax,eax
c001b975:	74 29                	je     c001b9a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001b977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b97e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b982:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b989:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b98d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b994:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b997:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b99e:	eb 65                	jmp    c001ba05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001b9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9a6:	85 c0                	test   eax,eax
c001b9a8:	75 4b                	jne    c001b9f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001b9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b9b1:	85 c0                	test   eax,eax
c001b9b3:	75 40                	jne    c001b9f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001b9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9bd:	89 10                	mov    DWORD PTR [eax],edx
c001b9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b9d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b9df:	85 c0                	test   eax,eax
c001b9e1:	74 22                	je     c001ba05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001b9e3:	83 ec 0c             	sub    esp,0xc
c001b9e6:	68 06 ce 01 c0       	push   0xc001ce06
c001b9eb:	e8 4f 3a ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001b9f0:	83 c4 10             	add    esp,0x10
c001b9f3:	eb 10                	jmp    c001ba05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001b9f5:	83 ec 0c             	sub    esp,0xc
c001b9f8:	68 10 ce 01 c0       	push   0xc001ce10
c001b9fd:	e8 3d 3a ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001ba02:	83 c4 10             	add    esp,0x10
c001ba05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ba0c:	8d 50 01             	lea    edx,[eax+0x1]
c001ba0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba13:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ba16:	90                   	nop
c001ba17:	83 c4 0c             	add    esp,0xc
c001ba1a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ba1c <LinkedList<UnixFile>::getFirstElement()>:
c001ba1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ba24 <LinkedList<UnixFile>::removeFirst()>:
c001ba24:	83 ec 0c             	sub    esp,0xc
c001ba27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba2d:	85 c0                	test   eax,eax
c001ba2f:	75 12                	jne    c001ba43 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ba31:	83 ec 0c             	sub    esp,0xc
c001ba34:	68 1c ce 01 c0       	push   0xc001ce1c
c001ba39:	e8 01 3a ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001ba3e:	83 c4 10             	add    esp,0x10
c001ba41:	eb 7e                	jmp    c001bac1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ba43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ba4d:	85 c0                	test   eax,eax
c001ba4f:	74 10                	je     c001ba61 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ba51:	83 ec 0c             	sub    esp,0xc
c001ba54:	68 67 ce 01 c0       	push   0xc001ce67
c001ba59:	e8 e1 39 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001ba5e:	83 c4 10             	add    esp,0x10
c001ba61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba65:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ba6a:	85 c0                	test   eax,eax
c001ba6c:	75 33                	jne    c001baa1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ba6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ba8a:	83 f8 01             	cmp    eax,0x1
c001ba8d:	74 21                	je     c001bab0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ba8f:	83 ec 0c             	sub    esp,0xc
c001ba92:	68 40 ce 01 c0       	push   0xc001ce40
c001ba97:	e8 a3 39 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001ba9c:	83 c4 10             	add    esp,0x10
c001ba9f:	eb 0f                	jmp    c001bab0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001baa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baa5:	8b 00                	mov    eax,DWORD PTR [eax]
c001baa7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001baaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baae:	89 10                	mov    DWORD PTR [eax],edx
c001bab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bab7:	8d 50 ff             	lea    edx,[eax-0x1]
c001baba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001babe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bac1:	83 c4 0c             	add    esp,0xc
c001bac4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001bac6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001bac6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001baca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bacd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001bace <DriverlessDevice::~DriverlessDevice()>:
c001bace:	ba bc d4 01 c0       	mov    edx,0xc001d4bc
c001bad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bad7:	89 10                	mov    DWORD PTR [eax],edx
c001bad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001badd:	50                   	push   eax
c001bade:	e8 4f f1 fe ff       	call   c000ac32 <Device::~Device()>
c001bae3:	83 c4 04             	add    esp,0x4
c001bae6:	90                   	nop
c001bae7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001bae8 <DriverlessDevice::~DriverlessDevice()>:
c001bae8:	83 ec 0c             	sub    esp,0xc
c001baeb:	83 ec 0c             	sub    esp,0xc
c001baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001baf2:	e8 d7 ff ff ff       	call   c001bace <DriverlessDevice::~DriverlessDevice()>
c001baf7:	83 c4 10             	add    esp,0x10
c001bafa:	83 ec 08             	sub    esp,0x8
c001bafd:	68 58 01 00 00       	push   0x158
c001bb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb06:	e8 ef dc fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001bb0b:	83 c4 10             	add    esp,0x10
c001bb0e:	83 c4 0c             	add    esp,0xc
c001bb11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001bb12 <LinkedList<Device>::addElement(Device*)>:
c001bb12:	83 ec 0c             	sub    esp,0xc
c001bb15:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bb1a:	75 10                	jne    c001bb2c <LinkedList<Device>::addElement(Device*)+0x1a>
c001bb1c:	83 ec 0c             	sub    esp,0xc
c001bb1f:	68 e4 cd 01 c0       	push   0xc001cde4
c001bb24:	e8 16 39 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bb29:	83 c4 10             	add    esp,0x10
c001bb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb30:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb32:	85 c0                	test   eax,eax
c001bb34:	74 3a                	je     c001bb70 <LinkedList<Device>::addElement(Device*)+0x5e>
c001bb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb3d:	85 c0                	test   eax,eax
c001bb3f:	74 2f                	je     c001bb70 <LinkedList<Device>::addElement(Device*)+0x5e>
c001bb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb4c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001bb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb5a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb64:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001bb6e:	eb 68                	jmp    c001bbd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb74:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb76:	85 c0                	test   eax,eax
c001bb78:	75 4e                	jne    c001bbc8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001bb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb81:	85 c0                	test   eax,eax
c001bb83:	75 43                	jne    c001bbc8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001bb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb8d:	89 10                	mov    DWORD PTR [eax],edx
c001bb8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bba1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001bbab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bbb2:	85 c0                	test   eax,eax
c001bbb4:	74 22                	je     c001bbd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bbb6:	83 ec 0c             	sub    esp,0xc
c001bbb9:	68 06 ce 01 c0       	push   0xc001ce06
c001bbbe:	e8 7c 38 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bbc3:	83 c4 10             	add    esp,0x10
c001bbc6:	eb 10                	jmp    c001bbd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bbc8:	83 ec 0c             	sub    esp,0xc
c001bbcb:	68 10 ce 01 c0       	push   0xc001ce10
c001bbd0:	e8 6a 38 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bbd5:	83 c4 10             	add    esp,0x10
c001bbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbdc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bbdf:	8d 50 01             	lea    edx,[eax+0x1]
c001bbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bbe9:	90                   	nop
c001bbea:	83 c4 0c             	add    esp,0xc
c001bbed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001bbee <LinkedList<Device>::LinkedList()>:
c001bbee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bc0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bc2e:	90                   	nop
c001bc2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001bc30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001bc30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc34:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc36:	85 c0                	test   eax,eax
c001bc38:	75 0e                	jne    c001bc48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001bc3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc41:	85 c0                	test   eax,eax
c001bc43:	75 03                	jne    c001bc48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001bc45:	b0 01                	mov    al,0x1
c001bc47:	c3                   	ret    
c001bc48:	b0 00                	mov    al,0x0
c001bc4a:	90                   	nop
c001bc4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001bc4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc50:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001bc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001bc54:	83 ec 0c             	sub    esp,0xc
c001bc57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc5d:	85 c0                	test   eax,eax
c001bc5f:	75 17                	jne    c001bc78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001bc61:	83 ec 0c             	sub    esp,0xc
c001bc64:	68 1c ce 01 c0       	push   0xc001ce1c
c001bc69:	e8 d1 37 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bc6e:	83 c4 10             	add    esp,0x10
c001bc71:	e9 92 00 00 00       	jmp    c001bd08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001bc76:	66 90                	xchg   ax,ax
c001bc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc7f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc82:	85 c0                	test   eax,eax
c001bc84:	0f 95 c0             	setne  al
c001bc87:	84 c0                	test   al,al
c001bc89:	74 11                	je     c001bc9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001bc8b:	83 ec 0c             	sub    esp,0xc
c001bc8e:	68 67 ce 01 c0       	push   0xc001ce67
c001bc93:	e8 a7 37 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bc98:	83 c4 10             	add    esp,0x10
c001bc9b:	90                   	nop
c001bc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bca2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bca5:	85 c0                	test   eax,eax
c001bca7:	0f 94 c0             	sete   al
c001bcaa:	84 c0                	test   al,al
c001bcac:	74 36                	je     c001bce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001bcae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bcb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bcc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bcca:	83 f8 01             	cmp    eax,0x1
c001bccd:	74 25                	je     c001bcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001bccf:	83 ec 0c             	sub    esp,0xc
c001bcd2:	68 40 ce 01 c0       	push   0xc001ce40
c001bcd7:	e8 63 37 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bcdc:	83 c4 10             	add    esp,0x10
c001bcdf:	eb 13                	jmp    c001bcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001bce1:	8d 76 00             	lea    esi,[esi+0x0]
c001bce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce8:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf1:	89 10                	mov    DWORD PTR [eax],edx
c001bcf3:	90                   	nop
c001bcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bcfb:	8d 50 ff             	lea    edx,[eax-0x1]
c001bcfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bd05:	8d 76 00             	lea    esi,[esi+0x0]
c001bd08:	83 c4 0c             	add    esp,0xc
c001bd0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001bd0c:	83 ec 0c             	sub    esp,0xc
c001bd0f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bd14:	75 12                	jne    c001bd28 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001bd16:	83 ec 0c             	sub    esp,0xc
c001bd19:	68 e4 cd 01 c0       	push   0xc001cde4
c001bd1e:	e8 1c 37 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bd23:	83 c4 10             	add    esp,0x10
c001bd26:	66 90                	xchg   ax,ax
c001bd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd2e:	85 c0                	test   eax,eax
c001bd30:	74 36                	je     c001bd68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001bd32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd39:	85 c0                	test   eax,eax
c001bd3b:	74 2b                	je     c001bd68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001bd3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd48:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001bd4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd5d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bd64:	eb 6a                	jmp    c001bdd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bd66:	66 90                	xchg   ax,ax
c001bd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd6e:	85 c0                	test   eax,eax
c001bd70:	75 4e                	jne    c001bdc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001bd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd79:	85 c0                	test   eax,eax
c001bd7b:	75 43                	jne    c001bdc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001bd7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd85:	89 10                	mov    DWORD PTR [eax],edx
c001bd87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bd92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd99:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bda4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bda7:	85 c0                	test   eax,eax
c001bda9:	74 25                	je     c001bdd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bdab:	83 ec 0c             	sub    esp,0xc
c001bdae:	68 06 ce 01 c0       	push   0xc001ce06
c001bdb3:	e8 87 36 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bdb8:	83 c4 10             	add    esp,0x10
c001bdbb:	eb 13                	jmp    c001bdd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bdbd:	8d 76 00             	lea    esi,[esi+0x0]
c001bdc0:	83 ec 0c             	sub    esp,0xc
c001bdc3:	68 10 ce 01 c0       	push   0xc001ce10
c001bdc8:	e8 72 36 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bdcd:	83 c4 10             	add    esp,0x10
c001bdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bdd7:	8d 50 01             	lea    edx,[eax+0x1]
c001bdda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdde:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bde1:	90                   	nop
c001bde2:	83 c4 0c             	add    esp,0xc
c001bde5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001bde8 <ACPI::~ACPI()>:
c001bde8:	83 ec 0c             	sub    esp,0xc
c001bdeb:	ba 24 da 01 c0       	mov    edx,0xc001da24
c001bdf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdf4:	89 10                	mov    DWORD PTR [eax],edx
c001bdf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdfa:	83 ec 0c             	sub    esp,0xc
c001bdfd:	50                   	push   eax
c001bdfe:	e8 2f ee fe ff       	call   c000ac32 <Device::~Device()>
c001be03:	83 c4 10             	add    esp,0x10
c001be06:	90                   	nop
c001be07:	83 c4 0c             	add    esp,0xc
c001be0a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001be0c <ACPI::~ACPI()>:
c001be0c:	83 ec 0c             	sub    esp,0xc
c001be0f:	83 ec 0c             	sub    esp,0xc
c001be12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be16:	e8 cd ff ff ff       	call   c001bde8 <ACPI::~ACPI()>
c001be1b:	83 c4 10             	add    esp,0x10
c001be1e:	83 ec 08             	sub    esp,0x8
c001be21:	68 64 12 00 00       	push   0x1264
c001be26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be2a:	e8 cb d9 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001be2f:	83 c4 10             	add    esp,0x10
c001be32:	83 c4 0c             	add    esp,0xc
c001be35:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001be38 <LinkedList<Device>::~LinkedList()>:
c001be38:	90                   	nop
c001be39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001be3c <LinkedList<Device>::isEmpty()>:
c001be3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be40:	8b 00                	mov    eax,DWORD PTR [eax]
c001be42:	85 c0                	test   eax,eax
c001be44:	75 0e                	jne    c001be54 <LinkedList<Device>::isEmpty()+0x18>
c001be46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001be4d:	85 c0                	test   eax,eax
c001be4f:	75 03                	jne    c001be54 <LinkedList<Device>::isEmpty()+0x18>
c001be51:	b0 01                	mov    al,0x1
c001be53:	c3                   	ret    
c001be54:	b0 00                	mov    al,0x0
c001be56:	90                   	nop
c001be57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001be58 <LinkedList<Device>::getFirstElement()>:
c001be58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001be5e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001be60 <LinkedList<Device>::removeFirst()>:
c001be60:	83 ec 0c             	sub    esp,0xc
c001be63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be67:	8b 00                	mov    eax,DWORD PTR [eax]
c001be69:	85 c0                	test   eax,eax
c001be6b:	75 17                	jne    c001be84 <LinkedList<Device>::removeFirst()+0x24>
c001be6d:	83 ec 0c             	sub    esp,0xc
c001be70:	68 1c ce 01 c0       	push   0xc001ce1c
c001be75:	e8 c5 35 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001be7a:	83 c4 10             	add    esp,0x10
c001be7d:	e9 92 00 00 00       	jmp    c001bf14 <LinkedList<Device>::removeFirst()+0xb4>
c001be82:	66 90                	xchg   ax,ax
c001be84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001be8b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001be91:	85 c0                	test   eax,eax
c001be93:	74 13                	je     c001bea8 <LinkedList<Device>::removeFirst()+0x48>
c001be95:	83 ec 0c             	sub    esp,0xc
c001be98:	68 67 ce 01 c0       	push   0xc001ce67
c001be9d:	e8 9d 35 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bea2:	83 c4 10             	add    esp,0x10
c001bea5:	8d 76 00             	lea    esi,[esi+0x0]
c001bea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beac:	8b 00                	mov    eax,DWORD PTR [eax]
c001beae:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001beb4:	85 c0                	test   eax,eax
c001beb6:	75 34                	jne    c001beec <LinkedList<Device>::removeFirst()+0x8c>
c001beb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bebc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001becd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bed1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bed4:	83 f8 01             	cmp    eax,0x1
c001bed7:	74 27                	je     c001bf00 <LinkedList<Device>::removeFirst()+0xa0>
c001bed9:	83 ec 0c             	sub    esp,0xc
c001bedc:	68 40 ce 01 c0       	push   0xc001ce40
c001bee1:	e8 59 35 ff ff       	call   c000f43f <Krnl::panic(char const*)>
c001bee6:	83 c4 10             	add    esp,0x10
c001bee9:	eb 15                	jmp    c001bf00 <LinkedList<Device>::removeFirst()+0xa0>
c001beeb:	90                   	nop
c001beec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bef2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001bef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001befc:	89 10                	mov    DWORD PTR [eax],edx
c001befe:	66 90                	xchg   ax,ax
c001bf00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf07:	8d 50 ff             	lea    edx,[eax-0x1]
c001bf0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf11:	8d 76 00             	lea    esi,[esi+0x0]
c001bf14:	83 c4 0c             	add    esp,0xc
c001bf17:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001bf18 <CPU::~CPU()>:
c001bf18:	83 ec 0c             	sub    esp,0xc
c001bf1b:	ba c0 db 01 c0       	mov    edx,0xc001dbc0
c001bf20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf24:	89 10                	mov    DWORD PTR [eax],edx
c001bf26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf2a:	83 ec 0c             	sub    esp,0xc
c001bf2d:	50                   	push   eax
c001bf2e:	e8 ff ec fe ff       	call   c000ac32 <Device::~Device()>
c001bf33:	83 c4 10             	add    esp,0x10
c001bf36:	90                   	nop
c001bf37:	83 c4 0c             	add    esp,0xc
c001bf3a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001bf3c <CPU::~CPU()>:
c001bf3c:	83 ec 0c             	sub    esp,0xc
c001bf3f:	83 ec 0c             	sub    esp,0xc
c001bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf46:	e8 cd ff ff ff       	call   c001bf18 <CPU::~CPU()>
c001bf4b:	83 c4 10             	add    esp,0x10
c001bf4e:	83 ec 08             	sub    esp,0x8
c001bf51:	68 94 11 00 00       	push   0x1194
c001bf56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf5a:	e8 9b d8 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001bf5f:	83 c4 10             	add    esp,0x10
c001bf62:	83 c4 0c             	add    esp,0xc
c001bf65:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001bf68 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001bf68:	90                   	nop
c001bf69:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001bf6c <ThreadControlBlock::ThreadControlBlock()>:
c001bf6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf70:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bf77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf7b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001bf82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf86:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001bf8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf91:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001bf98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf9c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001bfa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfa7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001bfab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfaf:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001bfb3:	90                   	nop
c001bfb4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001bfb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001bfb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bfc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bfcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfd1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bfd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bfe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfe6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bfed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bff1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bff8:	90                   	nop
c001bff9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001bffc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001bffc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c000:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c003:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c004 <PCI::~PCI()>:
c001c004:	83 ec 0c             	sub    esp,0xc
c001c007:	ba 40 e7 01 c0       	mov    edx,0xc001e740
c001c00c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c010:	89 10                	mov    DWORD PTR [eax],edx
c001c012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c016:	83 ec 0c             	sub    esp,0xc
c001c019:	50                   	push   eax
c001c01a:	e8 9d e6 fe ff       	call   c000a6bc <Bus::~Bus()>
c001c01f:	83 c4 10             	add    esp,0x10
c001c022:	90                   	nop
c001c023:	83 c4 0c             	add    esp,0xc
c001c026:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c028 <PCI::~PCI()>:
c001c028:	83 ec 0c             	sub    esp,0xc
c001c02b:	83 ec 0c             	sub    esp,0xc
c001c02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c032:	e8 cd ff ff ff       	call   c001c004 <PCI::~PCI()>
c001c037:	83 c4 10             	add    esp,0x10
c001c03a:	83 ec 08             	sub    esp,0x8
c001c03d:	68 5c 01 00 00       	push   0x15c
c001c042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c046:	e8 af d7 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c04b:	83 c4 10             	add    esp,0x10
c001c04e:	83 c4 0c             	add    esp,0xc
c001c051:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c052 <IDE::~IDE()>:
c001c052:	83 ec 0c             	sub    esp,0xc
c001c055:	ba f4 e7 01 c0       	mov    edx,0xc001e7f4
c001c05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c05e:	89 10                	mov    DWORD PTR [eax],edx
c001c060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c064:	83 ec 0c             	sub    esp,0xc
c001c067:	50                   	push   eax
c001c068:	e8 3f f0 fe ff       	call   c000b0ac <HardDiskController::~HardDiskController()>
c001c06d:	83 c4 10             	add    esp,0x10
c001c070:	90                   	nop
c001c071:	83 c4 0c             	add    esp,0xc
c001c074:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c076 <IDE::~IDE()>:
c001c076:	83 ec 0c             	sub    esp,0xc
c001c079:	83 ec 0c             	sub    esp,0xc
c001c07c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c080:	e8 cd ff ff ff       	call   c001c052 <IDE::~IDE()>
c001c085:	83 c4 10             	add    esp,0x10
c001c088:	83 ec 08             	sub    esp,0x8
c001c08b:	68 70 02 00 00       	push   0x270
c001c090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c094:	e8 61 d7 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c099:	83 c4 10             	add    esp,0x10
c001c09c:	83 c4 0c             	add    esp,0xc
c001c09f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c0a0 <SATABus::~SATABus()>:
c001c0a0:	83 ec 0c             	sub    esp,0xc
c001c0a3:	ba 44 e8 01 c0       	mov    edx,0xc001e844
c001c0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ac:	89 10                	mov    DWORD PTR [eax],edx
c001c0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0b2:	83 ec 0c             	sub    esp,0xc
c001c0b5:	50                   	push   eax
c001c0b6:	e8 f1 ef fe ff       	call   c000b0ac <HardDiskController::~HardDiskController()>
c001c0bb:	83 c4 10             	add    esp,0x10
c001c0be:	90                   	nop
c001c0bf:	83 c4 0c             	add    esp,0xc
c001c0c2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c0c4 <SATABus::~SATABus()>:
c001c0c4:	83 ec 0c             	sub    esp,0xc
c001c0c7:	83 ec 0c             	sub    esp,0xc
c001c0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0ce:	e8 cd ff ff ff       	call   c001c0a0 <SATABus::~SATABus()>
c001c0d3:	83 c4 10             	add    esp,0x10
c001c0d6:	83 ec 08             	sub    esp,0x8
c001c0d9:	68 64 01 00 00       	push   0x164
c001c0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0e2:	e8 13 d7 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c0e7:	83 c4 10             	add    esp,0x10
c001c0ea:	83 c4 0c             	add    esp,0xc
c001c0ed:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c0ee <ATA::~ATA()>:
c001c0ee:	83 ec 0c             	sub    esp,0xc
c001c0f1:	ba 84 e8 01 c0       	mov    edx,0xc001e884
c001c0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0fa:	89 10                	mov    DWORD PTR [eax],edx
c001c0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c100:	83 ec 0c             	sub    esp,0xc
c001c103:	50                   	push   eax
c001c104:	e8 85 f0 fe ff       	call   c000b18e <PhysicalDisk::~PhysicalDisk()>
c001c109:	83 c4 10             	add    esp,0x10
c001c10c:	90                   	nop
c001c10d:	83 c4 0c             	add    esp,0xc
c001c110:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c112 <ATA::~ATA()>:
c001c112:	83 ec 0c             	sub    esp,0xc
c001c115:	83 ec 0c             	sub    esp,0xc
c001c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c11c:	e8 cd ff ff ff       	call   c001c0ee <ATA::~ATA()>
c001c121:	83 c4 10             	add    esp,0x10
c001c124:	83 ec 08             	sub    esp,0x8
c001c127:	68 7c 01 00 00       	push   0x17c
c001c12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c130:	e8 c5 d6 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c135:	83 c4 10             	add    esp,0x10
c001c138:	83 c4 0c             	add    esp,0xc
c001c13b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c13c <ATAPI::~ATAPI()>:
c001c13c:	83 ec 0c             	sub    esp,0xc
c001c13f:	ba cc e8 01 c0       	mov    edx,0xc001e8cc
c001c144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c148:	89 10                	mov    DWORD PTR [eax],edx
c001c14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c14e:	83 ec 0c             	sub    esp,0xc
c001c151:	50                   	push   eax
c001c152:	e8 37 f0 fe ff       	call   c000b18e <PhysicalDisk::~PhysicalDisk()>
c001c157:	83 c4 10             	add    esp,0x10
c001c15a:	90                   	nop
c001c15b:	83 c4 0c             	add    esp,0xc
c001c15e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c160 <ATAPI::~ATAPI()>:
c001c160:	83 ec 0c             	sub    esp,0xc
c001c163:	83 ec 0c             	sub    esp,0xc
c001c166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c16a:	e8 cd ff ff ff       	call   c001c13c <ATAPI::~ATAPI()>
c001c16f:	83 c4 10             	add    esp,0x10
c001c172:	83 ec 08             	sub    esp,0x8
c001c175:	68 84 01 00 00       	push   0x184
c001c17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c17e:	e8 77 d6 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c183:	83 c4 10             	add    esp,0x10
c001c186:	83 c4 0c             	add    esp,0xc
c001c189:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c18a <SATA::~SATA()>:
c001c18a:	83 ec 0c             	sub    esp,0xc
c001c18d:	ba 80 e9 01 c0       	mov    edx,0xc001e980
c001c192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c196:	89 10                	mov    DWORD PTR [eax],edx
c001c198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c19c:	83 ec 0c             	sub    esp,0xc
c001c19f:	50                   	push   eax
c001c1a0:	e8 e9 ef fe ff       	call   c000b18e <PhysicalDisk::~PhysicalDisk()>
c001c1a5:	83 c4 10             	add    esp,0x10
c001c1a8:	90                   	nop
c001c1a9:	83 c4 0c             	add    esp,0xc
c001c1ac:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c1ae <SATA::~SATA()>:
c001c1ae:	83 ec 0c             	sub    esp,0xc
c001c1b1:	83 ec 0c             	sub    esp,0xc
c001c1b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1b8:	e8 cd ff ff ff       	call   c001c18a <SATA::~SATA()>
c001c1bd:	83 c4 10             	add    esp,0x10
c001c1c0:	83 ec 08             	sub    esp,0x8
c001c1c3:	68 7c 01 00 00       	push   0x17c
c001c1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1cc:	e8 29 d6 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c1d1:	83 c4 10             	add    esp,0x10
c001c1d4:	83 c4 0c             	add    esp,0xc
c001c1d7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c1d8 <SATAPI::~SATAPI()>:
c001c1d8:	83 ec 0c             	sub    esp,0xc
c001c1db:	ba ec ea 01 c0       	mov    edx,0xc001eaec
c001c1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e4:	89 10                	mov    DWORD PTR [eax],edx
c001c1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ea:	83 ec 0c             	sub    esp,0xc
c001c1ed:	50                   	push   eax
c001c1ee:	e8 9b ef fe ff       	call   c000b18e <PhysicalDisk::~PhysicalDisk()>
c001c1f3:	83 c4 10             	add    esp,0x10
c001c1f6:	90                   	nop
c001c1f7:	83 c4 0c             	add    esp,0xc
c001c1fa:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c1fc <SATAPI::~SATAPI()>:
c001c1fc:	83 ec 0c             	sub    esp,0xc
c001c1ff:	83 ec 0c             	sub    esp,0xc
c001c202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c206:	e8 cd ff ff ff       	call   c001c1d8 <SATAPI::~SATAPI()>
c001c20b:	83 c4 10             	add    esp,0x10
c001c20e:	83 ec 08             	sub    esp,0x8
c001c211:	68 84 01 00 00       	push   0x184
c001c216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c21a:	e8 db d5 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c21f:	83 c4 10             	add    esp,0x10
c001c222:	83 c4 0c             	add    esp,0xc
c001c225:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c226 <IOAPIC::~IOAPIC()>:
c001c226:	83 ec 0c             	sub    esp,0xc
c001c229:	ba 2c eb 01 c0       	mov    edx,0xc001eb2c
c001c22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c232:	89 10                	mov    DWORD PTR [eax],edx
c001c234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c238:	83 ec 0c             	sub    esp,0xc
c001c23b:	50                   	push   eax
c001c23c:	e8 f1 e9 fe ff       	call   c000ac32 <Device::~Device()>
c001c241:	83 c4 10             	add    esp,0x10
c001c244:	90                   	nop
c001c245:	83 c4 0c             	add    esp,0xc
c001c248:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c24a <IOAPIC::~IOAPIC()>:
c001c24a:	83 ec 0c             	sub    esp,0xc
c001c24d:	83 ec 0c             	sub    esp,0xc
c001c250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c254:	e8 cd ff ff ff       	call   c001c226 <IOAPIC::~IOAPIC()>
c001c259:	83 c4 10             	add    esp,0x10
c001c25c:	83 ec 08             	sub    esp,0x8
c001c25f:	68 68 01 00 00       	push   0x168
c001c264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c268:	e8 8d d5 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c26d:	83 c4 10             	add    esp,0x10
c001c270:	83 c4 0c             	add    esp,0xc
c001c273:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c274 <APICTimer::~APICTimer()>:
c001c274:	83 ec 0c             	sub    esp,0xc
c001c277:	ba 74 eb 01 c0       	mov    edx,0xc001eb74
c001c27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c280:	89 10                	mov    DWORD PTR [eax],edx
c001c282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c286:	83 ec 0c             	sub    esp,0xc
c001c289:	50                   	push   eax
c001c28a:	e8 a1 02 ff ff       	call   c000c530 <Timer::~Timer()>
c001c28f:	83 c4 10             	add    esp,0x10
c001c292:	90                   	nop
c001c293:	83 c4 0c             	add    esp,0xc
c001c296:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c298 <APICTimer::~APICTimer()>:
c001c298:	83 ec 0c             	sub    esp,0xc
c001c29b:	83 ec 0c             	sub    esp,0xc
c001c29e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2a2:	e8 cd ff ff ff       	call   c001c274 <APICTimer::~APICTimer()>
c001c2a7:	83 c4 10             	add    esp,0x10
c001c2aa:	83 ec 08             	sub    esp,0x8
c001c2ad:	68 60 01 00 00       	push   0x160
c001c2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2b6:	e8 3f d5 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c2bb:	83 c4 10             	add    esp,0x10
c001c2be:	83 c4 0c             	add    esp,0xc
c001c2c1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c2c4 <PIT::~PIT()>:
c001c2c4:	83 ec 0c             	sub    esp,0xc
c001c2c7:	ba c4 eb 01 c0       	mov    edx,0xc001ebc4
c001c2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d0:	89 10                	mov    DWORD PTR [eax],edx
c001c2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d6:	83 ec 0c             	sub    esp,0xc
c001c2d9:	50                   	push   eax
c001c2da:	e8 51 02 ff ff       	call   c000c530 <Timer::~Timer()>
c001c2df:	83 c4 10             	add    esp,0x10
c001c2e2:	90                   	nop
c001c2e3:	83 c4 0c             	add    esp,0xc
c001c2e6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c2e8 <PIT::~PIT()>:
c001c2e8:	83 ec 0c             	sub    esp,0xc
c001c2eb:	83 ec 0c             	sub    esp,0xc
c001c2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2f2:	e8 cd ff ff ff       	call   c001c2c4 <PIT::~PIT()>
c001c2f7:	83 c4 10             	add    esp,0x10
c001c2fa:	83 ec 08             	sub    esp,0x8
c001c2fd:	68 5c 01 00 00       	push   0x15c
c001c302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c306:	e8 ef d4 fe ff       	call   c00097fa <operator delete(void*, unsigned long)>
c001c30b:	83 c4 10             	add    esp,0x10
c001c30e:	83 c4 0c             	add    esp,0xc
c001c311:	c3                   	ret    
