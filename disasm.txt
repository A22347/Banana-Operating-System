
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 63 83 02 00       	call   c0028388 <_init>
c0000025:	c3                   	ret    
c0000026:	bb dc 8f 02 c0       	mov    ebx,0xc0028fdc
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb e8 8f 02 c0    	cmp    ebx,0xc0028fe8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 ce 02 c0       	mov    eax,0xc002ceb8
c0000049:	3d b8 ce 02 c0       	cmp    eax,0xc002ceb8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 ce 02 c0       	push   0xc002ceb8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 ce 02 c0       	mov    eax,0xc002ceb8
c0000075:	2d b8 ce 02 c0       	sub    eax,0xc002ceb8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 ce 02 c0       	push   0xc002ceb8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d4e8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f0 8f 02 c0       	mov    ebx,0xc0028ff0
c00000bb:	81 eb ec 8f 02 c0    	sub    ebx,0xc0028fec
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be ec 8f 02 c0       	mov    esi,0xc0028fec
c00000ca:	a1 ec d4 02 c0       	mov    eax,ds:0xc002d4ec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec d4 02 c0       	mov    ds:0xc002d4ec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec d4 02 c0       	mov    eax,ds:0xc002d4ec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 ce 02 c0       	push   0xc002ceb8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d4e8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 d4 02 c0       	push   0xc002d4f0
c000012c:	68 b8 ce 02 c0       	push   0xc002ceb8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 bf ce 01 00       	call   c001d262 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 5c 20 01 00       	call   c0012417 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 9d ce 01 00       	call   c001d262 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 45 d3 01 00       	call   c001d729 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 5b d9 01 00       	call   c001dd48 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 30 d9 02 c0 	lgdtd  ds:0xc002d930
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 c5 3d 01 00       	call   c00143a7 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 08 d5 02 c0       	mov    ds:0xc002d508,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 08 d5 02 c0    	mov    DWORD PTR ds:0xc002d508,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 08 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d508
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 00 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd7000],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 00 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd7000],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 00 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd7000],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 00 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd7000],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 00 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd7000],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 20 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d520
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 20 d5 02 c0    	mov    DWORD PTR ds:0xc002d520,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 24 d5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2adc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 24 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2adc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 20 d5 02 c0    	mov    DWORD PTR ds:0xc002d520,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 4c d5 02 c0    	cmp    DWORD PTR ds:0xc002d54c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 5c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d55c
c0000e38:	c7 42 0c 54 d5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d554
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 5c d5 02 c0    	mov    DWORD PTR ds:0xc002d55c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 4c d5 02 c0    	mov    DWORD PTR ds:0xc002d54c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 20 d5 02 c0 02 	test   BYTE PTR ds:0xc002d520,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 20 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d520
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 24 d5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2adc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 24 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2adc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 54 d5 02 c0 	lea    edx,[eax*8-0x3ffd2aac]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 60 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d560
c00011ba:	81 fb 54 d5 02 c0    	cmp    ebx,0xc002d554
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 54 d5 02 c0       	cmp    eax,0xc002d554
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 50 d5 02 c0    	cmp    DWORD PTR ds:0xc002d550,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 5c d5 02 c0       	mov    ds:0xc002d55c,eax
c00011f6:	a3 60 d5 02 c0       	mov    ds:0xc002d560,eax
c00011fb:	a3 50 d5 02 c0       	mov    ds:0xc002d550,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 54 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d554
c0001209:	c7 40 0c 54 d5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d554
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 60 d5 02 c0       	mov    ds:0xc002d560,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 54 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d554
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 18 d5 02 c0 	lea    ebp,[edx*4-0x3ffd2ae8]
c000125a:	8b 14 95 20 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ae0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 20 d5 02 c0 	lea    ecx,[edx*4-0x3ffd2ae0]
c0001275:	8b 14 95 20 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ae0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 54 d8 02 c0 	or     DWORD PTR [edi*4-0x3ffd27ac],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 54 d5 02 c0 	lea    eax,[eax*8-0x3ffd2aac]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 5c d5 02 c0    	mov    DWORD PTR ds:0xc002d55c,ecx
c000132f:	89 0d 60 d5 02 c0    	mov    DWORD PTR ds:0xc002d560,ecx
c0001335:	c7 41 08 54 d5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d554
c000133c:	c7 41 0c 54 d5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d554
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 4c d5 02 c0 	lea    edx,[ecx*8-0x3ffd2ab4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 54 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd27ac]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 54 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd27ac]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 4c d5 02 c0 	lea    edx,[eax*4-0x3ffd2ab4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 54 d8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd27ac],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 5c d5 02 c0    	mov    DWORD PTR ds:0xc002d55c,edi
c0001402:	89 3d 60 d5 02 c0    	mov    DWORD PTR ds:0xc002d560,edi
c0001408:	c7 47 08 54 d5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d554
c000140f:	c7 47 0c 54 d5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d554
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 50 d5 02 c0    	mov    DWORD PTR ds:0xc002d550,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 4c d5 02 c0       	mov    eax,ds:0xc002d54c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 4c d5 02 c0    	mov    DWORD PTR ds:0xc002d54c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 20 d5 02 c0       	mov    edx,0xc002d520
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 20 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d520,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 74 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d874
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 74 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d874,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 74 d8 02 c0    	mov    DWORD PTR ds:0xc002d874,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 4c d5 02 c0    	cmp    DWORD PTR ds:0xc002d54c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 4c d5 02 c0    	mov    DWORD PTR ds:0xc002d54c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 20 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d520,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 7c d8 02 c0    	push   DWORD PTR ds:0xc002d87c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 20 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d520,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 7c d8 02 c0       	mov    eax,ds:0xc002d87c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 4c d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d54c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 4c d5 02 c0       	mov    eax,ds:0xc002d54c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 24 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2adc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 54 d5 02 c0       	mov    eax,0xc002d554
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 4c d8 02 c0       	cmp    eax,0xc002d84c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 70 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d870
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 84 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d884
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 94 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d894
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 04 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6efc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 20 d5 02 c0       	mov    eax,ds:0xc002d520
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 20 d5 02 c0       	mov    ds:0xc002d520,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 64 d8 02 c0    	mov    DWORD PTR ds:0xc002d864,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 68 d8 02 c0    	mov    DWORD PTR ds:0xc002d868,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 6c d8 02 c0    	mov    DWORD PTR ds:0xc002d86c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 74 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d874,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 e0 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf020]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 86 eb 01 00       	jmp    c0020778 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 e0 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf020]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 b7 eb 01 00       	jmp    c00207bf <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 e0 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf020]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 df eb 01 00       	jmp    c0020806 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 da 47 02 00       	call   c00266e4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 20 92 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6de0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 20 92 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6de0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 20 91 02 c0       	mov    edx,0xc0029120
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 40 92 02 c0       	mov    edx,0xc0029240
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba f4 bd 02 c0       	mov    edx,0xc002bdf4
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 4c 92 02 c0       	mov    edx,0xc002924c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 30 92 02 c0       	mov    edx,0xc0029230
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 c0 d8 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2740]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 a0 d8 02 c0    	mov    ax,ds:0xc002d8a0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 a0 d8 02 c0    	mov    ds:0xc002d8a0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 d7 35 02 00       	call   c00266e4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 52 92 02 c0       	mov    eax,0xc0029252
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad a0 91 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6e60]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 5b 92 02 c0       	mov    eax,0xc002925b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 20 92 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6de0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 a2 1f 02 00       	call   c00266e4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 30 92 02 c0       	mov    edx,0xc0029230
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 20 91 02 c0       	mov    edx,0xc0029120
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 30 91 02 c0       	mov    edx,0xc0029130
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 c0 d8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2740]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 c0 d8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2740],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 69 09 02 00       	call   c00266e4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 4f 09 02 00       	call   c00266e4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 77 91 02 c0       	mov    eax,0xc0029177
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 70 91 02 c0       	mov    eax,0xc0029170
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 c0 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2740]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 60 91 02 c0       	mov    esi,0xc0029160
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 92 f0 01 00       	call   c00266e4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 40 92 02 c0       	mov    edx,0xc0029240
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 40 91 02 c0       	mov    edx,0xc0029140
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 50 91 02 c0       	mov    edx,0xc0029150
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 62 92 02 c0       	mov    edx,0xc0029262
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 6e 92 02 c0       	mov    edx,0xc002926e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 82 92 02 c0       	mov    edx,0xc0029282
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c a0 95 02 c0 	mov    DWORD PTR [esp+0xc],0xc00295a0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 a0 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc00295a0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 a0 93 02 c0       	mov    eax,0xc00293a0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 e0 92 02 c0       	mov    eax,0xc00292e0
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 a0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d60]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 e6 f9 01 00       	call   c00281b7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 a9 f9 01 00       	call   c0028199 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 7d f9 01 00       	call   c00281b7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 30 f0 01 00       	call   c00278bc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 b2 fa 01 00       	call   c0028350 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 f7 f8 01 00       	call   c00281b7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 39 f8 01 00       	call   c00281b7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 06 f8 01 00       	call   c0028199 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 f3 f6 01 00       	call   c00281b7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 bb f6 01 00       	call   c0028199 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 a0 96 02 c0       	mov    eax,0xc00296a0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 c7 f4 01 00       	call   c00281b7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 8c f4 01 00       	call   c0028199 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 00 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6500]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 9c f1 01 00       	call   c0027f4b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 1a eb 01 00       	call   c00278e8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 d6 f3 01 00       	call   c00281bb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 c4 f4 01 00       	call   c00282df <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 ae ea 01 00       	call   c00278e8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 59 f3 01 00       	call   c00281b5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 3a f3 01 00       	call   c00281b9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 d0 f4 01 00       	call   c0028370 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 7a f0 01 00       	call   c0027f4b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 f8 e9 01 00       	call   c00278e8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 b4 f2 01 00       	call   c00281bb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 a2 f3 01 00       	call   c00282df <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 8c e9 01 00       	call   c00278e8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 37 f2 01 00       	call   c00281b5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 17 f2 01 00       	call   c00281b9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 ac f3 01 00       	call   c0028370 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 52 f1 01 00       	call   c00281b7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 10 f1 01 00       	call   c0028199 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 f8 f0 01 00       	call   c00281b7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 6a ee 01 00       	call   c0027f4b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 6c e1 01 00       	call   c002726b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 cf e7 01 00       	call   c00278e8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 21 ee 01 00       	call   c0027f4b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 27 e1 01 00       	call   c002726b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 f6 ed 01 00       	call   c0027f4b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 46 f0 01 00       	call   c00281b5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 23 e7 01 00       	call   c00278bc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 a5 f1 01 00       	call   c0028350 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 cc ef 01 00       	call   c0028199 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 c7 e6 01 00       	call   c00278bc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 45 ed 01 00       	call   c0027f4b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 c8 e6 01 00       	call   c00278e8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 1a ed 01 00       	call   c0027f4b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 81 e9 01 00       	call   c0027bcc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 00 e0 01 00       	call   c002726b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 60 d9 01 00       	call   c0026c00 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 37 f0 01 00       	call   c00282df <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 20 e6 01 00       	call   c00278e8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 07 f0 01 00       	call   c00282df <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 79 df 01 00       	call   c002726b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 b2 ee 01 00       	call   c00281bb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 9a e8 01 00       	call   c0027bcc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 20 df 01 00       	call   c002726b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 0e f0 01 00       	call   c0028370 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 e0 eb 01 00       	call   c0027f4b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 37 e5 01 00       	call   c00278bc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 16 ee 01 00       	call   c00281b7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 af de 01 00       	call   c002726b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 db e4 01 00       	call   c00278bc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 7d ef 01 00       	call   c0028370 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 2e eb 01 00       	call   c0027f4b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 ab e4 01 00       	call   c00278e8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 fe ea 01 00       	call   c0027f4b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 04 de 01 00       	call   c002726b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 d4 ea 01 00       	call   c0027f4b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 26 ed 01 00       	call   c00281b7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 fd e3 01 00       	call   c00278bc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 7f ee 01 00       	call   c0028350 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 a6 ec 01 00       	call   c0028199 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 a0 e3 01 00       	call   c00278bc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 1e ea 01 00       	call   c0027f4b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 a1 e3 01 00       	call   c00278e8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 f3 e9 01 00       	call   c0027f4b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 5a e6 01 00       	call   c0027bcc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 d9 dc 01 00       	call   c002726b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 29 d6 01 00       	call   c0026c00 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 00 ed 01 00       	call   c00282df <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 e9 e2 01 00       	call   c00278e8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 d0 ec 01 00       	call   c00282df <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 42 dc 01 00       	call   c002726b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 7b eb 01 00       	call   c00281bb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 62 e5 01 00       	call   c0027bcc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 e1 db 01 00       	call   c002726b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 cf ec 01 00       	call   c0028370 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 a1 e8 01 00       	call   c0027f4b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 f8 e1 01 00       	call   c00278bc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 d7 ea 01 00       	call   c00281b7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 70 db 01 00       	call   c002726b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 9c e1 01 00       	call   c00278bc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 11 e8 01 00       	call   c0027f4b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 17 db 01 00       	call   c002726b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 60 9b 02 c0       	mov    eax,0xc0029b60
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 74 9b 02 c0       	mov    eax,0xc0029b74
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 8c e6 01 00       	call   c0027f4b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 0a e0 01 00       	call   c00278e8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 9c d2 01 00       	call   c0026c00 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 73 e9 01 00       	call   c00282df <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 5c df 01 00       	call   c00278e8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 3f e9 01 00       	call   c00282df <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 b1 d8 01 00       	call   c002726b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 11 e9 01 00       	call   c00282df <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 00 df 01 00       	call   c00278e8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 69 d8 01 00       	call   c002726b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 8a d1 01 00       	call   c0026c00 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 61 e8 01 00       	call   c00282df <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 4a de 01 00       	call   c00278e8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 2d e8 01 00       	call   c00282df <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 9f d7 01 00       	call   c002726b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 ff e7 01 00       	call   c00282df <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 ee dd 01 00       	call   c00278e8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 57 d7 01 00       	call   c002726b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 35 d7 01 00       	call   c002726b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 11 d0 01 00       	call   c0026c00 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 e8 e6 01 00       	call   c00282df <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 d1 dc 01 00       	call   c00278e8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 b4 e6 01 00       	call   c00282df <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 26 d6 01 00       	call   c002726b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 86 e6 01 00       	call   c00282df <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 6f dc 01 00       	call   c00278e8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 d8 d5 01 00       	call   c002726b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 38 e6 01 00       	call   c00282df <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 21 dc 01 00       	call   c00278e8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 8a d5 01 00       	call   c002726b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 9f ce 01 00       	call   c0026c00 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 76 e5 01 00       	call   c00282df <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 5f db 01 00       	call   c00278e8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 46 e5 01 00       	call   c00282df <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 b8 d4 01 00       	call   c002726b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 18 e5 01 00       	call   c00282df <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 01 db 01 00       	call   c00278e8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 6a d4 01 00       	call   c002726b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 ca e4 01 00       	call   c00282df <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 b3 da 01 00       	call   c00278e8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 1c d4 01 00       	call   c002726b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 f0 d3 01 00       	call   c002726b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 4d da 01 00       	call   c00278e8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 09 e3 01 00       	call   c00281bb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 98 d3 01 00       	call   c002726b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 f5 d9 01 00       	call   c00278e8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 b1 e2 01 00       	call   c00281bb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 2b cc 01 00       	call   c0026c00 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 02 e3 01 00       	call   c00282df <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 eb d8 01 00       	call   c00278e8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 ce e2 01 00       	call   c00282df <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 40 d2 01 00       	call   c002726b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 a0 e2 01 00       	call   c00282df <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 89 d8 01 00       	call   c00278e8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 f2 d1 01 00       	call   c002726b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 52 e2 01 00       	call   c00282df <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 3b d8 01 00       	call   c00278e8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 a4 d1 01 00       	call   c002726b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 04 e2 01 00       	call   c00282df <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 ed d7 01 00       	call   c00278e8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 56 d1 01 00       	call   c002726b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 b6 e1 01 00       	call   c00282df <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 9f d7 01 00       	call   c00278e8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 08 d1 01 00       	call   c002726b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 0a ca 01 00       	call   c0026c00 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 e1 e0 01 00       	call   c00282df <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 ca d6 01 00       	call   c00278e8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 b1 e0 01 00       	call   c00282df <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 23 d0 01 00       	call   c002726b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 83 e0 01 00       	call   c00282df <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 6c d6 01 00       	call   c00278e8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 d5 cf 01 00       	call   c002726b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 35 e0 01 00       	call   c00282df <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 1e d6 01 00       	call   c00278e8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 87 cf 01 00       	call   c002726b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 e7 df 01 00       	call   c00282df <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 d0 d5 01 00       	call   c00278e8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 39 cf 01 00       	call   c002726b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 99 df 01 00       	call   c00282df <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 82 d5 01 00       	call   c00278e8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 eb ce 01 00       	call   c002726b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 bf ce 01 00       	call   c002726b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 1c d5 01 00       	call   c00278e8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 d8 dd 01 00       	call   c00281bb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 67 ce 01 00       	call   c002726b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 c4 d4 01 00       	call   c00278e8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 80 dd 01 00       	call   c00281bb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 0e ce 01 00       	call   c002726b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 6b d4 01 00       	call   c00278e8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 27 dd 01 00       	call   c00281bb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 b5 cd 01 00       	call   c002726b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 12 d4 01 00       	call   c00278e8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 ce dc 01 00       	call   c00281bb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 2c c6 01 00       	call   c0026c00 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 03 dd 01 00       	call   c00282df <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 ec d2 01 00       	call   c00278e8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 cf dc 01 00       	call   c00282df <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 41 cc 01 00       	call   c002726b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 a1 dc 01 00       	call   c00282df <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 8a d2 01 00       	call   c00278e8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 f3 cb 01 00       	call   c002726b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 53 dc 01 00       	call   c00282df <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 3c d2 01 00       	call   c00278e8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 a5 cb 01 00       	call   c002726b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 05 dc 01 00       	call   c00282df <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 ee d1 01 00       	call   c00278e8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 57 cb 01 00       	call   c002726b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 b7 db 01 00       	call   c00282df <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 a0 d1 01 00       	call   c00278e8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 09 cb 01 00       	call   c002726b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 69 db 01 00       	call   c00282df <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 52 d1 01 00       	call   c00278e8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 b8 ca 01 00       	call   c002726b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 18 db 01 00       	call   c00282df <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 01 d1 01 00       	call   c00278e8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 6a ca 01 00       	call   c002726b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 64 c3 01 00       	call   c0026c00 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 3b da 01 00       	call   c00282df <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 24 d0 01 00       	call   c00278e8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 04 da 01 00       	call   c00282df <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 76 c9 01 00       	call   c002726b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 d6 d9 01 00       	call   c00282df <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 bf cf 01 00       	call   c00278e8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 28 c9 01 00       	call   c002726b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 88 d9 01 00       	call   c00282df <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 71 cf 01 00       	call   c00278e8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 da c8 01 00       	call   c002726b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 3a d9 01 00       	call   c00282df <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 23 cf 01 00       	call   c00278e8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 8c c8 01 00       	call   c002726b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 ec d8 01 00       	call   c00282df <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 d5 ce 01 00       	call   c00278e8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 3e c8 01 00       	call   c002726b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 9e d8 01 00       	call   c00282df <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 87 ce 01 00       	call   c00278e8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 ed c7 01 00       	call   c002726b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 4d d8 01 00       	call   c00282df <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 36 ce 01 00       	call   c00278e8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 a5 c7 01 00       	call   c002726b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 7e c7 01 00       	call   c002726b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 dc cd 01 00       	call   c00278e8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 98 d6 01 00       	call   c00281bb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 27 c7 01 00       	call   c002726b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 85 cd 01 00       	call   c00278e8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 41 d6 01 00       	call   c00281bb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 cf c6 01 00       	call   c002726b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 2d cd 01 00       	call   c00278e8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 e9 d5 01 00       	call   c00281bb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 77 c6 01 00       	call   c002726b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 d5 cc 01 00       	call   c00278e8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 91 d5 01 00       	call   c00281bb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 1f c6 01 00       	call   c002726b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 7d cc 01 00       	call   c00278e8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 39 d5 01 00       	call   c00281bb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 cd c5 01 00       	call   c002726b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 2b cc 01 00       	call   c00278e8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 e7 d4 01 00       	call   c00281bb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 fb bd 01 00       	call   c0026c00 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 d2 d4 01 00       	call   c00282df <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 bb ca 01 00       	call   c00278e8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 a2 d4 01 00       	call   c00282df <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 14 c4 01 00       	call   c002726b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 a4 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd645c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 48 d4 01 00       	call   c00282df <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 31 ca 01 00       	call   c00278e8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 9c c3 01 00       	call   c002726b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 e9 d3 01 00       	call   c00282df <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 d2 c9 01 00       	call   c00278e8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 3d c3 01 00       	call   c002726b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 8a d3 01 00       	call   c00282df <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 73 c9 01 00       	call   c00278e8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 de c2 01 00       	call   c002726b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 2b d3 01 00       	call   c00282df <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 14 c9 01 00       	call   c00278e8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 7f c2 01 00       	call   c002726b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 cc d2 01 00       	call   c00282df <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 b5 c8 01 00       	call   c00278e8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 20 c2 01 00       	call   c002726b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 6d d2 01 00       	call   c00282df <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 56 c8 01 00       	call   c00278e8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 c1 c1 01 00       	call   c002726b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 0e d2 01 00       	call   c00282df <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 f7 c7 01 00       	call   c00278e8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 62 c1 01 00       	call   c002726b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 af d1 01 00       	call   c00282df <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 98 c7 01 00       	call   c00278e8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 03 c1 01 00       	call   c002726b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 0d ba 01 00       	call   c0026c00 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 e4 d0 01 00       	call   c00282df <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 cd c6 01 00       	call   c00278e8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 b4 d0 01 00       	call   c00282df <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 26 c0 01 00       	call   c002726b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 c0 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6440]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 59 d0 01 00       	call   c00282df <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 42 c6 01 00       	call   c00278e8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 ad bf 01 00       	call   c002726b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 f9 cf 01 00       	call   c00282df <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 e2 c5 01 00       	call   c00278e8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 4d bf 01 00       	call   c002726b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 99 cf 01 00       	call   c00282df <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 82 c5 01 00       	call   c00278e8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 ed be 01 00       	call   c002726b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 39 cf 01 00       	call   c00282df <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 22 c5 01 00       	call   c00278e8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 8d be 01 00       	call   c002726b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 d9 ce 01 00       	call   c00282df <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 c2 c4 01 00       	call   c00278e8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 2d be 01 00       	call   c002726b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 79 ce 01 00       	call   c00282df <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 62 c4 01 00       	call   c00278e8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 cd bd 01 00       	call   c002726b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 19 ce 01 00       	call   c00282df <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 02 c4 01 00       	call   c00278e8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 6d bd 01 00       	call   c002726b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 b9 cd 01 00       	call   c00282df <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 a2 c3 01 00       	call   c00278e8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 0d bd 01 00       	call   c002726b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 dc 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6424]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 b2 bc 01 00       	call   c002726b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 0f c3 01 00       	call   c00278e8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 cb cb 01 00       	call   c00281bb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 55 bc 01 00       	call   c002726b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 b2 c2 01 00       	call   c00278e8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 6e cb 01 00       	call   c00281bb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 f8 bb 01 00       	call   c002726b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 55 c2 01 00       	call   c00278e8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 11 cb 01 00       	call   c00281bb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 9b bb 01 00       	call   c002726b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 f8 c1 01 00       	call   c00278e8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 b4 ca 01 00       	call   c00281bb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 3e bb 01 00       	call   c002726b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 9b c1 01 00       	call   c00278e8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 57 ca 01 00       	call   c00281bb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 e1 ba 01 00       	call   c002726b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 3e c1 01 00       	call   c00278e8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 fa c9 01 00       	call   c00281bb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 84 ba 01 00       	call   c002726b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 e1 c0 01 00       	call   c00278e8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 9d c9 01 00       	call   c00281bb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 27 ba 01 00       	call   c002726b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 84 c0 01 00       	call   c00278e8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 40 c9 01 00       	call   c00281bb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 3c c0 01 00       	call   c00278e8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 b4 ca 01 00       	jmp    c0028370 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 1e c7 01 00       	call   c00281b7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 dc c6 01 00       	call   c0028199 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 73 c4 01 00       	call   c0027f4b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 74 b7 01 00       	call   c002726b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 43 c4 01 00       	call   c0027f4b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 aa c0 01 00       	call   c0027bcc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 49 c6 01 00       	call   c0028199 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 4c c6 01 00       	call   c00281b7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 1f c6 01 00       	call   c00281b7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 18 c0 01 00       	call   c0027bcc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 a2 c7 01 00       	call   c0028370 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 7d c7 01 00       	call   c0028370 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 4f c3 01 00       	call   c0027f4b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 a6 bc 01 00       	call   c00278bc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 85 c5 01 00       	call   c00281b7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 1e b6 01 00       	call   c002726b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 42 bc 01 00       	call   c00278bc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 e4 c6 01 00       	call   c0028370 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 1c bf 01 00       	call   c0027bcc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 99 b5 01 00       	call   c002726b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 c5 c1 01 00       	call   c0027f4b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 c5 b4 01 00       	call   c002726b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 a5 b4 01 00       	call   c002726b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 75 c1 01 00       	call   c0027f4b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 c5 c3 01 00       	call   c00281b5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 a4 ba 01 00       	call   c00278bc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 26 c5 01 00       	call   c0028350 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 4d c3 01 00       	call   c0028199 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 4b ba 01 00       	call   c00278bc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 c9 c0 01 00       	call   c0027f4b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 4c ba 01 00       	call   c00278e8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 9e c0 01 00       	call   c0027f4b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 05 bd 01 00       	call   c0027bcc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 84 b3 01 00       	call   c002726b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 4e c0 01 00       	call   c0027f4b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 9a c2 01 00       	call   c00281b7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 8f b9 01 00       	call   c00278e8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 61 b9 01 00       	call   c00278e8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 9a bf 01 00       	call   c0027f4b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 fe bb 01 00       	call   c0027bcc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 c6 bb 01 00       	call   c0027bcc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 45 b2 01 00       	call   c002726b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 32 c3 01 00       	call   c0028370 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 04 bf 01 00       	call   c0027f4b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 5b b8 01 00       	call   c00278bc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 3a c1 01 00       	call   c00281b7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 d2 b1 01 00       	call   c002726b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 f6 b7 01 00       	call   c00278bc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 98 c2 01 00       	call   c0028370 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 59 c0 01 00       	call   c00281b7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 17 c0 01 00       	call   c0028199 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 ae bd 01 00       	call   c0027f4b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 af b0 01 00       	call   c002726b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 7e bd 01 00       	call   c0027f4b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 e5 b9 01 00       	call   c0027bcc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 84 bf 01 00       	call   c0028199 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 87 bf 01 00       	call   c00281b7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 5a bf 01 00       	call   c00281b7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 53 b9 01 00       	call   c0027bcc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 dd c0 01 00       	call   c0028370 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 b8 c0 01 00       	call   c0028370 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 8a bc 01 00       	call   c0027f4b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 e1 b5 01 00       	call   c00278bc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 c0 be 01 00       	call   c00281b7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 59 af 01 00       	call   c002726b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 7d b5 01 00       	call   c00278bc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 1f c0 01 00       	call   c0028370 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 57 b8 01 00       	call   c0027bcc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 d4 ae 01 00       	call   c002726b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 ff ba 01 00       	call   c0027f4b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 ff ad 01 00       	call   c002726b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 df ad 01 00       	call   c002726b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 af ba 01 00       	call   c0027f4b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 ff bc 01 00       	call   c00281b5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 dd b3 01 00       	call   c00278bc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 5f be 01 00       	call   c0028350 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 86 bc 01 00       	call   c0028199 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 83 b3 01 00       	call   c00278bc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 01 ba 01 00       	call   c0027f4b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 84 b3 01 00       	call   c00278e8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 d6 b9 01 00       	call   c0027f4b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 3d b6 01 00       	call   c0027bcc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 bc ac 01 00       	call   c002726b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 86 b9 01 00       	call   c0027f4b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 d2 bb 01 00       	call   c00281b7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 c7 b2 01 00       	call   c00278e8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 99 b2 01 00       	call   c00278e8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 d0 b8 01 00       	call   c0027f4b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 34 b5 01 00       	call   c0027bcc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 01 b5 01 00       	call   c0027bcc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 80 ab 01 00       	call   c002726b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 6d bc 01 00       	call   c0028370 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 3f b8 01 00       	call   c0027f4b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 96 b1 01 00       	call   c00278bc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 75 ba 01 00       	call   c00281b7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 0d ab 01 00       	call   c002726b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 31 b1 01 00       	call   c00278bc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 d3 bb 01 00       	call   c0028370 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 94 b9 01 00       	call   c00281b7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 52 b9 01 00       	call   c0028199 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 e9 b6 01 00       	call   c0027f4b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 ea a9 01 00       	call   c002726b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 b9 b6 01 00       	call   c0027f4b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 20 b3 01 00       	call   c0027bcc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 bf b8 01 00       	call   c0028199 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 c2 b8 01 00       	call   c00281b7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 95 b8 01 00       	call   c00281b7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 8e b2 01 00       	call   c0027bcc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 18 ba 01 00       	call   c0028370 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 f3 b9 01 00       	call   c0028370 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 c5 b5 01 00       	call   c0027f4b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 1c af 01 00       	call   c00278bc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 fb b7 01 00       	call   c00281b7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 94 a8 01 00       	call   c002726b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 b8 ae 01 00       	call   c00278bc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 5a b9 01 00       	call   c0028370 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 92 b1 01 00       	call   c0027bcc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 0f a8 01 00       	call   c002726b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 3a b4 01 00       	call   c0027f4b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 3a a7 01 00       	call   c002726b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 1a a7 01 00       	call   c002726b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 ea b3 01 00       	call   c0027f4b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 3a b6 01 00       	call   c00281b5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 18 ad 01 00       	call   c00278bc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 9a b7 01 00       	call   c0028350 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 c1 b5 01 00       	call   c0028199 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 be ac 01 00       	call   c00278bc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 3c b3 01 00       	call   c0027f4b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 bf ac 01 00       	call   c00278e8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 11 b3 01 00       	call   c0027f4b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 78 af 01 00       	call   c0027bcc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 f7 a5 01 00       	call   c002726b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 c1 b2 01 00       	call   c0027f4b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 0d b5 01 00       	call   c00281b7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 02 ac 01 00       	call   c00278e8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 d4 ab 01 00       	call   c00278e8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 0b b2 01 00       	call   c0027f4b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 6f ae 01 00       	call   c0027bcc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 3c ae 01 00       	call   c0027bcc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 bb a4 01 00       	call   c002726b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 a8 b5 01 00       	call   c0028370 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 7a b1 01 00       	call   c0027f4b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 d1 aa 01 00       	call   c00278bc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 b0 b3 01 00       	call   c00281b7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 48 a4 01 00       	call   c002726b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 6c aa 01 00       	call   c00278bc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 0e b5 01 00       	call   c0028370 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 cf b2 01 00       	call   c00281b7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 8d b2 01 00       	call   c0028199 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 24 b0 01 00       	call   c0027f4b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 25 a3 01 00       	call   c002726b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 f4 af 01 00       	call   c0027f4b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 5b ac 01 00       	call   c0027bcc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 fa b1 01 00       	call   c0028199 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 fd b1 01 00       	call   c00281b7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 d0 b1 01 00       	call   c00281b7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 c9 ab 01 00       	call   c0027bcc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 53 b3 01 00       	call   c0028370 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 2e b3 01 00       	call   c0028370 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 00 af 01 00       	call   c0027f4b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 57 a8 01 00       	call   c00278bc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 36 b1 01 00       	call   c00281b7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 cf a1 01 00       	call   c002726b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 f3 a7 01 00       	call   c00278bc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 95 b2 01 00       	call   c0028370 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 cd aa 01 00       	call   c0027bcc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 4a a1 01 00       	call   c002726b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 75 ad 01 00       	call   c0027f4b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 75 a0 01 00       	call   c002726b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 55 a0 01 00       	call   c002726b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 25 ad 01 00       	call   c0027f4b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 75 af 01 00       	call   c00281b5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 53 a6 01 00       	call   c00278bc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 d5 b0 01 00       	call   c0028350 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 fc ae 01 00       	call   c0028199 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 f9 a5 01 00       	call   c00278bc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 77 ac 01 00       	call   c0027f4b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 fa a5 01 00       	call   c00278e8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 4c ac 01 00       	call   c0027f4b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 b3 a8 01 00       	call   c0027bcc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 32 9f 01 00       	call   c002726b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 fc ab 01 00       	call   c0027f4b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 48 ae 01 00       	call   c00281b7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 3d a5 01 00       	call   c00278e8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 0f a5 01 00       	call   c00278e8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 46 ab 01 00       	call   c0027f4b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 aa a7 01 00       	call   c0027bcc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 77 a7 01 00       	call   c0027bcc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 f6 9d 01 00       	call   c002726b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 e3 ae 01 00       	call   c0028370 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 b5 aa 01 00       	call   c0027f4b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 0c a4 01 00       	call   c00278bc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 eb ac 01 00       	call   c00281b7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 83 9d 01 00       	call   c002726b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 a7 a3 01 00       	call   c00278bc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 49 ae 01 00       	call   c0028370 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 07 ac 01 00       	call   c00281b7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 c5 ab 01 00       	call   c0028199 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 5c a9 01 00       	call   c0027f4b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 5d 9c 01 00       	call   c002726b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 2c a9 01 00       	call   c0027f4b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 93 a5 01 00       	call   c0027bcc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 32 ab 01 00       	call   c0028199 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 35 ab 01 00       	call   c00281b7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 08 ab 01 00       	call   c00281b7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 01 a5 01 00       	call   c0027bcc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 8b ac 01 00       	call   c0028370 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 62 ac 01 00       	call   c0028370 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 34 a8 01 00       	call   c0027f4b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 8b a1 01 00       	call   c00278bc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 6a aa 01 00       	call   c00281b7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 03 9b 01 00       	call   c002726b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 2b a1 01 00       	call   c00278bc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 cd ab 01 00       	call   c0028370 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 06 a4 01 00       	call   c0027bcc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 83 9a 01 00       	call   c002726b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 af a6 01 00       	call   c0027f4b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 af 99 01 00       	call   c002726b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 8f 99 01 00       	call   c002726b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 5f a6 01 00       	call   c0027f4b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 93 a8 01 00       	call   c0028199 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 8a 9f 01 00       	call   c00278bc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 0c aa 01 00       	call   c0028350 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 33 a8 01 00       	call   c0028199 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 2d 9f 01 00       	call   c00278bc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 ab a5 01 00       	call   c0027f4b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 2e 9f 01 00       	call   c00278e8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 80 a5 01 00       	call   c0027f4b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 e7 a1 01 00       	call   c0027bcc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 66 98 01 00       	call   c002726b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 30 a5 01 00       	call   c0027f4b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 7c a7 01 00       	call   c00281b7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 71 9e 01 00       	call   c00278e8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 43 9e 01 00       	call   c00278e8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 87 a4 01 00       	call   c0027f4b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 ee a0 01 00       	call   c0027bcc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 d7 9d 01 00       	call   c00278e8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 93 a6 01 00       	call   c00281bb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 86 a0 01 00       	call   c0027bcc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 05 97 01 00       	call   c002726b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 f2 a7 01 00       	call   c0028370 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 c4 a3 01 00       	call   c0027f4b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 1b 9d 01 00       	call   c00278bc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 fa a5 01 00       	call   c00281b7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 92 96 01 00       	call   c002726b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ba 9c 01 00       	call   c00278bc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 5c a7 01 00       	call   c0028370 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 04 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63fc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 f8 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6408]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 0f a4 01 00       	call   c00281b7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 cd a3 01 00       	call   c0028199 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 b9 a3 01 00       	call   c00281b7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 2b a1 01 00       	call   c0027f4b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 a9 9a 01 00       	call   c00278e8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 fb a0 01 00       	call   c0027f4b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 01 94 01 00       	call   c002726b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 d0 a0 01 00       	call   c0027f4b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 20 a3 01 00       	call   c00281b5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 01 9a 01 00       	call   c00278bc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 83 a4 01 00       	call   c0028350 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 aa a2 01 00       	call   c0028199 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 a9 99 01 00       	call   c00278bc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 27 a0 01 00       	call   c0027f4b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 aa 99 01 00       	call   c00278e8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 fc 9f 01 00       	call   c0027f4b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 63 9c 01 00       	call   c0027bcc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 e2 92 01 00       	call   c002726b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 0a 9c 01 00       	call   c0027bcc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 90 92 01 00       	call   c002726b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 7e a3 01 00       	call   c0028370 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 50 9f 01 00       	call   c0027f4b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 a7 98 01 00       	call   c00278bc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 86 a1 01 00       	call   c00281b7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 1f 92 01 00       	call   c002726b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 4b 98 01 00       	call   c00278bc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 ed a2 01 00       	call   c0028370 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 9a 9e 01 00       	call   c0027f4b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 17 98 01 00       	call   c00278e8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 68 9e 01 00       	call   c0027f4b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 6e 91 01 00       	call   c002726b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 3e 9e 01 00       	call   c0027f4b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 92 a0 01 00       	call   c00281b9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 6b 97 01 00       	call   c00278bc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 ed a1 01 00       	call   c0028350 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 14 a0 01 00       	call   c0028199 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 12 97 01 00       	call   c00278bc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 90 9d 01 00       	call   c0027f4b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 13 97 01 00       	call   c00278e8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 65 9d 01 00       	call   c0027f4b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 cc 99 01 00       	call   c0027bcc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 4b 90 01 00       	call   c002726b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 67 99 01 00       	call   c0027bcc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 e6 8f 01 00       	call   c002726b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 d4 a0 01 00       	call   c0028370 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 a6 9c 01 00       	call   c0027f4b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 fd 95 01 00       	call   c00278bc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 dc 9e 01 00       	call   c00281b7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 75 8f 01 00       	call   c002726b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 a1 95 01 00       	call   c00278bc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 12 9c 01 00       	call   c0027f4b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 18 8f 01 00       	call   c002726b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 1e 9d 02 c0       	mov    eax,0xc0029d1e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 2f 9d 02 c0       	mov    eax,0xc0029d2f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c000e4e3:	ff 05 44 0e 03 c0    	inc    DWORD PTR ds:0xc0030e44
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 40 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e40,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c000e50d:	e8 85 f4 00 00       	call   c001d997 <schedule()>
c000e512:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c000e517:	48                   	dec    eax
c000e518:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 90 da 02 c0       	mov    eax,ds:0xc002da90
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 66 9d 02 c0       	push   0xc0029d66
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 28 d9 02 c0       	mov    eax,0xc002d928
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 6f 9d 02 c0       	push   0xc0029d6f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 e4 66 02 c0       	mov    eax,0xc00266e4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 79 9d 02 c0       	push   0xc0029d79
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 18 64 02 c0       	mov    eax,0xc0026418
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 82 9d 02 c0       	push   0xc0029d82
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 e4 67 02 c0       	mov    eax,0xc00267e4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 8c 9d 02 c0       	push   0xc0029d8c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 64 65 02 c0       	mov    eax,0xc0026564
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 95 9d 02 c0       	push   0xc0029d95
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 2c d9 02 c0       	mov    eax,0xc002d92c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 a2 9d 02 c0       	push   0xc0029da2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 2d d9 02 c0       	mov    eax,0xc002d92d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 f7 55 00 00       	call   c0013c64 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 af 9d 02 c0       	push   0xc0029daf
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c000e6be:	68 c8 9d 02 c0       	push   0xc0029dc8
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 af ee 00 00       	call   c001d57a <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 92 f0 00 00       	call   c001d772 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 56 e1 01 c0       	push   0xc001e156
c000e6e9:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c000e6ef:	e8 7e f0 00 00       	call   c001d772 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c000e6fc:	68 ac 9e 02 c0       	push   0xc0029eac
c000e701:	c6 05 2d d9 02 c0 01 	mov    BYTE PTR ds:0xc002d92d,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 ef fd 00 00       	call   c001e501 <Vm::initialise8086()>
c000e712:	e8 15 43 00 00       	call   c0012a2c <Fs::initVFS()>
c000e717:	c7 04 24 d5 9d 02 c0 	mov    DWORD PTR [esp],0xc0029dd5
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 ac 9e 02 c0       	push   0xc0029eac
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 bb d6 00 00       	call   c001be07 <Sys::loadSyscalls()>
c000e74c:	e8 b3 b5 00 00       	call   c0019d04 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 ef 9d 02 c0       	push   0xc0029def
c000e75b:	68 f8 9d 02 c0       	push   0xc0029df8
c000e760:	e8 64 c4 00 00       	call   c001abc9 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 af 4d 00 00       	call   c001351c <User::loadClockSettings(int)>
c000e76d:	c7 04 24 d0 9e 02 c0 	mov    DWORD PTR [esp],0xc0029ed0
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 9a 54 00 00       	call   c0013c24 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 00 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e00
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 d1 b0 00 00       	call   c001986c <Krnl::startCPUs()>
c000e79b:	c7 04 24 1a 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e1a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 2b 9e 02 c0       	push   0xc0029e2b
c000e7b6:	e8 1c e8 00 00       	call   c001cfd7 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 3e ea 00 00       	call   c001d202 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 9c f3 00 00       	call   c001db6d <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 47 9e 02 c0       	push   0xc0029e47
c000e7e5:	50                   	push   eax
c000e7e6:	e8 f3 54 00 00       	call   c0013cde <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 1c 9f 02 c0       	mov    edx,0xc0029f1c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 41 d9 02 c0 04 	test   BYTE PTR ds:0xc002d941,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 27 7a 01 00       	call   c00263a6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 44 9e 00 00       	call   c00187fe <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 1d 9e 00 00       	call   c00187fe <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 fb 9d 00 00       	call   c00187fe <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 d9 9d 00 00       	call   c00187fe <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 40 d9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d940,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 e7 9c 00 00       	call   c001877a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 c2 9c 00 00       	call   c001877a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 91 78 01 00       	call   c0026360 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 4e 78 01 00       	call   c0026340 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 de 9c 00 00       	call   c00187fe <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 50 9e 02 c0       	push   0xc0029e50
c000eb62:	e8 a6 b2 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 56 9e 02 c0       	push   0xc0029e56
c000eb9a:	e8 6e b2 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 f0 9e 02 c0       	push   0xc0029ef0
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 40 d9 02 c0 04 	test   BYTE PTR ds:0xc002d940,0x4
c000ec03:	0f 94 05 60 c8 02 c0 	sete   BYTE PTR ds:0xc002c860
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 59 8e 00 00       	call   c0017a72 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 b2 4e 00 00       	call   c0013ada <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 00 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e00
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 5a 9c 00 00       	call   c00188b6 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 6f 4e 00 00       	call   c0013ada <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 eb 53 00 00       	call   c0014072 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 3f 4e 00 00       	call   c0013ada <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 5c 9e 02 c0       	push   0xc0029e5c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 cb eb 00 00       	call   c001d894 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 77 9e 02 c0       	push   0xc0029e77
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 8a 39 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 88 9e 02 c0       	push   0xc0029e88
c000ed34:	e8 d4 b0 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 95 9e 02 c0       	push   0xc0029e95
c000ed49:	e8 bf b0 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 9f 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029e9f
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 a8 b0 00 00       	jmp    c0019e0d <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 32 d9 02 c0       	mov    ds:0xc002d932,eax
c000ee21:	66 89 15 30 d9 02 c0 	mov    WORD PTR ds:0xc002d930,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c000ef38:	48                   	dec    eax
c000ef39:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 28 d9 02 c0    	push   DWORD PTR ds:0xc002d928
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 61 94 01 00       	call   c00283f0 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 58 94 01 00       	call   c00283f0 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 38 d9 02 c0 ff 07 	mov    WORD PTR ds:0xc002d938,0x7ff
c000f085:	a3 3a d9 02 c0       	mov    ds:0xc002d93a,eax
c000f08a:	0f 01 1d 38 d9 02 c0 	lidtd  ds:0xc002d938
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c000f37c:	e8 33 27 00 00       	call   c0011ab4 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 9d 17 00 00       	call   c0010b3c <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 ce 17 00 00       	call   c0010b7c <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 28 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d928
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d fc c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6fc
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 fc c6 02 c0       	mov    eax,ds:0xc002c6fc
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 40 9f 02 c0       	push   0xc0029f40
c000f455:	e8 47 32 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 fc c6 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c6fc,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 90 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da90
c000f481:	8b 2d fc c6 02 c0    	mov    ebp,DWORD PTR ds:0xc002c6fc
c000f487:	e8 e5 04 00 00       	call   c000f971 <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 19 25 00 00       	call   c00119b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d fc c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6fc
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 70 9f 02 c0       	push   0xc0029f70
c000f50d:	e8 fb a8 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 75 9f 02 c0       	push   0xc0029f75
c000f523:	e8 e5 a8 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c000f543:	48                   	dec    eax
c000f544:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c000f561:	e8 4e 25 00 00       	call   c0011ab4 <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c000f577:	e8 e2 21 00 00       	call   c001175e <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 7c 9f 02 c0       	push   0xc0029f7c
c000f6a4:	e8 f8 2f 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 90 09 00 00       	call   c001003e <installVgaTextImplementation()>
c000f6ae:	0f b6 05 00 c7 02 c0 	movzx  eax,BYTE PTR ds:0xc002c700
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 00 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3900]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 36 c7 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd38ca],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 35 c7 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd38cb]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 00 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3900]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 94 9f 02 c0       	push   0xc0029f94
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 40 d9 02 c0       	mov    ds:0xc002d940,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 a7 03 00 00       	call   c000fafd <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 59 1c 00 00       	call   c00113b4 <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 20 1e 00 00       	call   c0011586 <VAS::VAS()>
c000f766:	89 1d 90 da 02 c0    	mov    DWORD PTR ds:0xc002da90,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 28 d9 02 c0    	mov    DWORD PTR ds:0xc002d928,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 94 20 00 00       	call   c0011836 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 d2                	xor    edx,edx
c000f7ac:	57                   	push   edi
c000f7ad:	31 ed                	xor    ebp,ebp
c000f7af:	56                   	push   esi
c000f7b0:	31 c9                	xor    ecx,ecx
c000f7b2:	53                   	push   ebx
c000f7b3:	31 db                	xor    ebx,ebx
c000f7b5:	83 ec 0c             	sub    esp,0xc
c000f7b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7bc:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7c2:	c1 ee 0c             	shr    esi,0xc
c000f7c5:	eb 17                	jmp    c000f7de <Phys::allocateDMA(unsigned long)+0x35>
c000f7c7:	85 c9                	test   ecx,ecx
c000f7c9:	75 04                	jne    c000f7cf <Phys::allocateDMA(unsigned long)+0x26>
c000f7cb:	89 d5                	mov    ebp,edx
c000f7cd:	89 d3                	mov    ebx,edx
c000f7cf:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7d2:	39 c6                	cmp    esi,eax
c000f7d4:	74 23                	je     c000f7f9 <Phys::allocateDMA(unsigned long)+0x50>
c000f7d6:	42                   	inc    edx
c000f7d7:	89 c1                	mov    ecx,eax
c000f7d9:	83 fa 2f             	cmp    edx,0x2f
c000f7dc:	7f 11                	jg     c000f7ef <Phys::allocateDMA(unsigned long)+0x46>
c000f7de:	80 ba 80 d9 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2680],0x0
c000f7e5:	74 e0                	je     c000f7c7 <Phys::allocateDMA(unsigned long)+0x1e>
c000f7e7:	31 c9                	xor    ecx,ecx
c000f7e9:	42                   	inc    edx
c000f7ea:	83 fa 2f             	cmp    edx,0x2f
c000f7ed:	7e ef                	jle    c000f7de <Phys::allocateDMA(unsigned long)+0x35>
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	31 c0                	xor    eax,eax
c000f7f4:	5b                   	pop    ebx
c000f7f5:	5e                   	pop    esi
c000f7f6:	5f                   	pop    edi
c000f7f7:	5d                   	pop    ebp
c000f7f8:	c3                   	ret    
c000f7f9:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f7fc:	89 d7                	mov    edi,edx
c000f7fe:	4f                   	dec    edi
c000f7ff:	79 03                	jns    c000f804 <Phys::allocateDMA(unsigned long)+0x5b>
c000f801:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f804:	c1 ff 04             	sar    edi,0x4
c000f807:	89 da                	mov    edx,ebx
c000f809:	c1 fa 04             	sar    edx,0x4
c000f80c:	39 fa                	cmp    edx,edi
c000f80e:	75 43                	jne    c000f853 <Phys::allocateDMA(unsigned long)+0xaa>
c000f810:	85 c0                	test   eax,eax
c000f812:	74 1a                	je     c000f82e <Phys::allocateDMA(unsigned long)+0x85>
c000f814:	be 80 d9 02 c0       	mov    esi,0xc002d980
c000f819:	8d 93 80 d9 02 c0    	lea    edx,[ebx-0x3ffd2680]
c000f81f:	f7 d6                	not    esi
c000f821:	29 de                	sub    esi,ebx
c000f823:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f826:	42                   	inc    edx
c000f827:	8d 04 16             	lea    eax,[esi+edx*1]
c000f82a:	39 c1                	cmp    ecx,eax
c000f82c:	7f f5                	jg     c000f823 <Phys::allocateDMA(unsigned long)+0x7a>
c000f82e:	83 ec 0c             	sub    esp,0xc
c000f831:	68 b3 9f 02 c0       	push   0xc0029fb3
c000f836:	e8 66 2e 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000f83b:	83 c4 10             	add    esp,0x10
c000f83e:	85 ff                	test   edi,edi
c000f840:	74 17                	je     c000f859 <Phys::allocateDMA(unsigned long)+0xb0>
c000f842:	83 c4 0c             	add    esp,0xc
c000f845:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f84b:	5b                   	pop    ebx
c000f84c:	c1 e0 0c             	shl    eax,0xc
c000f84f:	5e                   	pop    esi
c000f850:	5f                   	pop    edi
c000f851:	5d                   	pop    ebp
c000f852:	c3                   	ret    
c000f853:	89 ea                	mov    edx,ebp
c000f855:	31 c9                	xor    ecx,ecx
c000f857:	eb 90                	jmp    c000f7e9 <Phys::allocateDMA(unsigned long)+0x40>
c000f859:	83 c4 0c             	add    esp,0xc
c000f85c:	c1 e3 0c             	shl    ebx,0xc
c000f85f:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f865:	5b                   	pop    ebx
c000f866:	5e                   	pop    esi
c000f867:	5f                   	pop    edi
c000f868:	5d                   	pop    ebp
c000f869:	c3                   	ret    

c000f86a <Phys::freeDMA(unsigned long, unsigned long)>:
c000f86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f86e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f872:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f878:	c1 e9 0c             	shr    ecx,0xc
c000f87b:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f880:	76 25                	jbe    c000f8a7 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f882:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f887:	c1 e8 0c             	shr    eax,0xc
c000f88a:	8d 50 10             	lea    edx,[eax+0x10]
c000f88d:	85 c9                	test   ecx,ecx
c000f88f:	74 15                	je     c000f8a6 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f891:	8d 82 80 d9 02 c0    	lea    eax,[edx-0x3ffd2680]
c000f897:	8d 94 11 80 d9 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2680]
c000f89e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8a1:	40                   	inc    eax
c000f8a2:	39 d0                	cmp    eax,edx
c000f8a4:	75 f8                	jne    c000f89e <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f8a6:	c3                   	ret    
c000f8a7:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8ad:	c1 ea 0c             	shr    edx,0xc
c000f8b0:	eb db                	jmp    c000f88d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f8b2 <Phys::setPageState(unsigned long, bool)>:
c000f8b2:	56                   	push   esi
c000f8b3:	ba 01 00 00 00       	mov    edx,0x1
c000f8b8:	53                   	push   ebx
c000f8b9:	8b 35 44 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c844
c000f8bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8c7:	89 c8                	mov    eax,ecx
c000f8c9:	83 e1 07             	and    ecx,0x7
c000f8cc:	c1 e8 03             	shr    eax,0x3
c000f8cf:	d3 e3                	shl    ebx,cl
c000f8d1:	01 c6                	add    esi,eax
c000f8d3:	d3 e2                	shl    edx,cl
c000f8d5:	f7 d2                	not    edx
c000f8d7:	20 16                	and    BYTE PTR [esi],dl
c000f8d9:	03 05 44 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c844
c000f8df:	08 18                	or     BYTE PTR [eax],bl
c000f8e1:	5b                   	pop    ebx
c000f8e2:	5e                   	pop    esi
c000f8e3:	c3                   	ret    

c000f8e4 <Phys::getPageState(unsigned long)>:
c000f8e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8e8:	8b 15 44 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c844
c000f8ee:	89 c8                	mov    eax,ecx
c000f8f0:	83 e1 07             	and    ecx,0x7
c000f8f3:	c1 e8 03             	shr    eax,0x3
c000f8f6:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8fa:	d3 f8                	sar    eax,cl
c000f8fc:	83 e0 01             	and    eax,0x1
c000f8ff:	c3                   	ret    

c000f900 <Phys::freePage(unsigned long)>:
c000f900:	53                   	push   ebx
c000f901:	83 ec 10             	sub    esp,0x10
c000f904:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f908:	53                   	push   ebx
c000f909:	68 ca 9f 02 c0       	push   0xc0029fca
c000f90e:	e8 8e 2d 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000f913:	83 c4 10             	add    esp,0x10
c000f916:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f91c:	76 3d                	jbe    c000f95b <Phys::freePage(unsigned long)+0x5b>
c000f91e:	83 ec 0c             	sub    esp,0xc
c000f921:	c1 eb 0c             	shr    ebx,0xc
c000f924:	53                   	push   ebx
c000f925:	e8 ba ff ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000f92a:	83 c4 10             	add    esp,0x10
c000f92d:	84 c0                	test   al,al
c000f92f:	74 19                	je     c000f94a <Phys::freePage(unsigned long)+0x4a>
c000f931:	83 ec 08             	sub    esp,0x8
c000f934:	ff 0d 70 d9 02 c0    	dec    DWORD PTR ds:0xc002d970
c000f93a:	6a 00                	push   0x0
c000f93c:	53                   	push   ebx
c000f93d:	e8 70 ff ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000f942:	83 c4 10             	add    esp,0x10
c000f945:	83 c4 08             	add    esp,0x8
c000f948:	5b                   	pop    ebx
c000f949:	c3                   	ret    
c000f94a:	c7 44 24 10 dd 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029fdd
c000f952:	83 c4 08             	add    esp,0x8
c000f955:	5b                   	pop    ebx
c000f956:	e9 b2 a4 00 00       	jmp    c0019e0d <Krnl::panic(char const*)>
c000f95b:	83 ec 08             	sub    esp,0x8
c000f95e:	68 00 10 00 00       	push   0x1000
c000f963:	53                   	push   ebx
c000f964:	e8 01 ff ff ff       	call   c000f86a <Phys::freeDMA(unsigned long, unsigned long)>
c000f969:	83 c4 10             	add    esp,0x10
c000f96c:	83 c4 08             	add    esp,0x8
c000f96f:	5b                   	pop    ebx
c000f970:	c3                   	ret    

c000f971 <Phys::allocatePage()>:
c000f971:	56                   	push   esi
c000f972:	53                   	push   ebx
c000f973:	83 ec 14             	sub    esp,0x14
c000f976:	8b 35 64 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d964
c000f97c:	89 f3                	mov    ebx,esi
c000f97e:	eb 0a                	jmp    c000f98a <Phys::allocatePage()+0x19>
c000f980:	89 1d 64 d9 02 c0    	mov    DWORD PTR ds:0xc002d964,ebx
c000f986:	39 de                	cmp    esi,ebx
c000f988:	74 24                	je     c000f9ae <Phys::allocatePage()+0x3d>
c000f98a:	53                   	push   ebx
c000f98b:	e8 54 ff ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000f990:	5a                   	pop    edx
c000f991:	84 c0                	test   al,al
c000f993:	74 76                	je     c000fa0b <Phys::allocatePage()+0x9a>
c000f995:	43                   	inc    ebx
c000f996:	81 fb 00 00 08 00    	cmp    ebx,0x80000
c000f99c:	75 e2                	jne    c000f980 <Phys::allocatePage()+0xf>
c000f99e:	31 db                	xor    ebx,ebx
c000f9a0:	c7 05 64 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d964,0x0
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	75 dc                	jne    c000f98a <Phys::allocatePage()+0x19>
c000f9ae:	83 ec 0c             	sub    esp,0xc
c000f9b1:	68 11 a0 02 c0       	push   0xc002a011
c000f9b6:	e8 e6 2c 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000f9bb:	58                   	pop    eax
c000f9bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9c4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ca:	e8 97 29 00 00       	call   c0012366 <VAS::scanForEviction()>
c000f9cf:	83 c4 10             	add    esp,0x10
c000f9d2:	85 c0                	test   eax,eax
c000f9d4:	75 76                	jne    c000fa4c <Phys::allocatePage()+0xdb>
c000f9d6:	83 ec 0c             	sub    esp,0xc
c000f9d9:	68 00 10 00 00       	push   0x1000
c000f9de:	e8 c6 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000f9e3:	83 c4 10             	add    esp,0x10
c000f9e6:	85 c0                	test   eax,eax
c000f9e8:	75 5c                	jne    c000fa46 <Phys::allocatePage()+0xd5>
c000f9ea:	83 ec 0c             	sub    esp,0xc
c000f9ed:	68 29 a0 02 c0       	push   0xc002a029
c000f9f2:	e8 16 a4 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c000f9f7:	83 c4 10             	add    esp,0x10
c000f9fa:	8b 1d 64 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d964
c000fa00:	53                   	push   ebx
c000fa01:	e8 de fe ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000fa06:	5a                   	pop    edx
c000fa07:	84 c0                	test   al,al
c000fa09:	75 8a                	jne    c000f995 <Phys::allocatePage()+0x24>
c000fa0b:	6a 01                	push   0x1
c000fa0d:	53                   	push   ebx
c000fa0e:	e8 9f fe ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fa13:	5a                   	pop    edx
c000fa14:	a1 70 d9 02 c0       	mov    eax,ds:0xc002d970
c000fa19:	59                   	pop    ecx
c000fa1a:	40                   	inc    eax
c000fa1b:	8b 15 64 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d964
c000fa21:	a3 70 d9 02 c0       	mov    ds:0xc002d970,eax
c000fa26:	c1 e2 0c             	shl    edx,0xc
c000fa29:	52                   	push   edx
c000fa2a:	ff 35 74 d9 02 c0    	push   DWORD PTR ds:0xc002d974
c000fa30:	50                   	push   eax
c000fa31:	68 f3 9f 02 c0       	push   0xc0029ff3
c000fa36:	e8 66 2c 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000fa3b:	a1 64 d9 02 c0       	mov    eax,ds:0xc002d964
c000fa40:	83 c4 10             	add    esp,0x10
c000fa43:	c1 e0 0c             	shl    eax,0xc
c000fa46:	83 c4 14             	add    esp,0x14
c000fa49:	5b                   	pop    ebx
c000fa4a:	5e                   	pop    esi
c000fa4b:	c3                   	ret    
c000fa4c:	83 ec 08             	sub    esp,0x8
c000fa4f:	89 c2                	mov    edx,eax
c000fa51:	6a 01                	push   0x1
c000fa53:	c1 ea 0c             	shr    edx,0xc
c000fa56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa5a:	52                   	push   edx
c000fa5b:	e8 52 fe ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fa60:	83 c4 10             	add    esp,0x10
c000fa63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa67:	eb dd                	jmp    c000fa46 <Phys::allocatePage()+0xd5>

c000fa69 <Phys::allocateContiguousPages(int)>:
c000fa69:	57                   	push   edi
c000fa6a:	56                   	push   esi
c000fa6b:	53                   	push   ebx
c000fa6c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa70:	fa                   	cli    
c000fa71:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c000fa77:	31 db                	xor    ebx,ebx
c000fa79:	85 db                	test   ebx,ebx
c000fa7b:	75 11                	jne    c000fa8e <Phys::allocateContiguousPages(int)+0x25>
c000fa7d:	e8 ef fe ff ff       	call   c000f971 <Phys::allocatePage()>
c000fa82:	83 fe 01             	cmp    esi,0x1
c000fa85:	89 c7                	mov    edi,eax
c000fa87:	74 21                	je     c000faaa <Phys::allocateContiguousPages(int)+0x41>
c000fa89:	bb 01 00 00 00       	mov    ebx,0x1
c000fa8e:	e8 de fe ff ff       	call   c000f971 <Phys::allocatePage()>
c000fa93:	89 da                	mov    edx,ebx
c000fa95:	c1 e2 0c             	shl    edx,0xc
c000fa98:	01 fa                	add    edx,edi
c000fa9a:	39 c2                	cmp    edx,eax
c000fa9c:	74 20                	je     c000fabe <Phys::allocateContiguousPages(int)+0x55>
c000fa9e:	bb 01 00 00 00       	mov    ebx,0x1
c000faa3:	89 c7                	mov    edi,eax
c000faa5:	83 fe 01             	cmp    esi,0x1
c000faa8:	75 e4                	jne    c000fa8e <Phys::allocateContiguousPages(int)+0x25>
c000faaa:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c000faaf:	48                   	dec    eax
c000fab0:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c000fab5:	75 01                	jne    c000fab8 <Phys::allocateContiguousPages(int)+0x4f>
c000fab7:	fb                   	sti    
c000fab8:	89 f8                	mov    eax,edi
c000faba:	5b                   	pop    ebx
c000fabb:	5e                   	pop    esi
c000fabc:	5f                   	pop    edi
c000fabd:	c3                   	ret    
c000fabe:	43                   	inc    ebx
c000fabf:	39 f3                	cmp    ebx,esi
c000fac1:	75 b6                	jne    c000fa79 <Phys::allocateContiguousPages(int)+0x10>
c000fac3:	eb e5                	jmp    c000faaa <Phys::allocateContiguousPages(int)+0x41>

c000fac5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fac5:	56                   	push   esi
c000fac6:	53                   	push   ebx
c000fac7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000facb:	39 1d 68 d9 02 c0    	cmp    DWORD PTR ds:0xc002d968,ebx
c000fad1:	73 06                	jae    c000fad9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fad3:	89 1d 68 d9 02 c0    	mov    DWORD PTR ds:0xc002d968,ebx
c000fad9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fadd:	c1 eb 0c             	shr    ebx,0xc
c000fae0:	c1 e8 0c             	shr    eax,0xc
c000fae3:	39 d8                	cmp    eax,ebx
c000fae5:	73 13                	jae    c000fafa <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fae7:	6a 00                	push   0x0
c000fae9:	8d 70 01             	lea    esi,[eax+0x1]
c000faec:	50                   	push   eax
c000faed:	e8 c0 fd ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000faf2:	5a                   	pop    edx
c000faf3:	89 f0                	mov    eax,esi
c000faf5:	59                   	pop    ecx
c000faf6:	39 f3                	cmp    ebx,esi
c000faf8:	75 ed                	jne    c000fae7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fafa:	5b                   	pop    ebx
c000fafb:	5e                   	pop    esi
c000fafc:	c3                   	ret    

c000fafd <Phys::physicalMemorySetup(unsigned int)>:
c000fafd:	55                   	push   ebp
c000fafe:	57                   	push   edi
c000faff:	56                   	push   esi
c000fb00:	53                   	push   ebx
c000fb01:	83 ec 40             	sub    esp,0x40
c000fb04:	6a 30                	push   0x30
c000fb06:	6a 00                	push   0x0
c000fb08:	68 80 d9 02 c0       	push   0xc002d980
c000fb0d:	e8 3e 0c ff ff       	call   c0000750 <memset>
c000fb12:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb16:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb1b:	05 00 10 00 00       	add    eax,0x1000
c000fb20:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb24:	59                   	pop    ecx
c000fb25:	5b                   	pop    ebx
c000fb26:	31 db                	xor    ebx,ebx
c000fb28:	50                   	push   eax
c000fb29:	68 37 a0 02 c0       	push   0xc002a037
c000fb2e:	e8 6e 2b 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000fb33:	83 c4 10             	add    esp,0x10
c000fb36:	83 ec 08             	sub    esp,0x8
c000fb39:	6a 01                	push   0x1
c000fb3b:	53                   	push   ebx
c000fb3c:	43                   	inc    ebx
c000fb3d:	e8 70 fd ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fb42:	83 c4 10             	add    esp,0x10
c000fb45:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb4b:	75 e9                	jne    c000fb36 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb4d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb54:	66 85 c0             	test   ax,ax
c000fb57:	0f 84 7d 01 00 00    	je     c000fcda <Phys::physicalMemorySetup(unsigned int)+0x1dd>
c000fb5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb61:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb6d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb76:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb7e:	eb 15                	jmp    c000fb95 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fb80:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fb84:	83 c3 18             	add    ebx,0x18
c000fb87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb8b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fb8f:	0f 84 55 01 00 00    	je     c000fcea <Phys::physicalMemorySetup(unsigned int)+0x1ed>
c000fb95:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fb98:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fb9b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fb9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fba2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fba6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fba8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fbab:	01 f0                	add    eax,esi
c000fbad:	55                   	push   ebp
c000fbae:	11 fa                	adc    edx,edi
c000fbb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbb4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbbc:	56                   	push   esi
c000fbbd:	68 98 a0 02 c0       	push   0xc002a098
c000fbc2:	e8 da 2a 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000fbc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbcb:	83 c4 10             	add    esp,0x10
c000fbce:	09 f8                	or     eax,edi
c000fbd0:	0f 85 14 01 00 00    	jne    c000fcea <Phys::physicalMemorySetup(unsigned int)+0x1ed>
c000fbd6:	4d                   	dec    ebp
c000fbd7:	75 a7                	jne    c000fb80 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fbd9:	ba 00 00 08 00       	mov    edx,0x80000
c000fbde:	89 c1                	mov    ecx,eax
c000fbe0:	39 f2                	cmp    edx,esi
c000fbe2:	19 f9                	sbb    ecx,edi
c000fbe4:	0f 82 9a 00 00 00    	jb     c000fc84 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fbea:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fbee:	89 c1                	mov    ecx,eax
c000fbf0:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fbf4:	0f 83 8a 00 00 00    	jae    c000fc84 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fbfa:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fbff:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc03:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc07:	39 fa                	cmp    edx,edi
c000fc09:	19 e8                	sbb    eax,ebp
c000fc0b:	0f 82 10 01 00 00    	jb     c000fd21 <Phys::physicalMemorySetup(unsigned int)+0x224>
c000fc11:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc15:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc19:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc1f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc24:	83 d5 ff             	adc    ebp,0xffffffff
c000fc27:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc2b:	31 c0                	xor    eax,eax
c000fc2d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc31:	39 fa                	cmp    edx,edi
c000fc33:	89 c1                	mov    ecx,eax
c000fc35:	19 e9                	sbb    ecx,ebp
c000fc37:	0f 83 43 ff ff ff    	jae    c000fb80 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc3d:	be 00 00 08 00       	mov    esi,0x80000
c000fc42:	83 ec 08             	sub    esp,0x8
c000fc45:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc49:	56                   	push   esi
c000fc4a:	e8 76 fe ff ff       	call   c000fac5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc4f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc57:	83 c4 0c             	add    esp,0xc
c000fc5a:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc5e:	03 05 74 d9 02 c0    	add    eax,DWORD PTR ds:0xc002d974
c000fc64:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc6b:	a3 74 d9 02 c0       	mov    ds:0xc002d974,eax
c000fc70:	52                   	push   edx
c000fc71:	50                   	push   eax
c000fc72:	68 5d a0 02 c0       	push   0xc002a05d
c000fc77:	e8 25 2a 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000fc7c:	83 c4 10             	add    esp,0x10
c000fc7f:	e9 fc fe ff ff       	jmp    c000fb80 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc84:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fc8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fc90:	39 ea                	cmp    edx,ebp
c000fc92:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fc96:	0f 82 e4 fe ff ff    	jb     c000fb80 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc9c:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fca1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fca5:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fca9:	0f 83 d1 fe ff ff    	jae    c000fb80 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fcaf:	39 ee                	cmp    esi,ebp
c000fcb1:	89 f8                	mov    eax,edi
c000fcb3:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fcb7:	73 89                	jae    c000fc42 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcc1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcc5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcc9:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fccd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fcd1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fcd5:	e9 68 ff ff ff       	jmp    c000fc42 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcda:	83 ec 0c             	sub    esp,0xc
c000fcdd:	68 4f a0 02 c0       	push   0xc002a04f
c000fce2:	e8 26 a1 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c000fce7:	83 c4 10             	add    esp,0x10
c000fcea:	bb 40 01 00 00       	mov    ebx,0x140
c000fcef:	83 ec 08             	sub    esp,0x8
c000fcf2:	53                   	push   ebx
c000fcf3:	68 79 a0 02 c0       	push   0xc002a079
c000fcf8:	e8 a4 29 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c000fcfd:	58                   	pop    eax
c000fcfe:	5a                   	pop    edx
c000fcff:	6a 00                	push   0x0
c000fd01:	53                   	push   ebx
c000fd02:	43                   	inc    ebx
c000fd03:	e8 aa fb ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fd08:	ff 05 74 d9 02 c0    	inc    DWORD PTR ds:0xc002d974
c000fd0e:	83 c4 10             	add    esp,0x10
c000fd11:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd17:	75 d6                	jne    c000fcef <Phys::physicalMemorySetup(unsigned int)+0x1f2>
c000fd19:	83 c4 3c             	add    esp,0x3c
c000fd1c:	5b                   	pop    ebx
c000fd1d:	5e                   	pop    esi
c000fd1e:	5f                   	pop    edi
c000fd1f:	5d                   	pop    ebp
c000fd20:	c3                   	ret    
c000fd21:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd29:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd31:	e9 db fe ff ff       	jmp    c000fc11 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000fd36 <Pipe::isAtty()>:
c000fd36:	31 c0                	xor    eax,eax
c000fd38:	c3                   	ret    
c000fd39:	90                   	nop

c000fd3a <Pipe::~Pipe()>:
c000fd3a:	83 ec 0c             	sub    esp,0xc
c000fd3d:	ba fc a0 02 c0       	mov    edx,0xc002a0fc
c000fd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd46:	89 10                	mov    DWORD PTR [eax],edx
c000fd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd4c:	83 ec 0c             	sub    esp,0xc
c000fd4f:	50                   	push   eax
c000fd50:	e8 3f 12 00 00       	call   c0010f94 <UnixFile::~UnixFile()>
c000fd55:	83 c4 10             	add    esp,0x10
c000fd58:	90                   	nop
c000fd59:	83 c4 0c             	add    esp,0xc
c000fd5c:	c3                   	ret    
c000fd5d:	90                   	nop

c000fd5e <Pipe::~Pipe()>:
c000fd5e:	83 ec 0c             	sub    esp,0xc
c000fd61:	83 ec 0c             	sub    esp,0xc
c000fd64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd68:	e8 cd ff ff ff       	call   c000fd3a <Pipe::~Pipe()>
c000fd6d:	83 c4 10             	add    esp,0x10
c000fd70:	83 ec 08             	sub    esp,0x8
c000fd73:	6a 20                	push   0x20
c000fd75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd79:	e8 4b 28 00 00       	call   c00125c9 <operator delete(void*, unsigned long)>
c000fd7e:	83 c4 10             	add    esp,0x10
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop

c000fd86 <Pipe::read(unsigned long long, void*, int*)>:
c000fd86:	55                   	push   ebp
c000fd87:	57                   	push   edi
c000fd88:	56                   	push   esi
c000fd89:	53                   	push   ebx
c000fd8a:	83 ec 1c             	sub    esp,0x1c
c000fd8d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd91:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd95:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fd99:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fd9c:	89 c8                	mov    eax,ecx
c000fd9e:	99                   	cdq    
c000fd9f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fda3:	74 24                	je     c000fdc9 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fda5:	39 f9                	cmp    ecx,edi
c000fda7:	89 d1                	mov    ecx,edx
c000fda9:	19 f1                	sbb    ecx,esi
c000fdab:	73 1c                	jae    c000fdc9 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdad:	fa                   	cli    
c000fdae:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c000fdb4:	e8 de db 00 00       	call   c001d997 <schedule()>
c000fdb9:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c000fdbe:	48                   	dec    eax
c000fdbf:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c000fdc4:	75 d3                	jne    c000fd99 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdc6:	fb                   	sti    
c000fdc7:	eb d0                	jmp    c000fd99 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdc9:	39 f8                	cmp    eax,edi
c000fdcb:	89 d1                	mov    ecx,edx
c000fdcd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdd0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdd4:	19 f1                	sbb    ecx,esi
c000fdd6:	73 07                	jae    c000fddf <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fdd8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fddb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fddf:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fde2:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fde5:	29 f7                	sub    edi,esi
c000fde7:	89 f8                	mov    eax,edi
c000fde9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fded:	99                   	cdq    
c000fdee:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fdf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdf5:	19 d0                	sbb    eax,edx
c000fdf7:	73 07                	jae    c000fe00 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fdf9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fdfc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe00:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe03:	89 ea                	mov    edx,ebp
c000fe05:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe09:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe0e:	74 0d                	je     c000fe1d <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe10:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe13:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe17:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe1d:	85 d2                	test   edx,edx
c000fe1f:	74 11                	je     c000fe32 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe25:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe28:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe2c:	89 d1                	mov    ecx,edx
c000fe2e:	89 c7                	mov    edi,eax
c000fe30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe32:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe35:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe38:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe3b:	99                   	cdq    
c000fe3c:	89 f7                	mov    edi,esi
c000fe3e:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe41:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe45:	c1 ff 1f             	sar    edi,0x1f
c000fe48:	57                   	push   edi
c000fe49:	56                   	push   esi
c000fe4a:	52                   	push   edx
c000fe4b:	50                   	push   eax
c000fe4c:	e8 93 69 01 00       	call   c00267e4 <__umoddi3>
c000fe51:	83 c4 10             	add    esp,0x10
c000fe54:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe57:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe5c:	75 10                	jne    c000fe6e <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe5e:	83 ec 0c             	sub    esp,0xc
c000fe61:	68 b9 a0 02 c0       	push   0xc002a0b9
c000fe66:	e8 a2 9f 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c000fe6b:	83 c4 10             	add    esp,0x10
c000fe6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe72:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe75:	89 10                	mov    DWORD PTR [eax],edx
c000fe77:	83 c4 1c             	add    esp,0x1c
c000fe7a:	31 c0                	xor    eax,eax
c000fe7c:	5b                   	pop    ebx
c000fe7d:	5e                   	pop    esi
c000fe7e:	5f                   	pop    edi
c000fe7f:	5d                   	pop    ebp
c000fe80:	c3                   	ret    
c000fe81:	90                   	nop

c000fe82 <Pipe::write(unsigned long long, void*, int*)>:
c000fe82:	55                   	push   ebp
c000fe83:	57                   	push   edi
c000fe84:	56                   	push   esi
c000fe85:	53                   	push   ebx
c000fe86:	83 ec 1c             	sub    esp,0x1c
c000fe89:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe91:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fe94:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fe98:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe9b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe9f:	89 d8                	mov    eax,ebx
c000fea1:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fea4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fea8:	89 d6                	mov    esi,edx
c000feaa:	89 d7                	mov    edi,edx
c000feac:	c1 ff 1f             	sar    edi,0x1f
c000feaf:	03 34 24             	add    esi,DWORD PTR [esp]
c000feb2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000feb6:	c1 f8 1f             	sar    eax,0x1f
c000feb9:	39 f3                	cmp    ebx,esi
c000febb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000febf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fec3:	19 f8                	sbb    eax,edi
c000fec5:	b8 01 00 00 00       	mov    eax,0x1
c000feca:	72 6e                	jb     c000ff3a <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fecc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fecf:	01 d0                	add    eax,edx
c000fed1:	99                   	cdq    
c000fed2:	f7 fb                	idiv   ebx
c000fed4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fed8:	29 d3                	sub    ebx,edx
c000feda:	89 d7                	mov    edi,edx
c000fedc:	89 de                	mov    esi,ebx
c000fede:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fee1:	c1 fb 1f             	sar    ebx,0x1f
c000fee4:	39 f2                	cmp    edx,esi
c000fee6:	19 d8                	sbb    eax,ebx
c000fee8:	b8 00 00 00 00       	mov    eax,0x0
c000feed:	72 04                	jb     c000fef3 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000feef:	89 d0                	mov    eax,edx
c000fef1:	29 f0                	sub    eax,esi
c000fef3:	89 d3                	mov    ebx,edx
c000fef5:	29 c3                	sub    ebx,eax
c000fef7:	74 0b                	je     c000ff04 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000fef9:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fefc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff00:	89 d9                	mov    ecx,ebx
c000ff02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff04:	85 c0                	test   eax,eax
c000ff06:	74 0d                	je     c000ff15 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff08:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff0c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff0f:	89 de                	mov    esi,ebx
c000ff11:	89 c1                	mov    ecx,eax
c000ff13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff15:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff18:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff1d:	75 10                	jne    c000ff2f <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff1f:	83 ec 0c             	sub    esp,0xc
c000ff22:	68 d5 a0 02 c0       	push   0xc002a0d5
c000ff27:	e8 e1 9e 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c000ff2c:	83 c4 10             	add    esp,0x10
c000ff2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff33:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff36:	89 08                	mov    DWORD PTR [eax],ecx
c000ff38:	31 c0                	xor    eax,eax
c000ff3a:	83 c4 1c             	add    esp,0x1c
c000ff3d:	5b                   	pop    ebx
c000ff3e:	5e                   	pop    esi
c000ff3f:	5f                   	pop    edi
c000ff40:	5d                   	pop    ebp
c000ff41:	c3                   	ret    

c000ff42 <Pipe::Pipe(int)>:
c000ff42:	83 ec 0c             	sub    esp,0xc
c000ff45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff49:	83 ec 08             	sub    esp,0x8
c000ff4c:	6a 00                	push   0x0
c000ff4e:	50                   	push   eax
c000ff4f:	e8 5e 0e 00 00       	call   c0010db2 <UnixFile::UnixFile(int)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	ba fc a0 02 c0       	mov    edx,0xc002a0fc
c000ff5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff60:	89 10                	mov    DWORD PTR [eax],edx
c000ff62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff6a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff71:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff7c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff87:	83 ec 0c             	sub    esp,0xc
c000ff8a:	50                   	push   eax
c000ff8b:	e8 09 f6 ff ff       	call   c000f599 <malloc>
c000ff90:	83 c4 10             	add    esp,0x10
c000ff93:	89 c2                	mov    edx,eax
c000ff95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff99:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ff9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffa4:	90                   	nop
c000ffa5:	83 c4 0c             	add    esp,0xc
c000ffa8:	c3                   	ret    
c000ffa9:	90                   	nop

c000ffaa <VgaText::isAtty()>:
c000ffaa:	b0 01                	mov    al,0x1
c000ffac:	c3                   	ret    
c000ffad:	90                   	nop

c000ffae <VgaText::~VgaText()>:
c000ffae:	83 ec 0c             	sub    esp,0xc
c000ffb1:	ba 84 a1 02 c0       	mov    edx,0xc002a184
c000ffb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffba:	89 10                	mov    DWORD PTR [eax],edx
c000ffbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc0:	83 ec 0c             	sub    esp,0xc
c000ffc3:	50                   	push   eax
c000ffc4:	e8 cb 0f 00 00       	call   c0010f94 <UnixFile::~UnixFile()>
c000ffc9:	83 c4 10             	add    esp,0x10
c000ffcc:	90                   	nop
c000ffcd:	83 c4 0c             	add    esp,0xc
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <VgaText::~VgaText()>:
c000ffd2:	83 ec 0c             	sub    esp,0xc
c000ffd5:	83 ec 0c             	sub    esp,0xc
c000ffd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffdc:	e8 cd ff ff ff       	call   c000ffae <VgaText::~VgaText()>
c000ffe1:	83 c4 10             	add    esp,0x10
c000ffe4:	83 ec 08             	sub    esp,0x8
c000ffe7:	68 c4 02 00 00       	push   0x2c4
c000ffec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fff0:	e8 d4 25 00 00       	call   c00125c9 <operator delete(void*, unsigned long)>
c000fff5:	83 c4 10             	add    esp,0x10
c000fff8:	83 c4 0c             	add    esp,0xc
c000fffb:	c3                   	ret    

c000fffc <VgaText::read(unsigned long long, void*, int*)>:
c000fffc:	83 ec 10             	sub    esp,0x10
c000ffff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010003:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010007:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001000b:	e8 58 5b 00 00       	call   c0015b68 <readKeyboard(VgaText*, char*, unsigned long)>
c0010010:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010014:	89 02                	mov    DWORD PTR [edx],eax
c0010016:	31 c0                	xor    eax,eax
c0010018:	83 c4 1c             	add    esp,0x1c
c001001b:	c3                   	ret    

c001001c <setTerminalScrollLock(bool)>:
c001001c:	c3                   	ret    

c001001d <addToTerminalCycle(VgaText*)>:
c001001d:	8b 15 e0 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9e0
c0010023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010027:	85 d2                	test   edx,edx
c0010029:	75 09                	jne    c0010034 <addToTerminalCycle(VgaText*)+0x17>
c001002b:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001002e:	a3 e0 d9 02 c0       	mov    ds:0xc002d9e0,eax
c0010033:	c3                   	ret    
c0010034:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010037:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001003a:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001003d:	c3                   	ret    

c001003e <installVgaTextImplementation()>:
c001003e:	83 ec 10             	sub    esp,0x10
c0010041:	6a 20                	push   0x20
c0010043:	6a 00                	push   0x0
c0010045:	68 c0 d9 02 c0       	push   0xc002d9c0
c001004a:	e8 01 07 ff ff       	call   c0000750 <memset>
c001004f:	83 c4 1c             	add    esp,0x1c
c0010052:	c3                   	ret    

c0010053 <scrollTerminalScrollLock(int)>:
c0010053:	c3                   	ret    

c0010054 <VgaText::updateTitle()>:
c0010054:	53                   	push   ebx
c0010055:	31 c0                	xor    eax,eax
c0010057:	83 ec 58             	sub    esp,0x58
c001005a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001005e:	89 e1                	mov    ecx,esp
c0010060:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010064:	40                   	inc    eax
c0010065:	83 f8 50             	cmp    eax,0x50
c0010068:	75 f6                	jne    c0010060 <VgaText::updateTitle()+0xc>
c001006a:	31 c0                	xor    eax,eax
c001006c:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010073:	84 db                	test   bl,bl
c0010075:	74 06                	je     c001007d <VgaText::updateTitle()+0x29>
c0010077:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001007a:	40                   	inc    eax
c001007b:	eb ef                	jmp    c001006c <VgaText::updateTitle()+0x18>
c001007d:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010080:	85 c0                	test   eax,eax
c0010082:	74 09                	je     c001008d <VgaText::updateTitle()+0x39>
c0010084:	53                   	push   ebx
c0010085:	53                   	push   ebx
c0010086:	51                   	push   ecx
c0010087:	52                   	push   edx
c0010088:	ff d0                	call   eax
c001008a:	83 c4 10             	add    esp,0x10
c001008d:	83 c4 58             	add    esp,0x58
c0010090:	5b                   	pop    ebx
c0010091:	c3                   	ret    

c0010092 <VgaText::load()>:
c0010092:	53                   	push   ebx
c0010093:	31 c0                	xor    eax,eax
c0010095:	83 ec 58             	sub    esp,0x58
c0010098:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001009c:	89 e2                	mov    edx,esp
c001009e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100a2:	40                   	inc    eax
c00100a3:	83 f8 50             	cmp    eax,0x50
c00100a6:	75 f6                	jne    c001009e <VgaText::load()+0xc>
c00100a8:	31 c0                	xor    eax,eax
c00100aa:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100b1:	84 c9                	test   cl,cl
c00100b3:	74 06                	je     c00100bb <VgaText::load()+0x29>
c00100b5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100b8:	40                   	inc    eax
c00100b9:	eb ef                	jmp    c00100aa <VgaText::load()+0x18>
c00100bb:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100be:	85 c0                	test   eax,eax
c00100c0:	74 09                	je     c00100cb <VgaText::load()+0x39>
c00100c2:	51                   	push   ecx
c00100c3:	51                   	push   ecx
c00100c4:	52                   	push   edx
c00100c5:	53                   	push   ebx
c00100c6:	ff d0                	call   eax
c00100c8:	83 c4 10             	add    esp,0x10
c00100cb:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100ce:	85 c0                	test   eax,eax
c00100d0:	74 09                	je     c00100db <VgaText::load()+0x49>
c00100d2:	83 ec 0c             	sub    esp,0xc
c00100d5:	53                   	push   ebx
c00100d6:	ff d0                	call   eax
c00100d8:	83 c4 10             	add    esp,0x10
c00100db:	83 c4 58             	add    esp,0x58
c00100de:	5b                   	pop    ebx
c00100df:	c3                   	ret    

c00100e0 <VgaText::updateCursor()>:
c00100e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100e4:	39 05 e4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9e4,eax
c00100ea:	75 09                	jne    c00100f5 <VgaText::updateCursor()+0x15>
c00100ec:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00100ef:	85 c0                	test   eax,eax
c00100f1:	74 02                	je     c00100f5 <VgaText::updateCursor()+0x15>
c00100f3:	ff e0                	jmp    eax
c00100f5:	c3                   	ret    

c00100f6 <VgaText::doANSI_SGR(int)>:
c00100f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100fe:	85 d2                	test   edx,edx
c0010100:	75 0b                	jne    c001010d <VgaText::doANSI_SGR(int)+0x17>
c0010102:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010105:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010108:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001010b:	eb 59                	jmp    c0010166 <VgaText::doANSI_SGR(int)+0x70>
c001010d:	83 fa 07             	cmp    edx,0x7
c0010110:	75 0b                	jne    c001011d <VgaText::doANSI_SGR(int)+0x27>
c0010112:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010115:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010118:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001011b:	eb 49                	jmp    c0010166 <VgaText::doANSI_SGR(int)+0x70>
c001011d:	83 fa 1b             	cmp    edx,0x1b
c0010120:	74 e0                	je     c0010102 <VgaText::doANSI_SGR(int)+0xc>
c0010122:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010125:	83 f9 07             	cmp    ecx,0x7
c0010128:	77 09                	ja     c0010133 <VgaText::doANSI_SGR(int)+0x3d>
c001012a:	8b 14 8d 80 c8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3780]
c0010131:	eb 20                	jmp    c0010153 <VgaText::doANSI_SGR(int)+0x5d>
c0010133:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010136:	83 f9 07             	cmp    ecx,0x7
c0010139:	77 09                	ja     c0010144 <VgaText::doANSI_SGR(int)+0x4e>
c001013b:	8b 14 8d 80 c8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3780]
c0010142:	eb 22                	jmp    c0010166 <VgaText::doANSI_SGR(int)+0x70>
c0010144:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010147:	83 f9 07             	cmp    ecx,0x7
c001014a:	77 0b                	ja     c0010157 <VgaText::doANSI_SGR(int)+0x61>
c001014c:	8b 14 95 38 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd38c8]
c0010153:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010156:	c3                   	ret    
c0010157:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001015a:	83 f9 07             	cmp    ecx,0x7
c001015d:	77 0a                	ja     c0010169 <VgaText::doANSI_SGR(int)+0x73>
c001015f:	8b 14 95 10 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd38f0]
c0010166:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010169:	c3                   	ret    

c001016a <VgaText::setDefaultBgColour(VgaColour)>:
c001016a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001016e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010172:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010175:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010178:	c3                   	ret    
c0010179:	90                   	nop

c001017a <VgaText::setDefaultFgColour(VgaColour)>:
c001017a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001017e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010182:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010185:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010188:	c3                   	ret    
c0010189:	90                   	nop

c001018a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001018a:	53                   	push   ebx
c001018b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001018f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010193:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010197:	51                   	push   ecx
c0010198:	e8 cd ff ff ff       	call   c001016a <VgaText::setDefaultBgColour(VgaColour)>
c001019d:	58                   	pop    eax
c001019e:	5a                   	pop    edx
c001019f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101a7:	5b                   	pop    ebx
c00101a8:	eb d0                	jmp    c001017a <VgaText::setDefaultFgColour(VgaColour)>

c00101aa <VgaText::setTitleTextColour(VgaColour)>:
c00101aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101b2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101b5:	e9 9a fe ff ff       	jmp    c0010054 <VgaText::updateTitle()>

c00101ba <VgaText::setTitleColour(VgaColour)>:
c00101ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101c5:	e9 8a fe ff ff       	jmp    c0010054 <VgaText::updateTitle()>

c00101ca <VgaText::setTitle(char*)>:
c00101ca:	53                   	push   ebx
c00101cb:	83 ec 10             	sub    esp,0x10
c00101ce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101d6:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00101dc:	50                   	push   eax
c00101dd:	e8 2a 06 ff ff       	call   c000080c <strcpy>
c00101e2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00101e6:	83 c4 18             	add    esp,0x18
c00101e9:	5b                   	pop    ebx
c00101ea:	e9 65 fe ff ff       	jmp    c0010054 <VgaText::updateTitle()>
c00101ef:	90                   	nop

c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00101f0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00101f4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00101f9:	83 e0 0f             	and    eax,0xf
c00101fc:	c1 e2 04             	shl    edx,0x4
c00101ff:	09 d0                	or     eax,edx
c0010201:	c3                   	ret    

c0010202 <VgaText::scrollScreen()>:
c0010202:	55                   	push   ebp
c0010203:	b9 01 00 00 00       	mov    ecx,0x1
c0010208:	57                   	push   edi
c0010209:	56                   	push   esi
c001020a:	53                   	push   ebx
c001020b:	83 ec 0c             	sub    esp,0xc
c001020e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010212:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010218:	31 ff                	xor    edi,edi
c001021a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001021d:	83 f9 17             	cmp    ecx,0x17
c0010220:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010223:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001022a:	75 27                	jne    c0010253 <VgaText::scrollScreen()+0x51>
c001022c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001022f:	01 f5                	add    ebp,esi
c0010231:	f7 c7 01 00 00 00    	test   edi,0x1
c0010237:	74 16                	je     c001024f <VgaText::scrollScreen()+0x4d>
c0010239:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001023d:	50                   	push   eax
c001023e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010242:	50                   	push   eax
c0010243:	e8 a8 ff ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010248:	5a                   	pop    edx
c0010249:	5a                   	pop    edx
c001024a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001024d:	eb 04                	jmp    c0010253 <VgaText::scrollScreen()+0x51>
c001024f:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010253:	47                   	inc    edi
c0010254:	46                   	inc    esi
c0010255:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001025b:	75 bd                	jne    c001021a <VgaText::scrollScreen()+0x18>
c001025d:	41                   	inc    ecx
c001025e:	83 f9 18             	cmp    ecx,0x18
c0010261:	75 af                	jne    c0010212 <VgaText::scrollScreen()+0x10>
c0010263:	39 1d e4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9e4,ebx
c0010269:	75 1b                	jne    c0010286 <VgaText::scrollScreen()+0x84>
c001026b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001026f:	74 05                	je     c0010276 <VgaText::scrollScreen()+0x74>
c0010271:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010274:	eb 10                	jmp    c0010286 <VgaText::scrollScreen()+0x84>
c0010276:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010279:	85 c0                	test   eax,eax
c001027b:	74 09                	je     c0010286 <VgaText::scrollScreen()+0x84>
c001027d:	83 ec 0c             	sub    esp,0xc
c0010280:	53                   	push   ebx
c0010281:	ff d0                	call   eax
c0010283:	83 c4 10             	add    esp,0x10
c0010286:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001028a:	83 c4 0c             	add    esp,0xc
c001028d:	5b                   	pop    ebx
c001028e:	5e                   	pop    esi
c001028f:	5f                   	pop    edi
c0010290:	5d                   	pop    ebp
c0010291:	e9 4a fe ff ff       	jmp    c00100e0 <VgaText::updateCursor()>

c0010296 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010296:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001029b:	c1 e0 08             	shl    eax,0x8
c001029e:	89 c2                	mov    edx,eax
c00102a0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102a5:	09 d0                	or     eax,edx
c00102a7:	c3                   	ret    

c00102a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102a8:	56                   	push   esi
c00102a9:	53                   	push   ebx
c00102aa:	51                   	push   ecx
c00102ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102af:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102b4:	50                   	push   eax
c00102b5:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102ba:	50                   	push   eax
c00102bb:	e8 30 ff ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c00102c0:	5b                   	pop    ebx
c00102c1:	0f b6 c0             	movzx  eax,al
c00102c4:	5e                   	pop    esi
c00102c5:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102ca:	50                   	push   eax
c00102cb:	53                   	push   ebx
c00102cc:	e8 c5 ff ff ff       	call   c0010296 <VgaText::combineCharAndColour(char, unsigned char)>
c00102d1:	5a                   	pop    edx
c00102d2:	5e                   	pop    esi
c00102d3:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102d6:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00102dc:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00102e0:	0f b7 d2             	movzx  edx,dx
c00102e3:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00102e7:	39 0d e4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9e4,ecx
c00102ed:	75 10                	jne    c00102ff <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102ef:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00102f2:	85 c0                	test   eax,eax
c00102f4:	74 09                	je     c00102ff <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102f6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00102fa:	5a                   	pop    edx
c00102fb:	5b                   	pop    ebx
c00102fc:	5e                   	pop    esi
c00102fd:	ff e0                	jmp    eax
c00102ff:	58                   	pop    eax
c0010300:	5b                   	pop    ebx
c0010301:	5e                   	pop    esi
c0010302:	c3                   	ret    
c0010303:	90                   	nop

c0010304 <VgaText::getCursorX()>:
c0010304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010308:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001030b:	c3                   	ret    

c001030c <VgaText::getCursorY()>:
c001030c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010310:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010313:	c3                   	ret    

c0010314 <VgaText::setCursor(int, int)>:
c0010314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010318:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001031c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001031f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010323:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010326:	e9 b5 fd ff ff       	jmp    c00100e0 <VgaText::updateCursor()>

c001032b <setActiveTerminal(VgaText*)>:
c001032b:	53                   	push   ebx
c001032c:	83 ec 08             	sub    esp,0x8
c001032f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010333:	85 db                	test   ebx,ebx
c0010335:	75 11                	jne    c0010348 <setActiveTerminal(VgaText*)+0x1d>
c0010337:	c7 44 24 10 10 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a110
c001033f:	83 c4 08             	add    esp,0x8
c0010342:	5b                   	pop    ebx
c0010343:	e9 c5 9a 00 00       	jmp    c0019e0d <Krnl::panic(char const*)>
c0010348:	a1 e4 d9 02 c0       	mov    eax,ds:0xc002d9e4
c001034d:	85 c0                	test   eax,eax
c001034f:	74 0c                	je     c001035d <setActiveTerminal(VgaText*)+0x32>
c0010351:	83 ec 0c             	sub    esp,0xc
c0010354:	50                   	push   eax
c0010355:	e8 86 fd ff ff       	call   c00100e0 <VgaText::updateCursor()>
c001035a:	83 c4 10             	add    esp,0x10
c001035d:	89 1d e4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9e4,ebx
c0010363:	51                   	push   ecx
c0010364:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010367:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001036a:	53                   	push   ebx
c001036b:	e8 a4 ff ff ff       	call   c0010314 <VgaText::setCursor(int, int)>
c0010370:	83 c4 10             	add    esp,0x10
c0010373:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010377:	75 07                	jne    c0010380 <setActiveTerminal(VgaText*)+0x55>
c0010379:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010380:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010384:	83 c4 08             	add    esp,0x8
c0010387:	5b                   	pop    ebx
c0010388:	e9 05 fd ff ff       	jmp    c0010092 <VgaText::load()>

c001038d <doTerminalCycle()>:
c001038d:	83 ec 18             	sub    esp,0x18
c0010390:	a1 e0 d9 02 c0       	mov    eax,ds:0xc002d9e0
c0010395:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010398:	50                   	push   eax
c0010399:	a3 e0 d9 02 c0       	mov    ds:0xc002d9e0,eax
c001039e:	e8 88 ff ff ff       	call   c001032b <setActiveTerminal(VgaText*)>
c00103a3:	83 c4 1c             	add    esp,0x1c
c00103a6:	c3                   	ret    
c00103a7:	90                   	nop

c00103a8 <VgaText::setCursorX(int)>:
c00103a8:	83 ec 10             	sub    esp,0x10
c00103ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103af:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103b6:	50                   	push   eax
c00103b7:	e8 58 ff ff ff       	call   c0010314 <VgaText::setCursor(int, int)>
c00103bc:	83 c4 1c             	add    esp,0x1c
c00103bf:	c3                   	ret    

c00103c0 <VgaText::setCursorY(int)>:
c00103c0:	83 ec 10             	sub    esp,0x10
c00103c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103cb:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103ce:	50                   	push   eax
c00103cf:	e8 40 ff ff ff       	call   c0010314 <VgaText::setCursor(int, int)>
c00103d4:	83 c4 1c             	add    esp,0x1c
c00103d7:	c3                   	ret    

c00103d8 <VgaText::incrementCursor(bool)>:
c00103d8:	56                   	push   esi
c00103d9:	53                   	push   ebx
c00103da:	51                   	push   ecx
c00103db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103e3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00103e6:	40                   	inc    eax
c00103e7:	83 f8 50             	cmp    eax,0x50
c00103ea:	74 05                	je     c00103f1 <VgaText::incrementCursor(bool)+0x19>
c00103ec:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00103ef:	eb 24                	jmp    c0010415 <VgaText::incrementCursor(bool)+0x3d>
c00103f1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00103f4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00103fb:	8d 50 01             	lea    edx,[eax+0x1]
c00103fe:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010401:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010404:	75 0f                	jne    c0010415 <VgaText::incrementCursor(bool)+0x3d>
c0010406:	83 ec 0c             	sub    esp,0xc
c0010409:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001040c:	53                   	push   ebx
c001040d:	e8 f0 fd ff ff       	call   c0010202 <VgaText::scrollScreen()>
c0010412:	83 c4 10             	add    esp,0x10
c0010415:	89 f0                	mov    eax,esi
c0010417:	84 c0                	test   al,al
c0010419:	74 0c                	je     c0010427 <VgaText::incrementCursor(bool)+0x4f>
c001041b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001041f:	5a                   	pop    edx
c0010420:	5b                   	pop    ebx
c0010421:	5e                   	pop    esi
c0010422:	e9 b9 fc ff ff       	jmp    c00100e0 <VgaText::updateCursor()>
c0010427:	58                   	pop    eax
c0010428:	5b                   	pop    ebx
c0010429:	5e                   	pop    esi
c001042a:	c3                   	ret    
c001042b:	90                   	nop

c001042c <VgaText::decrementCursor(bool)>:
c001042c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010430:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010434:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010437:	85 c0                	test   eax,eax
c0010439:	74 04                	je     c001043f <VgaText::decrementCursor(bool)+0x13>
c001043b:	48                   	dec    eax
c001043c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001043f:	84 c9                	test   cl,cl
c0010441:	74 09                	je     c001044c <VgaText::decrementCursor(bool)+0x20>
c0010443:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010447:	e9 94 fc ff ff       	jmp    c00100e0 <VgaText::updateCursor()>
c001044c:	c3                   	ret    
c001044d:	90                   	nop

c001044e <VgaText::putchar(char, VgaColour, VgaColour)>:
c001044e:	53                   	push   ebx
c001044f:	83 ec 08             	sub    esp,0x8
c0010452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010456:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001045a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001045e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010462:	3c 07                	cmp    al,0x7
c0010464:	75 2a                	jne    c0010490 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010466:	a1 98 da 02 c0       	mov    eax,ds:0xc002da98
c001046b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010473:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001047b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010487:	83 c4 08             	add    esp,0x8
c001048a:	5b                   	pop    ebx
c001048b:	e9 1e 30 00 00       	jmp    c00134ae <Buzzer::beep(int, int, bool)>
c0010490:	3c 0d                	cmp    al,0xd
c0010492:	75 09                	jne    c001049d <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010494:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001049b:	eb 2c                	jmp    c00104c9 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c001049d:	3c 0a                	cmp    al,0xa
c001049f:	75 31                	jne    c00104d2 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104a1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104a4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104ab:	8d 50 01             	lea    edx,[eax+0x1]
c00104ae:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104b1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104b4:	75 0f                	jne    c00104c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104b6:	83 ec 0c             	sub    esp,0xc
c00104b9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104bc:	53                   	push   ebx
c00104bd:	e8 40 fd ff ff       	call   c0010202 <VgaText::scrollScreen()>
c00104c2:	83 c4 10             	add    esp,0x10
c00104c5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104c9:	83 c4 08             	add    esp,0x8
c00104cc:	5b                   	pop    ebx
c00104cd:	e9 0e fc ff ff       	jmp    c00100e0 <VgaText::updateCursor()>
c00104d2:	3c 08                	cmp    al,0x8
c00104d4:	75 25                	jne    c00104fb <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104d6:	50                   	push   eax
c00104d7:	50                   	push   eax
c00104d8:	6a 01                	push   0x1
c00104da:	53                   	push   ebx
c00104db:	e8 4c ff ff ff       	call   c001042c <VgaText::decrementCursor(bool)>
c00104e0:	5a                   	pop    edx
c00104e1:	59                   	pop    ecx
c00104e2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104e5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104e8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00104eb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00104ee:	6a 20                	push   0x20
c00104f0:	53                   	push   ebx
c00104f1:	e8 b2 fd ff ff       	call   c00102a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104f6:	83 c4 28             	add    esp,0x28
c00104f9:	5b                   	pop    ebx
c00104fa:	c3                   	ret    
c00104fb:	83 ec 08             	sub    esp,0x8
c00104fe:	0f be c0             	movsx  eax,al
c0010501:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010504:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010507:	51                   	push   ecx
c0010508:	52                   	push   edx
c0010509:	50                   	push   eax
c001050a:	53                   	push   ebx
c001050b:	e8 98 fd ff ff       	call   c00102a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010510:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010514:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001051c:	83 c4 28             	add    esp,0x28
c001051f:	5b                   	pop    ebx
c0010520:	e9 b3 fe ff ff       	jmp    c00103d8 <VgaText::incrementCursor(bool)>
c0010525:	90                   	nop

c0010526 <VgaText::doUpdate()>:
c0010526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001052a:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c001052d:	85 c0                	test   eax,eax
c001052f:	74 02                	je     c0010533 <VgaText::doUpdate()+0xd>
c0010531:	ff e0                	jmp    eax
c0010533:	c3                   	ret    

c0010534 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010534:	55                   	push   ebp
c0010535:	31 ed                	xor    ebp,ebp
c0010537:	57                   	push   edi
c0010538:	56                   	push   esi
c0010539:	53                   	push   ebx
c001053a:	83 ec 1c             	sub    esp,0x1c
c001053d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010541:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010546:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001054d:	50                   	push   eax
c001054e:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010553:	50                   	push   eax
c0010554:	e8 97 fc ff ff       	call   c00101f0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010559:	59                   	pop    ecx
c001055a:	0f b6 c0             	movzx  eax,al
c001055d:	5e                   	pop    esi
c001055e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010563:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010567:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001056a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001056e:	0f b7 f6             	movzx  esi,si
c0010571:	01 f6                	add    esi,esi
c0010573:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010576:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010579:	84 c0                	test   al,al
c001057b:	0f 84 fd 00 00 00    	je     c001067e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010581:	3c 0d                	cmp    al,0xd
c0010583:	75 0c                	jne    c0010591 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010585:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001058c:	e9 e7 00 00 00       	jmp    c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010591:	3c 0a                	cmp    al,0xa
c0010593:	75 47                	jne    c00105dc <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010595:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010598:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001059f:	8d 48 01             	lea    ecx,[eax+0x1]
c00105a2:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105a5:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105a8:	75 0f                	jne    c00105b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105aa:	83 ec 0c             	sub    esp,0xc
c00105ad:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105b0:	53                   	push   ebx
c00105b1:	e8 4c fc ff ff       	call   c0010202 <VgaText::scrollScreen()>
c00105b6:	83 c4 10             	add    esp,0x10
c00105b9:	83 ec 0c             	sub    esp,0xc
c00105bc:	31 ed                	xor    ebp,ebp
c00105be:	53                   	push   ebx
c00105bf:	e8 1c fb ff ff       	call   c00100e0 <VgaText::updateCursor()>
c00105c4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105c9:	83 c4 10             	add    esp,0x10
c00105cc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105cf:	0f b7 f6             	movzx  esi,si
c00105d2:	01 f6                	add    esi,esi
c00105d4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105d7:	e9 9c 00 00 00       	jmp    c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105dc:	3c 08                	cmp    al,0x8
c00105de:	75 35                	jne    c0010615 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c00105e0:	56                   	push   esi
c00105e1:	56                   	push   esi
c00105e2:	6a 01                	push   0x1
c00105e4:	53                   	push   ebx
c00105e5:	e8 42 fe ff ff       	call   c001042c <VgaText::decrementCursor(bool)>
c00105ea:	58                   	pop    eax
c00105eb:	5a                   	pop    edx
c00105ec:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00105ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00105f2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00105f5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00105f8:	6a 20                	push   0x20
c00105fa:	53                   	push   ebx
c00105fb:	e8 a8 fc ff ff       	call   c00102a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010600:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010605:	83 c4 20             	add    esp,0x20
c0010608:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001060b:	0f b7 f6             	movzx  esi,si
c001060e:	01 f6                	add    esi,esi
c0010610:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010613:	eb 63                	jmp    c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010615:	51                   	push   ecx
c0010616:	51                   	push   ecx
c0010617:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001061b:	50                   	push   eax
c001061c:	e8 75 fc ff ff       	call   c0010296 <VgaText::combineCharAndColour(char, unsigned char)>
c0010621:	83 c4 10             	add    esp,0x10
c0010624:	66 89 06             	mov    WORD PTR [esi],ax
c0010627:	39 1d e4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9e4,ebx
c001062d:	75 21                	jne    c0010650 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001062f:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010632:	85 c0                	test   eax,eax
c0010634:	74 1a                	je     c0010650 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010636:	52                   	push   edx
c0010637:	52                   	push   edx
c0010638:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001063b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001063e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010642:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010646:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010649:	51                   	push   ecx
c001064a:	53                   	push   ebx
c001064b:	ff d0                	call   eax
c001064d:	83 c4 20             	add    esp,0x20
c0010650:	83 c6 02             	add    esi,0x2
c0010653:	50                   	push   eax
c0010654:	50                   	push   eax
c0010655:	6a 00                	push   0x0
c0010657:	53                   	push   ebx
c0010658:	e8 7b fd ff ff       	call   c00103d8 <VgaText::incrementCursor(bool)>
c001065d:	83 c4 10             	add    esp,0x10
c0010660:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010664:	75 0d                	jne    c0010673 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010666:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001066b:	0f b7 f6             	movzx  esi,si
c001066e:	01 f6                	add    esi,esi
c0010670:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010673:	bd 01 00 00 00       	mov    ebp,0x1
c0010678:	47                   	inc    edi
c0010679:	e9 f8 fe ff ff       	jmp    c0010576 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c001067e:	83 ec 0c             	sub    esp,0xc
c0010681:	53                   	push   ebx
c0010682:	e8 59 fa ff ff       	call   c00100e0 <VgaText::updateCursor()>
c0010687:	83 c4 10             	add    esp,0x10
c001068a:	89 e8                	mov    eax,ebp
c001068c:	84 c0                	test   al,al
c001068e:	74 0c                	je     c001069c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010690:	83 ec 0c             	sub    esp,0xc
c0010693:	53                   	push   ebx
c0010694:	e8 8d fe ff ff       	call   c0010526 <VgaText::doUpdate()>
c0010699:	83 c4 10             	add    esp,0x10
c001069c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106a3:	83 c4 1c             	add    esp,0x1c
c00106a6:	5b                   	pop    ebx
c00106a7:	5e                   	pop    esi
c00106a8:	5f                   	pop    edi
c00106a9:	5d                   	pop    ebp
c00106aa:	c3                   	ret    
c00106ab:	90                   	nop

c00106ac <VgaText::clearScreen()>:
c00106ac:	57                   	push   edi
c00106ad:	56                   	push   esi
c00106ae:	31 f6                	xor    esi,esi
c00106b0:	53                   	push   ebx
c00106b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106b5:	52                   	push   edx
c00106b6:	6a 00                	push   0x0
c00106b8:	6a 00                	push   0x0
c00106ba:	53                   	push   ebx
c00106bb:	e8 54 fc ff ff       	call   c0010314 <VgaText::setCursor(int, int)>
c00106c0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106c7:	83 c4 10             	add    esp,0x10
c00106ca:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106cd:	7e 20                	jle    c00106ef <VgaText::clearScreen()+0x43>
c00106cf:	31 ff                	xor    edi,edi
c00106d1:	50                   	push   eax
c00106d2:	50                   	push   eax
c00106d3:	56                   	push   esi
c00106d4:	57                   	push   edi
c00106d5:	47                   	inc    edi
c00106d6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00106d9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00106dc:	6a 20                	push   0x20
c00106de:	53                   	push   ebx
c00106df:	e8 c4 fb ff ff       	call   c00102a8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106e4:	83 c4 20             	add    esp,0x20
c00106e7:	83 ff 50             	cmp    edi,0x50
c00106ea:	75 e5                	jne    c00106d1 <VgaText::clearScreen()+0x25>
c00106ec:	46                   	inc    esi
c00106ed:	eb db                	jmp    c00106ca <VgaText::clearScreen()+0x1e>
c00106ef:	83 ec 0c             	sub    esp,0xc
c00106f2:	53                   	push   ebx
c00106f3:	e8 2e fe ff ff       	call   c0010526 <VgaText::doUpdate()>
c00106f8:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106ff:	83 c4 10             	add    esp,0x10
c0010702:	5b                   	pop    ebx
c0010703:	5e                   	pop    esi
c0010704:	5f                   	pop    edi
c0010705:	c3                   	ret    

c0010706 <VgaText::putchar(char)>:
c0010706:	56                   	push   esi
c0010707:	53                   	push   ebx
c0010708:	83 ec 14             	sub    esp,0x14
c001070b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001070f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010713:	3c 5b                	cmp    al,0x5b
c0010715:	75 18                	jne    c001072f <VgaText::putchar(char)+0x29>
c0010717:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001071b:	74 1f                	je     c001073c <VgaText::putchar(char)+0x36>
c001071d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010723:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001072a:	e9 bd 00 00 00       	jmp    c00107ec <VgaText::putchar(char)+0xe6>
c001072f:	3c 1b                	cmp    al,0x1b
c0010731:	75 09                	jne    c001073c <VgaText::putchar(char)+0x36>
c0010733:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010737:	e9 b0 00 00 00       	jmp    c00107ec <VgaText::putchar(char)+0xe6>
c001073c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c001073f:	84 c9                	test   cl,cl
c0010741:	0f 84 92 00 00 00    	je     c00107d9 <VgaText::putchar(char)+0xd3>
c0010747:	8d 50 c0             	lea    edx,[eax-0x40]
c001074a:	80 fa 3e             	cmp    dl,0x3e
c001074d:	77 76                	ja     c00107c5 <VgaText::putchar(char)+0xbf>
c001074f:	3c 6d                	cmp    al,0x6d
c0010751:	75 47                	jne    c001079a <VgaText::putchar(char)+0x94>
c0010753:	31 f6                	xor    esi,esi
c0010755:	31 d2                	xor    edx,edx
c0010757:	31 c0                	xor    eax,eax
c0010759:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001075c:	7e 2d                	jle    c001078b <VgaText::putchar(char)+0x85>
c001075e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010763:	80 fa 3b             	cmp    dl,0x3b
c0010766:	75 17                	jne    c001077f <VgaText::putchar(char)+0x79>
c0010768:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001076c:	50                   	push   eax
c001076d:	53                   	push   ebx
c001076e:	e8 83 f9 ff ff       	call   c00100f6 <VgaText::doANSI_SGR(int)>
c0010773:	59                   	pop    ecx
c0010774:	31 d2                	xor    edx,edx
c0010776:	58                   	pop    eax
c0010777:	31 c0                	xor    eax,eax
c0010779:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001077d:	eb 09                	jmp    c0010788 <VgaText::putchar(char)+0x82>
c001077f:	6b c0 0a             	imul   eax,eax,0xa
c0010782:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010786:	88 ca                	mov    dl,cl
c0010788:	46                   	inc    esi
c0010789:	eb ce                	jmp    c0010759 <VgaText::putchar(char)+0x53>
c001078b:	84 d2                	test   dl,dl
c001078d:	74 2e                	je     c00107bd <VgaText::putchar(char)+0xb7>
c001078f:	50                   	push   eax
c0010790:	53                   	push   ebx
c0010791:	e8 60 f9 ff ff       	call   c00100f6 <VgaText::doANSI_SGR(int)>
c0010796:	58                   	pop    eax
c0010797:	5a                   	pop    edx
c0010798:	eb 23                	jmp    c00107bd <VgaText::putchar(char)+0xb7>
c001079a:	3c 4a                	cmp    al,0x4a
c001079c:	75 1f                	jne    c00107bd <VgaText::putchar(char)+0xb7>
c001079e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107a2:	75 19                	jne    c00107bd <VgaText::putchar(char)+0xb7>
c00107a4:	83 ec 0c             	sub    esp,0xc
c00107a7:	53                   	push   ebx
c00107a8:	e8 ff fe ff ff       	call   c00106ac <VgaText::clearScreen()>
c00107ad:	83 c4 0c             	add    esp,0xc
c00107b0:	6a 00                	push   0x0
c00107b2:	6a 00                	push   0x0
c00107b4:	53                   	push   ebx
c00107b5:	e8 5a fb ff ff       	call   c0010314 <VgaText::setCursor(int, int)>
c00107ba:	83 c4 10             	add    esp,0x10
c00107bd:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107c3:	eb 27                	jmp    c00107ec <VgaText::putchar(char)+0xe6>
c00107c5:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107c8:	83 fa 0e             	cmp    edx,0xe
c00107cb:	7f 1f                	jg     c00107ec <VgaText::putchar(char)+0xe6>
c00107cd:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107d0:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107d3:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107d7:	eb 13                	jmp    c00107ec <VgaText::putchar(char)+0xe6>
c00107d9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00107dc:	0f be c0             	movsx  eax,al
c00107df:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00107e2:	50                   	push   eax
c00107e3:	53                   	push   ebx
c00107e4:	e8 65 fc ff ff       	call   c001044e <VgaText::putchar(char, VgaColour, VgaColour)>
c00107e9:	83 c4 10             	add    esp,0x10
c00107ec:	83 c4 14             	add    esp,0x14
c00107ef:	5b                   	pop    ebx
c00107f0:	5e                   	pop    esi
c00107f1:	c3                   	ret    

c00107f2 <VgaText::putx(unsigned int)>:
c00107f2:	57                   	push   edi
c00107f3:	b9 11 00 00 00       	mov    ecx,0x11
c00107f8:	56                   	push   esi
c00107f9:	be 1e a1 02 c0       	mov    esi,0xc002a11e
c00107fe:	53                   	push   ebx
c00107ff:	83 ec 20             	sub    esp,0x20
c0010802:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010806:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001080a:	fc                   	cld    
c001080b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001080d:	be 08 00 00 00       	mov    esi,0x8
c0010812:	50                   	push   eax
c0010813:	50                   	push   eax
c0010814:	89 d8                	mov    eax,ebx
c0010816:	c1 e3 04             	shl    ebx,0x4
c0010819:	c1 e8 1c             	shr    eax,0x1c
c001081c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010821:	50                   	push   eax
c0010822:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010826:	e8 db fe ff ff       	call   c0010706 <VgaText::putchar(char)>
c001082b:	83 c4 10             	add    esp,0x10
c001082e:	4e                   	dec    esi
c001082f:	75 e1                	jne    c0010812 <VgaText::putx(unsigned int)+0x20>
c0010831:	83 c4 20             	add    esp,0x20
c0010834:	5b                   	pop    ebx
c0010835:	5e                   	pop    esi
c0010836:	5f                   	pop    edi
c0010837:	c3                   	ret    

c0010838 <VgaText::puts(char const*)>:
c0010838:	53                   	push   ebx
c0010839:	83 ec 08             	sub    esp,0x8
c001083c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010840:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010843:	84 c0                	test   al,al
c0010845:	74 12                	je     c0010859 <VgaText::puts(char const*)+0x21>
c0010847:	43                   	inc    ebx
c0010848:	51                   	push   ecx
c0010849:	51                   	push   ecx
c001084a:	50                   	push   eax
c001084b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001084f:	e8 b2 fe ff ff       	call   c0010706 <VgaText::putchar(char)>
c0010854:	83 c4 10             	add    esp,0x10
c0010857:	eb e7                	jmp    c0010840 <VgaText::puts(char const*)+0x8>
c0010859:	83 c4 08             	add    esp,0x8
c001085c:	5b                   	pop    ebx
c001085d:	c3                   	ret    

c001085e <VgaText::VgaText(char const*)>:
c001085e:	57                   	push   edi
c001085f:	56                   	push   esi
c0010860:	53                   	push   ebx
c0010861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010865:	83 ec 08             	sub    esp,0x8
c0010868:	6a 00                	push   0x0
c001086a:	50                   	push   eax
c001086b:	e8 42 05 00 00       	call   c0010db2 <UnixFile::UnixFile(int)>
c0010870:	83 c4 10             	add    esp,0x10
c0010873:	ba 84 a1 02 c0       	mov    edx,0xc002a184
c0010878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001087c:	89 10                	mov    DWORD PTR [eax],edx
c001087e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010882:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010898:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001089c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108be:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d4:	8d 50 60             	lea    edx,[eax+0x60]
c00108d7:	bb c0 d9 02 c0       	mov    ebx,0xc002d9c0
c00108dc:	b8 08 00 00 00       	mov    eax,0x8
c00108e1:	fc                   	cld    
c00108e2:	89 d7                	mov    edi,edx
c00108e4:	89 de                	mov    esi,ebx
c00108e6:	89 c1                	mov    ecx,eax
c00108e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ee:	05 82 00 00 00       	add    eax,0x82
c00108f3:	83 ec 08             	sub    esp,0x8
c00108f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108fa:	50                   	push   eax
c00108fb:	e8 0c ff fe ff       	call   c000080c <strcpy>
c0010900:	83 c4 10             	add    esp,0x10
c0010903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010907:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c001090e:	83 ec 0c             	sub    esp,0xc
c0010911:	6a 01                	push   0x1
c0010913:	e8 dd 08 00 00       	call   c00111f5 <Virt::allocateKernelVirtualPages(int)>
c0010918:	83 c4 10             	add    esp,0x10
c001091b:	89 c2                	mov    edx,eax
c001091d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010921:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010924:	8b 1d 90 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da90
c001092a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010931:	89 c6                	mov    esi,eax
c0010933:	e8 39 f0 ff ff       	call   c000f971 <Phys::allocatePage()>
c0010938:	6a 05                	push   0x5
c001093a:	56                   	push   esi
c001093b:	50                   	push   eax
c001093c:	53                   	push   ebx
c001093d:	e8 70 10 00 00       	call   c00119b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010942:	83 c4 10             	add    esp,0x10
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001094c:	83 ec 04             	sub    esp,0x4
c001094f:	68 00 0f 00 00       	push   0xf00
c0010954:	6a 00                	push   0x0
c0010956:	50                   	push   eax
c0010957:	e8 f4 fd fe ff       	call   c0000750 <memset>
c001095c:	83 c4 10             	add    esp,0x10
c001095f:	83 ec 04             	sub    esp,0x4
c0010962:	6a 00                	push   0x0
c0010964:	6a 07                	push   0x7
c0010966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001096a:	e8 1b f8 ff ff       	call   c001018a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001096f:	83 c4 10             	add    esp,0x10
c0010972:	83 ec 04             	sub    esp,0x4
c0010975:	6a 00                	push   0x0
c0010977:	6a 00                	push   0x0
c0010979:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001097d:	e8 92 f9 ff ff       	call   c0010314 <VgaText::setCursor(int, int)>
c0010982:	83 c4 10             	add    esp,0x10
c0010985:	83 ec 0c             	sub    esp,0xc
c0010988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001098c:	e8 1b fd ff ff       	call   c00106ac <VgaText::clearScreen()>
c0010991:	83 c4 10             	add    esp,0x10
c0010994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010998:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001099c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a0:	05 02 01 00 00       	add    eax,0x102
c00109a5:	83 ec 04             	sub    esp,0x4
c00109a8:	68 96 00 00 00       	push   0x96
c00109ad:	6a 00                	push   0x0
c00109af:	50                   	push   eax
c00109b0:	e8 9b fd fe ff       	call   c0000750 <memset>
c00109b5:	83 c4 10             	add    esp,0x10
c00109b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109bc:	05 98 01 00 00       	add    eax,0x198
c00109c1:	83 ec 04             	sub    esp,0x4
c00109c4:	68 2c 01 00 00       	push   0x12c
c00109c9:	6a 00                	push   0x0
c00109cb:	50                   	push   eax
c00109cc:	e8 7f fd fe ff       	call   c0000750 <memset>
c00109d1:	83 c4 10             	add    esp,0x10
c00109d4:	90                   	nop
c00109d5:	5b                   	pop    ebx
c00109d6:	5e                   	pop    esi
c00109d7:	5f                   	pop    edi
c00109d8:	c3                   	ret    
c00109d9:	90                   	nop

c00109da <VgaText::receiveKey(unsigned char)>:
c00109da:	55                   	push   ebp
c00109db:	57                   	push   edi
c00109dc:	56                   	push   esi
c00109dd:	53                   	push   ebx
c00109de:	83 ec 1c             	sub    esp,0x1c
c00109e1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00109e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00109e9:	84 db                	test   bl,bl
c00109eb:	0f 84 c9 00 00 00    	je     c0010aba <VgaText::receiveKey(unsigned char)+0xe0>
c00109f1:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00109f7:	80 fb 08             	cmp    bl,0x8
c00109fa:	75 2c                	jne    c0010a28 <VgaText::receiveKey(unsigned char)+0x4e>
c00109fc:	83 ec 0c             	sub    esp,0xc
c00109ff:	57                   	push   edi
c0010a00:	e8 67 fd fe ff       	call   c000076c <strlen>
c0010a05:	83 c4 10             	add    esp,0x10
c0010a08:	85 c0                	test   eax,eax
c0010a0a:	74 41                	je     c0010a4d <VgaText::receiveKey(unsigned char)+0x73>
c0010a0c:	50                   	push   eax
c0010a0d:	50                   	push   eax
c0010a0e:	6a 08                	push   0x8
c0010a10:	56                   	push   esi
c0010a11:	e8 f0 fc ff ff       	call   c0010706 <VgaText::putchar(char)>
c0010a16:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a19:	e8 4e fd fe ff       	call   c000076c <strlen>
c0010a1e:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a26:	eb 22                	jmp    c0010a4a <VgaText::receiveKey(unsigned char)+0x70>
c0010a28:	0f be c3             	movsx  eax,bl
c0010a2b:	52                   	push   edx
c0010a2c:	52                   	push   edx
c0010a2d:	50                   	push   eax
c0010a2e:	56                   	push   esi
c0010a2f:	e8 d2 fc ff ff       	call   c0010706 <VgaText::putchar(char)>
c0010a34:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a38:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a3d:	59                   	pop    ecx
c0010a3e:	5d                   	pop    ebp
c0010a3f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a43:	50                   	push   eax
c0010a44:	57                   	push   edi
c0010a45:	e8 02 ff fe ff       	call   c000094c <strcat>
c0010a4a:	83 c4 10             	add    esp,0x10
c0010a4d:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a54:	75 05                	jne    c0010a5b <VgaText::receiveKey(unsigned char)+0x81>
c0010a56:	80 fb 0a             	cmp    bl,0xa
c0010a59:	75 53                	jne    c0010aae <VgaText::receiveKey(unsigned char)+0xd4>
c0010a5b:	83 ec 0c             	sub    esp,0xc
c0010a5e:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a64:	53                   	push   ebx
c0010a65:	e8 02 fd fe ff       	call   c000076c <strlen>
c0010a6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a6d:	89 c5                	mov    ebp,eax
c0010a6f:	e8 f8 fc fe ff       	call   c000076c <strlen>
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a7b:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a80:	76 10                	jbe    c0010a92 <VgaText::receiveKey(unsigned char)+0xb8>
c0010a82:	83 ec 0c             	sub    esp,0xc
c0010a85:	68 2f a1 02 c0       	push   0xc002a12f
c0010a8a:	e8 7e 93 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0010a8f:	83 c4 10             	add    esp,0x10
c0010a92:	50                   	push   eax
c0010a93:	50                   	push   eax
c0010a94:	57                   	push   edi
c0010a95:	53                   	push   ebx
c0010a96:	e8 b1 fe fe ff       	call   c000094c <strcat>
c0010a9b:	83 c4 0c             	add    esp,0xc
c0010a9e:	68 96 00 00 00       	push   0x96
c0010aa3:	6a 00                	push   0x0
c0010aa5:	57                   	push   edi
c0010aa6:	e8 a5 fc fe ff       	call   c0000750 <memset>
c0010aab:	83 c4 10             	add    esp,0x10
c0010aae:	83 ec 0c             	sub    esp,0xc
c0010ab1:	56                   	push   esi
c0010ab2:	e8 6f fa ff ff       	call   c0010526 <VgaText::doUpdate()>
c0010ab7:	83 c4 10             	add    esp,0x10
c0010aba:	83 c4 1c             	add    esp,0x1c
c0010abd:	5b                   	pop    ebx
c0010abe:	5e                   	pop    esi
c0010abf:	5f                   	pop    edi
c0010ac0:	5d                   	pop    ebp
c0010ac1:	c3                   	ret    

c0010ac2 <VgaText::write(unsigned long long, void*, int*)>:
c0010ac2:	55                   	push   ebp
c0010ac3:	57                   	push   edi
c0010ac4:	56                   	push   esi
c0010ac5:	53                   	push   ebx
c0010ac6:	83 ec 0c             	sub    esp,0xc
c0010ac9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010acd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010ad1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010ad5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010adc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010adf:	39 eb                	cmp    ebx,ebp
c0010ae1:	74 13                	je     c0010af6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010ae3:	43                   	inc    ebx
c0010ae4:	50                   	push   eax
c0010ae5:	50                   	push   eax
c0010ae6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010aea:	50                   	push   eax
c0010aeb:	56                   	push   esi
c0010aec:	e8 15 fc ff ff       	call   c0010706 <VgaText::putchar(char)>
c0010af1:	83 c4 10             	add    esp,0x10
c0010af4:	eb e9                	jmp    c0010adf <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010af6:	83 ec 0c             	sub    esp,0xc
c0010af9:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b00:	56                   	push   esi
c0010b01:	e8 20 fa ff ff       	call   c0010526 <VgaText::doUpdate()>
c0010b06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b0a:	89 38                	mov    DWORD PTR [eax],edi
c0010b0c:	83 c4 1c             	add    esp,0x1c
c0010b0f:	31 c0                	xor    eax,eax
c0010b11:	5b                   	pop    ebx
c0010b12:	5e                   	pop    esi
c0010b13:	5f                   	pop    edi
c0010b14:	5d                   	pop    ebp
c0010b15:	c3                   	ret    

c0010b16 <newTerminal(char*)>:
c0010b16:	83 ec 28             	sub    esp,0x28
c0010b19:	68 c4 02 00 00       	push   0x2c4
c0010b1e:	e8 76 ea ff ff       	call   c000f599 <malloc>
c0010b23:	5a                   	pop    edx
c0010b24:	59                   	pop    ecx
c0010b25:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b29:	50                   	push   eax
c0010b2a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b2e:	e8 2b fd ff ff       	call   c001085e <VgaText::VgaText(char const*)>
c0010b33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b37:	83 c4 2c             	add    esp,0x2c
c0010b3a:	c3                   	ret    
c0010b3b:	90                   	nop

c0010b3c <TSS::TSS()>:
c0010b3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b47:	90                   	nop
c0010b48:	c3                   	ret    
c0010b49:	90                   	nop

c0010b4a <TSS::setESP(unsigned long)>:
c0010b4a:	55                   	push   ebp
c0010b4b:	89 e5                	mov    ebp,esp
c0010b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b53:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b56:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b59:	90                   	nop
c0010b5a:	5d                   	pop    ebp
c0010b5b:	c3                   	ret    

c0010b5c <TSS::flush()>:
c0010b5c:	55                   	push   ebp
c0010b5d:	89 e5                	mov    ebp,esp
c0010b5f:	83 ec 10             	sub    esp,0x10
c0010b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b65:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b67:	83 c8 03             	or     eax,0x3
c0010b6a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b6e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b72:	66 89 d0             	mov    ax,dx
c0010b75:	0f 00 d8             	ltr    ax
c0010b78:	90                   	nop
c0010b79:	c9                   	leave  
c0010b7a:	c3                   	ret    
c0010b7b:	90                   	nop

c0010b7c <TSS::setup(unsigned long, unsigned long)>:
c0010b7c:	55                   	push   ebp
c0010b7d:	89 e5                	mov    ebp,esp
c0010b7f:	83 ec 18             	sub    esp,0x18
c0010b82:	83 ec 0c             	sub    esp,0xc
c0010b85:	6a 68                	push   0x68
c0010b87:	e8 0d ea ff ff       	call   c000f599 <malloc>
c0010b8c:	83 c4 10             	add    esp,0x10
c0010b8f:	89 c2                	mov    edx,eax
c0010b91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b9d:	83 ec 04             	sub    esp,0x4
c0010ba0:	6a 68                	push   0x68
c0010ba2:	6a 00                	push   0x0
c0010ba4:	50                   	push   eax
c0010ba5:	e8 a6 fb fe ff       	call   c0000750 <memset>
c0010baa:	83 c4 10             	add    esp,0x10
c0010bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bb3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bbf:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bcb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bef:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bfb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c07:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c13:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c1f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c22:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c2b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c2e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c37:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c44:	0f 20 da             	mov    edx,cr3
c0010c47:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c4a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c4d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c56:	83 ec 08             	sub    esp,0x8
c0010c59:	50                   	push   eax
c0010c5a:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c5d:	50                   	push   eax
c0010c5e:	e8 2f e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c63:	83 c4 10             	add    esp,0x10
c0010c66:	83 ec 08             	sub    esp,0x8
c0010c69:	6a 68                	push   0x68
c0010c6b:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c6e:	50                   	push   eax
c0010c6f:	e8 3a e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c74:	83 c4 10             	add    esp,0x10
c0010c77:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010c7b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c7e:	83 e0 0f             	and    eax,0xf
c0010c81:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c84:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c87:	83 c8 40             	or     eax,0x40
c0010c8a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c8d:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0010c92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c98:	05 78 01 00 00       	add    eax,0x178
c0010c9d:	83 ec 04             	sub    esp,0x4
c0010ca0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ca3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010ca6:	50                   	push   eax
c0010ca7:	e8 36 e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cac:	83 c4 10             	add    esp,0x10
c0010caf:	89 c2                	mov    edx,eax
c0010cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cb4:	89 10                	mov    DWORD PTR [eax],edx
c0010cb6:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0010cbb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cc1:	05 78 01 00 00       	add    eax,0x178
c0010cc6:	83 ec 0c             	sub    esp,0xc
c0010cc9:	50                   	push   eax
c0010cca:	e8 3d e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010ccf:	83 c4 10             	add    esp,0x10
c0010cd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cd7:	c9                   	leave  
c0010cd8:	c3                   	ret    
c0010cd9:	90                   	nop

c0010cda <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cde:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010ce2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010cea:	75 08                	jne    c0010cf4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010cec:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010cf2:	eb 38                	jmp    c0010d2c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010cf4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010cf9:	75 17                	jne    c0010d12 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010cfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d00:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d03:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d09:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d0f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d12:	89 c1                	mov    ecx,eax
c0010d14:	83 e1 fd             	and    ecx,0xfffffffd
c0010d17:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d1d:	74 cd                	je     c0010cec <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d1f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d24:	83 e0 ef             	and    eax,0xffffffef
c0010d27:	83 f8 08             	cmp    eax,0x8
c0010d2a:	76 c0                	jbe    c0010cec <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d2c:	31 c0                	xor    eax,eax
c0010d2e:	c3                   	ret    
c0010d2f:	90                   	nop

c0010d30 <ReservedFilename::isAtty()>:
c0010d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d34:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d37:	31 c0                	xor    eax,eax
c0010d39:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d3f:	74 09                	je     c0010d4a <ReservedFilename::isAtty()+0x1a>
c0010d41:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d47:	0f 94 c0             	sete   al
c0010d4a:	c3                   	ret    
c0010d4b:	90                   	nop

c0010d4c <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d5b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d60:	75 08                	jne    c0010d6a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d62:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d68:	eb 3d                	jmp    c0010da7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d6a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d6f:	75 17                	jne    c0010d88 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d76:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d79:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d81:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d85:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010d88:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d8d:	75 04                	jne    c0010d93 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010d8f:	89 0a                	mov    DWORD PTR [edx],ecx
c0010d91:	eb 14                	jmp    c0010da7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d93:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010d98:	74 c8                	je     c0010d62 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d9a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d9f:	83 e0 ef             	and    eax,0xffffffef
c0010da2:	83 f8 08             	cmp    eax,0x8
c0010da5:	76 bb                	jbe    c0010d62 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010da7:	31 c0                	xor    eax,eax
c0010da9:	c3                   	ret    

c0010daa <UnixFile::getFileDescriptor()>:
c0010daa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010db1:	c3                   	ret    

c0010db2 <UnixFile::UnixFile(int)>:
c0010db2:	53                   	push   ebx
c0010db3:	83 ec 28             	sub    esp,0x28
c0010db6:	ba 4c a2 02 c0       	mov    edx,0xc002a24c
c0010dbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dbf:	89 10                	mov    DWORD PTR [eax],edx
c0010dc1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010dc9:	0f 8f 8c 01 00 00    	jg     c0010f5b <UnixFile::UnixFile(int)+0x1a9>
c0010dcf:	a1 c0 c8 02 c0       	mov    eax,ds:0xc002c8c0
c0010dd4:	8d 50 01             	lea    edx,[eax+0x1]
c0010dd7:	89 15 c0 c8 02 c0    	mov    DWORD PTR ds:0xc002c8c0,edx
c0010ddd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010de1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010de4:	83 ec 08             	sub    esp,0x8
c0010de7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010deb:	68 78 da 02 c0       	push   0xc002da78
c0010df0:	e8 61 76 01 00       	call   c0028456 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010df5:	83 c4 10             	add    esp,0x10
c0010df8:	a0 74 da 02 c0       	mov    al,ds:0xc002da74
c0010dfd:	83 f0 01             	xor    eax,0x1
c0010e00:	84 c0                	test   al,al
c0010e02:	0f 84 54 01 00 00    	je     c0010f5c <UnixFile::UnixFile(int)+0x1aa>
c0010e08:	c6 05 74 da 02 c0 01 	mov    BYTE PTR ds:0xc002da74,0x1
c0010e0f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e17:	83 ec 0c             	sub    esp,0xc
c0010e1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e1e:	e8 76 e7 ff ff       	call   c000f599 <malloc>
c0010e23:	83 c4 10             	add    esp,0x10
c0010e26:	89 c3                	mov    ebx,eax
c0010e28:	83 ec 08             	sub    esp,0x8
c0010e2b:	68 03 ff ff 0f       	push   0xfffff03
c0010e30:	53                   	push   ebx
c0010e31:	e8 2c 01 00 00       	call   c0010f62 <ReservedFilename::ReservedFilename(int)>
c0010e36:	83 c4 10             	add    esp,0x10
c0010e39:	89 1d 6c da 02 c0    	mov    DWORD PTR ds:0xc002da6c,ebx
c0010e3f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e47:	83 ec 0c             	sub    esp,0xc
c0010e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e4e:	e8 46 e7 ff ff       	call   c000f599 <malloc>
c0010e53:	83 c4 10             	add    esp,0x10
c0010e56:	89 c3                	mov    ebx,eax
c0010e58:	83 ec 08             	sub    esp,0x8
c0010e5b:	68 01 ff ff 0f       	push   0xfffff01
c0010e60:	53                   	push   ebx
c0010e61:	e8 fc 00 00 00       	call   c0010f62 <ReservedFilename::ReservedFilename(int)>
c0010e66:	83 c4 10             	add    esp,0x10
c0010e69:	89 1d 70 da 02 c0    	mov    DWORD PTR ds:0xc002da70,ebx
c0010e6f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e77:	83 ec 0c             	sub    esp,0xc
c0010e7a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e7e:	e8 16 e7 ff ff       	call   c000f599 <malloc>
c0010e83:	83 c4 10             	add    esp,0x10
c0010e86:	89 c3                	mov    ebx,eax
c0010e88:	83 ec 08             	sub    esp,0x8
c0010e8b:	68 00 ff ff 0f       	push   0xfffff00
c0010e90:	53                   	push   ebx
c0010e91:	e8 cc 00 00 00       	call   c0010f62 <ReservedFilename::ReservedFilename(int)>
c0010e96:	83 c4 10             	add    esp,0x10
c0010e99:	89 1d 64 da 02 c0    	mov    DWORD PTR ds:0xc002da64,ebx
c0010e9f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010ea7:	83 ec 0c             	sub    esp,0xc
c0010eaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010eae:	e8 e6 e6 ff ff       	call   c000f599 <malloc>
c0010eb3:	83 c4 10             	add    esp,0x10
c0010eb6:	89 c3                	mov    ebx,eax
c0010eb8:	83 ec 08             	sub    esp,0x8
c0010ebb:	68 02 ff ff 0f       	push   0xfffff02
c0010ec0:	53                   	push   ebx
c0010ec1:	e8 9c 00 00 00       	call   c0010f62 <ReservedFilename::ReservedFilename(int)>
c0010ec6:	83 c4 10             	add    esp,0x10
c0010ec9:	89 1d 68 da 02 c0    	mov    DWORD PTR ds:0xc002da68,ebx
c0010ecf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010ed7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010edc:	7f 7e                	jg     c0010f5c <UnixFile::UnixFile(int)+0x1aa>
c0010ede:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010ee6:	83 ec 0c             	sub    esp,0xc
c0010ee9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010eed:	e8 a7 e6 ff ff       	call   c000f599 <malloc>
c0010ef2:	83 c4 10             	add    esp,0x10
c0010ef5:	89 c3                	mov    ebx,eax
c0010ef7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010efb:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f00:	83 ec 08             	sub    esp,0x8
c0010f03:	50                   	push   eax
c0010f04:	53                   	push   ebx
c0010f05:	e8 58 00 00 00       	call   c0010f62 <ReservedFilename::ReservedFilename(int)>
c0010f0a:	83 c4 10             	add    esp,0x10
c0010f0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f11:	89 1c 85 40 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd25c0],ebx
c0010f18:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f20:	83 ec 0c             	sub    esp,0xc
c0010f23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f27:	e8 6d e6 ff ff       	call   c000f599 <malloc>
c0010f2c:	83 c4 10             	add    esp,0x10
c0010f2f:	89 c3                	mov    ebx,eax
c0010f31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f35:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f3a:	83 ec 08             	sub    esp,0x8
c0010f3d:	50                   	push   eax
c0010f3e:	53                   	push   ebx
c0010f3f:	e8 1e 00 00 00       	call   c0010f62 <ReservedFilename::ReservedFilename(int)>
c0010f44:	83 c4 10             	add    esp,0x10
c0010f47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f4b:	89 1c 85 00 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2600],ebx
c0010f52:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f56:	e9 7c ff ff ff       	jmp    c0010ed7 <UnixFile::UnixFile(int)+0x125>
c0010f5b:	90                   	nop
c0010f5c:	83 c4 28             	add    esp,0x28
c0010f5f:	5b                   	pop    ebx
c0010f60:	c3                   	ret    
c0010f61:	90                   	nop

c0010f62 <ReservedFilename::ReservedFilename(int)>:
c0010f62:	83 ec 0c             	sub    esp,0xc
c0010f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f69:	83 ec 08             	sub    esp,0x8
c0010f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f70:	50                   	push   eax
c0010f71:	e8 3c fe ff ff       	call   c0010db2 <UnixFile::UnixFile(int)>
c0010f76:	83 c4 10             	add    esp,0x10
c0010f79:	ba 68 a2 02 c0       	mov    edx,0xc002a268
c0010f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f82:	89 10                	mov    DWORD PTR [eax],edx
c0010f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f8c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f8f:	90                   	nop
c0010f90:	83 c4 0c             	add    esp,0xc
c0010f93:	c3                   	ret    

c0010f94 <UnixFile::~UnixFile()>:
c0010f94:	83 ec 1c             	sub    esp,0x1c
c0010f97:	ba 4c a2 02 c0       	mov    edx,0xc002a24c
c0010f9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fa0:	89 10                	mov    DWORD PTR [eax],edx
c0010fa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fa9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fae:	7f 73                	jg     c0011023 <UnixFile::~UnixFile()+0x8f>
c0010fb0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fb8:	83 ec 0c             	sub    esp,0xc
c0010fbb:	68 78 da 02 c0       	push   0xc002da78
c0010fc0:	e8 65 75 01 00       	call   c002852a <LinkedList<UnixFile>::getFirstElement()>
c0010fc5:	83 c4 10             	add    esp,0x10
c0010fc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010fcc:	83 ec 0c             	sub    esp,0xc
c0010fcf:	68 78 da 02 c0       	push   0xc002da78
c0010fd4:	e8 59 75 01 00       	call   c0028532 <LinkedList<UnixFile>::removeFirst()>
c0010fd9:	83 c4 10             	add    esp,0x10
c0010fdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010fe0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010fe4:	74 40                	je     c0011026 <UnixFile::~UnixFile()+0x92>
c0010fe6:	83 ec 08             	sub    esp,0x8
c0010fe9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010fed:	68 78 da 02 c0       	push   0xc002da78
c0010ff2:	e8 5f 74 01 00       	call   c0028456 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010ff7:	83 c4 10             	add    esp,0x10
c0010ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ffe:	8d 50 01             	lea    edx,[eax+0x1]
c0011001:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011005:	3d 88 13 00 00       	cmp    eax,0x1388
c001100a:	0f 94 c0             	sete   al
c001100d:	84 c0                	test   al,al
c001100f:	74 a7                	je     c0010fb8 <UnixFile::~UnixFile()+0x24>
c0011011:	83 ec 0c             	sub    esp,0xc
c0011014:	68 24 a2 02 c0       	push   0xc002a224
c0011019:	e8 ef 8d 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c001101e:	83 c4 10             	add    esp,0x10
c0011021:	eb 95                	jmp    c0010fb8 <UnixFile::~UnixFile()+0x24>
c0011023:	90                   	nop
c0011024:	eb 01                	jmp    c0011027 <UnixFile::~UnixFile()+0x93>
c0011026:	90                   	nop
c0011027:	90                   	nop
c0011028:	83 c4 1c             	add    esp,0x1c
c001102b:	c3                   	ret    

c001102c <UnixFile::~UnixFile()>:
c001102c:	83 ec 0c             	sub    esp,0xc
c001102f:	83 ec 0c             	sub    esp,0xc
c0011032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011036:	e8 59 ff ff ff       	call   c0010f94 <UnixFile::~UnixFile()>
c001103b:	83 c4 10             	add    esp,0x10
c001103e:	83 ec 08             	sub    esp,0x8
c0011041:	6a 0c                	push   0xc
c0011043:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011047:	e8 7d 15 00 00       	call   c00125c9 <operator delete(void*, unsigned long)>
c001104c:	83 c4 10             	add    esp,0x10
c001104f:	83 c4 0c             	add    esp,0xc
c0011052:	c3                   	ret    
c0011053:	90                   	nop

c0011054 <ReservedFilename::~ReservedFilename()>:
c0011054:	83 ec 0c             	sub    esp,0xc
c0011057:	ba 68 a2 02 c0       	mov    edx,0xc002a268
c001105c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011060:	89 10                	mov    DWORD PTR [eax],edx
c0011062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011066:	83 ec 0c             	sub    esp,0xc
c0011069:	50                   	push   eax
c001106a:	e8 25 ff ff ff       	call   c0010f94 <UnixFile::~UnixFile()>
c001106f:	83 c4 10             	add    esp,0x10
c0011072:	90                   	nop
c0011073:	83 c4 0c             	add    esp,0xc
c0011076:	c3                   	ret    
c0011077:	90                   	nop

c0011078 <ReservedFilename::~ReservedFilename()>:
c0011078:	83 ec 0c             	sub    esp,0xc
c001107b:	83 ec 0c             	sub    esp,0xc
c001107e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011082:	e8 cd ff ff ff       	call   c0011054 <ReservedFilename::~ReservedFilename()>
c0011087:	83 c4 10             	add    esp,0x10
c001108a:	83 ec 08             	sub    esp,0x8
c001108d:	6a 0c                	push   0xc
c001108f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011093:	e8 31 15 00 00       	call   c00125c9 <operator delete(void*, unsigned long)>
c0011098:	83 c4 10             	add    esp,0x10
c001109b:	83 c4 0c             	add    esp,0xc
c001109e:	c3                   	ret    

c001109f <getFromFileDescriptor(int)>:
c001109f:	53                   	push   ebx
c00110a0:	83 ec 08             	sub    esp,0x8
c00110a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110a7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110ad:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110b3:	7f 2c                	jg     c00110e1 <getFromFileDescriptor(int)+0x42>
c00110b5:	83 ec 0c             	sub    esp,0xc
c00110b8:	68 78 da 02 c0       	push   0xc002da78
c00110bd:	e8 68 74 01 00       	call   c002852a <LinkedList<UnixFile>::getFirstElement()>
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	85 c0                	test   eax,eax
c00110c7:	75 04                	jne    c00110cd <getFromFileDescriptor(int)+0x2e>
c00110c9:	31 c0                	xor    eax,eax
c00110cb:	eb 6e                	jmp    c001113b <getFromFileDescriptor(int)+0x9c>
c00110cd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110d0:	74 69                	je     c001113b <getFromFileDescriptor(int)+0x9c>
c00110d2:	52                   	push   edx
c00110d3:	52                   	push   edx
c00110d4:	50                   	push   eax
c00110d5:	68 78 da 02 c0       	push   0xc002da78
c00110da:	e8 f5 74 01 00       	call   c00285d4 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00110df:	eb e1                	jmp    c00110c2 <getFromFileDescriptor(int)+0x23>
c00110e1:	a1 6c da 02 c0       	mov    eax,ds:0xc002da6c
c00110e6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00110ec:	74 4d                	je     c001113b <getFromFileDescriptor(int)+0x9c>
c00110ee:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c00110f3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00110f9:	74 40                	je     c001113b <getFromFileDescriptor(int)+0x9c>
c00110fb:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0011100:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011106:	74 33                	je     c001113b <getFromFileDescriptor(int)+0x9c>
c0011108:	a1 64 da 02 c0       	mov    eax,ds:0xc002da64
c001110d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011113:	74 26                	je     c001113b <getFromFileDescriptor(int)+0x9c>
c0011115:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001111b:	83 f8 08             	cmp    eax,0x8
c001111e:	77 09                	ja     c0011129 <getFromFileDescriptor(int)+0x8a>
c0011120:	8b 04 85 40 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd25c0]
c0011127:	eb 12                	jmp    c001113b <getFromFileDescriptor(int)+0x9c>
c0011129:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001112f:	83 fb 08             	cmp    ebx,0x8
c0011132:	77 95                	ja     c00110c9 <getFromFileDescriptor(int)+0x2a>
c0011134:	8b 04 9d 00 da 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2600]
c001113b:	83 c4 08             	add    esp,0x8
c001113e:	5b                   	pop    ebx
c001113f:	c3                   	ret    

c0011140 <__static_initialization_and_destruction_0(int, int)>:
c0011140:	83 ec 0c             	sub    esp,0xc
c0011143:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011148:	75 34                	jne    c001117e <__static_initialization_and_destruction_0(int, int)+0x3e>
c001114a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011152:	75 2a                	jne    c001117e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011154:	83 ec 0c             	sub    esp,0xc
c0011157:	68 78 da 02 c0       	push   0xc002da78
c001115c:	e8 b3 72 01 00       	call   c0028414 <LinkedList<UnixFile>::LinkedList()>
c0011161:	83 c4 10             	add    esp,0x10
c0011164:	83 ec 04             	sub    esp,0x4
c0011167:	68 f8 c6 02 c0       	push   0xc002c6f8
c001116c:	68 78 da 02 c0       	push   0xc002da78
c0011171:	68 12 84 02 c0       	push   0xc0028412
c0011176:	e8 c8 13 00 00       	call   c0012543 <__cxa_atexit>
c001117b:	83 c4 10             	add    esp,0x10
c001117e:	90                   	nop
c001117f:	83 c4 0c             	add    esp,0xc
c0011182:	c3                   	ret    

c0011183 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011183:	83 ec 0c             	sub    esp,0xc
c0011186:	83 ec 08             	sub    esp,0x8
c0011189:	68 ff ff 00 00       	push   0xffff
c001118e:	6a 01                	push   0x1
c0011190:	e8 ab ff ff ff       	call   c0011140 <__static_initialization_and_destruction_0(int, int)>
c0011195:	83 c4 10             	add    esp,0x10
c0011198:	83 c4 0c             	add    esp,0xc
c001119b:	c3                   	ret    

c001119c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001119c:	53                   	push   ebx
c001119d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111a5:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111ab:	89 c8                	mov    eax,ecx
c00111ad:	d1 e8                	shr    eax,1
c00111af:	03 05 c8 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c8c8
c00111b5:	83 e1 01             	and    ecx,0x1
c00111b8:	8a 10                	mov    dl,BYTE PTR [eax]
c00111ba:	75 09                	jne    c00111c5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111bc:	83 e2 f0             	and    edx,0xfffffff0
c00111bf:	09 da                	or     edx,ebx
c00111c1:	88 10                	mov    BYTE PTR [eax],dl
c00111c3:	5b                   	pop    ebx
c00111c4:	c3                   	ret    
c00111c5:	c1 e3 04             	shl    ebx,0x4
c00111c8:	83 e2 0f             	and    edx,0xf
c00111cb:	09 da                	or     edx,ebx
c00111cd:	88 10                	mov    BYTE PTR [eax],dl
c00111cf:	5b                   	pop    ebx
c00111d0:	c3                   	ret    

c00111d1 <Virt::getPageState(unsigned long)>:
c00111d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111d5:	8b 0d c8 c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c8c8
c00111db:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00111e1:	89 d0                	mov    eax,edx
c00111e3:	d1 e8                	shr    eax,1
c00111e5:	83 e2 01             	and    edx,0x1
c00111e8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00111eb:	75 04                	jne    c00111f1 <Virt::getPageState(unsigned long)+0x20>
c00111ed:	83 e0 0f             	and    eax,0xf
c00111f0:	c3                   	ret    
c00111f1:	c0 e8 04             	shr    al,0x4
c00111f4:	c3                   	ret    

c00111f5 <Virt::allocateKernelVirtualPages(int)>:
c00111f5:	55                   	push   ebp
c00111f6:	31 ed                	xor    ebp,ebp
c00111f8:	57                   	push   edi
c00111f9:	56                   	push   esi
c00111fa:	53                   	push   ebx
c00111fb:	31 db                	xor    ebx,ebx
c00111fd:	83 ec 1c             	sub    esp,0x1c
c0011200:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011204:	8b 3d c4 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c8c4
c001120a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001120f:	57                   	push   edi
c0011210:	e8 bc ff ff ff       	call   c00111d1 <Virt::getPageState(unsigned long)>
c0011215:	5a                   	pop    edx
c0011216:	84 c0                	test   al,al
c0011218:	75 3a                	jne    c0011254 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001121a:	85 db                	test   ebx,ebx
c001121c:	75 02                	jne    c0011220 <Virt::allocateKernelVirtualPages(int)+0x2b>
c001121e:	89 fd                	mov    ebp,edi
c0011220:	43                   	inc    ebx
c0011221:	39 f3                	cmp    ebx,esi
c0011223:	74 5a                	je     c001127f <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011225:	47                   	inc    edi
c0011226:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001122c:	76 31                	jbe    c001125f <Virt::allocateKernelVirtualPages(int)+0x6a>
c001122e:	c7 05 c4 c8 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c8c4,0xc8000
c0011238:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001123d:	75 28                	jne    c0011267 <Virt::allocateKernelVirtualPages(int)+0x72>
c001123f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011244:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011249:	57                   	push   edi
c001124a:	e8 82 ff ff ff       	call   c00111d1 <Virt::getPageState(unsigned long)>
c001124f:	5a                   	pop    edx
c0011250:	84 c0                	test   al,al
c0011252:	74 c6                	je     c001121a <Virt::allocateKernelVirtualPages(int)+0x25>
c0011254:	31 db                	xor    ebx,ebx
c0011256:	47                   	inc    edi
c0011257:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001125d:	77 cf                	ja     c001122e <Virt::allocateKernelVirtualPages(int)+0x39>
c001125f:	89 3d c4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8c4,edi
c0011265:	eb a8                	jmp    c001120f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011267:	83 ec 0c             	sub    esp,0xc
c001126a:	68 7c a2 02 c0       	push   0xc002a27c
c001126f:	e8 99 8b 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0011274:	8b 3d c4 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c8c4
c001127a:	83 c4 10             	add    esp,0x10
c001127d:	eb 90                	jmp    c001120f <Virt::allocateKernelVirtualPages(int)+0x1a>
c001127f:	89 2d c4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8c4,ebp
c0011285:	4b                   	dec    ebx
c0011286:	74 5f                	je     c00112e7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011288:	85 f6                	test   esi,esi
c001128a:	74 3d                	je     c00112c9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001128c:	89 e8                	mov    eax,ebp
c001128e:	31 db                	xor    ebx,ebx
c0011290:	8d 7e ff             	lea    edi,[esi-0x1]
c0011293:	eb 14                	jmp    c00112a9 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011295:	6a 01                	push   0x1
c0011297:	43                   	inc    ebx
c0011298:	50                   	push   eax
c0011299:	e8 fe fe ff ff       	call   c001119c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001129e:	58                   	pop    eax
c001129f:	39 f3                	cmp    ebx,esi
c00112a1:	5a                   	pop    edx
c00112a2:	74 25                	je     c00112c9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112a4:	a1 c4 c8 02 c0       	mov    eax,ds:0xc002c8c4
c00112a9:	8d 50 01             	lea    edx,[eax+0x1]
c00112ac:	85 db                	test   ebx,ebx
c00112ae:	89 15 c4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8c4,edx
c00112b4:	74 20                	je     c00112d6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112b6:	39 df                	cmp    edi,ebx
c00112b8:	75 db                	jne    c0011295 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112ba:	6a 03                	push   0x3
c00112bc:	43                   	inc    ebx
c00112bd:	50                   	push   eax
c00112be:	e8 d9 fe ff ff       	call   c001119c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c3:	59                   	pop    ecx
c00112c4:	39 f3                	cmp    ebx,esi
c00112c6:	58                   	pop    eax
c00112c7:	75 db                	jne    c00112a4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112c9:	83 c4 1c             	add    esp,0x1c
c00112cc:	89 e8                	mov    eax,ebp
c00112ce:	5b                   	pop    ebx
c00112cf:	c1 e0 0c             	shl    eax,0xc
c00112d2:	5e                   	pop    esi
c00112d3:	5f                   	pop    edi
c00112d4:	5d                   	pop    ebp
c00112d5:	c3                   	ret    
c00112d6:	6a 02                	push   0x2
c00112d8:	bb 01 00 00 00       	mov    ebx,0x1
c00112dd:	50                   	push   eax
c00112de:	e8 b9 fe ff ff       	call   c001119c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112e3:	58                   	pop    eax
c00112e4:	5a                   	pop    edx
c00112e5:	eb bd                	jmp    c00112a4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112e7:	6a 04                	push   0x4
c00112e9:	8d 45 01             	lea    eax,[ebp+0x1]
c00112ec:	55                   	push   ebp
c00112ed:	a3 c4 c8 02 c0       	mov    ds:0xc002c8c4,eax
c00112f2:	e8 a5 fe ff ff       	call   c001119c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112f7:	59                   	pop    ecx
c00112f8:	89 e8                	mov    eax,ebp
c00112fa:	5b                   	pop    ebx
c00112fb:	c1 e0 0c             	shl    eax,0xc
c00112fe:	83 c4 1c             	add    esp,0x1c
c0011301:	5b                   	pop    ebx
c0011302:	5e                   	pop    esi
c0011303:	5f                   	pop    edi
c0011304:	5d                   	pop    ebp
c0011305:	c3                   	ret    

c0011306 <Virt::freeSwapfilePage(unsigned long)>:
c0011306:	53                   	push   ebx
c0011307:	8b 15 8c da 02 c0    	mov    edx,DWORD PTR ds:0xc002da8c
c001130d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011311:	b8 01 00 00 00       	mov    eax,0x1
c0011316:	89 cb                	mov    ebx,ecx
c0011318:	d3 e0                	shl    eax,cl
c001131a:	c1 eb 05             	shr    ebx,0x5
c001131d:	f7 d0                	not    eax
c001131f:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011322:	5b                   	pop    ebx
c0011323:	c3                   	ret    

c0011324 <Virt::swapIDToSector(unsigned long)>:
c0011324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011328:	0f af 05 cc c8 02 c0 	imul   eax,DWORD PTR ds:0xc002c8cc
c001132f:	03 05 d4 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c8d4
c0011335:	c3                   	ret    

c0011336 <Virt::allocateSwapfilePage()>:
c0011336:	55                   	push   ebp
c0011337:	31 d2                	xor    edx,edx
c0011339:	57                   	push   edi
c001133a:	56                   	push   esi
c001133b:	53                   	push   ebx
c001133c:	83 ec 0c             	sub    esp,0xc
c001133f:	8b 0d cc c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c8cc
c0011345:	a1 d0 c8 02 c0       	mov    eax,ds:0xc002c8d0
c001134a:	f7 f1                	div    ecx
c001134c:	39 0d d0 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8d0,ecx
c0011352:	72 2d                	jb     c0011381 <Virt::allocateSwapfilePage()+0x4b>
c0011354:	8b 35 8c da 02 c0    	mov    esi,DWORD PTR ds:0xc002da8c
c001135a:	8b 16                	mov    edx,DWORD PTR [esi]
c001135c:	f6 c2 01             	test   dl,0x1
c001135f:	74 3c                	je     c001139d <Virt::allocateSwapfilePage()+0x67>
c0011361:	31 c9                	xor    ecx,ecx
c0011363:	bf 01 00 00 00       	mov    edi,0x1
c0011368:	eb 12                	jmp    c001137c <Virt::allocateSwapfilePage()+0x46>
c001136a:	89 fd                	mov    ebp,edi
c001136c:	89 ca                	mov    edx,ecx
c001136e:	d3 e5                	shl    ebp,cl
c0011370:	c1 ea 05             	shr    edx,0x5
c0011373:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011376:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011378:	85 ea                	test   edx,ebp
c001137a:	74 2a                	je     c00113a6 <Virt::allocateSwapfilePage()+0x70>
c001137c:	41                   	inc    ecx
c001137d:	39 c8                	cmp    eax,ecx
c001137f:	77 e9                	ja     c001136a <Virt::allocateSwapfilePage()+0x34>
c0011381:	83 ec 0c             	sub    esp,0xc
c0011384:	68 34 a4 02 c0       	push   0xc002a434
c0011389:	e8 7f 8a 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	31 c9                	xor    ecx,ecx
c0011393:	83 c4 0c             	add    esp,0xc
c0011396:	89 c8                	mov    eax,ecx
c0011398:	5b                   	pop    ebx
c0011399:	5e                   	pop    esi
c001139a:	5f                   	pop    edi
c001139b:	5d                   	pop    ebp
c001139c:	c3                   	ret    
c001139d:	89 f3                	mov    ebx,esi
c001139f:	bd 01 00 00 00       	mov    ebp,0x1
c00113a4:	31 c9                	xor    ecx,ecx
c00113a6:	09 ea                	or     edx,ebp
c00113a8:	89 c8                	mov    eax,ecx
c00113aa:	89 13                	mov    DWORD PTR [ebx],edx
c00113ac:	83 c4 0c             	add    esp,0xc
c00113af:	5b                   	pop    ebx
c00113b0:	5e                   	pop    esi
c00113b1:	5f                   	pop    edi
c00113b2:	5d                   	pop    ebp
c00113b3:	c3                   	ret    

c00113b4 <Virt::virtualMemorySetup()>:
c00113b4:	53                   	push   ebx
c00113b5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113ba:	6a 0f                	push   0xf
c00113bc:	53                   	push   ebx
c00113bd:	43                   	inc    ebx
c00113be:	e8 d9 fd ff ff       	call   c001119c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113c3:	58                   	pop    eax
c00113c4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113ca:	5a                   	pop    edx
c00113cb:	75 ed                	jne    c00113ba <Virt::virtualMemorySetup()+0x6>
c00113cd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113d2:	6a 00                	push   0x0
c00113d4:	53                   	push   ebx
c00113d5:	43                   	inc    ebx
c00113d6:	e8 c1 fd ff ff       	call   c001119c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113db:	59                   	pop    ecx
c00113dc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113e2:	58                   	pop    eax
c00113e3:	75 ed                	jne    c00113d2 <Virt::virtualMemorySetup()+0x1e>
c00113e5:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113ea:	6a 0f                	push   0xf
c00113ec:	53                   	push   ebx
c00113ed:	43                   	inc    ebx
c00113ee:	e8 a9 fd ff ff       	call   c001119c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113f3:	58                   	pop    eax
c00113f4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113fa:	5a                   	pop    edx
c00113fb:	75 ed                	jne    c00113ea <Virt::virtualMemorySetup()+0x36>
c00113fd:	5b                   	pop    ebx
c00113fe:	c3                   	ret    

c00113ff <Virt::setupPageSwapping(int)>:
c00113ff:	57                   	push   edi
c0011400:	56                   	push   esi
c0011401:	53                   	push   ebx
c0011402:	83 ec 1c             	sub    esp,0x1c
c0011405:	68 14 01 00 00       	push   0x114
c001140a:	e8 8a e1 ff ff       	call   c000f599 <malloc>
c001140f:	83 c4 0c             	add    esp,0xc
c0011412:	89 c6                	mov    esi,eax
c0011414:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c001141a:	68 4b a4 02 c0       	push   0xc002a44b
c001141f:	50                   	push   eax
c0011420:	e8 db 17 00 00       	call   c0012c00 <File::File(char const*, Process*)>
c0011425:	89 34 24             	mov    DWORD PTR [esp],esi
c0011428:	e8 af 19 00 00       	call   c0012ddc <File::unlink()>
c001142d:	58                   	pop    eax
c001142e:	5a                   	pop    edx
c001142f:	6a 12                	push   0x12
c0011431:	56                   	push   esi
c0011432:	e8 2d 18 00 00       	call   c0012c64 <File::open(FileOpenMode)>
c0011437:	83 c4 10             	add    esp,0x10
c001143a:	85 c0                	test   eax,eax
c001143c:	0f 85 2f 01 00 00    	jne    c0011571 <Virt::setupPageSwapping(int)+0x172>
c0011442:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011446:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001144e:	c1 e3 08             	shl    ebx,0x8
c0011451:	83 ec 0c             	sub    esp,0xc
c0011454:	68 00 00 01 00       	push   0x10000
c0011459:	e8 3b e1 ff ff       	call   c000f599 <malloc>
c001145e:	83 c4 0c             	add    esp,0xc
c0011461:	89 c7                	mov    edi,eax
c0011463:	68 00 00 01 00       	push   0x10000
c0011468:	68 ee 00 00 00       	push   0xee
c001146d:	50                   	push   eax
c001146e:	e8 dd f2 fe ff       	call   c0000750 <memset>
c0011473:	83 c4 10             	add    esp,0x10
c0011476:	85 db                	test   ebx,ebx
c0011478:	79 03                	jns    c001147d <Virt::setupPageSwapping(int)+0x7e>
c001147a:	83 c3 0f             	add    ebx,0xf
c001147d:	c1 fb 04             	sar    ebx,0x4
c0011480:	4b                   	dec    ebx
c0011481:	83 fb ff             	cmp    ebx,0xffffffff
c0011484:	74 41                	je     c00114c7 <Virt::setupPageSwapping(int)+0xc8>
c0011486:	83 ec 0c             	sub    esp,0xc
c0011489:	8b 06                	mov    eax,DWORD PTR [esi]
c001148b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001148f:	52                   	push   edx
c0011490:	57                   	push   edi
c0011491:	6a 00                	push   0x0
c0011493:	68 00 00 01 00       	push   0x10000
c0011498:	56                   	push   esi
c0011499:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001149c:	83 c4 20             	add    esp,0x20
c001149f:	85 c0                	test   eax,eax
c00114a1:	0f 85 b5 00 00 00    	jne    c001155c <Virt::setupPageSwapping(int)+0x15d>
c00114a7:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c00114af:	74 cf                	je     c0011480 <Virt::setupPageSwapping(int)+0x81>
c00114b1:	83 ec 0c             	sub    esp,0xc
c00114b4:	4b                   	dec    ebx
c00114b5:	68 7d a4 02 c0       	push   0xc002a47d
c00114ba:	e8 4e 89 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c00114bf:	83 c4 10             	add    esp,0x10
c00114c2:	83 fb ff             	cmp    ebx,0xffffffff
c00114c5:	75 bf                	jne    c0011486 <Virt::setupPageSwapping(int)+0x87>
c00114c7:	83 ec 0c             	sub    esp,0xc
c00114ca:	56                   	push   esi
c00114cb:	e8 f2 17 00 00       	call   c0012cc2 <File::close()>
c00114d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114d3:	e8 e1 e0 ff ff       	call   c000f5b9 <rfree>
c00114d8:	83 c4 10             	add    esp,0x10
c00114db:	85 f6                	test   esi,esi
c00114dd:	74 0c                	je     c00114eb <Virt::setupPageSwapping(int)+0xec>
c00114df:	83 ec 0c             	sub    esp,0xc
c00114e2:	8b 06                	mov    eax,DWORD PTR [esi]
c00114e4:	56                   	push   esi
c00114e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114e8:	83 c4 10             	add    esp,0x10
c00114eb:	83 ec 08             	sub    esp,0x8
c00114ee:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c00114f3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00114fb:	68 4b a4 02 c0       	push   0xc002a44b
c0011500:	50                   	push   eax
c0011501:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011504:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011508:	c6 05 d8 c8 02 c0 43 	mov    BYTE PTR ds:0xc002c8d8,0x43
c001150f:	c1 e2 0b             	shl    edx,0xb
c0011512:	a3 d4 c8 02 c0       	mov    ds:0xc002c8d4,eax
c0011517:	89 15 d0 c8 02 c0    	mov    DWORD PTR ds:0xc002c8d0,edx
c001151d:	c7 05 cc c8 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c8cc,0x8
c0011527:	c1 ea 08             	shr    edx,0x8
c001152a:	89 14 24             	mov    DWORD PTR [esp],edx
c001152d:	e8 67 e0 ff ff       	call   c000f599 <malloc>
c0011532:	83 c4 0c             	add    esp,0xc
c0011535:	89 c1                	mov    ecx,eax
c0011537:	a3 8c da 02 c0       	mov    ds:0xc002da8c,eax
c001153c:	31 d2                	xor    edx,edx
c001153e:	a1 d0 c8 02 c0       	mov    eax,ds:0xc002c8d0
c0011543:	f7 35 cc c8 02 c0    	div    DWORD PTR ds:0xc002c8cc
c0011549:	c1 e8 05             	shr    eax,0x5
c001154c:	50                   	push   eax
c001154d:	6a 00                	push   0x0
c001154f:	51                   	push   ecx
c0011550:	e8 fb f1 fe ff       	call   c0000750 <memset>
c0011555:	83 c4 20             	add    esp,0x20
c0011558:	5b                   	pop    ebx
c0011559:	5e                   	pop    esi
c001155a:	5f                   	pop    edi
c001155b:	c3                   	ret    
c001155c:	83 ec 0c             	sub    esp,0xc
c001155f:	68 7d a4 02 c0       	push   0xc002a47d
c0011564:	e8 a4 88 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0011569:	83 c4 10             	add    esp,0x10
c001156c:	e9 36 ff ff ff       	jmp    c00114a7 <Virt::setupPageSwapping(int)+0xa8>
c0011571:	83 ec 0c             	sub    esp,0xc
c0011574:	68 62 a4 02 c0       	push   0xc002a462
c0011579:	e8 8f 88 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c001157e:	83 c4 10             	add    esp,0x10
c0011581:	e9 bc fe ff ff       	jmp    c0011442 <Virt::setupPageSwapping(int)+0x43>

c0011586 <VAS::VAS()>:
c0011586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001158a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011595:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001159c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115a0:	a3 90 da 02 c0       	mov    ds:0xc002da90,eax
c00115a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115a9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00115ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00115b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00115bf:	90                   	nop
c00115c0:	c3                   	ret    
c00115c1:	90                   	nop

c00115c2 <VAS::VAS(VAS*)>:
c00115c2:	83 ec 0c             	sub    esp,0xc
c00115c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115db:	83 ec 0c             	sub    esp,0xc
c00115de:	68 9c a2 02 c0       	push   0xc002a29c
c00115e3:	e8 25 88 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c00115e8:	83 c4 10             	add    esp,0x10
c00115eb:	90                   	nop
c00115ec:	83 c4 0c             	add    esp,0xc
c00115ef:	c3                   	ret    

c00115f0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00115f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115f4:	89 c2                	mov    edx,eax
c00115f6:	c1 e8 0a             	shr    eax,0xa
c00115f9:	c1 ea 16             	shr    edx,0x16
c00115fc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011601:	19 c9                	sbb    ecx,ecx
c0011603:	c1 e2 0c             	shl    edx,0xc
c0011606:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001160c:	25 fc 0f 00 00       	and    eax,0xffc
c0011611:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011618:	01 d0                	add    eax,edx
c001161a:	c3                   	ret    
c001161b:	90                   	nop

c001161c <VAS::getPageTableEntry(unsigned long)>:
c001161c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011620:	89 ca                	mov    edx,ecx
c0011622:	c1 e9 0a             	shr    ecx,0xa
c0011625:	c1 ea 16             	shr    edx,0x16
c0011628:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001162e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011634:	c1 e0 0c             	shl    eax,0xc
c0011637:	8d 04 08             	lea    eax,[eax+ecx*1]
c001163a:	c3                   	ret    

c001163b <Virt::freeKernelVirtualPages(unsigned long)>:
c001163b:	57                   	push   edi
c001163c:	56                   	push   esi
c001163d:	be 01 00 00 00       	mov    esi,0x1
c0011642:	53                   	push   ebx
c0011643:	83 ec 10             	sub    esp,0x10
c0011646:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001164a:	c1 eb 0c             	shr    ebx,0xc
c001164d:	eb 3f                	jmp    c001168e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001164f:	83 ec 08             	sub    esp,0x8
c0011652:	57                   	push   edi
c0011653:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c0011659:	e8 be ff ff ff       	call   c001161c <VAS::getPageTableEntry(unsigned long)>
c001165e:	83 c4 10             	add    esp,0x10
c0011661:	8b 00                	mov    eax,DWORD PTR [eax]
c0011663:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011667:	f6 c4 04             	test   ah,0x4
c001166a:	75 5f                	jne    c00116cb <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001166c:	80 fa 04             	cmp    dl,0x4
c001166f:	74 78                	je     c00116e9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011671:	80 fa 02             	cmp    dl,0x2
c0011674:	0f 84 88 00 00 00    	je     c0011702 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001167a:	80 fa 03             	cmp    dl,0x3
c001167d:	0f 84 ad 00 00 00    	je     c0011730 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011683:	fe ca                	dec    dl
c0011685:	0f 84 92 00 00 00    	je     c001171d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001168b:	43                   	inc    ebx
c001168c:	31 f6                	xor    esi,esi
c001168e:	53                   	push   ebx
c001168f:	89 df                	mov    edi,ebx
c0011691:	e8 3b fb ff ff       	call   c00111d1 <Virt::getPageState(unsigned long)>
c0011696:	c1 e7 0c             	shl    edi,0xc
c0011699:	59                   	pop    ecx
c001169a:	84 c0                	test   al,al
c001169c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116a0:	75 ad                	jne    c001164f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00116a2:	83 ec 0c             	sub    esp,0xc
c00116a5:	68 83 a4 02 c0       	push   0xc002a483
c00116aa:	e8 5e 87 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c00116af:	58                   	pop    eax
c00116b0:	5a                   	pop    edx
c00116b1:	57                   	push   edi
c00116b2:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c00116b8:	e8 5f ff ff ff       	call   c001161c <VAS::getPageTableEntry(unsigned long)>
c00116bd:	83 c4 10             	add    esp,0x10
c00116c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00116c2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116c6:	f6 c4 04             	test   ah,0x4
c00116c9:	74 c0                	je     c001168b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116cb:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116cf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116d4:	83 ec 0c             	sub    esp,0xc
c00116d7:	50                   	push   eax
c00116d8:	e8 23 e2 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c00116dd:	83 c4 10             	add    esp,0x10
c00116e0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116e4:	80 fa 04             	cmp    dl,0x4
c00116e7:	75 88                	jne    c0011671 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116e9:	89 f0                	mov    eax,esi
c00116eb:	84 c0                	test   al,al
c00116ed:	75 47                	jne    c0011736 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00116ef:	c7 44 24 20 c0 a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a2c0
c00116f7:	83 c4 10             	add    esp,0x10
c00116fa:	5b                   	pop    ebx
c00116fb:	5e                   	pop    esi
c00116fc:	5f                   	pop    edi
c00116fd:	e9 0b 87 00 00       	jmp    c0019e0d <Krnl::panic(char const*)>
c0011702:	89 f0                	mov    eax,esi
c0011704:	84 c0                	test   al,al
c0011706:	75 15                	jne    c001171d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011708:	83 ec 0c             	sub    esp,0xc
c001170b:	68 9f a4 02 c0       	push   0xc002a49f
c0011710:	e8 f8 86 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0011715:	83 c4 10             	add    esp,0x10
c0011718:	e9 6e ff ff ff       	jmp    c001168b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001171d:	83 ec 08             	sub    esp,0x8
c0011720:	6a 00                	push   0x0
c0011722:	53                   	push   ebx
c0011723:	e8 74 fa ff ff       	call   c001119c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011728:	83 c4 10             	add    esp,0x10
c001172b:	e9 5b ff ff ff       	jmp    c001168b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011730:	89 f0                	mov    eax,esi
c0011732:	84 c0                	test   al,al
c0011734:	75 15                	jne    c001174b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011736:	83 ec 08             	sub    esp,0x8
c0011739:	6a 00                	push   0x0
c001173b:	53                   	push   ebx
c001173c:	e8 5b fa ff ff       	call   c001119c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011741:	83 c4 10             	add    esp,0x10
c0011744:	83 c4 10             	add    esp,0x10
c0011747:	5b                   	pop    ebx
c0011748:	5e                   	pop    esi
c0011749:	5f                   	pop    edi
c001174a:	c3                   	ret    
c001174b:	c7 44 24 20 bb a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a4bb
c0011753:	83 c4 10             	add    esp,0x10
c0011756:	5b                   	pop    ebx
c0011757:	5e                   	pop    esi
c0011758:	5f                   	pop    edi
c0011759:	e9 af 86 00 00       	jmp    c0019e0d <Krnl::panic(char const*)>

c001175e <VAS::freeAllocatedPages(unsigned long)>:
c001175e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011762:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011766:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001176a:	74 09                	je     c0011775 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001176c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011770:	e9 c6 fe ff ff       	jmp    c001163b <Virt::freeKernelVirtualPages(unsigned long)>
c0011775:	c7 44 24 04 e4 a2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a2e4
c001177d:	e9 1f 0f 00 00       	jmp    c00126a1 <Dbg::kprintf(char const*, ...)>

c0011782 <VAS::virtualToPhysical(unsigned long)>:
c0011782:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011786:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001178a:	e8 8d fe ff ff       	call   c001161c <VAS::getPageTableEntry(unsigned long)>
c001178f:	5a                   	pop    edx
c0011790:	8b 00                	mov    eax,DWORD PTR [eax]
c0011792:	59                   	pop    ecx
c0011793:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011798:	c3                   	ret    
c0011799:	90                   	nop

c001179a <VAS::reflagRange(unsigned long, int, int, int)>:
c001179a:	55                   	push   ebp
c001179b:	57                   	push   edi
c001179c:	56                   	push   esi
c001179d:	53                   	push   ebx
c001179e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00117a2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00117a6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00117aa:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00117ae:	85 db                	test   ebx,ebx
c00117b0:	7e 22                	jle    c00117d4 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00117b2:	c1 e3 0c             	shl    ebx,0xc
c00117b5:	01 f3                	add    ebx,esi
c00117b7:	56                   	push   esi
c00117b8:	81 c6 00 10 00 00    	add    esi,0x1000
c00117be:	55                   	push   ebp
c00117bf:	e8 58 fe ff ff       	call   c001161c <VAS::getPageTableEntry(unsigned long)>
c00117c4:	5a                   	pop    edx
c00117c5:	59                   	pop    ecx
c00117c6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117c8:	21 f9                	and    ecx,edi
c00117ca:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00117ce:	39 f3                	cmp    ebx,esi
c00117d0:	89 08                	mov    DWORD PTR [eax],ecx
c00117d2:	75 e3                	jne    c00117b7 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00117d4:	5b                   	pop    ebx
c00117d5:	5e                   	pop    esi
c00117d6:	5f                   	pop    edi
c00117d7:	5d                   	pop    ebp
c00117d8:	c3                   	ret    
c00117d9:	90                   	nop

c00117da <VAS::setToWriteCombining(unsigned long, int)>:
c00117da:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00117df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00117e5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00117ec:	75 01                	jne    c00117ef <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00117ee:	c3                   	ret    
c00117ef:	68 80 00 00 00       	push   0x80
c00117f4:	6a ff                	push   0xffffffff
c00117f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011802:	e8 93 ff ff ff       	call   c001179a <VAS::reflagRange(unsigned long, int, int, int)>
c0011807:	83 c4 14             	add    esp,0x14
c001180a:	c3                   	ret    
c001180b:	90                   	nop

c001180c <VAS::mapOtherVASIn(bool, VAS*)>:
c001180c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011811:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011815:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001181c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001181f:	19 c0                	sbb    eax,eax
c0011821:	83 ca 03             	or     edx,0x3
c0011824:	83 e0 fc             	and    eax,0xfffffffc
c0011827:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001182e:	0f 20 d8             	mov    eax,cr3
c0011831:	0f 22 d8             	mov    cr3,eax
c0011834:	c3                   	ret    
c0011835:	90                   	nop

c0011836 <VAS::~VAS()>:
c0011836:	83 ec 2c             	sub    esp,0x2c
c0011839:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011841:	fa                   	cli    
c0011842:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0011847:	40                   	inc    eax
c0011848:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001184d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011852:	8b 00                	mov    eax,DWORD PTR [eax]
c0011854:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011857:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001185d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011861:	6a 01                	push   0x1
c0011863:	50                   	push   eax
c0011864:	e8 a3 ff ff ff       	call   c001180c <VAS::mapOtherVASIn(bool, VAS*)>
c0011869:	83 c4 0c             	add    esp,0xc
c001186c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011874:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001187c:	0f 8f d4 00 00 00    	jg     c0011956 <VAS::~VAS()+0x120>
c0011882:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011886:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011889:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001188d:	c1 e2 02             	shl    edx,0x2
c0011890:	01 d0                	add    eax,edx
c0011892:	8b 00                	mov    eax,DWORD PTR [eax]
c0011894:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001189c:	83 e0 01             	and    eax,0x1
c001189f:	0f 84 a8 00 00 00    	je     c001194d <VAS::~VAS()+0x117>
c00118a5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00118ad:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00118b5:	7f 72                	jg     c0011929 <VAS::~VAS()+0xf3>
c00118b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118bb:	c1 e0 0a             	shl    eax,0xa
c00118be:	89 c2                	mov    edx,eax
c00118c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118c4:	01 d0                	add    eax,edx
c00118c6:	c1 e0 0c             	shl    eax,0xc
c00118c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118cd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00118d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118d7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00118dd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00118e1:	6a 01                	push   0x1
c00118e3:	50                   	push   eax
c00118e4:	e8 07 fd ff ff       	call   c00115f0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00118e9:	83 c4 0c             	add    esp,0xc
c00118ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00118f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118fe:	25 01 04 00 00       	and    eax,0x401
c0011903:	3d 01 04 00 00       	cmp    eax,0x401
c0011908:	75 19                	jne    c0011923 <VAS::~VAS()+0xed>
c001190a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001190e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011913:	83 ec 0c             	sub    esp,0xc
c0011916:	50                   	push   eax
c0011917:	e8 e4 df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c001191c:	83 c4 10             	add    esp,0x10
c001191f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011923:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011927:	eb 84                	jmp    c00118ad <VAS::~VAS()+0x77>
c0011929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001192d:	25 00 04 00 00       	and    eax,0x400
c0011932:	74 19                	je     c001194d <VAS::~VAS()+0x117>
c0011934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011938:	25 00 f0 ff ff       	and    eax,0xfffff000
c001193d:	83 ec 0c             	sub    esp,0xc
c0011940:	50                   	push   eax
c0011941:	e8 ba df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0011946:	83 c4 10             	add    esp,0x10
c0011949:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001194d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011951:	e9 1e ff ff ff       	jmp    c0011874 <VAS::~VAS()+0x3e>
c0011956:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001195a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001195d:	83 ec 0c             	sub    esp,0xc
c0011960:	50                   	push   eax
c0011961:	e8 d5 fc ff ff       	call   c001163b <Virt::freeKernelVirtualPages(unsigned long)>
c0011966:	83 c4 10             	add    esp,0x10
c0011969:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001196d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011970:	83 ec 0c             	sub    esp,0xc
c0011973:	50                   	push   eax
c0011974:	e8 87 df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0011979:	83 c4 10             	add    esp,0x10
c001197c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011980:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011984:	c1 e0 02             	shl    eax,0x2
c0011987:	83 ec 08             	sub    esp,0x8
c001198a:	50                   	push   eax
c001198b:	68 08 a3 02 c0       	push   0xc002a308
c0011990:	e8 0c 0d 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0011995:	83 c4 10             	add    esp,0x10
c0011998:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001199d:	48                   	dec    eax
c001199e:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c00119a3:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00119a8:	85 c0                	test   eax,eax
c00119aa:	75 01                	jne    c00119ad <VAS::~VAS()+0x177>
c00119ac:	fb                   	sti    
c00119ad:	90                   	nop
c00119ae:	83 c4 2c             	add    esp,0x2c
c00119b1:	c3                   	ret    

c00119b2 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00119b2:	55                   	push   ebp
c00119b3:	57                   	push   edi
c00119b4:	56                   	push   esi
c00119b5:	53                   	push   ebx
c00119b6:	83 ec 1c             	sub    esp,0x1c
c00119b9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00119bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119c1:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00119c7:	77 08                	ja     c00119d1 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00119c9:	0f 20 d8             	mov    eax,cr3
c00119cc:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00119cf:	75 47                	jne    c0011a18 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00119d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119d5:	09 d8                	or     eax,ebx
c00119d7:	a9 ff 0f 00 00       	test   eax,0xfff
c00119dc:	75 57                	jne    c0011a35 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00119de:	89 de                	mov    esi,ebx
c00119e0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00119e3:	c1 ee 16             	shr    esi,0x16
c00119e6:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00119ed:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00119f1:	74 54                	je     c0011a47 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00119f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119f7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119fd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011a01:	c1 e6 0c             	shl    esi,0xc
c0011a04:	c1 eb 0a             	shr    ebx,0xa
c0011a07:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011a0d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011a10:	83 c4 1c             	add    esp,0x1c
c0011a13:	5b                   	pop    ebx
c0011a14:	5e                   	pop    esi
c0011a15:	5f                   	pop    edi
c0011a16:	5d                   	pop    ebp
c0011a17:	c3                   	ret    
c0011a18:	83 ec 0c             	sub    esp,0xc
c0011a1b:	68 28 a3 02 c0       	push   0xc002a328
c0011a20:	e8 7c 0c 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0011a25:	83 c4 10             	add    esp,0x10
c0011a28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a2c:	09 d8                	or     eax,ebx
c0011a2e:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a33:	74 a9                	je     c00119de <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a35:	83 ec 0c             	sub    esp,0xc
c0011a38:	68 90 a3 02 c0       	push   0xc002a390
c0011a3d:	e8 cb 83 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0011a42:	83 c4 10             	add    esp,0x10
c0011a45:	eb 97                	jmp    c00119de <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a4b:	e8 21 df ff ff       	call   c000f971 <Phys::allocatePage()>
c0011a50:	83 ec 0c             	sub    esp,0xc
c0011a53:	89 c5                	mov    ebp,eax
c0011a55:	8b 0d 90 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da90
c0011a5b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a5f:	6a 01                	push   0x1
c0011a61:	e8 8f f7 ff ff       	call   c00111f5 <Virt::allocateKernelVirtualPages(int)>
c0011a66:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a6d:	6a 01                	push   0x1
c0011a6f:	50                   	push   eax
c0011a70:	55                   	push   ebp
c0011a71:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a77:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a7b:	51                   	push   ecx
c0011a7c:	e8 27 02 00 00       	call   c0011ca8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a81:	83 c4 1c             	add    esp,0x1c
c0011a84:	68 00 10 00 00       	push   0x1000
c0011a89:	6a 00                	push   0x0
c0011a8b:	50                   	push   eax
c0011a8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a90:	e8 bb ec fe ff       	call   c0000750 <memset>
c0011a95:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a99:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a9c:	e8 9a fb ff ff       	call   c001163b <Virt::freeKernelVirtualPages(unsigned long)>
c0011aa1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011aa5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011aa8:	83 c4 10             	add    esp,0x10
c0011aab:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011aae:	e9 40 ff ff ff       	jmp    c00119f3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011ab3:	90                   	nop

c0011ab4 <VAS::allocatePages(int, int)>:
c0011ab4:	55                   	push   ebp
c0011ab5:	57                   	push   edi
c0011ab6:	56                   	push   esi
c0011ab7:	53                   	push   ebx
c0011ab8:	83 ec 1c             	sub    esp,0x1c
c0011abb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011abf:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0011ac4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011aca:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011ad0:	83 e0 01             	and    eax,0x1
c0011ad3:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011ad7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011adb:	0f 85 cc 00 00 00    	jne    c0011bad <VAS::allocatePages(int, int)+0xf9>
c0011ae1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ae4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ae8:	85 c0                	test   eax,eax
c0011aea:	0f 84 a1 00 00 00    	je     c0011b91 <VAS::allocatePages(int, int)+0xdd>
c0011af0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011af4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011af8:	c1 e6 0c             	shl    esi,0xc
c0011afb:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011aff:	85 c0                	test   eax,eax
c0011b01:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011b04:	7e 33                	jle    c0011b39 <VAS::allocatePages(int, int)+0x85>
c0011b06:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011b0a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b0e:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b14:	e8 58 de ff ff       	call   c000f971 <Phys::allocatePage()>
c0011b19:	55                   	push   ebp
c0011b1a:	53                   	push   ebx
c0011b1b:	50                   	push   eax
c0011b1c:	57                   	push   edi
c0011b1d:	e8 90 fe ff ff       	call   c00119b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b22:	83 c4 10             	add    esp,0x10
c0011b25:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b2a:	74 03                	je     c0011b2f <VAS::allocatePages(int, int)+0x7b>
c0011b2c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b2f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b35:	39 de                	cmp    esi,ebx
c0011b37:	75 db                	jne    c0011b14 <VAS::allocatePages(int, int)+0x60>
c0011b39:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b3e:	75 12                	jne    c0011b52 <VAS::allocatePages(int, int)+0x9e>
c0011b40:	0f 20 d8             	mov    eax,cr3
c0011b43:	0f 22 d8             	mov    cr3,eax
c0011b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b4a:	83 c4 1c             	add    esp,0x1c
c0011b4d:	5b                   	pop    ebx
c0011b4e:	5e                   	pop    esi
c0011b4f:	5f                   	pop    edi
c0011b50:	5d                   	pop    ebp
c0011b51:	c3                   	ret    
c0011b52:	c1 ee 0a             	shr    esi,0xa
c0011b55:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b59:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b5f:	c1 eb 0a             	shr    ebx,0xa
c0011b62:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b68:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b6e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b74:	39 c3                	cmp    ebx,eax
c0011b76:	77 ce                	ja     c0011b46 <VAS::allocatePages(int, int)+0x92>
c0011b78:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b7b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b81:	39 d8                	cmp    eax,ebx
c0011b83:	73 f3                	jae    c0011b78 <VAS::allocatePages(int, int)+0xc4>
c0011b85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b89:	83 c4 1c             	add    esp,0x1c
c0011b8c:	5b                   	pop    ebx
c0011b8d:	5e                   	pop    esi
c0011b8e:	5f                   	pop    edi
c0011b8f:	5d                   	pop    ebp
c0011b90:	c3                   	ret    
c0011b91:	83 ec 0c             	sub    esp,0xc
c0011b94:	68 b4 a3 02 c0       	push   0xc002a3b4
c0011b99:	e8 6f 82 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0011b9e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ba1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ba5:	83 c4 10             	add    esp,0x10
c0011ba8:	e9 43 ff ff ff       	jmp    c0011af0 <VAS::allocatePages(int, int)+0x3c>
c0011bad:	83 ec 0c             	sub    esp,0xc
c0011bb0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011bb4:	e8 3c f6 ff ff       	call   c00111f5 <Virt::allocateKernelVirtualPages(int)>
c0011bb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011bbd:	83 c4 10             	add    esp,0x10
c0011bc0:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011bc5:	0f 87 9b 00 00 00    	ja     c0011c66 <VAS::allocatePages(int, int)+0x1b2>
c0011bcb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011bcf:	85 d2                	test   edx,edx
c0011bd1:	7e 3c                	jle    c0011c0f <VAS::allocatePages(int, int)+0x15b>
c0011bd3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011bd7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011bdb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bdf:	c1 e5 0c             	shl    ebp,0xc
c0011be2:	81 ce 00 04 00 00    	or     esi,0x400
c0011be8:	01 dd                	add    ebp,ebx
c0011bea:	e8 82 dd ff ff       	call   c000f971 <Phys::allocatePage()>
c0011bef:	56                   	push   esi
c0011bf0:	53                   	push   ebx
c0011bf1:	50                   	push   eax
c0011bf2:	57                   	push   edi
c0011bf3:	e8 ba fd ff ff       	call   c00119b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bf8:	83 c4 10             	add    esp,0x10
c0011bfb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c00:	74 03                	je     c0011c05 <VAS::allocatePages(int, int)+0x151>
c0011c02:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c05:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c0b:	39 dd                	cmp    ebp,ebx
c0011c0d:	75 db                	jne    c0011bea <VAS::allocatePages(int, int)+0x136>
c0011c0f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c14:	0f 84 26 ff ff ff    	je     c0011b40 <VAS::allocatePages(int, int)+0x8c>
c0011c1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c1e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c22:	89 d3                	mov    ebx,edx
c0011c24:	c1 e0 0c             	shl    eax,0xc
c0011c27:	c1 eb 0a             	shr    ebx,0xa
c0011c2a:	01 d0                	add    eax,edx
c0011c2c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c32:	c1 e8 0a             	shr    eax,0xa
c0011c35:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c3b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c40:	2d 00 00 40 00       	sub    eax,0x400000
c0011c45:	39 c3                	cmp    ebx,eax
c0011c47:	0f 87 f9 fe ff ff    	ja     c0011b46 <VAS::allocatePages(int, int)+0x92>
c0011c4d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c50:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c56:	39 d8                	cmp    eax,ebx
c0011c58:	73 f3                	jae    c0011c4d <VAS::allocatePages(int, int)+0x199>
c0011c5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c5e:	83 c4 1c             	add    esp,0x1c
c0011c61:	5b                   	pop    ebx
c0011c62:	5e                   	pop    esi
c0011c63:	5f                   	pop    edi
c0011c64:	5d                   	pop    ebp
c0011c65:	c3                   	ret    
c0011c66:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0011c6b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c71:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c78:	0f 84 4d ff ff ff    	je     c0011bcb <VAS::allocatePages(int, int)+0x117>
c0011c7e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c86:	e9 40 ff ff ff       	jmp    c0011bcb <VAS::allocatePages(int, int)+0x117>
c0011c8b:	90                   	nop

c0011c8c <VAS::setCPUSpecific(unsigned long)>:
c0011c8c:	83 ec 0c             	sub    esp,0xc
c0011c8f:	6a 05                	push   0x5
c0011c91:	68 00 00 40 c2       	push   0xc2400000
c0011c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c9e:	e8 0f fd ff ff       	call   c00119b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ca3:	83 c4 1c             	add    esp,0x1c
c0011ca6:	c3                   	ret    
c0011ca7:	90                   	nop

c0011ca8 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011ca8:	55                   	push   ebp
c0011ca9:	57                   	push   edi
c0011caa:	56                   	push   esi
c0011cab:	53                   	push   ebx
c0011cac:	83 ec 1c             	sub    esp,0x1c
c0011caf:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0011cb4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011cb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011cbe:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011cc2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011cc8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011ccc:	83 e0 01             	and    eax,0x1
c0011ccf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011cd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cd7:	85 c0                	test   eax,eax
c0011cd9:	7e 39                	jle    c0011d14 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011cdb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cdf:	89 f3                	mov    ebx,esi
c0011ce1:	c1 e0 0c             	shl    eax,0xc
c0011ce4:	01 f0                	add    eax,esi
c0011ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cea:	55                   	push   ebp
c0011ceb:	53                   	push   ebx
c0011cec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cf0:	29 f0                	sub    eax,esi
c0011cf2:	01 d8                	add    eax,ebx
c0011cf4:	50                   	push   eax
c0011cf5:	57                   	push   edi
c0011cf6:	e8 b7 fc ff ff       	call   c00119b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cfb:	83 c4 10             	add    esp,0x10
c0011cfe:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d03:	74 03                	je     c0011d08 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011d05:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d08:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d0e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d12:	75 d6                	jne    c0011cea <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d14:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d19:	75 10                	jne    c0011d2b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d1b:	0f 20 d8             	mov    eax,cr3
c0011d1e:	0f 22 d8             	mov    cr3,eax
c0011d21:	83 c4 1c             	add    esp,0x1c
c0011d24:	89 f0                	mov    eax,esi
c0011d26:	5b                   	pop    ebx
c0011d27:	5e                   	pop    esi
c0011d28:	5f                   	pop    edi
c0011d29:	5d                   	pop    ebp
c0011d2a:	c3                   	ret    
c0011d2b:	89 f3                	mov    ebx,esi
c0011d2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d31:	c1 eb 0a             	shr    ebx,0xa
c0011d34:	c1 e0 0c             	shl    eax,0xc
c0011d37:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d3d:	01 f0                	add    eax,esi
c0011d3f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d45:	c1 e8 0a             	shr    eax,0xa
c0011d48:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d4d:	2d 00 00 40 00       	sub    eax,0x400000
c0011d52:	39 c3                	cmp    ebx,eax
c0011d54:	77 cb                	ja     c0011d21 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d56:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d59:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d5f:	39 d8                	cmp    eax,ebx
c0011d61:	73 f3                	jae    c0011d56 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d63:	83 c4 1c             	add    esp,0x1c
c0011d66:	89 f0                	mov    eax,esi
c0011d68:	5b                   	pop    ebx
c0011d69:	5e                   	pop    esi
c0011d6a:	5f                   	pop    edi
c0011d6b:	5d                   	pop    ebp
c0011d6c:	c3                   	ret    
c0011d6d:	90                   	nop

c0011d6e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d6e:	55                   	push   ebp
c0011d6f:	57                   	push   edi
c0011d70:	56                   	push   esi
c0011d71:	53                   	push   ebx
c0011d72:	83 ec 1c             	sub    esp,0x1c
c0011d75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d79:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d7d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d81:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d85:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d8a:	75 4a                	jne    c0011dd6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d8c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d90:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d93:	c1 eb 16             	shr    ebx,0x16
c0011d96:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d9d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011da1:	74 4d                	je     c0011df0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011da3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011da7:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011dab:	c1 e8 0a             	shr    eax,0xa
c0011dae:	80 fa 01             	cmp    dl,0x1
c0011db1:	19 d2                	sbb    edx,edx
c0011db3:	c1 e3 0c             	shl    ebx,0xc
c0011db6:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011dba:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011dc0:	25 fc 0f 00 00       	and    eax,0xffc
c0011dc5:	01 d8                	add    eax,ebx
c0011dc7:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011dce:	83 c4 1c             	add    esp,0x1c
c0011dd1:	5b                   	pop    ebx
c0011dd2:	5e                   	pop    esi
c0011dd3:	5f                   	pop    edi
c0011dd4:	5d                   	pop    ebp
c0011dd5:	c3                   	ret    
c0011dd6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011dda:	83 ec 0c             	sub    esp,0xc
c0011ddd:	68 e0 a3 02 c0       	push   0xc002a3e0
c0011de2:	e8 26 80 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0011de7:	83 c4 10             	add    esp,0x10
c0011dea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011dee:	eb 9c                	jmp    c0011d8c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011df4:	e8 78 db ff ff       	call   c000f971 <Phys::allocatePage()>
c0011df9:	83 ec 0c             	sub    esp,0xc
c0011dfc:	89 c5                	mov    ebp,eax
c0011dfe:	8b 0d 90 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da90
c0011e04:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e08:	6a 01                	push   0x1
c0011e0a:	e8 e6 f3 ff ff       	call   c00111f5 <Virt::allocateKernelVirtualPages(int)>
c0011e0f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e16:	6a 01                	push   0x1
c0011e18:	50                   	push   eax
c0011e19:	55                   	push   ebp
c0011e1a:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e20:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e24:	51                   	push   ecx
c0011e25:	e8 7e fe ff ff       	call   c0011ca8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e2a:	83 c4 1c             	add    esp,0x1c
c0011e2d:	68 00 10 00 00       	push   0x1000
c0011e32:	6a 00                	push   0x0
c0011e34:	50                   	push   eax
c0011e35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e39:	e8 12 e9 fe ff       	call   c0000750 <memset>
c0011e3e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e42:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e45:	e8 f1 f7 ff ff       	call   c001163b <Virt::freeKernelVirtualPages(unsigned long)>
c0011e4a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e4d:	83 c4 10             	add    esp,0x10
c0011e50:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e57:	e9 47 ff ff ff       	jmp    c0011da3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e5c <VAS::VAS(bool)>:
c0011e5c:	53                   	push   ebx
c0011e5d:	83 ec 28             	sub    esp,0x28
c0011e60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e64:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e82:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e86:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e89:	e8 e3 da ff ff       	call   c000f971 <Phys::allocatePage()>
c0011e8e:	89 c2                	mov    edx,eax
c0011e90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e94:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011e97:	8b 1d 90 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da90
c0011e9d:	83 ec 0c             	sub    esp,0xc
c0011ea0:	6a 01                	push   0x1
c0011ea2:	e8 4e f3 ff ff       	call   c00111f5 <Virt::allocateKernelVirtualPages(int)>
c0011ea7:	83 c4 10             	add    esp,0x10
c0011eaa:	89 c2                	mov    edx,eax
c0011eac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eb0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011eb3:	83 ec 0c             	sub    esp,0xc
c0011eb6:	6a 03                	push   0x3
c0011eb8:	6a 01                	push   0x1
c0011eba:	52                   	push   edx
c0011ebb:	50                   	push   eax
c0011ebc:	53                   	push   ebx
c0011ebd:	e8 e6 fd ff ff       	call   c0011ca8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ec2:	83 c4 20             	add    esp,0x20
c0011ec5:	89 c2                	mov    edx,eax
c0011ec7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ecb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011ece:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011ed6:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011ede:	7f 1c                	jg     c0011efc <VAS::VAS(bool)+0xa0>
c0011ee0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ee4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ee7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011eeb:	c1 e2 02             	shl    edx,0x2
c0011eee:	01 d0                	add    eax,edx
c0011ef0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ef6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011efa:	eb da                	jmp    c0011ed6 <VAS::VAS(bool)+0x7a>
c0011efc:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f04:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f0c:	7f 7a                	jg     c0011f88 <VAS::VAS(bool)+0x12c>
c0011f0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f12:	2d 00 02 00 00       	sub    eax,0x200
c0011f17:	c1 e0 0c             	shl    eax,0xc
c0011f1a:	83 c8 03             	or     eax,0x3
c0011f1d:	89 c2                	mov    edx,eax
c0011f1f:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0011f24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f2a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f30:	83 e0 10             	and    eax,0x10
c0011f33:	84 c0                	test   al,al
c0011f35:	74 07                	je     c0011f3e <VAS::VAS(bool)+0xe2>
c0011f37:	b8 00 01 00 00       	mov    eax,0x100
c0011f3c:	eb 05                	jmp    c0011f43 <VAS::VAS(bool)+0xe7>
c0011f3e:	b8 00 00 00 00       	mov    eax,0x0
c0011f43:	09 d0                	or     eax,edx
c0011f45:	89 c1                	mov    ecx,eax
c0011f47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f4b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f52:	c1 e2 02             	shl    edx,0x2
c0011f55:	01 d0                	add    eax,edx
c0011f57:	89 ca                	mov    edx,ecx
c0011f59:	89 10                	mov    DWORD PTR [eax],edx
c0011f5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f5f:	2d 40 03 00 00       	sub    eax,0x340
c0011f64:	83 f8 7f             	cmp    eax,0x7f
c0011f67:	77 16                	ja     c0011f7f <VAS::VAS(bool)+0x123>
c0011f69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f6d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f74:	c1 e2 02             	shl    edx,0x2
c0011f77:	01 d0                	add    eax,edx
c0011f79:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f7f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f83:	e9 7c ff ff ff       	jmp    c0011f04 <VAS::VAS(bool)+0xa8>
c0011f88:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0011f8d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f93:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f99:	83 e0 10             	and    eax,0x10
c0011f9c:	84 c0                	test   al,al
c0011f9e:	74 07                	je     c0011fa7 <VAS::VAS(bool)+0x14b>
c0011fa0:	b8 03 41 00 00       	mov    eax,0x4103
c0011fa5:	eb 05                	jmp    c0011fac <VAS::VAS(bool)+0x150>
c0011fa7:	b8 03 40 00 00       	mov    eax,0x4003
c0011fac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fb0:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011fb3:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011fb9:	89 02                	mov    DWORD PTR [edx],eax
c0011fbb:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0011fc0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fc6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011fcc:	83 ec 08             	sub    esp,0x8
c0011fcf:	50                   	push   eax
c0011fd0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011fd4:	e8 b3 fc ff ff       	call   c0011c8c <VAS::setCPUSpecific(unsigned long)>
c0011fd9:	83 c4 10             	add    esp,0x10
c0011fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fe0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011fe3:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0011fe8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fee:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ff4:	83 e0 10             	and    eax,0x10
c0011ff7:	84 c0                	test   al,al
c0011ff9:	74 07                	je     c0012002 <VAS::VAS(bool)+0x1a6>
c0011ffb:	b8 00 01 00 00       	mov    eax,0x100
c0012000:	eb 05                	jmp    c0012007 <VAS::VAS(bool)+0x1ab>
c0012002:	b8 00 00 00 00       	mov    eax,0x0
c0012007:	09 c2                	or     edx,eax
c0012009:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001200d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012010:	05 fc 0f 00 00       	add    eax,0xffc
c0012015:	83 ca 03             	or     edx,0x3
c0012018:	89 10                	mov    DWORD PTR [eax],edx
c001201a:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001201f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012025:	83 ec 0c             	sub    esp,0xc
c0012028:	50                   	push   eax
c0012029:	e8 ac 1d 00 00       	call   c0013dda <Device::getName()>
c001202e:	83 c4 10             	add    esp,0x10
c0012031:	83 ec 08             	sub    esp,0x8
c0012034:	68 d5 a4 02 c0       	push   0xc002a4d5
c0012039:	50                   	push   eax
c001203a:	e8 59 e8 fe ff       	call   c0000898 <strcmp>
c001203f:	83 c4 10             	add    esp,0x10
c0012042:	85 c0                	test   eax,eax
c0012044:	0f 94 c0             	sete   al
c0012047:	84 c0                	test   al,al
c0012049:	0f 84 87 00 00 00    	je     c00120d6 <VAS::VAS(bool)+0x27a>
c001204f:	fa                   	cli    
c0012050:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0012055:	40                   	inc    eax
c0012056:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001205b:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0012060:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012066:	05 7c 09 00 00       	add    eax,0x97c
c001206b:	83 ec 0c             	sub    esp,0xc
c001206e:	50                   	push   eax
c001206f:	e8 aa cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012074:	83 c4 10             	add    esp,0x10
c0012077:	25 00 f0 ff ff       	and    eax,0xfffff000
c001207c:	89 c3                	mov    ebx,eax
c001207e:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0012083:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012089:	05 7c 09 00 00       	add    eax,0x97c
c001208e:	83 ec 0c             	sub    esp,0xc
c0012091:	50                   	push   eax
c0012092:	e8 87 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012097:	83 c4 10             	add    esp,0x10
c001209a:	83 ec 08             	sub    esp,0x8
c001209d:	50                   	push   eax
c001209e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120a2:	e8 75 f5 ff ff       	call   c001161c <VAS::getPageTableEntry(unsigned long)>
c00120a7:	83 c4 10             	add    esp,0x10
c00120aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00120ac:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120b1:	6a 11                	push   0x11
c00120b3:	53                   	push   ebx
c00120b4:	50                   	push   eax
c00120b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120b9:	e8 f4 f8 ff ff       	call   c00119b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120be:	83 c4 10             	add    esp,0x10
c00120c1:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00120c6:	48                   	dec    eax
c00120c7:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c00120cc:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00120d1:	85 c0                	test   eax,eax
c00120d3:	75 01                	jne    c00120d6 <VAS::VAS(bool)+0x27a>
c00120d5:	fb                   	sti    
c00120d6:	90                   	nop
c00120d7:	83 c4 28             	add    esp,0x28
c00120da:	5b                   	pop    ebx
c00120db:	c3                   	ret    

c00120dc <VAS::evict(unsigned long)>:
c00120dc:	55                   	push   ebp
c00120dd:	57                   	push   edi
c00120de:	56                   	push   esi
c00120df:	53                   	push   ebx
c00120e0:	83 ec 1c             	sub    esp,0x1c
c00120e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120e7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00120eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120ef:	e8 42 f2 ff ff       	call   c0011336 <Virt::allocateSwapfilePage()>
c00120f4:	89 c7                	mov    edi,eax
c00120f6:	a1 cc c8 02 c0       	mov    eax,ds:0xc002c8cc
c00120fb:	85 c0                	test   eax,eax
c00120fd:	7e 3d                	jle    c001213c <VAS::evict(unsigned long)+0x60>
c00120ff:	89 ee                	mov    esi,ebp
c0012101:	31 db                	xor    ebx,ebx
c0012103:	83 ec 0c             	sub    esp,0xc
c0012106:	57                   	push   edi
c0012107:	e8 18 f2 ff ff       	call   c0011324 <Virt::swapIDToSector(unsigned long)>
c001210c:	89 34 24             	mov    DWORD PTR [esp],esi
c001210f:	01 d8                	add    eax,ebx
c0012111:	6a 01                	push   0x1
c0012113:	31 d2                	xor    edx,edx
c0012115:	43                   	inc    ebx
c0012116:	52                   	push   edx
c0012117:	81 c6 00 02 00 00    	add    esi,0x200
c001211d:	50                   	push   eax
c001211e:	0f be 05 d8 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8d8
c0012125:	ff 34 85 1c de 02 c0 	push   DWORD PTR [eax*4-0x3ffd21e4]
c001212c:	e8 31 3f 00 00       	call   c0016062 <LogicalDisk::write(unsigned long long, int, void*)>
c0012131:	83 c4 20             	add    esp,0x20
c0012134:	39 1d cc c8 02 c0    	cmp    DWORD PTR ds:0xc002c8cc,ebx
c001213a:	7f c7                	jg     c0012103 <VAS::evict(unsigned long)+0x27>
c001213c:	83 ec 08             	sub    esp,0x8
c001213f:	c1 e7 0b             	shl    edi,0xb
c0012142:	55                   	push   ebp
c0012143:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012147:	e8 d0 f4 ff ff       	call   c001161c <VAS::getPageTableEntry(unsigned long)>
c001214c:	5a                   	pop    edx
c001214d:	89 c6                	mov    esi,eax
c001214f:	59                   	pop    ecx
c0012150:	ff 30                	push   DWORD PTR [eax]
c0012152:	68 e3 a4 02 c0       	push   0xc002a4e3
c0012157:	e8 45 05 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001215c:	8b 16                	mov    edx,DWORD PTR [esi]
c001215e:	89 d3                	mov    ebx,edx
c0012160:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012166:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001216c:	09 d7                	or     edi,edx
c001216e:	89 3e                	mov    DWORD PTR [esi],edi
c0012170:	5e                   	pop    esi
c0012171:	58                   	pop    eax
c0012172:	57                   	push   edi
c0012173:	68 fc a4 02 c0       	push   0xc002a4fc
c0012178:	e8 24 05 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001217d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012180:	ff 05 88 da 02 c0    	inc    DWORD PTR ds:0xc002da88
c0012186:	e8 75 d7 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c001218b:	0f 20 d8             	mov    eax,cr3
c001218e:	0f 22 d8             	mov    cr3,eax
c0012191:	ff 35 88 da 02 c0    	push   DWORD PTR ds:0xc002da88
c0012197:	55                   	push   ebp
c0012198:	53                   	push   ebx
c0012199:	68 04 a4 02 c0       	push   0xc002a404
c001219e:	e8 fe 04 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00121a3:	a1 84 da 02 c0       	mov    eax,ds:0xc002da84
c00121a8:	c7 44 24 50 15 a5 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a515
c00121b0:	8d 50 01             	lea    edx,[eax+0x1]
c00121b3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00121b7:	89 15 84 da 02 c0    	mov    DWORD PTR ds:0xc002da84,edx
c00121bd:	83 c4 3c             	add    esp,0x3c
c00121c0:	5b                   	pop    ebx
c00121c1:	5e                   	pop    esi
c00121c2:	5f                   	pop    edi
c00121c3:	5d                   	pop    ebp
c00121c4:	e9 d8 04 00 00       	jmp    c00126a1 <Dbg::kprintf(char const*, ...)>
c00121c9:	90                   	nop

c00121ca <VAS::tryLoadBackOffDisk(unsigned long)>:
c00121ca:	55                   	push   ebp
c00121cb:	57                   	push   edi
c00121cc:	56                   	push   esi
c00121cd:	53                   	push   ebx
c00121ce:	83 ec 24             	sub    esp,0x24
c00121d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121d9:	68 26 a5 02 c0       	push   0xc002a526
c00121de:	e8 be 04 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00121e3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00121e7:	58                   	pop    eax
c00121e8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121ee:	5a                   	pop    edx
c00121ef:	53                   	push   ebx
c00121f0:	56                   	push   esi
c00121f1:	e8 26 f4 ff ff       	call   c001161c <VAS::getPageTableEntry(unsigned long)>
c00121f6:	59                   	pop    ecx
c00121f7:	89 c5                	mov    ebp,eax
c00121f9:	5f                   	pop    edi
c00121fa:	ff 30                	push   DWORD PTR [eax]
c00121fc:	68 39 a5 02 c0       	push   0xc002a539
c0012201:	e8 9b 04 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012206:	83 c4 10             	add    esp,0x10
c0012209:	85 db                	test   ebx,ebx
c001220b:	74 1d                	je     c001222a <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c001220d:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
c0012210:	31 c0                	xor    eax,eax
c0012212:	89 fa                	mov    edx,edi
c0012214:	81 e2 01 04 00 00    	and    edx,0x401
c001221a:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012220:	74 12                	je     c0012234 <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c0012222:	83 c4 1c             	add    esp,0x1c
c0012225:	5b                   	pop    ebx
c0012226:	5e                   	pop    esi
c0012227:	5f                   	pop    edi
c0012228:	5d                   	pop    ebp
c0012229:	c3                   	ret    
c001222a:	83 c4 1c             	add    esp,0x1c
c001222d:	31 c0                	xor    eax,eax
c001222f:	5b                   	pop    ebx
c0012230:	5e                   	pop    esi
c0012231:	5f                   	pop    edi
c0012232:	5d                   	pop    ebp
c0012233:	c3                   	ret    
c0012234:	83 ec 08             	sub    esp,0x8
c0012237:	c1 ef 0b             	shr    edi,0xb
c001223a:	57                   	push   edi
c001223b:	68 47 a5 02 c0       	push   0xc002a547
c0012240:	e8 5c 04 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012245:	e8 27 d7 ff ff       	call   c000f971 <Phys::allocatePage()>
c001224a:	59                   	pop    ecx
c001224b:	5a                   	pop    edx
c001224c:	50                   	push   eax
c001224d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012251:	68 52 a5 02 c0       	push   0xc002a552
c0012256:	e8 46 04 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001225b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001225f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012262:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012268:	09 d0                	or     eax,edx
c001226a:	0d 01 08 00 00       	or     eax,0x801
c001226f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012272:	59                   	pop    ecx
c0012273:	5d                   	pop    ebp
c0012274:	50                   	push   eax
c0012275:	68 67 a5 02 c0       	push   0xc002a567
c001227a:	e8 22 04 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001227f:	0f 20 d8             	mov    eax,cr3
c0012282:	83 c4 0c             	add    esp,0xc
c0012285:	56                   	push   esi
c0012286:	50                   	push   eax
c0012287:	68 7f a5 02 c0       	push   0xc002a57f
c001228c:	e8 10 04 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012291:	c7 04 24 97 a5 02 c0 	mov    DWORD PTR [esp],0xc002a597
c0012298:	e8 04 04 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001229d:	83 c4 10             	add    esp,0x10
c00122a0:	a1 cc c8 02 c0       	mov    eax,ds:0xc002c8cc
c00122a5:	85 c0                	test   eax,eax
c00122a7:	7e 3d                	jle    c00122e6 <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c00122a9:	89 dd                	mov    ebp,ebx
c00122ab:	31 f6                	xor    esi,esi
c00122ad:	83 ec 0c             	sub    esp,0xc
c00122b0:	57                   	push   edi
c00122b1:	e8 6e f0 ff ff       	call   c0011324 <Virt::swapIDToSector(unsigned long)>
c00122b6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00122b9:	01 f0                	add    eax,esi
c00122bb:	6a 01                	push   0x1
c00122bd:	31 d2                	xor    edx,edx
c00122bf:	46                   	inc    esi
c00122c0:	52                   	push   edx
c00122c1:	81 c5 00 02 00 00    	add    ebp,0x200
c00122c7:	50                   	push   eax
c00122c8:	0f be 05 d8 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8d8
c00122cf:	ff 34 85 1c de 02 c0 	push   DWORD PTR [eax*4-0x3ffd21e4]
c00122d6:	e8 1b 3d 00 00       	call   c0015ff6 <LogicalDisk::read(unsigned long long, int, void*)>
c00122db:	83 c4 20             	add    esp,0x20
c00122de:	39 35 cc c8 02 c0    	cmp    DWORD PTR ds:0xc002c8cc,esi
c00122e4:	7f c7                	jg     c00122ad <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c00122e6:	a1 88 da 02 c0       	mov    eax,ds:0xc002da88
c00122eb:	48                   	dec    eax
c00122ec:	52                   	push   edx
c00122ed:	a3 88 da 02 c0       	mov    ds:0xc002da88,eax
c00122f2:	50                   	push   eax
c00122f3:	53                   	push   ebx
c00122f4:	68 a7 a5 02 c0       	push   0xc002a5a7
c00122f9:	e8 a3 03 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00122fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012301:	e8 00 f0 ff ff       	call   c0011306 <Virt::freeSwapfilePage(unsigned long)>
c0012306:	c7 04 24 bc a5 02 c0 	mov    DWORD PTR [esp],0xc002a5bc
c001230d:	e8 8f 03 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012312:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0012317:	83 c4 10             	add    esp,0x10
c001231a:	48                   	dec    eax
c001231b:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0012320:	85 c0                	test   eax,eax
c0012322:	74 2d                	je     c0012351 <VAS::tryLoadBackOffDisk(unsigned long)+0x187>
c0012324:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012328:	25 ff 0f 00 00       	and    eax,0xfff
c001232d:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012332:	77 20                	ja     c0012354 <VAS::tryLoadBackOffDisk(unsigned long)+0x18a>
c0012334:	0f 20 d8             	mov    eax,cr3
c0012337:	0f 22 d8             	mov    cr3,eax
c001233a:	83 ec 0c             	sub    esp,0xc
c001233d:	68 e2 a5 02 c0       	push   0xc002a5e2
c0012342:	e8 5a 03 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012347:	83 c4 10             	add    esp,0x10
c001234a:	b0 01                	mov    al,0x1
c001234c:	e9 d1 fe ff ff       	jmp    c0012222 <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c0012351:	fb                   	sti    
c0012352:	eb d0                	jmp    c0012324 <VAS::tryLoadBackOffDisk(unsigned long)+0x15a>
c0012354:	83 ec 0c             	sub    esp,0xc
c0012357:	68 d2 a5 02 c0       	push   0xc002a5d2
c001235c:	e8 40 03 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012361:	83 c4 10             	add    esp,0x10
c0012364:	eb ce                	jmp    c0012334 <VAS::tryLoadBackOffDisk(unsigned long)+0x16a>

c0012366 <VAS::scanForEviction()>:
c0012366:	57                   	push   edi
c0012367:	56                   	push   esi
c0012368:	53                   	push   ebx
c0012369:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001236d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012370:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012376:	75 0e                	jne    c0012386 <VAS::scanForEviction()+0x20>
c0012378:	89 da                	mov    edx,ebx
c001237a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001237d:	c1 ea 16             	shr    edx,0x16
c0012380:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012384:	74 48                	je     c00123ce <VAS::scanForEviction()+0x68>
c0012386:	53                   	push   ebx
c0012387:	56                   	push   esi
c0012388:	e8 8f f2 ff ff       	call   c001161c <VAS::getPageTableEntry(unsigned long)>
c001238d:	5a                   	pop    edx
c001238e:	8b 38                	mov    edi,DWORD PTR [eax]
c0012390:	59                   	pop    ecx
c0012391:	89 fa                	mov    edx,edi
c0012393:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012399:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c001239f:	74 3d                	je     c00123de <VAS::scanForEviction()+0x78>
c00123a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123a7:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00123ad:	76 2a                	jbe    c00123d9 <VAS::scanForEviction()+0x73>
c00123af:	31 db                	xor    ebx,ebx
c00123b1:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00123b8:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00123be:	75 c6                	jne    c0012386 <VAS::scanForEviction()+0x20>
c00123c0:	89 da                	mov    edx,ebx
c00123c2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123c5:	c1 ea 16             	shr    edx,0x16
c00123c8:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123cc:	75 b8                	jne    c0012386 <VAS::scanForEviction()+0x20>
c00123ce:	81 c3 00 00 40 00    	add    ebx,0x400000
c00123d4:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00123d7:	eb 97                	jmp    c0012370 <VAS::scanForEviction()+0xa>
c00123d9:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00123dc:	eb 92                	jmp    c0012370 <VAS::scanForEviction()+0xa>
c00123de:	f7 c7 01 00 00 00    	test   edi,0x1
c00123e4:	74 bb                	je     c00123a1 <VAS::scanForEviction()+0x3b>
c00123e6:	f7 c7 20 00 00 00    	test   edi,0x20
c00123ec:	74 0a                	je     c00123f8 <VAS::scanForEviction()+0x92>
c00123ee:	83 e7 df             	and    edi,0xffffffdf
c00123f1:	89 38                	mov    DWORD PTR [eax],edi
c00123f3:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00123f6:	eb a9                	jmp    c00123a1 <VAS::scanForEviction()+0x3b>
c00123f8:	83 ec 08             	sub    esp,0x8
c00123fb:	53                   	push   ebx
c00123fc:	56                   	push   esi
c00123fd:	e8 da fc ff ff       	call   c00120dc <VAS::evict(unsigned long)>
c0012402:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012409:	83 c4 10             	add    esp,0x10
c001240c:	89 f8                	mov    eax,edi
c001240e:	5b                   	pop    ebx
c001240f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012414:	5e                   	pop    esi
c0012415:	5f                   	pop    edi
c0012416:	c3                   	ret    

c0012417 <mapVASFirstTime>:
c0012417:	55                   	push   ebp
c0012418:	57                   	push   edi
c0012419:	56                   	push   esi
c001241a:	53                   	push   ebx
c001241b:	83 ec 0c             	sub    esp,0xc
c001241e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012423:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012426:	4a                   	dec    edx
c0012427:	0f 84 fe 00 00 00    	je     c001252b <mapVASFirstTime+0x114>
c001242d:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012430:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012433:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012438:	c1 e5 15             	shl    ebp,0x15
c001243b:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012440:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012446:	29 eb                	sub    ebx,ebp
c0012448:	29 ef                	sub    edi,ebp
c001244a:	83 ec 08             	sub    esp,0x8
c001244d:	53                   	push   ebx
c001244e:	68 09 a6 02 c0       	push   0xc002a609
c0012453:	e8 49 02 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012458:	e8 14 d5 ff ff       	call   c000f971 <Phys::allocatePage()>
c001245d:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012464:	6a 01                	push   0x1
c0012466:	53                   	push   ebx
c0012467:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001246d:	50                   	push   eax
c001246e:	56                   	push   esi
c001246f:	e8 34 f8 ff ff       	call   c0011ca8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012474:	83 c4 20             	add    esp,0x20
c0012477:	39 fb                	cmp    ebx,edi
c0012479:	75 cf                	jne    c001244a <mapVASFirstTime+0x33>
c001247b:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012480:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012485:	29 eb                	sub    ebx,ebp
c0012487:	29 ef                	sub    edi,ebp
c0012489:	83 ec 08             	sub    esp,0x8
c001248c:	53                   	push   ebx
c001248d:	68 25 a6 02 c0       	push   0xc002a625
c0012492:	e8 0a 02 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012497:	58                   	pop    eax
c0012498:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c001249c:	5a                   	pop    edx
c001249d:	19 c0                	sbb    eax,eax
c001249f:	83 e0 04             	and    eax,0x4
c00124a2:	05 03 04 00 00       	add    eax,0x403
c00124a7:	50                   	push   eax
c00124a8:	68 71 a5 02 c0       	push   0xc002a571
c00124ad:	e8 ef 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00124b2:	e8 ba d4 ff ff       	call   c000f971 <Phys::allocatePage()>
c00124b7:	59                   	pop    ecx
c00124b8:	89 c5                	mov    ebp,eax
c00124ba:	58                   	pop    eax
c00124bb:	55                   	push   ebp
c00124bc:	68 39 a6 02 c0       	push   0xc002a639
c00124c1:	e8 db 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00124c6:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124ca:	19 d2                	sbb    edx,edx
c00124cc:	83 e2 04             	and    edx,0x4
c00124cf:	81 c2 03 0c 00 00    	add    edx,0xc03
c00124d5:	89 14 24             	mov    DWORD PTR [esp],edx
c00124d8:	6a 01                	push   0x1
c00124da:	53                   	push   ebx
c00124db:	55                   	push   ebp
c00124dc:	56                   	push   esi
c00124dd:	e8 c6 f7 ff ff       	call   c0011ca8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124e2:	83 c4 18             	add    esp,0x18
c00124e5:	53                   	push   ebx
c00124e6:	56                   	push   esi
c00124e7:	e8 30 f1 ff ff       	call   c001161c <VAS::getPageTableEntry(unsigned long)>
c00124ec:	5a                   	pop    edx
c00124ed:	59                   	pop    ecx
c00124ee:	ff 30                	push   DWORD PTR [eax]
c00124f0:	68 55 a6 02 c0       	push   0xc002a655
c00124f5:	e8 a7 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00124fa:	0f 20 d8             	mov    eax,cr3
c00124fd:	83 c4 0c             	add    esp,0xc
c0012500:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012506:	56                   	push   esi
c0012507:	50                   	push   eax
c0012508:	68 7f a5 02 c0       	push   0xc002a57f
c001250d:	e8 8f 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012512:	83 c4 10             	add    esp,0x10
c0012515:	39 df                	cmp    edi,ebx
c0012517:	0f 85 6c ff ff ff    	jne    c0012489 <mapVASFirstTime+0x72>
c001251d:	0f 20 d8             	mov    eax,cr3
c0012520:	0f 22 d8             	mov    cr3,eax
c0012523:	83 c4 0c             	add    esp,0xc
c0012526:	5b                   	pop    ebx
c0012527:	5e                   	pop    esi
c0012528:	5f                   	pop    edi
c0012529:	5d                   	pop    ebp
c001252a:	c3                   	ret    
c001252b:	83 ec 0c             	sub    esp,0xc
c001252e:	68 f0 a5 02 c0       	push   0xc002a5f0
c0012533:	e8 69 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012538:	83 c4 10             	add    esp,0x10
c001253b:	83 c4 0c             	add    esp,0xc
c001253e:	5b                   	pop    ebx
c001253f:	5e                   	pop    esi
c0012540:	5f                   	pop    edi
c0012541:	5d                   	pop    ebp
c0012542:	c3                   	ret    

c0012543 <__cxa_atexit>:
c0012543:	31 c0                	xor    eax,eax
c0012545:	c3                   	ret    

c0012546 <__cxa_finalize>:
c0012546:	c3                   	ret    

c0012547 <__stack_chk_fail>:
c0012547:	55                   	push   ebp
c0012548:	89 e5                	mov    ebp,esp
c001254a:	83 ec 14             	sub    esp,0x14
c001254d:	68 60 a6 02 c0       	push   0xc002a660
c0012552:	e8 4a 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012557:	58                   	pop    eax
c0012558:	5a                   	pop    edx
c0012559:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001255c:	68 b0 a6 02 c0       	push   0xc002a6b0
c0012561:	e8 3b 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012566:	59                   	pop    ecx
c0012567:	58                   	pop    eax
c0012568:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001256b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001256e:	68 b0 a6 02 c0       	push   0xc002a6b0
c0012573:	e8 29 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0012578:	5a                   	pop    edx
c0012579:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001257c:	59                   	pop    ecx
c001257d:	8b 00                	mov    eax,DWORD PTR [eax]
c001257f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012582:	68 b0 a6 02 c0       	push   0xc002a6b0
c0012587:	e8 15 01 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001258c:	5a                   	pop    edx
c001258d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012590:	59                   	pop    ecx
c0012591:	8b 00                	mov    eax,DWORD PTR [eax]
c0012593:	8b 00                	mov    eax,DWORD PTR [eax]
c0012595:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012598:	68 b0 a6 02 c0       	push   0xc002a6b0
c001259d:	e8 ff 00 00 00       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00125a2:	c7 04 24 b8 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6b8
c00125a9:	e8 5f 78 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c00125ae:	83 c4 10             	add    esp,0x10
c00125b1:	c9                   	leave  
c00125b2:	c3                   	ret    

c00125b3 <__cxa_pure_virtual>:
c00125b3:	83 ec 18             	sub    esp,0x18
c00125b6:	68 d0 a6 02 c0       	push   0xc002a6d0
c00125bb:	e8 4d 78 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c00125c0:	83 c4 1c             	add    esp,0x1c
c00125c3:	c3                   	ret    

c00125c4 <operator new[](unsigned long)>:
c00125c4:	e9 d0 cf ff ff       	jmp    c000f599 <malloc>

c00125c9 <operator delete(void*, unsigned long)>:
c00125c9:	e9 eb cf ff ff       	jmp    c000f5b9 <rfree>

c00125ce <operator delete[](void*)>:
c00125ce:	e9 e6 cf ff ff       	jmp    c000f5b9 <rfree>

c00125d3 <operator delete[](void*, unsigned long)>:
c00125d3:	e9 e1 cf ff ff       	jmp    c000f5b9 <rfree>

c00125d8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00125d8:	55                   	push   ebp
c00125d9:	b9 11 00 00 00       	mov    ecx,0x11
c00125de:	57                   	push   edi
c00125df:	56                   	push   esi
c00125e0:	be 1e a1 02 c0       	mov    esi,0xc002a11e
c00125e5:	53                   	push   ebx
c00125e6:	83 ec 20             	sub    esp,0x20
c00125e9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00125ed:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00125f1:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00125f5:	fc                   	cld    
c00125f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125f8:	89 ee                	mov    esi,ebp
c00125fa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00125fe:	eb 02                	jmp    c0012602 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012600:	89 c6                	mov    esi,eax
c0012602:	31 d2                	xor    edx,edx
c0012604:	41                   	inc    ecx
c0012605:	89 f0                	mov    eax,esi
c0012607:	f7 f3                	div    ebx
c0012609:	39 de                	cmp    esi,ebx
c001260b:	73 f3                	jae    c0012600 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c001260d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012610:	eb 02                	jmp    c0012614 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012612:	89 c5                	mov    ebp,eax
c0012614:	31 d2                	xor    edx,edx
c0012616:	49                   	dec    ecx
c0012617:	89 e8                	mov    eax,ebp
c0012619:	f7 f3                	div    ebx
c001261b:	39 dd                	cmp    ebp,ebx
c001261d:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012621:	88 11                	mov    BYTE PTR [ecx],dl
c0012623:	73 ed                	jae    c0012612 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012625:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012629:	83 c4 20             	add    esp,0x20
c001262c:	5b                   	pop    ebx
c001262d:	5e                   	pop    esi
c001262e:	5f                   	pop    edi
c001262f:	5d                   	pop    ebp
c0012630:	c3                   	ret    

c0012631 <Dbg::logc(char)>:
c0012631:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012635:	ba fd 03 00 00       	mov    edx,0x3fd
c001263a:	ec                   	in     al,dx
c001263b:	a8 20                	test   al,0x20
c001263d:	74 fb                	je     c001263a <Dbg::logc(char)+0x9>
c001263f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012644:	88 c8                	mov    al,cl
c0012646:	ee                   	out    dx,al
c0012647:	c3                   	ret    

c0012648 <Dbg::logs(char*)>:
c0012648:	53                   	push   ebx
c0012649:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001264d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012650:	84 c0                	test   al,al
c0012652:	74 0f                	je     c0012663 <Dbg::logs(char*)+0x1b>
c0012654:	50                   	push   eax
c0012655:	43                   	inc    ebx
c0012656:	e8 d6 ff ff ff       	call   c0012631 <Dbg::logc(char)>
c001265b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001265e:	5a                   	pop    edx
c001265f:	84 c0                	test   al,al
c0012661:	75 f1                	jne    c0012654 <Dbg::logs(char*)+0xc>
c0012663:	5b                   	pop    ebx
c0012664:	c3                   	ret    

c0012665 <Dbg::logWriteInt(unsigned int)>:
c0012665:	83 ec 10             	sub    esp,0x10
c0012668:	6a 0a                	push   0xa
c001266a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001266e:	50                   	push   eax
c001266f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012673:	e8 60 ff ff ff       	call   c00125d8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012678:	50                   	push   eax
c0012679:	e8 ca ff ff ff       	call   c0012648 <Dbg::logs(char*)>
c001267e:	83 c4 20             	add    esp,0x20
c0012681:	c3                   	ret    

c0012682 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012682:	83 ec 10             	sub    esp,0x10
c0012685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012689:	8d 44 24 08          	lea    eax,[esp+0x8]
c001268d:	50                   	push   eax
c001268e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012692:	e8 41 ff ff ff       	call   c00125d8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012697:	50                   	push   eax
c0012698:	e8 ab ff ff ff       	call   c0012648 <Dbg::logs(char*)>
c001269d:	83 c4 20             	add    esp,0x20
c00126a0:	c3                   	ret    

c00126a1 <Dbg::kprintf(char const*, ...)>:
c00126a1:	55                   	push   ebp
c00126a2:	57                   	push   edi
c00126a3:	56                   	push   esi
c00126a4:	53                   	push   ebx
c00126a5:	83 ec 0c             	sub    esp,0xc
c00126a8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00126ac:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126b4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126b7:	84 c0                	test   al,al
c00126b9:	74 4a                	je     c0012705 <Dbg::kprintf(char const*, ...)+0x64>
c00126bb:	31 db                	xor    ebx,ebx
c00126bd:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126c0:	3c 25                	cmp    al,0x25
c00126c2:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00126c5:	0f 85 e4 00 00 00    	jne    c00127af <Dbg::kprintf(char const*, ...)+0x10e>
c00126cb:	83 c3 02             	add    ebx,0x2
c00126ce:	8a 07                	mov    al,BYTE PTR [edi]
c00126d0:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00126d3:	83 e8 25             	sub    eax,0x25
c00126d6:	3c 53                	cmp    al,0x53
c00126d8:	0f 87 ba 00 00 00    	ja     c0012798 <Dbg::kprintf(char const*, ...)+0xf7>
c00126de:	0f b6 c0             	movzx  eax,al
c00126e1:	ff 24 85 e4 a6 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd591c]
c00126e8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126ec:	89 c8                	mov    eax,ecx
c00126ee:	83 c1 04             	add    ecx,0x4
c00126f1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126f5:	ff 30                	push   DWORD PTR [eax]
c00126f7:	e8 69 ff ff ff       	call   c0012665 <Dbg::logWriteInt(unsigned int)>
c00126fc:	5f                   	pop    edi
c00126fd:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012701:	84 c0                	test   al,al
c0012703:	75 b8                	jne    c00126bd <Dbg::kprintf(char const*, ...)+0x1c>
c0012705:	83 c4 0c             	add    esp,0xc
c0012708:	5b                   	pop    ebx
c0012709:	5e                   	pop    esi
c001270a:	5f                   	pop    edi
c001270b:	5d                   	pop    ebp
c001270c:	c3                   	ret    
c001270d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012711:	89 c8                	mov    eax,ecx
c0012713:	83 c1 04             	add    ecx,0x4
c0012716:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001271a:	ff 30                	push   DWORD PTR [eax]
c001271c:	e8 27 ff ff ff       	call   c0012648 <Dbg::logs(char*)>
c0012721:	58                   	pop    eax
c0012722:	eb d9                	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c0012724:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012728:	89 d0                	mov    eax,edx
c001272a:	83 c2 04             	add    edx,0x4
c001272d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012731:	ff 30                	push   DWORD PTR [eax]
c0012733:	e8 2d ff ff ff       	call   c0012665 <Dbg::logWriteInt(unsigned int)>
c0012738:	58                   	pop    eax
c0012739:	eb c2                	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c001273b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001273f:	89 d0                	mov    eax,edx
c0012741:	83 c2 04             	add    edx,0x4
c0012744:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012747:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001274b:	50                   	push   eax
c001274c:	e8 e0 fe ff ff       	call   c0012631 <Dbg::logc(char)>
c0012751:	58                   	pop    eax
c0012752:	eb a9                	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c0012754:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012758:	89 c8                	mov    eax,ecx
c001275a:	83 c1 04             	add    ecx,0x4
c001275d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012761:	6a 10                	push   0x10
c0012763:	ff 30                	push   DWORD PTR [eax]
c0012765:	e8 18 ff ff ff       	call   c0012682 <Dbg::logWriteIntBase(unsigned int, int)>
c001276a:	59                   	pop    ecx
c001276b:	5f                   	pop    edi
c001276c:	eb 8f                	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c001276e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012772:	89 d0                	mov    eax,edx
c0012774:	83 c2 08             	add    edx,0x8
c0012777:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001277b:	6a 10                	push   0x10
c001277d:	ff 30                	push   DWORD PTR [eax]
c001277f:	e8 fe fe ff ff       	call   c0012682 <Dbg::logWriteIntBase(unsigned int, int)>
c0012784:	58                   	pop    eax
c0012785:	5a                   	pop    edx
c0012786:	e9 72 ff ff ff       	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c001278b:	6a 25                	push   0x25
c001278d:	e8 9f fe ff ff       	call   c0012631 <Dbg::logc(char)>
c0012792:	58                   	pop    eax
c0012793:	e9 65 ff ff ff       	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c0012798:	6a 25                	push   0x25
c001279a:	e8 92 fe ff ff       	call   c0012631 <Dbg::logc(char)>
c001279f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00127a2:	50                   	push   eax
c00127a3:	e8 89 fe ff ff       	call   c0012631 <Dbg::logc(char)>
c00127a8:	5a                   	pop    edx
c00127a9:	59                   	pop    ecx
c00127aa:	e9 4e ff ff ff       	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c00127af:	50                   	push   eax
c00127b0:	89 eb                	mov    ebx,ebp
c00127b2:	e8 7a fe ff ff       	call   c0012631 <Dbg::logc(char)>
c00127b7:	89 fd                	mov    ebp,edi
c00127b9:	58                   	pop    eax
c00127ba:	e9 3e ff ff ff       	jmp    c00126fd <Dbg::kprintf(char const*, ...)+0x5c>
c00127bf:	90                   	nop

c00127c0 <File::read(unsigned long long, void*, int*)>:
c00127c0:	53                   	push   ebx
c00127c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127c5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127c9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127d0:	3c 19                	cmp    al,0x19
c00127d2:	77 35                	ja     c0012809 <File::read(unsigned long long, void*, int*)+0x49>
c00127d4:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c00127db:	85 c0                	test   eax,eax
c00127dd:	74 2a                	je     c0012809 <File::read(unsigned long long, void*, int*)+0x49>
c00127df:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127e5:	85 c0                	test   eax,eax
c00127e7:	74 20                	je     c0012809 <File::read(unsigned long long, void*, int*)+0x49>
c00127e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127ed:	74 21                	je     c0012810 <File::read(unsigned long long, void*, int*)+0x50>
c00127ef:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127f1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127f5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012803:	5b                   	pop    ebx
c0012804:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012807:	ff e0                	jmp    eax
c0012809:	b8 0b 00 00 00       	mov    eax,0xb
c001280e:	eb 05                	jmp    c0012815 <File::read(unsigned long long, void*, int*)+0x55>
c0012810:	b8 05 00 00 00       	mov    eax,0x5
c0012815:	5b                   	pop    ebx
c0012816:	c3                   	ret    
c0012817:	90                   	nop

c0012818 <File::write(unsigned long long, void*, int*)>:
c0012818:	53                   	push   ebx
c0012819:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001281d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012821:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012828:	3c 19                	cmp    al,0x19
c001282a:	77 35                	ja     c0012861 <File::write(unsigned long long, void*, int*)+0x49>
c001282c:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c0012833:	85 c0                	test   eax,eax
c0012835:	74 2a                	je     c0012861 <File::write(unsigned long long, void*, int*)+0x49>
c0012837:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001283d:	85 c0                	test   eax,eax
c001283f:	74 20                	je     c0012861 <File::write(unsigned long long, void*, int*)+0x49>
c0012841:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012845:	74 21                	je     c0012868 <File::write(unsigned long long, void*, int*)+0x50>
c0012847:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012849:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001284d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012853:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012857:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001285b:	5b                   	pop    ebx
c001285c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001285f:	ff e0                	jmp    eax
c0012861:	b8 0b 00 00 00       	mov    eax,0xb
c0012866:	eb 05                	jmp    c001286d <File::write(unsigned long long, void*, int*)+0x55>
c0012868:	b8 05 00 00 00       	mov    eax,0x5
c001286d:	5b                   	pop    ebx
c001286e:	c3                   	ret    
c001286f:	90                   	nop

c0012870 <Directory::read(unsigned long long, void*, int*)>:
c0012870:	53                   	push   ebx
c0012871:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012875:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012879:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012880:	3c 19                	cmp    al,0x19
c0012882:	77 35                	ja     c00128b9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012884:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c001288b:	85 c0                	test   eax,eax
c001288d:	74 2a                	je     c00128b9 <Directory::read(unsigned long long, void*, int*)+0x49>
c001288f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012895:	85 c0                	test   eax,eax
c0012897:	74 20                	je     c00128b9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012899:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001289d:	74 21                	je     c00128c0 <Directory::read(unsigned long long, void*, int*)+0x50>
c001289f:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128a1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128a5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128b3:	5b                   	pop    ebx
c00128b4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00128b7:	ff e0                	jmp    eax
c00128b9:	b8 0b 00 00 00       	mov    eax,0xb
c00128be:	eb 05                	jmp    c00128c5 <Directory::read(unsigned long long, void*, int*)+0x55>
c00128c0:	b8 05 00 00 00       	mov    eax,0x5
c00128c5:	5b                   	pop    ebx
c00128c6:	c3                   	ret    
c00128c7:	90                   	nop

c00128c8 <Directory::write(unsigned long long, void*, int*)>:
c00128c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128cc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00128d3:	b8 0b 00 00 00       	mov    eax,0xb
c00128d8:	80 fa 19             	cmp    dl,0x19
c00128db:	77 18                	ja     c00128f5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128dd:	8b 14 95 20 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20e0]
c00128e4:	85 d2                	test   edx,edx
c00128e6:	74 0d                	je     c00128f5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128e8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00128ef:	19 c0                	sbb    eax,eax
c00128f1:	83 e0 0a             	and    eax,0xa
c00128f4:	40                   	inc    eax
c00128f5:	c3                   	ret    

c00128f6 <File::isAtty()>:
c00128f6:	31 c0                	xor    eax,eax
c00128f8:	c3                   	ret    
c00128f9:	90                   	nop

c00128fa <Directory::isAtty()>:
c00128fa:	31 c0                	xor    eax,eax
c00128fc:	c3                   	ret    
c00128fd:	90                   	nop

c00128fe <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00128fe:	b8 0a 00 00 00       	mov    eax,0xa
c0012903:	c3                   	ret    

c0012904 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012904:	b8 0a 00 00 00       	mov    eax,0xa
c0012909:	c3                   	ret    

c001290a <Filesystem::getFileFirstSector(char const*)>:
c001290a:	31 c0                	xor    eax,eax
c001290c:	31 d2                	xor    edx,edx
c001290e:	c3                   	ret    
c001290f:	90                   	nop

c0012910 <File::~File()>:
c0012910:	83 ec 0c             	sub    esp,0xc
c0012913:	ba a4 a8 02 c0       	mov    edx,0xc002a8a4
c0012918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001291c:	89 10                	mov    DWORD PTR [eax],edx
c001291e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012922:	83 ec 0c             	sub    esp,0xc
c0012925:	50                   	push   eax
c0012926:	e8 69 e6 ff ff       	call   c0010f94 <UnixFile::~UnixFile()>
c001292b:	83 c4 10             	add    esp,0x10
c001292e:	90                   	nop
c001292f:	83 c4 0c             	add    esp,0xc
c0012932:	c3                   	ret    
c0012933:	90                   	nop

c0012934 <File::~File()>:
c0012934:	83 ec 0c             	sub    esp,0xc
c0012937:	83 ec 0c             	sub    esp,0xc
c001293a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001293e:	e8 cd ff ff ff       	call   c0012910 <File::~File()>
c0012943:	83 c4 10             	add    esp,0x10
c0012946:	83 ec 08             	sub    esp,0x8
c0012949:	68 14 01 00 00       	push   0x114
c001294e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012952:	e8 72 fc ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0012957:	83 c4 10             	add    esp,0x10
c001295a:	83 c4 0c             	add    esp,0xc
c001295d:	c3                   	ret    

c001295e <Directory::~Directory()>:
c001295e:	83 ec 0c             	sub    esp,0xc
c0012961:	ba c0 a8 02 c0       	mov    edx,0xc002a8c0
c0012966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001296a:	89 10                	mov    DWORD PTR [eax],edx
c001296c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012970:	83 ec 0c             	sub    esp,0xc
c0012973:	50                   	push   eax
c0012974:	e8 1b e6 ff ff       	call   c0010f94 <UnixFile::~UnixFile()>
c0012979:	83 c4 10             	add    esp,0x10
c001297c:	90                   	nop
c001297d:	83 c4 0c             	add    esp,0xc
c0012980:	c3                   	ret    
c0012981:	90                   	nop

c0012982 <Directory::~Directory()>:
c0012982:	83 ec 0c             	sub    esp,0xc
c0012985:	83 ec 0c             	sub    esp,0xc
c0012988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001298c:	e8 cd ff ff ff       	call   c001295e <Directory::~Directory()>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	83 ec 08             	sub    esp,0x8
c0012997:	68 14 01 00 00       	push   0x114
c001299c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129a0:	e8 24 fc ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c00129a5:	83 c4 10             	add    esp,0x10
c00129a8:	83 c4 0c             	add    esp,0xc
c00129ab:	c3                   	ret    

c00129ac <Filesystem::Filesystem()>:
c00129ac:	ba 3c a8 02 c0       	mov    edx,0xc002a83c
c00129b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129b5:	89 10                	mov    DWORD PTR [eax],edx
c00129b7:	8b 15 94 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da94
c00129bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129c8:	a3 94 da 02 c0       	mov    ds:0xc002da94,eax
c00129cd:	90                   	nop
c00129ce:	c3                   	ret    
c00129cf:	90                   	nop

c00129d0 <Filesystem::~Filesystem()>:
c00129d0:	ba 3c a8 02 c0       	mov    edx,0xc002a83c
c00129d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129d9:	89 10                	mov    DWORD PTR [eax],edx
c00129db:	90                   	nop
c00129dc:	c3                   	ret    
c00129dd:	90                   	nop

c00129de <Filesystem::~Filesystem()>:
c00129de:	83 ec 0c             	sub    esp,0xc
c00129e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00129e5:	e8 e6 ff ff ff       	call   c00129d0 <Filesystem::~Filesystem()>
c00129ea:	83 c4 04             	add    esp,0x4
c00129ed:	83 ec 08             	sub    esp,0x8
c00129f0:	6a 08                	push   0x8
c00129f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129f6:	e8 ce fb ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c00129fb:	83 c4 10             	add    esp,0x10
c00129fe:	83 c4 0c             	add    esp,0xc
c0012a01:	c3                   	ret    

c0012a02 <Fs::getcwd(Process*, char*, int)>:
c0012a02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a06:	31 c0                	xor    eax,eax
c0012a08:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012a0b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012a0f:	7d 15                	jge    c0012a26 <Fs::getcwd(Process*, char*, int)+0x24>
c0012a11:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a15:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012a1c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012a1f:	84 c9                	test   cl,cl
c0012a21:	74 06                	je     c0012a29 <Fs::getcwd(Process*, char*, int)+0x27>
c0012a23:	40                   	inc    eax
c0012a24:	eb e2                	jmp    c0012a08 <Fs::getcwd(Process*, char*, int)+0x6>
c0012a26:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012a29:	31 c0                	xor    eax,eax
c0012a2b:	c3                   	ret    

c0012a2c <Fs::initVFS()>:
c0012a2c:	83 ec 18             	sub    esp,0x18
c0012a2f:	6a 08                	push   0x8
c0012a31:	e8 63 cb ff ff       	call   c000f599 <malloc>
c0012a36:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a39:	e8 cc de 00 00       	call   c002090a <FAT::FAT()>
c0012a3e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a45:	e8 4f cb ff ff       	call   c000f599 <malloc>
c0012a4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a4d:	e8 c4 f0 00 00       	call   c0021b16 <ISO9660::ISO9660()>
c0012a52:	83 c4 1c             	add    esp,0x1c
c0012a55:	c3                   	ret    

c0012a56 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012a56:	55                   	push   ebp
c0012a57:	57                   	push   edi
c0012a58:	56                   	push   esi
c0012a59:	53                   	push   ebx
c0012a5a:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a60:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a67:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a6e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012a75:	68 00 04 00 00       	push   0x400
c0012a7a:	6a 00                	push   0x0
c0012a7c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012a80:	56                   	push   esi
c0012a81:	e8 ca dc fe ff       	call   c0000750 <memset>
c0012a86:	83 c4 10             	add    esp,0x10
c0012a89:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012a8d:	75 0b                	jne    c0012a9a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012a8f:	50                   	push   eax
c0012a90:	50                   	push   eax
c0012a91:	57                   	push   edi
c0012a92:	56                   	push   esi
c0012a93:	e8 74 dd fe ff       	call   c000080c <strcpy>
c0012a98:	eb 41                	jmp    c0012adb <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012a9a:	8a 07                	mov    al,BYTE PTR [edi]
c0012a9c:	3c 5c                	cmp    al,0x5c
c0012a9e:	74 04                	je     c0012aa4 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012aa0:	3c 2f                	cmp    al,0x2f
c0012aa2:	75 18                	jne    c0012abc <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012aa4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012aa7:	3c 60                	cmp    al,0x60
c0012aa9:	7e 03                	jle    c0012aae <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012aab:	83 e8 20             	sub    eax,0x20
c0012aae:	88 04 24             	mov    BYTE PTR [esp],al
c0012ab1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ab8:	50                   	push   eax
c0012ab9:	50                   	push   eax
c0012aba:	eb 18                	jmp    c0012ad4 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012abc:	50                   	push   eax
c0012abd:	50                   	push   eax
c0012abe:	55                   	push   ebp
c0012abf:	56                   	push   esi
c0012ac0:	e8 47 dd fe ff       	call   c000080c <strcpy>
c0012ac5:	5a                   	pop    edx
c0012ac6:	59                   	pop    ecx
c0012ac7:	68 2a bb 02 c0       	push   0xc002bb2a
c0012acc:	56                   	push   esi
c0012acd:	e8 7a de fe ff       	call   c000094c <strcat>
c0012ad2:	5d                   	pop    ebp
c0012ad3:	58                   	pop    eax
c0012ad4:	57                   	push   edi
c0012ad5:	56                   	push   esi
c0012ad6:	e8 71 de fe ff       	call   c000094c <strcat>
c0012adb:	83 c4 10             	add    esp,0x10
c0012ade:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012ae1:	3c 60                	cmp    al,0x60
c0012ae3:	7e 03                	jle    c0012ae8 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012ae5:	83 e8 20             	sub    eax,0x20
c0012ae8:	88 04 24             	mov    BYTE PTR [esp],al
c0012aeb:	88 03                	mov    BYTE PTR [ebx],al
c0012aed:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012af4:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012afa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012afe:	bf 03 00 00 00       	mov    edi,0x3
c0012b03:	b8 03 00 00 00       	mov    eax,0x3
c0012b08:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012b0b:	84 d2                	test   dl,dl
c0012b0d:	0f 84 91 00 00 00    	je     c0012ba4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012b13:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012b16:	80 fa 5c             	cmp    dl,0x5c
c0012b19:	74 05                	je     c0012b20 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012b1b:	80 fa 2f             	cmp    dl,0x2f
c0012b1e:	75 12                	jne    c0012b32 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b20:	89 c5                	mov    ebp,eax
c0012b22:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b27:	74 09                	je     c0012b32 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b29:	40                   	inc    eax
c0012b2a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012b2e:	89 cf                	mov    edi,ecx
c0012b30:	eb d6                	jmp    c0012b08 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012b32:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012b37:	75 5b                	jne    c0012b94 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b39:	80 fa 2e             	cmp    dl,0x2e
c0012b3c:	75 56                	jne    c0012b94 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b3e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012b42:	74 19                	je     c0012b5d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012b44:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b49:	74 53                	je     c0012b9e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b4b:	89 f9                	mov    ecx,edi
c0012b4d:	41                   	inc    ecx
c0012b4e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b51:	80 fa 2f             	cmp    dl,0x2f
c0012b54:	74 f7                	je     c0012b4d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b56:	80 fa 5c             	cmp    dl,0x5c
c0012b59:	74 f2                	je     c0012b4d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b5b:	eb d1                	jmp    c0012b2e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b5d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b62:	74 3a                	je     c0012b9e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b64:	83 f8 03             	cmp    eax,0x3
c0012b67:	74 c5                	je     c0012b2e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b69:	41                   	inc    ecx
c0012b6a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b6d:	80 fa 2f             	cmp    dl,0x2f
c0012b70:	74 f7                	je     c0012b69 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012b72:	80 fa 5c             	cmp    dl,0x5c
c0012b75:	74 f2                	je     c0012b69 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012b77:	48                   	dec    eax
c0012b78:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b7c:	75 06                	jne    c0012b84 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b7e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b82:	eb f3                	jmp    c0012b77 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012b84:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b88:	74 07                	je     c0012b91 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012b8a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b8e:	48                   	dec    eax
c0012b8f:	eb f3                	jmp    c0012b84 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b91:	40                   	inc    eax
c0012b92:	eb 9a                	jmp    c0012b2e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b94:	80 fa 2f             	cmp    dl,0x2f
c0012b97:	74 95                	je     c0012b2e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b99:	80 fa 5c             	cmp    dl,0x5c
c0012b9c:	74 90                	je     c0012b2e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b9e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012ba1:	40                   	inc    eax
c0012ba2:	eb 8a                	jmp    c0012b2e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ba4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ba8:	83 ec 0c             	sub    esp,0xc
c0012bab:	53                   	push   ebx
c0012bac:	e8 bb db fe ff       	call   c000076c <strlen>
c0012bb1:	83 c4 10             	add    esp,0x10
c0012bb4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012bb9:	75 26                	jne    c0012be1 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012bbb:	83 ec 0c             	sub    esp,0xc
c0012bbe:	53                   	push   ebx
c0012bbf:	e8 a8 db fe ff       	call   c000076c <strlen>
c0012bc4:	83 c4 10             	add    esp,0x10
c0012bc7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012bcc:	74 26                	je     c0012bf4 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012bce:	83 ec 0c             	sub    esp,0xc
c0012bd1:	53                   	push   ebx
c0012bd2:	e8 95 db fe ff       	call   c000076c <strlen>
c0012bd7:	83 c4 10             	add    esp,0x10
c0012bda:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012bdf:	eb c7                	jmp    c0012ba8 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012be1:	83 ec 0c             	sub    esp,0xc
c0012be4:	53                   	push   ebx
c0012be5:	e8 82 db fe ff       	call   c000076c <strlen>
c0012bea:	83 c4 10             	add    esp,0x10
c0012bed:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012bf2:	74 c7                	je     c0012bbb <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012bf4:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012bfa:	5b                   	pop    ebx
c0012bfb:	5e                   	pop    esi
c0012bfc:	5f                   	pop    edi
c0012bfd:	5d                   	pop    ebp
c0012bfe:	c3                   	ret    
c0012bff:	90                   	nop

c0012c00 <File::File(char const*, Process*)>:
c0012c00:	83 ec 0c             	sub    esp,0xc
c0012c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c07:	83 ec 08             	sub    esp,0x8
c0012c0a:	6a 00                	push   0x0
c0012c0c:	50                   	push   eax
c0012c0d:	e8 a0 e1 ff ff       	call   c0010db2 <UnixFile::UnixFile(int)>
c0012c12:	83 c4 10             	add    esp,0x10
c0012c15:	ba a4 a8 02 c0       	mov    edx,0xc002a8a4
c0012c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c1e:	89 10                	mov    DWORD PTR [eax],edx
c0012c20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c24:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c2e:	83 c0 0d             	add    eax,0xd
c0012c31:	83 ec 04             	sub    esp,0x4
c0012c34:	52                   	push   edx
c0012c35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c39:	50                   	push   eax
c0012c3a:	e8 17 fe ff ff       	call   c0012a56 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012c3f:	83 c4 10             	add    esp,0x10
c0012c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c46:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c49:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c50:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c5a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c5e:	90                   	nop
c0012c5f:	83 c4 0c             	add    esp,0xc
c0012c62:	c3                   	ret    
c0012c63:	90                   	nop

c0012c64 <File::open(FileOpenMode)>:
c0012c64:	53                   	push   ebx
c0012c65:	b8 0b 00 00 00       	mov    eax,0xb
c0012c6a:	83 ec 08             	sub    esp,0x8
c0012c6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c71:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012c78:	80 fa 19             	cmp    dl,0x19
c0012c7b:	77 40                	ja     c0012cbd <File::open(FileOpenMode)+0x59>
c0012c7d:	8b 14 95 20 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20e0]
c0012c84:	85 d2                	test   edx,edx
c0012c86:	74 35                	je     c0012cbd <File::open(FileOpenMode)+0x59>
c0012c88:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c8e:	85 d2                	test   edx,edx
c0012c90:	74 2b                	je     c0012cbd <File::open(FileOpenMode)+0x59>
c0012c92:	b8 06 00 00 00       	mov    eax,0x6
c0012c97:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012c9b:	75 20                	jne    c0012cbd <File::open(FileOpenMode)+0x59>
c0012c9d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c9f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ca5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ca9:	51                   	push   ecx
c0012caa:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cad:	51                   	push   ecx
c0012cae:	52                   	push   edx
c0012caf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012cb2:	83 c4 10             	add    esp,0x10
c0012cb5:	85 c0                	test   eax,eax
c0012cb7:	75 04                	jne    c0012cbd <File::open(FileOpenMode)+0x59>
c0012cb9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012cbd:	83 c4 08             	add    esp,0x8
c0012cc0:	5b                   	pop    ebx
c0012cc1:	c3                   	ret    

c0012cc2 <File::close()>:
c0012cc2:	53                   	push   ebx
c0012cc3:	b8 0b 00 00 00       	mov    eax,0xb
c0012cc8:	83 ec 08             	sub    esp,0x8
c0012ccb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012ccf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012cd6:	80 fa 19             	cmp    dl,0x19
c0012cd9:	77 41                	ja     c0012d1c <File::close()+0x5a>
c0012cdb:	8b 1c 95 20 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd20e0]
c0012ce2:	85 db                	test   ebx,ebx
c0012ce4:	74 36                	je     c0012d1c <File::close()+0x5a>
c0012ce6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012ced:	74 2d                	je     c0012d1c <File::close()+0x5a>
c0012cef:	b8 05 00 00 00       	mov    eax,0x5
c0012cf4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012cf8:	74 22                	je     c0012d1c <File::close()+0x5a>
c0012cfa:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012cfe:	8b 04 95 20 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd20e0]
c0012d05:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d0b:	53                   	push   ebx
c0012d0c:	53                   	push   ebx
c0012d0d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d0f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d15:	50                   	push   eax
c0012d16:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012d19:	83 c4 10             	add    esp,0x10
c0012d1c:	83 c4 08             	add    esp,0x8
c0012d1f:	5b                   	pop    ebx
c0012d20:	c3                   	ret    
c0012d21:	90                   	nop

c0012d22 <File::seek(unsigned long long)>:
c0012d22:	56                   	push   esi
c0012d23:	53                   	push   ebx
c0012d24:	b8 0b 00 00 00       	mov    eax,0xb
c0012d29:	51                   	push   ecx
c0012d2a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d2e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d32:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012d39:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d3d:	80 fa 19             	cmp    dl,0x19
c0012d40:	77 31                	ja     c0012d73 <File::seek(unsigned long long)+0x51>
c0012d42:	8b 14 95 20 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20e0]
c0012d49:	85 d2                	test   edx,edx
c0012d4b:	74 26                	je     c0012d73 <File::seek(unsigned long long)+0x51>
c0012d4d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d53:	85 d2                	test   edx,edx
c0012d55:	74 1c                	je     c0012d73 <File::seek(unsigned long long)+0x51>
c0012d57:	b8 05 00 00 00       	mov    eax,0x5
c0012d5c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d60:	74 11                	je     c0012d73 <File::seek(unsigned long long)+0x51>
c0012d62:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d64:	53                   	push   ebx
c0012d65:	51                   	push   ecx
c0012d66:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d6c:	52                   	push   edx
c0012d6d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d70:	83 c4 10             	add    esp,0x10
c0012d73:	5a                   	pop    edx
c0012d74:	5b                   	pop    ebx
c0012d75:	5e                   	pop    esi
c0012d76:	c3                   	ret    
c0012d77:	90                   	nop

c0012d78 <File::tell(unsigned long long*)>:
c0012d78:	83 ec 0c             	sub    esp,0xc
c0012d7b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d84:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d8b:	80 fa 19             	cmp    dl,0x19
c0012d8e:	77 34                	ja     c0012dc4 <File::tell(unsigned long long*)+0x4c>
c0012d90:	8b 14 95 20 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20e0]
c0012d97:	85 d2                	test   edx,edx
c0012d99:	74 29                	je     c0012dc4 <File::tell(unsigned long long*)+0x4c>
c0012d9b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012da1:	85 d2                	test   edx,edx
c0012da3:	74 1f                	je     c0012dc4 <File::tell(unsigned long long*)+0x4c>
c0012da5:	b8 05 00 00 00       	mov    eax,0x5
c0012daa:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012dae:	74 14                	je     c0012dc4 <File::tell(unsigned long long*)+0x4c>
c0012db0:	50                   	push   eax
c0012db1:	8b 02                	mov    eax,DWORD PTR [edx]
c0012db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012db7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012dbd:	52                   	push   edx
c0012dbe:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012dc1:	83 c4 10             	add    esp,0x10
c0012dc4:	83 c4 0c             	add    esp,0xc
c0012dc7:	c3                   	ret    

c0012dc8 <File::rewind()>:
c0012dc8:	83 ec 10             	sub    esp,0x10
c0012dcb:	6a 00                	push   0x0
c0012dcd:	6a 00                	push   0x0
c0012dcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dd3:	e8 4a ff ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c0012dd8:	83 c4 1c             	add    esp,0x1c
c0012ddb:	c3                   	ret    

c0012ddc <File::unlink()>:
c0012ddc:	83 ec 0c             	sub    esp,0xc
c0012ddf:	b8 0b 00 00 00       	mov    eax,0xb
c0012de4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012de8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012def:	80 f9 19             	cmp    cl,0x19
c0012df2:	77 2f                	ja     c0012e23 <File::unlink()+0x47>
c0012df4:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0012dfb:	85 c9                	test   ecx,ecx
c0012dfd:	74 24                	je     c0012e23 <File::unlink()+0x47>
c0012dff:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e05:	85 c9                	test   ecx,ecx
c0012e07:	74 1a                	je     c0012e23 <File::unlink()+0x47>
c0012e09:	b8 06 00 00 00       	mov    eax,0x6
c0012e0e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e12:	75 0f                	jne    c0012e23 <File::unlink()+0x47>
c0012e14:	83 c2 0d             	add    edx,0xd
c0012e17:	50                   	push   eax
c0012e18:	50                   	push   eax
c0012e19:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e1b:	52                   	push   edx
c0012e1c:	51                   	push   ecx
c0012e1d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012e20:	83 c4 10             	add    esp,0x10
c0012e23:	83 c4 0c             	add    esp,0xc
c0012e26:	c3                   	ret    
c0012e27:	90                   	nop

c0012e28 <File::rename(char const*)>:
c0012e28:	83 ec 0c             	sub    esp,0xc
c0012e2b:	b8 0b 00 00 00       	mov    eax,0xb
c0012e30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e34:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e3b:	80 f9 19             	cmp    cl,0x19
c0012e3e:	77 32                	ja     c0012e72 <File::rename(char const*)+0x4a>
c0012e40:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0012e47:	85 c9                	test   ecx,ecx
c0012e49:	74 27                	je     c0012e72 <File::rename(char const*)+0x4a>
c0012e4b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e51:	85 c9                	test   ecx,ecx
c0012e53:	74 1d                	je     c0012e72 <File::rename(char const*)+0x4a>
c0012e55:	b8 06 00 00 00       	mov    eax,0x6
c0012e5a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e5e:	75 12                	jne    c0012e72 <File::rename(char const*)+0x4a>
c0012e60:	83 c2 0d             	add    edx,0xd
c0012e63:	50                   	push   eax
c0012e64:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e6a:	52                   	push   edx
c0012e6b:	51                   	push   ecx
c0012e6c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e6f:	83 c4 10             	add    esp,0x10
c0012e72:	83 c4 0c             	add    esp,0xc
c0012e75:	c3                   	ret    

c0012e76 <File::chfatattr(unsigned char, unsigned char)>:
c0012e76:	57                   	push   edi
c0012e77:	b8 0b 00 00 00       	mov    eax,0xb
c0012e7c:	56                   	push   esi
c0012e7d:	53                   	push   ebx
c0012e7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e82:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e86:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e8d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012e91:	80 f9 19             	cmp    cl,0x19
c0012e94:	77 37                	ja     c0012ecd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e96:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0012e9d:	85 c9                	test   ecx,ecx
c0012e9f:	74 2c                	je     c0012ecd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ea1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ea7:	85 c9                	test   ecx,ecx
c0012ea9:	74 22                	je     c0012ecd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012eab:	b8 06 00 00 00       	mov    eax,0x6
c0012eb0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eb4:	75 17                	jne    c0012ecd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012eb6:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012eb8:	89 f0                	mov    eax,esi
c0012eba:	83 c2 0d             	add    edx,0xd
c0012ebd:	0f b6 f0             	movzx  esi,al
c0012ec0:	0f b6 db             	movzx  ebx,bl
c0012ec3:	56                   	push   esi
c0012ec4:	53                   	push   ebx
c0012ec5:	52                   	push   edx
c0012ec6:	51                   	push   ecx
c0012ec7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012eca:	83 c4 10             	add    esp,0x10
c0012ecd:	5b                   	pop    ebx
c0012ece:	5e                   	pop    esi
c0012ecf:	5f                   	pop    edi
c0012ed0:	c3                   	ret    
c0012ed1:	90                   	nop

c0012ed2 <File::exists()>:
c0012ed2:	83 ec 0c             	sub    esp,0xc
c0012ed5:	31 c0                	xor    eax,eax
c0012ed7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012edb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ee2:	80 f9 19             	cmp    cl,0x19
c0012ee5:	77 24                	ja     c0012f0b <File::exists()+0x39>
c0012ee7:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0012eee:	85 c9                	test   ecx,ecx
c0012ef0:	74 19                	je     c0012f0b <File::exists()+0x39>
c0012ef2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ef8:	85 c9                	test   ecx,ecx
c0012efa:	74 0f                	je     c0012f0b <File::exists()+0x39>
c0012efc:	83 c2 0d             	add    edx,0xd
c0012eff:	50                   	push   eax
c0012f00:	50                   	push   eax
c0012f01:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f03:	52                   	push   edx
c0012f04:	51                   	push   ecx
c0012f05:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f08:	83 c4 10             	add    esp,0x10
c0012f0b:	83 c4 0c             	add    esp,0xc
c0012f0e:	c3                   	ret    
c0012f0f:	90                   	nop

c0012f10 <File::stat(unsigned long long*, bool*)>:
c0012f10:	56                   	push   esi
c0012f11:	53                   	push   ebx
c0012f12:	50                   	push   eax
c0012f13:	b8 0b 00 00 00       	mov    eax,0xb
c0012f18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f1c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f20:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f2b:	80 f9 19             	cmp    cl,0x19
c0012f2e:	77 3d                	ja     c0012f6d <File::stat(unsigned long long*, bool*)+0x5d>
c0012f30:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0012f37:	85 c9                	test   ecx,ecx
c0012f39:	74 32                	je     c0012f6d <File::stat(unsigned long long*, bool*)+0x5d>
c0012f3b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f41:	85 c9                	test   ecx,ecx
c0012f43:	74 28                	je     c0012f6d <File::stat(unsigned long long*, bool*)+0x5d>
c0012f45:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f47:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f4b:	74 13                	je     c0012f60 <File::stat(unsigned long long*, bool*)+0x50>
c0012f4d:	83 ec 04             	sub    esp,0x4
c0012f50:	56                   	push   esi
c0012f51:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f57:	51                   	push   ecx
c0012f58:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f5b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f5e:	eb 0a                	jmp    c0012f6a <File::stat(unsigned long long*, bool*)+0x5a>
c0012f60:	53                   	push   ebx
c0012f61:	83 c2 0d             	add    edx,0xd
c0012f64:	56                   	push   esi
c0012f65:	52                   	push   edx
c0012f66:	51                   	push   ecx
c0012f67:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f6a:	83 c4 10             	add    esp,0x10
c0012f6d:	5a                   	pop    edx
c0012f6e:	5b                   	pop    ebx
c0012f6f:	5e                   	pop    esi
c0012f70:	c3                   	ret    

c0012f71 <Fs::setcwd(Process*, char*)>:
c0012f71:	55                   	push   ebp
c0012f72:	57                   	push   edi
c0012f73:	56                   	push   esi
c0012f74:	53                   	push   ebx
c0012f75:	81 ec 20 02 00 00    	sub    esp,0x220
c0012f7b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012f82:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012f88:	57                   	push   edi
c0012f89:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012f90:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012f94:	56                   	push   esi
c0012f95:	e8 bc fa ff ff       	call   c0012a56 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012f9a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f9d:	e8 ca d7 fe ff       	call   c000076c <strlen>
c0012fa2:	83 c4 10             	add    esp,0x10
c0012fa5:	83 f8 02             	cmp    eax,0x2
c0012fa8:	77 17                	ja     c0012fc1 <Fs::setcwd(Process*, char*)+0x50>
c0012faa:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012faf:	83 e8 41             	sub    eax,0x41
c0012fb2:	83 f8 19             	cmp    eax,0x19
c0012fb5:	76 24                	jbe    c0012fdb <Fs::setcwd(Process*, char*)+0x6a>
c0012fb7:	b8 03 00 00 00       	mov    eax,0x3
c0012fbc:	e9 e0 00 00 00       	jmp    c00130a1 <Fs::setcwd(Process*, char*)+0x130>
c0012fc1:	83 ec 0c             	sub    esp,0xc
c0012fc4:	56                   	push   esi
c0012fc5:	e8 a2 d7 fe ff       	call   c000076c <strlen>
c0012fca:	83 c4 10             	add    esp,0x10
c0012fcd:	83 f8 03             	cmp    eax,0x3
c0012fd0:	75 34                	jne    c0013006 <Fs::setcwd(Process*, char*)+0x95>
c0012fd2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012fd7:	75 2d                	jne    c0013006 <Fs::setcwd(Process*, char*)+0x95>
c0012fd9:	eb cf                	jmp    c0012faa <Fs::setcwd(Process*, char*)+0x39>
c0012fdb:	8b 14 85 20 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd20e0]
c0012fe2:	b8 05 00 00 00       	mov    eax,0x5
c0012fe7:	85 d2                	test   edx,edx
c0012fe9:	0f 84 b2 00 00 00    	je     c00130a1 <Fs::setcwd(Process*, char*)+0x130>
c0012fef:	b8 06 00 00 00       	mov    eax,0x6
c0012ff4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012ffb:	0f 85 92 00 00 00    	jne    c0013093 <Fs::setcwd(Process*, char*)+0x122>
c0013001:	e9 9b 00 00 00       	jmp    c00130a1 <Fs::setcwd(Process*, char*)+0x130>
c0013006:	83 ec 0c             	sub    esp,0xc
c0013009:	68 14 01 00 00       	push   0x114
c001300e:	e8 86 c5 ff ff       	call   c000f599 <malloc>
c0013013:	83 c4 0c             	add    esp,0xc
c0013016:	89 c3                	mov    ebx,eax
c0013018:	55                   	push   ebp
c0013019:	56                   	push   esi
c001301a:	50                   	push   eax
c001301b:	e8 e0 fb ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c0013020:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013025:	83 c4 0c             	add    esp,0xc
c0013028:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001302c:	50                   	push   eax
c001302d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013031:	50                   	push   eax
c0013032:	53                   	push   ebx
c0013033:	e8 d8 fe ff ff       	call   c0012f10 <File::stat(unsigned long long*, bool*)>
c0013038:	83 c4 10             	add    esp,0x10
c001303b:	83 f8 02             	cmp    eax,0x2
c001303e:	74 04                	je     c0013044 <Fs::setcwd(Process*, char*)+0xd3>
c0013040:	85 c0                	test   eax,eax
c0013042:	74 1c                	je     c0013060 <Fs::setcwd(Process*, char*)+0xef>
c0013044:	b8 01 00 00 00       	mov    eax,0x1
c0013049:	85 db                	test   ebx,ebx
c001304b:	74 54                	je     c00130a1 <Fs::setcwd(Process*, char*)+0x130>
c001304d:	83 ec 0c             	sub    esp,0xc
c0013050:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013052:	53                   	push   ebx
c0013053:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013056:	83 c4 10             	add    esp,0x10
c0013059:	b8 01 00 00 00       	mov    eax,0x1
c001305e:	eb 41                	jmp    c00130a1 <Fs::setcwd(Process*, char*)+0x130>
c0013060:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013065:	75 1c                	jne    c0013083 <Fs::setcwd(Process*, char*)+0x112>
c0013067:	b8 02 00 00 00       	mov    eax,0x2
c001306c:	85 db                	test   ebx,ebx
c001306e:	74 31                	je     c00130a1 <Fs::setcwd(Process*, char*)+0x130>
c0013070:	83 ec 0c             	sub    esp,0xc
c0013073:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013075:	53                   	push   ebx
c0013076:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013079:	83 c4 10             	add    esp,0x10
c001307c:	b8 02 00 00 00       	mov    eax,0x2
c0013081:	eb 1e                	jmp    c00130a1 <Fs::setcwd(Process*, char*)+0x130>
c0013083:	85 db                	test   ebx,ebx
c0013085:	74 0c                	je     c0013093 <Fs::setcwd(Process*, char*)+0x122>
c0013087:	83 ec 0c             	sub    esp,0xc
c001308a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001308c:	53                   	push   ebx
c001308d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013090:	83 c4 10             	add    esp,0x10
c0013093:	50                   	push   eax
c0013094:	50                   	push   eax
c0013095:	56                   	push   esi
c0013096:	57                   	push   edi
c0013097:	e8 70 d7 fe ff       	call   c000080c <strcpy>
c001309c:	83 c4 10             	add    esp,0x10
c001309f:	31 c0                	xor    eax,eax
c00130a1:	81 c4 1c 02 00 00    	add    esp,0x21c
c00130a7:	5b                   	pop    ebx
c00130a8:	5e                   	pop    esi
c00130a9:	5f                   	pop    edi
c00130aa:	5d                   	pop    ebp
c00130ab:	c3                   	ret    

c00130ac <Directory::Directory(char const*, Process*)>:
c00130ac:	83 ec 0c             	sub    esp,0xc
c00130af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b3:	83 ec 08             	sub    esp,0x8
c00130b6:	6a 00                	push   0x0
c00130b8:	50                   	push   eax
c00130b9:	e8 f4 dc ff ff       	call   c0010db2 <UnixFile::UnixFile(int)>
c00130be:	83 c4 10             	add    esp,0x10
c00130c1:	ba c0 a8 02 c0       	mov    edx,0xc002a8c0
c00130c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ca:	89 10                	mov    DWORD PTR [eax],edx
c00130cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130d0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130da:	83 c0 0d             	add    eax,0xd
c00130dd:	83 ec 04             	sub    esp,0x4
c00130e0:	52                   	push   edx
c00130e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130e5:	50                   	push   eax
c00130e6:	e8 6b f9 ff ff       	call   c0012a56 <Fs::standardiseFiles(char*, char const*, char const*)>
c00130eb:	83 c4 10             	add    esp,0x10
c00130ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130f5:	8d 50 bf             	lea    edx,[eax-0x41]
c00130f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130fc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013106:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001310a:	90                   	nop
c001310b:	83 c4 0c             	add    esp,0xc
c001310e:	c3                   	ret    
c001310f:	90                   	nop

c0013110 <Directory::open()>:
c0013110:	53                   	push   ebx
c0013111:	b8 0b 00 00 00       	mov    eax,0xb
c0013116:	83 ec 08             	sub    esp,0x8
c0013119:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001311d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013124:	80 fa 19             	cmp    dl,0x19
c0013127:	77 3d                	ja     c0013166 <Directory::open()+0x56>
c0013129:	8b 14 95 20 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20e0]
c0013130:	85 d2                	test   edx,edx
c0013132:	74 32                	je     c0013166 <Directory::open()+0x56>
c0013134:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001313a:	85 d2                	test   edx,edx
c001313c:	74 28                	je     c0013166 <Directory::open()+0x56>
c001313e:	b8 06 00 00 00       	mov    eax,0x6
c0013143:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013147:	75 1d                	jne    c0013166 <Directory::open()+0x56>
c0013149:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001314f:	50                   	push   eax
c0013150:	8b 02                	mov    eax,DWORD PTR [edx]
c0013152:	51                   	push   ecx
c0013153:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013156:	51                   	push   ecx
c0013157:	52                   	push   edx
c0013158:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001315b:	83 c4 10             	add    esp,0x10
c001315e:	85 c0                	test   eax,eax
c0013160:	75 04                	jne    c0013166 <Directory::open()+0x56>
c0013162:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013166:	83 c4 08             	add    esp,0x8
c0013169:	5b                   	pop    ebx
c001316a:	c3                   	ret    
c001316b:	90                   	nop

c001316c <Directory::close()>:
c001316c:	53                   	push   ebx
c001316d:	b8 0b 00 00 00       	mov    eax,0xb
c0013172:	83 ec 08             	sub    esp,0x8
c0013175:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013179:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013180:	80 fa 19             	cmp    dl,0x19
c0013183:	77 41                	ja     c00131c6 <Directory::close()+0x5a>
c0013185:	8b 1c 95 20 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd20e0]
c001318c:	85 db                	test   ebx,ebx
c001318e:	74 36                	je     c00131c6 <Directory::close()+0x5a>
c0013190:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013197:	74 2d                	je     c00131c6 <Directory::close()+0x5a>
c0013199:	b8 05 00 00 00       	mov    eax,0x5
c001319e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00131a2:	74 22                	je     c00131c6 <Directory::close()+0x5a>
c00131a4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00131a8:	8b 04 95 20 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd20e0]
c00131af:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131b5:	53                   	push   ebx
c00131b6:	53                   	push   ebx
c00131b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00131b9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131bf:	50                   	push   eax
c00131c0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00131c3:	83 c4 10             	add    esp,0x10
c00131c6:	83 c4 08             	add    esp,0x8
c00131c9:	5b                   	pop    ebx
c00131ca:	c3                   	ret    
c00131cb:	90                   	nop

c00131cc <Directory::unlink()>:
c00131cc:	83 ec 0c             	sub    esp,0xc
c00131cf:	b8 0b 00 00 00       	mov    eax,0xb
c00131d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131d8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131df:	80 f9 19             	cmp    cl,0x19
c00131e2:	77 2f                	ja     c0013213 <Directory::unlink()+0x47>
c00131e4:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c00131eb:	85 c9                	test   ecx,ecx
c00131ed:	74 24                	je     c0013213 <Directory::unlink()+0x47>
c00131ef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131f5:	85 c9                	test   ecx,ecx
c00131f7:	74 1a                	je     c0013213 <Directory::unlink()+0x47>
c00131f9:	b8 06 00 00 00       	mov    eax,0x6
c00131fe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013202:	75 0f                	jne    c0013213 <Directory::unlink()+0x47>
c0013204:	83 c2 0d             	add    edx,0xd
c0013207:	50                   	push   eax
c0013208:	50                   	push   eax
c0013209:	8b 01                	mov    eax,DWORD PTR [ecx]
c001320b:	52                   	push   edx
c001320c:	51                   	push   ecx
c001320d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013210:	83 c4 10             	add    esp,0x10
c0013213:	83 c4 0c             	add    esp,0xc
c0013216:	c3                   	ret    
c0013217:	90                   	nop

c0013218 <Directory::rename(char const*)>:
c0013218:	83 ec 0c             	sub    esp,0xc
c001321b:	b8 0b 00 00 00       	mov    eax,0xb
c0013220:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013224:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001322b:	80 f9 19             	cmp    cl,0x19
c001322e:	77 32                	ja     c0013262 <Directory::rename(char const*)+0x4a>
c0013230:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0013237:	85 c9                	test   ecx,ecx
c0013239:	74 27                	je     c0013262 <Directory::rename(char const*)+0x4a>
c001323b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013241:	85 c9                	test   ecx,ecx
c0013243:	74 1d                	je     c0013262 <Directory::rename(char const*)+0x4a>
c0013245:	b8 06 00 00 00       	mov    eax,0x6
c001324a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001324e:	75 12                	jne    c0013262 <Directory::rename(char const*)+0x4a>
c0013250:	83 c2 0d             	add    edx,0xd
c0013253:	50                   	push   eax
c0013254:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001325a:	52                   	push   edx
c001325b:	51                   	push   ecx
c001325c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001325f:	83 c4 10             	add    esp,0x10
c0013262:	83 c4 0c             	add    esp,0xc
c0013265:	c3                   	ret    

c0013266 <Directory::exists()>:
c0013266:	83 ec 0c             	sub    esp,0xc
c0013269:	31 c0                	xor    eax,eax
c001326b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001326f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013276:	80 f9 19             	cmp    cl,0x19
c0013279:	77 24                	ja     c001329f <Directory::exists()+0x39>
c001327b:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0013282:	85 c9                	test   ecx,ecx
c0013284:	74 19                	je     c001329f <Directory::exists()+0x39>
c0013286:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001328c:	85 c9                	test   ecx,ecx
c001328e:	74 0f                	je     c001329f <Directory::exists()+0x39>
c0013290:	83 c2 0d             	add    edx,0xd
c0013293:	50                   	push   eax
c0013294:	50                   	push   eax
c0013295:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013297:	52                   	push   edx
c0013298:	51                   	push   ecx
c0013299:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001329c:	83 c4 10             	add    esp,0x10
c001329f:	83 c4 0c             	add    esp,0xc
c00132a2:	c3                   	ret    
c00132a3:	90                   	nop

c00132a4 <Directory::read(dirent*)>:
c00132a4:	83 ec 1c             	sub    esp,0x1c
c00132a7:	b8 0b 00 00 00       	mov    eax,0xb
c00132ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132b0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00132b7:	80 fa 19             	cmp    dl,0x19
c00132ba:	77 30                	ja     c00132ec <Directory::read(dirent*)+0x48>
c00132bc:	8b 14 95 20 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20e0]
c00132c3:	85 d2                	test   edx,edx
c00132c5:	74 25                	je     c00132ec <Directory::read(dirent*)+0x48>
c00132c7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132ce:	74 1c                	je     c00132ec <Directory::read(dirent*)+0x48>
c00132d0:	83 ec 0c             	sub    esp,0xc
c00132d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132d5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132d9:	52                   	push   edx
c00132da:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132de:	6a 00                	push   0x0
c00132e0:	68 10 01 00 00       	push   0x110
c00132e5:	51                   	push   ecx
c00132e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132e9:	83 c4 20             	add    esp,0x20
c00132ec:	83 c4 1c             	add    esp,0x1c
c00132ef:	c3                   	ret    

c00132f0 <Directory::create()>:
c00132f0:	83 ec 0c             	sub    esp,0xc
c00132f3:	b8 0b 00 00 00       	mov    eax,0xb
c00132f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013303:	80 f9 19             	cmp    cl,0x19
c0013306:	77 2f                	ja     c0013337 <Directory::create()+0x47>
c0013308:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c001330f:	85 c9                	test   ecx,ecx
c0013311:	74 24                	je     c0013337 <Directory::create()+0x47>
c0013313:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013319:	85 c9                	test   ecx,ecx
c001331b:	74 1a                	je     c0013337 <Directory::create()+0x47>
c001331d:	b8 06 00 00 00       	mov    eax,0x6
c0013322:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013326:	75 0f                	jne    c0013337 <Directory::create()+0x47>
c0013328:	83 c2 0d             	add    edx,0xd
c001332b:	50                   	push   eax
c001332c:	50                   	push   eax
c001332d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001332f:	52                   	push   edx
c0013330:	51                   	push   ecx
c0013331:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013334:	83 c4 10             	add    esp,0x10
c0013337:	83 c4 0c             	add    esp,0xc
c001333a:	c3                   	ret    
c001333b:	90                   	nop

c001333c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001333c:	b8 0a 00 00 00       	mov    eax,0xa
c0013341:	c3                   	ret    

c0013342 <Bus::Bus(char const*)>:
c0013342:	83 ec 0c             	sub    esp,0xc
c0013345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013349:	83 ec 08             	sub    esp,0x8
c001334c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013350:	50                   	push   eax
c0013351:	e8 88 09 00 00       	call   c0013cde <Device::Device(char const*)>
c0013356:	83 c4 10             	add    esp,0x10
c0013359:	ba dc a8 02 c0       	mov    edx,0xc002a8dc
c001335e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013362:	89 10                	mov    DWORD PTR [eax],edx
c0013364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013368:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013372:	90                   	nop
c0013373:	83 c4 0c             	add    esp,0xc
c0013376:	c3                   	ret    
c0013377:	90                   	nop

c0013378 <Bus::~Bus()>:
c0013378:	83 ec 0c             	sub    esp,0xc
c001337b:	ba dc a8 02 c0       	mov    edx,0xc002a8dc
c0013380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013384:	89 10                	mov    DWORD PTR [eax],edx
c0013386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001338a:	83 ec 0c             	sub    esp,0xc
c001338d:	50                   	push   eax
c001338e:	e8 15 06 00 00       	call   c00139a8 <Device::~Device()>
c0013393:	83 c4 10             	add    esp,0x10
c0013396:	90                   	nop
c0013397:	83 c4 0c             	add    esp,0xc
c001339a:	c3                   	ret    
c001339b:	90                   	nop

c001339c <Bus::~Bus()>:
c001339c:	83 ec 0c             	sub    esp,0xc
c001339f:	83 ec 0c             	sub    esp,0xc
c00133a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133a6:	e8 cd ff ff ff       	call   c0013378 <Bus::~Bus()>
c00133ab:	83 c4 10             	add    esp,0x10
c00133ae:	83 ec 08             	sub    esp,0x8
c00133b1:	68 58 01 00 00       	push   0x158
c00133b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133ba:	e8 0a f2 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c00133bf:	83 c4 10             	add    esp,0x10
c00133c2:	83 c4 0c             	add    esp,0xc
c00133c5:	c3                   	ret    

c00133c6 <Buzzer::Buzzer(char const*)>:
c00133c6:	83 ec 0c             	sub    esp,0xc
c00133c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133cd:	83 ec 08             	sub    esp,0x8
c00133d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133d4:	50                   	push   eax
c00133d5:	e8 04 09 00 00       	call   c0013cde <Device::Device(char const*)>
c00133da:	83 c4 10             	add    esp,0x10
c00133dd:	ba 08 a9 02 c0       	mov    edx,0xc002a908
c00133e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e6:	89 10                	mov    DWORD PTR [eax],edx
c00133e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ec:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00133f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fa:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013404:	90                   	nop
c0013405:	83 c4 0c             	add    esp,0xc
c0013408:	c3                   	ret    
c0013409:	90                   	nop

c001340a <Buzzer::~Buzzer()>:
c001340a:	83 ec 0c             	sub    esp,0xc
c001340d:	ba 08 a9 02 c0       	mov    edx,0xc002a908
c0013412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013416:	89 10                	mov    DWORD PTR [eax],edx
c0013418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341c:	83 ec 0c             	sub    esp,0xc
c001341f:	50                   	push   eax
c0013420:	e8 83 05 00 00       	call   c00139a8 <Device::~Device()>
c0013425:	83 c4 10             	add    esp,0x10
c0013428:	90                   	nop
c0013429:	83 c4 0c             	add    esp,0xc
c001342c:	c3                   	ret    
c001342d:	90                   	nop

c001342e <Buzzer::~Buzzer()>:
c001342e:	83 ec 0c             	sub    esp,0xc
c0013431:	83 ec 0c             	sub    esp,0xc
c0013434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013438:	e8 cd ff ff ff       	call   c001340a <Buzzer::~Buzzer()>
c001343d:	83 c4 10             	add    esp,0x10
c0013440:	83 ec 08             	sub    esp,0x8
c0013443:	68 5c 01 00 00       	push   0x15c
c0013448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001344c:	e8 78 f1 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0013451:	83 c4 10             	add    esp,0x10
c0013454:	83 c4 0c             	add    esp,0xc
c0013457:	c3                   	ret    

c0013458 <Buzzer::stop()>:
c0013458:	83 ec 14             	sub    esp,0x14
c001345b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001345f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013461:	6a 00                	push   0x0
c0013463:	50                   	push   eax
c0013464:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013467:	83 c4 1c             	add    esp,0x1c
c001346a:	c3                   	ret    

c001346b <beepThread(void*)>:
c001346b:	53                   	push   ebx
c001346c:	83 ec 08             	sub    esp,0x8
c001346f:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0013474:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013478:	48                   	dec    eax
c0013479:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001347e:	75 01                	jne    c0013481 <beepThread(void*)+0x16>
c0013480:	fb                   	sti    
c0013481:	50                   	push   eax
c0013482:	50                   	push   eax
c0013483:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013488:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001348e:	52                   	push   edx
c001348f:	50                   	push   eax
c0013490:	e8 dc a7 00 00       	call   c001dc71 <nanoSleep(unsigned long long)>
c0013495:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013498:	e8 bb ff ff ff       	call   c0013458 <Buzzer::stop()>
c001349d:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00134a5:	83 c4 18             	add    esp,0x18
c00134a8:	5b                   	pop    ebx
c00134a9:	e9 bf a6 00 00       	jmp    c001db6d <blockTask(TaskState)>

c00134ae <Buzzer::beep(int, int, bool)>:
c00134ae:	57                   	push   edi
c00134af:	56                   	push   esi
c00134b0:	53                   	push   ebx
c00134b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00134b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134bd:	52                   	push   edx
c00134be:	52                   	push   edx
c00134bf:	8b 06                	mov    eax,DWORD PTR [esi]
c00134c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134c5:	56                   	push   esi
c00134c6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134c9:	83 c4 10             	add    esp,0x10
c00134cc:	89 f8                	mov    eax,edi
c00134ce:	84 c0                	test   al,al
c00134d0:	74 1f                	je     c00134f1 <Buzzer::beep(int, int, bool)+0x43>
c00134d2:	50                   	push   eax
c00134d3:	50                   	push   eax
c00134d4:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00134da:	99                   	cdq    
c00134db:	52                   	push   edx
c00134dc:	50                   	push   eax
c00134dd:	e8 8f a7 00 00       	call   c001dc71 <nanoSleep(unsigned long long)>
c00134e2:	83 c4 10             	add    esp,0x10
c00134e5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00134e9:	5b                   	pop    ebx
c00134ea:	5e                   	pop    esi
c00134eb:	5f                   	pop    edi
c00134ec:	e9 67 ff ff ff       	jmp    c0013458 <Buzzer::stop()>
c00134f1:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00134f7:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00134fc:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013504:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013508:	c7 44 24 14 6b 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc001346b
c0013510:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013514:	5b                   	pop    ebx
c0013515:	5e                   	pop    esi
c0013516:	5f                   	pop    edi
c0013517:	e9 56 a2 00 00       	jmp    c001d772 <Process::createThread(void (*)(void*), void*, int)>

c001351c <User::loadClockSettings(int)>:
c001351c:	53                   	push   ebx
c001351d:	83 ec 14             	sub    esp,0x14
c0013520:	68 14 01 00 00       	push   0x114
c0013525:	e8 6f c0 ff ff       	call   c000f599 <malloc>
c001352a:	83 c4 0c             	add    esp,0xc
c001352d:	89 c3                	mov    ebx,eax
c001352f:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c0013535:	68 30 a9 02 c0       	push   0xc002a930
c001353a:	50                   	push   eax
c001353b:	e8 c0 f6 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c0013540:	58                   	pop    eax
c0013541:	5a                   	pop    edx
c0013542:	6a 01                	push   0x1
c0013544:	53                   	push   ebx
c0013545:	e8 1a f7 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c001354a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001354d:	e8 70 f7 ff ff       	call   c0012cc2 <File::close()>
c0013552:	83 c4 10             	add    esp,0x10
c0013555:	85 db                	test   ebx,ebx
c0013557:	74 0f                	je     c0013568 <User::loadClockSettings(int)+0x4c>
c0013559:	8b 03                	mov    eax,DWORD PTR [ebx]
c001355b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001355f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013562:	83 c4 08             	add    esp,0x8
c0013565:	5b                   	pop    ebx
c0013566:	ff e0                	jmp    eax
c0013568:	83 c4 08             	add    esp,0x8
c001356b:	5b                   	pop    ebx
c001356c:	c3                   	ret    
c001356d:	90                   	nop

c001356e <Clock::Clock(char const*)>:
c001356e:	83 ec 0c             	sub    esp,0xc
c0013571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013575:	83 ec 08             	sub    esp,0x8
c0013578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001357c:	50                   	push   eax
c001357d:	e8 5c 07 00 00       	call   c0013cde <Device::Device(char const*)>
c0013582:	83 c4 10             	add    esp,0x10
c0013585:	ba 58 a9 02 c0       	mov    edx,0xc002a958
c001358a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001358e:	89 10                	mov    DWORD PTR [eax],edx
c0013590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013594:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001359e:	90                   	nop
c001359f:	83 c4 0c             	add    esp,0xc
c00135a2:	c3                   	ret    
c00135a3:	90                   	nop

c00135a4 <Clock::~Clock()>:
c00135a4:	83 ec 0c             	sub    esp,0xc
c00135a7:	ba 58 a9 02 c0       	mov    edx,0xc002a958
c00135ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b0:	89 10                	mov    DWORD PTR [eax],edx
c00135b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b6:	83 ec 0c             	sub    esp,0xc
c00135b9:	50                   	push   eax
c00135ba:	e8 e9 03 00 00       	call   c00139a8 <Device::~Device()>
c00135bf:	83 c4 10             	add    esp,0x10
c00135c2:	90                   	nop
c00135c3:	83 c4 0c             	add    esp,0xc
c00135c6:	c3                   	ret    
c00135c7:	90                   	nop

c00135c8 <Clock::~Clock()>:
c00135c8:	83 ec 0c             	sub    esp,0xc
c00135cb:	83 ec 0c             	sub    esp,0xc
c00135ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d2:	e8 cd ff ff ff       	call   c00135a4 <Clock::~Clock()>
c00135d7:	83 c4 10             	add    esp,0x10
c00135da:	83 ec 08             	sub    esp,0x8
c00135dd:	68 58 01 00 00       	push   0x158
c00135e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135e6:	e8 de ef ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c00135eb:	83 c4 10             	add    esp,0x10
c00135ee:	83 c4 0c             	add    esp,0xc
c00135f1:	c3                   	ret    

c00135f2 <Clock::timeInSecondsLocal()>:
c00135f2:	53                   	push   ebx
c00135f3:	83 ec 14             	sub    esp,0x14
c00135f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00135fc:	50                   	push   eax
c00135fd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013600:	0f b6 0d 9c da 02 c0 	movzx  ecx,BYTE PTR ds:0xc002da9c
c0013607:	03 0d a0 da 02 c0    	add    ecx,DWORD PTR ds:0xc002daa0
c001360d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013613:	89 cb                	mov    ebx,ecx
c0013615:	c1 fb 1f             	sar    ebx,0x1f
c0013618:	01 c8                	add    eax,ecx
c001361a:	11 da                	adc    edx,ebx
c001361c:	83 c4 10             	add    esp,0x10
c001361f:	31 c9                	xor    ecx,ecx
c0013621:	80 3d 9d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da9d,0x0
c0013628:	74 05                	je     c001362f <Clock::timeInSecondsLocal()+0x3d>
c001362a:	b9 08 07 00 00       	mov    ecx,0x708
c001362f:	31 db                	xor    ebx,ebx
c0013631:	01 c8                	add    eax,ecx
c0013633:	11 da                	adc    edx,ebx
c0013635:	83 c4 08             	add    esp,0x8
c0013638:	5b                   	pop    ebx
c0013639:	c3                   	ret    

c001363a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001363a:	57                   	push   edi
c001363b:	56                   	push   esi
c001363c:	53                   	push   ebx
c001363d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013641:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013645:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013647:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001364b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001364e:	0f b6 05 9c da 02 c0 	movzx  eax,BYTE PTR ds:0xc002da9c
c0013655:	03 05 a0 da 02 c0    	add    eax,DWORD PTR ds:0xc002daa0
c001365b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013661:	99                   	cdq    
c0013662:	29 c6                	sub    esi,eax
c0013664:	19 d7                	sbb    edi,edx
c0013666:	89 f0                	mov    eax,esi
c0013668:	89 fa                	mov    edx,edi
c001366a:	31 f6                	xor    esi,esi
c001366c:	80 3d 9d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da9d,0x0
c0013673:	74 05                	je     c001367a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013675:	be 08 07 00 00       	mov    esi,0x708
c001367a:	31 ff                	xor    edi,edi
c001367c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013680:	29 f0                	sub    eax,esi
c0013682:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013686:	19 fa                	sbb    edx,edi
c0013688:	89 d8                	mov    eax,ebx
c001368a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001368e:	5b                   	pop    ebx
c001368f:	5e                   	pop    esi
c0013690:	5f                   	pop    edi
c0013691:	ff e0                	jmp    eax

c0013693 <datetimeToSeconds(datetime_t)>:
c0013693:	55                   	push   ebp
c0013694:	57                   	push   edi
c0013695:	56                   	push   esi
c0013696:	53                   	push   ebx
c0013697:	83 ec 14             	sub    esp,0x14
c001369a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001369e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00136a2:	89 d3                	mov    ebx,edx
c00136a4:	0f b6 c6             	movzx  eax,dh
c00136a7:	c1 eb 10             	shr    ebx,0x10
c00136aa:	48                   	dec    eax
c00136ab:	66 81 eb 6c 07       	sub    bx,0x76c
c00136b0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00136b4:	0f b6 f5             	movzx  esi,ch
c00136b7:	89 cf                	mov    edi,ecx
c00136b9:	6b f6 3c             	imul   esi,esi,0x3c
c00136bc:	c1 ef 10             	shr    edi,0x10
c00136bf:	0f b6 c9             	movzx  ecx,cl
c00136c2:	89 f8                	mov    eax,edi
c00136c4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136ca:	0f b6 f8             	movzx  edi,al
c00136cd:	0f b6 d2             	movzx  edx,dl
c00136d0:	01 fe                	add    esi,edi
c00136d2:	01 f1                	add    ecx,esi
c00136d4:	0f b7 f3             	movzx  esi,bx
c00136d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00136db:	c1 f9 1f             	sar    ecx,0x1f
c00136de:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00136e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00136e7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00136ec:	8b 0c 8d a0 a9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5660]
c00136f3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00136f7:	76 29                	jbe    c0013722 <datetimeToSeconds(datetime_t)+0x8f>
c00136f9:	f6 c3 03             	test   bl,0x3
c00136fc:	75 24                	jne    c0013722 <datetimeToSeconds(datetime_t)+0x8f>
c00136fe:	31 d2                	xor    edx,edx
c0013700:	bf 64 00 00 00       	mov    edi,0x64
c0013705:	89 d8                	mov    eax,ebx
c0013707:	66 f7 f7             	div    di
c001370a:	66 85 d2             	test   dx,dx
c001370d:	75 12                	jne    c0013721 <datetimeToSeconds(datetime_t)+0x8e>
c001370f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013715:	bf 90 01 00 00       	mov    edi,0x190
c001371a:	99                   	cdq    
c001371b:	f7 ff                	idiv   edi
c001371d:	85 d2                	test   edx,edx
c001371f:	75 01                	jne    c0013722 <datetimeToSeconds(datetime_t)+0x8f>
c0013721:	41                   	inc    ecx
c0013722:	66 83 fb 46          	cmp    bx,0x46
c0013726:	76 45                	jbe    c001376d <datetimeToSeconds(datetime_t)+0xda>
c0013728:	bb 46 00 00 00       	mov    ebx,0x46
c001372d:	bf 64 00 00 00       	mov    edi,0x64
c0013732:	bd 90 01 00 00       	mov    ebp,0x190
c0013737:	b8 6d 01 00 00       	mov    eax,0x16d
c001373c:	f6 c3 03             	test   bl,0x3
c001373f:	75 23                	jne    c0013764 <datetimeToSeconds(datetime_t)+0xd1>
c0013741:	89 d8                	mov    eax,ebx
c0013743:	99                   	cdq    
c0013744:	f7 ff                	idiv   edi
c0013746:	b8 6e 01 00 00       	mov    eax,0x16e
c001374b:	85 d2                	test   edx,edx
c001374d:	75 15                	jne    c0013764 <datetimeToSeconds(datetime_t)+0xd1>
c001374f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013755:	99                   	cdq    
c0013756:	f7 fd                	idiv   ebp
c0013758:	83 fa 01             	cmp    edx,0x1
c001375b:	19 c0                	sbb    eax,eax
c001375d:	f7 d0                	not    eax
c001375f:	05 6e 01 00 00       	add    eax,0x16e
c0013764:	01 c1                	add    ecx,eax
c0013766:	43                   	inc    ebx
c0013767:	39 f3                	cmp    ebx,esi
c0013769:	7c cc                	jl     c0013737 <datetimeToSeconds(datetime_t)+0xa4>
c001376b:	eb 35                	jmp    c00137a2 <datetimeToSeconds(datetime_t)+0x10f>
c001376d:	74 33                	je     c00137a2 <datetimeToSeconds(datetime_t)+0x10f>
c001376f:	b8 45 00 00 00       	mov    eax,0x45
c0013774:	89 c2                	mov    edx,eax
c0013776:	83 e2 03             	and    edx,0x3
c0013779:	39 f0                	cmp    eax,esi
c001377b:	7e 0f                	jle    c001378c <datetimeToSeconds(datetime_t)+0xf9>
c001377d:	83 fa 01             	cmp    edx,0x1
c0013780:	19 d2                	sbb    edx,edx
c0013782:	48                   	dec    eax
c0013783:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001378a:	eb e8                	jmp    c0013774 <datetimeToSeconds(datetime_t)+0xe1>
c001378c:	b8 6d 01 00 00       	mov    eax,0x16d
c0013791:	85 d2                	test   edx,edx
c0013793:	75 0b                	jne    c00137a0 <datetimeToSeconds(datetime_t)+0x10d>
c0013795:	66 83 fb 01          	cmp    bx,0x1
c0013799:	19 c0                	sbb    eax,eax
c001379b:	05 6e 01 00 00       	add    eax,0x16e
c00137a0:	29 c1                	sub    ecx,eax
c00137a2:	b8 80 51 01 00       	mov    eax,0x15180
c00137a7:	f7 e9                	imul   ecx
c00137a9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00137ad:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00137b1:	83 c4 14             	add    esp,0x14
c00137b4:	5b                   	pop    ebx
c00137b5:	5e                   	pop    esi
c00137b6:	5f                   	pop    edi
c00137b7:	5d                   	pop    ebp
c00137b8:	c3                   	ret    
c00137b9:	90                   	nop

c00137ba <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00137ba:	57                   	push   edi
c00137bb:	56                   	push   esi
c00137bc:	53                   	push   ebx
c00137bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137c1:	8b 06                	mov    eax,DWORD PTR [esi]
c00137c3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00137c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137ce:	e8 c0 fe ff ff       	call   c0013693 <datetimeToSeconds(datetime_t)>
c00137d3:	59                   	pop    ecx
c00137d4:	0f b6 0d 9c da 02 c0 	movzx  ecx,BYTE PTR ds:0xc002da9c
c00137db:	5b                   	pop    ebx
c00137dc:	03 0d a0 da 02 c0    	add    ecx,DWORD PTR ds:0xc002daa0
c00137e2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137e8:	89 cb                	mov    ebx,ecx
c00137ea:	c1 fb 1f             	sar    ebx,0x1f
c00137ed:	29 c8                	sub    eax,ecx
c00137ef:	19 da                	sbb    edx,ebx
c00137f1:	31 c9                	xor    ecx,ecx
c00137f3:	80 3d 9d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da9d,0x0
c00137fa:	74 05                	je     c0013801 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00137fc:	b9 08 07 00 00       	mov    ecx,0x708
c0013801:	31 db                	xor    ebx,ebx
c0013803:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013807:	29 c8                	sub    eax,ecx
c0013809:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001380d:	19 da                	sbb    edx,ebx
c001380f:	89 f8                	mov    eax,edi
c0013811:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013815:	5b                   	pop    ebx
c0013816:	5e                   	pop    esi
c0013817:	5f                   	pop    edi
c0013818:	ff e0                	jmp    eax

c001381a <secondsToDatetime(unsigned long long)>:
c001381a:	55                   	push   ebp
c001381b:	57                   	push   edi
c001381c:	56                   	push   esi
c001381d:	53                   	push   ebx
c001381e:	83 ec 1c             	sub    esp,0x1c
c0013821:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013825:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013829:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001382d:	6a 00                	push   0x0
c001382f:	68 80 51 01 00       	push   0x15180
c0013834:	55                   	push   ebp
c0013835:	57                   	push   edi
c0013836:	e8 a9 2e 01 00       	call   c00266e4 <__udivdi3>
c001383b:	83 c4 10             	add    esp,0x10
c001383e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013844:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013848:	6a 00                	push   0x0
c001384a:	68 80 51 01 00       	push   0x15180
c001384f:	55                   	push   ebp
c0013850:	57                   	push   edi
c0013851:	bf 10 0e 00 00       	mov    edi,0xe10
c0013856:	e8 89 2f 01 00       	call   c00267e4 <__umoddi3>
c001385b:	83 c4 10             	add    esp,0x10
c001385e:	99                   	cdq    
c001385f:	f7 ff                	idiv   edi
c0013861:	bf 3c 00 00 00       	mov    edi,0x3c
c0013866:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013869:	89 d0                	mov    eax,edx
c001386b:	99                   	cdq    
c001386c:	f7 ff                	idiv   edi
c001386e:	85 db                	test   ebx,ebx
c0013870:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013873:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013876:	79 11                	jns    c0013889 <secondsToDatetime(unsigned long long)+0x6f>
c0013878:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001387c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013882:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013887:	eb 07                	jmp    c0013890 <secondsToDatetime(unsigned long long)+0x76>
c0013889:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001388e:	89 d8                	mov    eax,ebx
c0013890:	bf b4 05 00 00       	mov    edi,0x5b4
c0013895:	99                   	cdq    
c0013896:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001389b:	f7 f9                	idiv   ecx
c001389d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00138a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138a6:	31 d2                	xor    edx,edx
c00138a8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00138b0:	01 c3                	add    ebx,eax
c00138b2:	89 d8                	mov    eax,ebx
c00138b4:	f7 f1                	div    ecx
c00138b6:	31 d2                	xor    edx,edx
c00138b8:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00138bb:	89 d8                	mov    eax,ebx
c00138bd:	f7 f7                	div    edi
c00138bf:	31 d2                	xor    edx,edx
c00138c1:	29 c1                	sub    ecx,eax
c00138c3:	89 d8                	mov    eax,ebx
c00138c5:	f7 f5                	div    ebp
c00138c7:	bd 6d 01 00 00       	mov    ebp,0x16d
c00138cc:	29 c1                	sub    ecx,eax
c00138ce:	31 d2                	xor    edx,edx
c00138d0:	89 c8                	mov    eax,ecx
c00138d2:	f7 f5                	div    ebp
c00138d4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00138d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138dd:	31 d2                	xor    edx,edx
c00138df:	89 c8                	mov    eax,ecx
c00138e1:	f7 f5                	div    ebp
c00138e3:	31 d2                	xor    edx,edx
c00138e5:	01 c3                	add    ebx,eax
c00138e7:	89 c8                	mov    eax,ecx
c00138e9:	f7 f7                	div    edi
c00138eb:	bf 99 00 00 00       	mov    edi,0x99
c00138f0:	29 c3                	sub    ebx,eax
c00138f2:	31 d2                	xor    edx,edx
c00138f4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00138fc:	29 c3                	sub    ebx,eax
c00138fe:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013901:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013904:	bb 05 00 00 00       	mov    ebx,0x5
c0013909:	83 c1 02             	add    ecx,0x2
c001390c:	89 c8                	mov    eax,ecx
c001390e:	f7 f7                	div    edi
c0013910:	31 d2                	xor    edx,edx
c0013912:	89 c7                	mov    edi,eax
c0013914:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001391a:	83 c0 02             	add    eax,0x2
c001391d:	f7 f3                	div    ebx
c001391f:	89 eb                	mov    ebx,ebp
c0013921:	29 c3                	sub    ebx,eax
c0013923:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013929:	88 1e                	mov    BYTE PTR [esi],bl
c001392b:	19 c0                	sbb    eax,eax
c001392d:	31 d2                	xor    edx,edx
c001392f:	83 e0 0c             	and    eax,0xc
c0013932:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013936:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001393e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013942:	83 f9 01             	cmp    ecx,0x1
c0013945:	0f 96 c2             	setbe  dl
c0013948:	41                   	inc    ecx
c0013949:	01 d0                	add    eax,edx
c001394b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001394e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013952:	83 c4 1c             	add    esp,0x1c
c0013955:	89 f0                	mov    eax,esi
c0013957:	5b                   	pop    ebx
c0013958:	5e                   	pop    esi
c0013959:	5f                   	pop    edi
c001395a:	5d                   	pop    ebp
c001395b:	c2 04 00             	ret    0x4

c001395e <Clock::timeInDatetimeLocal()>:
c001395e:	53                   	push   ebx
c001395f:	83 ec 14             	sub    esp,0x14
c0013962:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013966:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001396a:	e8 83 fc ff ff       	call   c00135f2 <Clock::timeInSecondsLocal()>
c001396f:	83 c4 0c             	add    esp,0xc
c0013972:	52                   	push   edx
c0013973:	50                   	push   eax
c0013974:	53                   	push   ebx
c0013975:	e8 a0 fe ff ff       	call   c001381a <secondsToDatetime(unsigned long long)>
c001397a:	89 d8                	mov    eax,ebx
c001397c:	83 c4 14             	add    esp,0x14
c001397f:	5b                   	pop    ebx
c0013980:	c2 04 00             	ret    0x4
c0013983:	90                   	nop

c0013984 <Device::hibernate()>:
c0013984:	c3                   	ret    
c0013985:	90                   	nop

c0013986 <Device::wake()>:
c0013986:	c3                   	ret    
c0013987:	90                   	nop

c0013988 <Device::detect()>:
c0013988:	c3                   	ret    
c0013989:	90                   	nop

c001398a <Device::disableLegacy()>:
c001398a:	c3                   	ret    
c001398b:	90                   	nop

c001398c <Device::powerSaving(PowerSavingLevel)>:
c001398c:	c3                   	ret    
c001398d:	90                   	nop

c001398e <DriverlessDevice::close(int, int, void*)>:
c001398e:	31 c0                	xor    eax,eax
c0013990:	c3                   	ret    
c0013991:	90                   	nop

c0013992 <DriverlessDevice::detect()>:
c0013992:	c3                   	ret    
c0013993:	90                   	nop

c0013994 <DriverlessDevice::open(int, int, void*)>:
c0013994:	83 ec 18             	sub    esp,0x18
c0013997:	68 d0 a9 02 c0       	push   0xc002a9d0
c001399c:	e8 6c 64 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c00139a1:	83 c8 ff             	or     eax,0xffffffff
c00139a4:	83 c4 1c             	add    esp,0x1c
c00139a7:	c3                   	ret    

c00139a8 <Device::~Device()>:
c00139a8:	ba 30 aa 02 c0       	mov    edx,0xc002aa30
c00139ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139b1:	89 10                	mov    DWORD PTR [eax],edx
c00139b3:	90                   	nop
c00139b4:	c3                   	ret    
c00139b5:	90                   	nop

c00139b6 <Device::~Device()>:
c00139b6:	83 ec 0c             	sub    esp,0xc
c00139b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00139bd:	e8 e6 ff ff ff       	call   c00139a8 <Device::~Device()>
c00139c2:	83 c4 04             	add    esp,0x4
c00139c5:	83 ec 08             	sub    esp,0x8
c00139c8:	68 58 01 00 00       	push   0x158
c00139cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139d1:	e8 f3 eb ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c00139d6:	83 c4 10             	add    esp,0x10
c00139d9:	83 c4 0c             	add    esp,0xc
c00139dc:	c3                   	ret    
c00139dd:	90                   	nop

c00139de <Device::findAndLoadDriver()>:
c00139de:	c7 44 24 04 ee a9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a9ee
c00139e6:	e9 b6 ec ff ff       	jmp    c00126a1 <Dbg::kprintf(char const*, ...)>
c00139eb:	90                   	nop

c00139ec <Device::preOpenPCI(PCIDeviceInfo)>:
c00139ec:	57                   	push   edi
c00139ed:	b9 09 00 00 00       	mov    ecx,0x9
c00139f2:	56                   	push   esi
c00139f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00139f7:	8d 74 24 10          	lea    esi,[esp+0x10]
c00139fb:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a05:	81 c7 18 01 00 00    	add    edi,0x118
c0013a0b:	fc                   	cld    
c0013a0c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a0e:	5e                   	pop    esi
c0013a0f:	5f                   	pop    edi
c0013a10:	c3                   	ret    
c0013a11:	90                   	nop

c0013a12 <Device::preOpenACPI(void*, char*, char*)>:
c0013a12:	57                   	push   edi
c0013a13:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013a18:	56                   	push   esi
c0013a19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a21:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013a2b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013a31:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013a37:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a3d:	b9 0e 00 00 00       	mov    ecx,0xe
c0013a42:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013a48:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013a4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a4e:	5e                   	pop    esi
c0013a4f:	5f                   	pop    edi
c0013a50:	c3                   	ret    
c0013a51:	90                   	nop

c0013a52 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a56:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a5b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a62:	75 0b                	jne    c0013a6f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a64:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a66:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a6a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a6d:	eb 1e                	jmp    c0013a8d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a6f:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0013a74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a7a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a80:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a82:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a8a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013a8d:	ff e0                	jmp    eax
c0013a8f:	90                   	nop

c0013a90 <Device::getParent()>:
c0013a90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a94:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013a9a:	c3                   	ret    
c0013a9b:	90                   	nop

c0013a9c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013a9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013aa0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013aa5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013aac:	75 0b                	jne    c0013ab9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013aae:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ab0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ab4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013ab7:	eb 1e                	jmp    c0013ad7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013ab9:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0013abe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ac4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013aca:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013acc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ad0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ad4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013ad7:	ff e0                	jmp    eax
c0013ad9:	90                   	nop

c0013ada <Device::addChild(Device*)>:
c0013ada:	53                   	push   ebx
c0013adb:	83 ec 08             	sub    esp,0x8
c0013ade:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ae2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ae6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013aec:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013af2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013af4:	85 d2                	test   edx,edx
c0013af6:	74 04                	je     c0013afc <Device::addChild(Device*)+0x22>
c0013af8:	89 d3                	mov    ebx,edx
c0013afa:	eb f6                	jmp    c0013af2 <Device::addChild(Device*)+0x18>
c0013afc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013aff:	83 ec 0c             	sub    esp,0xc
c0013b02:	6a 08                	push   0x8
c0013b04:	e8 90 ba ff ff       	call   c000f599 <malloc>
c0013b09:	89 03                	mov    DWORD PTR [ebx],eax
c0013b0b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b18:	83 c4 18             	add    esp,0x18
c0013b1b:	5b                   	pop    ebx
c0013b1c:	c3                   	ret    
c0013b1d:	90                   	nop

c0013b1e <Device::removeAllChildren()>:
c0013b1e:	56                   	push   esi
c0013b1f:	53                   	push   ebx
c0013b20:	52                   	push   edx
c0013b21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b25:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013b2b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b2e:	74 17                	je     c0013b47 <Device::removeAllChildren()+0x29>
c0013b30:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013b33:	85 c0                	test   eax,eax
c0013b35:	74 0c                	je     c0013b43 <Device::removeAllChildren()+0x25>
c0013b37:	83 ec 0c             	sub    esp,0xc
c0013b3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b3c:	50                   	push   eax
c0013b3d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013b40:	83 c4 10             	add    esp,0x10
c0013b43:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b45:	eb e4                	jmp    c0013b2b <Device::removeAllChildren()+0xd>
c0013b47:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b53:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b60:	58                   	pop    eax
c0013b61:	5b                   	pop    ebx
c0013b62:	5e                   	pop    esi
c0013b63:	c3                   	ret    

c0013b64 <Device::hibernateAll()>:
c0013b64:	53                   	push   ebx
c0013b65:	83 ec 14             	sub    esp,0x14
c0013b68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b6e:	53                   	push   ebx
c0013b6f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013b72:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b78:	83 c4 10             	add    esp,0x10
c0013b7b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b7e:	74 0f                	je     c0013b8f <Device::hibernateAll()+0x2b>
c0013b80:	83 ec 0c             	sub    esp,0xc
c0013b83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b86:	e8 d9 ff ff ff       	call   c0013b64 <Device::hibernateAll()>
c0013b8b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b8d:	eb e9                	jmp    c0013b78 <Device::hibernateAll()+0x14>
c0013b8f:	83 c4 08             	add    esp,0x8
c0013b92:	5b                   	pop    ebx
c0013b93:	c3                   	ret    

c0013b94 <Device::wakeAll()>:
c0013b94:	53                   	push   ebx
c0013b95:	83 ec 14             	sub    esp,0x14
c0013b98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b9e:	53                   	push   ebx
c0013b9f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013ba2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ba8:	83 c4 10             	add    esp,0x10
c0013bab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bae:	74 0f                	je     c0013bbf <Device::wakeAll()+0x2b>
c0013bb0:	83 ec 0c             	sub    esp,0xc
c0013bb3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bb6:	e8 d9 ff ff ff       	call   c0013b94 <Device::wakeAll()>
c0013bbb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bbd:	eb e9                	jmp    c0013ba8 <Device::wakeAll()+0x14>
c0013bbf:	83 c4 08             	add    esp,0x8
c0013bc2:	5b                   	pop    ebx
c0013bc3:	c3                   	ret    

c0013bc4 <Device::detectAll()>:
c0013bc4:	53                   	push   ebx
c0013bc5:	83 ec 14             	sub    esp,0x14
c0013bc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bce:	53                   	push   ebx
c0013bcf:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013bd2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bd8:	83 c4 10             	add    esp,0x10
c0013bdb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bde:	74 0f                	je     c0013bef <Device::detectAll()+0x2b>
c0013be0:	83 ec 0c             	sub    esp,0xc
c0013be3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013be6:	e8 d9 ff ff ff       	call   c0013bc4 <Device::detectAll()>
c0013beb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bed:	eb e9                	jmp    c0013bd8 <Device::detectAll()+0x14>
c0013bef:	83 c4 08             	add    esp,0x8
c0013bf2:	5b                   	pop    ebx
c0013bf3:	c3                   	ret    

c0013bf4 <Device::disableLegacyAll()>:
c0013bf4:	53                   	push   ebx
c0013bf5:	83 ec 14             	sub    esp,0x14
c0013bf8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bfc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bfe:	53                   	push   ebx
c0013bff:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c02:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c08:	83 c4 10             	add    esp,0x10
c0013c0b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c0e:	74 0f                	je     c0013c1f <Device::disableLegacyAll()+0x2b>
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c16:	e8 d9 ff ff ff       	call   c0013bf4 <Device::disableLegacyAll()>
c0013c1b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c1d:	eb e9                	jmp    c0013c08 <Device::disableLegacyAll()+0x14>
c0013c1f:	83 c4 08             	add    esp,0x8
c0013c22:	5b                   	pop    ebx
c0013c23:	c3                   	ret    

c0013c24 <Device::loadDriversForAll()>:
c0013c24:	53                   	push   ebx
c0013c25:	83 ec 08             	sub    esp,0x8
c0013c28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c2c:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013c33:	75 0c                	jne    c0013c41 <Device::loadDriversForAll()+0x1d>
c0013c35:	83 ec 0c             	sub    esp,0xc
c0013c38:	53                   	push   ebx
c0013c39:	e8 a0 fd ff ff       	call   c00139de <Device::findAndLoadDriver()>
c0013c3e:	83 c4 10             	add    esp,0x10
c0013c41:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c4a:	74 12                	je     c0013c5e <Device::loadDriversForAll()+0x3a>
c0013c4c:	83 ec 0c             	sub    esp,0xc
c0013c4f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c52:	e8 cd ff ff ff       	call   c0013c24 <Device::loadDriversForAll()>
c0013c57:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c59:	83 c4 10             	add    esp,0x10
c0013c5c:	eb e9                	jmp    c0013c47 <Device::loadDriversForAll()+0x23>
c0013c5e:	83 c4 08             	add    esp,0x8
c0013c61:	5b                   	pop    ebx
c0013c62:	c3                   	ret    
c0013c63:	90                   	nop

c0013c64 <Device::closeAll()>:
c0013c64:	53                   	push   ebx
c0013c65:	83 ec 08             	sub    esp,0x8
c0013c68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c6e:	6a 00                	push   0x0
c0013c70:	6a 00                	push   0x0
c0013c72:	6a 00                	push   0x0
c0013c74:	53                   	push   ebx
c0013c75:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c78:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c7e:	83 c4 10             	add    esp,0x10
c0013c81:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c84:	74 0f                	je     c0013c95 <Device::closeAll()+0x31>
c0013c86:	83 ec 0c             	sub    esp,0xc
c0013c89:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c8c:	e8 d3 ff ff ff       	call   c0013c64 <Device::closeAll()>
c0013c91:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c93:	eb e9                	jmp    c0013c7e <Device::closeAll()+0x1a>
c0013c95:	83 c4 08             	add    esp,0x8
c0013c98:	5b                   	pop    ebx
c0013c99:	c3                   	ret    

c0013c9a <Device::powerSavingAll(PowerSavingLevel)>:
c0013c9a:	56                   	push   esi
c0013c9b:	53                   	push   ebx
c0013c9c:	83 ec 0c             	sub    esp,0xc
c0013c9f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ca3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ca7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ca9:	56                   	push   esi
c0013caa:	53                   	push   ebx
c0013cab:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013cae:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cb4:	83 c4 10             	add    esp,0x10
c0013cb7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cba:	74 0f                	je     c0013ccb <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013cbc:	52                   	push   edx
c0013cbd:	52                   	push   edx
c0013cbe:	56                   	push   esi
c0013cbf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cc2:	e8 d3 ff ff ff       	call   c0013c9a <Device::powerSavingAll(PowerSavingLevel)>
c0013cc7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cc9:	eb e9                	jmp    c0013cb4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013ccb:	58                   	pop    eax
c0013ccc:	5b                   	pop    ebx
c0013ccd:	5e                   	pop    esi
c0013cce:	c3                   	ret    
c0013ccf:	90                   	nop

c0013cd0 <Device::setName(char const*)>:
c0013cd0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013cd8:	e9 2f cb fe ff       	jmp    c000080c <strcpy>
c0013cdd:	90                   	nop

c0013cde <Device::Device(char const*)>:
c0013cde:	83 ec 1c             	sub    esp,0x1c
c0013ce1:	ba 30 aa 02 c0       	mov    edx,0xc002aa30
c0013ce6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cea:	89 10                	mov    DWORD PTR [eax],edx
c0013cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cf0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013cfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cfe:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d0c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d1a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d24:	83 ec 08             	sub    esp,0x8
c0013d27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d2f:	e8 9c ff ff ff       	call   c0013cd0 <Device::setName(char const*)>
c0013d34:	83 c4 10             	add    esp,0x10
c0013d37:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013d3f:	83 ec 0c             	sub    esp,0xc
c0013d42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d46:	e8 4e b8 ff ff       	call   c000f599 <malloc>
c0013d4b:	83 c4 10             	add    esp,0x10
c0013d4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d5f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013d65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d69:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d79:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d8a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013d91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d95:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013d9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013da0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013daa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dae:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013db8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dbc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013dc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dca:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013dd4:	90                   	nop
c0013dd5:	83 c4 1c             	add    esp,0x1c
c0013dd8:	c3                   	ret    
c0013dd9:	90                   	nop

c0013dda <Device::getName()>:
c0013dda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013dde:	05 d0 00 00 00       	add    eax,0xd0
c0013de3:	c3                   	ret    

c0013de4 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013de4:	83 ec 0c             	sub    esp,0xc
c0013de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013deb:	83 ec 08             	sub    esp,0x8
c0013dee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013df2:	50                   	push   eax
c0013df3:	e8 e6 fe ff ff       	call   c0013cde <Device::Device(char const*)>
c0013df8:	83 c4 10             	add    esp,0x10
c0013dfb:	ba 5c aa 02 c0       	mov    edx,0xc002aa5c
c0013e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e04:	89 10                	mov    DWORD PTR [eax],edx
c0013e06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e0a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e14:	90                   	nop
c0013e15:	83 c4 0c             	add    esp,0xc
c0013e18:	c3                   	ret    
c0013e19:	90                   	nop

c0013e1a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e1a:	57                   	push   edi
c0013e1b:	56                   	push   esi
c0013e1c:	53                   	push   ebx
c0013e1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e21:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e29:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013e2f:	75 0c                	jne    c0013e3d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013e31:	52                   	push   edx
c0013e32:	52                   	push   edx
c0013e33:	53                   	push   ebx
c0013e34:	56                   	push   esi
c0013e35:	e8 e6 47 01 00       	call   c0028620 <LinkedList<Device>::addElement(Device*)>
c0013e3a:	83 c4 10             	add    esp,0x10
c0013e3d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e43:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e46:	74 12                	je     c0013e5a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013e48:	50                   	push   eax
c0013e49:	57                   	push   edi
c0013e4a:	56                   	push   esi
c0013e4b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e4e:	e8 c7 ff ff ff       	call   c0013e1a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e53:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e55:	83 c4 10             	add    esp,0x10
c0013e58:	eb e9                	jmp    c0013e43 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013e5a:	5b                   	pop    ebx
c0013e5b:	5e                   	pop    esi
c0013e5c:	5f                   	pop    edi
c0013e5d:	c3                   	ret    

c0013e5e <getDevicesOfType(DeviceType)>:
c0013e5e:	53                   	push   ebx
c0013e5f:	83 ec 14             	sub    esp,0x14
c0013e62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e66:	53                   	push   ebx
c0013e67:	e8 90 48 01 00       	call   c00286fc <LinkedList<Device>::LinkedList()>
c0013e6c:	83 c4 0c             	add    esp,0xc
c0013e6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e73:	53                   	push   ebx
c0013e74:	ff 35 28 d9 02 c0    	push   DWORD PTR ds:0xc002d928
c0013e7a:	e8 9b ff ff ff       	call   c0013e1a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e7f:	89 d8                	mov    eax,ebx
c0013e81:	83 c4 18             	add    esp,0x18
c0013e84:	5b                   	pop    ebx
c0013e85:	c2 04 00             	ret    0x4

c0013e88 <HardDiskController::HardDiskController(char const*)>:
c0013e88:	83 ec 0c             	sub    esp,0xc
c0013e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e8f:	83 ec 08             	sub    esp,0x8
c0013e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e96:	50                   	push   eax
c0013e97:	e8 42 fe ff ff       	call   c0013cde <Device::Device(char const*)>
c0013e9c:	83 c4 10             	add    esp,0x10
c0013e9f:	ba 88 aa 02 c0       	mov    edx,0xc002aa88
c0013ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea8:	89 10                	mov    DWORD PTR [eax],edx
c0013eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eae:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013eb8:	90                   	nop
c0013eb9:	83 c4 0c             	add    esp,0xc
c0013ebc:	c3                   	ret    
c0013ebd:	90                   	nop

c0013ebe <HardDiskController::~HardDiskController()>:
c0013ebe:	83 ec 0c             	sub    esp,0xc
c0013ec1:	ba 88 aa 02 c0       	mov    edx,0xc002aa88
c0013ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eca:	89 10                	mov    DWORD PTR [eax],edx
c0013ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed0:	83 ec 0c             	sub    esp,0xc
c0013ed3:	50                   	push   eax
c0013ed4:	e8 cf fa ff ff       	call   c00139a8 <Device::~Device()>
c0013ed9:	83 c4 10             	add    esp,0x10
c0013edc:	90                   	nop
c0013edd:	83 c4 0c             	add    esp,0xc
c0013ee0:	c3                   	ret    
c0013ee1:	90                   	nop

c0013ee2 <HardDiskController::~HardDiskController()>:
c0013ee2:	83 ec 0c             	sub    esp,0xc
c0013ee5:	83 ec 0c             	sub    esp,0xc
c0013ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eec:	e8 cd ff ff ff       	call   c0013ebe <HardDiskController::~HardDiskController()>
c0013ef1:	83 c4 10             	add    esp,0x10
c0013ef4:	83 ec 08             	sub    esp,0x8
c0013ef7:	68 58 01 00 00       	push   0x158
c0013efc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f00:	e8 c4 e6 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0013f05:	83 c4 10             	add    esp,0x10
c0013f08:	83 c4 0c             	add    esp,0xc
c0013f0b:	c3                   	ret    

c0013f0c <PhysicalDisk::eject()>:
c0013f0c:	83 c8 ff             	or     eax,0xffffffff
c0013f0f:	c3                   	ret    

c0013f10 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f10:	83 ec 0c             	sub    esp,0xc
c0013f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f17:	83 ec 08             	sub    esp,0x8
c0013f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f1e:	50                   	push   eax
c0013f1f:	e8 ba fd ff ff       	call   c0013cde <Device::Device(char const*)>
c0013f24:	83 c4 10             	add    esp,0x10
c0013f27:	ba b4 aa 02 c0       	mov    edx,0xc002aab4
c0013f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f30:	89 10                	mov    DWORD PTR [eax],edx
c0013f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f36:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f41:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f4c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f5a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f5e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f68:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013f72:	90                   	nop
c0013f73:	83 c4 0c             	add    esp,0xc
c0013f76:	c3                   	ret    
c0013f77:	90                   	nop

c0013f78 <PhysicalDisk::startCache()>:
c0013f78:	56                   	push   esi
c0013f79:	53                   	push   ebx
c0013f7a:	83 ec 10             	sub    esp,0x10
c0013f7d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f81:	6a 44                	push   0x44
c0013f83:	e8 11 b6 ff ff       	call   c000f599 <malloc>
c0013f88:	89 c6                	mov    esi,eax
c0013f8a:	58                   	pop    eax
c0013f8b:	5a                   	pop    edx
c0013f8c:	53                   	push   ebx
c0013f8d:	56                   	push   esi
c0013f8e:	e8 71 28 00 00       	call   c0016804 <VCache::VCache(PhysicalDisk*)>
c0013f93:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013f99:	83 c4 14             	add    esp,0x14
c0013f9c:	5b                   	pop    ebx
c0013f9d:	5e                   	pop    esi
c0013f9e:	c3                   	ret    
c0013f9f:	90                   	nop

c0013fa0 <PhysicalDisk::~PhysicalDisk()>:
c0013fa0:	83 ec 0c             	sub    esp,0xc
c0013fa3:	ba b4 aa 02 c0       	mov    edx,0xc002aab4
c0013fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fac:	89 10                	mov    DWORD PTR [eax],edx
c0013fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb2:	83 ec 0c             	sub    esp,0xc
c0013fb5:	50                   	push   eax
c0013fb6:	e8 ed f9 ff ff       	call   c00139a8 <Device::~Device()>
c0013fbb:	83 c4 10             	add    esp,0x10
c0013fbe:	90                   	nop
c0013fbf:	83 c4 0c             	add    esp,0xc
c0013fc2:	c3                   	ret    
c0013fc3:	90                   	nop

c0013fc4 <PhysicalDisk::~PhysicalDisk()>:
c0013fc4:	83 ec 0c             	sub    esp,0xc
c0013fc7:	83 ec 0c             	sub    esp,0xc
c0013fca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fce:	e8 cd ff ff ff       	call   c0013fa0 <PhysicalDisk::~PhysicalDisk()>
c0013fd3:	83 c4 10             	add    esp,0x10
c0013fd6:	83 ec 08             	sub    esp,0x8
c0013fd9:	68 6c 01 00 00       	push   0x16c
c0013fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fe2:	e8 e2 e5 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0013fe7:	83 c4 10             	add    esp,0x10
c0013fea:	83 c4 0c             	add    esp,0xc
c0013fed:	c3                   	ret    

c0013fee <FPU::FPU(char const*)>:
c0013fee:	83 ec 0c             	sub    esp,0xc
c0013ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff5:	83 ec 08             	sub    esp,0x8
c0013ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ffc:	50                   	push   eax
c0013ffd:	e8 dc fc ff ff       	call   c0013cde <Device::Device(char const*)>
c0014002:	83 c4 10             	add    esp,0x10
c0014005:	ba f8 aa 02 c0       	mov    edx,0xc002aaf8
c001400a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001400e:	89 10                	mov    DWORD PTR [eax],edx
c0014010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014014:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001401e:	90                   	nop
c001401f:	83 c4 0c             	add    esp,0xc
c0014022:	c3                   	ret    
c0014023:	90                   	nop

c0014024 <FPU::~FPU()>:
c0014024:	83 ec 0c             	sub    esp,0xc
c0014027:	ba f8 aa 02 c0       	mov    edx,0xc002aaf8
c001402c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014030:	89 10                	mov    DWORD PTR [eax],edx
c0014032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014036:	83 ec 0c             	sub    esp,0xc
c0014039:	50                   	push   eax
c001403a:	e8 69 f9 ff ff       	call   c00139a8 <Device::~Device()>
c001403f:	83 c4 10             	add    esp,0x10
c0014042:	90                   	nop
c0014043:	83 c4 0c             	add    esp,0xc
c0014046:	c3                   	ret    
c0014047:	90                   	nop

c0014048 <FPU::~FPU()>:
c0014048:	83 ec 0c             	sub    esp,0xc
c001404b:	83 ec 0c             	sub    esp,0xc
c001404e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014052:	e8 cd ff ff ff       	call   c0014024 <FPU::~FPU()>
c0014057:	83 c4 10             	add    esp,0x10
c001405a:	83 ec 08             	sub    esp,0x8
c001405d:	68 58 01 00 00       	push   0x158
c0014062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014066:	e8 5e e5 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c001406b:	83 c4 10             	add    esp,0x10
c001406e:	83 c4 0c             	add    esp,0xc
c0014071:	c3                   	ret    

c0014072 <setupFPU()>:
c0014072:	53                   	push   ebx
c0014073:	83 ec 08             	sub    esp,0x8
c0014076:	8b 15 28 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d928
c001407c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014083:	74 19                	je     c001409e <setupFPU()+0x2c>
c0014085:	83 ec 0c             	sub    esp,0xc
c0014088:	68 58 01 00 00       	push   0x158
c001408d:	e8 07 b5 ff ff       	call   c000f599 <malloc>
c0014092:	89 c3                	mov    ebx,eax
c0014094:	89 04 24             	mov    DWORD PTR [esp],eax
c0014097:	e8 c6 11 01 00       	call   c0025262 <AVX::AVX()>
c001409c:	eb 5b                	jmp    c00140f9 <setupFPU()+0x87>
c001409e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00140a4:	84 c0                	test   al,al
c00140a6:	79 19                	jns    c00140c1 <setupFPU()+0x4f>
c00140a8:	83 ec 0c             	sub    esp,0xc
c00140ab:	68 58 01 00 00       	push   0x158
c00140b0:	e8 e4 b4 ff ff       	call   c000f599 <malloc>
c00140b5:	89 c3                	mov    ebx,eax
c00140b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00140ba:	e8 c9 12 01 00       	call   c0025388 <SSE::SSE()>
c00140bf:	eb 38                	jmp    c00140f9 <setupFPU()+0x87>
c00140c1:	a8 20                	test   al,0x20
c00140c3:	74 19                	je     c00140de <setupFPU()+0x6c>
c00140c5:	83 ec 0c             	sub    esp,0xc
c00140c8:	68 58 01 00 00       	push   0x158
c00140cd:	e8 c7 b4 ff ff       	call   c000f599 <malloc>
c00140d2:	89 c3                	mov    ebx,eax
c00140d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00140d7:	e8 16 12 01 00       	call   c00252f2 <MMX::MMX()>
c00140dc:	eb 1b                	jmp    c00140f9 <setupFPU()+0x87>
c00140de:	a8 10                	test   al,0x10
c00140e0:	74 1c                	je     c00140fe <setupFPU()+0x8c>
c00140e2:	83 ec 0c             	sub    esp,0xc
c00140e5:	68 58 01 00 00       	push   0x158
c00140ea:	e8 aa b4 ff ff       	call   c000f599 <malloc>
c00140ef:	89 c3                	mov    ebx,eax
c00140f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00140f4:	e8 1d 13 01 00       	call   c0025416 <x87::x87()>
c00140f9:	83 c4 10             	add    esp,0x10
c00140fc:	eb 24                	jmp    c0014122 <setupFPU()+0xb0>
c00140fe:	83 e0 ef             	and    eax,0xffffffef
c0014101:	83 ec 0c             	sub    esp,0xc
c0014104:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001410a:	68 e4 aa 02 c0       	push   0xc002aae4
c001410f:	e8 8d e5 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014114:	0f 20 c0             	mov    eax,cr0
c0014117:	83 c8 04             	or     eax,0x4
c001411a:	0f 22 c0             	mov    cr0,eax
c001411d:	31 db                	xor    ebx,ebx
c001411f:	83 c4 10             	add    esp,0x10
c0014122:	89 d8                	mov    eax,ebx
c0014124:	83 c4 08             	add    esp,0x8
c0014127:	5b                   	pop    ebx
c0014128:	c3                   	ret    
c0014129:	90                   	nop

c001412a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001412a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001412e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014132:	c1 e0 04             	shl    eax,0x4
c0014135:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014139:	8d 50 10             	lea    edx,[eax+0x10]
c001413c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014142:	74 08                	je     c001414c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014144:	83 c0 04             	add    eax,0x4
c0014147:	39 d0                	cmp    eax,edx
c0014149:	75 f1                	jne    c001413c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001414b:	c3                   	ret    
c001414c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014156:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014160:	eb e2                	jmp    c0014144 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014162 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014162:	57                   	push   edi
c0014163:	31 c0                	xor    eax,eax
c0014165:	56                   	push   esi
c0014166:	53                   	push   ebx
c0014167:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001416b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001416f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014173:	89 da                	mov    edx,ebx
c0014175:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014179:	c1 e2 04             	shl    edx,0x4
c001417c:	01 ca                	add    edx,ecx
c001417e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014186:	74 16                	je     c001419e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014188:	40                   	inc    eax
c0014189:	83 f8 04             	cmp    eax,0x4
c001418c:	75 f0                	jne    c001417e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001418e:	c7 44 24 10 28 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab28
c0014196:	5b                   	pop    ebx
c0014197:	5e                   	pop    esi
c0014198:	5f                   	pop    edi
c0014199:	e9 6f 5c 00 00       	jmp    c0019e0d <Krnl::panic(char const*)>
c001419e:	8d 04 98             	lea    eax,[eax+ebx*4]
c00141a1:	8d 04 81             	lea    eax,[ecx+eax*4]
c00141a4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00141aa:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00141b0:	5b                   	pop    ebx
c00141b1:	5e                   	pop    esi
c00141b2:	5f                   	pop    edi
c00141b3:	c3                   	ret    

c00141b4 <doubleFault(regs*, void*)>:
c00141b4:	55                   	push   ebp
c00141b5:	89 e5                	mov    ebp,esp
c00141b7:	83 ec 08             	sub    esp,0x8
c00141ba:	83 ec 0c             	sub    esp,0xc
c00141bd:	68 35 ab 02 c0       	push   0xc002ab35
c00141c2:	e8 46 5c 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c00141c7:	83 c4 10             	add    esp,0x10
c00141ca:	90                   	nop
c00141cb:	c9                   	leave  
c00141cc:	c3                   	ret    
c00141cd:	90                   	nop

c00141ce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141ce:	56                   	push   esi
c00141cf:	53                   	push   ebx
c00141d0:	50                   	push   eax
c00141d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00141d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141d9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00141de:	75 35                	jne    c0014215 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00141e0:	8d 43 20             	lea    eax,[ebx+0x20]
c00141e3:	31 d2                	xor    edx,edx
c00141e5:	89 c1                	mov    ecx,eax
c00141e7:	c1 e1 04             	shl    ecx,0x4
c00141ea:	01 f1                	add    ecx,esi
c00141ec:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00141f4:	74 3e                	je     c0014234 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00141f6:	42                   	inc    edx
c00141f7:	83 fa 04             	cmp    edx,0x4
c00141fa:	75 f0                	jne    c00141ec <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00141fc:	83 ec 0c             	sub    esp,0xc
c00141ff:	68 4f ab 02 c0       	push   0xc002ab4f
c0014204:	e8 04 5c 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0014209:	83 c4 10             	add    esp,0x10
c001420c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014211:	5a                   	pop    edx
c0014212:	5b                   	pop    ebx
c0014213:	5e                   	pop    esi
c0014214:	c3                   	ret    
c0014215:	83 ec 0c             	sub    esp,0xc
c0014218:	56                   	push   esi
c0014219:	e8 bc fb ff ff       	call   c0013dda <Device::getName()>
c001421e:	83 c4 10             	add    esp,0x10
c0014221:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014224:	75 ba                	jne    c00141e0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014226:	83 fb 0f             	cmp    ebx,0xf
c0014229:	7f 29                	jg     c0014254 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001422b:	0f b6 9b 80 cb 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3480]
c0014232:	eb ac                	jmp    c00141e0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014234:	8d 04 82             	lea    eax,[edx+eax*4]
c0014237:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001423b:	8d 04 86             	lea    eax,[esi+eax*4]
c001423e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014244:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014248:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001424e:	89 d8                	mov    eax,ebx
c0014250:	5a                   	pop    edx
c0014251:	5b                   	pop    ebx
c0014252:	5e                   	pop    esi
c0014253:	c3                   	ret    
c0014254:	83 ec 0c             	sub    esp,0xc
c0014257:	68 42 ab 02 c0       	push   0xc002ab42
c001425c:	e8 ac 5b 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0014261:	83 c4 10             	add    esp,0x10
c0014264:	e9 77 ff ff ff       	jmp    c00141e0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014269:	90                   	nop

c001426a <InterruptController::clearAllHandlers(int, bool)>:
c001426a:	56                   	push   esi
c001426b:	53                   	push   ebx
c001426c:	52                   	push   edx
c001426d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014271:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014275:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001427a:	75 61                	jne    c00142dd <InterruptController::clearAllHandlers(int, bool)+0x73>
c001427c:	8d 46 20             	lea    eax,[esi+0x20]
c001427f:	c1 e6 04             	shl    esi,0x4
c0014282:	c1 e0 04             	shl    eax,0x4
c0014285:	01 de                	add    esi,ebx
c0014287:	01 d8                	add    eax,ebx
c0014289:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014293:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001429d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00142a7:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00142b1:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00142bb:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00142c5:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00142cf:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00142d9:	58                   	pop    eax
c00142da:	5b                   	pop    ebx
c00142db:	5e                   	pop    esi
c00142dc:	c3                   	ret    
c00142dd:	83 ec 0c             	sub    esp,0xc
c00142e0:	53                   	push   ebx
c00142e1:	e8 f4 fa ff ff       	call   c0013dda <Device::getName()>
c00142e6:	83 c4 10             	add    esp,0x10
c00142e9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142ec:	75 8e                	jne    c001427c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00142ee:	83 fe 0f             	cmp    esi,0xf
c00142f1:	7f 09                	jg     c00142fc <InterruptController::clearAllHandlers(int, bool)+0x92>
c00142f3:	0f b6 b6 80 cb 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3480]
c00142fa:	eb 80                	jmp    c001427c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00142fc:	83 ec 0c             	sub    esp,0xc
c00142ff:	68 5c ab 02 c0       	push   0xc002ab5c
c0014304:	e8 04 5b 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0014309:	83 c4 10             	add    esp,0x10
c001430c:	e9 6b ff ff ff       	jmp    c001427c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014311:	90                   	nop

c0014312 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014312:	56                   	push   esi
c0014313:	53                   	push   ebx
c0014314:	52                   	push   edx
c0014315:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014319:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001431d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014322:	75 3a                	jne    c001435e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014324:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014328:	8d 50 20             	lea    edx,[eax+0x20]
c001432b:	c1 e2 04             	shl    edx,0x4
c001432e:	8d 04 16             	lea    eax,[esi+edx*1]
c0014331:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014335:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001433b:	74 0b                	je     c0014348 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001433d:	83 c0 04             	add    eax,0x4
c0014340:	39 d0                	cmp    eax,edx
c0014342:	75 f1                	jne    c0014335 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014344:	58                   	pop    eax
c0014345:	5b                   	pop    ebx
c0014346:	5e                   	pop    esi
c0014347:	c3                   	ret    
c0014348:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014352:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001435c:	eb df                	jmp    c001433d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001435e:	83 ec 0c             	sub    esp,0xc
c0014361:	56                   	push   esi
c0014362:	e8 73 fa ff ff       	call   c0013dda <Device::getName()>
c0014367:	83 c4 10             	add    esp,0x10
c001436a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001436d:	75 b5                	jne    c0014324 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001436f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014374:	7f 11                	jg     c0014387 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014376:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001437a:	0f b6 80 80 cb 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3480]
c0014381:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014385:	eb 9d                	jmp    c0014324 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014387:	83 ec 0c             	sub    esp,0xc
c001438a:	68 69 ab 02 c0       	push   0xc002ab69
c001438f:	e8 79 5a 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0014394:	83 c4 10             	add    esp,0x10
c0014397:	eb 8b                	jmp    c0014324 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014399 <nmiHandler(regs*, void*)>:
c0014399:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001439e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143a2:	e9 59 a9 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00143a7 <int_handler>:
c00143a7:	55                   	push   ebp
c00143a8:	57                   	push   edi
c00143a9:	56                   	push   esi
c00143aa:	53                   	push   ebx
c00143ab:	83 ec 0c             	sub    esp,0xc
c00143ae:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00143b2:	80 3d 64 04 03 c0 00 	cmp    BYTE PTR ds:0xc0030464,0x0
c00143b9:	74 0b                	je     c00143c6 <int_handler+0x1f>
c00143bb:	fa                   	cli    
c00143bc:	f4                   	hlt    
c00143bd:	80 3d 64 04 03 c0 00 	cmp    BYTE PTR ds:0xc0030464,0x0
c00143c4:	75 f5                	jne    c00143bb <int_handler+0x14>
c00143c6:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00143cb:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00143ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143d4:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00143da:	8d 43 e0             	lea    eax,[ebx-0x20]
c00143dd:	83 f8 17             	cmp    eax,0x17
c00143e0:	77 13                	ja     c00143f5 <int_handler+0x4e>
c00143e2:	83 ec 08             	sub    esp,0x8
c00143e5:	8b 17                	mov    edx,DWORD PTR [edi]
c00143e7:	8d 43 e0             	lea    eax,[ebx-0x20]
c00143ea:	0f b6 c0             	movzx  eax,al
c00143ed:	50                   	push   eax
c00143ee:	57                   	push   edi
c00143ef:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00143f2:	83 c4 10             	add    esp,0x10
c00143f5:	83 c3 15             	add    ebx,0x15
c00143f8:	c1 e3 04             	shl    ebx,0x4
c00143fb:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00143ff:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014406:	31 db                	xor    ebx,ebx
c0014408:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001440c:	85 c0                	test   eax,eax
c001440e:	74 13                	je     c0014423 <int_handler+0x7c>
c0014410:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014413:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014417:	74 1c                	je     c0014435 <int_handler+0x8e>
c0014419:	83 ec 08             	sub    esp,0x8
c001441c:	52                   	push   edx
c001441d:	56                   	push   esi
c001441e:	ff d0                	call   eax
c0014420:	83 c4 10             	add    esp,0x10
c0014423:	43                   	inc    ebx
c0014424:	83 fb 04             	cmp    ebx,0x4
c0014427:	75 df                	jne    c0014408 <int_handler+0x61>
c0014429:	83 c4 0c             	add    esp,0xc
c001442c:	31 c0                	xor    eax,eax
c001442e:	5b                   	pop    ebx
c001442f:	31 d2                	xor    edx,edx
c0014431:	5e                   	pop    esi
c0014432:	5f                   	pop    edi
c0014433:	5d                   	pop    ebp
c0014434:	c3                   	ret    
c0014435:	83 ec 08             	sub    esp,0x8
c0014438:	52                   	push   edx
c0014439:	56                   	push   esi
c001443a:	ff d0                	call   eax
c001443c:	83 c4 10             	add    esp,0x10
c001443f:	83 c4 0c             	add    esp,0xc
c0014442:	5b                   	pop    ebx
c0014443:	5e                   	pop    esi
c0014444:	5f                   	pop    edi
c0014445:	5d                   	pop    ebp
c0014446:	c3                   	ret    
c0014447:	90                   	nop

c0014448 <InterruptController::InterruptController(char const*)>:
c0014448:	83 ec 1c             	sub    esp,0x1c
c001444b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001444f:	83 ec 08             	sub    esp,0x8
c0014452:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014456:	50                   	push   eax
c0014457:	e8 82 f8 ff ff       	call   c0013cde <Device::Device(char const*)>
c001445c:	83 c4 10             	add    esp,0x10
c001445f:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c0014464:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014468:	89 10                	mov    DWORD PTR [eax],edx
c001446a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001446e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014478:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014480:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014488:	7f 5e                	jg     c00144e8 <InterruptController::InterruptController(char const*)+0xa0>
c001448a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014492:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014497:	7f 49                	jg     c00144e2 <InterruptController::InterruptController(char const*)+0x9a>
c0014499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001449d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144a1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144ac:	01 ca                	add    edx,ecx
c00144ae:	83 c2 54             	add    edx,0x54
c00144b1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00144b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144c1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144cc:	01 ca                	add    edx,ecx
c00144ce:	81 c2 54 04 00 00    	add    edx,0x454
c00144d4:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00144dc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00144e0:	eb b0                	jmp    c0014492 <InterruptController::InterruptController(char const*)+0x4a>
c00144e2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00144e6:	eb 98                	jmp    c0014480 <InterruptController::InterruptController(char const*)+0x38>
c00144e8:	90                   	nop
c00144e9:	83 c4 1c             	add    esp,0x1c
c00144ec:	c3                   	ret    
c00144ed:	90                   	nop

c00144ee <InterruptController::~InterruptController()>:
c00144ee:	83 ec 0c             	sub    esp,0xc
c00144f1:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c00144f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144fa:	89 10                	mov    DWORD PTR [eax],edx
c00144fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014500:	83 ec 0c             	sub    esp,0xc
c0014503:	50                   	push   eax
c0014504:	e8 9f f4 ff ff       	call   c00139a8 <Device::~Device()>
c0014509:	83 c4 10             	add    esp,0x10
c001450c:	90                   	nop
c001450d:	83 c4 0c             	add    esp,0xc
c0014510:	c3                   	ret    
c0014511:	90                   	nop

c0014512 <InterruptController::~InterruptController()>:
c0014512:	83 ec 0c             	sub    esp,0xc
c0014515:	83 ec 0c             	sub    esp,0xc
c0014518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001451c:	e8 cd ff ff ff       	call   c00144ee <InterruptController::~InterruptController()>
c0014521:	83 c4 10             	add    esp,0x10
c0014524:	83 ec 08             	sub    esp,0x8
c0014527:	68 58 21 00 00       	push   0x2158
c001452c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014530:	e8 94 e0 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0014535:	83 c4 10             	add    esp,0x10
c0014538:	83 c4 0c             	add    esp,0xc
c001453b:	c3                   	ret    

c001453c <displayDebugInfo(regs*)>:
c001453c:	55                   	push   ebp
c001453d:	57                   	push   edi
c001453e:	56                   	push   esi
c001453f:	53                   	push   ebx
c0014540:	83 ec 24             	sub    esp,0x24
c0014543:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014547:	0f 20 c2             	mov    edx,cr0
c001454a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001454e:	0f 20 d7             	mov    edi,cr2
c0014551:	0f 20 de             	mov    esi,cr3
c0014554:	0f 20 e5             	mov    ebp,cr4
c0014557:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001455a:	68 76 ab 02 c0       	push   0xc002ab76
c001455f:	e8 3d e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014564:	59                   	pop    ecx
c0014565:	58                   	pop    eax
c0014566:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014569:	68 81 ab 02 c0       	push   0xc002ab81
c001456e:	e8 2e e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014573:	58                   	pop    eax
c0014574:	5a                   	pop    edx
c0014575:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014578:	68 8c ab 02 c0       	push   0xc002ab8c
c001457d:	e8 1f e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014582:	59                   	pop    ecx
c0014583:	58                   	pop    eax
c0014584:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014587:	68 97 ab 02 c0       	push   0xc002ab97
c001458c:	e8 10 e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014591:	58                   	pop    eax
c0014592:	5a                   	pop    edx
c0014593:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014596:	68 a2 ab 02 c0       	push   0xc002aba2
c001459b:	e8 01 e1 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00145a0:	59                   	pop    ecx
c00145a1:	58                   	pop    eax
c00145a2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00145a5:	68 ad ab 02 c0       	push   0xc002abad
c00145aa:	e8 f2 e0 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00145af:	58                   	pop    eax
c00145b0:	5a                   	pop    edx
c00145b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145b4:	68 b8 ab 02 c0       	push   0xc002abb8
c00145b9:	e8 e3 e0 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00145be:	59                   	pop    ecx
c00145bf:	58                   	pop    eax
c00145c0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00145c3:	68 c3 ab 02 c0       	push   0xc002abc3
c00145c8:	e8 d4 e0 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00145cd:	58                   	pop    eax
c00145ce:	5a                   	pop    edx
c00145cf:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00145d2:	68 ce ab 02 c0       	push   0xc002abce
c00145d7:	e8 c5 e0 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00145dc:	59                   	pop    ecx
c00145dd:	58                   	pop    eax
c00145de:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00145e1:	68 dd ab 02 c0       	push   0xc002abdd
c00145e6:	e8 b6 e0 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00145eb:	58                   	pop    eax
c00145ec:	5a                   	pop    edx
c00145ed:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00145f0:	68 e8 ab 02 c0       	push   0xc002abe8
c00145f5:	e8 a7 e0 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00145fa:	59                   	pop    ecx
c00145fb:	58                   	pop    eax
c00145fc:	57                   	push   edi
c00145fd:	68 f3 ab 02 c0       	push   0xc002abf3
c0014602:	e8 9a e0 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014607:	58                   	pop    eax
c0014608:	5a                   	pop    edx
c0014609:	56                   	push   esi
c001460a:	68 fe ab 02 c0       	push   0xc002abfe
c001460f:	e8 8d e0 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014614:	59                   	pop    ecx
c0014615:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001461a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014620:	e8 06 bd ff ff       	call   c001032b <setActiveTerminal(VgaText*)>
c0014625:	58                   	pop    eax
c0014626:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014629:	5a                   	pop    edx
c001462a:	c1 e0 05             	shl    eax,0x5
c001462d:	05 e0 c8 02 c0       	add    eax,0xc002c8e0
c0014632:	50                   	push   eax
c0014633:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014638:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001463e:	e8 f5 c1 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0014643:	59                   	pop    ecx
c0014644:	58                   	pop    eax
c0014645:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001464a:	68 09 ac 02 c0       	push   0xc002ac09
c001464f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014655:	e8 de c1 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001465a:	58                   	pop    eax
c001465b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014660:	5a                   	pop    edx
c0014661:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014664:	83 c0 0c             	add    eax,0xc
c0014667:	50                   	push   eax
c0014668:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001466d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014673:	e8 c0 c1 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0014678:	59                   	pop    ecx
c0014679:	58                   	pop    eax
c001467a:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001467f:	68 12 ac 02 c0       	push   0xc002ac12
c0014684:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001468a:	e8 a9 c1 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001468f:	58                   	pop    eax
c0014690:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014695:	5a                   	pop    edx
c0014696:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014699:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001469f:	e8 4e c1 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c00146a4:	59                   	pop    ecx
c00146a5:	58                   	pop    eax
c00146a6:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00146ab:	68 1a ac 02 c0       	push   0xc002ac1a
c00146b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b6:	e8 7d c1 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c00146bb:	58                   	pop    eax
c00146bc:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00146c1:	5a                   	pop    edx
c00146c2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00146c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146cb:	e8 22 c1 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c00146d0:	59                   	pop    ecx
c00146d1:	58                   	pop    eax
c00146d2:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00146d7:	68 22 ac 02 c0       	push   0xc002ac22
c00146dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e2:	e8 51 c1 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c00146e7:	58                   	pop    eax
c00146e8:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00146ed:	5a                   	pop    edx
c00146ee:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00146f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f7:	e8 f6 c0 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c00146fc:	59                   	pop    ecx
c00146fd:	58                   	pop    eax
c00146fe:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014703:	68 2a ac 02 c0       	push   0xc002ac2a
c0014708:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470e:	e8 25 c1 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0014713:	58                   	pop    eax
c0014714:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014719:	5a                   	pop    edx
c001471a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001471d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014723:	e8 ca c0 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c0014728:	59                   	pop    ecx
c0014729:	58                   	pop    eax
c001472a:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001472f:	68 32 ac 02 c0       	push   0xc002ac32
c0014734:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001473a:	e8 f9 c0 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001473f:	58                   	pop    eax
c0014740:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014745:	5a                   	pop    edx
c0014746:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014749:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474f:	e8 9e c0 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c0014754:	59                   	pop    ecx
c0014755:	58                   	pop    eax
c0014756:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001475b:	68 3a ac 02 c0       	push   0xc002ac3a
c0014760:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014766:	e8 cd c0 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001476b:	58                   	pop    eax
c001476c:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014771:	5a                   	pop    edx
c0014772:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014775:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001477b:	e8 72 c0 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c0014780:	59                   	pop    ecx
c0014781:	58                   	pop    eax
c0014782:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014787:	68 42 ac 02 c0       	push   0xc002ac42
c001478c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014792:	e8 a1 c0 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0014797:	58                   	pop    eax
c0014798:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001479d:	5a                   	pop    edx
c001479e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147a2:	52                   	push   edx
c00147a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a9:	e8 44 c0 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c00147ae:	59                   	pop    ecx
c00147af:	58                   	pop    eax
c00147b0:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00147b5:	68 4b ac 02 c0       	push   0xc002ac4b
c00147ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c0:	e8 73 c0 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c00147c5:	58                   	pop    eax
c00147c6:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00147cb:	5a                   	pop    edx
c00147cc:	57                   	push   edi
c00147cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d3:	e8 1a c0 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c00147d8:	59                   	pop    ecx
c00147d9:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00147de:	5f                   	pop    edi
c00147df:	68 53 ac 02 c0       	push   0xc002ac53
c00147e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ea:	e8 49 c0 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c00147ef:	58                   	pop    eax
c00147f0:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00147f5:	5a                   	pop    edx
c00147f6:	56                   	push   esi
c00147f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fd:	e8 f0 bf ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c0014802:	59                   	pop    ecx
c0014803:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014808:	5e                   	pop    esi
c0014809:	68 5b ac 02 c0       	push   0xc002ac5b
c001480e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014814:	e8 1f c0 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0014819:	5f                   	pop    edi
c001481a:	58                   	pop    eax
c001481b:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014820:	55                   	push   ebp
c0014821:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014827:	e8 c6 bf ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c001482c:	58                   	pop    eax
c001482d:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014832:	5a                   	pop    edx
c0014833:	68 63 ac 02 c0       	push   0xc002ac63
c0014838:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483e:	e8 f5 bf ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0014843:	0f 21 c0             	mov    eax,db0
c0014846:	59                   	pop    ecx
c0014847:	5e                   	pop    esi
c0014848:	50                   	push   eax
c0014849:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001484e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014854:	e8 99 bf ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c0014859:	5f                   	pop    edi
c001485a:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001485f:	5d                   	pop    ebp
c0014860:	68 6c ac 02 c0       	push   0xc002ac6c
c0014865:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486b:	e8 c8 bf ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0014870:	0f 21 c8             	mov    eax,db1
c0014873:	5a                   	pop    edx
c0014874:	59                   	pop    ecx
c0014875:	50                   	push   eax
c0014876:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001487b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014881:	e8 6c bf ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c0014886:	5e                   	pop    esi
c0014887:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001488c:	5f                   	pop    edi
c001488d:	68 74 ac 02 c0       	push   0xc002ac74
c0014892:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014898:	e8 9b bf ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001489d:	0f 21 d0             	mov    eax,db2
c00148a0:	5d                   	pop    ebp
c00148a1:	5a                   	pop    edx
c00148a2:	50                   	push   eax
c00148a3:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00148a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ae:	e8 3f bf ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c00148b3:	59                   	pop    ecx
c00148b4:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00148b9:	5e                   	pop    esi
c00148ba:	68 7c ac 02 c0       	push   0xc002ac7c
c00148bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c5:	e8 6e bf ff ff       	call   c0010838 <VgaText::puts(char const*)>
c00148ca:	0f 21 d8             	mov    eax,db3
c00148cd:	5f                   	pop    edi
c00148ce:	5d                   	pop    ebp
c00148cf:	50                   	push   eax
c00148d0:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00148d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148db:	e8 12 bf ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c00148e0:	58                   	pop    eax
c00148e1:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00148e6:	5a                   	pop    edx
c00148e7:	68 84 ac 02 c0       	push   0xc002ac84
c00148ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f2:	e8 41 bf ff ff       	call   c0010838 <VgaText::puts(char const*)>
c00148f7:	0f 21 f0             	mov    eax,db6
c00148fa:	59                   	pop    ecx
c00148fb:	5e                   	pop    esi
c00148fc:	50                   	push   eax
c00148fd:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014902:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014908:	e8 e5 be ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c001490d:	5f                   	pop    edi
c001490e:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014913:	5d                   	pop    ebp
c0014914:	68 8c ac 02 c0       	push   0xc002ac8c
c0014919:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491f:	e8 14 bf ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0014924:	0f 21 f8             	mov    eax,db7
c0014927:	5a                   	pop    edx
c0014928:	59                   	pop    ecx
c0014929:	50                   	push   eax
c001492a:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001492f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014935:	e8 b8 be ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c001493a:	5e                   	pop    esi
c001493b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001493e:	e8 43 86 00 00       	call   c001cf86 <Thr::getDriverNameFromAddress(unsigned long)>
c0014943:	83 c4 10             	add    esp,0x10
c0014946:	85 c0                	test   eax,eax
c0014948:	74 7d                	je     c00149c7 <displayDebugInfo(regs*)+0x48b>
c001494a:	89 c6                	mov    esi,eax
c001494c:	50                   	push   eax
c001494d:	50                   	push   eax
c001494e:	56                   	push   esi
c001494f:	68 94 ac 02 c0       	push   0xc002ac94
c0014954:	e8 48 dd ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014959:	5a                   	pop    edx
c001495a:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001495f:	59                   	pop    ecx
c0014960:	68 a2 ac 02 c0       	push   0xc002aca2
c0014965:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001496b:	e8 c8 be ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0014970:	5f                   	pop    edi
c0014971:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014976:	5d                   	pop    ebp
c0014977:	56                   	push   esi
c0014978:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001497e:	e8 b5 be ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0014983:	58                   	pop    eax
c0014984:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0014989:	5a                   	pop    edx
c001498a:	68 ae ac 02 c0       	push   0xc002acae
c001498f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014995:	e8 9e be ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001499a:	59                   	pop    ecx
c001499b:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00149a0:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00149a6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149a9:	e8 0f 86 00 00       	call   c001cfbd <Thr::getDriverOffsetFromAddress(unsigned long)>
c00149ae:	5b                   	pop    ebx
c00149af:	5d                   	pop    ebp
c00149b0:	50                   	push   eax
c00149b1:	57                   	push   edi
c00149b2:	e8 3b be ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c00149b7:	58                   	pop    eax
c00149b8:	5a                   	pop    edx
c00149b9:	56                   	push   esi
c00149ba:	68 ba ac 02 c0       	push   0xc002acba
c00149bf:	e8 dd dc ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00149c4:	83 c4 10             	add    esp,0x10
c00149c7:	fa                   	cli    
c00149c8:	f4                   	hlt    
c00149c9:	eb fe                	jmp    c00149c9 <displayDebugInfo(regs*)+0x48d>

c00149cb <x87EmulHandler(regs*, void*)>:
c00149cb:	83 ec 0c             	sub    esp,0xc
c00149ce:	0f 20 c2             	mov    edx,cr0
c00149d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149d6:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00149da:	75 4b                	jne    c0014a27 <x87EmulHandler(regs*, void*)+0x5c>
c00149dc:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00149e1:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00149e7:	85 c0                	test   eax,eax
c00149e9:	74 05                	je     c00149f0 <x87EmulHandler(regs*, void*)+0x25>
c00149eb:	83 e2 08             	and    edx,0x8
c00149ee:	75 17                	jne    c0014a07 <x87EmulHandler(regs*, void*)+0x3c>
c00149f0:	83 ec 0c             	sub    esp,0xc
c00149f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149f7:	e8 5b a9 00 00       	call   c001f357 <Vm::x87Handler(regs*)>
c00149fc:	83 c4 10             	add    esp,0x10
c00149ff:	84 c0                	test   al,al
c0014a01:	74 24                	je     c0014a27 <x87EmulHandler(regs*, void*)+0x5c>
c0014a03:	83 c4 0c             	add    esp,0xc
c0014a06:	c3                   	ret    
c0014a07:	83 ec 0c             	sub    esp,0xc
c0014a0a:	68 e0 ac 02 c0       	push   0xc002ace0
c0014a0f:	e8 8d dc ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014a14:	0f 06                	clts   
c0014a16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a1b:	83 c4 10             	add    esp,0x10
c0014a1e:	a3 a8 da 02 c0       	mov    ds:0xc002daa8,eax
c0014a23:	83 c4 0c             	add    esp,0xc
c0014a26:	c3                   	ret    
c0014a27:	83 ec 0c             	sub    esp,0xc
c0014a2a:	68 ca ac 02 c0       	push   0xc002acca
c0014a2f:	e8 6d dc ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014a34:	5a                   	pop    edx
c0014a35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a39:	e8 fe fa ff ff       	call   c001453c <displayDebugInfo(regs*)>

c0014a3e <gpFault(regs*, void*)>:
c0014a3e:	53                   	push   ebx
c0014a3f:	83 ec 14             	sub    esp,0x14
c0014a42:	c7 05 a4 da 02 c0 30 e8 01 c0 	mov    DWORD PTR ds:0xc002daa4,0xc001e830
c0014a4c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a50:	53                   	push   ebx
c0014a51:	e8 da 9d 00 00       	call   c001e830 <Vm::faultHandler(regs*)>
c0014a56:	83 c4 10             	add    esp,0x10
c0014a59:	84 c0                	test   al,al
c0014a5b:	74 05                	je     c0014a62 <gpFault(regs*, void*)+0x24>
c0014a5d:	83 c4 08             	add    esp,0x8
c0014a60:	5b                   	pop    ebx
c0014a61:	c3                   	ret    
c0014a62:	83 ec 0c             	sub    esp,0xc
c0014a65:	68 ed ac 02 c0       	push   0xc002aced
c0014a6a:	e8 32 dc ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014a6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a72:	e8 c5 fa ff ff       	call   c001453c <displayDebugInfo(regs*)>

c0014a77 <pgFault(regs*, void*)>:
c0014a77:	83 ec 18             	sub    esp,0x18
c0014a7a:	68 08 ad 02 c0       	push   0xc002ad08
c0014a7f:	e8 1d dc ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014a84:	0f 20 d0             	mov    eax,cr2
c0014a87:	5a                   	pop    edx
c0014a88:	59                   	pop    ecx
c0014a89:	50                   	push   eax
c0014a8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a8f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a92:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014a98:	e8 2d d7 ff ff       	call   c00121ca <VAS::tryLoadBackOffDisk(unsigned long)>
c0014a9d:	83 c4 10             	add    esp,0x10
c0014aa0:	84 c0                	test   al,al
c0014aa2:	74 04                	je     c0014aa8 <pgFault(regs*, void*)+0x31>
c0014aa4:	83 c4 0c             	add    esp,0xc
c0014aa7:	c3                   	ret    
c0014aa8:	83 ec 0c             	sub    esp,0xc
c0014aab:	68 12 ad 02 c0       	push   0xc002ad12
c0014ab0:	e8 ec db ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014ab5:	58                   	pop    eax
c0014ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014aba:	e8 7d fa ff ff       	call   c001453c <displayDebugInfo(regs*)>

c0014abf <otherISRHandler(regs*, void*)>:
c0014abf:	53                   	push   ebx
c0014ac0:	83 ec 0c             	sub    esp,0xc
c0014ac3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ac7:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014aca:	50                   	push   eax
c0014acb:	50                   	push   eax
c0014acc:	68 1f ad 02 c0       	push   0xc002ad1f
c0014ad1:	e8 cb db ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014ad6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ad9:	e8 5e fa ff ff       	call   c001453c <displayDebugInfo(regs*)>

c0014ade <opcodeFault(regs*, void*)>:
c0014ade:	55                   	push   ebp
c0014adf:	89 e5                	mov    ebp,esp
c0014ae1:	56                   	push   esi
c0014ae2:	53                   	push   ebx
c0014ae3:	83 ec 40             	sub    esp,0x40
c0014ae6:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0014aeb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014af1:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014af7:	84 c0                	test   al,al
c0014af9:	74 24                	je     c0014b1f <opcodeFault(regs*, void*)+0x41>
c0014afb:	83 ec 0c             	sub    esp,0xc
c0014afe:	68 3c ad 02 c0       	push   0xc002ad3c
c0014b03:	e8 99 db ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014b08:	83 c4 10             	add    esp,0x10
c0014b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b0e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b11:	8d 50 19             	lea    edx,[eax+0x19]
c0014b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b17:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b1a:	e9 d5 05 00 00       	jmp    c00150f4 <opcodeFault(regs*, void*)+0x616>
c0014b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b22:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b25:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014b28:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014b2c:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b33:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b36:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014b39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b3c:	8a 00                	mov    al,BYTE PTR [eax]
c0014b3e:	3c f0                	cmp    al,0xf0
c0014b40:	75 17                	jne    c0014b59 <opcodeFault(regs*, void*)+0x7b>
c0014b42:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b48:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b4b:	8d 50 01             	lea    edx,[eax+0x1]
c0014b4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b51:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b54:	e9 da 00 00 00       	jmp    c0014c33 <opcodeFault(regs*, void*)+0x155>
c0014b59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b5c:	8a 00                	mov    al,BYTE PTR [eax]
c0014b5e:	3c f2                	cmp    al,0xf2
c0014b60:	74 09                	je     c0014b6b <opcodeFault(regs*, void*)+0x8d>
c0014b62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b65:	8a 00                	mov    al,BYTE PTR [eax]
c0014b67:	3c f3                	cmp    al,0xf3
c0014b69:	75 1b                	jne    c0014b86 <opcodeFault(regs*, void*)+0xa8>
c0014b6b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b6f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b75:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b78:	8d 50 01             	lea    edx,[eax+0x1]
c0014b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b7e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b81:	e9 ad 00 00 00       	jmp    c0014c33 <opcodeFault(regs*, void*)+0x155>
c0014b86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b89:	8a 00                	mov    al,BYTE PTR [eax]
c0014b8b:	3c 66                	cmp    al,0x66
c0014b8d:	75 1f                	jne    c0014bae <opcodeFault(regs*, void*)+0xd0>
c0014b8f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b93:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014b97:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b9d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ba0:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ba9:	e9 85 00 00 00       	jmp    c0014c33 <opcodeFault(regs*, void*)+0x155>
c0014bae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb1:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb3:	3c 67                	cmp    al,0x67
c0014bb5:	75 18                	jne    c0014bcf <opcodeFault(regs*, void*)+0xf1>
c0014bb7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bbb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bc4:	8d 50 01             	lea    edx,[eax+0x1]
c0014bc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bcd:	eb 64                	jmp    c0014c33 <opcodeFault(regs*, void*)+0x155>
c0014bcf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bd2:	8a 00                	mov    al,BYTE PTR [eax]
c0014bd4:	3c 2e                	cmp    al,0x2e
c0014bd6:	74 09                	je     c0014be1 <opcodeFault(regs*, void*)+0x103>
c0014bd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bdb:	8a 00                	mov    al,BYTE PTR [eax]
c0014bdd:	3c 3e                	cmp    al,0x3e
c0014bdf:	75 18                	jne    c0014bf9 <opcodeFault(regs*, void*)+0x11b>
c0014be1:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014be5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014be8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014beb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bee:	8d 50 01             	lea    edx,[eax+0x1]
c0014bf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bf7:	eb 3a                	jmp    c0014c33 <opcodeFault(regs*, void*)+0x155>
c0014bf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bfc:	8a 00                	mov    al,BYTE PTR [eax]
c0014bfe:	3c 36                	cmp    al,0x36
c0014c00:	74 1b                	je     c0014c1d <opcodeFault(regs*, void*)+0x13f>
c0014c02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c05:	8a 00                	mov    al,BYTE PTR [eax]
c0014c07:	3c 26                	cmp    al,0x26
c0014c09:	74 12                	je     c0014c1d <opcodeFault(regs*, void*)+0x13f>
c0014c0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c0e:	8a 00                	mov    al,BYTE PTR [eax]
c0014c10:	3c 64                	cmp    al,0x64
c0014c12:	74 09                	je     c0014c1d <opcodeFault(regs*, void*)+0x13f>
c0014c14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c17:	8a 00                	mov    al,BYTE PTR [eax]
c0014c19:	3c 65                	cmp    al,0x65
c0014c1b:	75 16                	jne    c0014c33 <opcodeFault(regs*, void*)+0x155>
c0014c1d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c21:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c27:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c2a:	8d 50 01             	lea    edx,[eax+0x1]
c0014c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c30:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c36:	8a 00                	mov    al,BYTE PTR [eax]
c0014c38:	3c 0f                	cmp    al,0xf
c0014c3a:	0f 85 ad 00 00 00    	jne    c0014ced <opcodeFault(regs*, void*)+0x20f>
c0014c40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c43:	40                   	inc    eax
c0014c44:	8a 00                	mov    al,BYTE PTR [eax]
c0014c46:	3c c2                	cmp    al,0xc2
c0014c48:	74 0e                	je     c0014c58 <opcodeFault(regs*, void*)+0x17a>
c0014c4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c4d:	40                   	inc    eax
c0014c4e:	8a 00                	mov    al,BYTE PTR [eax]
c0014c50:	3c c3                	cmp    al,0xc3
c0014c52:	0f 85 95 00 00 00    	jne    c0014ced <opcodeFault(regs*, void*)+0x20f>
c0014c58:	83 ec 0c             	sub    esp,0xc
c0014c5b:	68 5f ad 02 c0       	push   0xc002ad5f
c0014c60:	e8 3c da ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0014c65:	83 c4 10             	add    esp,0x10
c0014c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c6b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c6e:	8d 50 01             	lea    edx,[eax+0x1]
c0014c71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c74:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c77:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c7d:	8a 00                	mov    al,BYTE PTR [eax]
c0014c7f:	8d 50 fe             	lea    edx,[eax-0x2]
c0014c82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c85:	88 10                	mov    BYTE PTR [eax],dl
c0014c87:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014c8a:	50                   	push   eax
c0014c8b:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014c8e:	50                   	push   eax
c0014c8f:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014c92:	50                   	push   eax
c0014c93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014c96:	e8 8b 48 00 00       	call   c0019526 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014c9b:	83 c4 10             	add    esp,0x10
c0014c9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ca4:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ca7:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014caa:	01 d0                	add    eax,edx
c0014cac:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014caf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cb5:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014cb8:	48                   	dec    eax
c0014cb9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014cbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbf:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014cc2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc8:	83 ec 04             	sub    esp,0x4
c0014ccb:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014cce:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014cd1:	50                   	push   eax
c0014cd2:	e8 dd b4 fe ff       	call   c00001b4 <voodooXADD>
c0014cd7:	83 c4 10             	add    esp,0x10
c0014cda:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014cdd:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014ce0:	01 c2                	add    edx,eax
c0014ce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ce8:	e9 07 04 00 00       	jmp    c00150f4 <opcodeFault(regs*, void*)+0x616>
c0014ced:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf0:	8a 00                	mov    al,BYTE PTR [eax]
c0014cf2:	3c 0f                	cmp    al,0xf
c0014cf4:	0f 85 8b 01 00 00    	jne    c0014e85 <opcodeFault(regs*, void*)+0x3a7>
c0014cfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cfd:	40                   	inc    eax
c0014cfe:	8a 00                	mov    al,BYTE PTR [eax]
c0014d00:	3c c7                	cmp    al,0xc7
c0014d02:	0f 86 7d 01 00 00    	jbe    c0014e85 <opcodeFault(regs*, void*)+0x3a7>
c0014d08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d0b:	40                   	inc    eax
c0014d0c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d0e:	3c cf                	cmp    al,0xcf
c0014d10:	0f 87 6f 01 00 00    	ja     c0014e85 <opcodeFault(regs*, void*)+0x3a7>
c0014d16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d19:	40                   	inc    eax
c0014d1a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d1c:	83 c0 38             	add    eax,0x38
c0014d1f:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014d22:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d26:	75 0b                	jne    c0014d33 <opcodeFault(regs*, void*)+0x255>
c0014d28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d2e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d31:	eb 75                	jmp    c0014da8 <opcodeFault(regs*, void*)+0x2ca>
c0014d33:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d37:	75 0b                	jne    c0014d44 <opcodeFault(regs*, void*)+0x266>
c0014d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d3c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d3f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d42:	eb 64                	jmp    c0014da8 <opcodeFault(regs*, void*)+0x2ca>
c0014d44:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d48:	75 0b                	jne    c0014d55 <opcodeFault(regs*, void*)+0x277>
c0014d4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d50:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d53:	eb 53                	jmp    c0014da8 <opcodeFault(regs*, void*)+0x2ca>
c0014d55:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d59:	75 0b                	jne    c0014d66 <opcodeFault(regs*, void*)+0x288>
c0014d5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d61:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d64:	eb 42                	jmp    c0014da8 <opcodeFault(regs*, void*)+0x2ca>
c0014d66:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d6a:	75 0b                	jne    c0014d77 <opcodeFault(regs*, void*)+0x299>
c0014d6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014d72:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d75:	eb 31                	jmp    c0014da8 <opcodeFault(regs*, void*)+0x2ca>
c0014d77:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d7b:	75 0b                	jne    c0014d88 <opcodeFault(regs*, void*)+0x2aa>
c0014d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d80:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014d83:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d86:	eb 20                	jmp    c0014da8 <opcodeFault(regs*, void*)+0x2ca>
c0014d88:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d8c:	75 0b                	jne    c0014d99 <opcodeFault(regs*, void*)+0x2bb>
c0014d8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d91:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014d94:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d97:	eb 0f                	jmp    c0014da8 <opcodeFault(regs*, void*)+0x2ca>
c0014d99:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014d9d:	75 09                	jne    c0014da8 <opcodeFault(regs*, void*)+0x2ca>
c0014d9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014da5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014da8:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014dac:	74 10                	je     c0014dbe <opcodeFault(regs*, void*)+0x2e0>
c0014dae:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014db5:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014dbc:	eb 2d                	jmp    c0014deb <opcodeFault(regs*, void*)+0x30d>
c0014dbe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014dc1:	c1 e0 18             	shl    eax,0x18
c0014dc4:	89 c2                	mov    edx,eax
c0014dc6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014dc9:	c1 e0 08             	shl    eax,0x8
c0014dcc:	25 00 00 ff 00       	and    eax,0xff0000
c0014dd1:	09 c2                	or     edx,eax
c0014dd3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014dd6:	c1 e8 08             	shr    eax,0x8
c0014dd9:	25 00 ff 00 00       	and    eax,0xff00
c0014dde:	09 c2                	or     edx,eax
c0014de0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014de3:	c1 e8 18             	shr    eax,0x18
c0014de6:	09 d0                	or     eax,edx
c0014de8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014deb:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014def:	75 0b                	jne    c0014dfc <opcodeFault(regs*, void*)+0x31e>
c0014df1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014df7:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014dfa:	eb 75                	jmp    c0014e71 <opcodeFault(regs*, void*)+0x393>
c0014dfc:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e00:	75 0b                	jne    c0014e0d <opcodeFault(regs*, void*)+0x32f>
c0014e02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e05:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e08:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014e0b:	eb 64                	jmp    c0014e71 <opcodeFault(regs*, void*)+0x393>
c0014e0d:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e11:	75 0b                	jne    c0014e1e <opcodeFault(regs*, void*)+0x340>
c0014e13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e16:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e19:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e1c:	eb 53                	jmp    c0014e71 <opcodeFault(regs*, void*)+0x393>
c0014e1e:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e22:	75 0b                	jne    c0014e2f <opcodeFault(regs*, void*)+0x351>
c0014e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e27:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e2a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014e2d:	eb 42                	jmp    c0014e71 <opcodeFault(regs*, void*)+0x393>
c0014e2f:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e33:	75 0b                	jne    c0014e40 <opcodeFault(regs*, void*)+0x362>
c0014e35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e38:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e3b:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014e3e:	eb 31                	jmp    c0014e71 <opcodeFault(regs*, void*)+0x393>
c0014e40:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e44:	75 0b                	jne    c0014e51 <opcodeFault(regs*, void*)+0x373>
c0014e46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e49:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e4c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014e4f:	eb 20                	jmp    c0014e71 <opcodeFault(regs*, void*)+0x393>
c0014e51:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e55:	75 0b                	jne    c0014e62 <opcodeFault(regs*, void*)+0x384>
c0014e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e5d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014e60:	eb 0f                	jmp    c0014e71 <opcodeFault(regs*, void*)+0x393>
c0014e62:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e66:	75 09                	jne    c0014e71 <opcodeFault(regs*, void*)+0x393>
c0014e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e77:	8d 50 02             	lea    edx,[eax+0x2]
c0014e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e80:	e9 6f 02 00 00       	jmp    c00150f4 <opcodeFault(regs*, void*)+0x616>
c0014e85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e88:	8a 00                	mov    al,BYTE PTR [eax]
c0014e8a:	3c 0f                	cmp    al,0xf
c0014e8c:	0f 85 8d 01 00 00    	jne    c001501f <opcodeFault(regs*, void*)+0x541>
c0014e92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e95:	40                   	inc    eax
c0014e96:	8a 00                	mov    al,BYTE PTR [eax]
c0014e98:	3c c7                	cmp    al,0xc7
c0014e9a:	0f 85 7f 01 00 00    	jne    c001501f <opcodeFault(regs*, void*)+0x541>
c0014ea0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ea9:	8d 50 01             	lea    edx,[eax+0x1]
c0014eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eaf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eb2:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014eb5:	50                   	push   eax
c0014eb6:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014eb9:	50                   	push   eax
c0014eba:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014ebd:	50                   	push   eax
c0014ebe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ec1:	e8 60 46 00 00       	call   c0019526 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ec6:	83 c4 10             	add    esp,0x10
c0014ec9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014ecc:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014ecf:	83 f0 01             	xor    eax,0x1
c0014ed2:	84 c0                	test   al,al
c0014ed4:	0f 84 45 01 00 00    	je     c001501f <opcodeFault(regs*, void*)+0x541>
c0014eda:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014edd:	3c 01                	cmp    al,0x1
c0014edf:	0f 85 3a 01 00 00    	jne    c001501f <opcodeFault(regs*, void*)+0x541>
c0014ee5:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014ee8:	83 f0 01             	xor    eax,0x1
c0014eeb:	84 c0                	test   al,al
c0014eed:	0f 84 2c 01 00 00    	je     c001501f <opcodeFault(regs*, void*)+0x541>
c0014ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014ef9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014efc:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014f03:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f06:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f09:	89 c2                	mov    edx,eax
c0014f0b:	b8 00 00 00 00       	mov    eax,0x0
c0014f10:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f13:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f19:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f1c:	ba 00 00 00 00       	mov    edx,0x0
c0014f21:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014f24:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014f27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f2d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f30:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014f37:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f3a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f3d:	89 c2                	mov    edx,eax
c0014f3f:	b8 00 00 00 00       	mov    eax,0x0
c0014f44:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f47:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f50:	ba 00 00 00 00       	mov    edx,0x0
c0014f55:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014f58:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014f5b:	fa                   	cli    
c0014f5c:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0014f61:	40                   	inc    eax
c0014f62:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0014f67:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f6a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f6f:	89 c1                	mov    ecx,eax
c0014f71:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014f74:	89 cb                	mov    ebx,ecx
c0014f76:	89 d0                	mov    eax,edx
c0014f78:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014f7b:	89 c6                	mov    esi,eax
c0014f7d:	89 f0                	mov    eax,esi
c0014f7f:	09 d8                	or     eax,ebx
c0014f81:	85 c0                	test   eax,eax
c0014f83:	75 21                	jne    c0014fa6 <opcodeFault(regs*, void*)+0x4c8>
c0014f85:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014f88:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f8b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f8e:	89 01                	mov    DWORD PTR [ecx],eax
c0014f90:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f96:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f99:	83 c8 40             	or     eax,0x40
c0014f9c:	89 c2                	mov    edx,eax
c0014f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014fa4:	eb 3e                	jmp    c0014fe4 <opcodeFault(regs*, void*)+0x506>
c0014fa6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014fa9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014fac:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fae:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fb1:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014fb4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fba:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fbd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014fc0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014fc3:	89 d0                	mov    eax,edx
c0014fc5:	31 d2                	xor    edx,edx
c0014fc7:	89 c3                	mov    ebx,eax
c0014fc9:	89 d6                	mov    esi,edx
c0014fcb:	89 da                	mov    edx,ebx
c0014fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd0:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014fd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fd9:	83 e0 bf             	and    eax,0xffffffbf
c0014fdc:	89 c2                	mov    edx,eax
c0014fde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014fe4:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0014fe9:	48                   	dec    eax
c0014fea:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0014fef:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0014ff4:	85 c0                	test   eax,eax
c0014ff6:	75 01                	jne    c0014ff9 <opcodeFault(regs*, void*)+0x51b>
c0014ff8:	fb                   	sti    
c0014ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fff:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015002:	01 c2                	add    edx,eax
c0015004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015007:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001500a:	83 ec 0c             	sub    esp,0xc
c001500d:	68 6e ad 02 c0       	push   0xc002ad6e
c0015012:	e8 8a d6 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0015017:	83 c4 10             	add    esp,0x10
c001501a:	e9 d5 00 00 00       	jmp    c00150f4 <opcodeFault(regs*, void*)+0x616>
c001501f:	83 ec 0c             	sub    esp,0xc
c0015022:	68 81 ad 02 c0       	push   0xc002ad81
c0015027:	e8 75 d6 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001502c:	83 c4 10             	add    esp,0x10
c001502f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015032:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015038:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001503b:	c1 e0 04             	shl    eax,0x4
c001503e:	01 d0                	add    eax,edx
c0015040:	83 c0 03             	add    eax,0x3
c0015043:	8a 00                	mov    al,BYTE PTR [eax]
c0015045:	0f b6 d8             	movzx  ebx,al
c0015048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001504e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015051:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015054:	c1 e0 04             	shl    eax,0x4
c0015057:	01 d0                	add    eax,edx
c0015059:	83 c0 02             	add    eax,0x2
c001505c:	8a 00                	mov    al,BYTE PTR [eax]
c001505e:	0f b6 c8             	movzx  ecx,al
c0015061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015064:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001506d:	c1 e0 04             	shl    eax,0x4
c0015070:	01 d0                	add    eax,edx
c0015072:	40                   	inc    eax
c0015073:	8a 00                	mov    al,BYTE PTR [eax]
c0015075:	0f b6 d0             	movzx  edx,al
c0015078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507b:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001507e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015081:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015084:	c1 e0 04             	shl    eax,0x4
c0015087:	01 f0                	add    eax,esi
c0015089:	8a 00                	mov    al,BYTE PTR [eax]
c001508b:	0f b6 c0             	movzx  eax,al
c001508e:	83 ec 0c             	sub    esp,0xc
c0015091:	53                   	push   ebx
c0015092:	51                   	push   ecx
c0015093:	52                   	push   edx
c0015094:	50                   	push   eax
c0015095:	68 94 ad 02 c0       	push   0xc002ad94
c001509a:	e8 02 d6 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001509f:	83 c4 20             	add    esp,0x20
c00150a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150a8:	83 c0 03             	add    eax,0x3
c00150ab:	8a 00                	mov    al,BYTE PTR [eax]
c00150ad:	0f b6 d8             	movzx  ebx,al
c00150b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150b6:	83 c0 02             	add    eax,0x2
c00150b9:	8a 00                	mov    al,BYTE PTR [eax]
c00150bb:	0f b6 c8             	movzx  ecx,al
c00150be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150c4:	40                   	inc    eax
c00150c5:	8a 00                	mov    al,BYTE PTR [eax]
c00150c7:	0f b6 d0             	movzx  edx,al
c00150ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150d0:	8a 00                	mov    al,BYTE PTR [eax]
c00150d2:	0f b6 c0             	movzx  eax,al
c00150d5:	83 ec 0c             	sub    esp,0xc
c00150d8:	53                   	push   ebx
c00150d9:	51                   	push   ecx
c00150da:	52                   	push   edx
c00150db:	50                   	push   eax
c00150dc:	68 bc ad 02 c0       	push   0xc002adbc
c00150e1:	e8 bb d5 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00150e6:	83 c4 20             	add    esp,0x20
c00150e9:	83 ec 0c             	sub    esp,0xc
c00150ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150ef:	e8 48 f4 ff ff       	call   c001453c <displayDebugInfo(regs*)>
c00150f4:	8d 65 f8             	lea    esp,[ebp-0x8]
c00150f7:	5b                   	pop    ebx
c00150f8:	5e                   	pop    esi
c00150f9:	5d                   	pop    ebp
c00150fa:	c3                   	ret    

c00150fb <displayProgramFault(char const*)>:
c00150fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015100:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015103:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015109:	85 c0                	test   eax,eax
c001510b:	74 15                	je     c0015122 <displayProgramFault(char const*)+0x27>
c001510d:	83 ec 0c             	sub    esp,0xc
c0015110:	6a 04                	push   0x4
c0015112:	6a 0f                	push   0xf
c0015114:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015118:	50                   	push   eax
c0015119:	e8 16 b4 ff ff       	call   c0010534 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001511e:	83 c4 1c             	add    esp,0x1c
c0015121:	c3                   	ret    
c0015122:	c3                   	ret    

c0015123 <setupInterruptController()>:
c0015123:	55                   	push   ebp
c0015124:	89 e5                	mov    ebp,esp
c0015126:	53                   	push   ebx
c0015127:	83 ec 24             	sub    esp,0x24
c001512a:	b8 00 00 00 00       	mov    eax,0x0
c001512f:	85 c0                	test   eax,eax
c0015131:	0f 95 c0             	setne  al
c0015134:	84 c0                	test   al,al
c0015136:	74 5b                	je     c0015193 <setupInterruptController()+0x70>
c0015138:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001513f:	83 ec 0c             	sub    esp,0xc
c0015142:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015145:	e8 4f a4 ff ff       	call   c000f599 <malloc>
c001514a:	83 c4 10             	add    esp,0x10
c001514d:	89 c3                	mov    ebx,eax
c001514f:	83 ec 0c             	sub    esp,0xc
c0015152:	53                   	push   ebx
c0015153:	e8 fc 04 01 00       	call   c0025654 <APIC::APIC()>
c0015158:	83 c4 10             	add    esp,0x10
c001515b:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001515e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015161:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015164:	8b 00                	mov    eax,DWORD PTR [eax]
c0015166:	83 c0 08             	add    eax,0x8
c0015169:	8b 00                	mov    eax,DWORD PTR [eax]
c001516b:	6a 00                	push   0x0
c001516d:	6a 00                	push   0x0
c001516f:	6a 00                	push   0x0
c0015171:	52                   	push   edx
c0015172:	ff d0                	call   eax
c0015174:	83 c4 10             	add    esp,0x10
c0015177:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001517c:	83 ec 08             	sub    esp,0x8
c001517f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015182:	50                   	push   eax
c0015183:	e8 52 e9 ff ff       	call   c0013ada <Device::addChild(Device*)>
c0015188:	83 c4 10             	add    esp,0x10
c001518b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001518e:	e9 79 03 00 00       	jmp    c001550c <setupInterruptController()+0x3e9>
c0015193:	a0 a0 02 03 c0       	mov    al,ds:0xc00302a0
c0015198:	84 c0                	test   al,al
c001519a:	75 14                	jne    c00151b0 <setupInterruptController()+0x8d>
c001519c:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00151a1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00151a7:	83 e2 fe             	and    edx,0xfffffffe
c00151aa:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00151b0:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00151b5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00151bb:	83 e0 01             	and    eax,0x1
c00151be:	84 c0                	test   al,al
c00151c0:	0f 95 c0             	setne  al
c00151c3:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00151c6:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00151cd:	83 ec 0c             	sub    esp,0xc
c00151d0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00151d3:	e8 c1 a3 ff ff       	call   c000f599 <malloc>
c00151d8:	83 c4 10             	add    esp,0x10
c00151db:	89 c3                	mov    ebx,eax
c00151dd:	83 ec 0c             	sub    esp,0xc
c00151e0:	53                   	push   ebx
c00151e1:	e8 c6 09 01 00       	call   c0025bac <PIC::PIC()>
c00151e6:	83 c4 10             	add    esp,0x10
c00151e9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00151ec:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00151ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f4:	83 c0 08             	add    eax,0x8
c00151f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f9:	6a 00                	push   0x0
c00151fb:	6a 00                	push   0x0
c00151fd:	6a 00                	push   0x0
c00151ff:	52                   	push   edx
c0015200:	ff d0                	call   eax
c0015202:	83 c4 10             	add    esp,0x10
c0015205:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015209:	74 73                	je     c001527e <setupInterruptController()+0x15b>
c001520b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001520e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015211:	8b 00                	mov    eax,DWORD PTR [eax]
c0015213:	83 c0 0c             	add    eax,0xc
c0015216:	8b 00                	mov    eax,DWORD PTR [eax]
c0015218:	6a 00                	push   0x0
c001521a:	6a 00                	push   0x0
c001521c:	6a 00                	push   0x0
c001521e:	52                   	push   edx
c001521f:	ff d0                	call   eax
c0015221:	83 c4 10             	add    esp,0x10
c0015224:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015228:	74 15                	je     c001523f <setupInterruptController()+0x11c>
c001522a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001522d:	8b 00                	mov    eax,DWORD PTR [eax]
c001522f:	83 c0 04             	add    eax,0x4
c0015232:	8b 00                	mov    eax,DWORD PTR [eax]
c0015234:	83 ec 0c             	sub    esp,0xc
c0015237:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001523a:	ff d0                	call   eax
c001523c:	83 c4 10             	add    esp,0x10
c001523f:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015246:	83 ec 0c             	sub    esp,0xc
c0015249:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001524c:	e8 48 a3 ff ff       	call   c000f599 <malloc>
c0015251:	83 c4 10             	add    esp,0x10
c0015254:	89 c3                	mov    ebx,eax
c0015256:	83 ec 0c             	sub    esp,0xc
c0015259:	53                   	push   ebx
c001525a:	e8 f5 03 01 00       	call   c0025654 <APIC::APIC()>
c001525f:	83 c4 10             	add    esp,0x10
c0015262:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015265:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015268:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526b:	8b 00                	mov    eax,DWORD PTR [eax]
c001526d:	83 c0 08             	add    eax,0x8
c0015270:	8b 00                	mov    eax,DWORD PTR [eax]
c0015272:	6a 00                	push   0x0
c0015274:	6a 00                	push   0x0
c0015276:	6a 00                	push   0x0
c0015278:	52                   	push   edx
c0015279:	ff d0                	call   eax
c001527b:	83 c4 10             	add    esp,0x10
c001527e:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0015283:	83 ec 08             	sub    esp,0x8
c0015286:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015289:	50                   	push   eax
c001528a:	e8 4b e8 ff ff       	call   c0013ada <Device::addChild(Device*)>
c001528f:	83 c4 10             	add    esp,0x10
c0015292:	c7 05 a8 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002daa8,0x0
c001529c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001529f:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a1:	83 c0 24             	add    eax,0x24
c00152a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a6:	6a 00                	push   0x0
c00152a8:	68 bf 4a 01 c0       	push   0xc0014abf
c00152ad:	6a 00                	push   0x0
c00152af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b2:	ff d0                	call   eax
c00152b4:	83 c4 10             	add    esp,0x10
c00152b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00152bc:	83 c0 24             	add    eax,0x24
c00152bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c1:	6a 00                	push   0x0
c00152c3:	68 bf 4a 01 c0       	push   0xc0014abf
c00152c8:	6a 01                	push   0x1
c00152ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152cd:	ff d0                	call   eax
c00152cf:	83 c4 10             	add    esp,0x10
c00152d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d7:	83 c0 24             	add    eax,0x24
c00152da:	8b 00                	mov    eax,DWORD PTR [eax]
c00152dc:	6a 00                	push   0x0
c00152de:	68 99 43 01 c0       	push   0xc0014399
c00152e3:	6a 02                	push   0x2
c00152e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152e8:	ff d0                	call   eax
c00152ea:	83 c4 10             	add    esp,0x10
c00152ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f2:	83 c0 24             	add    eax,0x24
c00152f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f7:	6a 00                	push   0x0
c00152f9:	68 bf 4a 01 c0       	push   0xc0014abf
c00152fe:	6a 03                	push   0x3
c0015300:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015303:	ff d0                	call   eax
c0015305:	83 c4 10             	add    esp,0x10
c0015308:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530b:	8b 00                	mov    eax,DWORD PTR [eax]
c001530d:	83 c0 24             	add    eax,0x24
c0015310:	8b 00                	mov    eax,DWORD PTR [eax]
c0015312:	6a 00                	push   0x0
c0015314:	68 bf 4a 01 c0       	push   0xc0014abf
c0015319:	6a 04                	push   0x4
c001531b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001531e:	ff d0                	call   eax
c0015320:	83 c4 10             	add    esp,0x10
c0015323:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015326:	8b 00                	mov    eax,DWORD PTR [eax]
c0015328:	83 c0 24             	add    eax,0x24
c001532b:	8b 00                	mov    eax,DWORD PTR [eax]
c001532d:	6a 00                	push   0x0
c001532f:	68 bf 4a 01 c0       	push   0xc0014abf
c0015334:	6a 05                	push   0x5
c0015336:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015339:	ff d0                	call   eax
c001533b:	83 c4 10             	add    esp,0x10
c001533e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015341:	8b 00                	mov    eax,DWORD PTR [eax]
c0015343:	83 c0 24             	add    eax,0x24
c0015346:	8b 00                	mov    eax,DWORD PTR [eax]
c0015348:	6a 00                	push   0x0
c001534a:	68 de 4a 01 c0       	push   0xc0014ade
c001534f:	6a 06                	push   0x6
c0015351:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015354:	ff d0                	call   eax
c0015356:	83 c4 10             	add    esp,0x10
c0015359:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535c:	8b 00                	mov    eax,DWORD PTR [eax]
c001535e:	83 c0 24             	add    eax,0x24
c0015361:	8b 00                	mov    eax,DWORD PTR [eax]
c0015363:	6a 00                	push   0x0
c0015365:	68 cb 49 01 c0       	push   0xc00149cb
c001536a:	6a 07                	push   0x7
c001536c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001536f:	ff d0                	call   eax
c0015371:	83 c4 10             	add    esp,0x10
c0015374:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015377:	8b 00                	mov    eax,DWORD PTR [eax]
c0015379:	83 c0 24             	add    eax,0x24
c001537c:	8b 00                	mov    eax,DWORD PTR [eax]
c001537e:	6a 00                	push   0x0
c0015380:	68 b4 41 01 c0       	push   0xc00141b4
c0015385:	6a 08                	push   0x8
c0015387:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001538a:	ff d0                	call   eax
c001538c:	83 c4 10             	add    esp,0x10
c001538f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015392:	8b 00                	mov    eax,DWORD PTR [eax]
c0015394:	83 c0 24             	add    eax,0x24
c0015397:	8b 00                	mov    eax,DWORD PTR [eax]
c0015399:	6a 00                	push   0x0
c001539b:	68 bf 4a 01 c0       	push   0xc0014abf
c00153a0:	6a 09                	push   0x9
c00153a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a5:	ff d0                	call   eax
c00153a7:	83 c4 10             	add    esp,0x10
c00153aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00153af:	83 c0 24             	add    eax,0x24
c00153b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b4:	6a 00                	push   0x0
c00153b6:	68 bf 4a 01 c0       	push   0xc0014abf
c00153bb:	6a 0a                	push   0xa
c00153bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153c0:	ff d0                	call   eax
c00153c2:	83 c4 10             	add    esp,0x10
c00153c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ca:	83 c0 24             	add    eax,0x24
c00153cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cf:	6a 00                	push   0x0
c00153d1:	68 bf 4a 01 c0       	push   0xc0014abf
c00153d6:	6a 0b                	push   0xb
c00153d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153db:	ff d0                	call   eax
c00153dd:	83 c4 10             	add    esp,0x10
c00153e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e5:	83 c0 24             	add    eax,0x24
c00153e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ea:	6a 00                	push   0x0
c00153ec:	68 bf 4a 01 c0       	push   0xc0014abf
c00153f1:	6a 0c                	push   0xc
c00153f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f6:	ff d0                	call   eax
c00153f8:	83 c4 10             	add    esp,0x10
c00153fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015400:	83 c0 24             	add    eax,0x24
c0015403:	8b 00                	mov    eax,DWORD PTR [eax]
c0015405:	6a 00                	push   0x0
c0015407:	68 3e 4a 01 c0       	push   0xc0014a3e
c001540c:	6a 0d                	push   0xd
c001540e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015411:	ff d0                	call   eax
c0015413:	83 c4 10             	add    esp,0x10
c0015416:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015419:	8b 00                	mov    eax,DWORD PTR [eax]
c001541b:	83 c0 24             	add    eax,0x24
c001541e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015420:	6a 00                	push   0x0
c0015422:	68 77 4a 01 c0       	push   0xc0014a77
c0015427:	6a 0e                	push   0xe
c0015429:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001542c:	ff d0                	call   eax
c001542e:	83 c4 10             	add    esp,0x10
c0015431:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015434:	8b 00                	mov    eax,DWORD PTR [eax]
c0015436:	83 c0 24             	add    eax,0x24
c0015439:	8b 00                	mov    eax,DWORD PTR [eax]
c001543b:	6a 00                	push   0x0
c001543d:	68 bf 4a 01 c0       	push   0xc0014abf
c0015442:	6a 0f                	push   0xf
c0015444:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015447:	ff d0                	call   eax
c0015449:	83 c4 10             	add    esp,0x10
c001544c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015451:	83 c0 24             	add    eax,0x24
c0015454:	8b 00                	mov    eax,DWORD PTR [eax]
c0015456:	6a 00                	push   0x0
c0015458:	68 bf 4a 01 c0       	push   0xc0014abf
c001545d:	6a 10                	push   0x10
c001545f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015462:	ff d0                	call   eax
c0015464:	83 c4 10             	add    esp,0x10
c0015467:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546a:	8b 00                	mov    eax,DWORD PTR [eax]
c001546c:	83 c0 24             	add    eax,0x24
c001546f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015471:	6a 00                	push   0x0
c0015473:	68 bf 4a 01 c0       	push   0xc0014abf
c0015478:	6a 11                	push   0x11
c001547a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001547d:	ff d0                	call   eax
c001547f:	83 c4 10             	add    esp,0x10
c0015482:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015485:	8b 00                	mov    eax,DWORD PTR [eax]
c0015487:	83 c0 24             	add    eax,0x24
c001548a:	8b 00                	mov    eax,DWORD PTR [eax]
c001548c:	6a 00                	push   0x0
c001548e:	68 bf 4a 01 c0       	push   0xc0014abf
c0015493:	6a 12                	push   0x12
c0015495:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015498:	ff d0                	call   eax
c001549a:	83 c4 10             	add    esp,0x10
c001549d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a2:	83 c0 24             	add    eax,0x24
c00154a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a7:	6a 00                	push   0x0
c00154a9:	68 bf 4a 01 c0       	push   0xc0014abf
c00154ae:	6a 13                	push   0x13
c00154b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154b3:	ff d0                	call   eax
c00154b5:	83 c4 10             	add    esp,0x10
c00154b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154bd:	83 c0 24             	add    eax,0x24
c00154c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c2:	6a 00                	push   0x0
c00154c4:	68 bf 4a 01 c0       	push   0xc0014abf
c00154c9:	6a 14                	push   0x14
c00154cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ce:	ff d0                	call   eax
c00154d0:	83 c4 10             	add    esp,0x10
c00154d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d8:	83 c0 24             	add    eax,0x24
c00154db:	8b 00                	mov    eax,DWORD PTR [eax]
c00154dd:	6a 00                	push   0x0
c00154df:	68 bf 4a 01 c0       	push   0xc0014abf
c00154e4:	6a 1e                	push   0x1e
c00154e6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e9:	ff d0                	call   eax
c00154eb:	83 c4 10             	add    esp,0x10
c00154ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f3:	83 c0 24             	add    eax,0x24
c00154f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f8:	6a 00                	push   0x0
c00154fa:	68 fc bf 01 c0       	push   0xc001bffc
c00154ff:	6a 60                	push   0x60
c0015501:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015504:	ff d0                	call   eax
c0015506:	83 c4 10             	add    esp,0x10
c0015509:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001550f:	c9                   	leave  
c0015510:	c3                   	ret    
c0015511:	90                   	nop

c0015512 <InterruptController::convertLegacyIRQNumber(int)>:
c0015512:	55                   	push   ebp
c0015513:	89 e5                	mov    ebp,esp
c0015515:	83 ec 08             	sub    esp,0x8
c0015518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551b:	83 ec 0c             	sub    esp,0xc
c001551e:	50                   	push   eax
c001551f:	e8 b6 e8 ff ff       	call   c0013dda <Device::getName()>
c0015524:	83 c4 10             	add    esp,0x10
c0015527:	8a 00                	mov    al,BYTE PTR [eax]
c0015529:	3c 41                	cmp    al,0x41
c001552b:	0f 94 c0             	sete   al
c001552e:	84 c0                	test   al,al
c0015530:	74 28                	je     c001555a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015532:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015536:	7f 12                	jg     c001554a <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015538:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001553b:	05 80 cb 02 c0       	add    eax,0xc002cb80
c0015540:	8a 00                	mov    al,BYTE PTR [eax]
c0015542:	0f b6 c0             	movzx  eax,al
c0015545:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015548:	eb 10                	jmp    c001555a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001554a:	83 ec 0c             	sub    esp,0xc
c001554d:	68 e4 ad 02 c0       	push   0xc002ade4
c0015552:	e8 b6 48 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0015557:	83 c4 10             	add    esp,0x10
c001555a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001555d:	c9                   	leave  
c001555e:	c3                   	ret    
c001555f:	90                   	nop

c0015560 <startGUI(void*)>:
c0015560:	55                   	push   ebp
c0015561:	89 e5                	mov    ebp,esp
c0015563:	53                   	push   ebx
c0015564:	83 ec 04             	sub    esp,0x4
c0015567:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001556c:	48                   	dec    eax
c001556d:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0015572:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0015577:	85 c0                	test   eax,eax
c0015579:	75 01                	jne    c001557c <startGUI(void*)+0x1c>
c001557b:	fb                   	sti    
c001557c:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c0015582:	83 ec 08             	sub    esp,0x8
c0015585:	6a 01                	push   0x1
c0015587:	68 64 ae 02 c0       	push   0xc002ae64
c001558c:	e8 46 7a 00 00       	call   c001cfd7 <Thr::loadDLL(char const*, bool)>
c0015591:	83 c4 10             	add    esp,0x10
c0015594:	83 ec 08             	sub    esp,0x8
c0015597:	53                   	push   ebx
c0015598:	50                   	push   eax
c0015599:	e8 64 7c 00 00       	call   c001d202 <Thr::executeDLL(unsigned long, void*)>
c001559e:	83 c4 10             	add    esp,0x10
c00155a1:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c00155a7:	83 ec 08             	sub    esp,0x8
c00155aa:	6a 01                	push   0x1
c00155ac:	68 7e ae 02 c0       	push   0xc002ae7e
c00155b1:	e8 21 7a 00 00       	call   c001cfd7 <Thr::loadDLL(char const*, bool)>
c00155b6:	83 c4 10             	add    esp,0x10
c00155b9:	83 ec 08             	sub    esp,0x8
c00155bc:	53                   	push   ebx
c00155bd:	50                   	push   eax
c00155be:	e8 3f 7c 00 00       	call   c001d202 <Thr::executeDLL(unsigned long, void*)>
c00155c3:	83 c4 10             	add    esp,0x10
c00155c6:	90                   	nop
c00155c7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00155ca:	c9                   	leave  
c00155cb:	c3                   	ret    

c00155cc <startGUIVESA(void*)>:
c00155cc:	55                   	push   ebp
c00155cd:	89 e5                	mov    ebp,esp
c00155cf:	53                   	push   ebx
c00155d0:	83 ec 04             	sub    esp,0x4
c00155d3:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00155d8:	48                   	dec    eax
c00155d9:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c00155de:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00155e3:	85 c0                	test   eax,eax
c00155e5:	75 01                	jne    c00155e8 <startGUIVESA(void*)+0x1c>
c00155e7:	fb                   	sti    
c00155e8:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c00155ee:	83 ec 08             	sub    esp,0x8
c00155f1:	6a 01                	push   0x1
c00155f3:	68 98 ae 02 c0       	push   0xc002ae98
c00155f8:	e8 da 79 00 00       	call   c001cfd7 <Thr::loadDLL(char const*, bool)>
c00155fd:	83 c4 10             	add    esp,0x10
c0015600:	83 ec 08             	sub    esp,0x8
c0015603:	53                   	push   ebx
c0015604:	50                   	push   eax
c0015605:	e8 f8 7b 00 00       	call   c001d202 <Thr::executeDLL(unsigned long, void*)>
c001560a:	83 c4 10             	add    esp,0x10
c001560d:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c0015613:	83 ec 08             	sub    esp,0x8
c0015616:	6a 01                	push   0x1
c0015618:	68 7e ae 02 c0       	push   0xc002ae7e
c001561d:	e8 b5 79 00 00       	call   c001cfd7 <Thr::loadDLL(char const*, bool)>
c0015622:	83 c4 10             	add    esp,0x10
c0015625:	83 ec 08             	sub    esp,0x8
c0015628:	53                   	push   ebx
c0015629:	50                   	push   eax
c001562a:	e8 d3 7b 00 00       	call   c001d202 <Thr::executeDLL(unsigned long, void*)>
c001562f:	83 c4 10             	add    esp,0x10
c0015632:	90                   	nop
c0015633:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015636:	c9                   	leave  
c0015637:	c3                   	ret    

c0015638 <sendKeyToTerminal(unsigned char)>:
c0015638:	55                   	push   ebp
c0015639:	89 e5                	mov    ebp,esp
c001563b:	83 ec 28             	sub    esp,0x28
c001563e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015641:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015644:	a1 e4 d9 02 c0       	mov    eax,ds:0xc002d9e4
c0015649:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001564d:	83 ec 08             	sub    esp,0x8
c0015650:	52                   	push   edx
c0015651:	50                   	push   eax
c0015652:	e8 83 b3 ff ff       	call   c00109da <VgaText::receiveKey(unsigned char)>
c0015657:	83 c4 10             	add    esp,0x10
c001565a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001565e:	0f 85 8f 00 00 00    	jne    c00156f3 <sendKeyToTerminal(unsigned char)+0xbb>
c0015664:	fa                   	cli    
c0015665:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001566a:	40                   	inc    eax
c001566b:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0015670:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c0015675:	40                   	inc    eax
c0015676:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c001567b:	a1 c0 da 02 c0       	mov    eax,ds:0xc002dac0
c0015680:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015683:	c7 05 c0 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dac0,0x0
c001568d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015691:	74 1f                	je     c00156b2 <sendKeyToTerminal(unsigned char)+0x7a>
c0015693:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015696:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015699:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001569c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001569f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156a2:	83 ec 0c             	sub    esp,0xc
c00156a5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00156a8:	e8 6d 87 00 00       	call   c001de1a <unblockTask(ThreadControlBlock*)>
c00156ad:	83 c4 10             	add    esp,0x10
c00156b0:	eb db                	jmp    c001568d <sendKeyToTerminal(unsigned char)+0x55>
c00156b2:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c00156b7:	48                   	dec    eax
c00156b8:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c00156bd:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c00156c2:	85 c0                	test   eax,eax
c00156c4:	75 18                	jne    c00156de <sendKeyToTerminal(unsigned char)+0xa6>
c00156c6:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c00156cb:	85 c0                	test   eax,eax
c00156cd:	74 0f                	je     c00156de <sendKeyToTerminal(unsigned char)+0xa6>
c00156cf:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c00156d9:	e8 b9 82 00 00       	call   c001d997 <schedule()>
c00156de:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00156e3:	48                   	dec    eax
c00156e4:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c00156e9:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00156ee:	85 c0                	test   eax,eax
c00156f0:	75 01                	jne    c00156f3 <sendKeyToTerminal(unsigned char)+0xbb>
c00156f2:	fb                   	sti    
c00156f3:	90                   	nop
c00156f4:	c9                   	leave  
c00156f5:	c3                   	ret    

c00156f6 <sendKeyboardToken(KeyboardToken)>:
c00156f6:	55                   	push   ebp
c00156f7:	89 e5                	mov    ebp,esp
c00156f9:	83 ec 18             	sub    esp,0x18
c00156fc:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00156ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015702:	0f b7 c0             	movzx  eax,ax
c0015705:	83 f2 01             	xor    edx,0x1
c0015708:	88 90 e0 da 02 c0    	mov    BYTE PTR [eax-0x3ffd2520],dl
c001570e:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0015713:	85 c0                	test   eax,eax
c0015715:	74 24                	je     c001573b <sendKeyboardToken(KeyboardToken)+0x45>
c0015717:	8b 0d c8 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002dac8
c001571d:	83 ec 04             	sub    esp,0x4
c0015720:	68 e0 da 02 c0       	push   0xc002dae0
c0015725:	83 ec 08             	sub    esp,0x8
c0015728:	89 e2                	mov    edx,esp
c001572a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572d:	89 02                	mov    DWORD PTR [edx],eax
c001572f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015732:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015736:	ff d1                	call   ecx
c0015738:	83 c4 10             	add    esp,0x10
c001573b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573e:	66 3d 03 02          	cmp    ax,0x203
c0015742:	75 07                	jne    c001574b <sendKeyboardToken(KeyboardToken)+0x55>
c0015744:	a0 e0 db 02 c0       	mov    al,ds:0xc002dbe0
c0015749:	84 c0                	test   al,al
c001574b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001574f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015752:	a0 e8 de 02 c0       	mov    al,ds:0xc002dee8
c0015757:	38 c2                	cmp    dl,al
c0015759:	74 1c                	je     c0015777 <sendKeyboardToken(KeyboardToken)+0x81>
c001575b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001575e:	a2 e8 de 02 c0       	mov    ds:0xc002dee8,al
c0015763:	a0 e8 de 02 c0       	mov    al,ds:0xc002dee8
c0015768:	0f b6 c0             	movzx  eax,al
c001576b:	83 ec 0c             	sub    esp,0xc
c001576e:	50                   	push   eax
c001576f:	e8 a8 a8 ff ff       	call   c001001c <setTerminalScrollLock(bool)>
c0015774:	83 c4 10             	add    esp,0x10
c0015777:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001577a:	84 c0                	test   al,al
c001577c:	0f 84 ae 00 00 00    	je     c0015830 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015785:	66 3d 10 03          	cmp    ax,0x310
c0015789:	75 06                	jne    c0015791 <sendKeyboardToken(KeyboardToken)+0x9b>
c001578b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015794:	66 3d 11 03          	cmp    ax,0x311
c0015798:	75 06                	jne    c00157a0 <sendKeyboardToken(KeyboardToken)+0xaa>
c001579a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00157a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a3:	66 3d 12 03          	cmp    ax,0x312
c00157a7:	75 06                	jne    c00157af <sendKeyboardToken(KeyboardToken)+0xb9>
c00157a9:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00157af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b2:	66 3d 13 03          	cmp    ax,0x313
c00157b6:	75 06                	jne    c00157be <sendKeyboardToken(KeyboardToken)+0xc8>
c00157b8:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00157be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c1:	66 3d 14 03          	cmp    ax,0x314
c00157c5:	75 06                	jne    c00157cd <sendKeyboardToken(KeyboardToken)+0xd7>
c00157c7:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00157cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d0:	66 3d 15 03          	cmp    ax,0x315
c00157d4:	75 06                	jne    c00157dc <sendKeyboardToken(KeyboardToken)+0xe6>
c00157d6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00157dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157df:	66 3d 16 03          	cmp    ax,0x316
c00157e3:	75 06                	jne    c00157eb <sendKeyboardToken(KeyboardToken)+0xf5>
c00157e5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00157eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ee:	66 3d 17 03          	cmp    ax,0x317
c00157f2:	75 06                	jne    c00157fa <sendKeyboardToken(KeyboardToken)+0x104>
c00157f4:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00157fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fd:	66 3d 18 03          	cmp    ax,0x318
c0015801:	75 06                	jne    c0015809 <sendKeyboardToken(KeyboardToken)+0x113>
c0015803:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580c:	66 3d 19 03          	cmp    ax,0x319
c0015810:	75 06                	jne    c0015818 <sendKeyboardToken(KeyboardToken)+0x122>
c0015812:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581b:	66 3d 1a 03          	cmp    ax,0x31a
c001581f:	0f 85 c9 00 00 00    	jne    c00158ee <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015825:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001582b:	e9 be 00 00 00       	jmp    c00158ee <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015833:	66 3d 10 03          	cmp    ax,0x310
c0015837:	75 0a                	jne    c0015843 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015839:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001583f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015846:	66 3d 11 03          	cmp    ax,0x311
c001584a:	75 0a                	jne    c0015856 <sendKeyboardToken(KeyboardToken)+0x160>
c001584c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015852:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015856:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015859:	66 3d 12 03          	cmp    ax,0x312
c001585d:	75 0a                	jne    c0015869 <sendKeyboardToken(KeyboardToken)+0x173>
c001585f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015865:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586c:	66 3d 13 03          	cmp    ax,0x313
c0015870:	75 0a                	jne    c001587c <sendKeyboardToken(KeyboardToken)+0x186>
c0015872:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015878:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001587c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587f:	66 3d 14 03          	cmp    ax,0x314
c0015883:	75 0a                	jne    c001588f <sendKeyboardToken(KeyboardToken)+0x199>
c0015885:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001588b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001588f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015892:	66 3d 15 03          	cmp    ax,0x315
c0015896:	75 0a                	jne    c00158a2 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015898:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001589e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a5:	66 3d 16 03          	cmp    ax,0x316
c00158a9:	75 0a                	jne    c00158b5 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00158ab:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00158b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b8:	66 3d 17 03          	cmp    ax,0x317
c00158bc:	75 0a                	jne    c00158c8 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00158be:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00158c4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cb:	66 3d 18 03          	cmp    ax,0x318
c00158cf:	75 0a                	jne    c00158db <sendKeyboardToken(KeyboardToken)+0x1e5>
c00158d1:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00158d7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158de:	66 3d 19 03          	cmp    ax,0x319
c00158e2:	75 0a                	jne    c00158ee <sendKeyboardToken(KeyboardToken)+0x1f8>
c00158e4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00158ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f1:	66 3d 00 02          	cmp    ax,0x200
c00158f5:	75 2c                	jne    c0015923 <sendKeyboardToken(KeyboardToken)+0x22d>
c00158f7:	a0 e0 de 02 c0       	mov    al,ds:0xc002dee0
c00158fc:	83 f0 01             	xor    eax,0x1
c00158ff:	84 c0                	test   al,al
c0015901:	74 20                	je     c0015923 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015903:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0015908:	6a 01                	push   0x1
c001590a:	6a 00                	push   0x0
c001590c:	68 60 55 01 c0       	push   0xc0015560
c0015911:	50                   	push   eax
c0015912:	e8 5b 7e 00 00       	call   c001d772 <Process::createThread(void (*)(void*), void*, int)>
c0015917:	83 c4 10             	add    esp,0x10
c001591a:	c6 05 e0 de 02 c0 01 	mov    BYTE PTR ds:0xc002dee0,0x1
c0015921:	eb 33                	jmp    c0015956 <sendKeyboardToken(KeyboardToken)+0x260>
c0015923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015926:	66 3d 01 02          	cmp    ax,0x201
c001592a:	75 2a                	jne    c0015956 <sendKeyboardToken(KeyboardToken)+0x260>
c001592c:	a0 e0 de 02 c0       	mov    al,ds:0xc002dee0
c0015931:	83 f0 01             	xor    eax,0x1
c0015934:	84 c0                	test   al,al
c0015936:	74 1e                	je     c0015956 <sendKeyboardToken(KeyboardToken)+0x260>
c0015938:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001593d:	6a 01                	push   0x1
c001593f:	6a 00                	push   0x0
c0015941:	68 cc 55 01 c0       	push   0xc00155cc
c0015946:	50                   	push   eax
c0015947:	e8 26 7e 00 00       	call   c001d772 <Process::createThread(void (*)(void*), void*, int)>
c001594c:	83 c4 10             	add    esp,0x10
c001594f:	c6 05 e0 de 02 c0 01 	mov    BYTE PTR ds:0xc002dee0,0x1
c0015956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015959:	66 3d 1d 03          	cmp    ax,0x31d
c001595d:	75 06                	jne    c0015965 <sendKeyboardToken(KeyboardToken)+0x26f>
c001595f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015968:	66 3d 1c 03          	cmp    ax,0x31c
c001596c:	75 06                	jne    c0015974 <sendKeyboardToken(KeyboardToken)+0x27e>
c001596e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015977:	66 3d 1b 03          	cmp    ax,0x31b
c001597b:	75 06                	jne    c0015983 <sendKeyboardToken(KeyboardToken)+0x28d>
c001597d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015986:	66 3d 1e 03          	cmp    ax,0x31e
c001598a:	75 06                	jne    c0015992 <sendKeyboardToken(KeyboardToken)+0x29c>
c001598c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015992:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015995:	66 3d 1f 03          	cmp    ax,0x31f
c0015999:	75 06                	jne    c00159a1 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001599b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00159a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a4:	66 3d 1a 03          	cmp    ax,0x31a
c00159a8:	75 06                	jne    c00159b0 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00159aa:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00159b0:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00159b4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159b7:	83 f0 01             	xor    eax,0x1
c00159ba:	84 c0                	test   al,al
c00159bc:	74 77                	je     c0015a35 <sendKeyboardToken(KeyboardToken)+0x33f>
c00159be:	a0 e1 db 02 c0       	mov    al,ds:0xc002dbe1
c00159c3:	84 c0                	test   al,al
c00159c5:	74 41                	je     c0015a08 <sendKeyboardToken(KeyboardToken)+0x312>
c00159c7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159cb:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00159cf:	74 2b                	je     c00159fc <sendKeyboardToken(KeyboardToken)+0x306>
c00159d1:	8b 15 e4 de 02 c0    	mov    edx,DWORD PTR ds:0xc002dee4
c00159d7:	89 d0                	mov    eax,edx
c00159d9:	c1 e0 02             	shl    eax,0x2
c00159dc:	01 d0                	add    eax,edx
c00159de:	01 c0                	add    eax,eax
c00159e0:	a3 e4 de 02 c0       	mov    ds:0xc002dee4,eax
c00159e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e8:	0f b7 c0             	movzx  eax,ax
c00159eb:	8d 50 d0             	lea    edx,[eax-0x30]
c00159ee:	a1 e4 de 02 c0       	mov    eax,ds:0xc002dee4
c00159f3:	01 d0                	add    eax,edx
c00159f5:	a3 e4 de 02 c0       	mov    ds:0xc002dee4,eax
c00159fa:	eb 6d                	jmp    c0015a69 <sendKeyboardToken(KeyboardToken)+0x373>
c00159fc:	c7 05 e4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dee4,0x0
c0015a06:	eb 61                	jmp    c0015a69 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a08:	a1 e4 de 02 c0       	mov    eax,ds:0xc002dee4
c0015a0d:	85 c0                	test   eax,eax
c0015a0f:	74 18                	je     c0015a29 <sendKeyboardToken(KeyboardToken)+0x333>
c0015a11:	a1 e4 de 02 c0       	mov    eax,ds:0xc002dee4
c0015a16:	0f b6 c0             	movzx  eax,al
c0015a19:	83 ec 0c             	sub    esp,0xc
c0015a1c:	50                   	push   eax
c0015a1d:	e8 16 fc ff ff       	call   c0015638 <sendKeyToTerminal(unsigned char)>
c0015a22:	83 c4 10             	add    esp,0x10
c0015a25:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a29:	c7 05 e4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dee4,0x0
c0015a33:	eb 34                	jmp    c0015a69 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a38:	66 3d 01 01          	cmp    ax,0x101
c0015a3c:	75 2b                	jne    c0015a69 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a3e:	a1 e4 de 02 c0       	mov    eax,ds:0xc002dee4
c0015a43:	85 c0                	test   eax,eax
c0015a45:	74 18                	je     c0015a5f <sendKeyboardToken(KeyboardToken)+0x369>
c0015a47:	a1 e4 de 02 c0       	mov    eax,ds:0xc002dee4
c0015a4c:	0f b6 c0             	movzx  eax,al
c0015a4f:	83 ec 0c             	sub    esp,0xc
c0015a52:	50                   	push   eax
c0015a53:	e8 e0 fb ff ff       	call   c0015638 <sendKeyToTerminal(unsigned char)>
c0015a58:	83 c4 10             	add    esp,0x10
c0015a5b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a5f:	c7 05 e4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dee4,0x0
c0015a69:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a6c:	83 f0 01             	xor    eax,0x1
c0015a6f:	84 c0                	test   al,al
c0015a71:	74 4c                	je     c0015abf <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a73:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a76:	83 f0 01             	xor    eax,0x1
c0015a79:	84 c0                	test   al,al
c0015a7b:	74 42                	je     c0015abf <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a7d:	a0 e0 db 02 c0       	mov    al,ds:0xc002dbe0
c0015a82:	83 f0 01             	xor    eax,0x1
c0015a85:	84 c0                	test   al,al
c0015a87:	74 36                	je     c0015abf <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a8c:	66 83 f8 1f          	cmp    ax,0x1f
c0015a90:	76 09                	jbe    c0015a9b <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a95:	66 83 f8 7e          	cmp    ax,0x7e
c0015a99:	76 12                	jbe    c0015aad <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015a9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a9e:	66 83 f8 0a          	cmp    ax,0xa
c0015aa2:	74 09                	je     c0015aad <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa7:	66 83 f8 08          	cmp    ax,0x8
c0015aab:	75 12                	jne    c0015abf <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab0:	0f b6 c0             	movzx  eax,al
c0015ab3:	83 ec 0c             	sub    esp,0xc
c0015ab6:	50                   	push   eax
c0015ab7:	e8 7c fb ff ff       	call   c0015638 <sendKeyToTerminal(unsigned char)>
c0015abc:	83 c4 10             	add    esp,0x10
c0015abf:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015ac2:	83 f0 01             	xor    eax,0x1
c0015ac5:	84 c0                	test   al,al
c0015ac7:	74 4f                	je     c0015b18 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ac9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015acc:	83 f0 01             	xor    eax,0x1
c0015acf:	84 c0                	test   al,al
c0015ad1:	74 45                	je     c0015b18 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ad3:	a0 e0 db 02 c0       	mov    al,ds:0xc002dbe0
c0015ad8:	84 c0                	test   al,al
c0015ada:	74 3c                	je     c0015b18 <sendKeyboardToken(KeyboardToken)+0x422>
c0015adc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015adf:	66 83 f8 3f          	cmp    ax,0x3f
c0015ae3:	76 33                	jbe    c0015b18 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae8:	66 83 f8 7f          	cmp    ax,0x7f
c0015aec:	77 2a                	ja     c0015b18 <sendKeyboardToken(KeyboardToken)+0x422>
c0015aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af1:	88 c2                	mov    dl,al
c0015af3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af6:	66 83 f8 5f          	cmp    ax,0x5f
c0015afa:	76 04                	jbe    c0015b00 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015afc:	b0 20                	mov    al,0x20
c0015afe:	eb 02                	jmp    c0015b02 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015b00:	b0 00                	mov    al,0x0
c0015b02:	29 c2                	sub    edx,eax
c0015b04:	88 d0                	mov    al,dl
c0015b06:	83 e8 40             	sub    eax,0x40
c0015b09:	0f b6 c0             	movzx  eax,al
c0015b0c:	83 ec 0c             	sub    esp,0xc
c0015b0f:	50                   	push   eax
c0015b10:	e8 23 fb ff ff       	call   c0015638 <sendKeyToTerminal(unsigned char)>
c0015b15:	83 c4 10             	add    esp,0x10
c0015b18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b1b:	66 3d 00 03          	cmp    ax,0x300
c0015b1f:	75 0f                	jne    c0015b30 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b21:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b24:	83 f0 01             	xor    eax,0x1
c0015b27:	84 c0                	test   al,al
c0015b29:	74 05                	je     c0015b30 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b2b:	e8 5d a8 ff ff       	call   c001038d <doTerminalCycle()>
c0015b30:	90                   	nop
c0015b31:	c9                   	leave  
c0015b32:	c3                   	ret    

c0015b33 <clearInternalKeybuffer(VgaText*)>:
c0015b33:	55                   	push   ebp
c0015b34:	89 e5                	mov    ebp,esp
c0015b36:	83 ec 08             	sub    esp,0x8
c0015b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b3c:	05 98 01 00 00       	add    eax,0x198
c0015b41:	83 ec 0c             	sub    esp,0xc
c0015b44:	50                   	push   eax
c0015b45:	e8 22 ac fe ff       	call   c000076c <strlen>
c0015b4a:	83 c4 10             	add    esp,0x10
c0015b4d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b50:	81 c2 98 01 00 00    	add    edx,0x198
c0015b56:	83 ec 04             	sub    esp,0x4
c0015b59:	50                   	push   eax
c0015b5a:	6a 00                	push   0x0
c0015b5c:	52                   	push   edx
c0015b5d:	e8 ee ab fe ff       	call   c0000750 <memset>
c0015b62:	83 c4 10             	add    esp,0x10
c0015b65:	90                   	nop
c0015b66:	c9                   	leave  
c0015b67:	c3                   	ret    

c0015b68 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015b68:	55                   	push   ebp
c0015b69:	89 e5                	mov    ebp,esp
c0015b6b:	83 ec 18             	sub    esp,0x18
c0015b6e:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0015b73:	85 c0                	test   eax,eax
c0015b75:	74 2a                	je     c0015ba1 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015b77:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015b7d:	8b 0d c8 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002dac8
c0015b83:	83 ec 04             	sub    esp,0x4
c0015b86:	68 e0 da 02 c0       	push   0xc002dae0
c0015b8b:	83 ec 08             	sub    esp,0x8
c0015b8e:	89 e2                	mov    edx,esp
c0015b90:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015b93:	89 02                	mov    DWORD PTR [edx],eax
c0015b95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015b98:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015b9c:	ff d1                	call   ecx
c0015b9e:	83 c4 10             	add    esp,0x10
c0015ba1:	fb                   	sti    
c0015ba2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015ba9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015bad:	0f 84 a1 00 00 00    	je     c0015c54 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015bb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb6:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015bbc:	84 c0                	test   al,al
c0015bbe:	75 28                	jne    c0015be8 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015bc0:	fa                   	cli    
c0015bc1:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0015bc6:	40                   	inc    eax
c0015bc7:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0015bcc:	e8 c6 7d 00 00       	call   c001d997 <schedule()>
c0015bd1:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0015bd6:	48                   	dec    eax
c0015bd7:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0015bdc:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0015be1:	85 c0                	test   eax,eax
c0015be3:	75 ce                	jne    c0015bb3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015be5:	fb                   	sti    
c0015be6:	eb cb                	jmp    c0015bb3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015be8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015beb:	8d 50 01             	lea    edx,[eax+0x1]
c0015bee:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015bf1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015bf4:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015bfa:	88 10                	mov    BYTE PTR [eax],dl
c0015bfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bff:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c05:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c0b:	05 98 01 00 00       	add    eax,0x198
c0015c10:	83 ec 0c             	sub    esp,0xc
c0015c13:	50                   	push   eax
c0015c14:	e8 53 ab fe ff       	call   c000076c <strlen>
c0015c19:	83 c4 10             	add    esp,0x10
c0015c1c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c1f:	81 c2 98 01 00 00    	add    edx,0x198
c0015c25:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015c28:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c2b:	81 c2 98 01 00 00    	add    edx,0x198
c0015c31:	83 ec 04             	sub    esp,0x4
c0015c34:	50                   	push   eax
c0015c35:	51                   	push   ecx
c0015c36:	52                   	push   edx
c0015c37:	e8 4c aa fe ff       	call   c0000688 <memmove>
c0015c3c:	83 c4 10             	add    esp,0x10
c0015c3f:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015c42:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015c45:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015c49:	0f 85 5a ff ff ff    	jne    c0015ba9 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015c4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c52:	eb 03                	jmp    c0015c57 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015c54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c57:	c9                   	leave  
c0015c58:	c3                   	ret    
c0015c59:	90                   	nop

c0015c5a <Keyboard::Keyboard(char const*)>:
c0015c5a:	83 ec 0c             	sub    esp,0xc
c0015c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c61:	83 ec 08             	sub    esp,0x8
c0015c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c68:	50                   	push   eax
c0015c69:	e8 70 e0 ff ff       	call   c0013cde <Device::Device(char const*)>
c0015c6e:	83 c4 10             	add    esp,0x10
c0015c71:	ba bc ae 02 c0       	mov    edx,0xc002aebc
c0015c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c7a:	89 10                	mov    DWORD PTR [eax],edx
c0015c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c80:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015c8a:	c6 05 c4 da 02 c0 01 	mov    BYTE PTR ds:0xc002dac4,0x1
c0015c91:	90                   	nop
c0015c92:	83 c4 0c             	add    esp,0xc
c0015c95:	c3                   	ret    

c0015c96 <Keyboard::~Keyboard()>:
c0015c96:	83 ec 0c             	sub    esp,0xc
c0015c99:	ba bc ae 02 c0       	mov    edx,0xc002aebc
c0015c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ca2:	89 10                	mov    DWORD PTR [eax],edx
c0015ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ca8:	83 ec 0c             	sub    esp,0xc
c0015cab:	50                   	push   eax
c0015cac:	e8 f7 dc ff ff       	call   c00139a8 <Device::~Device()>
c0015cb1:	83 c4 10             	add    esp,0x10
c0015cb4:	90                   	nop
c0015cb5:	83 c4 0c             	add    esp,0xc
c0015cb8:	c3                   	ret    
c0015cb9:	90                   	nop

c0015cba <Keyboard::~Keyboard()>:
c0015cba:	83 ec 0c             	sub    esp,0xc
c0015cbd:	83 ec 0c             	sub    esp,0xc
c0015cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cc4:	e8 cd ff ff ff       	call   c0015c96 <Keyboard::~Keyboard()>
c0015cc9:	83 c4 10             	add    esp,0x10
c0015ccc:	83 ec 08             	sub    esp,0x8
c0015ccf:	68 5c 01 00 00       	push   0x15c
c0015cd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cd8:	e8 ec c8 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0015cdd:	83 c4 10             	add    esp,0x10
c0015ce0:	83 c4 0c             	add    esp,0xc
c0015ce3:	c3                   	ret    

c0015ce4 <LogicalDisk::close(int, int, void*)>:
c0015ce4:	83 c8 ff             	or     eax,0xffffffff
c0015ce7:	c3                   	ret    

c0015ce8 <LogicalDisk::~LogicalDisk()>:
c0015ce8:	83 ec 0c             	sub    esp,0xc
c0015ceb:	ba 34 af 02 c0       	mov    edx,0xc002af34
c0015cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cf4:	89 10                	mov    DWORD PTR [eax],edx
c0015cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cfa:	83 ec 0c             	sub    esp,0xc
c0015cfd:	50                   	push   eax
c0015cfe:	e8 a5 dc ff ff       	call   c00139a8 <Device::~Device()>
c0015d03:	83 c4 10             	add    esp,0x10
c0015d06:	90                   	nop
c0015d07:	83 c4 0c             	add    esp,0xc
c0015d0a:	c3                   	ret    
c0015d0b:	90                   	nop

c0015d0c <LogicalDisk::~LogicalDisk()>:
c0015d0c:	83 ec 0c             	sub    esp,0xc
c0015d0f:	83 ec 0c             	sub    esp,0xc
c0015d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d16:	e8 cd ff ff ff       	call   c0015ce8 <LogicalDisk::~LogicalDisk()>
c0015d1b:	83 c4 10             	add    esp,0x10
c0015d1e:	83 ec 08             	sub    esp,0x8
c0015d21:	68 74 01 00 00       	push   0x174
c0015d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d2a:	e8 9a c8 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0015d2f:	83 c4 10             	add    esp,0x10
c0015d32:	83 c4 0c             	add    esp,0xc
c0015d35:	c3                   	ret    

c0015d36 <LogicalDisk::open(int, int, void*)>:
c0015d36:	83 ec 18             	sub    esp,0x18
c0015d39:	68 e8 ae 02 c0       	push   0xc002aee8
c0015d3e:	e8 ca 40 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0015d43:	83 c8 ff             	or     eax,0xffffffff
c0015d46:	83 c4 1c             	add    esp,0x1c
c0015d49:	c3                   	ret    

c0015d4a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015d4a:	53                   	push   ebx
c0015d4b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015d4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d57:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015d5d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015d63:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015d69:	77 10                	ja     c0015d7b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015d6b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015d71:	89 d3                	mov    ebx,edx
c0015d73:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015d79:	72 05                	jb     c0015d80 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015d7b:	83 c8 ff             	or     eax,0xffffffff
c0015d7e:	89 c2                	mov    edx,eax
c0015d80:	5b                   	pop    ebx
c0015d81:	c3                   	ret    

c0015d82 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015d82:	56                   	push   esi
c0015d83:	83 c8 ff             	or     eax,0xffffffff
c0015d86:	53                   	push   ebx
c0015d87:	89 c2                	mov    edx,eax
c0015d89:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015d8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015d91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015d95:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d9b:	77 27                	ja     c0015dc4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015d9d:	89 d8                	mov    eax,ebx
c0015d9f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015da5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015dab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015db0:	89 c2                	mov    edx,eax
c0015db2:	73 10                	jae    c0015dc4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015db4:	89 c8                	mov    eax,ecx
c0015db6:	89 da                	mov    edx,ebx
c0015db8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015dbe:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015dc4:	5b                   	pop    ebx
c0015dc5:	5e                   	pop    esi
c0015dc6:	c3                   	ret    
c0015dc7:	90                   	nop

c0015dc8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015dc8:	83 ec 1c             	sub    esp,0x1c
c0015dcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015dcf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015dd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ddb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0015de2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015de6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015dea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dee:	83 ec 08             	sub    esp,0x8
c0015df1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015df5:	50                   	push   eax
c0015df6:	e8 e3 de ff ff       	call   c0013cde <Device::Device(char const*)>
c0015dfb:	83 c4 10             	add    esp,0x10
c0015dfe:	ba 34 af 02 c0       	mov    edx,0xc002af34
c0015e03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e07:	89 10                	mov    DWORD PTR [eax],edx
c0015e09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e0d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e18:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e23:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015e2d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e35:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e39:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015e3f:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015e45:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e50:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015e56:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e60:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015e64:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015e6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e6e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015e78:	90                   	nop
c0015e79:	83 c4 1c             	add    esp,0x1c
c0015e7c:	c3                   	ret    
c0015e7d:	90                   	nop

c0015e7e <LogicalDisk::assignDriveLetter()>:
c0015e7e:	55                   	push   ebp
c0015e7f:	57                   	push   edi
c0015e80:	56                   	push   esi
c0015e81:	53                   	push   ebx
c0015e82:	83 ec 14             	sub    esp,0x14
c0015e85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e89:	8b 3d 00 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df00
c0015e8f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015e95:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015e99:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015e9f:	8b 3d 04 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df04
c0015ea5:	3c 01                	cmp    al,0x1
c0015ea7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015eab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015eaf:	19 c0                	sbb    eax,eax
c0015eb1:	83 e0 02             	and    eax,0x2
c0015eb4:	83 c0 41             	add    eax,0x41
c0015eb7:	0f be e8             	movsx  ebp,al
c0015eba:	3c 43                	cmp    al,0x43
c0015ebc:	75 10                	jne    c0015ece <LogicalDisk::assignDriveLetter()+0x50>
c0015ebe:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015ec5:	75 5d                	jne    c0015f24 <LogicalDisk::assignDriveLetter()+0xa6>
c0015ec7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015ecc:	75 56                	jne    c0015f24 <LogicalDisk::assignDriveLetter()+0xa6>
c0015ece:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015ed1:	ba 01 00 00 00       	mov    edx,0x1
c0015ed6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015eda:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015ede:	d3 e2                	shl    edx,cl
c0015ee0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ee4:	89 d7                	mov    edi,edx
c0015ee6:	89 d6                	mov    esi,edx
c0015ee8:	c1 ff 1f             	sar    edi,0x1f
c0015eeb:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015eef:	21 f9                	and    ecx,edi
c0015ef1:	09 d1                	or     ecx,edx
c0015ef3:	75 2f                	jne    c0015f24 <LogicalDisk::assignDriveLetter()+0xa6>
c0015ef5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015ef9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015efd:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f03:	09 f2                	or     edx,esi
c0015f05:	89 15 00 df 02 c0    	mov    DWORD PTR ds:0xc002df00,edx
c0015f0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f0f:	09 fa                	or     edx,edi
c0015f11:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f15:	89 15 04 df 02 c0    	mov    DWORD PTR ds:0xc002df04,edx
c0015f1b:	89 1c bd 20 df 02 c0 	mov    DWORD PTR [edi*4-0x3ffd20e0],ebx
c0015f22:	eb 08                	jmp    c0015f2c <LogicalDisk::assignDriveLetter()+0xae>
c0015f24:	45                   	inc    ebp
c0015f25:	40                   	inc    eax
c0015f26:	3c 5b                	cmp    al,0x5b
c0015f28:	75 90                	jne    c0015eba <LogicalDisk::assignDriveLetter()+0x3c>
c0015f2a:	31 c0                	xor    eax,eax
c0015f2c:	83 c4 14             	add    esp,0x14
c0015f2f:	5b                   	pop    ebx
c0015f30:	5e                   	pop    esi
c0015f31:	5f                   	pop    edi
c0015f32:	5d                   	pop    ebp
c0015f33:	c3                   	ret    

c0015f34 <LogicalDisk::mount()>:
c0015f34:	56                   	push   esi
c0015f35:	53                   	push   ebx
c0015f36:	53                   	push   ebx
c0015f37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f3b:	8b 1d 94 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da94
c0015f41:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015f4b:	85 db                	test   ebx,ebx
c0015f4d:	74 27                	je     c0015f76 <LogicalDisk::mount()+0x42>
c0015f4f:	51                   	push   ecx
c0015f50:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015f57:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f59:	83 e8 41             	sub    eax,0x41
c0015f5c:	50                   	push   eax
c0015f5d:	56                   	push   esi
c0015f5e:	53                   	push   ebx
c0015f5f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f62:	83 c4 10             	add    esp,0x10
c0015f65:	84 c0                	test   al,al
c0015f67:	74 08                	je     c0015f71 <LogicalDisk::mount()+0x3d>
c0015f69:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015f6f:	eb 07                	jmp    c0015f78 <LogicalDisk::mount()+0x44>
c0015f71:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015f74:	eb d5                	jmp    c0015f4b <LogicalDisk::mount()+0x17>
c0015f76:	31 c0                	xor    eax,eax
c0015f78:	5a                   	pop    edx
c0015f79:	5b                   	pop    ebx
c0015f7a:	5e                   	pop    esi
c0015f7b:	c3                   	ret    

c0015f7c <LogicalDisk::unmount()>:
c0015f7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f80:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f8a:	c3                   	ret    
c0015f8b:	90                   	nop

c0015f8c <LogicalDisk::eject()>:
c0015f8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f90:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015f96:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f9c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015f9f:	90                   	nop

c0015fa0 <LogicalDisk::unassignDriveLetter()>:
c0015fa0:	57                   	push   edi
c0015fa1:	56                   	push   esi
c0015fa2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fa6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015fad:	84 c9                	test   cl,cl
c0015faf:	75 0f                	jne    c0015fc0 <LogicalDisk::unassignDriveLetter()+0x20>
c0015fb1:	c7 44 24 0c 0c af 02 c0 	mov    DWORD PTR [esp+0xc],0xc002af0c
c0015fb9:	5e                   	pop    esi
c0015fba:	5f                   	pop    edi
c0015fbb:	e9 4d 3e 00 00       	jmp    c0019e0d <Krnl::panic(char const*)>
c0015fc0:	83 e9 41             	sub    ecx,0x41
c0015fc3:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015fca:	b8 01 00 00 00       	mov    eax,0x1
c0015fcf:	c7 04 8d 20 df 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd20e0],0x0
c0015fda:	d3 e0                	shl    eax,cl
c0015fdc:	89 c7                	mov    edi,eax
c0015fde:	f7 d0                	not    eax
c0015fe0:	c1 ff 1f             	sar    edi,0x1f
c0015fe3:	21 05 00 df 02 c0    	and    DWORD PTR ds:0xc002df00,eax
c0015fe9:	89 fe                	mov    esi,edi
c0015feb:	f7 d6                	not    esi
c0015fed:	21 35 04 df 02 c0    	and    DWORD PTR ds:0xc002df04,esi
c0015ff3:	5e                   	pop    esi
c0015ff4:	5f                   	pop    edi
c0015ff5:	c3                   	ret    

c0015ff6 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015ff6:	57                   	push   edi
c0015ff7:	56                   	push   esi
c0015ff8:	53                   	push   ebx
c0015ff9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015ffd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016001:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016005:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016009:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001600f:	77 41                	ja     c0016052 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016011:	99                   	cdq    
c0016012:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016018:	01 c8                	add    eax,ecx
c001601a:	11 da                	adc    edx,ebx
c001601c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016022:	19 d7                	sbb    edi,edx
c0016024:	72 33                	jb     c0016059 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016026:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001602c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016032:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016036:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001603a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016040:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016046:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001604a:	5b                   	pop    ebx
c001604b:	5e                   	pop    esi
c001604c:	5f                   	pop    edi
c001604d:	e9 cc 0a 00 00       	jmp    c0016b1e <VCache::read(unsigned long long, int, void*)>
c0016052:	b8 05 00 00 00       	mov    eax,0x5
c0016057:	eb 05                	jmp    c001605e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016059:	b8 07 00 00 00       	mov    eax,0x7
c001605e:	5b                   	pop    ebx
c001605f:	5e                   	pop    esi
c0016060:	5f                   	pop    edi
c0016061:	c3                   	ret    

c0016062 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016062:	57                   	push   edi
c0016063:	56                   	push   esi
c0016064:	53                   	push   ebx
c0016065:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016069:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001606d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016071:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016075:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001607b:	77 41                	ja     c00160be <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001607d:	99                   	cdq    
c001607e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016084:	01 c8                	add    eax,ecx
c0016086:	11 da                	adc    edx,ebx
c0016088:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001608e:	19 d7                	sbb    edi,edx
c0016090:	72 33                	jb     c00160c5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016092:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016098:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001609e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160a2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160a6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160ac:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160b6:	5b                   	pop    ebx
c00160b7:	5e                   	pop    esi
c00160b8:	5f                   	pop    edi
c00160b9:	e9 76 09 00 00       	jmp    c0016a34 <VCache::write(unsigned long long, int, void*)>
c00160be:	b8 05 00 00 00       	mov    eax,0x5
c00160c3:	eb 05                	jmp    c00160ca <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00160c5:	b8 07 00 00 00       	mov    eax,0x7
c00160ca:	5b                   	pop    ebx
c00160cb:	5e                   	pop    esi
c00160cc:	5f                   	pop    edi
c00160cd:	c3                   	ret    

c00160ce <Mouse::Mouse(char const*)>:
c00160ce:	83 ec 0c             	sub    esp,0xc
c00160d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160d5:	83 ec 08             	sub    esp,0x8
c00160d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160dc:	50                   	push   eax
c00160dd:	e8 fc db ff ff       	call   c0013cde <Device::Device(char const*)>
c00160e2:	83 c4 10             	add    esp,0x10
c00160e5:	ba 60 af 02 c0       	mov    edx,0xc002af60
c00160ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160ee:	89 10                	mov    DWORD PTR [eax],edx
c00160f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160f4:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00160fe:	90                   	nop
c00160ff:	83 c4 0c             	add    esp,0xc
c0016102:	c3                   	ret    
c0016103:	90                   	nop

c0016104 <Mouse::~Mouse()>:
c0016104:	83 ec 0c             	sub    esp,0xc
c0016107:	ba 60 af 02 c0       	mov    edx,0xc002af60
c001610c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016110:	89 10                	mov    DWORD PTR [eax],edx
c0016112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016116:	83 ec 0c             	sub    esp,0xc
c0016119:	50                   	push   eax
c001611a:	e8 89 d8 ff ff       	call   c00139a8 <Device::~Device()>
c001611f:	83 c4 10             	add    esp,0x10
c0016122:	90                   	nop
c0016123:	83 c4 0c             	add    esp,0xc
c0016126:	c3                   	ret    
c0016127:	90                   	nop

c0016128 <Mouse::~Mouse()>:
c0016128:	83 ec 0c             	sub    esp,0xc
c001612b:	83 ec 0c             	sub    esp,0xc
c001612e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016132:	e8 cd ff ff ff       	call   c0016104 <Mouse::~Mouse()>
c0016137:	83 c4 10             	add    esp,0x10
c001613a:	83 ec 08             	sub    esp,0x8
c001613d:	68 58 01 00 00       	push   0x158
c0016142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016146:	e8 7e c4 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c001614b:	83 c4 10             	add    esp,0x10
c001614e:	83 c4 0c             	add    esp,0xc
c0016151:	c3                   	ret    

c0016152 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016152:	55                   	push   ebp
c0016153:	57                   	push   edi
c0016154:	56                   	push   esi
c0016155:	53                   	push   ebx
c0016156:	81 ec 28 01 00 00    	sub    esp,0x128
c001615c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016163:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001616a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016171:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016178:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001617c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016180:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016187:	e8 4e dc ff ff       	call   c0013dda <Device::getName()>
c001618c:	5a                   	pop    edx
c001618d:	59                   	pop    ecx
c001618e:	50                   	push   eax
c001618f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016193:	55                   	push   ebp
c0016194:	e8 73 a6 fe ff       	call   c000080c <strcpy>
c0016199:	5b                   	pop    ebx
c001619a:	58                   	pop    eax
c001619b:	68 84 af 02 c0       	push   0xc002af84
c00161a0:	55                   	push   ebp
c00161a1:	e8 a6 a7 fe ff       	call   c000094c <strcat>
c00161a6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00161ad:	e8 e7 93 ff ff       	call   c000f599 <malloc>
c00161b2:	83 c4 0c             	add    esp,0xc
c00161b5:	89 c3                	mov    ebx,eax
c00161b7:	57                   	push   edi
c00161b8:	56                   	push   esi
c00161b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161c1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00161c8:	55                   	push   ebp
c00161c9:	50                   	push   eax
c00161ca:	e8 f9 fb ff ff       	call   c0015dc8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00161cf:	83 c4 14             	add    esp,0x14
c00161d2:	53                   	push   ebx
c00161d3:	e8 a6 fc ff ff       	call   c0015e7e <LogicalDisk::assignDriveLetter()>
c00161d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161db:	e8 54 fd ff ff       	call   c0015f34 <LogicalDisk::mount()>
c00161e0:	58                   	pop    eax
c00161e1:	5a                   	pop    edx
c00161e2:	53                   	push   ebx
c00161e3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00161ea:	e8 eb d8 ff ff       	call   c0013ada <Device::addChild(Device*)>
c00161ef:	81 c4 2c 01 00 00    	add    esp,0x12c
c00161f5:	5b                   	pop    ebx
c00161f6:	5e                   	pop    esi
c00161f7:	5f                   	pop    edi
c00161f8:	5d                   	pop    ebp
c00161f9:	c3                   	ret    

c00161fa <createPartitionsForDisk(PhysicalDisk*)>:
c00161fa:	55                   	push   ebp
c00161fb:	57                   	push   edi
c00161fc:	56                   	push   esi
c00161fd:	53                   	push   ebx
c00161fe:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016204:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001620b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016211:	3d 00 02 00 00       	cmp    eax,0x200
c0016216:	74 27                	je     c001623f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016218:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001621e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016224:	83 ec 10             	sub    esp,0x10
c0016227:	0f a4 f7 0a          	shld   edi,esi,0xa
c001622b:	99                   	cdq    
c001622c:	c1 e6 0a             	shl    esi,0xa
c001622f:	52                   	push   edx
c0016230:	89 fd                	mov    ebp,edi
c0016232:	50                   	push   eax
c0016233:	55                   	push   ebp
c0016234:	56                   	push   esi
c0016235:	e8 aa 04 01 00       	call   c00266e4 <__udivdi3>
c001623a:	e9 b1 00 00 00       	jmp    c00162f0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001623f:	83 ec 0c             	sub    esp,0xc
c0016242:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016244:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016248:	56                   	push   esi
c0016249:	6a 01                	push   0x1
c001624b:	6a 00                	push   0x0
c001624d:	6a 00                	push   0x0
c001624f:	53                   	push   ebx
c0016250:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016253:	83 c4 20             	add    esp,0x20
c0016256:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001625e:	75 0a                	jne    c001626a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016260:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016268:	74 2c                	je     c0016296 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001626a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016270:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016276:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001627c:	83 ec 10             	sub    esp,0x10
c001627f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016283:	89 f7                	mov    edi,esi
c0016285:	c1 e0 0a             	shl    eax,0xa
c0016288:	c1 ff 1f             	sar    edi,0x1f
c001628b:	57                   	push   edi
c001628c:	56                   	push   esi
c001628d:	52                   	push   edx
c001628e:	50                   	push   eax
c001628f:	e8 50 04 01 00       	call   c00266e4 <__udivdi3>
c0016294:	eb 5a                	jmp    c00162f0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016296:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001629d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00162a4:	83 e1 7f             	and    ecx,0x7f
c00162a7:	83 e0 7f             	and    eax,0x7f
c00162aa:	01 c1                	add    ecx,eax
c00162ac:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00162b3:	83 e0 7f             	and    eax,0x7f
c00162b6:	01 c1                	add    ecx,eax
c00162b8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00162bf:	83 e0 7f             	and    eax,0x7f
c00162c2:	00 c1                	add    cl,al
c00162c4:	74 41                	je     c0016307 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00162c6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162cc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162d2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162d8:	83 ec 10             	sub    esp,0x10
c00162db:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162df:	89 f7                	mov    edi,esi
c00162e1:	c1 e0 0a             	shl    eax,0xa
c00162e4:	c1 ff 1f             	sar    edi,0x1f
c00162e7:	57                   	push   edi
c00162e8:	56                   	push   esi
c00162e9:	52                   	push   edx
c00162ea:	50                   	push   eax
c00162eb:	e8 f4 03 01 00       	call   c00266e4 <__udivdi3>
c00162f0:	83 c4 14             	add    esp,0x14
c00162f3:	52                   	push   edx
c00162f4:	50                   	push   eax
c00162f5:	6a 00                	push   0x0
c00162f7:	6a 00                	push   0x0
c00162f9:	53                   	push   ebx
c00162fa:	e8 53 fe ff ff       	call   c0016152 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00162ff:	83 c4 20             	add    esp,0x20
c0016302:	e9 79 01 00 00       	jmp    c0016480 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016307:	89 f0                	mov    eax,esi
c0016309:	31 f6                	xor    esi,esi
c001630b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016312:	75 02                	jne    c0016316 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016314:	89 f1                	mov    ecx,esi
c0016316:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001631d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016324:	c1 e2 08             	shl    edx,0x8
c0016327:	c1 e7 10             	shl    edi,0x10
c001632a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016332:	09 fa                	or     edx,edi
c0016334:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001633c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016343:	83 c0 10             	add    eax,0x10
c0016346:	09 fa                	or     edx,edi
c0016348:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001634f:	c1 e7 18             	shl    edi,0x18
c0016352:	09 fa                	or     edx,edi
c0016354:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001635b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001635f:	c1 e7 10             	shl    edi,0x10
c0016362:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016369:	c1 e2 08             	shl    edx,0x8
c001636c:	09 fa                	or     edx,edi
c001636e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016375:	09 fa                	or     edx,edi
c0016377:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001637e:	c1 e7 18             	shl    edi,0x18
c0016381:	09 fa                	or     edx,edi
c0016383:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016387:	46                   	inc    esi
c0016388:	83 fe 04             	cmp    esi,0x4
c001638b:	0f 85 7a ff ff ff    	jne    c001630b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016395:	83 f0 01             	xor    eax,0x1
c0016398:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001639c:	75 57                	jne    c00163f5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001639e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163a2:	83 f0 01             	xor    eax,0x1
c00163a5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00163a9:	75 4a                	jne    c00163f5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163ab:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00163af:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00163b7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00163bf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00163c5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00163cb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00163d1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00163d5:	89 f7                	mov    edi,esi
c00163d7:	c1 e0 0a             	shl    eax,0xa
c00163da:	c1 ff 1f             	sar    edi,0x1f
c00163dd:	57                   	push   edi
c00163de:	56                   	push   esi
c00163df:	52                   	push   edx
c00163e0:	50                   	push   eax
c00163e1:	e8 fe 02 01 00       	call   c00266e4 <__udivdi3>
c00163e6:	83 c4 10             	add    esp,0x10
c00163e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00163ed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00163f1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00163f5:	84 c9                	test   cl,cl
c00163f7:	74 53                	je     c001644c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00163f9:	0f b6 c9             	movzx  ecx,cl
c00163fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016400:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016404:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016408:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001640c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016410:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016414:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016418:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001641c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016420:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016428:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001642c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016430:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016434:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016438:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001643c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016440:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016444:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016448:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001644c:	31 ed                	xor    ebp,ebp
c001644e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016452:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016456:	89 f8                	mov    eax,edi
c0016458:	09 f0                	or     eax,esi
c001645a:	74 1e                	je     c001647a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001645c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016460:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016464:	89 d1                	mov    ecx,edx
c0016466:	09 c1                	or     ecx,eax
c0016468:	74 10                	je     c001647a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001646a:	83 ec 0c             	sub    esp,0xc
c001646d:	57                   	push   edi
c001646e:	56                   	push   esi
c001646f:	52                   	push   edx
c0016470:	50                   	push   eax
c0016471:	53                   	push   ebx
c0016472:	e8 db fc ff ff       	call   c0016152 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016477:	83 c4 20             	add    esp,0x20
c001647a:	45                   	inc    ebp
c001647b:	83 fd 04             	cmp    ebp,0x4
c001647e:	75 ce                	jne    c001644e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016480:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016486:	5b                   	pop    ebx
c0016487:	5e                   	pop    esi
c0016488:	5f                   	pop    edi
c0016489:	5d                   	pop    ebp
c001648a:	c3                   	ret    
c001648b:	90                   	nop

c001648c <Serial::Serial(char const*)>:
c001648c:	83 ec 0c             	sub    esp,0xc
c001648f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016493:	83 ec 08             	sub    esp,0x8
c0016496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001649a:	50                   	push   eax
c001649b:	e8 3e d8 ff ff       	call   c0013cde <Device::Device(char const*)>
c00164a0:	83 c4 10             	add    esp,0x10
c00164a3:	ba 98 af 02 c0       	mov    edx,0xc002af98
c00164a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ac:	89 10                	mov    DWORD PTR [eax],edx
c00164ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00164bc:	90                   	nop
c00164bd:	83 c4 0c             	add    esp,0xc
c00164c0:	c3                   	ret    
c00164c1:	90                   	nop

c00164c2 <Serial::~Serial()>:
c00164c2:	83 ec 0c             	sub    esp,0xc
c00164c5:	ba 98 af 02 c0       	mov    edx,0xc002af98
c00164ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ce:	89 10                	mov    DWORD PTR [eax],edx
c00164d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d4:	83 ec 0c             	sub    esp,0xc
c00164d7:	50                   	push   eax
c00164d8:	e8 cb d4 ff ff       	call   c00139a8 <Device::~Device()>
c00164dd:	83 c4 10             	add    esp,0x10
c00164e0:	90                   	nop
c00164e1:	83 c4 0c             	add    esp,0xc
c00164e4:	c3                   	ret    
c00164e5:	90                   	nop

c00164e6 <Serial::~Serial()>:
c00164e6:	83 ec 0c             	sub    esp,0xc
c00164e9:	83 ec 0c             	sub    esp,0xc
c00164ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164f0:	e8 cd ff ff ff       	call   c00164c2 <Serial::~Serial()>
c00164f5:	83 c4 10             	add    esp,0x10
c00164f8:	83 ec 08             	sub    esp,0x8
c00164fb:	68 58 01 00 00       	push   0x158
c0016500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016504:	e8 c0 c0 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0016509:	83 c4 10             	add    esp,0x10
c001650c:	83 c4 0c             	add    esp,0xc
c001650f:	c3                   	ret    

c0016510 <Timer::Timer(char const*)>:
c0016510:	83 ec 0c             	sub    esp,0xc
c0016513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016517:	83 ec 08             	sub    esp,0x8
c001651a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001651e:	50                   	push   eax
c001651f:	e8 ba d7 ff ff       	call   c0013cde <Device::Device(char const*)>
c0016524:	83 c4 10             	add    esp,0x10
c0016527:	ba dc af 02 c0       	mov    edx,0xc002afdc
c001652c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016530:	89 10                	mov    DWORD PTR [eax],edx
c0016532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016536:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016540:	90                   	nop
c0016541:	83 c4 0c             	add    esp,0xc
c0016544:	c3                   	ret    
c0016545:	90                   	nop

c0016546 <Timer::~Timer()>:
c0016546:	83 ec 0c             	sub    esp,0xc
c0016549:	ba dc af 02 c0       	mov    edx,0xc002afdc
c001654e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016552:	89 10                	mov    DWORD PTR [eax],edx
c0016554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016558:	83 ec 0c             	sub    esp,0xc
c001655b:	50                   	push   eax
c001655c:	e8 47 d4 ff ff       	call   c00139a8 <Device::~Device()>
c0016561:	83 c4 10             	add    esp,0x10
c0016564:	90                   	nop
c0016565:	83 c4 0c             	add    esp,0xc
c0016568:	c3                   	ret    
c0016569:	90                   	nop

c001656a <Timer::~Timer()>:
c001656a:	83 ec 0c             	sub    esp,0xc
c001656d:	83 ec 0c             	sub    esp,0xc
c0016570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016574:	e8 cd ff ff ff       	call   c0016546 <Timer::~Timer()>
c0016579:	83 c4 10             	add    esp,0x10
c001657c:	83 ec 08             	sub    esp,0x8
c001657f:	68 5c 01 00 00       	push   0x15c
c0016584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016588:	e8 3c c0 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c001658d:	83 c4 10             	add    esp,0x10
c0016590:	83 c4 0c             	add    esp,0xc
c0016593:	c3                   	ret    

c0016594 <Timer::read()>:
c0016594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016598:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001659e:	c3                   	ret    

c001659f <timerHandler(unsigned long long)>:
c001659f:	55                   	push   ebp
c00165a0:	57                   	push   edi
c00165a1:	56                   	push   esi
c00165a2:	53                   	push   ebx
c00165a3:	83 ec 0c             	sub    esp,0xc
c00165a6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00165aa:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00165ae:	01 35 90 df 02 c0    	add    DWORD PTR ds:0xc002df90,esi
c00165b4:	11 3d 94 df 02 c0    	adc    DWORD PTR ds:0xc002df94,edi
c00165ba:	80 3d 2d d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d92d,0x0
c00165c1:	0f 84 42 01 00 00    	je     c0016709 <timerHandler(unsigned long long)+0x16a>
c00165c7:	fa                   	cli    
c00165c8:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c00165ce:	83 ec 0c             	sub    esp,0xc
c00165d1:	ff 05 44 0e 03 c0    	inc    DWORD PTR ds:0xc0030e44
c00165d7:	68 58 0e 03 c0       	push   0xc0030e58
c00165dc:	e8 5d 21 01 00       	call   c002873e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165e1:	83 c4 10             	add    esp,0x10
c00165e4:	84 c0                	test   al,al
c00165e6:	0f 85 a2 00 00 00    	jne    c001668e <timerHandler(unsigned long long)+0xef>
c00165ec:	83 ec 0c             	sub    esp,0xc
c00165ef:	68 58 0e 03 c0       	push   0xc0030e58
c00165f4:	e8 61 21 01 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165f9:	83 c4 10             	add    esp,0x10
c00165fc:	89 c3                	mov    ebx,eax
c00165fe:	83 ec 0c             	sub    esp,0xc
c0016601:	68 58 0e 03 c0       	push   0xc0030e58
c0016606:	e8 4f 21 01 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001660b:	c7 04 24 58 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e58
c0016612:	89 c5                	mov    ebp,eax
c0016614:	e8 49 21 01 00       	call   c0028762 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016619:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001661c:	83 c4 10             	add    esp,0x10
c001661f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016622:	39 15 90 df 02 c0    	cmp    DWORD PTR ds:0xc002df90,edx
c0016628:	a1 94 df 02 c0       	mov    eax,ds:0xc002df94
c001662d:	19 c8                	sbb    eax,ecx
c001662f:	72 21                	jb     c0016652 <timerHandler(unsigned long long)+0xb3>
c0016631:	83 ec 0c             	sub    esp,0xc
c0016634:	55                   	push   ebp
c0016635:	e8 e0 77 00 00       	call   c001de1a <unblockTask(ThreadControlBlock*)>
c001663a:	83 c4 10             	add    esp,0x10
c001663d:	39 eb                	cmp    ebx,ebp
c001663f:	75 21                	jne    c0016662 <timerHandler(unsigned long long)+0xc3>
c0016641:	83 ec 0c             	sub    esp,0xc
c0016644:	68 58 0e 03 c0       	push   0xc0030e58
c0016649:	e8 0c 21 01 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001664e:	89 c3                	mov    ebx,eax
c0016650:	eb 0d                	jmp    c001665f <timerHandler(unsigned long long)+0xc0>
c0016652:	50                   	push   eax
c0016653:	50                   	push   eax
c0016654:	55                   	push   ebp
c0016655:	68 58 0e 03 c0       	push   0xc0030e58
c001665a:	e8 b1 21 01 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001665f:	83 c4 10             	add    esp,0x10
c0016662:	83 ec 0c             	sub    esp,0xc
c0016665:	68 58 0e 03 c0       	push   0xc0030e58
c001666a:	e8 cf 20 01 00       	call   c002873e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001666f:	83 c4 10             	add    esp,0x10
c0016672:	84 c0                	test   al,al
c0016674:	75 18                	jne    c001668e <timerHandler(unsigned long long)+0xef>
c0016676:	83 ec 0c             	sub    esp,0xc
c0016679:	68 58 0e 03 c0       	push   0xc0030e58
c001667e:	e8 d7 20 01 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016683:	83 c4 10             	add    esp,0x10
c0016686:	39 d8                	cmp    eax,ebx
c0016688:	0f 85 70 ff ff ff    	jne    c00165fe <timerHandler(unsigned long long)+0x5f>
c001668e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016693:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016697:	74 3d                	je     c00166d6 <timerHandler(unsigned long long)+0x137>
c0016699:	80 3d 2c d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d92c,0x0
c00166a0:	74 34                	je     c00166d6 <timerHandler(unsigned long long)+0x137>
c00166a2:	fa                   	cli    
c00166a3:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c00166a9:	31 d2                	xor    edx,edx
c00166ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166b0:	89 f9                	mov    ecx,edi
c00166b2:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00166b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00166bd:	39 c6                	cmp    esi,eax
c00166bf:	19 d1                	sbb    ecx,edx
c00166c1:	72 05                	jb     c00166c8 <timerHandler(unsigned long long)+0x129>
c00166c3:	e8 cf 72 00 00       	call   c001d997 <schedule()>
c00166c8:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00166cd:	48                   	dec    eax
c00166ce:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c00166d3:	75 01                	jne    c00166d6 <timerHandler(unsigned long long)+0x137>
c00166d5:	fb                   	sti    
c00166d6:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c00166db:	48                   	dec    eax
c00166dc:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c00166e1:	75 18                	jne    c00166fb <timerHandler(unsigned long long)+0x15c>
c00166e3:	83 3d 40 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e40,0x0
c00166ea:	74 0f                	je     c00166fb <timerHandler(unsigned long long)+0x15c>
c00166ec:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c00166f6:	e8 9c 72 00 00       	call   c001d997 <schedule()>
c00166fb:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0016700:	48                   	dec    eax
c0016701:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0016706:	75 01                	jne    c0016709 <timerHandler(unsigned long long)+0x16a>
c0016708:	fb                   	sti    
c0016709:	83 c4 0c             	add    esp,0xc
c001670c:	5b                   	pop    ebx
c001670d:	5e                   	pop    esi
c001670e:	5f                   	pop    edi
c001670f:	5d                   	pop    ebp
c0016710:	c3                   	ret    

c0016711 <setupTimer(int)>:
c0016711:	57                   	push   edi
c0016712:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0016717:	56                   	push   esi
c0016718:	53                   	push   ebx
c0016719:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001671d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016723:	83 ec 0c             	sub    esp,0xc
c0016726:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001672c:	e8 a9 d6 ff ff       	call   c0013dda <Device::getName()>
c0016731:	83 c4 10             	add    esp,0x10
c0016734:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016737:	0f 85 8d 00 00 00    	jne    c00167ca <setupTimer(int)+0xb9>
c001673d:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0016742:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016749:	74 7f                	je     c00167ca <setupTimer(int)+0xb9>
c001674b:	83 ec 0c             	sub    esp,0xc
c001674e:	68 5c 01 00 00       	push   0x15c
c0016753:	e8 41 8e ff ff       	call   c000f599 <malloc>
c0016758:	89 04 24             	mov    DWORD PTR [esp],eax
c001675b:	89 c3                	mov    ebx,eax
c001675d:	e8 54 fb 00 00       	call   c00262b6 <PIT::PIT()>
c0016762:	59                   	pop    ecx
c0016763:	5f                   	pop    edi
c0016764:	53                   	push   ebx
c0016765:	ff 35 28 d9 02 c0    	push   DWORD PTR ds:0xc002d928
c001676b:	e8 6a d3 ff ff       	call   c0013ada <Device::addChild(Device*)>
c0016770:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016772:	6a 00                	push   0x0
c0016774:	6a 00                	push   0x0
c0016776:	56                   	push   esi
c0016777:	53                   	push   ebx
c0016778:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001677b:	83 c4 14             	add    esp,0x14
c001677e:	68 60 01 00 00       	push   0x160
c0016783:	e8 11 8e ff ff       	call   c000f599 <malloc>
c0016788:	89 04 24             	mov    DWORD PTR [esp],eax
c001678b:	89 c7                	mov    edi,eax
c001678d:	e8 d4 f9 00 00       	call   c0026166 <APICTimer::APICTimer()>
c0016792:	6a 00                	push   0x0
c0016794:	6a 00                	push   0x0
c0016796:	56                   	push   esi
c0016797:	57                   	push   edi
c0016798:	e8 cb f8 00 00       	call   c0026068 <APICTimer::open(int, int, void*)>
c001679d:	83 c4 20             	add    esp,0x20
c00167a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167a2:	6a 00                	push   0x0
c00167a4:	6a 00                	push   0x0
c00167a6:	6a 00                	push   0x0
c00167a8:	53                   	push   ebx
c00167a9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00167ac:	58                   	pop    eax
c00167ad:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00167b2:	5a                   	pop    edx
c00167b3:	57                   	push   edi
c00167b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167ba:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00167c0:	e8 15 d3 ff ff       	call   c0013ada <Device::addChild(Device*)>
c00167c5:	83 c4 10             	add    esp,0x10
c00167c8:	eb 33                	jmp    c00167fd <setupTimer(int)+0xec>
c00167ca:	83 ec 0c             	sub    esp,0xc
c00167cd:	68 5c 01 00 00       	push   0x15c
c00167d2:	e8 c2 8d ff ff       	call   c000f599 <malloc>
c00167d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00167da:	89 c3                	mov    ebx,eax
c00167dc:	e8 d5 fa 00 00       	call   c00262b6 <PIT::PIT()>
c00167e1:	58                   	pop    eax
c00167e2:	5a                   	pop    edx
c00167e3:	53                   	push   ebx
c00167e4:	ff 35 28 d9 02 c0    	push   DWORD PTR ds:0xc002d928
c00167ea:	e8 eb d2 ff ff       	call   c0013ada <Device::addChild(Device*)>
c00167ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167f1:	6a 00                	push   0x0
c00167f3:	6a 00                	push   0x0
c00167f5:	56                   	push   esi
c00167f6:	53                   	push   ebx
c00167f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167fa:	83 c4 20             	add    esp,0x20
c00167fd:	89 d8                	mov    eax,ebx
c00167ff:	5b                   	pop    ebx
c0016800:	5e                   	pop    esi
c0016801:	5f                   	pop    edi
c0016802:	c3                   	ret    
c0016803:	90                   	nop

c0016804 <VCache::VCache(PhysicalDisk*)>:
c0016804:	53                   	push   ebx
c0016805:	83 ec 18             	sub    esp,0x18
c0016808:	ba 0c b0 02 c0       	mov    edx,0xc002b00c
c001680d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016811:	89 10                	mov    DWORD PTR [eax],edx
c0016813:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016817:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001681e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016822:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001682d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016834:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001683b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016846:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001684d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016851:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001685c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016860:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016864:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001686b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016876:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001687a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001687e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016886:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001688a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001688e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016895:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001689d:	83 ec 0c             	sub    esp,0xc
c00168a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168a4:	e8 f0 8c ff ff       	call   c000f599 <malloc>
c00168a9:	83 c4 10             	add    esp,0x10
c00168ac:	89 c3                	mov    ebx,eax
c00168ae:	83 ec 0c             	sub    esp,0xc
c00168b1:	53                   	push   ebx
c00168b2:	e8 a9 6e 00 00       	call   c001d760 <Mutex::Mutex()>
c00168b7:	83 c4 10             	add    esp,0x10
c00168ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168be:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00168c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168c5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00168c9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00168cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168d0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00168d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168db:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00168e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00168e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168ec:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00168f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00168f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00168fc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00168ff:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016906:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001690a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001690e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016914:	05 00 01 00 00       	add    eax,0x100
c0016919:	c1 e0 04             	shl    eax,0x4
c001691c:	83 ec 0c             	sub    esp,0xc
c001691f:	50                   	push   eax
c0016920:	e8 74 8c ff ff       	call   c000f599 <malloc>
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	89 c2                	mov    edx,eax
c001692a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001692e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016935:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001693c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016940:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016944:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016948:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001694e:	c1 e0 07             	shl    eax,0x7
c0016951:	83 ec 0c             	sub    esp,0xc
c0016954:	50                   	push   eax
c0016955:	e8 3f 8c ff ff       	call   c000f599 <malloc>
c001695a:	83 c4 10             	add    esp,0x10
c001695d:	89 c2                	mov    edx,eax
c001695f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016963:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016966:	90                   	nop
c0016967:	83 c4 18             	add    esp,0x18
c001696a:	5b                   	pop    ebx
c001696b:	c3                   	ret    

c001696c <VCache::invalidateReadBuffer()>:
c001696c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016970:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016976:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001697a:	c3                   	ret    
c001697b:	90                   	nop

c001697c <VCache::writeWriteBuffer()>:
c001697c:	53                   	push   ebx
c001697d:	83 ec 14             	sub    esp,0x14
c0016980:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016984:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016987:	8b 10                	mov    edx,DWORD PTR [eax]
c0016989:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001698c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001698f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016992:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016995:	50                   	push   eax
c0016996:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016999:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00169a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00169a7:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00169ab:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00169b2:	83 c4 28             	add    esp,0x28
c00169b5:	5b                   	pop    ebx
c00169b6:	c3                   	ret    
c00169b7:	90                   	nop

c00169b8 <VCache::~VCache()>:
c00169b8:	83 ec 0c             	sub    esp,0xc
c00169bb:	ba 0c b0 02 c0       	mov    edx,0xc002b00c
c00169c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169c4:	89 10                	mov    DWORD PTR [eax],edx
c00169c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169ca:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00169cd:	84 c0                	test   al,al
c00169cf:	74 0f                	je     c00169e0 <VCache::~VCache()+0x28>
c00169d1:	83 ec 0c             	sub    esp,0xc
c00169d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169d8:	e8 9f ff ff ff       	call   c001697c <VCache::writeWriteBuffer()>
c00169dd:	83 c4 10             	add    esp,0x10
c00169e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169e4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00169e7:	83 ec 0c             	sub    esp,0xc
c00169ea:	50                   	push   eax
c00169eb:	e8 b9 8b ff ff       	call   c000f5a9 <free>
c00169f0:	83 c4 10             	add    esp,0x10
c00169f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00169fa:	83 ec 0c             	sub    esp,0xc
c00169fd:	50                   	push   eax
c00169fe:	e8 a6 8b ff ff       	call   c000f5a9 <free>
c0016a03:	83 c4 10             	add    esp,0x10
c0016a06:	90                   	nop
c0016a07:	83 c4 0c             	add    esp,0xc
c0016a0a:	c3                   	ret    
c0016a0b:	90                   	nop

c0016a0c <VCache::~VCache()>:
c0016a0c:	83 ec 0c             	sub    esp,0xc
c0016a0f:	83 ec 0c             	sub    esp,0xc
c0016a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a16:	e8 9d ff ff ff       	call   c00169b8 <VCache::~VCache()>
c0016a1b:	83 c4 10             	add    esp,0x10
c0016a1e:	83 ec 08             	sub    esp,0x8
c0016a21:	6a 44                	push   0x44
c0016a23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a27:	e8 9d bb ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0016a2c:	83 c4 10             	add    esp,0x10
c0016a2f:	83 c4 0c             	add    esp,0xc
c0016a32:	c3                   	ret    
c0016a33:	90                   	nop

c0016a34 <VCache::write(unsigned long long, int, void*)>:
c0016a34:	55                   	push   ebp
c0016a35:	57                   	push   edi
c0016a36:	56                   	push   esi
c0016a37:	53                   	push   ebx
c0016a38:	83 ec 18             	sub    esp,0x18
c0016a3b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016a3f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a43:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a4a:	e8 57 72 00 00       	call   c001dca6 <Semaphore::acquire()>
c0016a4f:	83 c4 10             	add    esp,0x10
c0016a52:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016a56:	74 0c                	je     c0016a64 <VCache::write(unsigned long long, int, void*)+0x30>
c0016a58:	83 ec 0c             	sub    esp,0xc
c0016a5b:	53                   	push   ebx
c0016a5c:	e8 0b ff ff ff       	call   c001696c <VCache::invalidateReadBuffer()>
c0016a61:	83 c4 10             	add    esp,0x10
c0016a64:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a68:	74 5c                	je     c0016ac6 <VCache::write(unsigned long long, int, void*)+0x92>
c0016a6a:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016a6d:	89 e8                	mov    eax,ebp
c0016a6f:	99                   	cdq    
c0016a70:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016a73:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016a76:	89 c1                	mov    ecx,eax
c0016a78:	89 d0                	mov    eax,edx
c0016a7a:	31 f1                	xor    ecx,esi
c0016a7c:	31 f8                	xor    eax,edi
c0016a7e:	09 c1                	or     ecx,eax
c0016a80:	75 38                	jne    c0016aba <VCache::write(unsigned long long, int, void*)+0x86>
c0016a82:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016a87:	75 31                	jne    c0016aba <VCache::write(unsigned long long, int, void*)+0x86>
c0016a89:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a8c:	89 ef                	mov    edi,ebp
c0016a8e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016a94:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a98:	0f af f9             	imul   edi,ecx
c0016a9b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016a9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016aa0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016aa3:	40                   	inc    eax
c0016aa4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016aa7:	83 c0 80             	add    eax,0xffffff80
c0016aaa:	75 5c                	jne    c0016b08 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016aac:	83 ec 0c             	sub    esp,0xc
c0016aaf:	53                   	push   ebx
c0016ab0:	e8 c7 fe ff ff       	call   c001697c <VCache::writeWriteBuffer()>
c0016ab5:	83 c4 10             	add    esp,0x10
c0016ab8:	eb 4e                	jmp    c0016b08 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016aba:	83 ec 0c             	sub    esp,0xc
c0016abd:	53                   	push   ebx
c0016abe:	e8 b9 fe ff ff       	call   c001697c <VCache::writeWriteBuffer()>
c0016ac3:	83 c4 10             	add    esp,0x10
c0016ac6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ac9:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016ace:	7f 22                	jg     c0016af2 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016ad0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016ad3:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016ad6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016ada:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016ade:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016ae1:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016ae4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016aea:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016aee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016af0:	eb 16                	jmp    c0016b08 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016af2:	83 ec 0c             	sub    esp,0xc
c0016af5:	8b 10                	mov    edx,DWORD PTR [eax]
c0016af7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016afb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016aff:	57                   	push   edi
c0016b00:	56                   	push   esi
c0016b01:	50                   	push   eax
c0016b02:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b05:	83 c4 20             	add    esp,0x20
c0016b08:	83 ec 0c             	sub    esp,0xc
c0016b0b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b0e:	e8 ef 77 00 00       	call   c001e302 <Semaphore::release()>
c0016b13:	83 c4 1c             	add    esp,0x1c
c0016b16:	31 c0                	xor    eax,eax
c0016b18:	5b                   	pop    ebx
c0016b19:	5e                   	pop    esi
c0016b1a:	5f                   	pop    edi
c0016b1b:	5d                   	pop    ebp
c0016b1c:	c3                   	ret    
c0016b1d:	90                   	nop

c0016b1e <VCache::read(unsigned long long, int, void*)>:
c0016b1e:	55                   	push   ebp
c0016b1f:	57                   	push   edi
c0016b20:	56                   	push   esi
c0016b21:	53                   	push   ebx
c0016b22:	83 ec 28             	sub    esp,0x28
c0016b25:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b29:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016b2d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b31:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016b35:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b38:	e8 69 71 00 00       	call   c001dca6 <Semaphore::acquire()>
c0016b3d:	83 c4 10             	add    esp,0x10
c0016b40:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b44:	74 0c                	je     c0016b52 <VCache::read(unsigned long long, int, void*)+0x34>
c0016b46:	83 ec 0c             	sub    esp,0xc
c0016b49:	53                   	push   ebx
c0016b4a:	e8 2d fe ff ff       	call   c001697c <VCache::writeWriteBuffer()>
c0016b4f:	83 c4 10             	add    esp,0x10
c0016b52:	83 fd 01             	cmp    ebp,0x1
c0016b55:	0f 85 80 00 00 00    	jne    c0016bdb <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b5b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b62:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016b69:	75 70                	jne    c0016bdb <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b6b:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016b6e:	89 e9                	mov    ecx,ebp
c0016b70:	f7 d9                	neg    ecx
c0016b72:	89 c8                	mov    eax,ecx
c0016b74:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016b78:	c1 f8 1f             	sar    eax,0x1f
c0016b7b:	21 f1                	and    ecx,esi
c0016b7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b81:	89 c8                	mov    eax,ecx
c0016b83:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b87:	21 f9                	and    ecx,edi
c0016b89:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016b8d:	89 ca                	mov    edx,ecx
c0016b8f:	74 0a                	je     c0016b9b <VCache::read(unsigned long long, int, void*)+0x7d>
c0016b91:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016b94:	75 05                	jne    c0016b9b <VCache::read(unsigned long long, int, void*)+0x7d>
c0016b96:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016b99:	74 23                	je     c0016bbe <VCache::read(unsigned long long, int, void*)+0xa0>
c0016b9b:	83 ec 0c             	sub    esp,0xc
c0016b9e:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016ba2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016ba6:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016ba9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016bac:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016bae:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016bb1:	55                   	push   ebp
c0016bb2:	52                   	push   edx
c0016bb3:	50                   	push   eax
c0016bb4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016bb8:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016bbb:	83 c4 20             	add    esp,0x20
c0016bbe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bc1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016bc5:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016bcb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016bce:	48                   	dec    eax
c0016bcf:	21 c6                	and    esi,eax
c0016bd1:	0f af f1             	imul   esi,ecx
c0016bd4:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016bd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bd9:	eb 1d                	jmp    c0016bf8 <VCache::read(unsigned long long, int, void*)+0xda>
c0016bdb:	83 ec 0c             	sub    esp,0xc
c0016bde:	53                   	push   ebx
c0016bdf:	e8 88 fd ff ff       	call   c001696c <VCache::invalidateReadBuffer()>
c0016be4:	5a                   	pop    edx
c0016be5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016be8:	8b 10                	mov    edx,DWORD PTR [eax]
c0016bea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016bee:	55                   	push   ebp
c0016bef:	57                   	push   edi
c0016bf0:	56                   	push   esi
c0016bf1:	50                   	push   eax
c0016bf2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016bf5:	83 c4 20             	add    esp,0x20
c0016bf8:	83 ec 0c             	sub    esp,0xc
c0016bfb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bfe:	e8 ff 76 00 00       	call   c001e302 <Semaphore::release()>
c0016c03:	83 c4 2c             	add    esp,0x2c
c0016c06:	31 c0                	xor    eax,eax
c0016c08:	5b                   	pop    ebx
c0016c09:	5e                   	pop    esi
c0016c0a:	5f                   	pop    edi
c0016c0b:	5d                   	pop    ebp
c0016c0c:	c3                   	ret    
c0016c0d:	90                   	nop

c0016c0e <Video::putrect(int, int, int, int, unsigned int)>:
c0016c0e:	55                   	push   ebp
c0016c0f:	57                   	push   edi
c0016c10:	56                   	push   esi
c0016c11:	53                   	push   ebx
c0016c12:	83 ec 1c             	sub    esp,0x1c
c0016c15:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c1d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c21:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016c25:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c2d:	01 df                	add    edi,ebx
c0016c2f:	39 fb                	cmp    ebx,edi
c0016c31:	7d 1f                	jge    c0016c52 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016c33:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c37:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016c3b:	7d 12                	jge    c0016c4f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016c3d:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c3f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016c43:	53                   	push   ebx
c0016c44:	55                   	push   ebp
c0016c45:	45                   	inc    ebp
c0016c46:	56                   	push   esi
c0016c47:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016c4a:	83 c4 10             	add    esp,0x10
c0016c4d:	eb e8                	jmp    c0016c37 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016c4f:	43                   	inc    ebx
c0016c50:	eb dd                	jmp    c0016c2f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016c52:	83 c4 1c             	add    esp,0x1c
c0016c55:	5b                   	pop    ebx
c0016c56:	5e                   	pop    esi
c0016c57:	5f                   	pop    edi
c0016c58:	5d                   	pop    ebp
c0016c59:	c3                   	ret    

c0016c5a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016c5a:	55                   	push   ebp
c0016c5b:	57                   	push   edi
c0016c5c:	31 ff                	xor    edi,edi
c0016c5e:	56                   	push   esi
c0016c5f:	53                   	push   ebx
c0016c60:	83 ec 1c             	sub    esp,0x1c
c0016c63:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016c67:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016c6b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016c72:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016c77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c7b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016c7f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016c83:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016c86:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016c8a:	01 f9                	add    ecx,edi
c0016c8c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016c90:	7d 2f                	jge    c0016cc1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016c92:	31 f6                	xor    esi,esi
c0016c94:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016c98:	01 f2                	add    edx,esi
c0016c9a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016c9e:	7d 1a                	jge    c0016cba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016ca0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ca3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016ca6:	46                   	inc    esi
c0016ca7:	51                   	push   ecx
c0016ca8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016cac:	52                   	push   edx
c0016cad:	55                   	push   ebp
c0016cae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016cb1:	83 c4 10             	add    esp,0x10
c0016cb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cb8:	eb da                	jmp    c0016c94 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016cba:	47                   	inc    edi
c0016cbb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016cbf:	eb c5                	jmp    c0016c86 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016cc1:	83 c4 1c             	add    esp,0x1c
c0016cc4:	5b                   	pop    ebx
c0016cc5:	5e                   	pop    esi
c0016cc6:	5f                   	pop    edi
c0016cc7:	5d                   	pop    ebp
c0016cc8:	c3                   	ret    
c0016cc9:	90                   	nop

c0016cca <Video::blit(unsigned int*, int, int, int, int)>:
c0016cca:	55                   	push   ebp
c0016ccb:	57                   	push   edi
c0016ccc:	56                   	push   esi
c0016ccd:	53                   	push   ebx
c0016cce:	83 ec 1c             	sub    esp,0x1c
c0016cd1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016cd5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016cd9:	85 c0                	test   eax,eax
c0016cdb:	79 02                	jns    c0016cdf <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016cdd:	31 c0                	xor    eax,eax
c0016cdf:	c1 e0 02             	shl    eax,0x2
c0016ce2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016cee:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016cf2:	39 d8                	cmp    eax,ebx
c0016cf4:	7e 49                	jle    c0016d3f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016cf6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016cfc:	7c 41                	jl     c0016d3f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016cfe:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016d02:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d06:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d0a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016d0e:	39 f9                	cmp    ecx,edi
c0016d10:	7e 22                	jle    c0016d34 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016d12:	83 c5 04             	add    ebp,0x4
c0016d15:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d1b:	7c 14                	jl     c0016d31 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016d1d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016d1f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016d22:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d26:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d2a:	56                   	push   esi
c0016d2b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016d2e:	83 c4 10             	add    esp,0x10
c0016d31:	47                   	inc    edi
c0016d32:	eb d2                	jmp    c0016d06 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016d34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d38:	43                   	inc    ebx
c0016d39:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016d3d:	eb ab                	jmp    c0016cea <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016d3f:	83 c4 1c             	add    esp,0x1c
c0016d42:	5b                   	pop    ebx
c0016d43:	5e                   	pop    esi
c0016d44:	5f                   	pop    edi
c0016d45:	5d                   	pop    ebp
c0016d46:	c3                   	ret    
c0016d47:	90                   	nop

c0016d48 <Video::clearScreen(unsigned int)>:
c0016d48:	57                   	push   edi
c0016d49:	56                   	push   esi
c0016d4a:	53                   	push   ebx
c0016d4b:	31 db                	xor    ebx,ebx
c0016d4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d51:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d57:	7e 1f                	jle    c0016d78 <Video::clearScreen(unsigned int)+0x30>
c0016d59:	31 ff                	xor    edi,edi
c0016d5b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d61:	7e 12                	jle    c0016d75 <Video::clearScreen(unsigned int)+0x2d>
c0016d63:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d69:	53                   	push   ebx
c0016d6a:	57                   	push   edi
c0016d6b:	47                   	inc    edi
c0016d6c:	56                   	push   esi
c0016d6d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d70:	83 c4 10             	add    esp,0x10
c0016d73:	eb e6                	jmp    c0016d5b <Video::clearScreen(unsigned int)+0x13>
c0016d75:	43                   	inc    ebx
c0016d76:	eb d9                	jmp    c0016d51 <Video::clearScreen(unsigned int)+0x9>
c0016d78:	5b                   	pop    ebx
c0016d79:	5e                   	pop    esi
c0016d7a:	5f                   	pop    edi
c0016d7b:	c3                   	ret    

c0016d7c <Video::putpixel(int, int, unsigned int)>:
c0016d7c:	c7 44 24 04 14 b0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b014
c0016d84:	e9 84 30 00 00       	jmp    c0019e0d <Krnl::panic(char const*)>
c0016d89:	90                   	nop

c0016d8a <Video::Video(char const*)>:
c0016d8a:	83 ec 0c             	sub    esp,0xc
c0016d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d91:	83 ec 08             	sub    esp,0x8
c0016d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d98:	50                   	push   eax
c0016d99:	e8 40 cf ff ff       	call   c0013cde <Device::Device(char const*)>
c0016d9e:	83 c4 10             	add    esp,0x10
c0016da1:	ba 84 b0 02 c0       	mov    edx,0xc002b084
c0016da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016daa:	89 10                	mov    DWORD PTR [eax],edx
c0016dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016db0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016dba:	90                   	nop
c0016dbb:	83 c4 0c             	add    esp,0xc
c0016dbe:	c3                   	ret    
c0016dbf:	90                   	nop

c0016dc0 <Video::~Video()>:
c0016dc0:	83 ec 0c             	sub    esp,0xc
c0016dc3:	ba 84 b0 02 c0       	mov    edx,0xc002b084
c0016dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dcc:	89 10                	mov    DWORD PTR [eax],edx
c0016dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dd2:	83 ec 0c             	sub    esp,0xc
c0016dd5:	50                   	push   eax
c0016dd6:	e8 cd cb ff ff       	call   c00139a8 <Device::~Device()>
c0016ddb:	83 c4 10             	add    esp,0x10
c0016dde:	90                   	nop
c0016ddf:	83 c4 0c             	add    esp,0xc
c0016de2:	c3                   	ret    
c0016de3:	90                   	nop

c0016de4 <Video::~Video()>:
c0016de4:	83 ec 0c             	sub    esp,0xc
c0016de7:	83 ec 0c             	sub    esp,0xc
c0016dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dee:	e8 cd ff ff ff       	call   c0016dc0 <Video::~Video()>
c0016df3:	83 c4 10             	add    esp,0x10
c0016df6:	83 ec 08             	sub    esp,0x8
c0016df9:	68 64 01 00 00       	push   0x164
c0016dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e02:	e8 c2 b7 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0016e07:	83 c4 10             	add    esp,0x10
c0016e0a:	83 c4 0c             	add    esp,0xc
c0016e0d:	c3                   	ret    

c0016e0e <Video::isMonochrome()>:
c0016e0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e12:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016e18:	c3                   	ret    
c0016e19:	90                   	nop

c0016e1a <Video::getWidth()>:
c0016e1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e1e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e24:	c3                   	ret    
c0016e25:	90                   	nop

c0016e26 <Video::getHeight()>:
c0016e26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e2a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e30:	c3                   	ret    
c0016e31:	90                   	nop

c0016e32 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016e32:	55                   	push   ebp
c0016e33:	57                   	push   edi
c0016e34:	56                   	push   esi
c0016e35:	53                   	push   ebx
c0016e36:	83 ec 2c             	sub    esp,0x2c
c0016e39:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e3d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e41:	83 f8 01             	cmp    eax,0x1
c0016e44:	19 c9                	sbb    ecx,ecx
c0016e46:	31 db                	xor    ebx,ebx
c0016e48:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016e4c:	89 cd                	mov    ebp,ecx
c0016e4e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016e56:	f7 d5                	not    ebp
c0016e58:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016e5e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016e62:	01 d8                	add    eax,ebx
c0016e64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e68:	56                   	push   esi
c0016e69:	e8 b8 ff ff ff       	call   c0016e26 <Video::getHeight()>
c0016e6e:	59                   	pop    ecx
c0016e6f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016e73:	7e 70                	jle    c0016ee5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016e75:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016e79:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016e7d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016e80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e84:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016e88:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016e8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e93:	89 f8                	mov    eax,edi
c0016e95:	83 c0 20             	add    eax,0x20
c0016e98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e9c:	56                   	push   esi
c0016e9d:	e8 78 ff ff ff       	call   c0016e1a <Video::getWidth()>
c0016ea2:	5a                   	pop    edx
c0016ea3:	39 c7                	cmp    edi,eax
c0016ea5:	7d 34                	jge    c0016edb <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016ea7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016eac:	74 05                	je     c0016eb3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016eae:	8b 06                	mov    eax,DWORD PTR [esi]
c0016eb0:	55                   	push   ebp
c0016eb1:	eb 0d                	jmp    c0016ec0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016eb3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016eb8:	74 12                	je     c0016ecc <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016eba:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ebc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ec0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ec4:	57                   	push   edi
c0016ec5:	56                   	push   esi
c0016ec6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ec9:	83 c4 10             	add    esp,0x10
c0016ecc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016ed0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016ed4:	47                   	inc    edi
c0016ed5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016ed9:	75 c1                	jne    c0016e9c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016edb:	43                   	inc    ebx
c0016edc:	83 fb 20             	cmp    ebx,0x20
c0016edf:	0f 85 79 ff ff ff    	jne    c0016e5e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016ee5:	83 c4 2c             	add    esp,0x2c
c0016ee8:	5b                   	pop    ebx
c0016ee9:	5e                   	pop    esi
c0016eea:	5f                   	pop    edi
c0016eeb:	5d                   	pop    ebp
c0016eec:	c3                   	ret    
c0016eed:	90                   	nop

c0016eee <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016eee:	55                   	push   ebp
c0016eef:	57                   	push   edi
c0016ef0:	56                   	push   esi
c0016ef1:	53                   	push   ebx
c0016ef2:	83 ec 28             	sub    esp,0x28
c0016ef5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016ef9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016efd:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016f01:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016f05:	c1 e6 08             	shl    esi,0x8
c0016f08:	01 c6                	add    esi,eax
c0016f0a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016f0e:	c1 e0 08             	shl    eax,0x8
c0016f11:	01 d0                	add    eax,edx
c0016f13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f1b:	0f af c6             	imul   eax,esi
c0016f1e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016f25:	50                   	push   eax
c0016f26:	e8 6e 86 ff ff       	call   c000f599 <malloc>
c0016f2b:	83 c4 10             	add    esp,0x10
c0016f2e:	89 c7                	mov    edi,eax
c0016f30:	85 c0                	test   eax,eax
c0016f32:	75 10                	jne    c0016f44 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016f34:	83 ec 0c             	sub    esp,0xc
c0016f37:	68 35 b0 02 c0       	push   0xc002b035
c0016f3c:	e8 cc 2e 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0016f41:	83 c4 10             	add    esp,0x10
c0016f44:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016f47:	ba 12 00 00 00       	mov    edx,0x12
c0016f4c:	84 c0                	test   al,al
c0016f4e:	74 11                	je     c0016f61 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016f50:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016f54:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016f58:	c1 fa 03             	sar    edx,0x3
c0016f5b:	0f af d1             	imul   edx,ecx
c0016f5e:	83 c2 12             	add    edx,0x12
c0016f61:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016f65:	74 04                	je     c0016f6b <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016f67:	85 f6                	test   esi,esi
c0016f69:	75 12                	jne    c0016f7d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016f6b:	83 ec 0c             	sub    esp,0xc
c0016f6e:	68 45 b0 02 c0       	push   0xc002b045
c0016f73:	e8 29 b7 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0016f78:	e9 b8 00 00 00       	jmp    c0017035 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016f7d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016f81:	80 f9 02             	cmp    cl,0x2
c0016f84:	0f 85 96 00 00 00    	jne    c0017020 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016f8a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016f8f:	75 0e                	jne    c0016f9f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016f91:	84 c0                	test   al,al
c0016f93:	75 0a                	jne    c0016f9f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016f95:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016f98:	83 e8 18             	sub    eax,0x18
c0016f9b:	a8 f7                	test   al,0xf7
c0016f9d:	74 0a                	je     c0016fa9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016f9f:	83 ec 0c             	sub    esp,0xc
c0016fa2:	68 5a b0 02 c0       	push   0xc002b05a
c0016fa7:	eb 7f                	jmp    c0017028 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016fa9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016fb1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016fb9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016fbd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016fc5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016fc9:	75 0c                	jne    c0016fd7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016fcb:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016fd0:	c1 e0 18             	shl    eax,0x18
c0016fd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fd7:	45                   	inc    ebp
c0016fd8:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0016fdd:	c1 e1 10             	shl    ecx,0x10
c0016fe0:	89 c8                	mov    eax,ecx
c0016fe2:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0016fe7:	c1 e1 08             	shl    ecx,0x8
c0016fea:	09 c1                	or     ecx,eax
c0016fec:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0016ff0:	09 c1                	or     ecx,eax
c0016ff2:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0016ff6:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0016ffa:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016ffe:	c1 f8 03             	sar    eax,0x3
c0017001:	01 c2                	add    edx,eax
c0017003:	89 e8                	mov    eax,ebp
c0017005:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017009:	39 c6                	cmp    esi,eax
c001700b:	7f b0                	jg     c0016fbd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c001700d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017011:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017015:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0017018:	7e 22                	jle    c001703c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001701a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c001701e:	eb 99                	jmp    c0016fb9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017020:	50                   	push   eax
c0017021:	50                   	push   eax
c0017022:	51                   	push   ecx
c0017023:	68 68 b0 02 c0       	push   0xc002b068
c0017028:	e8 74 b6 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001702d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017030:	e8 74 85 ff ff       	call   c000f5a9 <free>
c0017035:	83 c4 10             	add    esp,0x10
c0017038:	31 ff                	xor    edi,edi
c001703a:	eb 0f                	jmp    c001704b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c001703c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017040:	89 30                	mov    DWORD PTR [eax],esi
c0017042:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017046:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017049:	89 30                	mov    DWORD PTR [eax],esi
c001704b:	83 c4 1c             	add    esp,0x1c
c001704e:	89 f8                	mov    eax,edi
c0017050:	5b                   	pop    ebx
c0017051:	5e                   	pop    esi
c0017052:	5f                   	pop    edi
c0017053:	5d                   	pop    ebp
c0017054:	c3                   	ret    
c0017055:	90                   	nop

c0017056 <Video::putTGA(int, int, unsigned char*, int)>:
c0017056:	55                   	push   ebp
c0017057:	57                   	push   edi
c0017058:	56                   	push   esi
c0017059:	53                   	push   ebx
c001705a:	83 ec 28             	sub    esp,0x28
c001705d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017061:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017065:	50                   	push   eax
c0017066:	8d 44 24 18          	lea    eax,[esp+0x18]
c001706a:	50                   	push   eax
c001706b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001706f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017073:	56                   	push   esi
c0017074:	e8 75 fe ff ff       	call   c0016eee <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017079:	83 c4 20             	add    esp,0x20
c001707c:	85 c0                	test   eax,eax
c001707e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017082:	74 35                	je     c00170b9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017084:	89 c7                	mov    edi,eax
c0017086:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001708a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001708e:	39 d8                	cmp    eax,ebx
c0017090:	7e 27                	jle    c00170b9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017092:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017096:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001709a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001709e:	39 e8                	cmp    eax,ebp
c00170a0:	7e 14                	jle    c00170b6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00170a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00170a4:	83 c7 04             	add    edi,0x4
c00170a7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00170aa:	53                   	push   ebx
c00170ab:	55                   	push   ebp
c00170ac:	45                   	inc    ebp
c00170ad:	56                   	push   esi
c00170ae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00170b1:	83 c4 10             	add    esp,0x10
c00170b4:	eb e0                	jmp    c0017096 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00170b6:	43                   	inc    ebx
c00170b7:	eb cd                	jmp    c0017086 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00170b9:	83 c4 1c             	add    esp,0x1c
c00170bc:	5b                   	pop    ebx
c00170bd:	5e                   	pop    esi
c00170be:	5f                   	pop    edi
c00170bf:	5d                   	pop    ebp
c00170c0:	c3                   	ret    
c00170c1:	90                   	nop

c00170c2 <ACPI::close(int, int, void*)>:
c00170c2:	83 ec 1c             	sub    esp,0x1c
c00170c5:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00170cd:	74 0a                	je     c00170d9 <ACPI::close(int, int, void*)+0x17>
c00170cf:	b8 00 00 00 00       	mov    eax,0x0
c00170d4:	e9 8a 00 00 00       	jmp    c0017163 <ACPI::close(int, int, void*)+0xa1>
c00170d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00170de:	75 27                	jne    c0017107 <ACPI::close(int, int, void*)+0x45>
c00170e0:	a1 c8 ff 02 c0       	mov    eax,ds:0xc002ffc8
c00170e5:	85 c0                	test   eax,eax
c00170e7:	74 07                	je     c00170f0 <ACPI::close(int, int, void*)+0x2e>
c00170e9:	a1 c8 ff 02 c0       	mov    eax,ds:0xc002ffc8
c00170ee:	ff d0                	call   eax
c00170f0:	83 ec 0c             	sub    esp,0xc
c00170f3:	68 c4 b0 02 c0       	push   0xc002b0c4
c00170f8:	e8 10 2d 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c00170fd:	83 c4 10             	add    esp,0x10
c0017100:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017105:	eb 5c                	jmp    c0017163 <ACPI::close(int, int, void*)+0xa1>
c0017107:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001710c:	75 50                	jne    c001715e <ACPI::close(int, int, void*)+0x9c>
c001710e:	a1 c4 ff 02 c0       	mov    eax,ds:0xc002ffc4
c0017113:	85 c0                	test   eax,eax
c0017115:	74 07                	je     c001711e <ACPI::close(int, int, void*)+0x5c>
c0017117:	a1 c4 ff 02 c0       	mov    eax,ds:0xc002ffc4
c001711c:	ff d0                	call   eax
c001711e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017123:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017128:	83 e0 02             	and    eax,0x2
c001712b:	74 1c                	je     c0017149 <ACPI::close(int, int, void*)+0x87>
c001712d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017134:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017138:	89 c2                	mov    edx,eax
c001713a:	ec                   	in     al,dx
c001713b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001713f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017143:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017147:	eb da                	jmp    c0017123 <ACPI::close(int, int, void*)+0x61>
c0017149:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017150:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017155:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017159:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001715d:	ee                   	out    dx,al
c001715e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017163:	83 c4 1c             	add    esp,0x1c
c0017166:	c3                   	ret    

c0017167 <findRSDP()>:
c0017167:	83 ec 1c             	sub    esp,0x1c
c001716a:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001716f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017175:	83 e0 04             	and    eax,0x4
c0017178:	84 c0                	test   al,al
c001717a:	75 07                	jne    c0017183 <findRSDP()+0x1c>
c001717c:	b8 00 00 00 00       	mov    eax,0x0
c0017181:	eb 6a                	jmp    c00171ed <findRSDP()+0x86>
c0017183:	a1 74 d9 02 c0       	mov    eax,ds:0xc002d974
c0017188:	3d ff 07 00 00       	cmp    eax,0x7ff
c001718d:	7f 1b                	jg     c00171aa <findRSDP()+0x43>
c001718f:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0017194:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001719a:	83 e2 fb             	and    edx,0xfffffffb
c001719d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171a3:	b8 00 00 00 00       	mov    eax,0x0
c00171a8:	eb 43                	jmp    c00171ed <findRSDP()+0x86>
c00171aa:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00171b2:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00171ba:	77 2c                	ja     c00171e8 <findRSDP()+0x81>
c00171bc:	83 ec 04             	sub    esp,0x4
c00171bf:	6a 08                	push   0x8
c00171c1:	68 5f b1 02 c0       	push   0xc002b15f
c00171c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171ca:	e8 7d 94 fe ff       	call   c000064c <memcmp>
c00171cf:	83 c4 10             	add    esp,0x10
c00171d2:	85 c0                	test   eax,eax
c00171d4:	0f 94 c0             	sete   al
c00171d7:	84 c0                	test   al,al
c00171d9:	74 06                	je     c00171e1 <findRSDP()+0x7a>
c00171db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171df:	eb 0c                	jmp    c00171ed <findRSDP()+0x86>
c00171e1:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00171e6:	eb ca                	jmp    c00171b2 <findRSDP()+0x4b>
c00171e8:	b8 00 00 00 00       	mov    eax,0x0
c00171ed:	83 c4 1c             	add    esp,0x1c
c00171f0:	c3                   	ret    

c00171f1 <loadACPITables(unsigned char*)>:
c00171f1:	57                   	push   edi
c00171f2:	56                   	push   esi
c00171f3:	53                   	push   ebx
c00171f4:	83 ec 60             	sub    esp,0x60
c00171f7:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00171fc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017202:	83 e0 04             	and    eax,0x4
c0017205:	84 c0                	test   al,al
c0017207:	0f 84 33 02 00 00    	je     c0017440 <loadACPITables(unsigned char*)+0x24f>
c001720d:	a0 e0 01 03 c0       	mov    al,ds:0xc00301e0
c0017212:	84 c0                	test   al,al
c0017214:	74 75                	je     c001728b <loadACPITables(unsigned char*)+0x9a>
c0017216:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001721a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001721e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017225:	83 e8 24             	sub    eax,0x24
c0017228:	c1 e8 03             	shr    eax,0x3
c001722b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001722f:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017237:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001723b:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001723f:	0f 8d b2 00 00 00    	jge    c00172f7 <loadACPITables(unsigned char*)+0x106>
c0017245:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017249:	83 c0 24             	add    eax,0x24
c001724c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017250:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017254:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017258:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001725c:	c1 e0 03             	shl    eax,0x3
c001725f:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017263:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017267:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001726a:	8b 00                	mov    eax,DWORD PTR [eax]
c001726c:	89 c1                	mov    ecx,eax
c001726e:	a1 cc ff 02 c0       	mov    eax,ds:0xc002ffcc
c0017273:	8d 50 01             	lea    edx,[eax+0x1]
c0017276:	89 15 cc ff 02 c0    	mov    DWORD PTR ds:0xc002ffcc,edx
c001727c:	89 ca                	mov    edx,ecx
c001727e:	89 14 c5 e4 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd001c],edx
c0017285:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017289:	eb ac                	jmp    c0017237 <loadACPITables(unsigned char*)+0x46>
c001728b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001728f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017293:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017297:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001729a:	83 e8 24             	sub    eax,0x24
c001729d:	c1 e8 02             	shr    eax,0x2
c00172a0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172a4:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00172ac:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172b0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00172b4:	7d 41                	jge    c00172f7 <loadACPITables(unsigned char*)+0x106>
c00172b6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172ba:	83 c0 24             	add    eax,0x24
c00172bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00172c1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172c9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172cd:	c1 e0 02             	shl    eax,0x2
c00172d0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00172d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172d8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00172da:	a1 cc ff 02 c0       	mov    eax,ds:0xc002ffcc
c00172df:	8d 50 01             	lea    edx,[eax+0x1]
c00172e2:	89 15 cc ff 02 c0    	mov    DWORD PTR ds:0xc002ffcc,edx
c00172e8:	89 ca                	mov    edx,ecx
c00172ea:	89 14 c5 e4 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd001c],edx
c00172f1:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00172f5:	eb b5                	jmp    c00172ac <loadACPITables(unsigned char*)+0xbb>
c00172f7:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00172ff:	a1 cc ff 02 c0       	mov    eax,ds:0xc002ffcc
c0017304:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017308:	0f 8d 33 01 00 00    	jge    c0017441 <loadACPITables(unsigned char*)+0x250>
c001730e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017312:	8b 04 c5 e4 ff 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd001c]
c0017319:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001731d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017321:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017325:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017329:	25 ff 0f 00 00       	and    eax,0xfff
c001732e:	89 c6                	mov    esi,eax
c0017330:	8b 1d 90 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da90
c0017336:	83 ec 0c             	sub    esp,0xc
c0017339:	6a 01                	push   0x1
c001733b:	e8 b5 9e ff ff       	call   c00111f5 <Virt::allocateKernelVirtualPages(int)>
c0017340:	83 c4 10             	add    esp,0x10
c0017343:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017347:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001734d:	83 ec 0c             	sub    esp,0xc
c0017350:	6a 01                	push   0x1
c0017352:	6a 01                	push   0x1
c0017354:	50                   	push   eax
c0017355:	52                   	push   edx
c0017356:	53                   	push   ebx
c0017357:	e8 4c a9 ff ff       	call   c0011ca8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001735c:	83 c4 20             	add    esp,0x20
c001735f:	09 f0                	or     eax,esi
c0017361:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017365:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017369:	c1 e0 03             	shl    eax,0x3
c001736c:	05 e0 ff 02 c0       	add    eax,0xc002ffe0
c0017371:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017375:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017379:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001737d:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017385:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017389:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001738d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017395:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017399:	89 c6                	mov    esi,eax
c001739b:	89 d7                	mov    edi,edx
c001739d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001739f:	89 c8                	mov    eax,ecx
c00173a1:	89 fa                	mov    edx,edi
c00173a3:	89 f3                	mov    ebx,esi
c00173a5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00173a9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00173ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00173bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173c0:	05 00 10 00 00       	add    eax,0x1000
c00173c5:	c1 e8 0c             	shr    eax,0xc
c00173c8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00173d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173d8:	25 ff 0f 00 00       	and    eax,0xfff
c00173dd:	89 c6                	mov    esi,eax
c00173df:	8b 1d 90 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da90
c00173e5:	83 ec 0c             	sub    esp,0xc
c00173e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00173ec:	e8 04 9e ff ff       	call   c00111f5 <Virt::allocateKernelVirtualPages(int)>
c00173f1:	83 c4 10             	add    esp,0x10
c00173f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00173f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00173fe:	83 ec 0c             	sub    esp,0xc
c0017401:	6a 01                	push   0x1
c0017403:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017407:	50                   	push   eax
c0017408:	52                   	push   edx
c0017409:	53                   	push   ebx
c001740a:	e8 99 a8 ff ff       	call   c0011ca8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001740f:	83 c4 20             	add    esp,0x20
c0017412:	09 f0                	or     eax,esi
c0017414:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001741c:	83 ec 0c             	sub    esp,0xc
c001741f:	50                   	push   eax
c0017420:	e8 16 a2 ff ff       	call   c001163b <Virt::freeKernelVirtualPages(unsigned long)>
c0017425:	83 c4 10             	add    esp,0x10
c0017428:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001742c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017430:	89 14 c5 e4 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd001c],edx
c0017437:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001743b:	e9 bf fe ff ff       	jmp    c00172ff <loadACPITables(unsigned char*)+0x10e>
c0017440:	90                   	nop
c0017441:	83 c4 60             	add    esp,0x60
c0017444:	5b                   	pop    ebx
c0017445:	5e                   	pop    esi
c0017446:	5f                   	pop    edi
c0017447:	c3                   	ret    

c0017448 <findRSDT(unsigned char*)>:
c0017448:	57                   	push   edi
c0017449:	56                   	push   esi
c001744a:	53                   	push   ebx
c001744b:	83 ec 50             	sub    esp,0x50
c001744e:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0017453:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017459:	83 e0 04             	and    eax,0x4
c001745c:	84 c0                	test   al,al
c001745e:	75 0a                	jne    c001746a <findRSDT(unsigned char*)+0x22>
c0017460:	b8 00 00 00 00       	mov    eax,0x0
c0017465:	e9 21 01 00 00       	jmp    c001758b <findRSDT(unsigned char*)+0x143>
c001746a:	89 e0                	mov    eax,esp
c001746c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017470:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017474:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017478:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017480:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017484:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017488:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001748c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017490:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017494:	89 c6                	mov    esi,eax
c0017496:	89 d7                	mov    edi,edx
c0017498:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001749a:	89 c8                	mov    eax,ecx
c001749c:	89 fa                	mov    edx,edi
c001749e:	89 f3                	mov    ebx,esi
c00174a0:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00174a4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00174a8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00174ac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00174b0:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00174b4:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00174bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00174c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00174c4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00174c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174cc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00174d0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00174d4:	25 ff 0f 00 00       	and    eax,0xfff
c00174d9:	89 c6                	mov    esi,eax
c00174db:	8b 1d 90 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da90
c00174e1:	83 ec 0c             	sub    esp,0xc
c00174e4:	6a 02                	push   0x2
c00174e6:	e8 0a 9d ff ff       	call   c00111f5 <Virt::allocateKernelVirtualPages(int)>
c00174eb:	83 c4 10             	add    esp,0x10
c00174ee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00174f2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174f8:	83 ec 0c             	sub    esp,0xc
c00174fb:	6a 01                	push   0x1
c00174fd:	6a 02                	push   0x2
c00174ff:	50                   	push   eax
c0017500:	52                   	push   edx
c0017501:	53                   	push   ebx
c0017502:	e8 a1 a7 ff ff       	call   c0011ca8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017507:	83 c4 20             	add    esp,0x20
c001750a:	09 f0                	or     eax,esi
c001750c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017510:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017514:	25 ff 0f 00 00       	and    eax,0xfff
c0017519:	89 c6                	mov    esi,eax
c001751b:	8b 1d 90 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da90
c0017521:	83 ec 0c             	sub    esp,0xc
c0017524:	6a 02                	push   0x2
c0017526:	e8 ca 9c ff ff       	call   c00111f5 <Virt::allocateKernelVirtualPages(int)>
c001752b:	83 c4 10             	add    esp,0x10
c001752e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017532:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017538:	83 ec 0c             	sub    esp,0xc
c001753b:	6a 01                	push   0x1
c001753d:	6a 02                	push   0x2
c001753f:	50                   	push   eax
c0017540:	52                   	push   edx
c0017541:	53                   	push   ebx
c0017542:	e8 61 a7 ff ff       	call   c0011ca8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017547:	83 c4 20             	add    esp,0x20
c001754a:	09 f0                	or     eax,esi
c001754c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017550:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017555:	75 11                	jne    c0017568 <findRSDT(unsigned char*)+0x120>
c0017557:	c6 05 e0 01 03 c0 00 	mov    BYTE PTR ds:0xc00301e0,0x0
c001755e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017562:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017566:	eb 1f                	jmp    c0017587 <findRSDT(unsigned char*)+0x13f>
c0017568:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c001756d:	75 11                	jne    c0017580 <findRSDT(unsigned char*)+0x138>
c001756f:	c6 05 e0 01 03 c0 01 	mov    BYTE PTR ds:0xc00301e0,0x1
c0017576:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001757a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001757e:	eb 07                	jmp    c0017587 <findRSDT(unsigned char*)+0x13f>
c0017580:	b8 00 00 00 00       	mov    eax,0x0
c0017585:	eb 04                	jmp    c001758b <findRSDT(unsigned char*)+0x143>
c0017587:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001758b:	83 c4 50             	add    esp,0x50
c001758e:	5b                   	pop    ebx
c001758f:	5e                   	pop    esi
c0017590:	5f                   	pop    edi
c0017591:	c3                   	ret    

c0017592 <findDataTable(unsigned char*, char*)>:
c0017592:	83 ec 1c             	sub    esp,0x1c
c0017595:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001759a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175a0:	83 e0 04             	and    eax,0x4
c00175a3:	84 c0                	test   al,al
c00175a5:	75 07                	jne    c00175ae <findDataTable(unsigned char*, char*)+0x1c>
c00175a7:	b8 00 00 00 00       	mov    eax,0x0
c00175ac:	eb 52                	jmp    c0017600 <findDataTable(unsigned char*, char*)+0x6e>
c00175ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00175b6:	a1 cc ff 02 c0       	mov    eax,ds:0xc002ffcc
c00175bb:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00175bf:	7d 3a                	jge    c00175fb <findDataTable(unsigned char*, char*)+0x69>
c00175c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175c5:	c1 e0 03             	shl    eax,0x3
c00175c8:	05 e0 ff 02 c0       	add    eax,0xc002ffe0
c00175cd:	83 ec 04             	sub    esp,0x4
c00175d0:	6a 04                	push   0x4
c00175d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175d6:	50                   	push   eax
c00175d7:	e8 70 90 fe ff       	call   c000064c <memcmp>
c00175dc:	83 c4 10             	add    esp,0x10
c00175df:	85 c0                	test   eax,eax
c00175e1:	0f 94 c0             	sete   al
c00175e4:	84 c0                	test   al,al
c00175e6:	74 0d                	je     c00175f5 <findDataTable(unsigned char*, char*)+0x63>
c00175e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175ec:	8b 04 c5 e4 ff 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd001c]
c00175f3:	eb 0b                	jmp    c0017600 <findDataTable(unsigned char*, char*)+0x6e>
c00175f5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00175f9:	eb bb                	jmp    c00175b6 <findDataTable(unsigned char*, char*)+0x24>
c00175fb:	b8 00 00 00 00       	mov    eax,0x0
c0017600:	83 c4 1c             	add    esp,0x1c
c0017603:	c3                   	ret    

c0017604 <scanMADT()>:
c0017604:	53                   	push   ebx
c0017605:	83 ec 38             	sub    esp,0x38
c0017608:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001760d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017613:	83 e0 04             	and    eax,0x4
c0017616:	84 c0                	test   al,al
c0017618:	0f 84 4a 04 00 00    	je     c0017a68 <scanMADT()+0x464>
c001761e:	e8 44 fb ff ff       	call   c0017167 <findRSDP()>
c0017623:	a3 ec 01 03 c0       	mov    ds:0xc00301ec,eax
c0017628:	a1 ec 01 03 c0       	mov    eax,ds:0xc00301ec
c001762d:	85 c0                	test   eax,eax
c001762f:	75 19                	jne    c001764a <scanMADT()+0x46>
c0017631:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0017636:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001763c:	83 e2 fb             	and    edx,0xfffffffb
c001763f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017645:	e9 22 04 00 00       	jmp    c0017a6c <scanMADT()+0x468>
c001764a:	a1 ec 01 03 c0       	mov    eax,ds:0xc00301ec
c001764f:	83 ec 0c             	sub    esp,0xc
c0017652:	50                   	push   eax
c0017653:	e8 f0 fd ff ff       	call   c0017448 <findRSDT(unsigned char*)>
c0017658:	83 c4 10             	add    esp,0x10
c001765b:	a3 e8 01 03 c0       	mov    ds:0xc00301e8,eax
c0017660:	a1 e8 01 03 c0       	mov    eax,ds:0xc00301e8
c0017665:	85 c0                	test   eax,eax
c0017667:	75 19                	jne    c0017682 <scanMADT()+0x7e>
c0017669:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001766e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017674:	83 e2 fb             	and    edx,0xfffffffb
c0017677:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001767d:	e9 ea 03 00 00       	jmp    c0017a6c <scanMADT()+0x468>
c0017682:	a1 e8 01 03 c0       	mov    eax,ds:0xc00301e8
c0017687:	83 ec 0c             	sub    esp,0xc
c001768a:	50                   	push   eax
c001768b:	e8 61 fb ff ff       	call   c00171f1 <loadACPITables(unsigned char*)>
c0017690:	83 c4 10             	add    esp,0x10
c0017693:	a1 e8 01 03 c0       	mov    eax,ds:0xc00301e8
c0017698:	83 ec 08             	sub    esp,0x8
c001769b:	68 68 b1 02 c0       	push   0xc002b168
c00176a0:	50                   	push   eax
c00176a1:	e8 ec fe ff ff       	call   c0017592 <findDataTable(unsigned char*, char*)>
c00176a6:	83 c4 10             	add    esp,0x10
c00176a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00176ad:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00176b2:	75 19                	jne    c00176cd <scanMADT()+0xc9>
c00176b4:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00176b9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176bf:	83 e2 fe             	and    edx,0xfffffffe
c00176c2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176c8:	e9 9f 03 00 00       	jmp    c0017a6c <scanMADT()+0x468>
c00176cd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00176d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00176dc:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00176e0:	0f 87 86 03 00 00    	ja     c0017a6c <scanMADT()+0x468>
c00176e6:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00176ee:	0f 87 78 03 00 00    	ja     c0017a6c <scanMADT()+0x468>
c00176f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00176fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017700:	8d 50 01             	lea    edx,[eax+0x1]
c0017703:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017707:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001770b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001770f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017713:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017717:	8d 50 01             	lea    edx,[eax+0x1]
c001771a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001771e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017722:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017726:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001772a:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001772f:	0f 86 36 03 00 00    	jbe    c0017a6b <scanMADT()+0x467>
c0017735:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001773a:	75 57                	jne    c0017793 <scanMADT()+0x18f>
c001773c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017740:	8d 50 01             	lea    edx,[eax+0x1]
c0017743:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017747:	8a 15 e0 03 03 c0    	mov    dl,BYTE PTR ds:0xc00303e0
c001774d:	0f b6 d2             	movzx  edx,dl
c0017750:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017754:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017758:	88 82 20 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfbe0],al
c001775e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017762:	8d 50 01             	lea    edx,[eax+0x1]
c0017765:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017769:	8a 15 e0 03 03 c0    	mov    dl,BYTE PTR ds:0xc00303e0
c001776f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017772:	88 0d e0 03 03 c0    	mov    BYTE PTR ds:0xc00303e0,cl
c0017778:	0f b6 d2             	movzx  edx,dl
c001777b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001777f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017783:	88 82 00 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfc00],al
c0017789:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001778e:	e9 c1 02 00 00       	jmp    c0017a54 <scanMADT()+0x450>
c0017793:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017798:	0f 85 14 01 00 00    	jne    c00178b2 <scanMADT()+0x2ae>
c001779e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177a2:	8d 50 01             	lea    edx,[eax+0x1]
c00177a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177a9:	8a 15 a0 02 03 c0    	mov    dl,BYTE PTR ds:0xc00302a0
c00177af:	0f b6 d2             	movzx  edx,dl
c00177b2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177b6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177ba:	88 82 c0 02 03 c0    	mov    BYTE PTR [edx-0x3ffcfd40],al
c00177c0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00177c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177cc:	01 d0                	add    eax,edx
c00177ce:	83 c0 2c             	add    eax,0x2c
c00177d1:	8a 00                	mov    al,BYTE PTR [eax]
c00177d3:	0f b6 d0             	movzx  edx,al
c00177d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177da:	8d 48 01             	lea    ecx,[eax+0x1]
c00177dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177e1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00177e5:	0f b6 c0             	movzx  eax,al
c00177e8:	c1 e0 08             	shl    eax,0x8
c00177eb:	89 d1                	mov    ecx,edx
c00177ed:	09 c1                	or     ecx,eax
c00177ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177f3:	8d 50 02             	lea    edx,[eax+0x2]
c00177f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177fa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177fe:	0f b6 c0             	movzx  eax,al
c0017801:	c1 e0 10             	shl    eax,0x10
c0017804:	09 c1                	or     ecx,eax
c0017806:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001780a:	8d 50 03             	lea    edx,[eax+0x3]
c001780d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017811:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017815:	0f b6 c0             	movzx  eax,al
c0017818:	c1 e0 18             	shl    eax,0x18
c001781b:	09 c1                	or     ecx,eax
c001781d:	89 ca                	mov    edx,ecx
c001781f:	a0 a0 02 03 c0       	mov    al,ds:0xc00302a0
c0017824:	0f b6 c0             	movzx  eax,al
c0017827:	89 14 85 e0 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfd20],edx
c001782e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017833:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017837:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001783b:	01 d0                	add    eax,edx
c001783d:	83 c0 2c             	add    eax,0x2c
c0017840:	8a 00                	mov    al,BYTE PTR [eax]
c0017842:	0f b6 d0             	movzx  edx,al
c0017845:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017849:	8d 48 01             	lea    ecx,[eax+0x1]
c001784c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017850:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017854:	0f b6 c0             	movzx  eax,al
c0017857:	c1 e0 08             	shl    eax,0x8
c001785a:	89 d1                	mov    ecx,edx
c001785c:	09 c1                	or     ecx,eax
c001785e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017862:	8d 50 02             	lea    edx,[eax+0x2]
c0017865:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017869:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001786d:	0f b6 c0             	movzx  eax,al
c0017870:	c1 e0 10             	shl    eax,0x10
c0017873:	09 c1                	or     ecx,eax
c0017875:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017879:	8d 50 03             	lea    edx,[eax+0x3]
c001787c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017880:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017884:	0f b6 c0             	movzx  eax,al
c0017887:	c1 e0 18             	shl    eax,0x18
c001788a:	09 c1                	or     ecx,eax
c001788c:	89 ca                	mov    edx,ecx
c001788e:	a0 a0 02 03 c0       	mov    al,ds:0xc00302a0
c0017893:	0f b6 c0             	movzx  eax,al
c0017896:	89 14 85 60 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfca0],edx
c001789d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178a2:	a0 a0 02 03 c0       	mov    al,ds:0xc00302a0
c00178a7:	40                   	inc    eax
c00178a8:	a2 a0 02 03 c0       	mov    ds:0xc00302a0,al
c00178ad:	e9 a2 01 00 00       	jmp    c0017a54 <scanMADT()+0x450>
c00178b2:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00178b7:	0f 85 e9 00 00 00    	jne    c00179a6 <scanMADT()+0x3a2>
c00178bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178c1:	8d 50 01             	lea    edx,[eax+0x1]
c00178c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178cc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178d0:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00178d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178d8:	8d 50 01             	lea    edx,[eax+0x1]
c00178db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178e3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178e7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00178eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178f3:	01 d0                	add    eax,edx
c00178f5:	83 c0 2c             	add    eax,0x2c
c00178f8:	8a 00                	mov    al,BYTE PTR [eax]
c00178fa:	0f b6 d0             	movzx  edx,al
c00178fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017901:	8d 48 01             	lea    ecx,[eax+0x1]
c0017904:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017908:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001790c:	0f b6 c0             	movzx  eax,al
c001790f:	c1 e0 08             	shl    eax,0x8
c0017912:	89 d1                	mov    ecx,edx
c0017914:	09 c1                	or     ecx,eax
c0017916:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001791a:	8d 50 02             	lea    edx,[eax+0x2]
c001791d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017921:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017925:	0f b6 c0             	movzx  eax,al
c0017928:	c1 e0 10             	shl    eax,0x10
c001792b:	09 c1                	or     ecx,eax
c001792d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017931:	8d 50 03             	lea    edx,[eax+0x3]
c0017934:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017938:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001793c:	0f b6 c0             	movzx  eax,al
c001793f:	c1 e0 18             	shl    eax,0x18
c0017942:	09 c8                	or     eax,ecx
c0017944:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017948:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001794d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017951:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017955:	01 d0                	add    eax,edx
c0017957:	83 c0 2c             	add    eax,0x2c
c001795a:	8a 00                	mov    al,BYTE PTR [eax]
c001795c:	0f b6 c0             	movzx  eax,al
c001795f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017963:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017966:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001796a:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001796e:	0f b6 d2             	movzx  edx,dl
c0017971:	c1 e2 08             	shl    edx,0x8
c0017974:	09 d0                	or     eax,edx
c0017976:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001797b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017980:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017985:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017989:	88 90 80 cb 02 c0    	mov    BYTE PTR [eax-0x3ffd3480],dl
c001798f:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017994:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017999:	66 89 84 12 80 02 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfd80],ax
c00179a1:	e9 ae 00 00 00       	jmp    c0017a54 <scanMADT()+0x450>
c00179a6:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00179ab:	0f 85 97 00 00 00    	jne    c0017a48 <scanMADT()+0x444>
c00179b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179b5:	8d 50 01             	lea    edx,[eax+0x1]
c00179b8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179c0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179c4:	0f b6 c0             	movzx  eax,al
c00179c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179cb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179d3:	01 d0                	add    eax,edx
c00179d5:	83 c0 2c             	add    eax,0x2c
c00179d8:	8a 00                	mov    al,BYTE PTR [eax]
c00179da:	0f b6 d0             	movzx  edx,al
c00179dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179e1:	8d 48 01             	lea    ecx,[eax+0x1]
c00179e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179e8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00179ec:	0f b6 c0             	movzx  eax,al
c00179ef:	c1 e0 08             	shl    eax,0x8
c00179f2:	09 d0                	or     eax,edx
c00179f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179f8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00179fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a01:	8d 50 01             	lea    edx,[eax+0x1]
c0017a04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a08:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a0c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a10:	0f b6 c0             	movzx  eax,al
c0017a13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a1b:	c1 e0 08             	shl    eax,0x8
c0017a1e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017a22:	89 c1                	mov    ecx,eax
c0017a24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a28:	c1 e0 18             	shl    eax,0x18
c0017a2b:	89 c3                	mov    ebx,eax
c0017a2d:	a1 f0 01 03 c0       	mov    eax,ds:0xc00301f0
c0017a32:	8d 50 01             	lea    edx,[eax+0x1]
c0017a35:	89 15 f0 01 03 c0    	mov    DWORD PTR ds:0xc00301f0,edx
c0017a3b:	09 d9                	or     ecx,ebx
c0017a3d:	89 ca                	mov    edx,ecx
c0017a3f:	89 14 85 00 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfe00],edx
c0017a46:	eb 0c                	jmp    c0017a54 <scanMADT()+0x450>
c0017a48:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017a4d:	75 05                	jne    c0017a54 <scanMADT()+0x450>
c0017a4f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017a54:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017a59:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a5d:	01 d0                	add    eax,edx
c0017a5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a63:	e9 6d fc ff ff       	jmp    c00176d5 <scanMADT()+0xd1>
c0017a68:	90                   	nop
c0017a69:	eb 01                	jmp    c0017a6c <scanMADT()+0x468>
c0017a6b:	90                   	nop
c0017a6c:	83 c4 38             	add    esp,0x38
c0017a6f:	5b                   	pop    ebx
c0017a70:	c3                   	ret    
c0017a71:	90                   	nop

c0017a72 <ACPI::ACPI()>:
c0017a72:	83 ec 0c             	sub    esp,0xc
c0017a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a79:	83 ec 08             	sub    esp,0x8
c0017a7c:	68 6d b1 02 c0       	push   0xc002b16d
c0017a81:	50                   	push   eax
c0017a82:	e8 57 c2 ff ff       	call   c0013cde <Device::Device(char const*)>
c0017a87:	83 c4 10             	add    esp,0x10
c0017a8a:	ba c8 b2 02 c0       	mov    edx,0xc002b2c8
c0017a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a93:	89 10                	mov    DWORD PTR [eax],edx
c0017a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a99:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa4:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ab2:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017abc:	e8 43 fb ff ff       	call   c0017604 <scanMADT()>
c0017ac1:	90                   	nop
c0017ac2:	83 c4 0c             	add    esp,0xc
c0017ac5:	c3                   	ret    

c0017ac6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017ac6:	83 ec 2c             	sub    esp,0x2c
c0017ac9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017acd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017ad1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017ad5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017ad9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017ade:	88 d0                	mov    al,dl
c0017ae0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017ae4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ae9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017af1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017af5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017afb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017aff:	0f 8d 97 00 00 00    	jge    c0017b9c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017b05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b09:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b0d:	83 c2 2a             	add    edx,0x2a
c0017b10:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017b14:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017b19:	75 78                	jne    c0017b93 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b23:	83 c2 2a             	add    edx,0x2a
c0017b26:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017b2a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017b2e:	75 63                	jne    c0017b93 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b30:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b35:	74 3a                	je     c0017b71 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017b37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b3f:	83 c2 2a             	add    edx,0x2a
c0017b42:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017b46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b4d:	39 c2                	cmp    edx,eax
c0017b4f:	74 10                	je     c0017b61 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017b51:	83 ec 0c             	sub    esp,0xc
c0017b54:	68 e8 b0 02 c0       	push   0xc002b0e8
c0017b59:	e8 af 22 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0017b5e:	83 c4 10             	add    esp,0x10
c0017b61:	83 ec 0c             	sub    esp,0xc
c0017b64:	68 72 b1 02 c0       	push   0xc002b172
c0017b69:	e8 9f 22 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0017b6e:	83 c4 10             	add    esp,0x10
c0017b71:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017b75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b7d:	83 c2 2a             	add    edx,0x2a
c0017b80:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017b84:	8b 02                	mov    eax,DWORD PTR [edx]
c0017b86:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017b89:	89 01                	mov    DWORD PTR [ecx],eax
c0017b8b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017b8e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b93:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017b97:	e9 55 ff ff ff       	jmp    c0017af1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017b9c:	90                   	nop
c0017b9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ba1:	83 c4 2c             	add    esp,0x2c
c0017ba4:	c2 04 00             	ret    0x4
c0017ba7:	90                   	nop

c0017ba8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017ba8:	83 ec 1c             	sub    esp,0x1c
c0017bab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017baf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017bb3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bb7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017bbc:	88 c8                	mov    al,cl
c0017bbe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017bc2:	88 d0                	mov    al,dl
c0017bc4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017bc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bcc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bd6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017bd9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017bdd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017be1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017be5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017beb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bef:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017bf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bf6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017bfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bff:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c05:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017c09:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c10:	83 c2 2a             	add    edx,0x2a
c0017c13:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017c17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c1b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c25:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c28:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017c2c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c34:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c3a:	8d 50 01             	lea    edx,[eax+0x1]
c0017c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c41:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017c47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c4b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c51:	3d 00 02 00 00       	cmp    eax,0x200
c0017c56:	75 10                	jne    c0017c68 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017c58:	83 ec 0c             	sub    esp,0xc
c0017c5b:	68 81 b1 02 c0       	push   0xc002b181
c0017c60:	e8 a8 21 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0017c65:	83 c4 10             	add    esp,0x10
c0017c68:	90                   	nop
c0017c69:	83 c4 1c             	add    esp,0x1c
c0017c6c:	c3                   	ret    
c0017c6d:	90                   	nop

c0017c6e <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017c6e:	b8 00 00 00 00       	mov    eax,0x0
c0017c73:	c3                   	ret    

c0017c74 <ACPI::detectPCI()>:
c0017c74:	53                   	push   ebx
c0017c75:	83 ec 28             	sub    esp,0x28
c0017c78:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017c7d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017c82:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0017c87:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c8d:	83 e0 04             	and    eax,0x4
c0017c90:	84 c0                	test   al,al
c0017c92:	74 2b                	je     c0017cbf <ACPI::detectPCI()+0x4b>
c0017c94:	a1 e8 01 03 c0       	mov    eax,ds:0xc00301e8
c0017c99:	83 ec 08             	sub    esp,0x8
c0017c9c:	68 9e b1 02 c0       	push   0xc002b19e
c0017ca1:	50                   	push   eax
c0017ca2:	e8 eb f8 ff ff       	call   c0017592 <findDataTable(unsigned char*, char*)>
c0017ca7:	83 c4 10             	add    esp,0x10
c0017caa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017cae:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017cb3:	74 0a                	je     c0017cbf <ACPI::detectPCI()+0x4b>
c0017cb5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cba:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017cbf:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017cc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ccb:	8a 00                	mov    al,BYTE PTR [eax]
c0017ccd:	3c 01                	cmp    al,0x1
c0017ccf:	75 0c                	jne    c0017cdd <ACPI::detectPCI()+0x69>
c0017cd1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cd6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017cdb:	eb 26                	jmp    c0017d03 <ACPI::detectPCI()+0x8f>
c0017cdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ce1:	8a 00                	mov    al,BYTE PTR [eax]
c0017ce3:	3c 02                	cmp    al,0x2
c0017ce5:	75 1c                	jne    c0017d03 <ACPI::detectPCI()+0x8f>
c0017ce7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cec:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017cf1:	74 10                	je     c0017d03 <ACPI::detectPCI()+0x8f>
c0017cf3:	83 ec 0c             	sub    esp,0xc
c0017cf6:	68 18 b1 02 c0       	push   0xc002b118
c0017cfb:	e8 0d 21 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0017d00:	83 c4 10             	add    esp,0x10
c0017d03:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017d07:	83 f0 01             	xor    eax,0x1
c0017d0a:	84 c0                	test   al,al
c0017d0c:	74 3f                	je     c0017d4d <ACPI::detectPCI()+0xd9>
c0017d0e:	e8 3d 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017d13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d17:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017d1c:	75 0c                	jne    c0017d2a <ACPI::detectPCI()+0xb6>
c0017d1e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d23:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d28:	eb 23                	jmp    c0017d4d <ACPI::detectPCI()+0xd9>
c0017d2a:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017d2f:	75 1c                	jne    c0017d4d <ACPI::detectPCI()+0xd9>
c0017d31:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d36:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d3b:	74 10                	je     c0017d4d <ACPI::detectPCI()+0xd9>
c0017d3d:	83 ec 0c             	sub    esp,0xc
c0017d40:	68 18 b1 02 c0       	push   0xc002b118
c0017d45:	e8 c3 20 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0017d4a:	83 c4 10             	add    esp,0x10
c0017d4d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017d52:	74 7e                	je     c0017dd2 <ACPI::detectPCI()+0x15e>
c0017d54:	83 ec 0c             	sub    esp,0xc
c0017d57:	68 a3 b1 02 c0       	push   0xc002b1a3
c0017d5c:	e8 92 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017d61:	83 c4 10             	add    esp,0x10
c0017d64:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017d6c:	83 ec 0c             	sub    esp,0xc
c0017d6f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d73:	e8 21 78 ff ff       	call   c000f599 <malloc>
c0017d78:	83 c4 10             	add    esp,0x10
c0017d7b:	89 c3                	mov    ebx,eax
c0017d7d:	83 ec 0c             	sub    esp,0xc
c0017d80:	53                   	push   ebx
c0017d81:	e8 aa a5 00 00       	call   c0022330 <PCI::PCI()>
c0017d86:	83 c4 10             	add    esp,0x10
c0017d89:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017d8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d91:	83 ec 08             	sub    esp,0x8
c0017d94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d98:	50                   	push   eax
c0017d99:	e8 3c bd ff ff       	call   c0013ada <Device::addChild(Device*)>
c0017d9e:	83 c4 10             	add    esp,0x10
c0017da1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017da5:	8b 00                	mov    eax,DWORD PTR [eax]
c0017da7:	83 c0 08             	add    eax,0x8
c0017daa:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dac:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017db1:	74 07                	je     c0017dba <ACPI::detectPCI()+0x146>
c0017db3:	ba 01 00 00 00       	mov    edx,0x1
c0017db8:	eb 05                	jmp    c0017dbf <ACPI::detectPCI()+0x14b>
c0017dba:	ba 02 00 00 00       	mov    edx,0x2
c0017dbf:	6a 00                	push   0x0
c0017dc1:	6a 00                	push   0x0
c0017dc3:	52                   	push   edx
c0017dc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dc8:	ff d0                	call   eax
c0017dca:	83 c4 10             	add    esp,0x10
c0017dcd:	e9 9e 00 00 00       	jmp    c0017e70 <ACPI::detectPCI()+0x1fc>
c0017dd2:	83 ec 0c             	sub    esp,0xc
c0017dd5:	68 bb b1 02 c0       	push   0xc002b1bb
c0017dda:	e8 c2 a8 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0017ddf:	83 c4 10             	add    esp,0x10
c0017de2:	83 ec 0c             	sub    esp,0xc
c0017de5:	68 c6 b1 02 c0       	push   0xc002b1c6
c0017dea:	e8 04 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017def:	83 c4 10             	add    esp,0x10
c0017df2:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017df9:	83 ec 0c             	sub    esp,0xc
c0017dfc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e00:	e8 94 77 ff ff       	call   c000f599 <malloc>
c0017e05:	83 c4 10             	add    esp,0x10
c0017e08:	89 c3                	mov    ebx,eax
c0017e0a:	83 ec 0c             	sub    esp,0xc
c0017e0d:	53                   	push   ebx
c0017e0e:	e8 87 b0 00 00       	call   c0022e9a <IDE::IDE()>
c0017e13:	83 c4 10             	add    esp,0x10
c0017e16:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017e1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e1e:	83 ec 08             	sub    esp,0x8
c0017e21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e25:	50                   	push   eax
c0017e26:	e8 af bc ff ff       	call   c0013ada <Device::addChild(Device*)>
c0017e2b:	83 c4 10             	add    esp,0x10
c0017e2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e32:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e40:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e4d:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017e56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e5c:	83 c0 08             	add    eax,0x8
c0017e5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e61:	6a 00                	push   0x0
c0017e63:	6a 00                	push   0x0
c0017e65:	6a 00                	push   0x0
c0017e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e6b:	ff d0                	call   eax
c0017e6d:	83 c4 10             	add    esp,0x10
c0017e70:	90                   	nop
c0017e71:	83 c4 28             	add    esp,0x28
c0017e74:	5b                   	pop    ebx
c0017e75:	c3                   	ret    

c0017e76 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017e76:	83 ec 1c             	sub    esp,0x1c
c0017e79:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e7d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017e80:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e84:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0017e89:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017e8e:	83 ec 08             	sub    esp,0x8
c0017e91:	52                   	push   edx
c0017e92:	50                   	push   eax
c0017e93:	e8 18 6d ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017e98:	83 c4 10             	add    esp,0x10
c0017e9b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017e9f:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0017ea4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017ea9:	83 ec 04             	sub    esp,0x4
c0017eac:	6a 01                	push   0x1
c0017eae:	52                   	push   edx
c0017eaf:	50                   	push   eax
c0017eb0:	e8 2d 6e ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017eb5:	83 c4 10             	add    esp,0x10
c0017eb8:	90                   	nop
c0017eb9:	83 c4 1c             	add    esp,0x1c
c0017ebc:	c3                   	ret    
c0017ebd:	90                   	nop

c0017ebe <ACPI::sleep()>:
c0017ebe:	83 ec 0c             	sub    esp,0xc
c0017ec1:	a1 c0 ff 02 c0       	mov    eax,ds:0xc002ffc0
c0017ec6:	85 c0                	test   eax,eax
c0017ec8:	74 07                	je     c0017ed1 <ACPI::sleep()+0x13>
c0017eca:	a1 c0 ff 02 c0       	mov    eax,ds:0xc002ffc0
c0017ecf:	ff d0                	call   eax
c0017ed1:	90                   	nop
c0017ed2:	83 c4 0c             	add    esp,0xc
c0017ed5:	c3                   	ret    

c0017ed6 <ACPI::open(int, int, void*)>:
c0017ed6:	57                   	push   edi
c0017ed7:	56                   	push   esi
c0017ed8:	53                   	push   ebx
c0017ed9:	81 ec 60 01 00 00    	sub    esp,0x160
c0017edf:	83 ec 0c             	sub    esp,0xc
c0017ee2:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017ee9:	e8 86 fd ff ff       	call   c0017c74 <ACPI::detectPCI()>
c0017eee:	83 c4 10             	add    esp,0x10
c0017ef1:	83 ec 0c             	sub    esp,0xc
c0017ef4:	68 40 b1 02 c0       	push   0xc002b140
c0017ef9:	e8 f5 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017efe:	83 c4 10             	add    esp,0x10
c0017f01:	83 ec 0c             	sub    esp,0xc
c0017f04:	68 db b1 02 c0       	push   0xc002b1db
c0017f09:	e8 52 46 00 00       	call   c001c560 <Thr::loadKernelSymbolTable(char const*)>
c0017f0e:	83 c4 10             	add    esp,0x10
c0017f11:	83 ec 0c             	sub    esp,0xc
c0017f14:	68 f9 b1 02 c0       	push   0xc002b1f9
c0017f19:	e8 d5 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f1e:	83 c4 10             	add    esp,0x10
c0017f21:	83 ec 04             	sub    esp,0x4
c0017f24:	6a 0c                	push   0xc
c0017f26:	68 14 b2 02 c0       	push   0xc002b214
c0017f2b:	68 25 b2 02 c0       	push   0xc002b225
c0017f30:	e8 94 2c 00 00       	call   c001abc9 <Reg::readIntWithDefault(char*, char*, int)>
c0017f35:	83 c4 10             	add    esp,0x10
c0017f38:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017f3f:	83 ec 0c             	sub    esp,0xc
c0017f42:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017f49:	e8 b1 94 ff ff       	call   c00113ff <Virt::setupPageSwapping(int)>
c0017f4e:	83 c4 10             	add    esp,0x10
c0017f51:	83 ec 0c             	sub    esp,0xc
c0017f54:	68 d5 9d 02 c0       	push   0xc0029dd5
c0017f59:	e8 95 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f5e:	83 c4 10             	add    esp,0x10
c0017f61:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c0017f67:	83 ec 08             	sub    esp,0x8
c0017f6a:	6a 01                	push   0x1
c0017f6c:	68 2c b2 02 c0       	push   0xc002b22c
c0017f71:	e8 61 50 00 00       	call   c001cfd7 <Thr::loadDLL(char const*, bool)>
c0017f76:	83 c4 10             	add    esp,0x10
c0017f79:	83 ec 08             	sub    esp,0x8
c0017f7c:	53                   	push   ebx
c0017f7d:	50                   	push   eax
c0017f7e:	e8 7f 52 00 00       	call   c001d202 <Thr::executeDLL(unsigned long, void*)>
c0017f83:	83 c4 10             	add    esp,0x10
c0017f86:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017f8d:	83 ec 08             	sub    esp,0x8
c0017f90:	6a 12                	push   0x12
c0017f92:	50                   	push   eax
c0017f93:	e8 c6 be ff ff       	call   c0013e5e <getDevicesOfType(DeviceType)>
c0017f98:	83 c4 0c             	add    esp,0xc
c0017f9b:	83 ec 0c             	sub    esp,0xc
c0017f9e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fa5:	50                   	push   eax
c0017fa6:	e8 89 09 01 00       	call   c0028934 <LinkedList<Device>::isEmpty()>
c0017fab:	83 c4 10             	add    esp,0x10
c0017fae:	83 f0 01             	xor    eax,0x1
c0017fb1:	84 c0                	test   al,al
c0017fb3:	0f 84 43 01 00 00    	je     c00180fc <ACPI::open(int, int, void*)+0x226>
c0017fb9:	83 ec 0c             	sub    esp,0xc
c0017fbc:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fc3:	50                   	push   eax
c0017fc4:	e8 87 09 01 00       	call   c0028950 <LinkedList<Device>::getFirstElement()>
c0017fc9:	83 c4 10             	add    esp,0x10
c0017fcc:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017fd3:	83 ec 0c             	sub    esp,0xc
c0017fd6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fdd:	50                   	push   eax
c0017fde:	e8 75 09 01 00       	call   c0028958 <LinkedList<Device>::removeFirst()>
c0017fe3:	83 c4 10             	add    esp,0x10
c0017fe6:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0017fed:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0017ff4:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0017ffb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fff:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018005:	ba 09 00 00 00       	mov    edx,0x9
c001800a:	fc                   	cld    
c001800b:	89 c7                	mov    edi,eax
c001800d:	89 de                	mov    esi,ebx
c001800f:	89 d1                	mov    ecx,edx
c0018011:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018013:	83 ec 08             	sub    esp,0x8
c0018016:	8d 44 24 38          	lea    eax,[esp+0x38]
c001801a:	50                   	push   eax
c001801b:	83 ec 24             	sub    esp,0x24
c001801e:	89 e0                	mov    eax,esp
c0018020:	89 c3                	mov    ebx,eax
c0018022:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018026:	ba 09 00 00 00       	mov    edx,0x9
c001802b:	89 df                	mov    edi,ebx
c001802d:	89 c6                	mov    esi,eax
c001802f:	89 d1                	mov    ecx,edx
c0018031:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018033:	e8 d6 a7 00 00       	call   c002280e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018038:	83 c4 30             	add    esp,0x30
c001803b:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018042:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001804a:	0f 84 4b ff ff ff    	je     c0017f9b <ACPI::open(int, int, void*)+0xc5>
c0018050:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001805b:	83 ec 0c             	sub    esp,0xc
c001805e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018065:	e8 2f 75 ff ff       	call   c000f599 <malloc>
c001806a:	83 c4 10             	add    esp,0x10
c001806d:	89 c3                	mov    ebx,eax
c001806f:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0018074:	83 ec 04             	sub    esp,0x4
c0018077:	50                   	push   eax
c0018078:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001807f:	53                   	push   ebx
c0018080:	e8 7b ab ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c0018085:	83 c4 10             	add    esp,0x10
c0018088:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001808f:	83 ec 0c             	sub    esp,0xc
c0018092:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018099:	e8 34 ae ff ff       	call   c0012ed2 <File::exists()>
c001809e:	83 c4 10             	add    esp,0x10
c00180a1:	84 c0                	test   al,al
c00180a3:	74 27                	je     c00180cc <ACPI::open(int, int, void*)+0x1f6>
c00180a5:	83 ec 08             	sub    esp,0x8
c00180a8:	6a 01                	push   0x1
c00180aa:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180b1:	e8 21 4f 00 00       	call   c001cfd7 <Thr::loadDLL(char const*, bool)>
c00180b6:	83 c4 10             	add    esp,0x10
c00180b9:	83 ec 08             	sub    esp,0x8
c00180bc:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180c3:	50                   	push   eax
c00180c4:	e8 39 51 00 00       	call   c001d202 <Thr::executeDLL(unsigned long, void*)>
c00180c9:	83 c4 10             	add    esp,0x10
c00180cc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00180d4:	0f 84 c1 fe ff ff    	je     c0017f9b <ACPI::open(int, int, void*)+0xc5>
c00180da:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00180e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00180e3:	83 c0 08             	add    eax,0x8
c00180e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00180e8:	83 ec 0c             	sub    esp,0xc
c00180eb:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180f2:	ff d0                	call   eax
c00180f4:	83 c4 10             	add    esp,0x10
c00180f7:	e9 9f fe ff ff       	jmp    c0017f9b <ACPI::open(int, int, void*)+0xc5>
c00180fc:	83 ec 0c             	sub    esp,0xc
c00180ff:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018106:	50                   	push   eax
c0018107:	e8 26 08 01 00       	call   c0028932 <LinkedList<Device>::~LinkedList()>
c001810c:	83 c4 10             	add    esp,0x10
c001810f:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c0018115:	83 ec 08             	sub    esp,0x8
c0018118:	6a 01                	push   0x1
c001811a:	68 47 b2 02 c0       	push   0xc002b247
c001811f:	e8 b3 4e 00 00       	call   c001cfd7 <Thr::loadDLL(char const*, bool)>
c0018124:	83 c4 10             	add    esp,0x10
c0018127:	83 ec 08             	sub    esp,0x8
c001812a:	53                   	push   ebx
c001812b:	50                   	push   eax
c001812c:	e8 d1 50 00 00       	call   c001d202 <Thr::executeDLL(unsigned long, void*)>
c0018131:	83 c4 10             	add    esp,0x10
c0018134:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c001813a:	83 ec 08             	sub    esp,0x8
c001813d:	6a 01                	push   0x1
c001813f:	68 64 b2 02 c0       	push   0xc002b264
c0018144:	e8 8e 4e 00 00       	call   c001cfd7 <Thr::loadDLL(char const*, bool)>
c0018149:	83 c4 10             	add    esp,0x10
c001814c:	83 ec 08             	sub    esp,0x8
c001814f:	53                   	push   ebx
c0018150:	50                   	push   eax
c0018151:	e8 ac 50 00 00       	call   c001d202 <Thr::executeDLL(unsigned long, void*)>
c0018156:	83 c4 10             	add    esp,0x10
c0018159:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001815e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018164:	83 e0 04             	and    eax,0x4
c0018167:	84 c0                	test   al,al
c0018169:	0f 84 0d 01 00 00    	je     c001827c <ACPI::open(int, int, void*)+0x3a6>
c001816f:	83 ec 0c             	sub    esp,0xc
c0018172:	68 81 b2 02 c0       	push   0xc002b281
c0018177:	e8 77 74 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c001817c:	83 c4 10             	add    esp,0x10
c001817f:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001818a:	83 ec 0c             	sub    esp,0xc
c001818d:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018194:	e8 00 74 ff ff       	call   c000f599 <malloc>
c0018199:	83 c4 10             	add    esp,0x10
c001819c:	89 c3                	mov    ebx,eax
c001819e:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00181a3:	83 ec 04             	sub    esp,0x4
c00181a6:	50                   	push   eax
c00181a7:	68 9e b2 02 c0       	push   0xc002b29e
c00181ac:	53                   	push   ebx
c00181ad:	e8 4e aa ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c00181b2:	83 c4 10             	add    esp,0x10
c00181b5:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00181bc:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00181c4:	74 1a                	je     c00181e0 <ACPI::open(int, int, void*)+0x30a>
c00181c6:	83 ec 0c             	sub    esp,0xc
c00181c9:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00181d0:	e8 fd ac ff ff       	call   c0012ed2 <File::exists()>
c00181d5:	83 c4 10             	add    esp,0x10
c00181d8:	84 c0                	test   al,al
c00181da:	74 04                	je     c00181e0 <ACPI::open(int, int, void*)+0x30a>
c00181dc:	b0 01                	mov    al,0x1
c00181de:	eb 02                	jmp    c00181e2 <ACPI::open(int, int, void*)+0x30c>
c00181e0:	b0 00                	mov    al,0x0
c00181e2:	84 c0                	test   al,al
c00181e4:	74 25                	je     c001820b <ACPI::open(int, int, void*)+0x335>
c00181e6:	83 ec 08             	sub    esp,0x8
c00181e9:	6a 01                	push   0x1
c00181eb:	68 9e b2 02 c0       	push   0xc002b29e
c00181f0:	e8 e2 4d 00 00       	call   c001cfd7 <Thr::loadDLL(char const*, bool)>
c00181f5:	83 c4 10             	add    esp,0x10
c00181f8:	83 ec 08             	sub    esp,0x8
c00181fb:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018202:	50                   	push   eax
c0018203:	e8 fa 4f 00 00       	call   c001d202 <Thr::executeDLL(unsigned long, void*)>
c0018208:	83 c4 10             	add    esp,0x10
c001820b:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018213:	74 27                	je     c001823c <ACPI::open(int, int, void*)+0x366>
c0018215:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001821d:	74 1d                	je     c001823c <ACPI::open(int, int, void*)+0x366>
c001821f:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018226:	8b 00                	mov    eax,DWORD PTR [eax]
c0018228:	83 c0 08             	add    eax,0x8
c001822b:	8b 00                	mov    eax,DWORD PTR [eax]
c001822d:	83 ec 0c             	sub    esp,0xc
c0018230:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018237:	ff d0                	call   eax
c0018239:	83 c4 10             	add    esp,0x10
c001823c:	a1 e8 01 03 c0       	mov    eax,ds:0xc00301e8
c0018241:	83 ec 08             	sub    esp,0x8
c0018244:	68 bb b2 02 c0       	push   0xc002b2bb
c0018249:	50                   	push   eax
c001824a:	e8 43 f3 ff ff       	call   c0017592 <findDataTable(unsigned char*, char*)>
c001824f:	83 c4 10             	add    esp,0x10
c0018252:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018259:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018261:	74 19                	je     c001827c <ACPI::open(int, int, void*)+0x3a6>
c0018263:	83 ec 08             	sub    esp,0x8
c0018266:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001826d:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018274:	e8 fd fb ff ff       	call   c0017e76 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018279:	83 c4 10             	add    esp,0x10
c001827c:	b8 00 00 00 00       	mov    eax,0x0
c0018281:	81 c4 60 01 00 00    	add    esp,0x160
c0018287:	5b                   	pop    ebx
c0018288:	5e                   	pop    esi
c0018289:	5f                   	pop    edi
c001828a:	c3                   	ret    
c001828b:	90                   	nop

c001828c <CPU::close(int, int, void*)>:
c001828c:	31 c0                	xor    eax,eax
c001828e:	c3                   	ret    
c001828f:	90                   	nop

c0018290 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018290:	55                   	push   ebp
c0018291:	57                   	push   edi
c0018292:	56                   	push   esi
c0018293:	53                   	push   ebx
c0018294:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018298:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001829c:	89 ce                	mov    esi,ecx
c001829e:	89 d5                	mov    ebp,edx
c00182a0:	80 f9 04             	cmp    cl,0x4
c00182a3:	75 28                	jne    c00182cd <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00182a5:	8d 42 f9             	lea    eax,[edx-0x7]
c00182a8:	3c 03                	cmp    al,0x3
c00182aa:	0f 86 63 01 00 00    	jbe    c0018413 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182b0:	80 fa 03             	cmp    dl,0x3
c00182b3:	0f 84 5a 01 00 00    	je     c0018413 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182b9:	8d 7a f2             	lea    edi,[edx-0xe]
c00182bc:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c00182c1:	89 fb                	mov    ebx,edi
c00182c3:	80 fb 01             	cmp    bl,0x1
c00182c6:	77 4e                	ja     c0018316 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00182c8:	e9 52 01 00 00       	jmp    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182cd:	80 f9 05             	cmp    cl,0x5
c00182d0:	75 4d                	jne    c001831f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00182d2:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c00182d7:	80 fa 03             	cmp    dl,0x3
c00182da:	0f 86 3f 01 00 00    	jbe    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182e0:	8d 7a fa             	lea    edi,[edx-0x6]
c00182e3:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c00182e8:	89 fb                	mov    ebx,edi
c00182ea:	80 fb 01             	cmp    bl,0x1
c00182ed:	0f 86 2c 01 00 00    	jbe    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182f3:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c00182f8:	80 fa 08             	cmp    dl,0x8
c00182fb:	0f 84 1e 01 00 00    	je     c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018301:	89 d7                	mov    edi,edx
c0018303:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c0018308:	83 e7 fb             	and    edi,0xfffffffb
c001830b:	89 fb                	mov    ebx,edi
c001830d:	80 fb 09             	cmp    bl,0x9
c0018310:	0f 84 09 01 00 00    	je     c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018316:	31 c0                	xor    eax,eax
c0018318:	89 eb                	mov    ebx,ebp
c001831a:	0f b6 fb             	movzx  edi,bl
c001831d:	eb 30                	jmp    c001834f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001831f:	31 c0                	xor    eax,eax
c0018321:	80 f9 06             	cmp    cl,0x6
c0018324:	75 f2                	jne    c0018318 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018326:	80 fa 0a             	cmp    dl,0xa
c0018329:	77 ed                	ja     c0018318 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001832b:	bf de 05 00 00       	mov    edi,0x5de
c0018330:	0f a3 d7             	bt     edi,edx
c0018333:	73 e3                	jae    c0018318 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018335:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c001833a:	e9 e0 00 00 00       	jmp    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001833f:	39 c7                	cmp    edi,eax
c0018341:	0f 84 d3 00 00 00    	je     c001841a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018347:	40                   	inc    eax
c0018348:	3d d0 00 00 00       	cmp    eax,0xd0
c001834d:	74 09                	je     c0018358 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001834f:	89 f3                	mov    ebx,esi
c0018351:	80 fb 0f             	cmp    bl,0xf
c0018354:	75 f1                	jne    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018356:	eb e7                	jmp    c001833f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018358:	80 f9 10             	cmp    cl,0x10
c001835b:	75 14                	jne    c0018371 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001835d:	8d 42 fc             	lea    eax,[edx-0x4]
c0018360:	83 e0 fb             	and    eax,0xfffffffb
c0018363:	3c 02                	cmp    al,0x2
c0018365:	76 34                	jbe    c001839b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018367:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c001836c:	80 fa 02             	cmp    dl,0x2
c001836f:	eb 24                	jmp    c0018395 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018371:	80 f9 11             	cmp    cl,0x11
c0018374:	75 13                	jne    c0018389 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018376:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c001837b:	80 fa 03             	cmp    dl,0x3
c001837e:	0f 85 9b 00 00 00    	jne    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018384:	e9 91 00 00 00       	jmp    c001841a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018389:	80 f9 12             	cmp    cl,0x12
c001838c:	75 14                	jne    c00183a2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001838e:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c0018393:	fe ca                	dec    dl
c0018395:	0f 85 84 00 00 00    	jne    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001839b:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00183a0:	eb 7d                	jmp    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183a2:	80 f9 14             	cmp    cl,0x14
c00183a5:	75 12                	jne    c00183b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00183a7:	4a                   	dec    edx
c00183a8:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c00183ad:	80 fa 01             	cmp    dl,0x1
c00183b0:	77 6d                	ja     c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183b2:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c00183b7:	eb 66                	jmp    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183b9:	80 f9 15             	cmp    cl,0x15
c00183bc:	75 31                	jne    c00183ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00183be:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c00183c3:	80 fa 01             	cmp    dl,0x1
c00183c6:	74 57                	je     c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183c8:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c00183cd:	80 fa 13             	cmp    dl,0x13
c00183d0:	76 0c                	jbe    c00183de <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00183d2:	80 fa 30             	cmp    dl,0x30
c00183d5:	75 48                	jne    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183d7:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c00183dc:	eb 41                	jmp    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183de:	b9 04 00 09 00       	mov    ecx,0x90004
c00183e3:	0f a3 d1             	bt     ecx,edx
c00183e6:	73 37                	jae    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183e8:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c00183ed:	eb 30                	jmp    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ef:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c00183f4:	80 f9 16             	cmp    cl,0x16
c00183f7:	75 26                	jne    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183f9:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c00183fe:	84 d2                	test   dl,dl
c0018400:	74 1d                	je     c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018402:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c0018407:	80 fa 30             	cmp    dl,0x30
c001840a:	75 13                	jne    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001840c:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c0018411:	eb 0c                	jmp    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018413:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c0018418:	eb 05                	jmp    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001841a:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c001841f:	5b                   	pop    ebx
c0018420:	5e                   	pop    esi
c0018421:	5f                   	pop    edi
c0018422:	5d                   	pop    ebp
c0018423:	c3                   	ret    

c0018424 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018424:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018428:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001842c:	80 f9 04             	cmp    cl,0x4
c001842f:	75 6b                	jne    c001849c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018431:	b8 a0 cb 02 c0       	mov    eax,0xc002cba0
c0018436:	80 fa 01             	cmp    dl,0x1
c0018439:	0f 86 92 02 00 00    	jbe    c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001843f:	b8 b0 cb 02 c0       	mov    eax,0xc002cbb0
c0018444:	80 fa 02             	cmp    dl,0x2
c0018447:	0f 84 84 02 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001844d:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c0018452:	80 fa 03             	cmp    dl,0x3
c0018455:	0f 84 76 02 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001845b:	b8 d0 cb 02 c0       	mov    eax,0xc002cbd0
c0018460:	80 fa 04             	cmp    dl,0x4
c0018463:	0f 84 68 02 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018469:	b8 e0 cb 02 c0       	mov    eax,0xc002cbe0
c001846e:	80 fa 05             	cmp    dl,0x5
c0018471:	0f 84 5a 02 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018477:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c001847c:	80 fa 07             	cmp    dl,0x7
c001847f:	0f 84 4c 02 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018485:	83 ea 08             	sub    edx,0x8
c0018488:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c001848d:	80 fa 01             	cmp    dl,0x1
c0018490:	0f 87 3b 02 00 00    	ja     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018496:	b8 f0 cb 02 c0       	mov    eax,0xc002cbf0
c001849b:	c3                   	ret    
c001849c:	80 f9 05             	cmp    cl,0x5
c001849f:	75 45                	jne    c00184e6 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00184a1:	8d 4a ff             	lea    ecx,[edx-0x1]
c00184a4:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c00184a9:	80 f9 02             	cmp    cl,0x2
c00184ac:	0f 86 1f 02 00 00    	jbe    c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184b2:	80 fa 04             	cmp    dl,0x4
c00184b5:	0f 84 f3 01 00 00    	je     c00186ae <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00184bb:	80 fa 07             	cmp    dl,0x7
c00184be:	0f 84 0d 02 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c4:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c00184c9:	80 fa 08             	cmp    dl,0x8
c00184cc:	0f 84 ff 01 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d2:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c00184d7:	80 fa 09             	cmp    dl,0x9
c00184da:	0f 85 f1 01 00 00    	jne    c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e0:	b8 20 cc 02 c0       	mov    eax,0xc002cc20
c00184e5:	c3                   	ret    
c00184e6:	80 f9 06             	cmp    cl,0x6
c00184e9:	0f 85 85 01 00 00    	jne    c0018674 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00184ef:	b8 30 cc 02 c0       	mov    eax,0xc002cc30
c00184f4:	80 fa 01             	cmp    dl,0x1
c00184f7:	0f 84 d4 01 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184fd:	8d 42 fb             	lea    eax,[edx-0x5]
c0018500:	3c 01                	cmp    al,0x1
c0018502:	0f 86 ac 01 00 00    	jbe    c00186b4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018508:	80 fa 03             	cmp    dl,0x3
c001850b:	0f 84 a3 01 00 00    	je     c00186b4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018511:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018514:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c0018519:	80 f9 01             	cmp    cl,0x1
c001851c:	0f 86 af 01 00 00    	jbe    c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018522:	80 fa 09             	cmp    dl,0x9
c0018525:	0f 84 8f 01 00 00    	je     c00186ba <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001852b:	8d 4a f6             	lea    ecx,[edx-0xa]
c001852e:	80 f9 01             	cmp    cl,0x1
c0018531:	0f 86 9a 01 00 00    	jbe    c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018537:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c001853c:	80 fa 0d             	cmp    dl,0xd
c001853f:	0f 84 8c 01 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018545:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c001854a:	80 fa 0e             	cmp    dl,0xe
c001854d:	0f 84 7e 01 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018553:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c0018558:	80 fa 0f             	cmp    dl,0xf
c001855b:	0f 84 70 01 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018561:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c0018566:	80 fa 15             	cmp    dl,0x15
c0018569:	0f 84 62 01 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001856f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018572:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c0018577:	80 f9 01             	cmp    cl,0x1
c001857a:	0f 86 51 01 00 00    	jbe    c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018580:	80 fa 1a             	cmp    dl,0x1a
c0018583:	0f 84 37 01 00 00    	je     c00186c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018589:	80 fa 1c             	cmp    dl,0x1c
c001858c:	0f 84 34 01 00 00    	je     c00186c6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018592:	80 fa 1d             	cmp    dl,0x1d
c0018595:	0f 84 36 01 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001859b:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c00185a0:	80 fa 25             	cmp    dl,0x25
c00185a3:	0f 84 28 01 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a9:	8d 4a da             	lea    ecx,[edx-0x26]
c00185ac:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00185b1:	80 f9 01             	cmp    cl,0x1
c00185b4:	0f 86 17 01 00 00    	jbe    c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ba:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c00185bf:	80 fa 2a             	cmp    dl,0x2a
c00185c2:	0f 84 09 01 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c8:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c00185cd:	80 fa 2c             	cmp    dl,0x2c
c00185d0:	0f 84 fb 00 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d6:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c00185db:	80 fa 2d             	cmp    dl,0x2d
c00185de:	0f 84 ed 00 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e4:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c00185e9:	80 fa 2e             	cmp    dl,0x2e
c00185ec:	0f 84 df 00 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f2:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c00185f7:	80 fa 2f             	cmp    dl,0x2f
c00185fa:	0f 84 d1 00 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018600:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018603:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c0018608:	80 f9 01             	cmp    cl,0x1
c001860b:	0f 86 c0 00 00 00    	jbe    c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018611:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c0018616:	80 fa 37             	cmp    dl,0x37
c0018619:	0f 84 b2 00 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861f:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c0018624:	80 fa 3a             	cmp    dl,0x3a
c0018627:	0f 84 a4 00 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001862d:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c0018632:	80 fa 3c             	cmp    dl,0x3c
c0018635:	0f 84 96 00 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001863b:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c0018640:	80 fa 3d             	cmp    dl,0x3d
c0018643:	0f 84 88 00 00 00    	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018649:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c001864e:	80 fa 3e             	cmp    dl,0x3e
c0018651:	74 7e                	je     c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018653:	8d 42 bb             	lea    eax,[edx-0x45]
c0018656:	3c 01                	cmp    al,0x1
c0018658:	76 72                	jbe    c00186cc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001865a:	80 fa 3f             	cmp    dl,0x3f
c001865d:	74 6d                	je     c00186cc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001865f:	80 fa 4a             	cmp    dl,0x4a
c0018662:	74 0a                	je     c001866e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018664:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c0018669:	80 fa 4d             	cmp    dl,0x4d
c001866c:	75 63                	jne    c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001866e:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c0018673:	c3                   	ret    
c0018674:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c0018679:	80 f9 0b             	cmp    cl,0xb
c001867c:	75 0a                	jne    c0018688 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001867e:	fe ca                	dec    dl
c0018680:	75 4f                	jne    c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018682:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c0018687:	c3                   	ret    
c0018688:	80 f9 0f             	cmp    cl,0xf
c001868b:	75 44                	jne    c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001868d:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c0018692:	80 fa 02             	cmp    dl,0x2
c0018695:	76 3a                	jbe    c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018697:	8d 42 fd             	lea    eax,[edx-0x3]
c001869a:	3c 01                	cmp    al,0x1
c001869c:	76 0a                	jbe    c00186a8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001869e:	b8 41 b4 02 c0       	mov    eax,0xc002b441
c00186a3:	80 fa 06             	cmp    dl,0x6
c00186a6:	75 29                	jne    c00186d1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a8:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c00186ad:	c3                   	ret    
c00186ae:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c00186b3:	c3                   	ret    
c00186b4:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c00186b9:	c3                   	ret    
c00186ba:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c00186bf:	c3                   	ret    
c00186c0:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c00186c5:	c3                   	ret    
c00186c6:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00186cb:	c3                   	ret    
c00186cc:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c00186d1:	c3                   	ret    

c00186d2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00186d2:	60                   	pusha  
c00186d3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00186db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00186df:	9c                   	pushf  
c00186e0:	fa                   	cli    
c00186e1:	0f 09                	wbinvd 
c00186e3:	0f 30                	wrmsr  
c00186e5:	9d                   	popf   
c00186e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00186ea:	89 02                	mov    DWORD PTR [edx],eax
c00186ec:	61                   	popa   
c00186ed:	c3                   	ret    

c00186ee <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00186ee:	60                   	pusha  
c00186ef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186f3:	9c                   	pushf  
c00186f4:	fa                   	cli    
c00186f5:	0f 09                	wbinvd 
c00186f7:	31 c0                	xor    eax,eax
c00186f9:	31 d2                	xor    edx,edx
c00186fb:	0f 32                	rdmsr  
c00186fd:	9d                   	popf   
c00186fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018702:	89 02                	mov    DWORD PTR [edx],eax
c0018704:	61                   	popa   
c0018705:	c3                   	ret    

c0018706 <CPU::AMD_K6_writeback(int, int, int)>:
c0018706:	56                   	push   esi
c0018707:	53                   	push   ebx
c0018708:	83 ec 10             	sub    esp,0x10
c001870b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001870f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018714:	75 5d                	jne    c0018773 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018716:	83 f8 08             	cmp    eax,0x8
c0018719:	75 09                	jne    c0018724 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001871b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018720:	7e 13                	jle    c0018735 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018722:	eb 30                	jmp    c0018754 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018724:	83 f8 06             	cmp    eax,0x6
c0018727:	7c 4a                	jl     c0018773 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018729:	83 f8 07             	cmp    eax,0x7
c001872c:	7e 07                	jle    c0018735 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001872e:	83 f8 09             	cmp    eax,0x9
c0018731:	74 21                	je     c0018754 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018733:	eb 3e                	jmp    c0018773 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018735:	89 e6                	mov    esi,esp
c0018737:	8b 1d 68 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d968
c001873d:	56                   	push   esi
c001873e:	c1 eb 15             	shr    ebx,0x15
c0018741:	68 82 00 00 c0       	push   0xc0000082
c0018746:	83 e3 7e             	and    ebx,0x7e
c0018749:	e8 a0 ff ff ff       	call   c00186ee <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001874e:	56                   	push   esi
c001874f:	6a 00                	push   0x0
c0018751:	53                   	push   ebx
c0018752:	eb 12                	jmp    c0018766 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018754:	89 e3                	mov    ebx,esp
c0018756:	53                   	push   ebx
c0018757:	68 82 00 00 c0       	push   0xc0000082
c001875c:	e8 8d ff ff ff       	call   c00186ee <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018761:	53                   	push   ebx
c0018762:	6a 00                	push   0x0
c0018764:	6a 00                	push   0x0
c0018766:	68 82 00 00 c0       	push   0xc0000082
c001876b:	e8 62 ff ff ff       	call   c00186d2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018770:	83 c4 18             	add    esp,0x18
c0018773:	83 c4 10             	add    esp,0x10
c0018776:	5b                   	pop    ebx
c0018777:	5e                   	pop    esi
c0018778:	c3                   	ret    
c0018779:	90                   	nop

c001877a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001877a:	55                   	push   ebp
c001877b:	57                   	push   edi
c001877c:	56                   	push   esi
c001877d:	53                   	push   ebx
c001877e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018782:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018786:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001878a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001878e:	39 05 40 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce40,eax
c0018794:	75 23                	jne    c00187b9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018796:	a1 4c 04 03 c0       	mov    eax,ds:0xc003044c
c001879b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001879f:	89 06                	mov    DWORD PTR [esi],eax
c00187a1:	a1 48 04 03 c0       	mov    eax,ds:0xc0030448
c00187a6:	89 07                	mov    DWORD PTR [edi],eax
c00187a8:	a1 44 04 03 c0       	mov    eax,ds:0xc0030444
c00187ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00187b0:	a1 40 04 03 c0       	mov    eax,ds:0xc0030440
c00187b5:	89 02                	mov    DWORD PTR [edx],eax
c00187b7:	eb 3f                	jmp    c00187f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00187b9:	31 c9                	xor    ecx,ecx
c00187bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187bf:	0f a2                	cpuid  
c00187c1:	89 06                	mov    DWORD PTR [esi],eax
c00187c3:	89 1f                	mov    DWORD PTR [edi],ebx
c00187c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187c9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00187cc:	89 10                	mov    DWORD PTR [eax],edx
c00187ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187d2:	a3 40 ce 02 c0       	mov    ds:0xc002ce40,eax
c00187d7:	8b 06                	mov    eax,DWORD PTR [esi]
c00187d9:	a3 4c 04 03 c0       	mov    ds:0xc003044c,eax
c00187de:	8b 07                	mov    eax,DWORD PTR [edi]
c00187e0:	a3 48 04 03 c0       	mov    ds:0xc0030448,eax
c00187e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00187e8:	a3 44 04 03 c0       	mov    ds:0xc0030444,eax
c00187ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00187f3:	a3 40 04 03 c0       	mov    ds:0xc0030440,eax
c00187f8:	5b                   	pop    ebx
c00187f9:	5e                   	pop    esi
c00187fa:	5f                   	pop    edi
c00187fb:	5d                   	pop    ebp
c00187fc:	c3                   	ret    
c00187fd:	90                   	nop

c00187fe <CPU::cpuidCheckEDX(unsigned int)>:
c00187fe:	83 ec 10             	sub    esp,0x10
c0018801:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018805:	50                   	push   eax
c0018806:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001880a:	50                   	push   eax
c001880b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001880f:	50                   	push   eax
c0018810:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018814:	50                   	push   eax
c0018815:	6a 01                	push   0x1
c0018817:	e8 5e ff ff ff       	call   c001877a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001881c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018820:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018824:	0f 95 c0             	setne  al
c0018827:	83 c4 24             	add    esp,0x24
c001882a:	c3                   	ret    
c001882b:	90                   	nop

c001882c <CPU::cpuidCheckECX(unsigned int)>:
c001882c:	83 ec 10             	sub    esp,0x10
c001882f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018833:	50                   	push   eax
c0018834:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018838:	50                   	push   eax
c0018839:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001883d:	50                   	push   eax
c001883e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018842:	50                   	push   eax
c0018843:	6a 01                	push   0x1
c0018845:	e8 30 ff ff ff       	call   c001877a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001884a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001884e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018852:	0f 95 c0             	setne  al
c0018855:	83 c4 24             	add    esp,0x24
c0018858:	c3                   	ret    
c0018859:	90                   	nop

c001885a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001885a:	83 ec 10             	sub    esp,0x10
c001885d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018861:	50                   	push   eax
c0018862:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018866:	50                   	push   eax
c0018867:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001886b:	50                   	push   eax
c001886c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018870:	50                   	push   eax
c0018871:	6a 07                	push   0x7
c0018873:	e8 02 ff ff ff       	call   c001877a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018878:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001887c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018880:	0f 95 c0             	setne  al
c0018883:	83 c4 24             	add    esp,0x24
c0018886:	c3                   	ret    
c0018887:	90                   	nop

c0018888 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018888:	83 ec 10             	sub    esp,0x10
c001888b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001888f:	50                   	push   eax
c0018890:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018894:	50                   	push   eax
c0018895:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018899:	50                   	push   eax
c001889a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001889e:	50                   	push   eax
c001889f:	6a 07                	push   0x7
c00188a1:	e8 d4 fe ff ff       	call   c001877a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188aa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188ae:	0f 95 c0             	setne  al
c00188b1:	83 c4 24             	add    esp,0x24
c00188b4:	c3                   	ret    
c00188b5:	90                   	nop

c00188b6 <CPU::CPU()>:
c00188b6:	83 ec 0c             	sub    esp,0xc
c00188b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188bd:	83 ec 08             	sub    esp,0x8
c00188c0:	68 41 b4 02 c0       	push   0xc002b441
c00188c5:	50                   	push   eax
c00188c6:	e8 13 b4 ff ff       	call   c0013cde <Device::Device(char const*)>
c00188cb:	83 c4 10             	add    esp,0x10
c00188ce:	ba 18 b5 02 c0       	mov    edx,0xc002b518
c00188d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188d7:	89 10                	mov    DWORD PTR [eax],edx
c00188d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188dd:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00188e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188eb:	05 78 01 00 00       	add    eax,0x178
c00188f0:	83 ec 0c             	sub    esp,0xc
c00188f3:	50                   	push   eax
c00188f4:	e8 d3 64 ff ff       	call   c000edcc <GDT::GDT()>
c00188f9:	83 c4 10             	add    esp,0x10
c00188fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018900:	05 7c 09 00 00       	add    eax,0x97c
c0018905:	83 ec 0c             	sub    esp,0xc
c0018908:	50                   	push   eax
c0018909:	e8 0e 67 ff ff       	call   c000f01c <IDT::IDT()>
c001890e:	83 c4 10             	add    esp,0x10
c0018911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018915:	05 7c 11 00 00       	add    eax,0x117c
c001891a:	83 ec 0c             	sub    esp,0xc
c001891d:	50                   	push   eax
c001891e:	e8 19 82 ff ff       	call   c0010b3c <TSS::TSS()>
c0018923:	83 c4 10             	add    esp,0x10
c0018926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001892a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018935:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001893f:	90                   	nop
c0018940:	83 c4 0c             	add    esp,0xc
c0018943:	c3                   	ret    

c0018944 <CPU::displayFeatures()>:
c0018944:	c3                   	ret    
c0018945:	90                   	nop

c0018946 <CPU::detectFeatures()>:
c0018946:	55                   	push   ebp
c0018947:	57                   	push   edi
c0018948:	56                   	push   esi
c0018949:	53                   	push   ebx
c001894a:	83 ec 50             	sub    esp,0x50
c001894d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018951:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001895b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018962:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018968:	6a 0d                	push   0xd
c001896a:	6a 00                	push   0x0
c001896c:	55                   	push   ebp
c001896d:	e8 de 7d fe ff       	call   c0000750 <memset>
c0018972:	83 c4 10             	add    esp,0x10
c0018975:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001897a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018981:	0f 84 22 09 00 00    	je     c00192a9 <CPU::detectFeatures()+0x963>
c0018987:	83 ec 0c             	sub    esp,0xc
c001898a:	89 ef                	mov    edi,ebp
c001898c:	6a 10                	push   0x10
c001898e:	e8 6b fe ff ff       	call   c00187fe <CPU::cpuidCheckEDX(unsigned int)>
c0018993:	83 e0 01             	and    eax,0x1
c0018996:	8d 14 00             	lea    edx,[eax+eax*1]
c0018999:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001899f:	83 e0 fd             	and    eax,0xfffffffd
c00189a2:	09 d0                	or     eax,edx
c00189a4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189aa:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00189b1:	e8 48 fe ff ff       	call   c00187fe <CPU::cpuidCheckEDX(unsigned int)>
c00189b6:	83 e0 01             	and    eax,0x1
c00189b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00189c0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189c6:	83 e0 fb             	and    eax,0xfffffffb
c00189c9:	09 d0                	or     eax,edx
c00189cb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189d1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00189d8:	e8 21 fe ff ff       	call   c00187fe <CPU::cpuidCheckEDX(unsigned int)>
c00189dd:	83 e0 01             	and    eax,0x1
c00189e0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00189e7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189ed:	83 e0 f7             	and    eax,0xfffffff7
c00189f0:	09 d0                	or     eax,edx
c00189f2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189f8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00189ff:	e8 fa fd ff ff       	call   c00187fe <CPU::cpuidCheckEDX(unsigned int)>
c0018a04:	83 e0 01             	and    eax,0x1
c0018a07:	c1 e0 04             	shl    eax,0x4
c0018a0a:	88 c2                	mov    dl,al
c0018a0c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a12:	83 e0 ef             	and    eax,0xffffffef
c0018a15:	09 d0                	or     eax,edx
c0018a17:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a1d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018a24:	e8 d5 fd ff ff       	call   c00187fe <CPU::cpuidCheckEDX(unsigned int)>
c0018a29:	83 e0 01             	and    eax,0x1
c0018a2c:	c1 e0 05             	shl    eax,0x5
c0018a2f:	88 c2                	mov    dl,al
c0018a31:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a37:	83 e0 df             	and    eax,0xffffffdf
c0018a3a:	09 d0                	or     eax,edx
c0018a3c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a42:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018a49:	e8 b0 fd ff ff       	call   c00187fe <CPU::cpuidCheckEDX(unsigned int)>
c0018a4e:	83 e0 01             	and    eax,0x1
c0018a51:	8d 14 00             	lea    edx,[eax+eax*1]
c0018a54:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018a5a:	83 e0 fd             	and    eax,0xfffffffd
c0018a5d:	09 d0                	or     eax,edx
c0018a5f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018a65:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018a6c:	e8 8d fd ff ff       	call   c00187fe <CPU::cpuidCheckEDX(unsigned int)>
c0018a71:	83 e0 01             	and    eax,0x1
c0018a74:	c1 e0 06             	shl    eax,0x6
c0018a77:	88 c2                	mov    dl,al
c0018a79:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018a7f:	83 e0 bf             	and    eax,0xffffffbf
c0018a82:	09 d0                	or     eax,edx
c0018a84:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018a8a:	58                   	pop    eax
c0018a8b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a8f:	50                   	push   eax
c0018a90:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a94:	50                   	push   eax
c0018a95:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018a99:	56                   	push   esi
c0018a9a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a9e:	50                   	push   eax
c0018a9f:	6a 00                	push   0x0
c0018aa1:	e8 d4 fc ff ff       	call   c001877a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018aa6:	b8 04 00 00 00       	mov    eax,0x4
c0018aab:	89 c1                	mov    ecx,eax
c0018aad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018aaf:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018ab5:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018ab9:	89 c1                	mov    ecx,eax
c0018abb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018abd:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018ac3:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018ac7:	89 c1                	mov    ecx,eax
c0018ac9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018acb:	83 c4 18             	add    esp,0x18
c0018ace:	68 ec b2 02 c0       	push   0xc002b2ec
c0018ad3:	55                   	push   ebp
c0018ad4:	e8 bf 7d fe ff       	call   c0000898 <strcmp>
c0018ad9:	83 c4 10             	add    esp,0x10
c0018adc:	85 c0                	test   eax,eax
c0018ade:	75 0f                	jne    c0018aef <CPU::detectFeatures()+0x1a9>
c0018ae0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018aea:	e9 22 02 00 00       	jmp    c0018d11 <CPU::detectFeatures()+0x3cb>
c0018aef:	50                   	push   eax
c0018af0:	50                   	push   eax
c0018af1:	68 f9 b2 02 c0       	push   0xc002b2f9
c0018af6:	55                   	push   ebp
c0018af7:	e8 9c 7d fe ff       	call   c0000898 <strcmp>
c0018afc:	83 c4 10             	add    esp,0x10
c0018aff:	85 c0                	test   eax,eax
c0018b01:	74 dd                	je     c0018ae0 <CPU::detectFeatures()+0x19a>
c0018b03:	50                   	push   eax
c0018b04:	50                   	push   eax
c0018b05:	68 06 b3 02 c0       	push   0xc002b306
c0018b0a:	55                   	push   ebp
c0018b0b:	e8 88 7d fe ff       	call   c0000898 <strcmp>
c0018b10:	83 c4 10             	add    esp,0x10
c0018b13:	85 c0                	test   eax,eax
c0018b15:	74 2a                	je     c0018b41 <CPU::detectFeatures()+0x1fb>
c0018b17:	50                   	push   eax
c0018b18:	50                   	push   eax
c0018b19:	68 13 b3 02 c0       	push   0xc002b313
c0018b1e:	55                   	push   ebp
c0018b1f:	e8 74 7d fe ff       	call   c0000898 <strcmp>
c0018b24:	83 c4 10             	add    esp,0x10
c0018b27:	85 c0                	test   eax,eax
c0018b29:	74 16                	je     c0018b41 <CPU::detectFeatures()+0x1fb>
c0018b2b:	50                   	push   eax
c0018b2c:	50                   	push   eax
c0018b2d:	68 20 b3 02 c0       	push   0xc002b320
c0018b32:	55                   	push   ebp
c0018b33:	e8 60 7d fe ff       	call   c0000898 <strcmp>
c0018b38:	83 c4 10             	add    esp,0x10
c0018b3b:	85 c0                	test   eax,eax
c0018b3d:	74 48                	je     c0018b87 <CPU::detectFeatures()+0x241>
c0018b3f:	eb 0f                	jmp    c0018b50 <CPU::detectFeatures()+0x20a>
c0018b41:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018b4b:	e9 c1 01 00 00       	jmp    c0018d11 <CPU::detectFeatures()+0x3cb>
c0018b50:	50                   	push   eax
c0018b51:	50                   	push   eax
c0018b52:	68 2d b3 02 c0       	push   0xc002b32d
c0018b57:	55                   	push   ebp
c0018b58:	e8 3b 7d fe ff       	call   c0000898 <strcmp>
c0018b5d:	83 c4 10             	add    esp,0x10
c0018b60:	85 c0                	test   eax,eax
c0018b62:	74 23                	je     c0018b87 <CPU::detectFeatures()+0x241>
c0018b64:	57                   	push   edi
c0018b65:	57                   	push   edi
c0018b66:	68 3a b3 02 c0       	push   0xc002b33a
c0018b6b:	55                   	push   ebp
c0018b6c:	e8 27 7d fe ff       	call   c0000898 <strcmp>
c0018b71:	83 c4 10             	add    esp,0x10
c0018b74:	85 c0                	test   eax,eax
c0018b76:	75 1e                	jne    c0018b96 <CPU::detectFeatures()+0x250>
c0018b78:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018b82:	e9 8a 01 00 00       	jmp    c0018d11 <CPU::detectFeatures()+0x3cb>
c0018b87:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018b91:	e9 7b 01 00 00       	jmp    c0018d11 <CPU::detectFeatures()+0x3cb>
c0018b96:	56                   	push   esi
c0018b97:	56                   	push   esi
c0018b98:	68 47 b3 02 c0       	push   0xc002b347
c0018b9d:	55                   	push   ebp
c0018b9e:	e8 f5 7c fe ff       	call   c0000898 <strcmp>
c0018ba3:	83 c4 10             	add    esp,0x10
c0018ba6:	85 c0                	test   eax,eax
c0018ba8:	75 0f                	jne    c0018bb9 <CPU::detectFeatures()+0x273>
c0018baa:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018bb4:	e9 58 01 00 00       	jmp    c0018d11 <CPU::detectFeatures()+0x3cb>
c0018bb9:	51                   	push   ecx
c0018bba:	51                   	push   ecx
c0018bbb:	68 06 b3 02 c0       	push   0xc002b306
c0018bc0:	55                   	push   ebp
c0018bc1:	e8 d2 7c fe ff       	call   c0000898 <strcmp>
c0018bc6:	83 c4 10             	add    esp,0x10
c0018bc9:	85 c0                	test   eax,eax
c0018bcb:	75 0f                	jne    c0018bdc <CPU::detectFeatures()+0x296>
c0018bcd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018bd7:	e9 35 01 00 00       	jmp    c0018d11 <CPU::detectFeatures()+0x3cb>
c0018bdc:	52                   	push   edx
c0018bdd:	52                   	push   edx
c0018bde:	68 54 b3 02 c0       	push   0xc002b354
c0018be3:	55                   	push   ebp
c0018be4:	e8 af 7c fe ff       	call   c0000898 <strcmp>
c0018be9:	83 c4 10             	add    esp,0x10
c0018bec:	85 c0                	test   eax,eax
c0018bee:	75 0f                	jne    c0018bff <CPU::detectFeatures()+0x2b9>
c0018bf0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018bfa:	e9 12 01 00 00       	jmp    c0018d11 <CPU::detectFeatures()+0x3cb>
c0018bff:	50                   	push   eax
c0018c00:	50                   	push   eax
c0018c01:	68 61 b3 02 c0       	push   0xc002b361
c0018c06:	55                   	push   ebp
c0018c07:	e8 8c 7c fe ff       	call   c0000898 <strcmp>
c0018c0c:	83 c4 10             	add    esp,0x10
c0018c0f:	85 c0                	test   eax,eax
c0018c11:	75 0f                	jne    c0018c22 <CPU::detectFeatures()+0x2dc>
c0018c13:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018c1d:	e9 ef 00 00 00       	jmp    c0018d11 <CPU::detectFeatures()+0x3cb>
c0018c22:	50                   	push   eax
c0018c23:	50                   	push   eax
c0018c24:	68 6e b3 02 c0       	push   0xc002b36e
c0018c29:	55                   	push   ebp
c0018c2a:	e8 69 7c fe ff       	call   c0000898 <strcmp>
c0018c2f:	83 c4 10             	add    esp,0x10
c0018c32:	85 c0                	test   eax,eax
c0018c34:	75 0f                	jne    c0018c45 <CPU::detectFeatures()+0x2ff>
c0018c36:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018c40:	e9 cc 00 00 00       	jmp    c0018d11 <CPU::detectFeatures()+0x3cb>
c0018c45:	50                   	push   eax
c0018c46:	50                   	push   eax
c0018c47:	68 7b b3 02 c0       	push   0xc002b37b
c0018c4c:	55                   	push   ebp
c0018c4d:	e8 46 7c fe ff       	call   c0000898 <strcmp>
c0018c52:	83 c4 10             	add    esp,0x10
c0018c55:	85 c0                	test   eax,eax
c0018c57:	75 0f                	jne    c0018c68 <CPU::detectFeatures()+0x322>
c0018c59:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018c63:	e9 a9 00 00 00       	jmp    c0018d11 <CPU::detectFeatures()+0x3cb>
c0018c68:	50                   	push   eax
c0018c69:	50                   	push   eax
c0018c6a:	68 88 b3 02 c0       	push   0xc002b388
c0018c6f:	55                   	push   ebp
c0018c70:	e8 23 7c fe ff       	call   c0000898 <strcmp>
c0018c75:	83 c4 10             	add    esp,0x10
c0018c78:	85 c0                	test   eax,eax
c0018c7a:	75 0f                	jne    c0018c8b <CPU::detectFeatures()+0x345>
c0018c7c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018c86:	e9 86 00 00 00       	jmp    c0018d11 <CPU::detectFeatures()+0x3cb>
c0018c8b:	50                   	push   eax
c0018c8c:	50                   	push   eax
c0018c8d:	68 95 b3 02 c0       	push   0xc002b395
c0018c92:	55                   	push   ebp
c0018c93:	e8 00 7c fe ff       	call   c0000898 <strcmp>
c0018c98:	83 c4 10             	add    esp,0x10
c0018c9b:	85 c0                	test   eax,eax
c0018c9d:	75 0c                	jne    c0018cab <CPU::detectFeatures()+0x365>
c0018c9f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018ca9:	eb 66                	jmp    c0018d11 <CPU::detectFeatures()+0x3cb>
c0018cab:	50                   	push   eax
c0018cac:	50                   	push   eax
c0018cad:	68 a2 b3 02 c0       	push   0xc002b3a2
c0018cb2:	55                   	push   ebp
c0018cb3:	e8 e0 7b fe ff       	call   c0000898 <strcmp>
c0018cb8:	83 c4 10             	add    esp,0x10
c0018cbb:	85 c0                	test   eax,eax
c0018cbd:	75 0c                	jne    c0018ccb <CPU::detectFeatures()+0x385>
c0018cbf:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018cc9:	eb 46                	jmp    c0018d11 <CPU::detectFeatures()+0x3cb>
c0018ccb:	57                   	push   edi
c0018ccc:	57                   	push   edi
c0018ccd:	68 af b3 02 c0       	push   0xc002b3af
c0018cd2:	55                   	push   ebp
c0018cd3:	e8 c0 7b fe ff       	call   c0000898 <strcmp>
c0018cd8:	83 c4 10             	add    esp,0x10
c0018cdb:	85 c0                	test   eax,eax
c0018cdd:	74 e0                	je     c0018cbf <CPU::detectFeatures()+0x379>
c0018cdf:	56                   	push   esi
c0018ce0:	56                   	push   esi
c0018ce1:	68 bc b3 02 c0       	push   0xc002b3bc
c0018ce6:	55                   	push   ebp
c0018ce7:	e8 ac 7b fe ff       	call   c0000898 <strcmp>
c0018cec:	83 c4 10             	add    esp,0x10
c0018cef:	85 c0                	test   eax,eax
c0018cf1:	74 cc                	je     c0018cbf <CPU::detectFeatures()+0x379>
c0018cf3:	51                   	push   ecx
c0018cf4:	51                   	push   ecx
c0018cf5:	68 c9 b3 02 c0       	push   0xc002b3c9
c0018cfa:	55                   	push   ebp
c0018cfb:	e8 98 7b fe ff       	call   c0000898 <strcmp>
c0018d00:	83 c4 10             	add    esp,0x10
c0018d03:	85 c0                	test   eax,eax
c0018d05:	74 b8                	je     c0018cbf <CPU::detectFeatures()+0x379>
c0018d07:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018d11:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018d16:	0f 86 be 00 00 00    	jbe    c0018dda <CPU::detectFeatures()+0x494>
c0018d1c:	83 ec 0c             	sub    esp,0xc
c0018d1f:	68 80 00 00 00       	push   0x80
c0018d24:	e8 31 fb ff ff       	call   c001885a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d29:	83 e0 01             	and    eax,0x1
c0018d2c:	c1 e0 06             	shl    eax,0x6
c0018d2f:	88 c2                	mov    dl,al
c0018d31:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d37:	83 e0 bf             	and    eax,0xffffffbf
c0018d3a:	09 d0                	or     eax,edx
c0018d3c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d42:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018d49:	e8 0c fb ff ff       	call   c001885a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d4e:	83 e0 01             	and    eax,0x1
c0018d51:	c1 e0 04             	shl    eax,0x4
c0018d54:	88 c2                	mov    dl,al
c0018d56:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d5c:	83 e0 ef             	and    eax,0xffffffef
c0018d5f:	09 d0                	or     eax,edx
c0018d61:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d67:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018d6e:	e8 e7 fa ff ff       	call   c001885a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d73:	c1 e0 07             	shl    eax,0x7
c0018d76:	88 c2                	mov    dl,al
c0018d78:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d7e:	83 e0 7f             	and    eax,0x7f
c0018d81:	09 d0                	or     eax,edx
c0018d83:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d89:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018d90:	e8 f3 fa ff ff       	call   c0018888 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018d95:	83 e0 01             	and    eax,0x1
c0018d98:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018d9f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018da5:	83 e0 f7             	and    eax,0xfffffff7
c0018da8:	09 d0                	or     eax,edx
c0018daa:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018db0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018db7:	e8 cc fa ff ff       	call   c0018888 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018dbc:	83 c4 10             	add    esp,0x10
c0018dbf:	83 e0 01             	and    eax,0x1
c0018dc2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018dc9:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018dcf:	83 e0 fb             	and    eax,0xfffffffb
c0018dd2:	09 d0                	or     eax,edx
c0018dd4:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018dda:	83 ec 0c             	sub    esp,0xc
c0018ddd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018de1:	50                   	push   eax
c0018de2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018de6:	50                   	push   eax
c0018de7:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018deb:	56                   	push   esi
c0018dec:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018df0:	50                   	push   eax
c0018df1:	6a 01                	push   0x1
c0018df3:	e8 82 f9 ff ff       	call   c001877a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018df8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018dfc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018e02:	88 ca                	mov    dl,cl
c0018e04:	83 e0 f0             	and    eax,0xfffffff0
c0018e07:	83 e2 0f             	and    edx,0xf
c0018e0a:	09 d0                	or     eax,edx
c0018e0c:	88 ca                	mov    dl,cl
c0018e0e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018e14:	c0 ea 04             	shr    dl,0x4
c0018e17:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018e1b:	0f b6 c2             	movzx  eax,dl
c0018e1e:	83 c4 20             	add    esp,0x20
c0018e21:	c1 e0 06             	shl    eax,0x6
c0018e24:	89 c7                	mov    edi,eax
c0018e26:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e2c:	66 25 3f c0          	and    ax,0xc03f
c0018e30:	09 f8                	or     eax,edi
c0018e32:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e39:	89 c8                	mov    eax,ecx
c0018e3b:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018e42:	c1 e8 08             	shr    eax,0x8
c0018e45:	83 e5 3f             	and    ebp,0x3f
c0018e48:	83 e0 0f             	and    eax,0xf
c0018e4b:	89 c7                	mov    edi,eax
c0018e4d:	c1 e7 06             	shl    edi,0x6
c0018e50:	09 ef                	or     edi,ebp
c0018e52:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018e59:	89 fa                	mov    edx,edi
c0018e5b:	83 e5 c0             	and    ebp,0xffffffc0
c0018e5e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018e64:	88 c2                	mov    dl,al
c0018e66:	c0 ea 02             	shr    dl,0x2
c0018e69:	89 d7                	mov    edi,edx
c0018e6b:	09 ef                	or     edi,ebp
c0018e6d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018e73:	89 fa                	mov    edx,edi
c0018e75:	83 e5 cf             	and    ebp,0xffffffcf
c0018e78:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018e7e:	89 cf                	mov    edi,ecx
c0018e80:	c1 ef 0c             	shr    edi,0xc
c0018e83:	83 e7 03             	and    edi,0x3
c0018e86:	c1 e7 04             	shl    edi,0x4
c0018e89:	09 ef                	or     edi,ebp
c0018e8b:	3c 06                	cmp    al,0x6
c0018e8d:	89 fa                	mov    edx,edi
c0018e8f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018e95:	74 04                	je     c0018e9b <CPU::detectFeatures()+0x555>
c0018e97:	3c 0f                	cmp    al,0xf
c0018e99:	75 5c                	jne    c0018ef7 <CPU::detectFeatures()+0x5b1>
c0018e9b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018e9f:	89 cf                	mov    edi,ecx
c0018ea1:	c1 ef 10             	shr    edi,0x10
c0018ea4:	c1 e7 04             	shl    edi,0x4
c0018ea7:	09 fa                	or     edx,edi
c0018ea9:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018eaf:	0f b6 d2             	movzx  edx,dl
c0018eb2:	66 81 e7 3f c0       	and    di,0xc03f
c0018eb7:	c1 e2 06             	shl    edx,0x6
c0018eba:	09 fa                	or     edx,edi
c0018ebc:	3c 0f                	cmp    al,0xf
c0018ebe:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018ec5:	75 30                	jne    c0018ef7 <CPU::detectFeatures()+0x5b1>
c0018ec7:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018ecd:	c1 e9 14             	shr    ecx,0x14
c0018ed0:	83 e0 3f             	and    eax,0x3f
c0018ed3:	83 c1 0f             	add    ecx,0xf
c0018ed6:	88 ca                	mov    dl,cl
c0018ed8:	c0 e9 02             	shr    cl,0x2
c0018edb:	c1 e2 06             	shl    edx,0x6
c0018ede:	09 d0                	or     eax,edx
c0018ee0:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018ee6:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018eec:	83 e0 c0             	and    eax,0xffffffc0
c0018eef:	09 c1                	or     ecx,eax
c0018ef1:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018ef7:	83 ec 0c             	sub    esp,0xc
c0018efa:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018f01:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f05:	50                   	push   eax
c0018f06:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018f0a:	55                   	push   ebp
c0018f0b:	56                   	push   esi
c0018f0c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f10:	57                   	push   edi
c0018f11:	68 00 00 00 80       	push   0x80000000
c0018f16:	e8 5f f8 ff ff       	call   c001877a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f1b:	83 c4 20             	add    esp,0x20
c0018f1e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018f26:	76 22                	jbe    c0018f4a <CPU::detectFeatures()+0x604>
c0018f28:	83 ec 0c             	sub    esp,0xc
c0018f2b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f2f:	50                   	push   eax
c0018f30:	55                   	push   ebp
c0018f31:	56                   	push   esi
c0018f32:	57                   	push   edi
c0018f33:	68 01 00 00 80       	push   0x80000001
c0018f38:	e8 3d f8 ff ff       	call   c001877a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f3d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018f47:	83 c4 20             	add    esp,0x20
c0018f4a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018f50:	83 f8 01             	cmp    eax,0x1
c0018f53:	75 6f                	jne    c0018fc4 <CPU::detectFeatures()+0x67e>
c0018f55:	51                   	push   ecx
c0018f56:	51                   	push   ecx
c0018f57:	68 d5 b3 02 c0       	push   0xc002b3d5
c0018f5c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018f60:	56                   	push   esi
c0018f61:	e8 a6 78 fe ff       	call   c000080c <strcpy>
c0018f66:	5f                   	pop    edi
c0018f67:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f6d:	5d                   	pop    ebp
c0018f6e:	66 c1 e8 06          	shr    ax,0x6
c0018f72:	0f b6 c0             	movzx  eax,al
c0018f75:	50                   	push   eax
c0018f76:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f7c:	c1 e8 0e             	shr    eax,0xe
c0018f7f:	0f b6 c0             	movzx  eax,al
c0018f82:	50                   	push   eax
c0018f83:	e8 9c f4 ff ff       	call   c0018424 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018f88:	5a                   	pop    edx
c0018f89:	59                   	pop    ecx
c0018f8a:	50                   	push   eax
c0018f8b:	56                   	push   esi
c0018f8c:	e8 bb 79 fe ff       	call   c000094c <strcat>
c0018f91:	5f                   	pop    edi
c0018f92:	5d                   	pop    ebp
c0018f93:	56                   	push   esi
c0018f94:	53                   	push   ebx
c0018f95:	e8 36 ad ff ff       	call   c0013cd0 <Device::setName(char const*)>
c0018f9a:	58                   	pop    eax
c0018f9b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018fa1:	5a                   	pop    edx
c0018fa2:	68 dc b3 02 c0       	push   0xc002b3dc
c0018fa7:	50                   	push   eax
c0018fa8:	e8 eb 78 fe ff       	call   c0000898 <strcmp>
c0018fad:	83 c4 10             	add    esp,0x10
c0018fb0:	85 c0                	test   eax,eax
c0018fb2:	0f 85 71 03 00 00    	jne    c0019329 <CPU::detectFeatures()+0x9e3>
c0018fb8:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018fbf:	e9 65 03 00 00       	jmp    c0019329 <CPU::detectFeatures()+0x9e3>
c0018fc4:	83 f8 02             	cmp    eax,0x2
c0018fc7:	0f 85 b5 00 00 00    	jne    c0019082 <CPU::detectFeatures()+0x73c>
c0018fcd:	57                   	push   edi
c0018fce:	57                   	push   edi
c0018fcf:	68 ee b3 02 c0       	push   0xc002b3ee
c0018fd4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018fd8:	56                   	push   esi
c0018fd9:	e8 2e 78 fe ff       	call   c000080c <strcpy>
c0018fde:	5d                   	pop    ebp
c0018fdf:	58                   	pop    eax
c0018fe0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fe6:	66 c1 e8 06          	shr    ax,0x6
c0018fea:	0f b6 c0             	movzx  eax,al
c0018fed:	50                   	push   eax
c0018fee:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ff4:	c1 e8 0e             	shr    eax,0xe
c0018ff7:	0f b6 c0             	movzx  eax,al
c0018ffa:	50                   	push   eax
c0018ffb:	e8 90 f2 ff ff       	call   c0018290 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019000:	5a                   	pop    edx
c0019001:	59                   	pop    ecx
c0019002:	50                   	push   eax
c0019003:	56                   	push   esi
c0019004:	e8 43 79 fe ff       	call   c000094c <strcat>
c0019009:	5f                   	pop    edi
c001900a:	5d                   	pop    ebp
c001900b:	56                   	push   esi
c001900c:	53                   	push   ebx
c001900d:	e8 be ac ff ff       	call   c0013cd0 <Device::setName(char const*)>
c0019012:	58                   	pop    eax
c0019013:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019019:	5a                   	pop    edx
c001901a:	68 f3 b3 02 c0       	push   0xc002b3f3
c001901f:	50                   	push   eax
c0019020:	e8 73 78 fe ff       	call   c0000898 <strcmp>
c0019025:	83 c4 10             	add    esp,0x10
c0019028:	85 c0                	test   eax,eax
c001902a:	75 20                	jne    c001904c <CPU::detectFeatures()+0x706>
c001902c:	8b 15 28 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d928
c0019032:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019038:	a8 01                	test   al,0x1
c001903a:	74 10                	je     c001904c <CPU::detectFeatures()+0x706>
c001903c:	83 e0 fe             	and    eax,0xfffffffe
c001903f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019045:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001904c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019052:	c1 e8 0e             	shr    eax,0xe
c0019055:	3c 05                	cmp    al,0x5
c0019057:	0f 85 cc 02 00 00    	jne    c0019329 <CPU::detectFeatures()+0x9e3>
c001905d:	56                   	push   esi
c001905e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019064:	83 e0 0f             	and    eax,0xf
c0019067:	50                   	push   eax
c0019068:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001906e:	66 c1 e8 06          	shr    ax,0x6
c0019072:	0f b6 c0             	movzx  eax,al
c0019075:	50                   	push   eax
c0019076:	6a 05                	push   0x5
c0019078:	e8 89 f6 ff ff       	call   c0018706 <CPU::AMD_K6_writeback(int, int, int)>
c001907d:	e9 1f 02 00 00       	jmp    c00192a1 <CPU::detectFeatures()+0x95b>
c0019082:	8d 50 fd             	lea    edx,[eax-0x3]
c0019085:	83 fa 01             	cmp    edx,0x1
c0019088:	76 09                	jbe    c0019093 <CPU::detectFeatures()+0x74d>
c001908a:	83 f8 06             	cmp    eax,0x6
c001908d:	0f 85 91 01 00 00    	jne    c0019224 <CPU::detectFeatures()+0x8de>
c0019093:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019099:	c1 ea 0e             	shr    edx,0xe
c001909c:	80 fa 05             	cmp    dl,0x5
c001909f:	75 7b                	jne    c001911c <CPU::detectFeatures()+0x7d6>
c00190a1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190a7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00190ac:	66 81 fa 00 01       	cmp    dx,0x100
c00190b1:	75 0c                	jne    c00190bf <CPU::detectFeatures()+0x779>
c00190b3:	51                   	push   ecx
c00190b4:	51                   	push   ecx
c00190b5:	68 fa b3 02 c0       	push   0xc002b3fa
c00190ba:	e9 dc 01 00 00       	jmp    c001929b <CPU::detectFeatures()+0x955>
c00190bf:	66 81 fa 00 02       	cmp    dx,0x200
c00190c4:	75 0c                	jne    c00190d2 <CPU::detectFeatures()+0x78c>
c00190c6:	52                   	push   edx
c00190c7:	52                   	push   edx
c00190c8:	68 0d b4 02 c0       	push   0xc002b40d
c00190cd:	e9 c9 01 00 00       	jmp    c001929b <CPU::detectFeatures()+0x955>
c00190d2:	66 81 fa 40 02       	cmp    dx,0x240
c00190d7:	75 0c                	jne    c00190e5 <CPU::detectFeatures()+0x79f>
c00190d9:	50                   	push   eax
c00190da:	50                   	push   eax
c00190db:	68 1f b4 02 c0       	push   0xc002b41f
c00190e0:	e9 b6 01 00 00       	jmp    c001929b <CPU::detectFeatures()+0x955>
c00190e5:	83 f8 06             	cmp    eax,0x6
c00190e8:	75 0c                	jne    c00190f6 <CPU::detectFeatures()+0x7b0>
c00190ea:	50                   	push   eax
c00190eb:	50                   	push   eax
c00190ec:	68 31 b4 02 c0       	push   0xc002b431
c00190f1:	e9 a5 01 00 00       	jmp    c001929b <CPU::detectFeatures()+0x955>
c00190f6:	83 f8 04             	cmp    eax,0x4
c00190f9:	75 0c                	jne    c0019107 <CPU::detectFeatures()+0x7c1>
c00190fb:	50                   	push   eax
c00190fc:	50                   	push   eax
c00190fd:	68 3d b4 02 c0       	push   0xc002b43d
c0019102:	e9 94 01 00 00       	jmp    c001929b <CPU::detectFeatures()+0x955>
c0019107:	83 f8 03             	cmp    eax,0x3
c001910a:	0f 85 19 02 00 00    	jne    c0019329 <CPU::detectFeatures()+0x9e3>
c0019110:	50                   	push   eax
c0019111:	50                   	push   eax
c0019112:	68 45 b4 02 c0       	push   0xc002b445
c0019117:	e9 7f 01 00 00       	jmp    c001929b <CPU::detectFeatures()+0x955>
c001911c:	80 fa 06             	cmp    dl,0x6
c001911f:	0f 85 db 00 00 00    	jne    c0019200 <CPU::detectFeatures()+0x8ba>
c0019125:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001912b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019130:	66 81 fa 80 01       	cmp    dx,0x180
c0019135:	75 0c                	jne    c0019143 <CPU::detectFeatures()+0x7fd>
c0019137:	50                   	push   eax
c0019138:	50                   	push   eax
c0019139:	68 50 b4 02 c0       	push   0xc002b450
c001913e:	e9 58 01 00 00       	jmp    c001929b <CPU::detectFeatures()+0x955>
c0019143:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019149:	66 f7 c1 80 ff       	test   cx,0xff80
c001914e:	75 0c                	jne    c001915c <CPU::detectFeatures()+0x816>
c0019150:	50                   	push   eax
c0019151:	50                   	push   eax
c0019152:	68 60 b4 02 c0       	push   0xc002b460
c0019157:	e9 3f 01 00 00       	jmp    c001929b <CPU::detectFeatures()+0x955>
c001915c:	66 81 fa 40 02       	cmp    dx,0x240
c0019161:	75 0c                	jne    c001916f <CPU::detectFeatures()+0x829>
c0019163:	55                   	push   ebp
c0019164:	55                   	push   ebp
c0019165:	68 67 b4 02 c0       	push   0xc002b467
c001916a:	e9 2c 01 00 00       	jmp    c001929b <CPU::detectFeatures()+0x955>
c001916f:	66 81 fa 80 02       	cmp    dx,0x280
c0019174:	75 0c                	jne    c0019182 <CPU::detectFeatures()+0x83c>
c0019176:	57                   	push   edi
c0019177:	57                   	push   edi
c0019178:	68 70 b4 02 c0       	push   0xc002b470
c001917d:	e9 19 01 00 00       	jmp    c001929b <CPU::detectFeatures()+0x955>
c0019182:	66 81 fa 40 03       	cmp    dx,0x340
c0019187:	74 ed                	je     c0019176 <CPU::detectFeatures()+0x830>
c0019189:	66 81 fa c0 03       	cmp    dx,0x3c0
c001918e:	75 0c                	jne    c001919c <CPU::detectFeatures()+0x856>
c0019190:	56                   	push   esi
c0019191:	56                   	push   esi
c0019192:	68 77 b4 02 c0       	push   0xc002b477
c0019197:	e9 ff 00 00 00       	jmp    c001929b <CPU::detectFeatures()+0x955>
c001919c:	83 f8 06             	cmp    eax,0x6
c001919f:	0f 84 45 ff ff ff    	je     c00190ea <CPU::detectFeatures()+0x7a4>
c00191a5:	83 f8 04             	cmp    eax,0x4
c00191a8:	0f 84 4d ff ff ff    	je     c00190fb <CPU::detectFeatures()+0x7b5>
c00191ae:	83 f8 03             	cmp    eax,0x3
c00191b1:	0f 85 72 01 00 00    	jne    c0019329 <CPU::detectFeatures()+0x9e3>
c00191b7:	51                   	push   ecx
c00191b8:	51                   	push   ecx
c00191b9:	68 80 b4 02 c0       	push   0xc002b480
c00191be:	53                   	push   ebx
c00191bf:	e8 0c ab ff ff       	call   c0013cd0 <Device::setName(char const*)>
c00191c4:	b1 c1                	mov    cl,0xc1
c00191c6:	88 c8                	mov    al,cl
c00191c8:	e6 22                	out    0x22,al
c00191ca:	e4 23                	in     al,0x23
c00191cc:	88 c2                	mov    dl,al
c00191ce:	88 c8                	mov    al,cl
c00191d0:	e6 22                	out    0x22,al
c00191d2:	88 d0                	mov    al,dl
c00191d4:	83 c8 10             	or     eax,0x10
c00191d7:	e6 23                	out    0x23,al
c00191d9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00191e0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00191e3:	89 d0                	mov    eax,edx
c00191e5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00191eb:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00191ef:	40                   	inc    eax
c00191f0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00191f6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00191fb:	e9 a1 00 00 00       	jmp    c00192a1 <CPU::detectFeatures()+0x95b>
c0019200:	83 f8 06             	cmp    eax,0x6
c0019203:	0f 84 e1 fe ff ff    	je     c00190ea <CPU::detectFeatures()+0x7a4>
c0019209:	83 f8 04             	cmp    eax,0x4
c001920c:	0f 84 e9 fe ff ff    	je     c00190fb <CPU::detectFeatures()+0x7b5>
c0019212:	83 f8 03             	cmp    eax,0x3
c0019215:	0f 85 0e 01 00 00    	jne    c0019329 <CPU::detectFeatures()+0x9e3>
c001921b:	52                   	push   edx
c001921c:	52                   	push   edx
c001921d:	68 8b b4 02 c0       	push   0xc002b48b
c0019222:	eb 77                	jmp    c001929b <CPU::detectFeatures()+0x955>
c0019224:	83 f8 07             	cmp    eax,0x7
c0019227:	75 09                	jne    c0019232 <CPU::detectFeatures()+0x8ec>
c0019229:	50                   	push   eax
c001922a:	50                   	push   eax
c001922b:	68 95 b4 02 c0       	push   0xc002b495
c0019230:	eb 69                	jmp    c001929b <CPU::detectFeatures()+0x955>
c0019232:	83 f8 0a             	cmp    eax,0xa
c0019235:	75 09                	jne    c0019240 <CPU::detectFeatures()+0x8fa>
c0019237:	50                   	push   eax
c0019238:	50                   	push   eax
c0019239:	68 a0 b4 02 c0       	push   0xc002b4a0
c001923e:	eb 5b                	jmp    c001929b <CPU::detectFeatures()+0x955>
c0019240:	83 f8 0b             	cmp    eax,0xb
c0019243:	75 09                	jne    c001924e <CPU::detectFeatures()+0x908>
c0019245:	50                   	push   eax
c0019246:	50                   	push   eax
c0019247:	68 a8 b4 02 c0       	push   0xc002b4a8
c001924c:	eb 4d                	jmp    c001929b <CPU::detectFeatures()+0x955>
c001924e:	83 f8 08             	cmp    eax,0x8
c0019251:	75 09                	jne    c001925c <CPU::detectFeatures()+0x916>
c0019253:	50                   	push   eax
c0019254:	50                   	push   eax
c0019255:	68 b1 b4 02 c0       	push   0xc002b4b1
c001925a:	eb 3f                	jmp    c001929b <CPU::detectFeatures()+0x955>
c001925c:	83 f8 09             	cmp    eax,0x9
c001925f:	75 09                	jne    c001926a <CPU::detectFeatures()+0x924>
c0019261:	50                   	push   eax
c0019262:	50                   	push   eax
c0019263:	68 b9 b4 02 c0       	push   0xc002b4b9
c0019268:	eb 31                	jmp    c001929b <CPU::detectFeatures()+0x955>
c001926a:	83 f8 05             	cmp    eax,0x5
c001926d:	75 09                	jne    c0019278 <CPU::detectFeatures()+0x932>
c001926f:	50                   	push   eax
c0019270:	50                   	push   eax
c0019271:	68 c1 b4 02 c0       	push   0xc002b4c1
c0019276:	eb 23                	jmp    c001929b <CPU::detectFeatures()+0x955>
c0019278:	83 f8 0c             	cmp    eax,0xc
c001927b:	75 09                	jne    c0019286 <CPU::detectFeatures()+0x940>
c001927d:	55                   	push   ebp
c001927e:	55                   	push   ebp
c001927f:	68 cf b4 02 c0       	push   0xc002b4cf
c0019284:	eb 15                	jmp    c001929b <CPU::detectFeatures()+0x955>
c0019286:	83 f8 0d             	cmp    eax,0xd
c0019289:	75 09                	jne    c0019294 <CPU::detectFeatures()+0x94e>
c001928b:	57                   	push   edi
c001928c:	57                   	push   edi
c001928d:	68 da b4 02 c0       	push   0xc002b4da
c0019292:	eb 07                	jmp    c001929b <CPU::detectFeatures()+0x955>
c0019294:	56                   	push   esi
c0019295:	56                   	push   esi
c0019296:	68 ee b4 02 c0       	push   0xc002b4ee
c001929b:	53                   	push   ebx
c001929c:	e8 2f aa ff ff       	call   c0013cd0 <Device::setName(char const*)>
c00192a1:	83 c4 10             	add    esp,0x10
c00192a4:	e9 80 00 00 00       	jmp    c0019329 <CPU::detectFeatures()+0x9e3>
c00192a9:	51                   	push   ecx
c00192aa:	51                   	push   ecx
c00192ab:	68 3a b3 02 c0       	push   0xc002b33a
c00192b0:	55                   	push   ebp
c00192b1:	e8 56 75 fe ff       	call   c000080c <strcpy>
c00192b6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192c0:	e8 e9 6f fe ff       	call   c00002ae <is486>
c00192c5:	83 c4 10             	add    esp,0x10
c00192c8:	85 c0                	test   eax,eax
c00192ca:	74 2b                	je     c00192f7 <CPU::detectFeatures()+0x9b1>
c00192cc:	52                   	push   edx
c00192cd:	52                   	push   edx
c00192ce:	68 fa b4 02 c0       	push   0xc002b4fa
c00192d3:	53                   	push   ebx
c00192d4:	e8 f7 a9 ff ff       	call   c0013cd0 <Device::setName(char const*)>
c00192d9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00192e0:	0f 20 c0             	mov    eax,cr0
c00192e3:	83 e0 14             	and    eax,0x14
c00192e6:	83 c4 10             	add    esp,0x10
c00192e9:	83 f8 04             	cmp    eax,0x4
c00192ec:	75 1f                	jne    c001930d <CPU::detectFeatures()+0x9c7>
c00192ee:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00192f5:	eb 32                	jmp    c0019329 <CPU::detectFeatures()+0x9e3>
c00192f7:	50                   	push   eax
c00192f8:	50                   	push   eax
c00192f9:	68 05 b5 02 c0       	push   0xc002b505
c00192fe:	53                   	push   ebx
c00192ff:	e8 cc a9 ff ff       	call   c0013cd0 <Device::setName(char const*)>
c0019304:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001930b:	eb d3                	jmp    c00192e0 <CPU::detectFeatures()+0x99a>
c001930d:	e8 77 6f fe ff       	call   c0000289 <hasLegacyFPU>
c0019312:	83 e0 01             	and    eax,0x1
c0019315:	8d 14 00             	lea    edx,[eax+eax*1]
c0019318:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001931e:	83 e0 fd             	and    eax,0xfffffffd
c0019321:	09 d0                	or     eax,edx
c0019323:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019329:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019330:	83 c4 4c             	add    esp,0x4c
c0019333:	5b                   	pop    ebx
c0019334:	5e                   	pop    esi
c0019335:	5f                   	pop    edi
c0019336:	5d                   	pop    ebp
c0019337:	c3                   	ret    

c0019338 <CPU::setupSMEP()>:
c0019338:	0f 20 e0             	mov    eax,cr4
c001933b:	0d 00 00 10 00       	or     eax,0x100000
c0019340:	0f 22 e0             	mov    cr4,eax
c0019343:	c3                   	ret    

c0019344 <CPU::setupUMIP()>:
c0019344:	0f 20 e0             	mov    eax,cr4
c0019347:	80 cc 08             	or     ah,0x8
c001934a:	0f 22 e0             	mov    cr4,eax
c001934d:	c3                   	ret    

c001934e <CPU::setupTSC()>:
c001934e:	0f 20 e0             	mov    eax,cr4
c0019351:	83 c8 04             	or     eax,0x4
c0019354:	0f 22 e0             	mov    cr4,eax
c0019357:	c3                   	ret    

c0019358 <CPU::setupLargePages()>:
c0019358:	0f 20 e0             	mov    eax,cr4
c001935b:	83 c8 10             	or     eax,0x10
c001935e:	0f 22 e0             	mov    cr4,eax
c0019361:	c3                   	ret    

c0019362 <CPU::setupPAT()>:
c0019362:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0019367:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001936e:	74 2c                	je     c001939c <CPU::setupPAT()+0x3a>
c0019370:	53                   	push   ebx
c0019371:	83 ec 10             	sub    esp,0x10
c0019374:	68 77 02 00 00       	push   0x277
c0019379:	50                   	push   eax
c001937a:	e8 c1 57 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c001937f:	83 e2 f8             	and    edx,0xfffffff8
c0019382:	83 ca 01             	or     edx,0x1
c0019385:	52                   	push   edx
c0019386:	50                   	push   eax
c0019387:	68 77 02 00 00       	push   0x277
c001938c:	ff 35 28 d9 02 c0    	push   DWORD PTR ds:0xc002d928
c0019392:	e8 d5 57 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019397:	83 c4 28             	add    esp,0x28
c001939a:	5b                   	pop    ebx
c001939b:	c3                   	ret    
c001939c:	c3                   	ret    
c001939d:	90                   	nop

c001939e <CPU::setupMTRR()>:
c001939e:	c3                   	ret    
c001939f:	90                   	nop

c00193a0 <CPU::setupGlobalPages()>:
c00193a0:	0f 20 e0             	mov    eax,cr4
c00193a3:	0c 80                	or     al,0x80
c00193a5:	0f 22 e0             	mov    cr4,eax
c00193a8:	c3                   	ret    
c00193a9:	90                   	nop

c00193aa <CPU::allowUsermodeDataAccess()>:
c00193aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193ae:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193b5:	74 03                	je     c00193ba <CPU::allowUsermodeDataAccess()+0x10>
c00193b7:	0f 01 cb             	stac   
c00193ba:	c3                   	ret    
c00193bb:	90                   	nop

c00193bc <CPU::prohibitUsermodeDataAccess()>:
c00193bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193c0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193c7:	74 03                	je     c00193cc <CPU::prohibitUsermodeDataAccess()+0x10>
c00193c9:	0f 01 ca             	clac   
c00193cc:	c3                   	ret    
c00193cd:	90                   	nop

c00193ce <CPU::setupSMAP()>:
c00193ce:	0f 20 e0             	mov    eax,cr4
c00193d1:	0d 00 00 20 00       	or     eax,0x200000
c00193d6:	0f 22 e0             	mov    cr4,eax
c00193d9:	eb e1                	jmp    c00193bc <CPU::prohibitUsermodeDataAccess()>
c00193db:	90                   	nop

c00193dc <CPU::setupFeatures()>:
c00193dc:	83 ec 0c             	sub    esp,0xc
c00193df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00193e3:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00193ea:	74 07                	je     c00193f3 <CPU::setupFeatures()+0x17>
c00193ec:	52                   	push   edx
c00193ed:	e8 46 ff ff ff       	call   c0019338 <CPU::setupSMEP()>
c00193f2:	58                   	pop    eax
c00193f3:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00193fa:	74 07                	je     c0019403 <CPU::setupFeatures()+0x27>
c00193fc:	52                   	push   edx
c00193fd:	e8 cc ff ff ff       	call   c00193ce <CPU::setupSMAP()>
c0019402:	58                   	pop    eax
c0019403:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001940a:	74 07                	je     c0019413 <CPU::setupFeatures()+0x37>
c001940c:	52                   	push   edx
c001940d:	e8 32 ff ff ff       	call   c0019344 <CPU::setupUMIP()>
c0019412:	58                   	pop    eax
c0019413:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001941a:	74 07                	je     c0019423 <CPU::setupFeatures()+0x47>
c001941c:	52                   	push   edx
c001941d:	e8 2c ff ff ff       	call   c001934e <CPU::setupTSC()>
c0019422:	58                   	pop    eax
c0019423:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001942a:	74 07                	je     c0019433 <CPU::setupFeatures()+0x57>
c001942c:	52                   	push   edx
c001942d:	e8 26 ff ff ff       	call   c0019358 <CPU::setupLargePages()>
c0019432:	59                   	pop    ecx
c0019433:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001943a:	74 07                	je     c0019443 <CPU::setupFeatures()+0x67>
c001943c:	52                   	push   edx
c001943d:	e8 5e ff ff ff       	call   c00193a0 <CPU::setupGlobalPages()>
c0019442:	58                   	pop    eax
c0019443:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001944a:	74 0c                	je     c0019458 <CPU::setupFeatures()+0x7c>
c001944c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019450:	83 c4 0c             	add    esp,0xc
c0019453:	e9 0a ff ff ff       	jmp    c0019362 <CPU::setupPAT()>
c0019458:	83 c4 0c             	add    esp,0xc
c001945b:	c3                   	ret    

c001945c <CPU::open(int, int, void*)>:
c001945c:	57                   	push   edi
c001945d:	56                   	push   esi
c001945e:	53                   	push   ebx
c001945f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019463:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019467:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001946d:	83 ec 0c             	sub    esp,0xc
c0019470:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019476:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001947c:	50                   	push   eax
c001947d:	e8 ac 59 ff ff       	call   c000ee2e <GDT::setup()>
c0019482:	83 c4 0c             	add    esp,0xc
c0019485:	6a 00                	push   0x0
c0019487:	68 ef be ad de       	push   0xdeadbeef
c001948c:	57                   	push   edi
c001948d:	e8 ea 76 ff ff       	call   c0010b7c <TSS::setup(unsigned long, unsigned long)>
c0019492:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019495:	e8 c2 76 ff ff       	call   c0010b5c <TSS::flush()>
c001949a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00194a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00194a3:	e8 ea 5b ff ff       	call   c000f092 <IDT::setup()>
c00194a8:	b8 00 04 00 00       	mov    eax,0x400
c00194ad:	0f 23 f8             	mov    db7,eax
c00194b0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00194ba:	e8 b2 64 ff ff       	call   c000f971 <Phys::allocatePage()>
c00194bf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00194c5:	89 30                	mov    DWORD PTR [eax],esi
c00194c7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00194cd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00194d0:	58                   	pop    eax
c00194d1:	5a                   	pop    edx
c00194d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00194d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00194dc:	e8 ab 87 ff ff       	call   c0011c8c <VAS::setCPUSpecific(unsigned long)>
c00194e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00194e4:	e8 5d f4 ff ff       	call   c0018946 <CPU::detectFeatures()>
c00194e9:	e8 35 bc ff ff       	call   c0015123 <setupInterruptController()>
c00194ee:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00194f4:	a1 40 d9 02 c0       	mov    eax,ds:0xc002d940
c00194f9:	83 e0 10             	and    eax,0x10
c00194fc:	83 f8 01             	cmp    eax,0x1
c00194ff:	19 c0                	sbb    eax,eax
c0019501:	83 e0 46             	and    eax,0x46
c0019504:	83 c0 1e             	add    eax,0x1e
c0019507:	89 04 24             	mov    DWORD PTR [esp],eax
c001950a:	e8 02 d2 ff ff       	call   c0016711 <setupTimer(int)>
c001950f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019515:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019518:	e8 bf fe ff ff       	call   c00193dc <CPU::setupFeatures()>
c001951d:	83 c4 10             	add    esp,0x10
c0019520:	31 c0                	xor    eax,eax
c0019522:	5b                   	pop    ebx
c0019523:	5e                   	pop    esi
c0019524:	5f                   	pop    edi
c0019525:	c3                   	ret    

c0019526 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019526:	57                   	push   edi
c0019527:	56                   	push   esi
c0019528:	53                   	push   ebx
c0019529:	51                   	push   ecx
c001952a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001952e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019531:	0f 02 c0             	lar    eax,ax
c0019534:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019537:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001953b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001953e:	88 ca                	mov    dl,cl
c0019540:	c0 ea 06             	shr    dl,0x6
c0019543:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019547:	89 ca                	mov    edx,ecx
c0019549:	66 c1 ea 03          	shr    dx,0x3
c001954d:	83 e2 07             	and    edx,0x7
c0019550:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019555:	88 17                	mov    BYTE PTR [edi],dl
c0019557:	0f 84 a6 01 00 00    	je     c0019703 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001955d:	83 e1 07             	and    ecx,0x7
c0019560:	80 f9 04             	cmp    cl,0x4
c0019563:	0f 84 98 00 00 00    	je     c0019601 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019569:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001956e:	0f 95 c0             	setne  al
c0019571:	80 f9 05             	cmp    cl,0x5
c0019574:	0f 95 c2             	setne  dl
c0019577:	08 c2                	or     dl,al
c0019579:	74 79                	je     c00195f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001957b:	84 c9                	test   cl,cl
c001957d:	75 05                	jne    c0019584 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001957f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019582:	eb 3c                	jmp    c00195c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019584:	80 f9 01             	cmp    cl,0x1
c0019587:	75 05                	jne    c001958e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019589:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001958c:	eb 32                	jmp    c00195c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001958e:	80 f9 02             	cmp    cl,0x2
c0019591:	75 05                	jne    c0019598 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019593:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019596:	eb 28                	jmp    c00195c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019598:	31 c0                	xor    eax,eax
c001959a:	80 f9 03             	cmp    cl,0x3
c001959d:	75 05                	jne    c00195a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001959f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195a2:	eb 1c                	jmp    c00195c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195a4:	80 f9 05             	cmp    cl,0x5
c00195a7:	75 05                	jne    c00195ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00195a9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00195ac:	eb 12                	jmp    c00195c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195ae:	80 f9 06             	cmp    cl,0x6
c00195b1:	75 05                	jne    c00195b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00195b3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00195b6:	eb 08                	jmp    c00195c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195b8:	80 f9 07             	cmp    cl,0x7
c00195bb:	75 03                	jne    c00195c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195bd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00195c0:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00195c5:	75 10                	jne    c00195d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00195c7:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00195cb:	b9 03 00 00 00       	mov    ecx,0x3
c00195d0:	01 d0                	add    eax,edx
c00195d2:	e9 37 01 00 00       	jmp    c001970e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00195d7:	b9 02 00 00 00       	mov    ecx,0x2
c00195dc:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00195e1:	0f 85 27 01 00 00    	jne    c001970e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00195e7:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00195ea:	b9 06 00 00 00       	mov    ecx,0x6
c00195ef:	e9 1a 01 00 00       	jmp    c001970e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00195f4:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00195f7:	b9 06 00 00 00       	mov    ecx,0x6
c00195fc:	e9 0f 01 00 00       	jmp    c0019710 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019601:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019604:	88 ca                	mov    dl,cl
c0019606:	c0 ea 06             	shr    dl,0x6
c0019609:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001960d:	89 ca                	mov    edx,ecx
c001960f:	66 c1 ea 03          	shr    dx,0x3
c0019613:	83 e2 07             	and    edx,0x7
c0019616:	80 e1 07             	and    cl,0x7
c0019619:	75 05                	jne    c0019620 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001961b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001961e:	eb 4c                	jmp    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019620:	80 f9 01             	cmp    cl,0x1
c0019623:	75 05                	jne    c001962a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019625:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019628:	eb 42                	jmp    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001962a:	80 f9 02             	cmp    cl,0x2
c001962d:	75 05                	jne    c0019634 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001962f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019632:	eb 38                	jmp    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019634:	80 f9 03             	cmp    cl,0x3
c0019637:	75 05                	jne    c001963e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019639:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001963c:	eb 2e                	jmp    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001963e:	80 f9 04             	cmp    cl,0x4
c0019641:	75 12                	jne    c0019655 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019643:	f6 c4 60             	test   ah,0x60
c0019646:	75 08                	jne    c0019650 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019648:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001964b:	8d 78 14             	lea    edi,[eax+0x14]
c001964e:	eb 1c                	jmp    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019650:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019653:	eb 17                	jmp    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019655:	80 f9 05             	cmp    cl,0x5
c0019658:	75 05                	jne    c001965f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001965a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001965d:	eb 0d                	jmp    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001965f:	80 f9 06             	cmp    cl,0x6
c0019662:	75 05                	jne    c0019669 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019664:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019667:	eb 03                	jmp    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019669:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001966c:	84 d2                	test   dl,dl
c001966e:	75 05                	jne    c0019675 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019670:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019673:	eb 3c                	jmp    c00196b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019675:	80 fa 01             	cmp    dl,0x1
c0019678:	75 05                	jne    c001967f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001967a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001967d:	eb 32                	jmp    c00196b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001967f:	80 fa 02             	cmp    dl,0x2
c0019682:	75 05                	jne    c0019689 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019684:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019687:	eb 28                	jmp    c00196b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019689:	80 fa 03             	cmp    dl,0x3
c001968c:	75 05                	jne    c0019693 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001968e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019691:	eb 1e                	jmp    c00196b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019693:	31 c0                	xor    eax,eax
c0019695:	80 fa 04             	cmp    dl,0x4
c0019698:	74 17                	je     c00196b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001969a:	80 fa 05             	cmp    dl,0x5
c001969d:	75 05                	jne    c00196a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001969f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00196a2:	eb 0d                	jmp    c00196b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196a4:	80 fa 06             	cmp    dl,0x6
c00196a7:	75 05                	jne    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00196a9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00196ac:	eb 03                	jmp    c00196b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196ae:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00196b1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196b6:	0f 94 c2             	sete   dl
c00196b9:	80 f9 05             	cmp    cl,0x5
c00196bc:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00196c0:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00196c5:	d3 e0                	shl    eax,cl
c00196c7:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00196cb:	74 0a                	je     c00196d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00196cd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00196d0:	b9 07 00 00 00       	mov    ecx,0x7
c00196d5:	eb 37                	jmp    c001970e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00196d7:	01 f8                	add    eax,edi
c00196d9:	b9 03 00 00 00       	mov    ecx,0x3
c00196de:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196e3:	74 2b                	je     c0019710 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00196e5:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00196ea:	75 0d                	jne    c00196f9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00196ec:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00196f0:	01 c8                	add    eax,ecx
c00196f2:	b9 04 00 00 00       	mov    ecx,0x4
c00196f7:	eb 17                	jmp    c0019710 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00196f9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00196fc:	b9 07 00 00 00       	mov    ecx,0x7
c0019701:	eb 0d                	jmp    c0019710 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019703:	b9 02 00 00 00       	mov    ecx,0x2
c0019708:	b2 01                	mov    dl,0x1
c001970a:	31 c0                	xor    eax,eax
c001970c:	eb 02                	jmp    c0019710 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001970e:	31 d2                	xor    edx,edx
c0019710:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019714:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019716:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001971a:	88 11                	mov    BYTE PTR [ecx],dl
c001971c:	5a                   	pop    edx
c001971d:	5b                   	pop    ebx
c001971e:	5e                   	pop    esi
c001971f:	5f                   	pop    edi
c0019720:	c3                   	ret    

c0019721 <Krnl::smpEntry()>:
c0019721:	eb fe                	jmp    c0019721 <Krnl::smpEntry()>

c0019723 <Krnl::startCPU(int)>:
c0019723:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0019728:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001972f:	0f 84 36 01 00 00    	je     c001986b <Krnl::startCPU(int)+0x148>
c0019735:	53                   	push   ebx
c0019736:	83 ec 10             	sub    esp,0x10
c0019739:	fa                   	cli    
c001973a:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c0019740:	6a 1b                	push   0x1b
c0019742:	ff 35 28 d9 02 c0    	push   DWORD PTR ds:0xc002d928
c0019748:	e8 f3 53 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c001974d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019752:	89 c3                	mov    ebx,eax
c0019754:	58                   	pop    eax
c0019755:	5a                   	pop    edx
c0019756:	53                   	push   ebx
c0019757:	68 3c b5 02 c0       	push   0xc002b53c
c001975c:	e8 40 8f ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0019761:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001976b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001976f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019779:	c1 e0 18             	shl    eax,0x18
c001977c:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019782:	83 c4 10             	add    esp,0x10
c0019785:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001978b:	09 c2                	or     edx,eax
c001978d:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019793:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019799:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001979f:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00197a5:	80 cd c5             	or     ch,0xc5
c00197a8:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00197ae:	f3 90                	pause  
c00197b0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197b2:	0f ba e1 0c          	bt     ecx,0xc
c00197b6:	72 f6                	jb     c00197ae <Krnl::startCPU(int)+0x8b>
c00197b8:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00197be:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00197c4:	09 c1                	or     ecx,eax
c00197c6:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00197cc:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197d2:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00197d8:	80 cd 85             	or     ch,0x85
c00197db:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00197e1:	f3 90                	pause  
c00197e3:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197e5:	0f ba e1 0c          	bt     ecx,0xc
c00197e9:	72 f6                	jb     c00197e1 <Krnl::startCPU(int)+0xbe>
c00197eb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197f5:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00197fb:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019801:	09 c1                	or     ecx,eax
c0019803:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019809:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001980f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019815:	81 c9 02 06 00 00    	or     ecx,0x602
c001981b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019821:	f3 90                	pause  
c0019823:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019825:	0f ba e1 0c          	bt     ecx,0xc
c0019829:	72 f6                	jb     c0019821 <Krnl::startCPU(int)+0xfe>
c001982b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019835:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001983b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019841:	09 c8                	or     eax,ecx
c0019843:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019849:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001984f:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019854:	0d 02 06 00 00       	or     eax,0x602
c0019859:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001985f:	f3 90                	pause  
c0019861:	8b 02                	mov    eax,DWORD PTR [edx]
c0019863:	0f ba e0 0c          	bt     eax,0xc
c0019867:	72 f6                	jb     c001985f <Krnl::startCPU(int)+0x13c>
c0019869:	eb fe                	jmp    c0019869 <Krnl::startCPU(int)+0x146>
c001986b:	c3                   	ret    

c001986c <Krnl::startCPUs()>:
c001986c:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0019871:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019877:	88 c2                	mov    dl,al
c0019879:	83 e2 0a             	and    edx,0xa
c001987c:	80 fa 0a             	cmp    dl,0xa
c001987f:	75 09                	jne    c001988a <Krnl::startCPUs()+0x1e>
c0019881:	a8 01                	test   al,0x1
c0019883:	74 05                	je     c001988a <Krnl::startCPUs()+0x1e>
c0019885:	e9 11 69 fe ff       	jmp    c000019b <prepareTramp>
c001988a:	c3                   	ret    
c001988b:	90                   	nop

c001988c <EnvVarContainer::getEnv(char const*)>:
c001988c:	57                   	push   edi
c001988d:	56                   	push   esi
c001988e:	53                   	push   ebx
c001988f:	31 db                	xor    ebx,ebx
c0019891:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019895:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019897:	7e 2b                	jle    c00198c4 <EnvVarContainer::getEnv(char const*)+0x38>
c0019899:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00198a0:	50                   	push   eax
c00198a1:	50                   	push   eax
c00198a2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00198a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00198ac:	e8 e7 6f fe ff       	call   c0000898 <strcmp>
c00198b1:	83 c4 10             	add    esp,0x10
c00198b4:	85 c0                	test   eax,eax
c00198b6:	75 09                	jne    c00198c1 <EnvVarContainer::getEnv(char const*)+0x35>
c00198b8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198bb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00198bf:	eb 05                	jmp    c00198c6 <EnvVarContainer::getEnv(char const*)+0x3a>
c00198c1:	43                   	inc    ebx
c00198c2:	eb d1                	jmp    c0019895 <EnvVarContainer::getEnv(char const*)+0x9>
c00198c4:	31 c0                	xor    eax,eax
c00198c6:	5b                   	pop    ebx
c00198c7:	5e                   	pop    esi
c00198c8:	5f                   	pop    edi
c00198c9:	c3                   	ret    

c00198ca <EnvVarContainer::setEnv(char const*, char const*)>:
c00198ca:	55                   	push   ebp
c00198cb:	57                   	push   edi
c00198cc:	56                   	push   esi
c00198cd:	53                   	push   ebx
c00198ce:	83 ec 28             	sub    esp,0x28
c00198d1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00198d5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00198d9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00198dd:	56                   	push   esi
c00198de:	e8 89 6e fe ff       	call   c000076c <strlen>
c00198e3:	40                   	inc    eax
c00198e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00198e7:	e8 ad 5c ff ff       	call   c000f599 <malloc>
c00198ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00198f3:	e8 74 6e fe ff       	call   c000076c <strlen>
c00198f8:	40                   	inc    eax
c00198f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00198fc:	e8 98 5c ff ff       	call   c000f599 <malloc>
c0019901:	89 34 24             	mov    DWORD PTR [esp],esi
c0019904:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019908:	e8 5f 6e fe ff       	call   c000076c <strlen>
c001990d:	83 c4 0c             	add    esp,0xc
c0019910:	40                   	inc    eax
c0019911:	50                   	push   eax
c0019912:	6a 00                	push   0x0
c0019914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019918:	e8 33 6e fe ff       	call   c0000750 <memset>
c001991d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019920:	e8 47 6e fe ff       	call   c000076c <strlen>
c0019925:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019929:	8d 48 01             	lea    ecx,[eax+0x1]
c001992c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001992e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019931:	89 de                	mov    esi,ebx
c0019933:	e8 34 6e fe ff       	call   c000076c <strlen>
c0019938:	83 c4 0c             	add    esp,0xc
c001993b:	40                   	inc    eax
c001993c:	50                   	push   eax
c001993d:	6a 00                	push   0x0
c001993f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019943:	e8 08 6e fe ff       	call   c0000750 <memset>
c0019948:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001994b:	e8 1c 6e fe ff       	call   c000076c <strlen>
c0019950:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019954:	8d 48 01             	lea    ecx,[eax+0x1]
c0019957:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019959:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001995c:	40                   	inc    eax
c001995d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019960:	c1 e0 03             	shl    eax,0x3
c0019963:	5a                   	pop    edx
c0019964:	59                   	pop    ecx
c0019965:	50                   	push   eax
c0019966:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019969:	e8 17 5c ff ff       	call   c000f585 <realloc>
c001996e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019972:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019975:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019978:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001997c:	b9 08 00 00 00       	mov    ecx,0x8
c0019981:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019983:	83 c4 2c             	add    esp,0x2c
c0019986:	5b                   	pop    ebx
c0019987:	5e                   	pop    esi
c0019988:	5f                   	pop    edi
c0019989:	5d                   	pop    ebp
c001998a:	c3                   	ret    
c001998b:	90                   	nop

c001998c <EnvVarContainer::deleteEnv(char const*)>:
c001998c:	c3                   	ret    
c001998d:	90                   	nop

c001998e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001998e:	55                   	push   ebp
c001998f:	57                   	push   edi
c0019990:	56                   	push   esi
c0019991:	53                   	push   ebx
c0019992:	81 ec 38 01 00 00    	sub    esp,0x138
c0019998:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001999f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00199a6:	68 14 01 00 00       	push   0x114
c00199ab:	e8 e9 5b ff ff       	call   c000f599 <malloc>
c00199b0:	83 c4 0c             	add    esp,0xc
c00199b3:	89 c3                	mov    ebx,eax
c00199b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00199b8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00199bf:	50                   	push   eax
c00199c0:	e8 3b 92 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c00199c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199c8:	e8 05 95 ff ff       	call   c0012ed2 <File::exists()>
c00199cd:	83 c4 10             	add    esp,0x10
c00199d0:	84 c0                	test   al,al
c00199d2:	75 31                	jne    c0019a05 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00199d4:	50                   	push   eax
c00199d5:	50                   	push   eax
c00199d6:	6a 12                	push   0x12
c00199d8:	53                   	push   ebx
c00199d9:	e8 86 92 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c00199de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199e0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00199e3:	89 34 24             	mov    DWORD PTR [esp],esi
c00199e6:	e8 81 6d fe ff       	call   c000076c <strlen>
c00199eb:	5a                   	pop    edx
c00199ec:	31 d2                	xor    edx,edx
c00199ee:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00199f2:	51                   	push   ecx
c00199f3:	56                   	push   esi
c00199f4:	52                   	push   edx
c00199f5:	50                   	push   eax
c00199f6:	53                   	push   ebx
c00199f7:	ff d7                	call   edi
c00199f9:	83 c4 14             	add    esp,0x14
c00199fc:	53                   	push   ebx
c00199fd:	e8 c0 92 ff ff       	call   c0012cc2 <File::close()>
c0019a02:	83 c4 10             	add    esp,0x10
c0019a05:	56                   	push   esi
c0019a06:	31 f6                	xor    esi,esi
c0019a08:	68 00 01 00 00       	push   0x100
c0019a0d:	6a 00                	push   0x0
c0019a0f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a13:	50                   	push   eax
c0019a14:	e8 37 6d fe ff       	call   c0000750 <memset>
c0019a19:	5f                   	pop    edi
c0019a1a:	58                   	pop    eax
c0019a1b:	6a 01                	push   0x1
c0019a1d:	53                   	push   ebx
c0019a1e:	e8 41 92 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c0019a23:	83 c4 10             	add    esp,0x10
c0019a26:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a2e:	83 ec 0c             	sub    esp,0xc
c0019a31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a33:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a37:	51                   	push   ecx
c0019a38:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a3c:	52                   	push   edx
c0019a3d:	6a 00                	push   0x0
c0019a3f:	6a 01                	push   0x1
c0019a41:	53                   	push   ebx
c0019a42:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a45:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019a49:	83 c4 20             	add    esp,0x20
c0019a4c:	3c 0d                	cmp    al,0xd
c0019a4e:	0f 84 09 01 00 00    	je     c0019b5d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a54:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019a59:	0f 84 ef 00 00 00    	je     c0019b4e <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019a5f:	3c 0a                	cmp    al,0xa
c0019a61:	74 13                	je     c0019a76 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a63:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a68:	74 0c                	je     c0019a76 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a6a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019a70:	0f 8e d8 00 00 00    	jle    c0019b4e <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019a76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a7a:	83 ec 0c             	sub    esp,0xc
c0019a7d:	8d 78 01             	lea    edi,[eax+0x1]
c0019a80:	57                   	push   edi
c0019a81:	e8 13 5b ff ff       	call   c000f599 <malloc>
c0019a86:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019a8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019a8e:	8d 56 04             	lea    edx,[esi+0x4]
c0019a91:	89 14 24             	mov    DWORD PTR [esp],edx
c0019a94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019a98:	e8 fc 5a ff ff       	call   c000f599 <malloc>
c0019a9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019aa1:	83 c4 0c             	add    esp,0xc
c0019aa4:	57                   	push   edi
c0019aa5:	6a 00                	push   0x0
c0019aa7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019aab:	e8 a0 6c fe ff       	call   c0000750 <memset>
c0019ab0:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019ab4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019ab8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019abc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019abe:	83 c4 0c             	add    esp,0xc
c0019ac1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ac5:	52                   	push   edx
c0019ac6:	6a 00                	push   0x0
c0019ac8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019acc:	e8 7f 6c fe ff       	call   c0000750 <memset>
c0019ad1:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019ad5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019ad9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019adc:	e8 8b 6c fe ff       	call   c000076c <strlen>
c0019ae1:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019ae5:	89 c1                	mov    ecx,eax
c0019ae7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ae9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019aec:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019aef:	40                   	inc    eax
c0019af0:	83 c4 10             	add    esp,0x10
c0019af3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019af6:	85 d2                	test   edx,edx
c0019af8:	75 0c                	jne    c0019b06 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019afa:	83 ec 0c             	sub    esp,0xc
c0019afd:	6a 08                	push   0x8
c0019aff:	e8 95 5a ff ff       	call   c000f599 <malloc>
c0019b04:	eb 0c                	jmp    c0019b12 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019b06:	c1 e0 03             	shl    eax,0x3
c0019b09:	51                   	push   ecx
c0019b0a:	51                   	push   ecx
c0019b0b:	50                   	push   eax
c0019b0c:	52                   	push   edx
c0019b0d:	e8 73 5a ff ff       	call   c000f585 <realloc>
c0019b12:	83 c4 10             	add    esp,0x10
c0019b15:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019b18:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b1b:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019b1e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b22:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019b26:	b9 08 00 00 00       	mov    ecx,0x8
c0019b2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b2d:	31 f6                	xor    esi,esi
c0019b2f:	50                   	push   eax
c0019b30:	68 00 01 00 00       	push   0x100
c0019b35:	6a 00                	push   0x0
c0019b37:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b3b:	50                   	push   eax
c0019b3c:	e8 0f 6c fe ff       	call   c0000750 <memset>
c0019b41:	83 c4 10             	add    esp,0x10
c0019b44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b4c:	eb 0f                	jmp    c0019b5d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b4e:	3c 3d                	cmp    al,0x3d
c0019b50:	74 07                	je     c0019b59 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019b52:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019b56:	46                   	inc    esi
c0019b57:	eb 04                	jmp    c0019b5d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b59:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019b5d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b62:	0f 85 c6 fe ff ff    	jne    c0019a2e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019b68:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019b6e:	5b                   	pop    ebx
c0019b6f:	5e                   	pop    esi
c0019b70:	5f                   	pop    edi
c0019b71:	5d                   	pop    ebp
c0019b72:	c3                   	ret    
c0019b73:	90                   	nop

c0019b74 <EnvVarContainer::__loadSystem()>:
c0019b74:	83 ec 10             	sub    esp,0x10
c0019b77:	68 60 ce 02 c0       	push   0xc002ce60
c0019b7c:	68 4d b5 02 c0       	push   0xc002b54d
c0019b81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b85:	e8 04 fe ff ff       	call   c001998e <EnvVarContainer::loadFrom(char const*, char const*)>
c0019b8a:	83 c4 1c             	add    esp,0x1c
c0019b8d:	c3                   	ret    

c0019b8e <EnvVarContainer::__loadUser()>:
c0019b8e:	c3                   	ret    
c0019b8f:	90                   	nop

c0019b90 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019b9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ba2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ba9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019bb0:	90                   	nop
c0019bb1:	c3                   	ret    

c0019bb2 <EnvVarContainer::~EnvVarContainer()>:
c0019bb2:	83 ec 0c             	sub    esp,0xc
c0019bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bbc:	85 c0                	test   eax,eax
c0019bbe:	74 1d                	je     c0019bdd <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0019bc6:	85 c0                	test   eax,eax
c0019bc8:	74 13                	je     c0019bdd <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bd1:	83 ec 0c             	sub    esp,0xc
c0019bd4:	50                   	push   eax
c0019bd5:	e8 cf 59 ff ff       	call   c000f5a9 <free>
c0019bda:	83 c4 10             	add    esp,0x10
c0019bdd:	90                   	nop
c0019bde:	83 c4 0c             	add    esp,0xc
c0019be1:	c3                   	ret    

c0019be2 <Krnl::getEnv(Process*, char const*)>:
c0019be2:	53                   	push   ebx
c0019be3:	83 ec 08             	sub    esp,0x8
c0019be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019bee:	39 05 70 0e 03 c0    	cmp    DWORD PTR ds:0xc0030e70,eax
c0019bf4:	74 04                	je     c0019bfa <Krnl::getEnv(Process*, char const*)+0x18>
c0019bf6:	85 c0                	test   eax,eax
c0019bf8:	75 0b                	jne    c0019c05 <Krnl::getEnv(Process*, char const*)+0x23>
c0019bfa:	a1 54 04 03 c0       	mov    eax,ds:0xc0030454
c0019bff:	85 c0                	test   eax,eax
c0019c01:	75 19                	jne    c0019c1c <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c03:	eb 27                	jmp    c0019c2c <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c05:	52                   	push   edx
c0019c06:	52                   	push   edx
c0019c07:	53                   	push   ebx
c0019c08:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c0e:	e8 79 fc ff ff       	call   c001988c <EnvVarContainer::getEnv(char const*)>
c0019c13:	83 c4 10             	add    esp,0x10
c0019c16:	85 c0                	test   eax,eax
c0019c18:	75 28                	jne    c0019c42 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c1a:	eb de                	jmp    c0019bfa <Krnl::getEnv(Process*, char const*)+0x18>
c0019c1c:	52                   	push   edx
c0019c1d:	52                   	push   edx
c0019c1e:	53                   	push   ebx
c0019c1f:	50                   	push   eax
c0019c20:	e8 67 fc ff ff       	call   c001988c <EnvVarContainer::getEnv(char const*)>
c0019c25:	83 c4 10             	add    esp,0x10
c0019c28:	85 c0                	test   eax,eax
c0019c2a:	75 16                	jne    c0019c42 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c2c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019c30:	a1 58 04 03 c0       	mov    eax,ds:0xc0030458
c0019c35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c39:	83 c4 08             	add    esp,0x8
c0019c3c:	5b                   	pop    ebx
c0019c3d:	e9 4a fc ff ff       	jmp    c001988c <EnvVarContainer::getEnv(char const*)>
c0019c42:	83 c4 08             	add    esp,0x8
c0019c45:	5b                   	pop    ebx
c0019c46:	c3                   	ret    

c0019c47 <Krnl::setEnvSystem(char const*, char const*)>:
c0019c47:	83 ec 10             	sub    esp,0x10
c0019c4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c52:	ff 35 58 04 03 c0    	push   DWORD PTR ds:0xc0030458
c0019c58:	e8 6d fc ff ff       	call   c00198ca <EnvVarContainer::setEnv(char const*, char const*)>
c0019c5d:	83 c4 1c             	add    esp,0x1c
c0019c60:	c3                   	ret    

c0019c61 <Krnl::setEnvUser(char const*, char const*)>:
c0019c61:	a1 54 04 03 c0       	mov    eax,ds:0xc0030454
c0019c66:	85 c0                	test   eax,eax
c0019c68:	74 15                	je     c0019c7f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019c6a:	83 ec 10             	sub    esp,0x10
c0019c6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c75:	50                   	push   eax
c0019c76:	e8 4f fc ff ff       	call   c00198ca <EnvVarContainer::setEnv(char const*, char const*)>
c0019c7b:	83 c4 1c             	add    esp,0x1c
c0019c7e:	c3                   	ret    
c0019c7f:	c3                   	ret    

c0019c80 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c84:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019c8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c8e:	e9 37 fc ff ff       	jmp    c00198ca <EnvVarContainer::setEnv(char const*, char const*)>

c0019c93 <Krnl::deleteEnvSystem(char const*)>:
c0019c93:	c3                   	ret    

c0019c94 <Krnl::deleteEnvUser(char const*)>:
c0019c94:	c3                   	ret    

c0019c95 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019c95:	c3                   	ret    

c0019c96 <Krnl::newProcessEnv(Process*)>:
c0019c96:	83 ec 28             	sub    esp,0x28
c0019c99:	6a 0c                	push   0xc
c0019c9b:	e8 f9 58 ff ff       	call   c000f599 <malloc>
c0019ca0:	5a                   	pop    edx
c0019ca1:	59                   	pop    ecx
c0019ca2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ca6:	50                   	push   eax
c0019ca7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cab:	e8 e0 fe ff ff       	call   c0019b90 <EnvVarContainer::EnvVarContainer(Process*)>
c0019cb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cb4:	83 c4 2c             	add    esp,0x2c
c0019cb7:	c3                   	ret    

c0019cb8 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019cb8:	57                   	push   edi
c0019cb9:	56                   	push   esi
c0019cba:	53                   	push   ebx
c0019cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cbf:	83 ec 0c             	sub    esp,0xc
c0019cc2:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019cc8:	6a 0c                	push   0xc
c0019cca:	e8 ca 58 ff ff       	call   c000f599 <malloc>
c0019ccf:	89 c3                	mov    ebx,eax
c0019cd1:	58                   	pop    eax
c0019cd2:	5a                   	pop    edx
c0019cd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019cd7:	53                   	push   ebx
c0019cd8:	e8 b3 fe ff ff       	call   c0019b90 <EnvVarContainer::EnvVarContainer(Process*)>
c0019cdd:	8b 07                	mov    eax,DWORD PTR [edi]
c0019cdf:	89 03                	mov    DWORD PTR [ebx],eax
c0019ce1:	c1 e0 03             	shl    eax,0x3
c0019ce4:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ce7:	e8 ad 58 ff ff       	call   c000f599 <malloc>
c0019cec:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019cef:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019cf1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019cf4:	c1 e1 03             	shl    ecx,0x3
c0019cf7:	89 c7                	mov    edi,eax
c0019cf9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019cfb:	83 c4 10             	add    esp,0x10
c0019cfe:	89 d8                	mov    eax,ebx
c0019d00:	5b                   	pop    ebx
c0019d01:	5e                   	pop    esi
c0019d02:	5f                   	pop    edi
c0019d03:	c3                   	ret    

c0019d04 <Krnl::loadSystemEnv()>:
c0019d04:	53                   	push   ebx
c0019d05:	83 ec 14             	sub    esp,0x14
c0019d08:	6a 0c                	push   0xc
c0019d0a:	e8 8a 58 ff ff       	call   c000f599 <malloc>
c0019d0f:	89 c3                	mov    ebx,eax
c0019d11:	58                   	pop    eax
c0019d12:	5a                   	pop    edx
c0019d13:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c0019d19:	53                   	push   ebx
c0019d1a:	e8 71 fe ff ff       	call   c0019b90 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d22:	89 1d 58 04 03 c0    	mov    DWORD PTR ds:0xc0030458,ebx
c0019d28:	e8 47 fe ff ff       	call   c0019b74 <EnvVarContainer::__loadSystem()>
c0019d2d:	83 c4 18             	add    esp,0x18
c0019d30:	5b                   	pop    ebx
c0019d31:	c3                   	ret    

c0019d32 <Krnl::loadUserEnv()>:
c0019d32:	53                   	push   ebx
c0019d33:	83 ec 14             	sub    esp,0x14
c0019d36:	6a 0c                	push   0xc
c0019d38:	e8 5c 58 ff ff       	call   c000f599 <malloc>
c0019d3d:	89 c3                	mov    ebx,eax
c0019d3f:	58                   	pop    eax
c0019d40:	5a                   	pop    edx
c0019d41:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c0019d47:	53                   	push   ebx
c0019d48:	e8 43 fe ff ff       	call   c0019b90 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d4d:	89 1d 54 04 03 c0    	mov    DWORD PTR ds:0xc0030454,ebx
c0019d53:	83 c4 18             	add    esp,0x18
c0019d56:	5b                   	pop    ebx
c0019d57:	c3                   	ret    

c0019d58 <Krnl::flushEnv()>:
c0019d58:	c3                   	ret    

c0019d59 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019d59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d5d:	8b 15 54 04 03 c0    	mov    edx,DWORD PTR ds:0xc0030454
c0019d63:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019d69:	a1 58 04 03 c0       	mov    eax,ds:0xc0030458
c0019d6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d70:	03 01                	add    eax,DWORD PTR [ecx]
c0019d72:	85 d2                	test   edx,edx
c0019d74:	74 02                	je     c0019d78 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019d76:	03 02                	add    eax,DWORD PTR [edx]
c0019d78:	c3                   	ret    

c0019d79 <Krnl::getProcessEnvPair(Process*, int)>:
c0019d79:	57                   	push   edi
c0019d7a:	56                   	push   esi
c0019d7b:	8b 35 54 04 03 c0    	mov    esi,DWORD PTR ds:0xc0030454
c0019d81:	53                   	push   ebx
c0019d82:	85 f6                	test   esi,esi
c0019d84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019d8c:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019d92:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019d96:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019d98:	75 16                	jne    c0019db0 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019d9a:	39 c2                	cmp    edx,eax
c0019d9c:	7c 16                	jl     c0019db4 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019d9e:	8b 0d 58 04 03 c0    	mov    ecx,DWORD PTR ds:0xc0030458
c0019da4:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019da6:	01 c6                	add    esi,eax
c0019da8:	39 d6                	cmp    esi,edx
c0019daa:	7e 3c                	jle    c0019de8 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019dac:	29 c2                	sub    edx,eax
c0019dae:	eb 04                	jmp    c0019db4 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019db0:	39 c2                	cmp    edx,eax
c0019db2:	7d 05                	jge    c0019db9 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019db4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019db7:	eb 20                	jmp    c0019dd9 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019db9:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019dbb:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019dbe:	39 d1                	cmp    ecx,edx
c0019dc0:	7e 04                	jle    c0019dc6 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019dc2:	29 c2                	sub    edx,eax
c0019dc4:	eb 10                	jmp    c0019dd6 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019dc6:	8b 35 58 04 03 c0    	mov    esi,DWORD PTR ds:0xc0030458
c0019dcc:	03 0e                	add    ecx,DWORD PTR [esi]
c0019dce:	39 d1                	cmp    ecx,edx
c0019dd0:	7e 16                	jle    c0019de8 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019dd2:	29 c2                	sub    edx,eax
c0019dd4:	29 fa                	sub    edx,edi
c0019dd6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019dd9:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019ddc:	8b 02                	mov    eax,DWORD PTR [edx]
c0019dde:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019de1:	89 03                	mov    DWORD PTR [ebx],eax
c0019de3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019de6:	eb 1d                	jmp    c0019e05 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019de8:	83 ec 0c             	sub    esp,0xc
c0019deb:	68 6f b5 02 c0       	push   0xc002b56f
c0019df0:	e8 18 00 00 00       	call   c0019e0d <Krnl::panic(char const*)>
c0019df5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019dfb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019e02:	83 c4 10             	add    esp,0x10
c0019e05:	89 d8                	mov    eax,ebx
c0019e07:	5b                   	pop    ebx
c0019e08:	5e                   	pop    esi
c0019e09:	5f                   	pop    edi
c0019e0a:	c2 04 00             	ret    0x4

c0019e0d <Krnl::panic(char const*)>:
c0019e0d:	55                   	push   ebp
c0019e0e:	89 e5                	mov    ebp,esp
c0019e10:	53                   	push   ebx
c0019e11:	83 ec 10             	sub    esp,0x10
c0019e14:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019e17:	fa                   	cli    
c0019e18:	c6 05 64 04 03 c0 01 	mov    BYTE PTR ds:0xc0030464,0x1
c0019e1f:	53                   	push   ebx
c0019e20:	e8 ce 57 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019e25:	58                   	pop    eax
c0019e26:	c6 05 60 c8 02 c0 00 	mov    BYTE PTR ds:0xc002c860,0x0
c0019e2d:	5a                   	pop    edx
c0019e2e:	53                   	push   ebx
c0019e2f:	68 89 b5 02 c0       	push   0xc002b589
c0019e34:	e8 68 88 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0019e39:	59                   	pop    ecx
c0019e3a:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019e3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e45:	e8 e1 64 ff ff       	call   c001032b <setActiveTerminal(VgaText*)>
c0019e4a:	83 c4 0c             	add    esp,0xc
c0019e4d:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019e52:	6a 01                	push   0x1
c0019e54:	6a 0f                	push   0xf
c0019e56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e5c:	e8 29 63 ff ff       	call   c001018a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019e61:	58                   	pop    eax
c0019e62:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019e67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e6d:	e8 3a 68 ff ff       	call   c00106ac <VgaText::clearScreen()>
c0019e72:	58                   	pop    eax
c0019e73:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019e78:	5a                   	pop    edx
c0019e79:	68 a2 b5 02 c0       	push   0xc002b5a2
c0019e7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e84:	e8 af 69 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0019e89:	59                   	pop    ecx
c0019e8a:	58                   	pop    eax
c0019e8b:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019e90:	68 48 b6 02 c0       	push   0xc002b648
c0019e95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e9b:	e8 98 69 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0019ea0:	58                   	pop    eax
c0019ea1:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019ea6:	5a                   	pop    edx
c0019ea7:	68 be b5 02 c0       	push   0xc002b5be
c0019eac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eb2:	e8 81 69 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0019eb7:	59                   	pop    ecx
c0019eb8:	58                   	pop    eax
c0019eb9:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019ebe:	53                   	push   ebx
c0019ebf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec5:	e8 6e 69 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0019eca:	58                   	pop    eax
c0019ecb:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019ed0:	5a                   	pop    edx
c0019ed1:	68 de b5 02 c0       	push   0xc002b5de
c0019ed6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019edc:	e8 57 69 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0019ee1:	a1 60 04 03 c0       	mov    eax,ds:0xc0030460
c0019ee6:	83 c4 10             	add    esp,0x10
c0019ee9:	85 c0                	test   eax,eax
c0019eeb:	74 02                	je     c0019eef <Krnl::panic(char const*)+0xe2>
c0019eed:	ff d0                	call   eax
c0019eef:	83 ec 0c             	sub    esp,0xc
c0019ef2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ef5:	e8 8c 30 00 00       	call   c001cf86 <Thr::getDriverNameFromAddress(unsigned long)>
c0019efa:	83 c4 10             	add    esp,0x10
c0019efd:	89 c3                	mov    ebx,eax
c0019eff:	85 c0                	test   eax,eax
c0019f01:	0f 84 4e 02 00 00    	je     c001a155 <Krnl::panic(char const*)+0x348>
c0019f07:	83 ec 08             	sub    esp,0x8
c0019f0a:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019f0f:	68 84 b6 02 c0       	push   0xc002b684
c0019f14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f1a:	e8 19 69 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0019f1f:	58                   	pop    eax
c0019f20:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019f25:	5a                   	pop    edx
c0019f26:	68 be b5 02 c0       	push   0xc002b5be
c0019f2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f31:	e8 02 69 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0019f36:	59                   	pop    ecx
c0019f37:	58                   	pop    eax
c0019f38:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019f3d:	53                   	push   ebx
c0019f3e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f44:	e8 ef 68 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0019f49:	83 c4 10             	add    esp,0x10
c0019f4c:	83 ec 08             	sub    esp,0x8
c0019f4f:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019f54:	68 dd b5 02 c0       	push   0xc002b5dd
c0019f59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f5f:	e8 d4 68 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0019f64:	58                   	pop    eax
c0019f65:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019f6a:	5a                   	pop    edx
c0019f6b:	68 dc b6 02 c0       	push   0xc002b6dc
c0019f70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f76:	e8 bd 68 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0019f7b:	59                   	pop    ecx
c0019f7c:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019f81:	5b                   	pop    ebx
c0019f82:	68 1c b7 02 c0       	push   0xc002b71c
c0019f87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f8d:	e8 a6 68 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0019f92:	58                   	pop    eax
c0019f93:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019f98:	5a                   	pop    edx
c0019f99:	68 c9 b5 02 c0       	push   0xc002b5c9
c0019f9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fa4:	e8 8f 68 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0019fa9:	59                   	pop    ecx
c0019faa:	5b                   	pop    ebx
c0019fab:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019fae:	68 e1 b5 02 c0       	push   0xc002b5e1
c0019fb3:	e8 e9 86 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0019fb8:	58                   	pop    eax
c0019fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019fbc:	5a                   	pop    edx
c0019fbd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019fc0:	68 ea b5 02 c0       	push   0xc002b5ea
c0019fc5:	e8 d7 86 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0019fca:	59                   	pop    ecx
c0019fcb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019fce:	5b                   	pop    ebx
c0019fcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fd1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019fd4:	68 f3 b5 02 c0       	push   0xc002b5f3
c0019fd9:	e8 c3 86 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0019fde:	58                   	pop    eax
c0019fdf:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019fe4:	5a                   	pop    edx
c0019fe5:	68 60 b7 02 c0       	push   0xc002b760
c0019fea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ff0:	e8 43 68 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c0019ff5:	59                   	pop    ecx
c0019ff6:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c0019ffb:	5b                   	pop    ebx
c0019ffc:	68 fc b5 02 c0       	push   0xc002b5fc
c001a001:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a007:	e8 2c 68 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001a00c:	0f 20 c0             	mov    eax,cr0
c001a00f:	5a                   	pop    edx
c001a010:	59                   	pop    ecx
c001a011:	50                   	push   eax
c001a012:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a017:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a01d:	e8 d0 67 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c001a022:	5b                   	pop    ebx
c001a023:	58                   	pop    eax
c001a024:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a029:	68 06 b6 02 c0       	push   0xc002b606
c001a02e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a034:	e8 ff 67 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001a039:	0f 20 d0             	mov    eax,cr2
c001a03c:	5a                   	pop    edx
c001a03d:	59                   	pop    ecx
c001a03e:	50                   	push   eax
c001a03f:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a044:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a04a:	e8 a3 67 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c001a04f:	5b                   	pop    ebx
c001a050:	58                   	pop    eax
c001a051:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a056:	68 10 b6 02 c0       	push   0xc002b610
c001a05b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a061:	e8 d2 67 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001a066:	0f 20 d8             	mov    eax,cr3
c001a069:	5a                   	pop    edx
c001a06a:	59                   	pop    ecx
c001a06b:	50                   	push   eax
c001a06c:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a071:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a077:	e8 76 67 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c001a07c:	5b                   	pop    ebx
c001a07d:	58                   	pop    eax
c001a07e:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a083:	68 23 b6 02 c0       	push   0xc002b623
c001a088:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a08e:	e8 a5 67 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001a093:	0f 20 e0             	mov    eax,cr4
c001a096:	5a                   	pop    edx
c001a097:	59                   	pop    ecx
c001a098:	50                   	push   eax
c001a099:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a09e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0a4:	e8 49 67 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c001a0a9:	5b                   	pop    ebx
c001a0aa:	58                   	pop    eax
c001a0ab:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a0b0:	68 2d b6 02 c0       	push   0xc002b62d
c001a0b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0bb:	e8 78 67 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001a0c0:	5a                   	pop    edx
c001a0c1:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a0c6:	59                   	pop    ecx
c001a0c7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a0cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a0d0:	50                   	push   eax
c001a0d1:	e8 1c 67 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c001a0d6:	5b                   	pop    ebx
c001a0d7:	58                   	pop    eax
c001a0d8:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a0dd:	68 44 b6 02 c0       	push   0xc002b644
c001a0e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0e8:	e8 4b 67 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001a0ed:	5a                   	pop    edx
c001a0ee:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a0f3:	59                   	pop    ecx
c001a0f4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a0fa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a0fd:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a100:	50                   	push   eax
c001a101:	e8 ec 66 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c001a106:	5b                   	pop    ebx
c001a107:	58                   	pop    eax
c001a108:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a10d:	68 44 b6 02 c0       	push   0xc002b644
c001a112:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a118:	e8 1b 67 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001a11d:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a122:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a125:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a12b:	8b 12                	mov    edx,DWORD PTR [edx]
c001a12d:	59                   	pop    ecx
c001a12e:	5b                   	pop    ebx
c001a12f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a132:	50                   	push   eax
c001a133:	e8 ba 66 ff ff       	call   c00107f2 <VgaText::putx(unsigned int)>
c001a138:	83 c4 10             	add    esp,0x10
c001a13b:	b2 fe                	mov    dl,0xfe
c001a13d:	e4 60                	in     al,0x60
c001a13f:	3c 1c                	cmp    al,0x1c
c001a141:	74 04                	je     c001a147 <Krnl::panic(char const*)+0x33a>
c001a143:	3c 5a                	cmp    al,0x5a
c001a145:	75 f6                	jne    c001a13d <Krnl::panic(char const*)+0x330>
c001a147:	e4 64                	in     al,0x64
c001a149:	a8 02                	test   al,0x2
c001a14b:	75 fa                	jne    c001a147 <Krnl::panic(char const*)+0x33a>
c001a14d:	88 d0                	mov    al,dl
c001a14f:	e6 64                	out    0x64,al
c001a151:	fa                   	cli    
c001a152:	f4                   	hlt    
c001a153:	eb e8                	jmp    c001a13d <Krnl::panic(char const*)+0x330>
c001a155:	50                   	push   eax
c001a156:	50                   	push   eax
c001a157:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a15c:	68 b0 b6 02 c0       	push   0xc002b6b0
c001a161:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a167:	e8 cc 66 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001a16c:	58                   	pop    eax
c001a16d:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a172:	5a                   	pop    edx
c001a173:	68 be b5 02 c0       	push   0xc002b5be
c001a178:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a17e:	e8 b5 66 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001a183:	59                   	pop    ecx
c001a184:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a189:	5b                   	pop    ebx
c001a18a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a18d:	83 c0 0c             	add    eax,0xc
c001a190:	50                   	push   eax
c001a191:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001a196:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a19c:	e8 97 66 ff ff       	call   c0010838 <VgaText::puts(char const*)>
c001a1a1:	83 c4 10             	add    esp,0x10
c001a1a4:	e9 a3 fd ff ff       	jmp    c0019f4c <Krnl::panic(char const*)+0x13f>

c001a1a9 <Net::switchEndian16(unsigned short)>:
c001a1a9:	83 ec 04             	sub    esp,0x4
c001a1ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1b0:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a1b4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1b8:	c1 f8 08             	sar    eax,0x8
c001a1bb:	89 c2                	mov    edx,eax
c001a1bd:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1c1:	c1 e0 08             	shl    eax,0x8
c001a1c4:	09 d0                	or     eax,edx
c001a1c6:	83 c4 04             	add    esp,0x4
c001a1c9:	c3                   	ret    

c001a1ca <Net::switchEndian32(unsigned int)>:
c001a1ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1ce:	c1 e8 18             	shr    eax,0x18
c001a1d1:	89 c2                	mov    edx,eax
c001a1d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1d7:	c1 e0 08             	shl    eax,0x8
c001a1da:	25 00 00 ff 00       	and    eax,0xff0000
c001a1df:	09 c2                	or     edx,eax
c001a1e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1e5:	c1 e8 08             	shr    eax,0x8
c001a1e8:	25 00 ff 00 00       	and    eax,0xff00
c001a1ed:	09 c2                	or     edx,eax
c001a1ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1f3:	c1 e0 18             	shl    eax,0x18
c001a1f6:	09 d0                	or     eax,edx
c001a1f8:	c3                   	ret    

c001a1f9 <Net::crc32Calc(unsigned char*, int)>:
c001a1f9:	83 ec 10             	sub    esp,0x10
c001a1fc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a201:	75 07                	jne    c001a20a <Net::crc32Calc(unsigned char*, int)+0x11>
c001a203:	b8 00 00 00 00       	mov    eax,0x0
c001a208:	eb 7c                	jmp    c001a286 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a20a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a20f:	7f 07                	jg     c001a218 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a211:	b8 00 00 00 00       	mov    eax,0x0
c001a216:	eb 6e                	jmp    c001a286 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a218:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a220:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a228:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a22c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a230:	7d 4e                	jge    c001a280 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a232:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a236:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a23a:	01 d0                	add    eax,edx
c001a23c:	8a 00                	mov    al,BYTE PTR [eax]
c001a23e:	0f b6 c0             	movzx  eax,al
c001a241:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a245:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a24d:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a252:	7f 26                	jg     c001a27a <Net::crc32Calc(unsigned char*, int)+0x81>
c001a254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a258:	83 e0 01             	and    eax,0x1
c001a25b:	74 0d                	je     c001a26a <Net::crc32Calc(unsigned char*, int)+0x71>
c001a25d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a261:	d1 e8                	shr    eax,1
c001a263:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a268:	eb 06                	jmp    c001a270 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a26a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a26e:	d1 e8                	shr    eax,1
c001a270:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a274:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a278:	eb d3                	jmp    c001a24d <Net::crc32Calc(unsigned char*, int)+0x54>
c001a27a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a27e:	eb a8                	jmp    c001a228 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a284:	f7 d0                	not    eax
c001a286:	83 c4 10             	add    esp,0x10
c001a289:	c3                   	ret    

c001a28a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a28a:	57                   	push   edi
c001a28b:	56                   	push   esi
c001a28c:	53                   	push   ebx
c001a28d:	83 ec 60             	sub    esp,0x60
c001a290:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a297:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a29b:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a2a3:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a2a8:	7f 1a                	jg     c001a2c4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a2aa:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2b1:	8d 50 01             	lea    edx,[eax+0x1]
c001a2b4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2bb:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a2be:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a2c2:	eb df                	jmp    c001a2a3 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a2c4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2cb:	8d 50 01             	lea    edx,[eax+0x1]
c001a2ce:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2d5:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a2d8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2e3:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a2e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2eb:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a2f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a2f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a2fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a303:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a307:	89 c6                	mov    esi,eax
c001a309:	89 d7                	mov    edi,edx
c001a30b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a30d:	89 c8                	mov    eax,ecx
c001a30f:	89 fa                	mov    edx,edi
c001a311:	89 f3                	mov    ebx,esi
c001a313:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a317:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a31b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a31e:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a326:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a32d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a331:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a335:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a339:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a341:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a345:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a349:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a34d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a351:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a355:	89 c6                	mov    esi,eax
c001a357:	89 d7                	mov    edi,edx
c001a359:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a35b:	89 c8                	mov    eax,ecx
c001a35d:	89 fa                	mov    edx,edi
c001a35f:	89 f3                	mov    ebx,esi
c001a361:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a365:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a369:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a36d:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a375:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a37c:	0f b7 c0             	movzx  eax,ax
c001a37f:	c1 f8 08             	sar    eax,0x8
c001a382:	89 c1                	mov    ecx,eax
c001a384:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a38b:	8d 50 01             	lea    edx,[eax+0x1]
c001a38e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a395:	88 ca                	mov    dl,cl
c001a397:	88 10                	mov    BYTE PTR [eax],dl
c001a399:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a3a0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3a7:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3aa:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a3b1:	88 10                	mov    BYTE PTR [eax],dl
c001a3b3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a3b7:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a3bb:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a3c2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a3c6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a3ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a3ce:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a3d2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a3d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a3da:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a3de:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a3e2:	89 c6                	mov    esi,eax
c001a3e4:	89 d7                	mov    edi,edx
c001a3e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3e8:	89 c8                	mov    eax,ecx
c001a3ea:	89 fa                	mov    edx,edi
c001a3ec:	89 f3                	mov    ebx,esi
c001a3ee:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a3f2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a3f6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a3fa:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a3fe:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a405:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a40c:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a410:	50                   	push   eax
c001a411:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a415:	e8 df fd ff ff       	call   c001a1f9 <Net::crc32Calc(unsigned char*, int)>
c001a41a:	83 c4 08             	add    esp,0x8
c001a41d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a421:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a425:	c1 e8 18             	shr    eax,0x18
c001a428:	89 c1                	mov    ecx,eax
c001a42a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a431:	8d 50 01             	lea    edx,[eax+0x1]
c001a434:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a43b:	88 ca                	mov    dl,cl
c001a43d:	88 10                	mov    BYTE PTR [eax],dl
c001a43f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a443:	c1 e8 10             	shr    eax,0x10
c001a446:	89 c1                	mov    ecx,eax
c001a448:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a44f:	8d 50 01             	lea    edx,[eax+0x1]
c001a452:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a459:	88 ca                	mov    dl,cl
c001a45b:	88 10                	mov    BYTE PTR [eax],dl
c001a45d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a461:	c1 e8 08             	shr    eax,0x8
c001a464:	89 c1                	mov    ecx,eax
c001a466:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a46d:	8d 50 01             	lea    edx,[eax+0x1]
c001a470:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a477:	88 ca                	mov    dl,cl
c001a479:	88 10                	mov    BYTE PTR [eax],dl
c001a47b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a482:	8d 50 01             	lea    edx,[eax+0x1]
c001a485:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a48c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a490:	88 10                	mov    BYTE PTR [eax],dl
c001a492:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a496:	83 c4 60             	add    esp,0x60
c001a499:	5b                   	pop    ebx
c001a49a:	5e                   	pop    esi
c001a49b:	5f                   	pop    edi
c001a49c:	c3                   	ret    

c001a49d <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a49d:	57                   	push   edi
c001a49e:	56                   	push   esi
c001a49f:	53                   	push   ebx
c001a4a0:	83 ec 70             	sub    esp,0x70
c001a4a3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4aa:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a4ae:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a4b6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4bd:	83 c0 0e             	add    eax,0xe
c001a4c0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a4c4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a4cf:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a4d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a4db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a4df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a4e7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a4eb:	89 c6                	mov    esi,eax
c001a4ed:	89 d7                	mov    edi,edx
c001a4ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4f1:	89 c8                	mov    eax,ecx
c001a4f3:	89 fa                	mov    edx,edi
c001a4f5:	89 f3                	mov    ebx,esi
c001a4f7:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a4fb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a4ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a503:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a50b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a512:	83 c0 08             	add    eax,0x8
c001a515:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a519:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a520:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a524:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a52c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a530:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a534:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a538:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a53c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a540:	89 c6                	mov    esi,eax
c001a542:	89 d7                	mov    edi,edx
c001a544:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a546:	89 c8                	mov    eax,ecx
c001a548:	89 fa                	mov    edx,edi
c001a54a:	89 f3                	mov    ebx,esi
c001a54c:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a550:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a554:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a558:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a560:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a567:	8d 50 01             	lea    edx,[eax+0x1]
c001a56a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a571:	8a 00                	mov    al,BYTE PTR [eax]
c001a573:	0f b6 c0             	movzx  eax,al
c001a576:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a57b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a582:	8d 50 01             	lea    edx,[eax+0x1]
c001a585:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a58c:	8a 00                	mov    al,BYTE PTR [eax]
c001a58e:	0f b6 c0             	movzx  eax,al
c001a591:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a596:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a59b:	c1 e0 08             	shl    eax,0x8
c001a59e:	89 c2                	mov    edx,eax
c001a5a0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a5a4:	09 d0                	or     eax,edx
c001a5a6:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a5ad:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a5b1:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a5b9:	75 46                	jne    c001a601 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a5bb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5c2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a5c5:	66 3d dc 05          	cmp    ax,0x5dc
c001a5c9:	77 16                	ja     c001a5e1 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a5cb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5d2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a5d5:	0f b7 c0             	movzx  eax,ax
c001a5d8:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a5df:	eb 20                	jmp    c001a601 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a5e1:	83 ec 0c             	sub    esp,0xc
c001a5e4:	68 88 b7 02 c0       	push   0xc002b788
c001a5e9:	e8 b3 80 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001a5ee:	83 c4 10             	add    esp,0x10
c001a5f1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5f8:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a5fc:	e9 17 01 00 00       	jmp    c001a718 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a601:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a608:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a60f:	8b 12                	mov    edx,DWORD PTR [edx]
c001a611:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a615:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a61c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a620:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a624:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a628:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a62c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a630:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a634:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a638:	89 c6                	mov    esi,eax
c001a63a:	89 d7                	mov    edi,edx
c001a63c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a63e:	89 c8                	mov    eax,ecx
c001a640:	89 fa                	mov    edx,edi
c001a642:	89 f3                	mov    ebx,esi
c001a644:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a648:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a64c:	89 04 24             	mov    DWORD PTR [esp],eax
c001a64f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a656:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a65d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a664:	8d 50 01             	lea    edx,[eax+0x1]
c001a667:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a66e:	8a 00                	mov    al,BYTE PTR [eax]
c001a670:	0f b6 c0             	movzx  eax,al
c001a673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a677:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a67e:	8d 50 01             	lea    edx,[eax+0x1]
c001a681:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a688:	8a 00                	mov    al,BYTE PTR [eax]
c001a68a:	0f b6 c0             	movzx  eax,al
c001a68d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a691:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a698:	8d 50 01             	lea    edx,[eax+0x1]
c001a69b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6a2:	8a 00                	mov    al,BYTE PTR [eax]
c001a6a4:	0f b6 c0             	movzx  eax,al
c001a6a7:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a6ab:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6b2:	8d 50 01             	lea    edx,[eax+0x1]
c001a6b5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6bc:	8a 00                	mov    al,BYTE PTR [eax]
c001a6be:	0f b6 c0             	movzx  eax,al
c001a6c1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a6c5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a6c9:	c1 e0 18             	shl    eax,0x18
c001a6cc:	89 c2                	mov    edx,eax
c001a6ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a6d2:	c1 e0 10             	shl    eax,0x10
c001a6d5:	09 c2                	or     edx,eax
c001a6d7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a6db:	c1 e0 08             	shl    eax,0x8
c001a6de:	09 d0                	or     eax,edx
c001a6e0:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a6e4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a6e8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6ef:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a6f3:	83 e8 04             	sub    eax,0x4
c001a6f6:	83 ec 08             	sub    esp,0x8
c001a6f9:	50                   	push   eax
c001a6fa:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a6fe:	e8 f6 fa ff ff       	call   c001a1f9 <Net::crc32Calc(unsigned char*, int)>
c001a703:	83 c4 10             	add    esp,0x10
c001a706:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a70a:	0f 94 c2             	sete   dl
c001a70d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a714:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a717:	90                   	nop
c001a718:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a71f:	83 c4 70             	add    esp,0x70
c001a722:	5b                   	pop    ebx
c001a723:	5e                   	pop    esi
c001a724:	5f                   	pop    edi
c001a725:	c2 04 00             	ret    0x4

c001a728 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a728:	55                   	push   ebp
c001a729:	57                   	push   edi
c001a72a:	56                   	push   esi
c001a72b:	53                   	push   ebx
c001a72c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a732:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a739:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a73b:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a73e:	80 fb 40             	cmp    bl,0x40
c001a741:	75 1b                	jne    c001a75e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a743:	8a 16                	mov    dl,BYTE PTR [esi]
c001a745:	84 d2                	test   dl,dl
c001a747:	0f 84 f1 00 00 00    	je     c001a83e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a74d:	8d 46 01             	lea    eax,[esi+0x1]
c001a750:	80 fa 3a             	cmp    dl,0x3a
c001a753:	74 04                	je     c001a759 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a755:	89 c6                	mov    esi,eax
c001a757:	eb ea                	jmp    c001a743 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a759:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a75c:	89 c6                	mov    esi,eax
c001a75e:	50                   	push   eax
c001a75f:	6a 40                	push   0x40
c001a761:	6a 00                	push   0x0
c001a763:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a767:	50                   	push   eax
c001a768:	e8 e3 5f fe ff       	call   c0000750 <memset>
c001a76d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a774:	31 c0                	xor    eax,eax
c001a776:	83 c4 10             	add    esp,0x10
c001a779:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a77b:	84 c9                	test   cl,cl
c001a77d:	0f 84 bb 00 00 00    	je     c001a83e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a783:	3d c7 00 00 00       	cmp    eax,0xc7
c001a788:	0f 8f b0 00 00 00    	jg     c001a83e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a78e:	80 f9 0a             	cmp    cl,0xa
c001a791:	0f 85 98 00 00 00    	jne    c001a82f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a797:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a79c:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a7a0:	a8 df                	test   al,0xdf
c001a7a2:	0f 94 c1             	sete   cl
c001a7a5:	3c 23                	cmp    al,0x23
c001a7a7:	0f 94 c2             	sete   dl
c001a7aa:	08 d1                	or     cl,dl
c001a7ac:	75 4a                	jne    c001a7f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7ae:	8d 50 f7             	lea    edx,[eax-0x9]
c001a7b1:	80 fa 01             	cmp    dl,0x1
c001a7b4:	76 42                	jbe    c001a7f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7b6:	3c 5b                	cmp    al,0x5b
c001a7b8:	75 42                	jne    c001a7fc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a7ba:	80 fb 40             	cmp    bl,0x40
c001a7bd:	75 39                	jne    c001a7f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7bf:	83 ec 0c             	sub    esp,0xc
c001a7c2:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a7c6:	52                   	push   edx
c001a7c7:	e8 a0 5f fe ff       	call   c000076c <strlen>
c001a7cc:	83 c4 10             	add    esp,0x10
c001a7cf:	83 f8 3f             	cmp    eax,0x3f
c001a7d2:	77 6a                	ja     c001a83e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7d4:	50                   	push   eax
c001a7d5:	50                   	push   eax
c001a7d6:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a7da:	52                   	push   edx
c001a7db:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a7df:	52                   	push   edx
c001a7e0:	e8 27 60 fe ff       	call   c000080c <strcpy>
c001a7e5:	58                   	pop    eax
c001a7e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a7ea:	52                   	push   edx
c001a7eb:	e8 7c 5f fe ff       	call   c000076c <strlen>
c001a7f0:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a7f5:	83 c4 10             	add    esp,0x10
c001a7f8:	31 d2                	xor    edx,edx
c001a7fa:	eb 3a                	jmp    c001a836 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a7fc:	80 fb 40             	cmp    bl,0x40
c001a7ff:	74 06                	je     c001a807 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a801:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a805:	eb 20                	jmp    c001a827 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a807:	50                   	push   eax
c001a808:	50                   	push   eax
c001a809:	55                   	push   ebp
c001a80a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a80e:	50                   	push   eax
c001a80f:	e8 84 60 fe ff       	call   c0000898 <strcmp>
c001a814:	83 c4 10             	add    esp,0x10
c001a817:	85 c0                	test   eax,eax
c001a819:	75 dd                	jne    c001a7f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a81b:	eb e4                	jmp    c001a801 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a81d:	8d 50 01             	lea    edx,[eax+0x1]
c001a820:	80 f9 3d             	cmp    cl,0x3d
c001a823:	74 1d                	je     c001a842 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a825:	89 d0                	mov    eax,edx
c001a827:	8a 08                	mov    cl,BYTE PTR [eax]
c001a829:	84 c9                	test   cl,cl
c001a82b:	75 f0                	jne    c001a81d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a82d:	eb 0f                	jmp    c001a83e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a82f:	8d 50 01             	lea    edx,[eax+0x1]
c001a832:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a836:	47                   	inc    edi
c001a837:	89 d0                	mov    eax,edx
c001a839:	e9 3b ff ff ff       	jmp    c001a779 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a83e:	31 c0                	xor    eax,eax
c001a840:	eb 33                	jmp    c001a875 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a842:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a846:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a849:	50                   	push   eax
c001a84a:	50                   	push   eax
c001a84b:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a84f:	50                   	push   eax
c001a850:	56                   	push   esi
c001a851:	e8 42 60 fe ff       	call   c0000898 <strcmp>
c001a856:	83 c4 10             	add    esp,0x10
c001a859:	85 c0                	test   eax,eax
c001a85b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a85f:	75 97                	jne    c001a7f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a861:	51                   	push   ecx
c001a862:	51                   	push   ecx
c001a863:	52                   	push   edx
c001a864:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a86b:	e8 9c 5f fe ff       	call   c000080c <strcpy>
c001a870:	83 c4 10             	add    esp,0x10
c001a873:	b0 01                	mov    al,0x1
c001a875:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a87b:	5b                   	pop    ebx
c001a87c:	5e                   	pop    esi
c001a87d:	5f                   	pop    edi
c001a87e:	5d                   	pop    ebp
c001a87f:	c3                   	ret    

c001a880 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a880:	57                   	push   edi
c001a881:	56                   	push   esi
c001a882:	53                   	push   ebx
c001a883:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a889:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a890:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a897:	53                   	push   ebx
c001a898:	e8 cf 5e fe ff       	call   c000076c <strlen>
c001a89d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8a0:	89 c7                	mov    edi,eax
c001a8a2:	e8 c5 5e fe ff       	call   c000076c <strlen>
c001a8a7:	83 c4 10             	add    esp,0x10
c001a8aa:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a8ae:	3d ff 00 00 00       	cmp    eax,0xff
c001a8b3:	0f 87 d3 00 00 00    	ja     c001a98c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a8b9:	57                   	push   edi
c001a8ba:	57                   	push   edi
c001a8bb:	56                   	push   esi
c001a8bc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a8c0:	56                   	push   esi
c001a8c1:	e8 46 5f fe ff       	call   c000080c <strcpy>
c001a8c6:	58                   	pop    eax
c001a8c7:	5a                   	pop    edx
c001a8c8:	68 2a bb 02 c0       	push   0xc002bb2a
c001a8cd:	56                   	push   esi
c001a8ce:	e8 79 60 fe ff       	call   c000094c <strcat>
c001a8d3:	59                   	pop    ecx
c001a8d4:	5f                   	pop    edi
c001a8d5:	53                   	push   ebx
c001a8d6:	56                   	push   esi
c001a8d7:	e8 70 60 fe ff       	call   c000094c <strcat>
c001a8dc:	58                   	pop    eax
c001a8dd:	5a                   	pop    edx
c001a8de:	68 d4 b7 02 c0       	push   0xc002b7d4
c001a8e3:	56                   	push   esi
c001a8e4:	e8 63 60 fe ff       	call   c000094c <strcat>
c001a8e9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a8f0:	e8 a4 4c ff ff       	call   c000f599 <malloc>
c001a8f5:	83 c4 0c             	add    esp,0xc
c001a8f8:	89 c3                	mov    ebx,eax
c001a8fa:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c001a900:	56                   	push   esi
c001a901:	50                   	push   eax
c001a902:	e8 f9 82 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001a907:	83 c4 10             	add    esp,0x10
c001a90a:	85 db                	test   ebx,ebx
c001a90c:	74 7e                	je     c001a98c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a90e:	51                   	push   ecx
c001a90f:	51                   	push   ecx
c001a910:	6a 01                	push   0x1
c001a912:	53                   	push   ebx
c001a913:	e8 4c 83 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c001a918:	83 c4 10             	add    esp,0x10
c001a91b:	85 c0                	test   eax,eax
c001a91d:	74 08                	je     c001a927 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a91f:	83 ec 0c             	sub    esp,0xc
c001a922:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a924:	53                   	push   ebx
c001a925:	eb 5f                	jmp    c001a986 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a927:	52                   	push   edx
c001a928:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a92c:	50                   	push   eax
c001a92d:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a931:	50                   	push   eax
c001a932:	53                   	push   ebx
c001a933:	e8 d8 85 ff ff       	call   c0012f10 <File::stat(unsigned long long*, bool*)>
c001a938:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a93c:	83 c4 10             	add    esp,0x10
c001a93f:	89 c1                	mov    ecx,eax
c001a941:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a945:	74 31                	je     c001a978 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a947:	83 ec 0c             	sub    esp,0xc
c001a94a:	50                   	push   eax
c001a94b:	e8 49 4c ff ff       	call   c000f599 <malloc>
c001a950:	89 c6                	mov    esi,eax
c001a952:	58                   	pop    eax
c001a953:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a955:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a959:	52                   	push   edx
c001a95a:	56                   	push   esi
c001a95b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a95f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a963:	53                   	push   ebx
c001a964:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a967:	83 c4 20             	add    esp,0x20
c001a96a:	85 c0                	test   eax,eax
c001a96c:	75 0a                	jne    c001a978 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a96e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a972:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a976:	74 18                	je     c001a990 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a978:	83 ec 0c             	sub    esp,0xc
c001a97b:	53                   	push   ebx
c001a97c:	e8 41 83 ff ff       	call   c0012cc2 <File::close()>
c001a981:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a983:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a986:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a989:	83 c4 10             	add    esp,0x10
c001a98c:	31 c0                	xor    eax,eax
c001a98e:	eb 3b                	jmp    c001a9cb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a990:	83 ec 0c             	sub    esp,0xc
c001a993:	53                   	push   ebx
c001a994:	e8 29 83 ff ff       	call   c0012cc2 <File::close()>
c001a999:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a99b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a99e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9a1:	83 c4 0c             	add    esp,0xc
c001a9a4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9ab:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9b2:	56                   	push   esi
c001a9b3:	e8 70 fd ff ff       	call   c001a728 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a9b8:	89 34 24             	mov    DWORD PTR [esp],esi
c001a9bb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a9bf:	e8 e5 4b ff ff       	call   c000f5a9 <free>
c001a9c4:	83 c4 10             	add    esp,0x10
c001a9c7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a9cb:	81 c4 20 01 00 00    	add    esp,0x120
c001a9d1:	5b                   	pop    ebx
c001a9d2:	5e                   	pop    esi
c001a9d3:	5f                   	pop    edi
c001a9d4:	c3                   	ret    

c001a9d5 <Reg::getLine(char*, char*, char*)>:
c001a9d5:	57                   	push   edi
c001a9d6:	56                   	push   esi
c001a9d7:	53                   	push   ebx
c001a9d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9dc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a9e0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a9e4:	57                   	push   edi
c001a9e5:	56                   	push   esi
c001a9e6:	53                   	push   ebx
c001a9e7:	68 d9 b7 02 c0       	push   0xc002b7d9
c001a9ec:	e8 8f fe ff ff       	call   c001a880 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a9f1:	83 c4 10             	add    esp,0x10
c001a9f4:	84 c0                	test   al,al
c001a9f6:	75 10                	jne    c001aa08 <Reg::getLine(char*, char*, char*)+0x33>
c001a9f8:	57                   	push   edi
c001a9f9:	56                   	push   esi
c001a9fa:	53                   	push   ebx
c001a9fb:	68 fe b7 02 c0       	push   0xc002b7fe
c001aa00:	e8 7b fe ff ff       	call   c001a880 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa05:	83 c4 10             	add    esp,0x10
c001aa08:	5b                   	pop    ebx
c001aa09:	5e                   	pop    esi
c001aa0a:	5f                   	pop    edi
c001aa0b:	c3                   	ret    

c001aa0c <Reg::readInt(char*, char*, int*)>:
c001aa0c:	55                   	push   ebp
c001aa0d:	57                   	push   edi
c001aa0e:	56                   	push   esi
c001aa0f:	53                   	push   ebx
c001aa10:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aa16:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aa1a:	57                   	push   edi
c001aa1b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa22:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa29:	e8 a7 ff ff ff       	call   c001a9d5 <Reg::getLine(char*, char*, char*)>
c001aa2e:	83 c4 10             	add    esp,0x10
c001aa31:	84 c0                	test   al,al
c001aa33:	0f 84 b3 00 00 00    	je     c001aaec <Reg::readInt(char*, char*, int*)+0xe0>
c001aa39:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aa3d:	80 fa 2b             	cmp    dl,0x2b
c001aa40:	74 0c                	je     c001aa4e <Reg::readInt(char*, char*, int*)+0x42>
c001aa42:	80 fa 2d             	cmp    dl,0x2d
c001aa45:	75 0e                	jne    c001aa55 <Reg::readInt(char*, char*, int*)+0x49>
c001aa47:	ba 01 00 00 00       	mov    edx,0x1
c001aa4c:	eb 0b                	jmp    c001aa59 <Reg::readInt(char*, char*, int*)+0x4d>
c001aa4e:	ba 01 00 00 00       	mov    edx,0x1
c001aa53:	eb 02                	jmp    c001aa57 <Reg::readInt(char*, char*, int*)+0x4b>
c001aa55:	31 d2                	xor    edx,edx
c001aa57:	31 c0                	xor    eax,eax
c001aa59:	be 0a 00 00 00       	mov    esi,0xa
c001aa5e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aa63:	75 20                	jne    c001aa85 <Reg::readInt(char*, char*, int*)+0x79>
c001aa65:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aa69:	80 f9 78             	cmp    cl,0x78
c001aa6c:	75 0a                	jne    c001aa78 <Reg::readInt(char*, char*, int*)+0x6c>
c001aa6e:	83 c2 02             	add    edx,0x2
c001aa71:	be 10 00 00 00       	mov    esi,0x10
c001aa76:	eb 0d                	jmp    c001aa85 <Reg::readInt(char*, char*, int*)+0x79>
c001aa78:	80 f9 62             	cmp    cl,0x62
c001aa7b:	75 08                	jne    c001aa85 <Reg::readInt(char*, char*, int*)+0x79>
c001aa7d:	83 c2 02             	add    edx,0x2
c001aa80:	be 02 00 00 00       	mov    esi,0x2
c001aa85:	01 d7                	add    edi,edx
c001aa87:	31 d2                	xor    edx,edx
c001aa89:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aa8b:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aa8f:	80 fb 0d             	cmp    bl,0xd
c001aa92:	0f 94 c3             	sete   bl
c001aa95:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aa9a:	0f 94 c1             	sete   cl
c001aa9d:	08 cb                	or     bl,cl
c001aa9f:	75 3a                	jne    c001aadb <Reg::readInt(char*, char*, int*)+0xcf>
c001aaa1:	0f af d6             	imul   edx,esi
c001aaa4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aaa9:	83 fe 10             	cmp    esi,0x10
c001aaac:	75 26                	jne    c001aad4 <Reg::readInt(char*, char*, int*)+0xc8>
c001aaae:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aab2:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aab5:	89 e9                	mov    ecx,ebp
c001aab7:	80 f9 05             	cmp    cl,0x5
c001aaba:	77 06                	ja     c001aac2 <Reg::readInt(char*, char*, int*)+0xb6>
c001aabc:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001aac0:	eb 16                	jmp    c001aad8 <Reg::readInt(char*, char*, int*)+0xcc>
c001aac2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aac6:	83 e9 61             	sub    ecx,0x61
c001aac9:	80 f9 05             	cmp    cl,0x5
c001aacc:	77 06                	ja     c001aad4 <Reg::readInt(char*, char*, int*)+0xc8>
c001aace:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aad2:	eb 04                	jmp    c001aad8 <Reg::readInt(char*, char*, int*)+0xcc>
c001aad4:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001aad8:	47                   	inc    edi
c001aad9:	eb ae                	jmp    c001aa89 <Reg::readInt(char*, char*, int*)+0x7d>
c001aadb:	84 c0                	test   al,al
c001aadd:	74 02                	je     c001aae1 <Reg::readInt(char*, char*, int*)+0xd5>
c001aadf:	f7 da                	neg    edx
c001aae1:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001aae8:	89 10                	mov    DWORD PTR [eax],edx
c001aaea:	88 d8                	mov    al,bl
c001aaec:	81 c4 ec 00 00 00    	add    esp,0xec
c001aaf2:	5b                   	pop    ebx
c001aaf3:	5e                   	pop    esi
c001aaf4:	5f                   	pop    edi
c001aaf5:	5d                   	pop    ebp
c001aaf6:	c3                   	ret    

c001aaf7 <Reg::readString(char*, char*, char*, int)>:
c001aaf7:	57                   	push   edi
c001aaf8:	56                   	push   esi
c001aaf9:	53                   	push   ebx
c001aafa:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ab00:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ab07:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ab0b:	57                   	push   edi
c001ab0c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab13:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab1a:	e8 b6 fe ff ff       	call   c001a9d5 <Reg::getLine(char*, char*, char*)>
c001ab1f:	83 c4 10             	add    esp,0x10
c001ab22:	89 c6                	mov    esi,eax
c001ab24:	84 c0                	test   al,al
c001ab26:	74 44                	je     c001ab6c <Reg::readString(char*, char*, char*, int)+0x75>
c001ab28:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ab2f:	31 c0                	xor    eax,eax
c001ab31:	4a                   	dec    edx
c001ab32:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ab35:	84 c9                	test   cl,cl
c001ab37:	74 0f                	je     c001ab48 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab39:	39 c2                	cmp    edx,eax
c001ab3b:	7e 0b                	jle    c001ab48 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab3d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ab40:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ab45:	40                   	inc    eax
c001ab46:	eb ea                	jmp    c001ab32 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ab48:	83 ec 0c             	sub    esp,0xc
c001ab4b:	53                   	push   ebx
c001ab4c:	e8 1b 5c fe ff       	call   c000076c <strlen>
c001ab51:	83 c4 10             	add    esp,0x10
c001ab54:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ab59:	75 11                	jne    c001ab6c <Reg::readString(char*, char*, char*, int)+0x75>
c001ab5b:	83 ec 0c             	sub    esp,0xc
c001ab5e:	53                   	push   ebx
c001ab5f:	e8 08 5c fe ff       	call   c000076c <strlen>
c001ab64:	83 c4 10             	add    esp,0x10
c001ab67:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ab6c:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ab72:	89 f0                	mov    eax,esi
c001ab74:	5b                   	pop    ebx
c001ab75:	5e                   	pop    esi
c001ab76:	5f                   	pop    edi
c001ab77:	c3                   	ret    

c001ab78 <Reg::readBool(char*, char*, bool*)>:
c001ab78:	83 ec 20             	sub    esp,0x20
c001ab7b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab7f:	50                   	push   eax
c001ab80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab84:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab88:	e8 7f fe ff ff       	call   c001aa0c <Reg::readInt(char*, char*, int*)>
c001ab8d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ab92:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ab96:	0f 95 02             	setne  BYTE PTR [edx]
c001ab99:	83 c4 2c             	add    esp,0x2c
c001ab9c:	c3                   	ret    

c001ab9d <Reg::readBoolWithDefault(char*, char*, bool)>:
c001ab9d:	53                   	push   ebx
c001ab9e:	83 ec 1c             	sub    esp,0x1c
c001aba1:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aba5:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aba9:	50                   	push   eax
c001abaa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abb2:	e8 c1 ff ff ff       	call   c001ab78 <Reg::readBool(char*, char*, bool*)>
c001abb7:	83 c4 10             	add    esp,0x10
c001abba:	84 c0                	test   al,al
c001abbc:	74 04                	je     c001abc2 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001abbe:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001abc2:	88 d8                	mov    al,bl
c001abc4:	83 c4 18             	add    esp,0x18
c001abc7:	5b                   	pop    ebx
c001abc8:	c3                   	ret    

c001abc9 <Reg::readIntWithDefault(char*, char*, int)>:
c001abc9:	53                   	push   ebx
c001abca:	83 ec 1c             	sub    esp,0x1c
c001abcd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001abd1:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abd5:	50                   	push   eax
c001abd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abde:	e8 29 fe ff ff       	call   c001aa0c <Reg::readInt(char*, char*, int*)>
c001abe3:	83 c4 10             	add    esp,0x10
c001abe6:	84 c0                	test   al,al
c001abe8:	74 04                	je     c001abee <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001abea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001abee:	89 d8                	mov    eax,ebx
c001abf0:	83 c4 18             	add    esp,0x18
c001abf3:	5b                   	pop    ebx
c001abf4:	c3                   	ret    

c001abf5 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001abf5:	57                   	push   edi
c001abf6:	56                   	push   esi
c001abf7:	56                   	push   esi
c001abf8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001abfc:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac00:	56                   	push   esi
c001ac01:	57                   	push   edi
c001ac02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac0a:	e8 e8 fe ff ff       	call   c001aaf7 <Reg::readString(char*, char*, char*, int)>
c001ac0f:	83 c4 10             	add    esp,0x10
c001ac12:	84 c0                	test   al,al
c001ac14:	75 1a                	jne    c001ac30 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ac16:	51                   	push   ecx
c001ac17:	56                   	push   esi
c001ac18:	6a 00                	push   0x0
c001ac1a:	57                   	push   edi
c001ac1b:	e8 30 5b fe ff       	call   c0000750 <memset>
c001ac20:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ac23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac29:	83 c4 10             	add    esp,0x10
c001ac2c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac30:	89 f8                	mov    eax,edi
c001ac32:	5a                   	pop    edx
c001ac33:	5e                   	pop    esi
c001ac34:	5f                   	pop    edi
c001ac35:	c3                   	ret    

c001ac36 <Sys::eject(regs*)>:
c001ac36:	83 ec 0c             	sub    esp,0xc
c001ac39:	83 ca ff             	or     edx,0xffffffff
c001ac3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac40:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ac43:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ac48:	83 e9 41             	sub    ecx,0x41
c001ac4b:	83 f9 19             	cmp    ecx,0x19
c001ac4e:	77 18                	ja     c001ac68 <Sys::eject(regs*)+0x32>
c001ac50:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c001ac57:	85 c9                	test   ecx,ecx
c001ac59:	74 0d                	je     c001ac68 <Sys::eject(regs*)+0x32>
c001ac5b:	83 ec 0c             	sub    esp,0xc
c001ac5e:	51                   	push   ecx
c001ac5f:	e8 28 b3 ff ff       	call   c0015f8c <LogicalDisk::eject()>
c001ac64:	83 c4 10             	add    esp,0x10
c001ac67:	99                   	cdq    
c001ac68:	83 c4 0c             	add    esp,0xc
c001ac6b:	c3                   	ret    

c001ac6c <Sys::exit(regs*)>:
c001ac6c:	83 ec 18             	sub    esp,0x18
c001ac6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac73:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ac76:	e8 bc 35 00 00       	call   c001e237 <terminateTask(int)>
c001ac7b:	83 c8 ff             	or     eax,0xffffffff
c001ac7e:	83 c4 1c             	add    esp,0x1c
c001ac81:	89 c2                	mov    edx,eax
c001ac83:	c3                   	ret    

c001ac84 <Sys::getCwd(regs*)>:
c001ac84:	83 ec 10             	sub    esp,0x10
c001ac87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac8b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ac8e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ac91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac96:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ac99:	e8 64 7d ff ff       	call   c0012a02 <Fs::getcwd(Process*, char*, int)>
c001ac9e:	83 c4 1c             	add    esp,0x1c
c001aca1:	99                   	cdq    
c001aca2:	c3                   	ret    

c001aca3 <Sys::getPID(regs*)>:
c001aca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aca8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acab:	8b 00                	mov    eax,DWORD PTR [eax]
c001acad:	99                   	cdq    
c001acae:	c3                   	ret    

c001acaf <Sys::getRAMData(regs*)>:
c001acaf:	8b 0d 74 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d974
c001acb5:	6b 05 70 d9 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d970,0x64
c001acbc:	99                   	cdq    
c001acbd:	f7 f9                	idiv   ecx
c001acbf:	c1 e0 18             	shl    eax,0x18
c001acc2:	09 c8                	or     eax,ecx
c001acc4:	99                   	cdq    
c001acc5:	c3                   	ret    

c001acc6 <Sys::getVGAPtr(regs*)>:
c001acc6:	55                   	push   ebp
c001acc7:	57                   	push   edi
c001acc8:	56                   	push   esi
c001acc9:	53                   	push   ebx
c001acca:	83 ec 18             	sub    esp,0x18
c001accd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acd1:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001acd4:	e8 aa 30 00 00       	call   c001dd83 <Thr::processFromPID(int)>
c001acd9:	83 c4 10             	add    esp,0x10
c001acdc:	89 c1                	mov    ecx,eax
c001acde:	b8 01 00 00 00       	mov    eax,0x1
c001ace3:	85 c9                	test   ecx,ecx
c001ace5:	74 59                	je     c001ad40 <Sys::getVGAPtr(regs*)+0x7a>
c001ace7:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001aced:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001acf1:	74 0c                	je     c001acff <Sys::getVGAPtr(regs*)+0x39>
c001acf3:	83 ec 0c             	sub    esp,0xc
c001acf6:	53                   	push   ebx
c001acf7:	e8 2f 56 ff ff       	call   c001032b <setActiveTerminal(VgaText*)>
c001acfc:	83 c4 10             	add    esp,0x10
c001acff:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ad02:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ad05:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ad0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad0c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ad0f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad12:	81 c3 82 00 00 00    	add    ebx,0x82
c001ad18:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ad1e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad21:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ad24:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ad2a:	50                   	push   eax
c001ad2b:	50                   	push   eax
c001ad2c:	53                   	push   ebx
c001ad2d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad30:	05 a8 0f 00 00       	add    eax,0xfa8
c001ad35:	50                   	push   eax
c001ad36:	e8 d1 5a fe ff       	call   c000080c <strcpy>
c001ad3b:	83 c4 10             	add    esp,0x10
c001ad3e:	31 c0                	xor    eax,eax
c001ad40:	83 c4 0c             	add    esp,0xc
c001ad43:	31 d2                	xor    edx,edx
c001ad45:	5b                   	pop    ebx
c001ad46:	5e                   	pop    esi
c001ad47:	5f                   	pop    edi
c001ad48:	5d                   	pop    ebp
c001ad49:	c3                   	ret    

c001ad4a <Sys::loadDLL(regs*)>:
c001ad4a:	56                   	push   esi
c001ad4b:	53                   	push   ebx
c001ad4c:	31 d2                	xor    edx,edx
c001ad4e:	51                   	push   ecx
c001ad4f:	b8 01 00 00 00       	mov    eax,0x1
c001ad54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad58:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ad5c:	0f 84 8c 00 00 00    	je     c001adee <Sys::loadDLL(regs*)+0xa4>
c001ad62:	83 ec 0c             	sub    esp,0xc
c001ad65:	68 14 01 00 00       	push   0x114
c001ad6a:	e8 2a 48 ff ff       	call   c000f599 <malloc>
c001ad6f:	83 c4 0c             	add    esp,0xc
c001ad72:	89 c3                	mov    ebx,eax
c001ad74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad79:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad7c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ad7f:	53                   	push   ebx
c001ad80:	e8 7b 7e ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001ad85:	83 c4 10             	add    esp,0x10
c001ad88:	31 d2                	xor    edx,edx
c001ad8a:	b8 02 00 00 00       	mov    eax,0x2
c001ad8f:	85 db                	test   ebx,ebx
c001ad91:	74 5b                	je     c001adee <Sys::loadDLL(regs*)+0xa4>
c001ad93:	83 ec 0c             	sub    esp,0xc
c001ad96:	53                   	push   ebx
c001ad97:	e8 36 81 ff ff       	call   c0012ed2 <File::exists()>
c001ad9c:	83 c4 10             	add    esp,0x10
c001ad9f:	84 c0                	test   al,al
c001ada1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ada3:	75 11                	jne    c001adb6 <Sys::loadDLL(regs*)+0x6c>
c001ada5:	83 ec 0c             	sub    esp,0xc
c001ada8:	53                   	push   ebx
c001ada9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adac:	83 c4 10             	add    esp,0x10
c001adaf:	b8 03 00 00 00       	mov    eax,0x3
c001adb4:	eb 36                	jmp    c001adec <Sys::loadDLL(regs*)+0xa2>
c001adb6:	83 ec 0c             	sub    esp,0xc
c001adb9:	53                   	push   ebx
c001adba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adbd:	58                   	pop    eax
c001adbe:	5a                   	pop    edx
c001adbf:	6a 00                	push   0x0
c001adc1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001adc4:	e8 0e 22 00 00       	call   c001cfd7 <Thr::loadDLL(char const*, bool)>
c001adc9:	83 c4 10             	add    esp,0x10
c001adcc:	89 c1                	mov    ecx,eax
c001adce:	31 d2                	xor    edx,edx
c001add0:	b8 04 00 00 00       	mov    eax,0x4
c001add5:	85 c9                	test   ecx,ecx
c001add7:	74 15                	je     c001adee <Sys::loadDLL(regs*)+0xa4>
c001add9:	53                   	push   ebx
c001adda:	53                   	push   ebx
c001addb:	ff 35 28 d9 02 c0    	push   DWORD PTR ds:0xc002d928
c001ade1:	51                   	push   ecx
c001ade2:	e8 1b 24 00 00       	call   c001d202 <Thr::executeDLL(unsigned long, void*)>
c001ade7:	83 c4 10             	add    esp,0x10
c001adea:	31 c0                	xor    eax,eax
c001adec:	31 d2                	xor    edx,edx
c001adee:	59                   	pop    ecx
c001adef:	5b                   	pop    ebx
c001adf0:	5e                   	pop    esi
c001adf1:	c3                   	ret    

c001adf2 <Sys::read(regs*)>:
c001adf2:	57                   	push   edi
c001adf3:	56                   	push   esi
c001adf4:	53                   	push   ebx
c001adf5:	83 ec 10             	sub    esp,0x10
c001adf8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001adfc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001adff:	83 f8 02             	cmp    eax,0x2
c001ae02:	77 10                	ja     c001ae14 <Sys::read(regs*)+0x22>
c001ae04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae09:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae0c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae12:	eb 0e                	jmp    c001ae22 <Sys::read(regs*)+0x30>
c001ae14:	83 ec 0c             	sub    esp,0xc
c001ae17:	50                   	push   eax
c001ae18:	e8 82 62 ff ff       	call   c001109f <getFromFileDescriptor(int)>
c001ae1d:	83 c4 10             	add    esp,0x10
c001ae20:	89 c1                	mov    ecx,eax
c001ae22:	83 c8 ff             	or     eax,0xffffffff
c001ae25:	85 c9                	test   ecx,ecx
c001ae27:	89 c2                	mov    edx,eax
c001ae29:	74 28                	je     c001ae53 <Sys::read(regs*)+0x61>
c001ae2b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae33:	31 ff                	xor    edi,edi
c001ae35:	83 ec 0c             	sub    esp,0xc
c001ae38:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae3a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae3e:	52                   	push   edx
c001ae3f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae42:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae45:	57                   	push   edi
c001ae46:	56                   	push   esi
c001ae47:	51                   	push   ecx
c001ae48:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae4f:	83 c4 20             	add    esp,0x20
c001ae52:	99                   	cdq    
c001ae53:	83 c4 10             	add    esp,0x10
c001ae56:	5b                   	pop    ebx
c001ae57:	5e                   	pop    esi
c001ae58:	5f                   	pop    edi
c001ae59:	c3                   	ret    

c001ae5a <Sys::sbrk(regs*)>:
c001ae5a:	56                   	push   esi
c001ae5b:	53                   	push   ebx
c001ae5c:	50                   	push   eax
c001ae5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae69:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ae6c:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ae72:	85 db                	test   ebx,ebx
c001ae74:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ae77:	74 02                	je     c001ae7b <Sys::sbrk(regs*)+0x21>
c001ae79:	79 06                	jns    c001ae81 <Sys::sbrk(regs*)+0x27>
c001ae7b:	89 f0                	mov    eax,esi
c001ae7d:	31 d2                	xor    edx,edx
c001ae7f:	eb 2a                	jmp    c001aeab <Sys::sbrk(regs*)+0x51>
c001ae81:	83 c8 ff             	or     eax,0xffffffff
c001ae84:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ae8a:	89 c2                	mov    edx,eax
c001ae8c:	77 1d                	ja     c001aeab <Sys::sbrk(regs*)+0x51>
c001ae8e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001ae94:	50                   	push   eax
c001ae95:	c1 ea 0c             	shr    edx,0xc
c001ae98:	68 07 0c 00 00       	push   0xc07
c001ae9d:	52                   	push   edx
c001ae9e:	51                   	push   ecx
c001ae9f:	e8 10 6c ff ff       	call   c0011ab4 <VAS::allocatePages(int, int)>
c001aea4:	89 f0                	mov    eax,esi
c001aea6:	31 d2                	xor    edx,edx
c001aea8:	83 c4 10             	add    esp,0x10
c001aeab:	59                   	pop    ecx
c001aeac:	5b                   	pop    ebx
c001aead:	5e                   	pop    esi
c001aeae:	c3                   	ret    

c001aeaf <Sys::setCwd(regs*)>:
c001aeaf:	83 ec 14             	sub    esp,0x14
c001aeb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aeb6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aeb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aebe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aec1:	e8 ab 80 ff ff       	call   c0012f71 <Fs::setcwd(Process*, char*)>
c001aec6:	83 c4 1c             	add    esp,0x1c
c001aec9:	99                   	cdq    
c001aeca:	c3                   	ret    

c001aecb <Sys::setTime(regs*)>:
c001aecb:	55                   	push   ebp
c001aecc:	31 c9                	xor    ecx,ecx
c001aece:	57                   	push   edi
c001aecf:	bd 0c 00 00 00       	mov    ebp,0xc
c001aed4:	56                   	push   esi
c001aed5:	53                   	push   ebx
c001aed6:	31 db                	xor    ebx,ebx
c001aed8:	83 ec 10             	sub    esp,0x10
c001aedb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aedf:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001aee2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001aee5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001aee8:	89 c2                	mov    edx,eax
c001aeea:	66 81 ef 6c 07       	sub    di,0x76c
c001aeef:	83 e2 1f             	and    edx,0x1f
c001aef2:	c1 e7 10             	shl    edi,0x10
c001aef5:	42                   	inc    edx
c001aef6:	c1 e8 05             	shr    eax,0x5
c001aef9:	88 d1                	mov    cl,dl
c001aefb:	31 d2                	xor    edx,edx
c001aefd:	f7 f5                	div    ebp
c001aeff:	89 dd                	mov    ebp,ebx
c001af01:	88 d5                	mov    ch,dl
c001af03:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001af09:	0f b7 c1             	movzx  eax,cx
c001af0c:	31 d2                	xor    edx,edx
c001af0e:	09 f8                	or     eax,edi
c001af10:	bf 3c 00 00 00       	mov    edi,0x3c
c001af15:	89 c1                	mov    ecx,eax
c001af17:	89 f0                	mov    eax,esi
c001af19:	f7 f7                	div    edi
c001af1b:	c1 e2 10             	shl    edx,0x10
c001af1e:	09 d5                	or     ebp,edx
c001af20:	31 d2                	xor    edx,edx
c001af22:	89 eb                	mov    ebx,ebp
c001af24:	f7 f7                	div    edi
c001af26:	bf 10 0e 00 00       	mov    edi,0xe10
c001af2b:	88 d7                	mov    bh,dl
c001af2d:	89 f0                	mov    eax,esi
c001af2f:	31 d2                	xor    edx,edx
c001af31:	f7 f7                	div    edi
c001af33:	bf 18 00 00 00       	mov    edi,0x18
c001af38:	31 d2                	xor    edx,edx
c001af3a:	f7 f7                	div    edi
c001af3c:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001af41:	88 d3                	mov    bl,dl
c001af43:	53                   	push   ebx
c001af44:	51                   	push   ecx
c001af45:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001af4b:	e8 6a 88 ff ff       	call   c00137ba <Clock::setTimeInDatetimeLocal(datetime_t)>
c001af50:	83 c4 1c             	add    esp,0x1c
c001af53:	83 f0 01             	xor    eax,0x1
c001af56:	5b                   	pop    ebx
c001af57:	0f b6 c0             	movzx  eax,al
c001af5a:	5e                   	pop    esi
c001af5b:	31 d2                	xor    edx,edx
c001af5d:	5f                   	pop    edi
c001af5e:	5d                   	pop    ebp
c001af5f:	c3                   	ret    

c001af60 <Sys::timezone(regs*)>:
c001af60:	53                   	push   ebx
c001af61:	83 ec 08             	sub    esp,0x8
c001af64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af68:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001af6c:	75 17                	jne    c001af85 <Sys::timezone(regs*)+0x25>
c001af6e:	83 ec 0c             	sub    esp,0xc
c001af71:	68 19 b8 02 c0       	push   0xc002b819
c001af76:	e8 26 77 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001af7b:	83 c8 ff             	or     eax,0xffffffff
c001af7e:	83 c4 10             	add    esp,0x10
c001af81:	89 c2                	mov    edx,eax
c001af83:	eb 20                	jmp    c001afa5 <Sys::timezone(regs*)+0x45>
c001af85:	83 ec 0c             	sub    esp,0xc
c001af88:	68 2e b8 02 c0       	push   0xc002b82e
c001af8d:	e8 0f 77 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001af92:	58                   	pop    eax
c001af93:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001af96:	e8 81 85 ff ff       	call   c001351c <User::loadClockSettings(int)>
c001af9b:	83 c4 10             	add    esp,0x10
c001af9e:	b8 01 00 00 00       	mov    eax,0x1
c001afa3:	31 d2                	xor    edx,edx
c001afa5:	83 c4 08             	add    esp,0x8
c001afa8:	5b                   	pop    ebx
c001afa9:	c3                   	ret    

c001afaa <Sys::write(regs*)>:
c001afaa:	57                   	push   edi
c001afab:	56                   	push   esi
c001afac:	53                   	push   ebx
c001afad:	83 ec 10             	sub    esp,0x10
c001afb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afb4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001afb7:	83 f8 02             	cmp    eax,0x2
c001afba:	77 10                	ja     c001afcc <Sys::write(regs*)+0x22>
c001afbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afc1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001afc4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001afca:	eb 0e                	jmp    c001afda <Sys::write(regs*)+0x30>
c001afcc:	83 ec 0c             	sub    esp,0xc
c001afcf:	50                   	push   eax
c001afd0:	e8 ca 60 ff ff       	call   c001109f <getFromFileDescriptor(int)>
c001afd5:	83 c4 10             	add    esp,0x10
c001afd8:	89 c1                	mov    ecx,eax
c001afda:	83 c8 ff             	or     eax,0xffffffff
c001afdd:	85 c9                	test   ecx,ecx
c001afdf:	89 c2                	mov    edx,eax
c001afe1:	74 28                	je     c001b00b <Sys::write(regs*)+0x61>
c001afe3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001afeb:	31 ff                	xor    edi,edi
c001afed:	83 ec 0c             	sub    esp,0xc
c001aff0:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aff2:	8d 54 24 18          	lea    edx,[esp+0x18]
c001aff6:	52                   	push   edx
c001aff7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001affa:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001affd:	57                   	push   edi
c001affe:	56                   	push   esi
c001afff:	51                   	push   ecx
c001b000:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b003:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b007:	83 c4 20             	add    esp,0x20
c001b00a:	99                   	cdq    
c001b00b:	83 c4 10             	add    esp,0x10
c001b00e:	5b                   	pop    ebx
c001b00f:	5e                   	pop    esi
c001b010:	5f                   	pop    edi
c001b011:	c3                   	ret    

c001b012 <Sys::wsbe(regs*)>:
c001b012:	57                   	push   edi
c001b013:	b9 0b 00 00 00       	mov    ecx,0xb
c001b018:	56                   	push   esi
c001b019:	be 6d b8 02 c0       	mov    esi,0xc002b86d
c001b01e:	53                   	push   ebx
c001b01f:	83 ec 30             	sub    esp,0x30
c001b022:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b026:	fc                   	cld    
c001b027:	83 ec 0c             	sub    esp,0xc
c001b02a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b02c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b030:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b035:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b038:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b03e:	8b 06                	mov    eax,DWORD PTR [esi]
c001b040:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b043:	57                   	push   edi
c001b044:	e8 23 57 fe ff       	call   c000076c <strlen>
c001b049:	5a                   	pop    edx
c001b04a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b04e:	52                   	push   edx
c001b04f:	31 d2                	xor    edx,edx
c001b051:	57                   	push   edi
c001b052:	52                   	push   edx
c001b053:	50                   	push   eax
c001b054:	56                   	push   esi
c001b055:	ff d3                	call   ebx
c001b057:	83 c4 14             	add    esp,0x14
c001b05a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b05e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b061:	e8 d1 31 00 00       	call   c001e237 <terminateTask(int)>
c001b066:	83 c4 40             	add    esp,0x40
c001b069:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b06e:	5b                   	pop    ebx
c001b06f:	31 d2                	xor    edx,edx
c001b071:	5e                   	pop    esi
c001b072:	5f                   	pop    edi
c001b073:	c3                   	ret    

c001b074 <Sys::yield(regs*)>:
c001b074:	57                   	push   edi
c001b075:	56                   	push   esi
c001b076:	53                   	push   ebx
c001b077:	fa                   	cli    
c001b078:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001b07e:	e8 14 29 00 00       	call   c001d997 <schedule()>
c001b083:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001b088:	48                   	dec    eax
c001b089:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001b08e:	75 01                	jne    c001b091 <Sys::yield(regs*)+0x1d>
c001b090:	fb                   	sti    
c001b091:	8b 35 90 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df90
c001b097:	8b 3d 94 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df94
c001b09d:	89 f0                	mov    eax,esi
c001b09f:	89 fb                	mov    ebx,edi
c001b0a1:	89 f1                	mov    ecx,esi
c001b0a3:	c1 e0 07             	shl    eax,0x7
c001b0a6:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b0aa:	25 80 30 0f 00       	and    eax,0xf3080
c001b0af:	c1 eb 17             	shr    ebx,0x17
c001b0b2:	31 c8                	xor    eax,ecx
c001b0b4:	89 da                	mov    edx,ebx
c001b0b6:	5b                   	pop    ebx
c001b0b7:	5e                   	pop    esi
c001b0b8:	5f                   	pop    edi
c001b0b9:	c3                   	ret    

c001b0ba <sysCallSeekDir(regs*)>:
c001b0ba:	31 c0                	xor    eax,eax
c001b0bc:	31 d2                	xor    edx,edx
c001b0be:	c3                   	ret    

c001b0bf <sysCallTellDir(regs*)>:
c001b0bf:	31 c0                	xor    eax,eax
c001b0c1:	31 d2                	xor    edx,edx
c001b0c3:	c3                   	ret    

c001b0c4 <sysCallVerify(regs*)>:
c001b0c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0c8:	31 d2                	xor    edx,edx
c001b0ca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b0cd:	c3                   	ret    

c001b0ce <sysCallGetArgc(regs*)>:
c001b0ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0d6:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b0dc:	99                   	cdq    
c001b0dd:	c3                   	ret    

c001b0de <sysFormatDisk(regs*)>:
c001b0de:	56                   	push   esi
c001b0df:	53                   	push   ebx
c001b0e0:	53                   	push   ebx
c001b0e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b0e5:	8b 1d 94 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da94
c001b0eb:	eb 25                	jmp    c001b112 <sysFormatDisk(regs*)+0x34>
c001b0ed:	83 ec 0c             	sub    esp,0xc
c001b0f0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b0f3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b0f5:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b0f8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b0fb:	50                   	push   eax
c001b0fc:	ff 34 85 20 df 02 c0 	push   DWORD PTR [eax*4-0x3ffd20e0]
c001b103:	53                   	push   ebx
c001b104:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b107:	83 c4 20             	add    esp,0x20
c001b10a:	83 f8 08             	cmp    eax,0x8
c001b10d:	75 12                	jne    c001b121 <sysFormatDisk(regs*)+0x43>
c001b10f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b112:	85 db                	test   ebx,ebx
c001b114:	75 d7                	jne    c001b0ed <sysFormatDisk(regs*)+0xf>
c001b116:	59                   	pop    ecx
c001b117:	b8 03 00 00 00       	mov    eax,0x3
c001b11c:	31 d2                	xor    edx,edx
c001b11e:	5b                   	pop    ebx
c001b11f:	5e                   	pop    esi
c001b120:	c3                   	ret    
c001b121:	85 c0                	test   eax,eax
c001b123:	74 1b                	je     c001b140 <sysFormatDisk(regs*)+0x62>
c001b125:	83 f8 09             	cmp    eax,0x9
c001b128:	74 0b                	je     c001b135 <sysFormatDisk(regs*)+0x57>
c001b12a:	59                   	pop    ecx
c001b12b:	b8 02 00 00 00       	mov    eax,0x2
c001b130:	31 d2                	xor    edx,edx
c001b132:	5b                   	pop    ebx
c001b133:	5e                   	pop    esi
c001b134:	c3                   	ret    
c001b135:	59                   	pop    ecx
c001b136:	b8 01 00 00 00       	mov    eax,0x1
c001b13b:	31 d2                	xor    edx,edx
c001b13d:	5b                   	pop    ebx
c001b13e:	5e                   	pop    esi
c001b13f:	c3                   	ret    
c001b140:	59                   	pop    ecx
c001b141:	31 c0                	xor    eax,eax
c001b143:	31 d2                	xor    edx,edx
c001b145:	5b                   	pop    ebx
c001b146:	5e                   	pop    esi
c001b147:	c3                   	ret    

c001b148 <sysSetDiskVolumeLabel(regs*)>:
c001b148:	56                   	push   esi
c001b149:	53                   	push   ebx
c001b14a:	53                   	push   ebx
c001b14b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b14f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b152:	83 f8 19             	cmp    eax,0x19
c001b155:	77 29                	ja     c001b180 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b157:	8b 0c 85 20 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd20e0]
c001b15e:	85 c9                	test   ecx,ecx
c001b160:	74 1e                	je     c001b180 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b162:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b165:	85 d2                	test   edx,edx
c001b167:	74 17                	je     c001b180 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b169:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b16f:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b171:	52                   	push   edx
c001b172:	50                   	push   eax
c001b173:	51                   	push   ecx
c001b174:	53                   	push   ebx
c001b175:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b178:	83 c4 10             	add    esp,0x10
c001b17b:	99                   	cdq    
c001b17c:	59                   	pop    ecx
c001b17d:	5b                   	pop    ebx
c001b17e:	5e                   	pop    esi
c001b17f:	c3                   	ret    
c001b180:	59                   	pop    ecx
c001b181:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b186:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b18b:	5b                   	pop    ebx
c001b18c:	5e                   	pop    esi
c001b18d:	c3                   	ret    

c001b18e <sysGetDiskVolumeLabel(regs*)>:
c001b18e:	57                   	push   edi
c001b18f:	56                   	push   esi
c001b190:	53                   	push   ebx
c001b191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b195:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b198:	83 fa 19             	cmp    edx,0x19
c001b19b:	77 34                	ja     c001b1d1 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b19d:	8b 0c 95 20 df 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd20e0]
c001b1a4:	85 c9                	test   ecx,ecx
c001b1a6:	74 29                	je     c001b1d1 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1a8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b1ab:	85 db                	test   ebx,ebx
c001b1ad:	74 22                	je     c001b1d1 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1af:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b1b2:	85 c0                	test   eax,eax
c001b1b4:	74 1b                	je     c001b1d1 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1b6:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b1bc:	83 ec 0c             	sub    esp,0xc
c001b1bf:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b1c1:	50                   	push   eax
c001b1c2:	53                   	push   ebx
c001b1c3:	52                   	push   edx
c001b1c4:	51                   	push   ecx
c001b1c5:	56                   	push   esi
c001b1c6:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b1c9:	83 c4 20             	add    esp,0x20
c001b1cc:	99                   	cdq    
c001b1cd:	5b                   	pop    ebx
c001b1ce:	5e                   	pop    esi
c001b1cf:	5f                   	pop    edi
c001b1d0:	c3                   	ret    
c001b1d1:	5b                   	pop    ebx
c001b1d2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1dc:	5e                   	pop    esi
c001b1dd:	5f                   	pop    edi
c001b1de:	c3                   	ret    

c001b1df <sysShutdown(regs*)>:
c001b1df:	83 ec 0c             	sub    esp,0xc
c001b1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b1e9:	85 c0                	test   eax,eax
c001b1eb:	74 18                	je     c001b205 <sysShutdown(regs*)+0x26>
c001b1ed:	83 f8 01             	cmp    eax,0x1
c001b1f0:	74 38                	je     c001b22a <sysShutdown(regs*)+0x4b>
c001b1f2:	83 f8 02             	cmp    eax,0x2
c001b1f5:	74 24                	je     c001b21b <sysShutdown(regs*)+0x3c>
c001b1f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b201:	83 c4 0c             	add    esp,0xc
c001b204:	c3                   	ret    
c001b205:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001b20a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b20c:	6a 00                	push   0x0
c001b20e:	6a 00                	push   0x0
c001b210:	6a 00                	push   0x0
c001b212:	50                   	push   eax
c001b213:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b216:	83 c4 10             	add    esp,0x10
c001b219:	eb dc                	jmp    c001b1f7 <sysShutdown(regs*)+0x18>
c001b21b:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001b220:	8b 10                	mov    edx,DWORD PTR [eax]
c001b222:	6a 00                	push   0x0
c001b224:	6a 00                	push   0x0
c001b226:	6a 01                	push   0x1
c001b228:	eb e8                	jmp    c001b212 <sysShutdown(regs*)+0x33>
c001b22a:	a1 c0 ff 02 c0       	mov    eax,ds:0xc002ffc0
c001b22f:	85 c0                	test   eax,eax
c001b231:	74 02                	je     c001b235 <sysShutdown(regs*)+0x56>
c001b233:	ff d0                	call   eax
c001b235:	31 c0                	xor    eax,eax
c001b237:	31 d2                	xor    edx,edx
c001b239:	83 c4 0c             	add    esp,0xc
c001b23c:	c3                   	ret    

c001b23d <sysCallRealpath(regs*)>:
c001b23d:	83 ec 0c             	sub    esp,0xc
c001b240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b244:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b247:	85 d2                	test   edx,edx
c001b249:	74 07                	je     c001b252 <sysCallRealpath(regs*)+0x15>
c001b24b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b24e:	85 c0                	test   eax,eax
c001b250:	75 0b                	jne    c001b25d <sysCallRealpath(regs*)+0x20>
c001b252:	b8 01 00 00 00       	mov    eax,0x1
c001b257:	31 d2                	xor    edx,edx
c001b259:	83 c4 0c             	add    esp,0xc
c001b25c:	c3                   	ret    
c001b25d:	51                   	push   ecx
c001b25e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b264:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b267:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b26d:	51                   	push   ecx
c001b26e:	52                   	push   edx
c001b26f:	50                   	push   eax
c001b270:	e8 e1 77 ff ff       	call   c0012a56 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b275:	83 c4 10             	add    esp,0x10
c001b278:	31 c0                	xor    eax,eax
c001b27a:	31 d2                	xor    edx,edx
c001b27c:	83 c4 0c             	add    esp,0xc
c001b27f:	c3                   	ret    

c001b280 <sysCallReadDir(regs*)>:
c001b280:	53                   	push   ebx
c001b281:	83 ec 18             	sub    esp,0x18
c001b284:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b288:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b28b:	83 f8 02             	cmp    eax,0x2
c001b28e:	76 60                	jbe    c001b2f0 <sysCallReadDir(regs*)+0x70>
c001b290:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b297:	77 48                	ja     c001b2e1 <sysCallReadDir(regs*)+0x61>
c001b299:	83 ec 0c             	sub    esp,0xc
c001b29c:	50                   	push   eax
c001b29d:	e8 fd 5d ff ff       	call   c001109f <getFromFileDescriptor(int)>
c001b2a2:	83 c4 10             	add    esp,0x10
c001b2a5:	85 c0                	test   eax,eax
c001b2a7:	74 38                	je     c001b2e1 <sysCallReadDir(regs*)+0x61>
c001b2a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b2b1:	83 ec 0c             	sub    esp,0xc
c001b2b4:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2b6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b2ba:	51                   	push   ecx
c001b2bb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2be:	6a 00                	push   0x0
c001b2c0:	68 10 01 00 00       	push   0x110
c001b2c5:	50                   	push   eax
c001b2c6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b2c9:	83 c4 20             	add    esp,0x20
c001b2cc:	85 c0                	test   eax,eax
c001b2ce:	74 29                	je     c001b2f9 <sysCallReadDir(regs*)+0x79>
c001b2d0:	83 f8 07             	cmp    eax,0x7
c001b2d3:	74 1b                	je     c001b2f0 <sysCallReadDir(regs*)+0x70>
c001b2d5:	b8 02 00 00 00       	mov    eax,0x2
c001b2da:	31 d2                	xor    edx,edx
c001b2dc:	83 c4 18             	add    esp,0x18
c001b2df:	5b                   	pop    ebx
c001b2e0:	c3                   	ret    
c001b2e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2e6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2eb:	83 c4 18             	add    esp,0x18
c001b2ee:	5b                   	pop    ebx
c001b2ef:	c3                   	ret    
c001b2f0:	b8 01 00 00 00       	mov    eax,0x1
c001b2f5:	31 d2                	xor    edx,edx
c001b2f7:	eb e3                	jmp    c001b2dc <sysCallReadDir(regs*)+0x5c>
c001b2f9:	31 c0                	xor    eax,eax
c001b2fb:	31 d2                	xor    edx,edx
c001b2fd:	eb dd                	jmp    c001b2dc <sysCallReadDir(regs*)+0x5c>

c001b2ff <sysCallIsATTY(regs*)>:
c001b2ff:	83 ec 0c             	sub    esp,0xc
c001b302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b306:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b309:	83 f8 02             	cmp    eax,0x2
c001b30c:	76 07                	jbe    c001b315 <sysCallIsATTY(regs*)+0x16>
c001b30e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b313:	75 26                	jne    c001b33b <sysCallIsATTY(regs*)+0x3c>
c001b315:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b31a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b31d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b323:	85 c0                	test   eax,eax
c001b325:	74 24                	je     c001b34b <sysCallIsATTY(regs*)+0x4c>
c001b327:	83 ec 0c             	sub    esp,0xc
c001b32a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b32c:	50                   	push   eax
c001b32d:	ff 12                	call   DWORD PTR [edx]
c001b32f:	31 d2                	xor    edx,edx
c001b331:	0f b6 c0             	movzx  eax,al
c001b334:	83 c4 10             	add    esp,0x10
c001b337:	83 c4 0c             	add    esp,0xc
c001b33a:	c3                   	ret    
c001b33b:	83 ec 0c             	sub    esp,0xc
c001b33e:	50                   	push   eax
c001b33f:	e8 5b 5d ff ff       	call   c001109f <getFromFileDescriptor(int)>
c001b344:	83 c4 10             	add    esp,0x10
c001b347:	85 c0                	test   eax,eax
c001b349:	75 dc                	jne    c001b327 <sysCallIsATTY(regs*)+0x28>
c001b34b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b350:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b355:	83 c4 0c             	add    esp,0xc
c001b358:	c3                   	ret    

c001b359 <sysCallSeek(regs*)>:
c001b359:	53                   	push   ebx
c001b35a:	83 ec 08             	sub    esp,0x8
c001b35d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b361:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b364:	8d 50 fd             	lea    edx,[eax-0x3]
c001b367:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b36d:	77 32                	ja     c001b3a1 <sysCallSeek(regs*)+0x48>
c001b36f:	83 ec 0c             	sub    esp,0xc
c001b372:	50                   	push   eax
c001b373:	e8 27 5d ff ff       	call   c001109f <getFromFileDescriptor(int)>
c001b378:	83 c4 0c             	add    esp,0xc
c001b37b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b37e:	31 db                	xor    ebx,ebx
c001b380:	53                   	push   ebx
c001b381:	51                   	push   ecx
c001b382:	50                   	push   eax
c001b383:	e8 9a 79 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001b388:	83 c4 10             	add    esp,0x10
c001b38b:	85 c0                	test   eax,eax
c001b38d:	0f 95 c0             	setne  al
c001b390:	31 d2                	xor    edx,edx
c001b392:	0f b6 c0             	movzx  eax,al
c001b395:	f7 d8                	neg    eax
c001b397:	83 d2 00             	adc    edx,0x0
c001b39a:	83 c4 08             	add    esp,0x8
c001b39d:	f7 da                	neg    edx
c001b39f:	5b                   	pop    ebx
c001b3a0:	c3                   	ret    
c001b3a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3ab:	83 c4 08             	add    esp,0x8
c001b3ae:	5b                   	pop    ebx
c001b3af:	c3                   	ret    

c001b3b0 <sysCallTell(regs*)>:
c001b3b0:	53                   	push   ebx
c001b3b1:	83 ec 08             	sub    esp,0x8
c001b3b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3bb:	83 f8 02             	cmp    eax,0x2
c001b3be:	76 4d                	jbe    c001b40d <sysCallTell(regs*)+0x5d>
c001b3c0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3c5:	76 19                	jbe    c001b3e0 <sysCallTell(regs*)+0x30>
c001b3c7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b3ca:	31 d2                	xor    edx,edx
c001b3cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3d9:	31 c0                	xor    eax,eax
c001b3db:	83 c4 08             	add    esp,0x8
c001b3de:	5b                   	pop    ebx
c001b3df:	c3                   	ret    
c001b3e0:	83 ec 0c             	sub    esp,0xc
c001b3e3:	50                   	push   eax
c001b3e4:	e8 b6 5c ff ff       	call   c001109f <getFromFileDescriptor(int)>
c001b3e9:	5a                   	pop    edx
c001b3ea:	59                   	pop    ecx
c001b3eb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b3ee:	50                   	push   eax
c001b3ef:	e8 84 79 ff ff       	call   c0012d78 <File::tell(unsigned long long*)>
c001b3f4:	83 c4 10             	add    esp,0x10
c001b3f7:	85 c0                	test   eax,eax
c001b3f9:	0f 95 c0             	setne  al
c001b3fc:	31 d2                	xor    edx,edx
c001b3fe:	0f b6 c0             	movzx  eax,al
c001b401:	f7 d8                	neg    eax
c001b403:	83 d2 00             	adc    edx,0x0
c001b406:	83 c4 08             	add    esp,0x8
c001b409:	f7 da                	neg    edx
c001b40b:	5b                   	pop    ebx
c001b40c:	c3                   	ret    
c001b40d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b412:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b417:	83 c4 08             	add    esp,0x8
c001b41a:	5b                   	pop    ebx
c001b41b:	c3                   	ret    

c001b41c <sysCallSize(regs*)>:
c001b41c:	53                   	push   ebx
c001b41d:	83 ec 18             	sub    esp,0x18
c001b420:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b424:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b427:	83 f8 02             	cmp    eax,0x2
c001b42a:	76 53                	jbe    c001b47f <sysCallSize(regs*)+0x63>
c001b42c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b431:	76 19                	jbe    c001b44c <sysCallSize(regs*)+0x30>
c001b433:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b436:	31 d2                	xor    edx,edx
c001b438:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b43e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b445:	31 c0                	xor    eax,eax
c001b447:	83 c4 18             	add    esp,0x18
c001b44a:	5b                   	pop    ebx
c001b44b:	c3                   	ret    
c001b44c:	83 ec 0c             	sub    esp,0xc
c001b44f:	50                   	push   eax
c001b450:	e8 4a 5c ff ff       	call   c001109f <getFromFileDescriptor(int)>
c001b455:	83 c4 0c             	add    esp,0xc
c001b458:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b45c:	52                   	push   edx
c001b45d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b460:	50                   	push   eax
c001b461:	e8 aa 7a ff ff       	call   c0012f10 <File::stat(unsigned long long*, bool*)>
c001b466:	83 c4 10             	add    esp,0x10
c001b469:	85 c0                	test   eax,eax
c001b46b:	0f 95 c0             	setne  al
c001b46e:	31 d2                	xor    edx,edx
c001b470:	0f b6 c0             	movzx  eax,al
c001b473:	f7 d8                	neg    eax
c001b475:	83 d2 00             	adc    edx,0x0
c001b478:	83 c4 18             	add    esp,0x18
c001b47b:	f7 da                	neg    edx
c001b47d:	5b                   	pop    ebx
c001b47e:	c3                   	ret    
c001b47f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b484:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b489:	83 c4 18             	add    esp,0x18
c001b48c:	5b                   	pop    ebx
c001b48d:	c3                   	ret    

c001b48e <sysCallSizeFromFilename(regs*)>:
c001b48e:	57                   	push   edi
c001b48f:	56                   	push   esi
c001b490:	53                   	push   ebx
c001b491:	83 ec 20             	sub    esp,0x20
c001b494:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b498:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b49b:	83 fb 02             	cmp    ebx,0x2
c001b49e:	0f 86 88 00 00 00    	jbe    c001b52c <sysCallSizeFromFilename(regs*)+0x9e>
c001b4a4:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b4aa:	76 1b                	jbe    c001b4c7 <sysCallSizeFromFilename(regs*)+0x39>
c001b4ac:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b4af:	31 d2                	xor    edx,edx
c001b4b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4be:	83 c4 20             	add    esp,0x20
c001b4c1:	31 c0                	xor    eax,eax
c001b4c3:	5b                   	pop    ebx
c001b4c4:	5e                   	pop    esi
c001b4c5:	5f                   	pop    edi
c001b4c6:	c3                   	ret    
c001b4c7:	83 ec 0c             	sub    esp,0xc
c001b4ca:	68 14 01 00 00       	push   0x114
c001b4cf:	e8 c5 40 ff ff       	call   c000f599 <malloc>
c001b4d4:	83 c4 0c             	add    esp,0xc
c001b4d7:	89 c7                	mov    edi,eax
c001b4d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4de:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4e1:	53                   	push   ebx
c001b4e2:	57                   	push   edi
c001b4e3:	e8 18 77 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001b4e8:	83 c4 0c             	add    esp,0xc
c001b4eb:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b4ef:	50                   	push   eax
c001b4f0:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b4f3:	57                   	push   edi
c001b4f4:	e8 17 7a ff ff       	call   c0012f10 <File::stat(unsigned long long*, bool*)>
c001b4f9:	83 c4 10             	add    esp,0x10
c001b4fc:	85 ff                	test   edi,edi
c001b4fe:	74 14                	je     c001b514 <sysCallSizeFromFilename(regs*)+0x86>
c001b500:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b504:	8b 17                	mov    edx,DWORD PTR [edi]
c001b506:	83 ec 0c             	sub    esp,0xc
c001b509:	57                   	push   edi
c001b50a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b50d:	83 c4 10             	add    esp,0x10
c001b510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b514:	85 c0                	test   eax,eax
c001b516:	0f 95 c0             	setne  al
c001b519:	31 d2                	xor    edx,edx
c001b51b:	0f b6 c0             	movzx  eax,al
c001b51e:	f7 d8                	neg    eax
c001b520:	83 d2 00             	adc    edx,0x0
c001b523:	83 c4 20             	add    esp,0x20
c001b526:	f7 da                	neg    edx
c001b528:	5b                   	pop    ebx
c001b529:	5e                   	pop    esi
c001b52a:	5f                   	pop    edi
c001b52b:	c3                   	ret    
c001b52c:	83 c4 20             	add    esp,0x20
c001b52f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b534:	5b                   	pop    ebx
c001b535:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b53a:	5e                   	pop    esi
c001b53b:	5f                   	pop    edi
c001b53c:	c3                   	ret    

c001b53d <sysCallClose(regs*)>:
c001b53d:	53                   	push   ebx
c001b53e:	83 ec 08             	sub    esp,0x8
c001b541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b545:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b548:	83 f8 02             	cmp    eax,0x2
c001b54b:	76 41                	jbe    c001b58e <sysCallClose(regs*)+0x51>
c001b54d:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b553:	83 fa 01             	cmp    edx,0x1
c001b556:	76 2d                	jbe    c001b585 <sysCallClose(regs*)+0x48>
c001b558:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b55d:	77 2f                	ja     c001b58e <sysCallClose(regs*)+0x51>
c001b55f:	83 ec 0c             	sub    esp,0xc
c001b562:	50                   	push   eax
c001b563:	e8 37 5b ff ff       	call   c001109f <getFromFileDescriptor(int)>
c001b568:	89 c3                	mov    ebx,eax
c001b56a:	89 04 24             	mov    DWORD PTR [esp],eax
c001b56d:	e8 50 77 ff ff       	call   c0012cc2 <File::close()>
c001b572:	83 c4 10             	add    esp,0x10
c001b575:	85 db                	test   ebx,ebx
c001b577:	74 0c                	je     c001b585 <sysCallClose(regs*)+0x48>
c001b579:	83 ec 0c             	sub    esp,0xc
c001b57c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b57e:	53                   	push   ebx
c001b57f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b582:	83 c4 10             	add    esp,0x10
c001b585:	31 c0                	xor    eax,eax
c001b587:	31 d2                	xor    edx,edx
c001b589:	83 c4 08             	add    esp,0x8
c001b58c:	5b                   	pop    ebx
c001b58d:	c3                   	ret    
c001b58e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b593:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b598:	83 c4 08             	add    esp,0x8
c001b59b:	5b                   	pop    ebx
c001b59c:	c3                   	ret    

c001b59d <sysCallOpenDir(regs*)>:
c001b59d:	56                   	push   esi
c001b59e:	53                   	push   ebx
c001b59f:	53                   	push   ebx
c001b5a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5a4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b5a7:	85 f6                	test   esi,esi
c001b5a9:	74 59                	je     c001b604 <sysCallOpenDir(regs*)+0x67>
c001b5ab:	83 ec 0c             	sub    esp,0xc
c001b5ae:	68 14 01 00 00       	push   0x114
c001b5b3:	e8 e1 3f ff ff       	call   c000f599 <malloc>
c001b5b8:	83 c4 0c             	add    esp,0xc
c001b5bb:	89 c6                	mov    esi,eax
c001b5bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5c2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5c8:	56                   	push   esi
c001b5c9:	e8 de 7a ff ff       	call   c00130ac <Directory::Directory(char const*, Process*)>
c001b5ce:	83 c4 10             	add    esp,0x10
c001b5d1:	85 f6                	test   esi,esi
c001b5d3:	74 2f                	je     c001b604 <sysCallOpenDir(regs*)+0x67>
c001b5d5:	83 ec 0c             	sub    esp,0xc
c001b5d8:	56                   	push   esi
c001b5d9:	e8 32 7b ff ff       	call   c0013110 <Directory::open()>
c001b5de:	83 c4 10             	add    esp,0x10
c001b5e1:	85 c0                	test   eax,eax
c001b5e3:	75 1f                	jne    c001b604 <sysCallOpenDir(regs*)+0x67>
c001b5e5:	83 ec 0c             	sub    esp,0xc
c001b5e8:	56                   	push   esi
c001b5e9:	e8 bc 57 ff ff       	call   c0010daa <UnixFile::getFileDescriptor()>
c001b5ee:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b5f1:	83 c4 10             	add    esp,0x10
c001b5f4:	89 02                	mov    DWORD PTR [edx],eax
c001b5f6:	c1 f8 1f             	sar    eax,0x1f
c001b5f9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b5fc:	31 c0                	xor    eax,eax
c001b5fe:	59                   	pop    ecx
c001b5ff:	31 d2                	xor    edx,edx
c001b601:	5b                   	pop    ebx
c001b602:	5e                   	pop    esi
c001b603:	c3                   	ret    
c001b604:	59                   	pop    ecx
c001b605:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b60a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b60f:	5b                   	pop    ebx
c001b610:	5e                   	pop    esi
c001b611:	c3                   	ret    

c001b612 <sysCallCloseDir(regs*)>:
c001b612:	53                   	push   ebx
c001b613:	83 ec 08             	sub    esp,0x8
c001b616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b61a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b61d:	8d 50 fd             	lea    edx,[eax-0x3]
c001b620:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b626:	77 2f                	ja     c001b657 <sysCallCloseDir(regs*)+0x45>
c001b628:	83 ec 0c             	sub    esp,0xc
c001b62b:	50                   	push   eax
c001b62c:	e8 6e 5a ff ff       	call   c001109f <getFromFileDescriptor(int)>
c001b631:	89 c3                	mov    ebx,eax
c001b633:	89 04 24             	mov    DWORD PTR [esp],eax
c001b636:	e8 31 7b ff ff       	call   c001316c <Directory::close()>
c001b63b:	83 c4 10             	add    esp,0x10
c001b63e:	85 db                	test   ebx,ebx
c001b640:	74 0c                	je     c001b64e <sysCallCloseDir(regs*)+0x3c>
c001b642:	83 ec 0c             	sub    esp,0xc
c001b645:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b647:	53                   	push   ebx
c001b648:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b64b:	83 c4 10             	add    esp,0x10
c001b64e:	31 c0                	xor    eax,eax
c001b650:	31 d2                	xor    edx,edx
c001b652:	83 c4 08             	add    esp,0x8
c001b655:	5b                   	pop    ebx
c001b656:	c3                   	ret    
c001b657:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b65c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b661:	83 c4 08             	add    esp,0x8
c001b664:	5b                   	pop    ebx
c001b665:	c3                   	ret    

c001b666 <sysCallMakeDir(regs*)>:
c001b666:	56                   	push   esi
c001b667:	53                   	push   ebx
c001b668:	83 ec 10             	sub    esp,0x10
c001b66b:	68 14 01 00 00       	push   0x114
c001b670:	e8 24 3f ff ff       	call   c000f599 <malloc>
c001b675:	83 c4 0c             	add    esp,0xc
c001b678:	89 c3                	mov    ebx,eax
c001b67a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b67f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b682:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b686:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b689:	53                   	push   ebx
c001b68a:	e8 1d 7a ff ff       	call   c00130ac <Directory::Directory(char const*, Process*)>
c001b68f:	83 c4 10             	add    esp,0x10
c001b692:	85 db                	test   ebx,ebx
c001b694:	74 32                	je     c001b6c8 <sysCallMakeDir(regs*)+0x62>
c001b696:	83 ec 0c             	sub    esp,0xc
c001b699:	53                   	push   ebx
c001b69a:	e8 51 7c ff ff       	call   c00132f0 <Directory::create()>
c001b69f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6a2:	89 c6                	mov    esi,eax
c001b6a4:	e8 c3 7a ff ff       	call   c001316c <Directory::close()>
c001b6a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6b1:	83 c4 10             	add    esp,0x10
c001b6b4:	31 c0                	xor    eax,eax
c001b6b6:	59                   	pop    ecx
c001b6b7:	85 f6                	test   esi,esi
c001b6b9:	5b                   	pop    ebx
c001b6ba:	0f 95 c0             	setne  al
c001b6bd:	5e                   	pop    esi
c001b6be:	31 d2                	xor    edx,edx
c001b6c0:	f7 d8                	neg    eax
c001b6c2:	83 d2 00             	adc    edx,0x0
c001b6c5:	f7 da                	neg    edx
c001b6c7:	c3                   	ret    
c001b6c8:	59                   	pop    ecx
c001b6c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6ce:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6d3:	5b                   	pop    ebx
c001b6d4:	5e                   	pop    esi
c001b6d5:	c3                   	ret    

c001b6d6 <sysCallWait(regs*)>:
c001b6d6:	83 ec 10             	sub    esp,0x10
c001b6d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6dd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b6e0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6e3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b6e6:	e8 af 24 00 00       	call   c001db9a <waitTask(int, int*, int)>
c001b6eb:	83 c4 1c             	add    esp,0x1c
c001b6ee:	99                   	cdq    
c001b6ef:	c3                   	ret    

c001b6f0 <sysCallNotImpl(regs*)>:
c001b6f0:	83 ec 18             	sub    esp,0x18
c001b6f3:	68 99 b8 02 c0       	push   0xc002b899
c001b6f8:	e8 10 e7 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001b6fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b702:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b707:	83 c4 1c             	add    esp,0x1c
c001b70a:	c3                   	ret    

c001b70b <sysPanic(regs*)>:
c001b70b:	83 ec 18             	sub    esp,0x18
c001b70e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b712:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b715:	e8 f3 e6 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001b71a:	b8 01 00 00 00       	mov    eax,0x1
c001b71f:	31 d2                	xor    edx,edx
c001b721:	83 c4 1c             	add    esp,0x1c
c001b724:	c3                   	ret    

c001b725 <sysCallRmdir(regs*)>:
c001b725:	56                   	push   esi
c001b726:	53                   	push   ebx
c001b727:	83 ec 20             	sub    esp,0x20
c001b72a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b72e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b731:	68 14 01 00 00       	push   0x114
c001b736:	e8 5e 3e ff ff       	call   c000f599 <malloc>
c001b73b:	83 c4 0c             	add    esp,0xc
c001b73e:	89 c3                	mov    ebx,eax
c001b740:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b745:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b748:	56                   	push   esi
c001b749:	53                   	push   ebx
c001b74a:	e8 b1 74 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001b74f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b752:	e8 85 76 ff ff       	call   c0012ddc <File::unlink()>
c001b757:	83 c4 10             	add    esp,0x10
c001b75a:	85 db                	test   ebx,ebx
c001b75c:	74 14                	je     c001b772 <sysCallRmdir(regs*)+0x4d>
c001b75e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b762:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b764:	83 ec 0c             	sub    esp,0xc
c001b767:	53                   	push   ebx
c001b768:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b76b:	83 c4 10             	add    esp,0x10
c001b76e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b772:	85 c0                	test   eax,eax
c001b774:	0f 95 c0             	setne  al
c001b777:	31 d2                	xor    edx,edx
c001b779:	0f b6 c0             	movzx  eax,al
c001b77c:	f7 d8                	neg    eax
c001b77e:	83 d2 00             	adc    edx,0x0
c001b781:	83 c4 14             	add    esp,0x14
c001b784:	f7 da                	neg    edx
c001b786:	5b                   	pop    ebx
c001b787:	5e                   	pop    esi
c001b788:	c3                   	ret    

c001b789 <sysCallUnlink(regs*)>:
c001b789:	56                   	push   esi
c001b78a:	53                   	push   ebx
c001b78b:	83 ec 20             	sub    esp,0x20
c001b78e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b792:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b795:	68 14 01 00 00       	push   0x114
c001b79a:	e8 fa 3d ff ff       	call   c000f599 <malloc>
c001b79f:	83 c4 0c             	add    esp,0xc
c001b7a2:	89 c3                	mov    ebx,eax
c001b7a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7a9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7ac:	56                   	push   esi
c001b7ad:	53                   	push   ebx
c001b7ae:	e8 4d 74 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001b7b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7b6:	e8 21 76 ff ff       	call   c0012ddc <File::unlink()>
c001b7bb:	83 c4 10             	add    esp,0x10
c001b7be:	85 db                	test   ebx,ebx
c001b7c0:	74 14                	je     c001b7d6 <sysCallUnlink(regs*)+0x4d>
c001b7c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7c6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7c8:	83 ec 0c             	sub    esp,0xc
c001b7cb:	53                   	push   ebx
c001b7cc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7cf:	83 c4 10             	add    esp,0x10
c001b7d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7d6:	85 c0                	test   eax,eax
c001b7d8:	0f 95 c0             	setne  al
c001b7db:	31 d2                	xor    edx,edx
c001b7dd:	0f b6 c0             	movzx  eax,al
c001b7e0:	f7 d8                	neg    eax
c001b7e2:	83 d2 00             	adc    edx,0x0
c001b7e5:	83 c4 14             	add    esp,0x14
c001b7e8:	f7 da                	neg    edx
c001b7ea:	5b                   	pop    ebx
c001b7eb:	5e                   	pop    esi
c001b7ec:	c3                   	ret    

c001b7ed <sysCallGetArgv(regs*)>:
c001b7ed:	83 ec 0c             	sub    esp,0xc
c001b7f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7f4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b7f7:	85 c0                	test   eax,eax
c001b7f9:	78 2b                	js     c001b826 <sysCallGetArgv(regs*)+0x39>
c001b7fb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b801:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b804:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b80a:	7d 1a                	jge    c001b826 <sysCallGetArgv(regs*)+0x39>
c001b80c:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b813:	85 c0                	test   eax,eax
c001b815:	74 17                	je     c001b82e <sysCallGetArgv(regs*)+0x41>
c001b817:	83 ec 08             	sub    esp,0x8
c001b81a:	50                   	push   eax
c001b81b:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b81e:	e8 e9 4f fe ff       	call   c000080c <strcpy>
c001b823:	83 c4 10             	add    esp,0x10
c001b826:	31 c0                	xor    eax,eax
c001b828:	31 d2                	xor    edx,edx
c001b82a:	83 c4 0c             	add    esp,0xc
c001b82d:	c3                   	ret    
c001b82e:	b8 01 00 00 00       	mov    eax,0x1
c001b833:	31 d2                	xor    edx,edx
c001b835:	83 c4 0c             	add    esp,0xc
c001b838:	c3                   	ret    

c001b839 <sysCallTTYName(regs*)>:
c001b839:	56                   	push   esi
c001b83a:	53                   	push   ebx
c001b83b:	53                   	push   ebx
c001b83c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b840:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b843:	85 c0                	test   eax,eax
c001b845:	74 5f                	je     c001b8a6 <sysCallTTYName(regs*)+0x6d>
c001b847:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b84a:	83 f8 02             	cmp    eax,0x2
c001b84d:	77 3e                	ja     c001b88d <sysCallTTYName(regs*)+0x54>
c001b84f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b854:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b857:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b85d:	85 db                	test   ebx,ebx
c001b85f:	74 45                	je     c001b8a6 <sysCallTTYName(regs*)+0x6d>
c001b861:	83 ec 0c             	sub    esp,0xc
c001b864:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b866:	53                   	push   ebx
c001b867:	ff 10                	call   DWORD PTR [eax]
c001b869:	83 c4 10             	add    esp,0x10
c001b86c:	84 c0                	test   al,al
c001b86e:	74 41                	je     c001b8b1 <sysCallTTYName(regs*)+0x78>
c001b870:	83 ec 08             	sub    esp,0x8
c001b873:	81 c3 82 00 00 00    	add    ebx,0x82
c001b879:	53                   	push   ebx
c001b87a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b87d:	e8 8a 4f fe ff       	call   c000080c <strcpy>
c001b882:	83 c4 10             	add    esp,0x10
c001b885:	31 c0                	xor    eax,eax
c001b887:	59                   	pop    ecx
c001b888:	31 d2                	xor    edx,edx
c001b88a:	5b                   	pop    ebx
c001b88b:	5e                   	pop    esi
c001b88c:	c3                   	ret    
c001b88d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b892:	74 bb                	je     c001b84f <sysCallTTYName(regs*)+0x16>
c001b894:	83 ec 0c             	sub    esp,0xc
c001b897:	50                   	push   eax
c001b898:	e8 02 58 ff ff       	call   c001109f <getFromFileDescriptor(int)>
c001b89d:	83 c4 10             	add    esp,0x10
c001b8a0:	89 c3                	mov    ebx,eax
c001b8a2:	85 db                	test   ebx,ebx
c001b8a4:	75 bb                	jne    c001b861 <sysCallTTYName(regs*)+0x28>
c001b8a6:	59                   	pop    ecx
c001b8a7:	b8 01 00 00 00       	mov    eax,0x1
c001b8ac:	31 d2                	xor    edx,edx
c001b8ae:	5b                   	pop    ebx
c001b8af:	5e                   	pop    esi
c001b8b0:	c3                   	ret    
c001b8b1:	59                   	pop    ecx
c001b8b2:	b8 02 00 00 00       	mov    eax,0x2
c001b8b7:	31 d2                	xor    edx,edx
c001b8b9:	5b                   	pop    ebx
c001b8ba:	5e                   	pop    esi
c001b8bb:	c3                   	ret    

c001b8bc <sysCallUSleep(regs*)>:
c001b8bc:	83 ec 14             	sub    esp,0x14
c001b8bf:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b8c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8c8:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b8cf:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b8d2:	01 ca                	add    edx,ecx
c001b8d4:	52                   	push   edx
c001b8d5:	50                   	push   eax
c001b8d6:	e8 96 23 00 00       	call   c001dc71 <nanoSleep(unsigned long long)>
c001b8db:	31 c0                	xor    eax,eax
c001b8dd:	31 d2                	xor    edx,edx
c001b8df:	83 c4 1c             	add    esp,0x1c
c001b8e2:	c3                   	ret    

c001b8e3 <sysCallSpawn(regs*)>:
c001b8e3:	56                   	push   esi
c001b8e4:	53                   	push   ebx
c001b8e5:	50                   	push   eax
c001b8e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8ea:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b8ed:	85 c0                	test   eax,eax
c001b8ef:	75 08                	jne    c001b8f9 <sysCallSpawn(regs*)+0x16>
c001b8f1:	59                   	pop    ecx
c001b8f2:	31 c0                	xor    eax,eax
c001b8f4:	31 d2                	xor    edx,edx
c001b8f6:	5b                   	pop    ebx
c001b8f7:	5e                   	pop    esi
c001b8f8:	c3                   	ret    
c001b8f9:	83 ec 0c             	sub    esp,0xc
c001b8fc:	68 3f 07 00 00       	push   0x73f
c001b901:	e8 93 3c ff ff       	call   c000f599 <malloc>
c001b906:	83 c4 10             	add    esp,0x10
c001b909:	89 c6                	mov    esi,eax
c001b90b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b90e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b911:	85 c0                	test   eax,eax
c001b913:	75 32                	jne    c001b947 <sysCallSpawn(regs*)+0x64>
c001b915:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b91a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b91d:	52                   	push   edx
c001b91e:	50                   	push   eax
c001b91f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b922:	56                   	push   esi
c001b923:	e8 6e 1a 00 00       	call   c001d396 <Process::Process(char const*, Process*, char**)>
c001b928:	83 c4 10             	add    esp,0x10
c001b92b:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b932:	75 bd                	jne    c001b8f1 <sysCallSpawn(regs*)+0xe>
c001b934:	83 ec 0c             	sub    esp,0xc
c001b937:	56                   	push   esi
c001b938:	e8 3b 1f 00 00       	call   c001d878 <Process::createUserThread()>
c001b93d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b93f:	83 c4 10             	add    esp,0x10
c001b942:	99                   	cdq    
c001b943:	59                   	pop    ecx
c001b944:	5b                   	pop    ebx
c001b945:	5e                   	pop    esi
c001b946:	c3                   	ret    
c001b947:	31 c0                	xor    eax,eax
c001b949:	eb d2                	jmp    c001b91d <sysCallSpawn(regs*)+0x3a>

c001b94b <sysCallGetEnv(regs*)>:
c001b94b:	57                   	push   edi
c001b94c:	56                   	push   esi
c001b94d:	53                   	push   ebx
c001b94e:	83 ec 1c             	sub    esp,0x1c
c001b951:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b955:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b95a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b95d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b960:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b963:	e8 f1 e3 ff ff       	call   c0019d59 <Krnl::getProcessTotalEnvCount(Process*)>
c001b968:	83 c4 10             	add    esp,0x10
c001b96b:	39 c7                	cmp    edi,eax
c001b96d:	7c 14                	jl     c001b983 <sysCallGetEnv(regs*)+0x38>
c001b96f:	85 f6                	test   esi,esi
c001b971:	75 0b                	jne    c001b97e <sysCallGetEnv(regs*)+0x33>
c001b973:	83 c4 10             	add    esp,0x10
c001b976:	31 c0                	xor    eax,eax
c001b978:	5b                   	pop    ebx
c001b979:	31 d2                	xor    edx,edx
c001b97b:	5e                   	pop    esi
c001b97c:	5f                   	pop    edi
c001b97d:	c3                   	ret    
c001b97e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b981:	eb f0                	jmp    c001b973 <sysCallGetEnv(regs*)+0x28>
c001b983:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b987:	52                   	push   edx
c001b988:	57                   	push   edi
c001b989:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b98f:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b992:	50                   	push   eax
c001b993:	e8 e1 e3 ff ff       	call   c0019d79 <Krnl::getProcessEnvPair(Process*, int)>
c001b998:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b99b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b99f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b9a3:	83 c4 0c             	add    esp,0xc
c001b9a6:	85 c9                	test   ecx,ecx
c001b9a8:	75 23                	jne    c001b9cd <sysCallGetEnv(regs*)+0x82>
c001b9aa:	83 ec 0c             	sub    esp,0xc
c001b9ad:	50                   	push   eax
c001b9ae:	e8 b9 4d fe ff       	call   c000076c <strlen>
c001b9b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b9b6:	89 c3                	mov    ebx,eax
c001b9b8:	e8 af 4d fe ff       	call   c000076c <strlen>
c001b9bd:	83 c4 10             	add    esp,0x10
c001b9c0:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b9c4:	83 c4 10             	add    esp,0x10
c001b9c7:	31 d2                	xor    edx,edx
c001b9c9:	5b                   	pop    ebx
c001b9ca:	5e                   	pop    esi
c001b9cb:	5f                   	pop    edi
c001b9cc:	c3                   	ret    
c001b9cd:	83 ec 08             	sub    esp,0x8
c001b9d0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9d3:	50                   	push   eax
c001b9d4:	56                   	push   esi
c001b9d5:	e8 32 4e fe ff       	call   c000080c <strcpy>
c001b9da:	58                   	pop    eax
c001b9db:	5a                   	pop    edx
c001b9dc:	68 b3 b8 02 c0       	push   0xc002b8b3
c001b9e1:	56                   	push   esi
c001b9e2:	e8 65 4f fe ff       	call   c000094c <strcat>
c001b9e7:	59                   	pop    ecx
c001b9e8:	5b                   	pop    ebx
c001b9e9:	57                   	push   edi
c001b9ea:	56                   	push   esi
c001b9eb:	e8 5c 4f fe ff       	call   c000094c <strcat>
c001b9f0:	83 c4 10             	add    esp,0x10
c001b9f3:	e9 7b ff ff ff       	jmp    c001b973 <sysCallGetEnv(regs*)+0x28>

c001b9f8 <sysAppSettings(regs*)>:
c001b9f8:	57                   	push   edi
c001b9f9:	56                   	push   esi
c001b9fa:	56                   	push   esi
c001b9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ff:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba02:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001ba08:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ba0d:	66 3d c0 09          	cmp    ax,0x9c0
c001ba11:	75 2e                	jne    c001ba41 <sysAppSettings(regs*)+0x49>
c001ba13:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001ba19:	83 e0 1f             	and    eax,0x1f
c001ba1c:	3c 01                	cmp    al,0x1
c001ba1e:	74 2c                	je     c001ba4c <sysAppSettings(regs*)+0x54>
c001ba20:	3c 07                	cmp    al,0x7
c001ba22:	0f 84 b3 00 00 00    	je     c001badb <sysAppSettings(regs*)+0xe3>
c001ba28:	84 c0                	test   al,al
c001ba2a:	0f 84 d2 00 00 00    	je     c001bb02 <sysAppSettings(regs*)+0x10a>
c001ba30:	3c 08                	cmp    al,0x8
c001ba32:	74 63                	je     c001ba97 <sysAppSettings(regs*)+0x9f>
c001ba34:	59                   	pop    ecx
c001ba35:	0f b6 c0             	movzx  eax,al
c001ba38:	5e                   	pop    esi
c001ba39:	05 e8 03 00 00       	add    eax,0x3e8
c001ba3e:	5f                   	pop    edi
c001ba3f:	99                   	cdq    
c001ba40:	c3                   	ret    
c001ba41:	b8 01 00 00 00       	mov    eax,0x1
c001ba46:	59                   	pop    ecx
c001ba47:	31 d2                	xor    edx,edx
c001ba49:	5e                   	pop    esi
c001ba4a:	5f                   	pop    edi
c001ba4b:	c3                   	ret    
c001ba4c:	50                   	push   eax
c001ba4d:	68 00 01 00 00       	push   0x100
c001ba52:	6a 00                	push   0x0
c001ba54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba59:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba5c:	83 c0 0c             	add    eax,0xc
c001ba5f:	50                   	push   eax
c001ba60:	e8 eb 4c fe ff       	call   c0000750 <memset>
c001ba65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba6a:	b9 ff 00 00 00       	mov    ecx,0xff
c001ba6f:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001ba72:	83 c7 0c             	add    edi,0xc
c001ba75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba7c:	5a                   	pop    edx
c001ba7d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba80:	59                   	pop    ecx
c001ba81:	8d 50 0c             	lea    edx,[eax+0xc]
c001ba84:	52                   	push   edx
c001ba85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ba8b:	e8 3a 47 ff ff       	call   c00101ca <VgaText::setTitle(char*)>
c001ba90:	83 c4 10             	add    esp,0x10
c001ba93:	31 c0                	xor    eax,eax
c001ba95:	eb af                	jmp    c001ba46 <sysAppSettings(regs*)+0x4e>
c001ba97:	83 ec 08             	sub    esp,0x8
c001ba9a:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001baa0:	83 e0 0f             	and    eax,0xf
c001baa3:	50                   	push   eax
c001baa4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baa9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bab2:	e8 03 47 ff ff       	call   c00101ba <VgaText::setTitleColour(VgaColour)>
c001bab7:	5f                   	pop    edi
c001bab8:	58                   	pop    eax
c001bab9:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001babf:	c1 e8 04             	shr    eax,0x4
c001bac2:	83 e0 0f             	and    eax,0xf
c001bac5:	50                   	push   eax
c001bac6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bacb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bace:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bad4:	e8 d1 46 ff ff       	call   c00101aa <VgaText::setTitleTextColour(VgaColour)>
c001bad9:	eb b5                	jmp    c001ba90 <sysAppSettings(regs*)+0x98>
c001badb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bae0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bae3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bae9:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001baef:	c0 e8 06             	shr    al,0x6
c001baf2:	83 e0 01             	and    eax,0x1
c001baf5:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bafb:	31 c0                	xor    eax,eax
c001bafd:	e9 44 ff ff ff       	jmp    c001ba46 <sysAppSettings(regs*)+0x4e>
c001bb02:	b8 02 00 00 00       	mov    eax,0x2
c001bb07:	e9 3a ff ff ff       	jmp    c001ba46 <sysAppSettings(regs*)+0x4e>

c001bb0c <sysSetFatAttrib(regs*)>:
c001bb0c:	57                   	push   edi
c001bb0d:	56                   	push   esi
c001bb0e:	53                   	push   ebx
c001bb0f:	83 ec 1c             	sub    esp,0x1c
c001bb12:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bb16:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bb19:	68 14 01 00 00       	push   0x114
c001bb1e:	e8 76 3a ff ff       	call   c000f599 <malloc>
c001bb23:	83 c4 0c             	add    esp,0xc
c001bb26:	89 c3                	mov    ebx,eax
c001bb28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb2d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb30:	57                   	push   edi
c001bb31:	53                   	push   ebx
c001bb32:	e8 c9 70 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001bb37:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bb3a:	83 c4 0c             	add    esp,0xc
c001bb3d:	0f b6 d4             	movzx  edx,ah
c001bb40:	0f b6 c0             	movzx  eax,al
c001bb43:	52                   	push   edx
c001bb44:	50                   	push   eax
c001bb45:	53                   	push   ebx
c001bb46:	e8 2b 73 ff ff       	call   c0012e76 <File::chfatattr(unsigned char, unsigned char)>
c001bb4b:	83 c4 10             	add    esp,0x10
c001bb4e:	85 db                	test   ebx,ebx
c001bb50:	74 14                	je     c001bb66 <sysSetFatAttrib(regs*)+0x5a>
c001bb52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb56:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb58:	83 ec 0c             	sub    esp,0xc
c001bb5b:	53                   	push   ebx
c001bb5c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb5f:	83 c4 10             	add    esp,0x10
c001bb62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb66:	85 c0                	test   eax,eax
c001bb68:	0f 95 c0             	setne  al
c001bb6b:	31 d2                	xor    edx,edx
c001bb6d:	0f b6 c0             	movzx  eax,al
c001bb70:	f7 d8                	neg    eax
c001bb72:	83 d2 00             	adc    edx,0x0
c001bb75:	83 c4 10             	add    esp,0x10
c001bb78:	f7 da                	neg    edx
c001bb7a:	5b                   	pop    ebx
c001bb7b:	5e                   	pop    esi
c001bb7c:	5f                   	pop    edi
c001bb7d:	c3                   	ret    

c001bb7e <sysPipe(regs*)>:
c001bb7e:	57                   	push   edi
c001bb7f:	56                   	push   esi
c001bb80:	53                   	push   ebx
c001bb81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb85:	83 ec 0c             	sub    esp,0xc
c001bb88:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bb8b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bb8e:	6a 20                	push   0x20
c001bb90:	e8 04 3a ff ff       	call   c000f599 <malloc>
c001bb95:	89 c3                	mov    ebx,eax
c001bb97:	58                   	pop    eax
c001bb98:	5a                   	pop    edx
c001bb99:	68 00 50 00 00       	push   0x5000
c001bb9e:	53                   	push   ebx
c001bb9f:	e8 9e 43 ff ff       	call   c000ff42 <Pipe::Pipe(int)>
c001bba4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bba7:	e8 fe 51 ff ff       	call   c0010daa <UnixFile::getFileDescriptor()>
c001bbac:	89 07                	mov    DWORD PTR [edi],eax
c001bbae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbb1:	e8 f4 51 ff ff       	call   c0010daa <UnixFile::getFileDescriptor()>
c001bbb6:	83 c4 10             	add    esp,0x10
c001bbb9:	89 06                	mov    DWORD PTR [esi],eax
c001bbbb:	31 d2                	xor    edx,edx
c001bbbd:	5b                   	pop    ebx
c001bbbe:	31 c0                	xor    eax,eax
c001bbc0:	5e                   	pop    esi
c001bbc1:	5f                   	pop    edi
c001bbc2:	c3                   	ret    

c001bbc3 <sysGetUnixTime(regs*)>:
c001bbc3:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001bbc8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bbce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bbd2:	e9 1b 7a ff ff       	jmp    c00135f2 <Clock::timeInSecondsLocal()>

c001bbd7 <string_ends_with(char const*, char const*)>:
c001bbd7:	57                   	push   edi
c001bbd8:	56                   	push   esi
c001bbd9:	53                   	push   ebx
c001bbda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbde:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bbe2:	83 ec 0c             	sub    esp,0xc
c001bbe5:	53                   	push   ebx
c001bbe6:	e8 81 4b fe ff       	call   c000076c <strlen>
c001bbeb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bbee:	89 c6                	mov    esi,eax
c001bbf0:	e8 77 4b fe ff       	call   c000076c <strlen>
c001bbf5:	83 c4 10             	add    esp,0x10
c001bbf8:	39 c6                	cmp    esi,eax
c001bbfa:	7d 06                	jge    c001bc02 <string_ends_with(char const*, char const*)+0x2b>
c001bbfc:	5b                   	pop    ebx
c001bbfd:	31 c0                	xor    eax,eax
c001bbff:	5e                   	pop    esi
c001bc00:	5f                   	pop    edi
c001bc01:	c3                   	ret    
c001bc02:	83 ec 08             	sub    esp,0x8
c001bc05:	29 c6                	sub    esi,eax
c001bc07:	57                   	push   edi
c001bc08:	01 f3                	add    ebx,esi
c001bc0a:	53                   	push   ebx
c001bc0b:	e8 88 4c fe ff       	call   c0000898 <strcmp>
c001bc10:	83 c4 10             	add    esp,0x10
c001bc13:	85 c0                	test   eax,eax
c001bc15:	5b                   	pop    ebx
c001bc16:	0f 94 c0             	sete   al
c001bc19:	5e                   	pop    esi
c001bc1a:	0f b6 c0             	movzx  eax,al
c001bc1d:	5f                   	pop    edi
c001bc1e:	c3                   	ret    

c001bc1f <sysCallOpen(regs*)>:
c001bc1f:	56                   	push   esi
c001bc20:	53                   	push   ebx
c001bc21:	81 ec 04 01 00 00    	sub    esp,0x104
c001bc27:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bc2e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bc31:	85 c9                	test   ecx,ecx
c001bc33:	0f 84 ad 01 00 00    	je     c001bde6 <sysCallOpen(regs*)+0x1c7>
c001bc39:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bc3c:	85 c0                	test   eax,eax
c001bc3e:	0f 84 a2 01 00 00    	je     c001bde6 <sysCallOpen(regs*)+0x1c7>
c001bc44:	52                   	push   edx
c001bc45:	68 b5 b8 02 c0       	push   0xc002b8b5
c001bc4a:	50                   	push   eax
c001bc4b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bc4f:	56                   	push   esi
c001bc50:	e8 01 6e ff ff       	call   c0012a56 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bc55:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc58:	e8 0f 4b fe ff       	call   c000076c <strlen>
c001bc5d:	83 c4 10             	add    esp,0x10
c001bc60:	48                   	dec    eax
c001bc61:	74 1d                	je     c001bc80 <sysCallOpen(regs*)+0x61>
c001bc63:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bc66:	eb 0f                	jmp    c001bc77 <sysCallOpen(regs*)+0x58>
c001bc68:	80 fa 3a             	cmp    dl,0x3a
c001bc6b:	74 0f                	je     c001bc7c <sysCallOpen(regs*)+0x5d>
c001bc6d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bc71:	48                   	dec    eax
c001bc72:	74 0c                	je     c001bc80 <sysCallOpen(regs*)+0x61>
c001bc74:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bc77:	80 fa 2e             	cmp    dl,0x2e
c001bc7a:	75 ec                	jne    c001bc68 <sysCallOpen(regs*)+0x49>
c001bc7c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bc80:	83 ec 08             	sub    esp,0x8
c001bc83:	68 b9 b8 02 c0       	push   0xc002b8b9
c001bc88:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc8b:	e8 47 ff ff ff       	call   c001bbd7 <string_ends_with(char const*, char const*)>
c001bc90:	83 c4 10             	add    esp,0x10
c001bc93:	85 c0                	test   eax,eax
c001bc95:	74 1d                	je     c001bcb4 <sysCallOpen(regs*)+0x95>
c001bc97:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bc9a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bca0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bca7:	81 c4 04 01 00 00    	add    esp,0x104
c001bcad:	31 c0                	xor    eax,eax
c001bcaf:	31 d2                	xor    edx,edx
c001bcb1:	5b                   	pop    ebx
c001bcb2:	5e                   	pop    esi
c001bcb3:	c3                   	ret    
c001bcb4:	83 ec 08             	sub    esp,0x8
c001bcb7:	68 be b8 02 c0       	push   0xc002b8be
c001bcbc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcbf:	e8 13 ff ff ff       	call   c001bbd7 <string_ends_with(char const*, char const*)>
c001bcc4:	83 c4 10             	add    esp,0x10
c001bcc7:	85 c0                	test   eax,eax
c001bcc9:	75 cc                	jne    c001bc97 <sysCallOpen(regs*)+0x78>
c001bccb:	83 ec 08             	sub    esp,0x8
c001bcce:	68 ba b8 02 c0       	push   0xc002b8ba
c001bcd3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcd6:	e8 bd 4b fe ff       	call   c0000898 <strcmp>
c001bcdb:	83 c4 10             	add    esp,0x10
c001bcde:	85 c0                	test   eax,eax
c001bce0:	74 b5                	je     c001bc97 <sysCallOpen(regs*)+0x78>
c001bce2:	83 ec 08             	sub    esp,0x8
c001bce5:	68 b9 b8 02 c0       	push   0xc002b8b9
c001bcea:	56                   	push   esi
c001bceb:	e8 e7 fe ff ff       	call   c001bbd7 <string_ends_with(char const*, char const*)>
c001bcf0:	83 c4 10             	add    esp,0x10
c001bcf3:	85 c0                	test   eax,eax
c001bcf5:	75 a0                	jne    c001bc97 <sysCallOpen(regs*)+0x78>
c001bcf7:	83 ec 08             	sub    esp,0x8
c001bcfa:	68 c3 b8 02 c0       	push   0xc002b8c3
c001bcff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd02:	e8 d0 fe ff ff       	call   c001bbd7 <string_ends_with(char const*, char const*)>
c001bd07:	83 c4 10             	add    esp,0x10
c001bd0a:	85 c0                	test   eax,eax
c001bd0c:	0f 85 e7 00 00 00    	jne    c001bdf9 <sysCallOpen(regs*)+0x1da>
c001bd12:	83 ec 08             	sub    esp,0x8
c001bd15:	68 c8 b8 02 c0       	push   0xc002b8c8
c001bd1a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd1d:	e8 b5 fe ff ff       	call   c001bbd7 <string_ends_with(char const*, char const*)>
c001bd22:	83 c4 10             	add    esp,0x10
c001bd25:	85 c0                	test   eax,eax
c001bd27:	0f 85 cc 00 00 00    	jne    c001bdf9 <sysCallOpen(regs*)+0x1da>
c001bd2d:	83 ec 08             	sub    esp,0x8
c001bd30:	68 c4 b8 02 c0       	push   0xc002b8c4
c001bd35:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd38:	e8 5b 4b fe ff       	call   c0000898 <strcmp>
c001bd3d:	83 c4 10             	add    esp,0x10
c001bd40:	85 c0                	test   eax,eax
c001bd42:	0f 84 b1 00 00 00    	je     c001bdf9 <sysCallOpen(regs*)+0x1da>
c001bd48:	83 ec 08             	sub    esp,0x8
c001bd4b:	68 c3 b8 02 c0       	push   0xc002b8c3
c001bd50:	56                   	push   esi
c001bd51:	e8 81 fe ff ff       	call   c001bbd7 <string_ends_with(char const*, char const*)>
c001bd56:	83 c4 10             	add    esp,0x10
c001bd59:	85 c0                	test   eax,eax
c001bd5b:	0f 85 98 00 00 00    	jne    c001bdf9 <sysCallOpen(regs*)+0x1da>
c001bd61:	83 ec 0c             	sub    esp,0xc
c001bd64:	68 14 01 00 00       	push   0x114
c001bd69:	e8 2b 38 ff ff       	call   c000f599 <malloc>
c001bd6e:	83 c4 0c             	add    esp,0xc
c001bd71:	89 c6                	mov    esi,eax
c001bd73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd78:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd7b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd7e:	56                   	push   esi
c001bd7f:	e8 7c 6e ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001bd84:	83 c4 10             	add    esp,0x10
c001bd87:	85 f6                	test   esi,esi
c001bd89:	74 5b                	je     c001bde6 <sysCallOpen(regs*)+0x1c7>
c001bd8b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bd8e:	0f b6 c2             	movzx  eax,dl
c001bd91:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bd94:	89 d0                	mov    eax,edx
c001bd96:	83 e0 01             	and    eax,0x1
c001bd99:	f6 c2 02             	test   dl,0x2
c001bd9c:	74 03                	je     c001bda1 <sysCallOpen(regs*)+0x182>
c001bd9e:	83 c8 02             	or     eax,0x2
c001bda1:	f6 c2 04             	test   dl,0x4
c001bda4:	74 03                	je     c001bda9 <sysCallOpen(regs*)+0x18a>
c001bda6:	83 c8 04             	or     eax,0x4
c001bda9:	f6 c2 08             	test   dl,0x8
c001bdac:	74 03                	je     c001bdb1 <sysCallOpen(regs*)+0x192>
c001bdae:	83 c8 0a             	or     eax,0xa
c001bdb1:	83 e2 10             	and    edx,0x10
c001bdb4:	74 03                	je     c001bdb9 <sysCallOpen(regs*)+0x19a>
c001bdb6:	83 c8 12             	or     eax,0x12
c001bdb9:	83 ec 08             	sub    esp,0x8
c001bdbc:	50                   	push   eax
c001bdbd:	56                   	push   esi
c001bdbe:	e8 a1 6e ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c001bdc3:	83 c4 10             	add    esp,0x10
c001bdc6:	85 c0                	test   eax,eax
c001bdc8:	75 1c                	jne    c001bde6 <sysCallOpen(regs*)+0x1c7>
c001bdca:	83 ec 0c             	sub    esp,0xc
c001bdcd:	56                   	push   esi
c001bdce:	e8 d7 4f ff ff       	call   c0010daa <UnixFile::getFileDescriptor()>
c001bdd3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bdd6:	83 c4 10             	add    esp,0x10
c001bdd9:	89 02                	mov    DWORD PTR [edx],eax
c001bddb:	c1 f8 1f             	sar    eax,0x1f
c001bdde:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bde1:	e9 c1 fe ff ff       	jmp    c001bca7 <sysCallOpen(regs*)+0x88>
c001bde6:	81 c4 04 01 00 00    	add    esp,0x104
c001bdec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdf1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdf6:	5b                   	pop    ebx
c001bdf7:	5e                   	pop    esi
c001bdf8:	c3                   	ret    
c001bdf9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bdfc:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001be02:	e9 99 fe ff ff       	jmp    c001bca0 <sysCallOpen(regs*)+0x81>

c001be07 <Sys::loadSyscalls()>:
c001be07:	c7 05 80 04 03 c0 74 b0 01 c0 	mov    DWORD PTR ds:0xc0030480,0xc001b074
c001be11:	c7 05 84 04 03 c0 6c ac 01 c0 	mov    DWORD PTR ds:0xc0030484,0xc001ac6c
c001be1b:	c7 05 88 04 03 c0 5a ae 01 c0 	mov    DWORD PTR ds:0xc0030488,0xc001ae5a
c001be25:	c7 05 8c 04 03 c0 aa af 01 c0 	mov    DWORD PTR ds:0xc003048c,0xc001afaa
c001be2f:	c7 05 90 04 03 c0 f2 ad 01 c0 	mov    DWORD PTR ds:0xc0030490,0xc001adf2
c001be39:	c7 05 94 04 03 c0 a3 ac 01 c0 	mov    DWORD PTR ds:0xc0030494,0xc001aca3
c001be43:	c7 05 98 04 03 c0 84 ac 01 c0 	mov    DWORD PTR ds:0xc0030498,0xc001ac84
c001be4d:	c7 05 9c 04 03 c0 af ae 01 c0 	mov    DWORD PTR ds:0xc003049c,0xc001aeaf
c001be57:	c7 05 a4 04 03 c0 3d b5 01 c0 	mov    DWORD PTR ds:0xc00304a4,0xc001b53d
c001be61:	c7 05 a0 04 03 c0 1f bc 01 c0 	mov    DWORD PTR ds:0xc00304a0,0xc001bc1f
c001be6b:	c7 05 a8 04 03 c0 9d b5 01 c0 	mov    DWORD PTR ds:0xc00304a8,0xc001b59d
c001be75:	c7 05 ac 04 03 c0 80 b2 01 c0 	mov    DWORD PTR ds:0xc00304ac,0xc001b280
c001be7f:	c7 05 b0 04 03 c0 ba b0 01 c0 	mov    DWORD PTR ds:0xc00304b0,0xc001b0ba
c001be89:	c7 05 b4 04 03 c0 bf b0 01 c0 	mov    DWORD PTR ds:0xc00304b4,0xc001b0bf
c001be93:	c7 05 b8 04 03 c0 66 b6 01 c0 	mov    DWORD PTR ds:0xc00304b8,0xc001b666
c001be9d:	c7 05 bc 04 03 c0 12 b6 01 c0 	mov    DWORD PTR ds:0xc00304bc,0xc001b612
c001bea7:	c7 05 c0 04 03 c0 59 b3 01 c0 	mov    DWORD PTR ds:0xc00304c0,0xc001b359
c001beb1:	c7 05 c4 04 03 c0 b0 b3 01 c0 	mov    DWORD PTR ds:0xc00304c4,0xc001b3b0
c001bebb:	c7 05 c8 04 03 c0 1c b4 01 c0 	mov    DWORD PTR ds:0xc00304c8,0xc001b41c
c001bec5:	c7 05 cc 04 03 c0 c4 b0 01 c0 	mov    DWORD PTR ds:0xc00304cc,0xc001b0c4
c001becf:	c7 05 d0 04 03 c0 d6 b6 01 c0 	mov    DWORD PTR ds:0xc00304d0,0xc001b6d6
c001bed9:	c7 05 d4 04 03 c0 f0 b6 01 c0 	mov    DWORD PTR ds:0xc00304d4,0xc001b6f0
c001bee3:	c7 05 d8 04 03 c0 f0 b6 01 c0 	mov    DWORD PTR ds:0xc00304d8,0xc001b6f0
c001beed:	c7 05 dc 04 03 c0 25 b7 01 c0 	mov    DWORD PTR ds:0xc00304dc,0xc001b725
c001bef7:	c7 05 e0 04 03 c0 89 b7 01 c0 	mov    DWORD PTR ds:0xc00304e0,0xc001b789
c001bf01:	c7 05 e4 04 03 c0 ce b0 01 c0 	mov    DWORD PTR ds:0xc00304e4,0xc001b0ce
c001bf0b:	c7 05 e8 04 03 c0 ed b7 01 c0 	mov    DWORD PTR ds:0xc00304e8,0xc001b7ed
c001bf15:	c7 05 ec 04 03 c0 3d b2 01 c0 	mov    DWORD PTR ds:0xc00304ec,0xc001b23d
c001bf1f:	c7 05 f0 04 03 c0 39 b8 01 c0 	mov    DWORD PTR ds:0xc00304f0,0xc001b839
c001bf29:	c7 05 f4 04 03 c0 ff b2 01 c0 	mov    DWORD PTR ds:0xc00304f4,0xc001b2ff
c001bf33:	c7 05 f8 04 03 c0 bc b8 01 c0 	mov    DWORD PTR ds:0xc00304f8,0xc001b8bc
c001bf3d:	c7 05 fc 04 03 c0 8e b4 01 c0 	mov    DWORD PTR ds:0xc00304fc,0xc001b48e
c001bf47:	c7 05 00 05 03 c0 e3 b8 01 c0 	mov    DWORD PTR ds:0xc0030500,0xc001b8e3
c001bf51:	c7 05 04 05 03 c0 4b b9 01 c0 	mov    DWORD PTR ds:0xc0030504,0xc001b94b
c001bf5b:	c7 05 08 05 03 c0 f8 b9 01 c0 	mov    DWORD PTR ds:0xc0030508,0xc001b9f8
c001bf65:	c7 05 0c 05 03 c0 de b0 01 c0 	mov    DWORD PTR ds:0xc003050c,0xc001b0de
c001bf6f:	c7 05 10 05 03 c0 48 b1 01 c0 	mov    DWORD PTR ds:0xc0030510,0xc001b148
c001bf79:	c7 05 14 05 03 c0 8e b1 01 c0 	mov    DWORD PTR ds:0xc0030514,0xc001b18e
c001bf83:	c7 05 18 05 03 c0 0c bb 01 c0 	mov    DWORD PTR ds:0xc0030518,0xc001bb0c
c001bf8d:	c7 05 1c 05 03 c0 0b b7 01 c0 	mov    DWORD PTR ds:0xc003051c,0xc001b70b
c001bf97:	c7 05 20 05 03 c0 df b1 01 c0 	mov    DWORD PTR ds:0xc0030520,0xc001b1df
c001bfa1:	c7 05 24 05 03 c0 7e bb 01 c0 	mov    DWORD PTR ds:0xc0030524,0xc001bb7e
c001bfab:	c7 05 28 05 03 c0 c3 bb 01 c0 	mov    DWORD PTR ds:0xc0030528,0xc001bbc3
c001bfb5:	c7 05 2c 05 03 c0 4a ad 01 c0 	mov    DWORD PTR ds:0xc003052c,0xc001ad4a
c001bfbf:	c7 05 30 05 03 c0 cb ae 01 c0 	mov    DWORD PTR ds:0xc0030530,0xc001aecb
c001bfc9:	c7 05 34 05 03 c0 60 af 01 c0 	mov    DWORD PTR ds:0xc0030534,0xc001af60
c001bfd3:	c7 05 38 05 03 c0 36 ac 01 c0 	mov    DWORD PTR ds:0xc0030538,0xc001ac36
c001bfdd:	c7 05 3c 05 03 c0 12 b0 01 c0 	mov    DWORD PTR ds:0xc003053c,0xc001b012
c001bfe7:	c7 05 40 05 03 c0 af ac 01 c0 	mov    DWORD PTR ds:0xc0030540,0xc001acaf
c001bff1:	c7 05 44 05 03 c0 c6 ac 01 c0 	mov    DWORD PTR ds:0xc0030544,0xc001acc6
c001bffb:	c3                   	ret    

c001bffc <Sys::systemCall(regs*, void*)>:
c001bffc:	53                   	push   ebx
c001bffd:	83 ec 08             	sub    esp,0x8
c001c000:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c004:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c007:	83 f8 7f             	cmp    eax,0x7f
c001c00a:	77 16                	ja     c001c022 <Sys::systemCall(regs*, void*)+0x26>
c001c00c:	8b 14 85 80 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfb80]
c001c013:	85 d2                	test   edx,edx
c001c015:	74 0b                	je     c001c022 <Sys::systemCall(regs*, void*)+0x26>
c001c017:	83 ec 0c             	sub    esp,0xc
c001c01a:	53                   	push   ebx
c001c01b:	ff d2                	call   edx
c001c01d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c020:	eb 0d                	jmp    c001c02f <Sys::systemCall(regs*, void*)+0x33>
c001c022:	52                   	push   edx
c001c023:	52                   	push   edx
c001c024:	50                   	push   eax
c001c025:	68 cd b8 02 c0       	push   0xc002b8cd
c001c02a:	e8 72 66 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001c02f:	83 c4 10             	add    esp,0x10
c001c032:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c037:	31 d2                	xor    edx,edx
c001c039:	83 c4 08             	add    esp,0x8
c001c03c:	5b                   	pop    ebx
c001c03d:	c3                   	ret    

c001c03e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c03e:	55                   	push   ebp
c001c03f:	57                   	push   edi
c001c040:	56                   	push   esi
c001c041:	53                   	push   ebx
c001c042:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c048:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c04f:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c056:	85 c0                	test   eax,eax
c001c058:	0f 95 c1             	setne  cl
c001c05b:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c063:	0f 94 c2             	sete   dl
c001c066:	84 d1                	test   cl,dl
c001c068:	74 23                	je     c001c08d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c06a:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c070:	74 1b                	je     c001c08d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c072:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c078:	89 da                	mov    edx,ebx
c001c07a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c080:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c086:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c08d:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c094:	05 ff 0f 00 00       	add    eax,0xfff
c001c099:	83 ec 0c             	sub    esp,0xc
c001c09c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0a0:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c0a6:	c1 e8 0c             	shr    eax,0xc
c001c0a9:	89 fe                	mov    esi,edi
c001c0ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c0af:	c1 ee 0c             	shr    esi,0xc
c001c0b2:	6a 01                	push   0x1
c001c0b4:	e8 3c 51 ff ff       	call   c00111f5 <Virt::allocateKernelVirtualPages(int)>
c001c0b9:	89 c5                	mov    ebp,eax
c001c0bb:	58                   	pop    eax
c001c0bc:	5a                   	pop    edx
c001c0bd:	56                   	push   esi
c001c0be:	68 e1 b8 02 c0       	push   0xc002b8e1
c001c0c3:	e8 d9 65 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001c0c8:	59                   	pop    ecx
c001c0c9:	58                   	pop    eax
c001c0ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c0ce:	68 f3 b8 02 c0       	push   0xc002b8f3
c001c0d3:	e8 c9 65 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001c0d8:	83 c4 10             	add    esp,0x10
c001c0db:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c0e1:	0f 86 31 01 00 00    	jbe    c001c218 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c0e7:	c1 e6 0c             	shl    esi,0xc
c001c0ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0ed:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c0f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0f4:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c0fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c0fe:	01 df                	add    edi,ebx
c001c100:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c103:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c107:	0f 84 08 01 00 00    	je     c001c215 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c10d:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c113:	76 05                	jbe    c001c11a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c115:	bf 00 10 00 00       	mov    edi,0x1000
c001c11a:	83 ec 0c             	sub    esp,0xc
c001c11d:	31 d2                	xor    edx,edx
c001c11f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c126:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c128:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c12c:	50                   	push   eax
c001c12d:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c131:	56                   	push   esi
c001c132:	52                   	push   edx
c001c133:	57                   	push   edi
c001c134:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c13b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c13e:	83 c4 20             	add    esp,0x20
c001c141:	85 c0                	test   eax,eax
c001c143:	74 0a                	je     c001c14f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c145:	53                   	push   ebx
c001c146:	53                   	push   ebx
c001c147:	50                   	push   eax
c001c148:	68 05 b9 02 c0       	push   0xc002b905
c001c14d:	eb 0f                	jmp    c001c15e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c14f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c153:	74 20                	je     c001c175 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c155:	51                   	push   ecx
c001c156:	51                   	push   ecx
c001c157:	6a 00                	push   0x0
c001c159:	68 30 b9 02 c0       	push   0xc002b930
c001c15e:	e8 3e 65 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001c163:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c166:	e8 d0 54 ff ff       	call   c001163b <Virt::freeKernelVirtualPages(unsigned long)>
c001c16b:	83 c4 10             	add    esp,0x10
c001c16e:	31 c0                	xor    eax,eax
c001c170:	e9 68 01 00 00       	jmp    c001c2dd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c175:	fa                   	cli    
c001c176:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001c17c:	e8 f0 37 ff ff       	call   c000f971 <Phys::allocatePage()>
c001c181:	6a 07                	push   0x7
c001c183:	89 c7                	mov    edi,eax
c001c185:	55                   	push   ebp
c001c186:	50                   	push   eax
c001c187:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c18c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c18f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c195:	e8 18 58 ff ff       	call   c00119b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c19a:	83 c4 0c             	add    esp,0xc
c001c19d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c1a4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1aa:	6a 00                	push   0x0
c001c1ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1b4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1ba:	e8 4d 56 ff ff       	call   c001180c <VAS::mapOtherVASIn(bool, VAS*)>
c001c1bf:	58                   	pop    eax
c001c1c0:	5a                   	pop    edx
c001c1c1:	68 07 0c 00 00       	push   0xc07
c001c1c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c1ca:	57                   	push   edi
c001c1cb:	89 ef                	mov    edi,ebp
c001c1cd:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c1d4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1da:	6a 00                	push   0x0
c001c1dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1e4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1ea:	e8 7f 5b ff ff       	call   c0011d6e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c1ef:	b9 00 10 00 00       	mov    ecx,0x1000
c001c1f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c1f6:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001c1fb:	83 c4 20             	add    esp,0x20
c001c1fe:	48                   	dec    eax
c001c1ff:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001c204:	85 c0                	test   eax,eax
c001c206:	75 01                	jne    c001c209 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c208:	fb                   	sti    
c001c209:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c210:	e9 df fe ff ff       	jmp    c001c0f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c215:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c218:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c220:	0f 86 a9 00 00 00    	jbe    c001c2cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c226:	fa                   	cli    
c001c227:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001c22d:	51                   	push   ecx
c001c22e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c235:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c23b:	6a 00                	push   0x0
c001c23d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c242:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c245:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c24b:	e8 bc 55 ff ff       	call   c001180c <VAS::mapOtherVASIn(bool, VAS*)>
c001c250:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c254:	c1 e6 0c             	shl    esi,0xc
c001c257:	01 de                	add    esi,ebx
c001c259:	83 c4 10             	add    esp,0x10
c001c25c:	39 de                	cmp    esi,ebx
c001c25e:	74 61                	je     c001c2c1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c260:	e8 0c 37 ff ff       	call   c000f971 <Phys::allocatePage()>
c001c265:	6a 07                	push   0x7
c001c267:	89 c7                	mov    edi,eax
c001c269:	55                   	push   ebp
c001c26a:	50                   	push   eax
c001c26b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c270:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c273:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c279:	e8 34 57 ff ff       	call   c00119b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c27e:	58                   	pop    eax
c001c27f:	5a                   	pop    edx
c001c280:	68 07 0c 00 00       	push   0xc07
c001c285:	53                   	push   ebx
c001c286:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c28c:	57                   	push   edi
c001c28d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c294:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c29a:	6a 00                	push   0x0
c001c29c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2aa:	e8 bf 5a ff ff       	call   c0011d6e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c2af:	83 c4 1c             	add    esp,0x1c
c001c2b2:	68 00 10 00 00       	push   0x1000
c001c2b7:	6a 00                	push   0x0
c001c2b9:	55                   	push   ebp
c001c2ba:	e8 91 44 fe ff       	call   c0000750 <memset>
c001c2bf:	eb 98                	jmp    c001c259 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c2c1:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001c2c6:	48                   	dec    eax
c001c2c7:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001c2cc:	75 01                	jne    c001c2cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c2ce:	fb                   	sti    
c001c2cf:	83 ec 0c             	sub    esp,0xc
c001c2d2:	55                   	push   ebp
c001c2d3:	e8 63 53 ff ff       	call   c001163b <Virt::freeKernelVirtualPages(unsigned long)>
c001c2d8:	83 c4 10             	add    esp,0x10
c001c2db:	b0 01                	mov    al,0x1
c001c2dd:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c2e3:	5b                   	pop    ebx
c001c2e4:	5e                   	pop    esi
c001c2e5:	5f                   	pop    edi
c001c2e6:	5d                   	pop    ebp
c001c2e7:	c3                   	ret    

c001c2e8 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c2e8:	55                   	push   ebp
c001c2e9:	57                   	push   edi
c001c2ea:	56                   	push   esi
c001c2eb:	53                   	push   ebx
c001c2ec:	83 ec 48             	sub    esp,0x48
c001c2ef:	68 14 01 00 00       	push   0x114
c001c2f4:	e8 a0 32 ff ff       	call   c000f599 <malloc>
c001c2f9:	83 c4 0c             	add    esp,0xc
c001c2fc:	89 c6                	mov    esi,eax
c001c2fe:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c302:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c306:	50                   	push   eax
c001c307:	e8 f4 68 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001c30c:	58                   	pop    eax
c001c30d:	5a                   	pop    edx
c001c30e:	6a 01                	push   0x1
c001c310:	56                   	push   esi
c001c311:	e8 4e 69 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c001c316:	83 c4 10             	add    esp,0x10
c001c319:	85 c0                	test   eax,eax
c001c31b:	0f 85 47 01 00 00    	jne    c001c468 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c321:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c329:	83 ec 0c             	sub    esp,0xc
c001c32c:	6a 34                	push   0x34
c001c32e:	e8 66 32 ff ff       	call   c000f599 <malloc>
c001c333:	89 c3                	mov    ebx,eax
c001c335:	58                   	pop    eax
c001c336:	8b 06                	mov    eax,DWORD PTR [esi]
c001c338:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c33c:	57                   	push   edi
c001c33d:	53                   	push   ebx
c001c33e:	6a 00                	push   0x0
c001c340:	6a 34                	push   0x34
c001c342:	56                   	push   esi
c001c343:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c346:	83 c4 20             	add    esp,0x20
c001c349:	85 c0                	test   eax,eax
c001c34b:	0f 85 17 01 00 00    	jne    c001c468 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c351:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c357:	0f 85 0b 01 00 00    	jne    c001c468 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c35d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c360:	85 c0                	test   eax,eax
c001c362:	0f 84 00 01 00 00    	je     c001c468 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c368:	31 d2                	xor    edx,edx
c001c36a:	55                   	push   ebp
c001c36b:	52                   	push   edx
c001c36c:	50                   	push   eax
c001c36d:	56                   	push   esi
c001c36e:	e8 af 69 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001c373:	83 c4 10             	add    esp,0x10
c001c376:	85 c0                	test   eax,eax
c001c378:	0f 85 ea 00 00 00    	jne    c001c468 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c37e:	83 ec 0c             	sub    esp,0xc
c001c381:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c384:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c388:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c38c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c390:	0f af c2             	imul   eax,edx
c001c393:	50                   	push   eax
c001c394:	e8 00 32 ff ff       	call   c000f599 <malloc>
c001c399:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c39b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c39f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c3a6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3aa:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3ae:	0f af c2             	imul   eax,edx
c001c3b1:	99                   	cdq    
c001c3b2:	52                   	push   edx
c001c3b3:	50                   	push   eax
c001c3b4:	56                   	push   esi
c001c3b5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c3b8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c3bb:	83 c4 20             	add    esp,0x20
c001c3be:	85 c0                	test   eax,eax
c001c3c0:	0f 84 a2 00 00 00    	je     c001c468 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3c6:	31 d2                	xor    edx,edx
c001c3c8:	51                   	push   ecx
c001c3c9:	52                   	push   edx
c001c3ca:	50                   	push   eax
c001c3cb:	56                   	push   esi
c001c3cc:	e8 51 69 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001c3d1:	83 c4 10             	add    esp,0x10
c001c3d4:	85 c0                	test   eax,eax
c001c3d6:	0f 85 8c 00 00 00    	jne    c001c468 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3dc:	83 ec 0c             	sub    esp,0xc
c001c3df:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c3e3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c3e7:	31 ed                	xor    ebp,ebp
c001c3e9:	0f af c2             	imul   eax,edx
c001c3ec:	50                   	push   eax
c001c3ed:	e8 a7 31 ff ff       	call   c000f599 <malloc>
c001c3f2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c3f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c3f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3ff:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c403:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c407:	0f af c2             	imul   eax,edx
c001c40a:	99                   	cdq    
c001c40b:	52                   	push   edx
c001c40c:	50                   	push   eax
c001c40d:	56                   	push   esi
c001c40e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c411:	83 c4 20             	add    esp,0x20
c001c414:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c41c:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c420:	0f 86 80 00 00 00    	jbe    c001c4a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c426:	0f b7 fd             	movzx  edi,bp
c001c429:	c1 e7 05             	shl    edi,0x5
c001c42c:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c430:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c433:	75 6b                	jne    c001c4a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c435:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c438:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c43c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c43f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c443:	52                   	push   edx
c001c444:	31 d2                	xor    edx,edx
c001c446:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c449:	52                   	push   edx
c001c44a:	50                   	push   eax
c001c44b:	56                   	push   esi
c001c44c:	e8 d1 68 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001c451:	83 c4 10             	add    esp,0x10
c001c454:	85 c0                	test   eax,eax
c001c456:	74 17                	je     c001c46f <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c458:	83 ec 0c             	sub    esp,0xc
c001c45b:	68 5c b9 02 c0       	push   0xc002b95c
c001c460:	e8 3c 62 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001c465:	83 c4 10             	add    esp,0x10
c001c468:	31 c0                	xor    eax,eax
c001c46a:	e9 87 00 00 00       	jmp    c001c4f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c46f:	83 ec 0c             	sub    esp,0xc
c001c472:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c475:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c478:	50                   	push   eax
c001c479:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c47d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c481:	56                   	push   esi
c001c482:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c486:	e8 b3 fb ff ff       	call   c001c03e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c48b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c48f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c493:	83 c4 20             	add    esp,0x20
c001c496:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c49a:	73 04                	jae    c001c4a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c49c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4a0:	45                   	inc    ebp
c001c4a1:	e9 76 ff ff ff       	jmp    c001c41c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c4a6:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c4aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4b2:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c4b8:	83 ec 0c             	sub    esp,0xc
c001c4bb:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c4c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c4c6:	05 00 10 00 00       	add    eax,0x1000
c001c4cb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4d2:	e8 d2 30 ff ff       	call   c000f5a9 <free>
c001c4d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c4da:	e8 ca 30 ff ff       	call   c000f5a9 <free>
c001c4df:	58                   	pop    eax
c001c4e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4e4:	e8 c0 30 ff ff       	call   c000f5a9 <free>
c001c4e9:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4ec:	e8 d1 67 ff ff       	call   c0012cc2 <File::close()>
c001c4f1:	83 c4 10             	add    esp,0x10
c001c4f4:	b0 01                	mov    al,0x1
c001c4f6:	83 c4 3c             	add    esp,0x3c
c001c4f9:	5b                   	pop    ebx
c001c4fa:	5e                   	pop    esi
c001c4fb:	5f                   	pop    edi
c001c4fc:	5d                   	pop    ebp
c001c4fd:	c3                   	ret    

c001c4fe <Thr::runtimeReferenceHelper()>:
c001c4fe:	83 ec 18             	sub    esp,0x18
c001c501:	68 64 b9 02 c0       	push   0xc002b964
c001c506:	e8 96 61 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001c50b:	fa                   	cli    
c001c50c:	83 c4 10             	add    esp,0x10
c001c50f:	eb fe                	jmp    c001c50f <Thr::runtimeReferenceHelper()+0x11>

c001c511 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c511:	57                   	push   edi
c001c512:	56                   	push   esi
c001c513:	53                   	push   ebx
c001c514:	31 db                	xor    ebx,ebx
c001c516:	39 1d 20 0e 03 c0    	cmp    DWORD PTR ds:0xc0030e20,ebx
c001c51c:	7e 3c                	jle    c001c55a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c51e:	8b 34 9d a0 0d 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf260]
c001c525:	31 ff                	xor    edi,edi
c001c527:	39 3c 9d a0 0c 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf360],edi
c001c52e:	7e 27                	jle    c001c557 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c530:	50                   	push   eax
c001c531:	50                   	push   eax
c001c532:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c536:	8b 06                	mov    eax,DWORD PTR [esi]
c001c538:	03 04 9d 20 0d 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf2e0]
c001c53f:	50                   	push   eax
c001c540:	e8 53 43 fe ff       	call   c0000898 <strcmp>
c001c545:	83 c4 10             	add    esp,0x10
c001c548:	85 c0                	test   eax,eax
c001c54a:	75 05                	jne    c001c551 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c54c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c54f:	eb 0b                	jmp    c001c55c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c551:	83 c6 10             	add    esi,0x10
c001c554:	47                   	inc    edi
c001c555:	eb d0                	jmp    c001c527 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c557:	43                   	inc    ebx
c001c558:	eb bc                	jmp    c001c516 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c55a:	31 c0                	xor    eax,eax
c001c55c:	5b                   	pop    ebx
c001c55d:	5e                   	pop    esi
c001c55e:	5f                   	pop    edi
c001c55f:	c3                   	ret    

c001c560 <Thr::loadKernelSymbolTable(char const*)>:
c001c560:	55                   	push   ebp
c001c561:	57                   	push   edi
c001c562:	56                   	push   esi
c001c563:	53                   	push   ebx
c001c564:	83 ec 68             	sub    esp,0x68
c001c567:	8b 35 70 0e 03 c0    	mov    esi,DWORD PTR ds:0xc0030e70
c001c56d:	68 14 01 00 00       	push   0x114
c001c572:	e8 22 30 ff ff       	call   c000f599 <malloc>
c001c577:	83 c4 0c             	add    esp,0xc
c001c57a:	89 c3                	mov    ebx,eax
c001c57c:	56                   	push   esi
c001c57d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c581:	50                   	push   eax
c001c582:	e8 79 66 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001c587:	5e                   	pop    esi
c001c588:	5f                   	pop    edi
c001c589:	6a 01                	push   0x1
c001c58b:	53                   	push   ebx
c001c58c:	e8 d3 66 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c001c591:	83 c4 10             	add    esp,0x10
c001c594:	85 c0                	test   eax,eax
c001c596:	74 0a                	je     c001c5a2 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c598:	83 ec 0c             	sub    esp,0xc
c001c59b:	68 86 b9 02 c0       	push   0xc002b986
c001c5a0:	eb 34                	jmp    c001c5d6 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c5a2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c5aa:	83 ec 0c             	sub    esp,0xc
c001c5ad:	6a 34                	push   0x34
c001c5af:	e8 e5 2f ff ff       	call   c000f599 <malloc>
c001c5b4:	59                   	pop    ecx
c001c5b5:	89 c7                	mov    edi,eax
c001c5b7:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c5bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5bd:	56                   	push   esi
c001c5be:	57                   	push   edi
c001c5bf:	6a 00                	push   0x0
c001c5c1:	6a 34                	push   0x34
c001c5c3:	53                   	push   ebx
c001c5c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5c7:	83 c4 20             	add    esp,0x20
c001c5ca:	85 c0                	test   eax,eax
c001c5cc:	74 17                	je     c001c5e5 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c5ce:	83 ec 0c             	sub    esp,0xc
c001c5d1:	68 9d b9 02 c0       	push   0xc002b99d
c001c5d6:	e8 32 d8 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001c5db:	83 c4 10             	add    esp,0x10
c001c5de:	31 c0                	xor    eax,eax
c001c5e0:	e9 31 02 00 00       	jmp    c001c816 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c5e5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c5eb:	75 e1                	jne    c001c5ce <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c5ed:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c5f0:	85 c0                	test   eax,eax
c001c5f2:	74 da                	je     c001c5ce <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c5f4:	52                   	push   edx
c001c5f5:	31 d2                	xor    edx,edx
c001c5f7:	52                   	push   edx
c001c5f8:	50                   	push   eax
c001c5f9:	53                   	push   ebx
c001c5fa:	e8 23 67 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001c5ff:	83 c4 10             	add    esp,0x10
c001c602:	85 c0                	test   eax,eax
c001c604:	75 c8                	jne    c001c5ce <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c606:	83 ec 0c             	sub    esp,0xc
c001c609:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c60d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c611:	31 ed                	xor    ebp,ebp
c001c613:	0f af c2             	imul   eax,edx
c001c616:	50                   	push   eax
c001c617:	e8 7d 2f ff ff       	call   c000f599 <malloc>
c001c61c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c61e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c622:	89 34 24             	mov    DWORD PTR [esp],esi
c001c625:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c629:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c62d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c631:	0f af c2             	imul   eax,edx
c001c634:	99                   	cdq    
c001c635:	52                   	push   edx
c001c636:	50                   	push   eax
c001c637:	53                   	push   ebx
c001c638:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c63b:	83 c4 20             	add    esp,0x20
c001c63e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c646:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c64e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c656:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c65e:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c662:	0f 86 aa 00 00 00    	jbe    c001c712 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c668:	0f b7 f5             	movzx  esi,bp
c001c66b:	6b f6 28             	imul   esi,esi,0x28
c001c66e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c672:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c675:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c679:	50                   	push   eax
c001c67a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c67e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c682:	8b 16                	mov    edx,DWORD PTR [esi]
c001c684:	6b c0 28             	imul   eax,eax,0x28
c001c687:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c68b:	89 d0                	mov    eax,edx
c001c68d:	31 d2                	xor    edx,edx
c001c68f:	52                   	push   edx
c001c690:	50                   	push   eax
c001c691:	53                   	push   ebx
c001c692:	e8 8b 66 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001c697:	83 c4 0c             	add    esp,0xc
c001c69a:	6a 20                	push   0x20
c001c69c:	6a 00                	push   0x0
c001c69e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6a2:	52                   	push   edx
c001c6a3:	e8 a8 40 fe ff       	call   c0000750 <memset>
c001c6a8:	58                   	pop    eax
c001c6a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6ab:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c6af:	51                   	push   ecx
c001c6b0:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c6b4:	52                   	push   edx
c001c6b5:	6a 00                	push   0x0
c001c6b7:	6a 1f                	push   0x1f
c001c6b9:	53                   	push   ebx
c001c6ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6bd:	83 c4 18             	add    esp,0x18
c001c6c0:	68 b4 b9 02 c0       	push   0xc002b9b4
c001c6c5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6c9:	52                   	push   edx
c001c6ca:	e8 c9 41 fe ff       	call   c0000898 <strcmp>
c001c6cf:	83 c4 10             	add    esp,0x10
c001c6d2:	85 c0                	test   eax,eax
c001c6d4:	75 0f                	jne    c001c6e5 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c6d6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c6d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6e5:	50                   	push   eax
c001c6e6:	50                   	push   eax
c001c6e7:	68 bc b9 02 c0       	push   0xc002b9bc
c001c6ec:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c6f0:	50                   	push   eax
c001c6f1:	e8 a2 41 fe ff       	call   c0000898 <strcmp>
c001c6f6:	83 c4 10             	add    esp,0x10
c001c6f9:	85 c0                	test   eax,eax
c001c6fb:	75 0f                	jne    c001c70c <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c6fd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c700:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c704:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c708:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c70c:	45                   	inc    ebp
c001c70d:	e9 4c ff ff ff       	jmp    c001c65e <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c712:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c717:	75 10                	jne    c001c729 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c719:	83 ec 0c             	sub    esp,0xc
c001c71c:	68 c4 b9 02 c0       	push   0xc002b9c4
c001c721:	e8 e7 d6 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001c726:	83 c4 10             	add    esp,0x10
c001c729:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c72e:	75 10                	jne    c001c740 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c730:	83 ec 0c             	sub    esp,0xc
c001c733:	68 c4 b9 02 c0       	push   0xc002b9c4
c001c738:	e8 d0 d6 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001c73d:	83 c4 10             	add    esp,0x10
c001c740:	31 d2                	xor    edx,edx
c001c742:	50                   	push   eax
c001c743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c747:	52                   	push   edx
c001c748:	50                   	push   eax
c001c749:	53                   	push   ebx
c001c74a:	e8 d3 65 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001c74f:	5a                   	pop    edx
c001c750:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c754:	e8 40 2e ff ff       	call   c000f599 <malloc>
c001c759:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c75d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c761:	31 c9                	xor    ecx,ecx
c001c763:	5e                   	pop    esi
c001c764:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c766:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c76a:	55                   	push   ebp
c001c76b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c76f:	51                   	push   ecx
c001c770:	52                   	push   edx
c001c771:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c775:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c779:	53                   	push   ebx
c001c77a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c77d:	83 c4 14             	add    esp,0x14
c001c780:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c784:	e8 10 2e ff ff       	call   c000f599 <malloc>
c001c789:	89 c6                	mov    esi,eax
c001c78b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c78d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c790:	56                   	push   esi
c001c791:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c795:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c799:	51                   	push   ecx
c001c79a:	52                   	push   edx
c001c79b:	53                   	push   ebx
c001c79c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c79f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7a3:	8b 15 20 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e20
c001c7a9:	83 c4 1c             	add    esp,0x1c
c001c7ac:	c1 e8 04             	shr    eax,0x4
c001c7af:	89 04 95 a0 0c 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf360],eax
c001c7b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c7ba:	31 d2                	xor    edx,edx
c001c7bc:	52                   	push   edx
c001c7bd:	50                   	push   eax
c001c7be:	53                   	push   ebx
c001c7bf:	e8 5e 65 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001c7c4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c7c6:	31 d2                	xor    edx,edx
c001c7c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7cb:	56                   	push   esi
c001c7cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7d0:	52                   	push   edx
c001c7d1:	50                   	push   eax
c001c7d2:	53                   	push   ebx
c001c7d3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7d6:	83 c4 14             	add    esp,0x14
c001c7d9:	53                   	push   ebx
c001c7da:	e8 e3 64 ff ff       	call   c0012cc2 <File::close()>
c001c7df:	5d                   	pop    ebp
c001c7e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c7e4:	e8 c0 2d ff ff       	call   c000f5a9 <free>
c001c7e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c7ec:	e8 b8 2d ff ff       	call   c000f5a9 <free>
c001c7f1:	a1 20 0e 03 c0       	mov    eax,ds:0xc0030e20
c001c7f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c7fa:	8d 50 01             	lea    edx,[eax+0x1]
c001c7fd:	89 0c 85 a0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf260],ecx
c001c804:	89 34 85 20 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2e0],esi
c001c80b:	89 15 20 0e 03 c0    	mov    DWORD PTR ds:0xc0030e20,edx
c001c811:	83 c4 10             	add    esp,0x10
c001c814:	b0 01                	mov    al,0x1
c001c816:	83 c4 5c             	add    esp,0x5c
c001c819:	5b                   	pop    ebx
c001c81a:	5e                   	pop    esi
c001c81b:	5f                   	pop    edi
c001c81c:	5d                   	pop    ebp
c001c81d:	c3                   	ret    

c001c81e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c81e:	55                   	push   ebp
c001c81f:	57                   	push   edi
c001c820:	56                   	push   esi
c001c821:	53                   	push   ebx
c001c822:	81 ec 68 03 00 00    	sub    esp,0x368
c001c828:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c82f:	8b 1d 70 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030e70
c001c835:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c839:	68 14 01 00 00       	push   0x114
c001c83e:	e8 56 2d ff ff       	call   c000f599 <malloc>
c001c843:	83 c4 0c             	add    esp,0xc
c001c846:	89 c5                	mov    ebp,eax
c001c848:	53                   	push   ebx
c001c849:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c850:	50                   	push   eax
c001c851:	e8 aa 63 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001c856:	5e                   	pop    esi
c001c857:	5f                   	pop    edi
c001c858:	6a 01                	push   0x1
c001c85a:	55                   	push   ebp
c001c85b:	e8 04 64 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c001c860:	83 c4 10             	add    esp,0x10
c001c863:	85 c0                	test   eax,eax
c001c865:	0f 85 a7 06 00 00    	jne    c001cf12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c86b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c873:	83 ec 0c             	sub    esp,0xc
c001c876:	6a 34                	push   0x34
c001c878:	e8 1c 2d ff ff       	call   c000f599 <malloc>
c001c87d:	5b                   	pop    ebx
c001c87e:	89 c7                	mov    edi,eax
c001c880:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c884:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c887:	53                   	push   ebx
c001c888:	57                   	push   edi
c001c889:	6a 00                	push   0x0
c001c88b:	6a 34                	push   0x34
c001c88d:	55                   	push   ebp
c001c88e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c891:	83 c4 20             	add    esp,0x20
c001c894:	85 c0                	test   eax,eax
c001c896:	0f 85 76 06 00 00    	jne    c001cf12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c89c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c8a2:	0f 85 6a 06 00 00    	jne    c001cf12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8a8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c8ab:	85 c0                	test   eax,eax
c001c8ad:	0f 84 5f 06 00 00    	je     c001cf12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8b3:	31 d2                	xor    edx,edx
c001c8b5:	51                   	push   ecx
c001c8b6:	52                   	push   edx
c001c8b7:	50                   	push   eax
c001c8b8:	55                   	push   ebp
c001c8b9:	e8 64 64 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001c8be:	83 c4 10             	add    esp,0x10
c001c8c1:	85 c0                	test   eax,eax
c001c8c3:	0f 85 49 06 00 00    	jne    c001cf12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8c9:	83 ec 0c             	sub    esp,0xc
c001c8cc:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c8cf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c8d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c8d7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c8db:	0f af c2             	imul   eax,edx
c001c8de:	50                   	push   eax
c001c8df:	e8 b5 2c ff ff       	call   c000f599 <malloc>
c001c8e4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c8e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c8eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c8f2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c8f6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c8fa:	0f af c2             	imul   eax,edx
c001c8fd:	99                   	cdq    
c001c8fe:	52                   	push   edx
c001c8ff:	50                   	push   eax
c001c900:	55                   	push   ebp
c001c901:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c904:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c907:	83 c4 20             	add    esp,0x20
c001c90a:	85 c0                	test   eax,eax
c001c90c:	0f 84 00 06 00 00    	je     c001cf12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c912:	52                   	push   edx
c001c913:	31 d2                	xor    edx,edx
c001c915:	52                   	push   edx
c001c916:	50                   	push   eax
c001c917:	55                   	push   ebp
c001c918:	e8 05 64 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001c91d:	83 c4 10             	add    esp,0x10
c001c920:	85 c0                	test   eax,eax
c001c922:	0f 85 ea 05 00 00    	jne    c001cf12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c928:	83 ec 0c             	sub    esp,0xc
c001c92b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c92f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c933:	31 f6                	xor    esi,esi
c001c935:	0f af c2             	imul   eax,edx
c001c938:	50                   	push   eax
c001c939:	e8 5b 2c ff ff       	call   c000f599 <malloc>
c001c93e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c941:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c945:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c948:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c94c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c950:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c954:	0f af c2             	imul   eax,edx
c001c957:	99                   	cdq    
c001c958:	52                   	push   edx
c001c959:	50                   	push   eax
c001c95a:	55                   	push   ebp
c001c95b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c95e:	83 c4 20             	add    esp,0x20
c001c961:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c965:	0f 86 8a 00 00 00    	jbe    c001c9f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c96b:	0f b7 de             	movzx  ebx,si
c001c96e:	c1 e3 05             	shl    ebx,0x5
c001c971:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c975:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c978:	75 75                	jne    c001c9ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c97a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c97d:	31 d2                	xor    edx,edx
c001c97f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c983:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c986:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c98a:	50                   	push   eax
c001c98b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c98e:	52                   	push   edx
c001c98f:	50                   	push   eax
c001c990:	55                   	push   ebp
c001c991:	e8 8c 63 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001c996:	83 c4 10             	add    esp,0x10
c001c999:	85 c0                	test   eax,eax
c001c99b:	0f 85 71 05 00 00    	jne    c001cf12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9a1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c9a8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9ab:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c9af:	31 d2                	xor    edx,edx
c001c9b1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c9b5:	83 ec 0c             	sub    esp,0xc
c001c9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c9bc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9c3:	50                   	push   eax
c001c9c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9cc:	52                   	push   edx
c001c9cd:	50                   	push   eax
c001c9ce:	55                   	push   ebp
c001c9cf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9d2:	83 c4 1c             	add    esp,0x1c
c001c9d5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9d8:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c9db:	50                   	push   eax
c001c9dc:	6a 00                	push   0x0
c001c9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c9e6:	50                   	push   eax
c001c9e7:	e8 64 3d fe ff       	call   c0000750 <memset>
c001c9ec:	83 c4 10             	add    esp,0x10
c001c9ef:	46                   	inc    esi
c001c9f0:	e9 6c ff ff ff       	jmp    c001c961 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c9f5:	53                   	push   ebx
c001c9f6:	31 db                	xor    ebx,ebx
c001c9f8:	68 00 01 00 00       	push   0x100
c001c9fd:	6a 00                	push   0x0
c001c9ff:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ca03:	50                   	push   eax
c001ca04:	e8 47 3d fe ff       	call   c0000750 <memset>
c001ca09:	83 c4 0c             	add    esp,0xc
c001ca0c:	68 00 01 00 00       	push   0x100
c001ca11:	6a 00                	push   0x0
c001ca13:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ca1a:	50                   	push   eax
c001ca1b:	e8 30 3d fe ff       	call   c0000750 <memset>
c001ca20:	83 c4 10             	add    esp,0x10
c001ca23:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca2b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ca33:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ca3b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca43:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ca4b:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ca4f:	0f 86 30 01 00 00    	jbe    c001cb85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ca55:	0f b7 f3             	movzx  esi,bx
c001ca58:	6b f6 28             	imul   esi,esi,0x28
c001ca5b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca5f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca66:	52                   	push   edx
c001ca67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca6b:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ca6f:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca71:	6b d2 28             	imul   edx,edx,0x28
c001ca74:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ca78:	31 d2                	xor    edx,edx
c001ca7a:	52                   	push   edx
c001ca7b:	50                   	push   eax
c001ca7c:	55                   	push   ebp
c001ca7d:	e8 a0 62 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001ca82:	83 c4 0c             	add    esp,0xc
c001ca85:	6a 20                	push   0x20
c001ca87:	6a 00                	push   0x0
c001ca89:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ca90:	51                   	push   ecx
c001ca91:	e8 ba 3c fe ff       	call   c0000750 <memset>
c001ca96:	59                   	pop    ecx
c001ca97:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ca9a:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ca9e:	52                   	push   edx
c001ca9f:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001caa6:	51                   	push   ecx
c001caa7:	6a 00                	push   0x0
c001caa9:	6a 1f                	push   0x1f
c001caab:	55                   	push   ebp
c001caac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001caaf:	83 c4 1c             	add    esp,0x1c
c001cab2:	6a 09                	push   0x9
c001cab4:	68 de b9 02 c0       	push   0xc002b9de
c001cab9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cac0:	51                   	push   ecx
c001cac1:	e8 86 3b fe ff       	call   c000064c <memcmp>
c001cac6:	83 c4 10             	add    esp,0x10
c001cac9:	85 c0                	test   eax,eax
c001cacb:	75 21                	jne    c001caee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cacd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cad1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cad5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cad9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cadd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cae0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cae7:	89 d0                	mov    eax,edx
c001cae9:	40                   	inc    eax
c001caea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001caee:	50                   	push   eax
c001caef:	6a 09                	push   0x9
c001caf1:	68 e8 b9 02 c0       	push   0xc002b9e8
c001caf6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cafd:	50                   	push   eax
c001cafe:	e8 49 3b fe ff       	call   c000064c <memcmp>
c001cb03:	83 c4 10             	add    esp,0x10
c001cb06:	85 c0                	test   eax,eax
c001cb08:	75 21                	jne    c001cb2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb12:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb1d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb24:	89 d0                	mov    eax,edx
c001cb26:	40                   	inc    eax
c001cb27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb2b:	50                   	push   eax
c001cb2c:	50                   	push   eax
c001cb2d:	68 b4 b9 02 c0       	push   0xc002b9b4
c001cb32:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb39:	50                   	push   eax
c001cb3a:	e8 59 3d fe ff       	call   c0000898 <strcmp>
c001cb3f:	83 c4 10             	add    esp,0x10
c001cb42:	85 c0                	test   eax,eax
c001cb44:	75 0f                	jne    c001cb55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cb46:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb55:	50                   	push   eax
c001cb56:	50                   	push   eax
c001cb57:	68 bc b9 02 c0       	push   0xc002b9bc
c001cb5c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb63:	50                   	push   eax
c001cb64:	e8 2f 3d fe ff       	call   c0000898 <strcmp>
c001cb69:	83 c4 10             	add    esp,0x10
c001cb6c:	85 c0                	test   eax,eax
c001cb6e:	75 0f                	jne    c001cb7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cb70:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cb7f:	43                   	inc    ebx
c001cb80:	e9 c6 fe ff ff       	jmp    c001ca4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cb85:	31 d2                	xor    edx,edx
c001cb87:	50                   	push   eax
c001cb88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb8c:	52                   	push   edx
c001cb8d:	50                   	push   eax
c001cb8e:	55                   	push   ebp
c001cb8f:	e8 8e 61 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001cb94:	58                   	pop    eax
c001cb95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb99:	e8 fb 29 ff ff       	call   c000f599 <malloc>
c001cb9e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cba1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cba5:	31 d2                	xor    edx,edx
c001cba7:	58                   	pop    eax
c001cba8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cbac:	53                   	push   ebx
c001cbad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cbb1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbb5:	52                   	push   edx
c001cbb6:	50                   	push   eax
c001cbb7:	55                   	push   ebp
c001cbb8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbbb:	83 c4 14             	add    esp,0x14
c001cbbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbc2:	e8 d2 29 ff ff       	call   c000f599 <malloc>
c001cbc7:	31 d2                	xor    edx,edx
c001cbc9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbcd:	83 c4 0c             	add    esp,0xc
c001cbd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbd4:	52                   	push   edx
c001cbd5:	50                   	push   eax
c001cbd6:	55                   	push   ebp
c001cbd7:	e8 46 61 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001cbdc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbdf:	31 d2                	xor    edx,edx
c001cbe1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbe4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cbe8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cbec:	52                   	push   edx
c001cbed:	50                   	push   eax
c001cbee:	55                   	push   ebp
c001cbef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbf2:	83 c4 20             	add    esp,0x20
c001cbf5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cbfd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc01:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cc05:	0f 84 0b 03 00 00    	je     c001cf16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cc0b:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cc12:	31 d2                	xor    edx,edx
c001cc14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc18:	c1 e8 03             	shr    eax,0x3
c001cc1b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cc1f:	51                   	push   ecx
c001cc20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc24:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cc28:	52                   	push   edx
c001cc29:	50                   	push   eax
c001cc2a:	55                   	push   ebp
c001cc2b:	e8 f2 60 ff ff       	call   c0012d22 <File::seek(unsigned long long)>
c001cc30:	5b                   	pop    ebx
c001cc31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc35:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cc3c:	e8 58 29 ff ff       	call   c000f599 <malloc>
c001cc41:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc48:	31 d2                	xor    edx,edx
c001cc4a:	5e                   	pop    esi
c001cc4b:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cc4f:	50                   	push   eax
c001cc50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc58:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cc5f:	52                   	push   edx
c001cc60:	50                   	push   eax
c001cc61:	55                   	push   ebp
c001cc62:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc65:	83 c4 20             	add    esp,0x20
c001cc68:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cc70:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cc74:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cc78:	0f 8d 7c 02 00 00    	jge    c001cefa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cc7e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cc82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc86:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cc8b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cc8e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cc92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc96:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cc9a:	89 d8                	mov    eax,ebx
c001cc9c:	c1 e8 08             	shr    eax,0x8
c001cc9f:	89 c6                	mov    esi,eax
c001cca1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cca5:	c1 e6 04             	shl    esi,0x4
c001cca8:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001ccac:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ccaf:	85 d2                	test   edx,edx
c001ccb1:	0f 85 bf 00 00 00    	jne    c001cd76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ccb7:	83 ec 0c             	sub    esp,0xc
c001ccba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccbe:	03 06                	add    eax,DWORD PTR [esi]
c001ccc0:	50                   	push   eax
c001ccc1:	e8 4b f8 ff ff       	call   c001c511 <Thr::getAddressOfKernelSymbol(char const*)>
c001ccc6:	83 c4 10             	add    esp,0x10
c001ccc9:	89 c2                	mov    edx,eax
c001cccb:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001ccd0:	85 c0                	test   eax,eax
c001ccd2:	0f 85 9e 00 00 00    	jne    c001cd76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ccd8:	83 ec 0c             	sub    esp,0xc
c001ccdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccdf:	03 06                	add    eax,DWORD PTR [esi]
c001cce1:	50                   	push   eax
c001cce2:	e8 58 18 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cce7:	83 c4 10             	add    esp,0x10
c001ccea:	89 c2                	mov    edx,eax
c001ccec:	85 c0                	test   eax,eax
c001ccee:	0f 85 82 00 00 00    	jne    c001cd76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ccf4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001ccf8:	50                   	push   eax
c001ccf9:	50                   	push   eax
c001ccfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccfe:	03 06                	add    eax,DWORD PTR [esi]
c001cd00:	50                   	push   eax
c001cd01:	68 f2 b9 02 c0       	push   0xc002b9f2
c001cd06:	e8 96 59 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001cd0b:	58                   	pop    eax
c001cd0c:	5a                   	pop    edx
c001cd0d:	68 0c ba 02 c0       	push   0xc002ba0c
c001cd12:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd19:	50                   	push   eax
c001cd1a:	e8 ed 3a fe ff       	call   c000080c <strcpy>
c001cd1f:	59                   	pop    ecx
c001cd20:	58                   	pop    eax
c001cd21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd25:	03 06                	add    eax,DWORD PTR [esi]
c001cd27:	50                   	push   eax
c001cd28:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd2f:	50                   	push   eax
c001cd30:	e8 17 3c fe ff       	call   c000094c <strcat>
c001cd35:	58                   	pop    eax
c001cd36:	5a                   	pop    edx
c001cd37:	68 a2 ba 02 c0       	push   0xc002baa2
c001cd3c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd43:	50                   	push   eax
c001cd44:	e8 03 3c fe ff       	call   c000094c <strcat>
c001cd49:	83 c4 10             	add    esp,0x10
c001cd4c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd51:	0f 84 5d 01 00 00    	je     c001ceb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd57:	83 ec 0c             	sub    esp,0xc
c001cd5a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd61:	50                   	push   eax
c001cd62:	e8 a6 d0 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001cd67:	83 c4 10             	add    esp,0x10
c001cd6a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cd6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cd72:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cd76:	80 fb 01             	cmp    bl,0x1
c001cd79:	0f 85 88 00 00 00    	jne    c001ce07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cd7f:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cd86:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cd8a:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cd8e:	01 ce                	add    esi,ecx
c001cd90:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cd96:	0f 94 c0             	sete   al
c001cd99:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cd9f:	0f 94 c3             	sete   bl
c001cda2:	09 c3                	or     ebx,eax
c001cda4:	8b 06                	mov    eax,DWORD PTR [esi]
c001cda6:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cdab:	74 41                	je     c001cdee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cdad:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cdb0:	84 db                	test   bl,bl
c001cdb2:	75 15                	jne    c001cdc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cdb4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdb8:	66 83 f8 0c          	cmp    ax,0xc
c001cdbc:	76 05                	jbe    c001cdc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cdbe:	b8 0c 00 00 00       	mov    eax,0xc
c001cdc3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cdc7:	76 37                	jbe    c001ce00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cdc9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cdcd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cdd2:	0f 84 dc 00 00 00    	je     c001ceb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cdd8:	83 ec 0c             	sub    esp,0xc
c001cddb:	68 23 ba 02 c0       	push   0xc002ba23
c001cde0:	e8 28 d0 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001cde5:	83 c4 10             	add    esp,0x10
c001cde8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cdec:	eb 12                	jmp    c001ce00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cdee:	01 c1                	add    ecx,eax
c001cdf0:	84 db                	test   bl,bl
c001cdf2:	75 0c                	jne    c001ce00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cdf4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdf8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cdfc:	77 02                	ja     c001ce00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cdfe:	01 d1                	add    ecx,edx
c001ce00:	89 0e                	mov    DWORD PTR [esi],ecx
c001ce02:	e9 ea 00 00 00       	jmp    c001cef1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce07:	80 fb 02             	cmp    bl,0x2
c001ce0a:	75 7c                	jne    c001ce88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001ce0c:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ce13:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ce17:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ce1b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce21:	74 20                	je     c001ce43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce23:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce29:	74 18                	je     c001ce43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce2b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce2f:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce34:	66 83 f8 0e          	cmp    ax,0xe
c001ce38:	77 03                	ja     c001ce3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001ce3a:	8d 48 fc             	lea    ecx,[eax-0x4]
c001ce3d:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001ce41:	76 1f                	jbe    c001ce62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001ce43:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ce47:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce4c:	74 66                	je     c001ceb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce4e:	83 ec 0c             	sub    esp,0xc
c001ce51:	68 3f ba 02 c0       	push   0xc002ba3f
c001ce56:	e8 b2 cf ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001ce5b:	83 c4 10             	add    esp,0x10
c001ce5e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ce62:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce64:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce69:	74 13                	je     c001ce7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001ce6b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ce6f:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ce76:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001ce7a:	01 c8                	add    eax,ecx
c001ce7c:	eb 04                	jmp    c001ce82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001ce7e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ce82:	01 c2                	add    edx,eax
c001ce84:	89 16                	mov    DWORD PTR [esi],edx
c001ce86:	eb 69                	jmp    c001cef1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce88:	0f b6 db             	movzx  ebx,bl
c001ce8b:	50                   	push   eax
c001ce8c:	50                   	push   eax
c001ce8d:	53                   	push   ebx
c001ce8e:	68 5b ba 02 c0       	push   0xc002ba5b
c001ce93:	e8 09 58 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001ce98:	83 c4 10             	add    esp,0x10
c001ce9b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cea0:	74 12                	je     c001ceb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cea2:	83 ec 0c             	sub    esp,0xc
c001cea5:	68 66 ba 02 c0       	push   0xc002ba66
c001ceaa:	e8 5e cf ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001ceaf:	83 c4 10             	add    esp,0x10
c001ceb2:	eb 3d                	jmp    c001cef1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ceb4:	83 ec 0c             	sub    esp,0xc
c001ceb7:	55                   	push   ebp
c001ceb8:	e8 05 5e ff ff       	call   c0012cc2 <File::close()>
c001cebd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cec0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cec3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cec6:	59                   	pop    ecx
c001cec7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cecb:	e8 d9 26 ff ff       	call   c000f5a9 <free>
c001ced0:	5b                   	pop    ebx
c001ced1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ced5:	e8 cf 26 ff ff       	call   c000f5a9 <free>
c001ceda:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cedd:	e8 c7 26 ff ff       	call   c000f5a9 <free>
c001cee2:	5e                   	pop    esi
c001cee3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cee7:	e8 bd 26 ff ff       	call   c000f5a9 <free>
c001ceec:	83 c4 10             	add    esp,0x10
c001ceef:	eb 21                	jmp    c001cf12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cef1:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cef5:	e9 76 fd ff ff       	jmp    c001cc70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cefa:	83 ec 0c             	sub    esp,0xc
c001cefd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf01:	e8 a3 26 ff ff       	call   c000f5a9 <free>
c001cf06:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cf0a:	83 c4 10             	add    esp,0x10
c001cf0d:	e9 eb fc ff ff       	jmp    c001cbfd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cf12:	31 c0                	xor    eax,eax
c001cf14:	eb 33                	jmp    c001cf49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cf16:	83 ec 0c             	sub    esp,0xc
c001cf19:	55                   	push   ebp
c001cf1a:	e8 a3 5d ff ff       	call   c0012cc2 <File::close()>
c001cf1f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf22:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf28:	58                   	pop    eax
c001cf29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf2d:	e8 77 26 ff ff       	call   c000f5a9 <free>
c001cf32:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf35:	e8 6f 26 ff ff       	call   c000f5a9 <free>
c001cf3a:	5a                   	pop    edx
c001cf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf3f:	e8 65 26 ff ff       	call   c000f5a9 <free>
c001cf44:	83 c4 10             	add    esp,0x10
c001cf47:	b0 01                	mov    al,0x1
c001cf49:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cf4f:	5b                   	pop    ebx
c001cf50:	5e                   	pop    esi
c001cf51:	5f                   	pop    edi
c001cf52:	5d                   	pop    ebp
c001cf53:	c3                   	ret    

c001cf54 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cf54:	56                   	push   esi
c001cf55:	31 d2                	xor    edx,edx
c001cf57:	53                   	push   ebx
c001cf58:	8b 1d 80 06 03 c0    	mov    ebx,DWORD PTR ds:0xc0030680
c001cf5e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf62:	39 d3                	cmp    ebx,edx
c001cf64:	7e 1b                	jle    c001cf81 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cf66:	8b 04 95 a0 08 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf760]
c001cf6d:	39 c8                	cmp    eax,ecx
c001cf6f:	77 0d                	ja     c001cf7e <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cf71:	8b 34 95 a0 06 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf960]
c001cf78:	01 c6                	add    esi,eax
c001cf7a:	39 ce                	cmp    esi,ecx
c001cf7c:	77 05                	ja     c001cf83 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cf7e:	42                   	inc    edx
c001cf7f:	eb e1                	jmp    c001cf62 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cf81:	31 c0                	xor    eax,eax
c001cf83:	5b                   	pop    ebx
c001cf84:	5e                   	pop    esi
c001cf85:	c3                   	ret    

c001cf86 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cf86:	53                   	push   ebx
c001cf87:	31 c0                	xor    eax,eax
c001cf89:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cf8d:	8b 1d 80 06 03 c0    	mov    ebx,DWORD PTR ds:0xc0030680
c001cf93:	39 c3                	cmp    ebx,eax
c001cf95:	7e 22                	jle    c001cfb9 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cf97:	8b 14 85 a0 08 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf760]
c001cf9e:	39 ca                	cmp    edx,ecx
c001cfa0:	77 14                	ja     c001cfb6 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfa2:	03 14 85 a0 06 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf960]
c001cfa9:	39 ca                	cmp    edx,ecx
c001cfab:	76 09                	jbe    c001cfb6 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfad:	8b 04 85 a0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf560]
c001cfb4:	eb 05                	jmp    c001cfbb <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cfb6:	40                   	inc    eax
c001cfb7:	eb da                	jmp    c001cf93 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cfb9:	31 c0                	xor    eax,eax
c001cfbb:	5b                   	pop    ebx
c001cfbc:	c3                   	ret    

c001cfbd <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cfbd:	53                   	push   ebx
c001cfbe:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cfc2:	53                   	push   ebx
c001cfc3:	e8 8c ff ff ff       	call   c001cf54 <Thr::getDriverBaseFromAddress(unsigned long)>
c001cfc8:	5a                   	pop    edx
c001cfc9:	31 d2                	xor    edx,edx
c001cfcb:	85 c0                	test   eax,eax
c001cfcd:	74 04                	je     c001cfd3 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cfcf:	89 da                	mov    edx,ebx
c001cfd1:	29 c2                	sub    edx,eax
c001cfd3:	89 d0                	mov    eax,edx
c001cfd5:	5b                   	pop    ebx
c001cfd6:	c3                   	ret    

c001cfd7 <Thr::loadDLL(char const*, bool)>:
c001cfd7:	55                   	push   ebp
c001cfd8:	57                   	push   edi
c001cfd9:	56                   	push   esi
c001cfda:	53                   	push   ebx
c001cfdb:	81 ec 34 01 00 00    	sub    esp,0x134
c001cfe1:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cfe8:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001cfef:	56                   	push   esi
c001cff0:	68 7e ba 02 c0       	push   0xc002ba7e
c001cff5:	e8 a7 56 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001cffa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d001:	e8 93 25 ff ff       	call   c000f599 <malloc>
c001d006:	83 c4 0c             	add    esp,0xc
c001d009:	89 c3                	mov    ebx,eax
c001d00b:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c001d011:	56                   	push   esi
c001d012:	50                   	push   eax
c001d013:	e8 e8 5b ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001d018:	83 c4 10             	add    esp,0x10
c001d01b:	85 db                	test   ebx,ebx
c001d01d:	75 3c                	jne    c001d05b <Thr::loadDLL(char const*, bool)+0x84>
c001d01f:	89 f8                	mov    eax,edi
c001d021:	84 c0                	test   al,al
c001d023:	0f 84 cc 01 00 00    	je     c001d1f5 <Thr::loadDLL(char const*, bool)+0x21e>
c001d029:	55                   	push   ebp
c001d02a:	55                   	push   ebp
c001d02b:	68 8f ba 02 c0       	push   0xc002ba8f
c001d030:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d034:	55                   	push   ebp
c001d035:	e8 d2 37 fe ff       	call   c000080c <strcpy>
c001d03a:	58                   	pop    eax
c001d03b:	5a                   	pop    edx
c001d03c:	56                   	push   esi
c001d03d:	55                   	push   ebp
c001d03e:	e8 09 39 fe ff       	call   c000094c <strcat>
c001d043:	59                   	pop    ecx
c001d044:	58                   	pop    eax
c001d045:	68 a2 ba 02 c0       	push   0xc002baa2
c001d04a:	55                   	push   ebp
c001d04b:	e8 fc 38 fe ff       	call   c000094c <strcat>
c001d050:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d053:	e8 b5 cd ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001d058:	83 c4 10             	add    esp,0x10
c001d05b:	51                   	push   ecx
c001d05c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d060:	50                   	push   eax
c001d061:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d065:	50                   	push   eax
c001d066:	53                   	push   ebx
c001d067:	e8 a4 5e ff ff       	call   c0012f10 <File::stat(unsigned long long*, bool*)>
c001d06c:	83 c4 10             	add    esp,0x10
c001d06f:	85 db                	test   ebx,ebx
c001d071:	74 0c                	je     c001d07f <Thr::loadDLL(char const*, bool)+0xa8>
c001d073:	83 ec 0c             	sub    esp,0xc
c001d076:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d078:	53                   	push   ebx
c001d079:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d07c:	83 c4 10             	add    esp,0x10
c001d07f:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d084:	75 0a                	jne    c001d090 <Thr::loadDLL(char const*, bool)+0xb9>
c001d086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d08a:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d08e:	75 3c                	jne    c001d0cc <Thr::loadDLL(char const*, bool)+0xf5>
c001d090:	89 f8                	mov    eax,edi
c001d092:	84 c0                	test   al,al
c001d094:	0f 84 43 01 00 00    	je     c001d1dd <Thr::loadDLL(char const*, bool)+0x206>
c001d09a:	51                   	push   ecx
c001d09b:	51                   	push   ecx
c001d09c:	68 8f ba 02 c0       	push   0xc002ba8f
c001d0a1:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d0a5:	53                   	push   ebx
c001d0a6:	e8 61 37 fe ff       	call   c000080c <strcpy>
c001d0ab:	5d                   	pop    ebp
c001d0ac:	58                   	pop    eax
c001d0ad:	56                   	push   esi
c001d0ae:	53                   	push   ebx
c001d0af:	e8 98 38 fe ff       	call   c000094c <strcat>
c001d0b4:	58                   	pop    eax
c001d0b5:	5a                   	pop    edx
c001d0b6:	68 a2 ba 02 c0       	push   0xc002baa2
c001d0bb:	53                   	push   ebx
c001d0bc:	e8 8b 38 fe ff       	call   c000094c <strcat>
c001d0c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0c4:	e8 44 cd ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001d0c9:	83 c4 10             	add    esp,0x10
c001d0cc:	52                   	push   edx
c001d0cd:	6a 03                	push   0x3
c001d0cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0d3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d0d7:	05 ff 0f 00 00       	add    eax,0xfff
c001d0dc:	83 d2 00             	adc    edx,0x0
c001d0df:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d0e3:	50                   	push   eax
c001d0e4:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c001d0ea:	e8 c5 49 ff ff       	call   c0011ab4 <VAS::allocatePages(int, int)>
c001d0ef:	59                   	pop    ecx
c001d0f0:	89 c3                	mov    ebx,eax
c001d0f2:	5d                   	pop    ebp
c001d0f3:	50                   	push   eax
c001d0f4:	68 42 a0 02 c0       	push   0xc002a042
c001d0f9:	e8 a3 55 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d0fe:	89 34 24             	mov    DWORD PTR [esp],esi
c001d101:	e8 66 36 fe ff       	call   c000076c <strlen>
c001d106:	8b 2d 80 06 03 c0    	mov    ebp,DWORD PTR ds:0xc0030680
c001d10c:	40                   	inc    eax
c001d10d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d110:	e8 84 24 ff ff       	call   c000f599 <malloc>
c001d115:	89 04 ad a0 0a 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf560],eax
c001d11c:	58                   	pop    eax
c001d11d:	a1 80 06 03 c0       	mov    eax,ds:0xc0030680
c001d122:	5a                   	pop    edx
c001d123:	56                   	push   esi
c001d124:	ff 34 85 a0 0a 03 c0 	push   DWORD PTR [eax*4-0x3ffcf560]
c001d12b:	e8 dc 36 fe ff       	call   c000080c <strcpy>
c001d130:	a1 80 06 03 c0       	mov    eax,ds:0xc0030680
c001d135:	8d 50 01             	lea    edx,[eax+0x1]
c001d138:	89 1c 85 a0 08 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf760],ebx
c001d13f:	89 15 80 06 03 c0    	mov    DWORD PTR ds:0xc0030680,edx
c001d145:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d149:	83 c4 0c             	add    esp,0xc
c001d14c:	89 14 85 a0 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf960],edx
c001d153:	6a 01                	push   0x1
c001d155:	53                   	push   ebx
c001d156:	56                   	push   esi
c001d157:	e8 c2 f6 ff ff       	call   c001c81e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d15c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d160:	83 c4 10             	add    esp,0x10
c001d163:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d168:	0f 85 83 00 00 00    	jne    c001d1f1 <Thr::loadDLL(char const*, bool)+0x21a>
c001d16e:	89 f8                	mov    eax,edi
c001d170:	84 c0                	test   al,al
c001d172:	74 6d                	je     c001d1e1 <Thr::loadDLL(char const*, bool)+0x20a>
c001d174:	83 ec 0c             	sub    esp,0xc
c001d177:	68 a4 ba 02 c0       	push   0xc002baa4
c001d17c:	e8 8c cc ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001d181:	83 c4 10             	add    esp,0x10
c001d184:	eb 5b                	jmp    c001d1e1 <Thr::loadDLL(char const*, bool)+0x20a>
c001d186:	89 ee                	mov    esi,ebp
c001d188:	50                   	push   eax
c001d189:	c1 e6 0c             	shl    esi,0xc
c001d18c:	50                   	push   eax
c001d18d:	01 de                	add    esi,ebx
c001d18f:	56                   	push   esi
c001d190:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c001d196:	e8 81 44 ff ff       	call   c001161c <VAS::getPageTableEntry(unsigned long)>
c001d19b:	83 c4 10             	add    esp,0x10
c001d19e:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d1a1:	75 0c                	jne    c001d1af <Thr::loadDLL(char const*, bool)+0x1d8>
c001d1a3:	83 ec 0c             	sub    esp,0xc
c001d1a6:	56                   	push   esi
c001d1a7:	e8 54 27 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c001d1ac:	83 c4 10             	add    esp,0x10
c001d1af:	45                   	inc    ebp
c001d1b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1b8:	05 ff 0f 00 00       	add    eax,0xfff
c001d1bd:	bf 00 00 00 00       	mov    edi,0x0
c001d1c2:	83 d2 00             	adc    edx,0x0
c001d1c5:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d1c9:	c1 ea 0c             	shr    edx,0xc
c001d1cc:	39 c5                	cmp    ebp,eax
c001d1ce:	89 d1                	mov    ecx,edx
c001d1d0:	89 f8                	mov    eax,edi
c001d1d2:	19 c8                	sbb    eax,ecx
c001d1d4:	72 b0                	jb     c001d186 <Thr::loadDLL(char const*, bool)+0x1af>
c001d1d6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d1db:	75 18                	jne    c001d1f5 <Thr::loadDLL(char const*, bool)+0x21e>
c001d1dd:	31 db                	xor    ebx,ebx
c001d1df:	eb 14                	jmp    c001d1f5 <Thr::loadDLL(char const*, bool)+0x21e>
c001d1e1:	83 ec 0c             	sub    esp,0xc
c001d1e4:	68 c3 ba 02 c0       	push   0xc002bac3
c001d1e9:	e8 1f cc ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001d1ee:	83 c4 10             	add    esp,0x10
c001d1f1:	31 ed                	xor    ebp,ebp
c001d1f3:	eb bb                	jmp    c001d1b0 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d1f5:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d1fb:	89 d8                	mov    eax,ebx
c001d1fd:	5b                   	pop    ebx
c001d1fe:	5e                   	pop    esi
c001d1ff:	5f                   	pop    edi
c001d200:	5d                   	pop    ebp
c001d201:	c3                   	ret    

c001d202 <Thr::executeDLL(unsigned long, void*)>:
c001d202:	56                   	push   esi
c001d203:	53                   	push   ebx
c001d204:	52                   	push   edx
c001d205:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d209:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d20d:	85 db                	test   ebx,ebx
c001d20f:	75 10                	jne    c001d221 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d211:	83 ec 0c             	sub    esp,0xc
c001d214:	68 df ba 02 c0       	push   0xc002badf
c001d219:	e8 ef cb ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001d21e:	83 c4 10             	add    esp,0x10
c001d221:	50                   	push   eax
c001d222:	50                   	push   eax
c001d223:	53                   	push   ebx
c001d224:	68 09 bb 02 c0       	push   0xc002bb09
c001d229:	e8 73 54 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d22e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d232:	89 d8                	mov    eax,ebx
c001d234:	83 c4 14             	add    esp,0x14
c001d237:	5b                   	pop    ebx
c001d238:	5e                   	pop    esi
c001d239:	ff e0                	jmp    eax
c001d23b:	90                   	nop

c001d23c <userModeEntryPoint(void*)>:
c001d23c:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001d241:	48                   	dec    eax
c001d242:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001d247:	75 01                	jne    c001d24a <userModeEntryPoint(void*)+0xe>
c001d249:	fb                   	sti    
c001d24a:	fb                   	sti    
c001d24b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d250:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d253:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d259:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d25d:	e9 c8 30 fe ff       	jmp    c000032a <goToUsermode>

c001d262 <changeTSS>:
c001d262:	83 ec 14             	sub    esp,0x14
c001d265:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d26a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d26d:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d272:	c1 e2 15             	shl    edx,0x15
c001d275:	29 d0                	sub    eax,edx
c001d277:	50                   	push   eax
c001d278:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001d27d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d283:	05 7c 11 00 00       	add    eax,0x117c
c001d288:	50                   	push   eax
c001d289:	e8 bc 38 ff ff       	call   c0010b4a <TSS::setESP(unsigned long)>
c001d28e:	83 c4 1c             	add    esp,0x1c
c001d291:	c3                   	ret    

c001d292 <switchToThread(ThreadControlBlock*)>:
c001d292:	57                   	push   edi
c001d293:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001d298:	56                   	push   esi
c001d299:	85 c0                	test   eax,eax
c001d29b:	53                   	push   ebx
c001d29c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2a0:	0f 85 88 00 00 00    	jne    c001d32e <switchToThread(ThreadControlBlock*)+0x9c>
c001d2a6:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d2a9:	3c ff                	cmp    al,0xff
c001d2ab:	74 7d                	je     c001d32a <switchToThread(ThreadControlBlock*)+0x98>
c001d2ad:	0f b6 d0             	movzx  edx,al
c001d2b0:	b8 84 03 00 00       	mov    eax,0x384
c001d2b5:	29 d0                	sub    eax,edx
c001d2b7:	c1 e0 10             	shl    eax,0x10
c001d2ba:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d2bd:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d2c0:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001d2c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2cb:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d2d2:	74 4a                	je     c001d31e <switchToThread(ThreadControlBlock*)+0x8c>
c001d2d4:	0f 31                	rdtsc  
c001d2d6:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001d2db:	89 c6                	mov    esi,eax
c001d2dd:	89 d7                	mov    edi,edx
c001d2df:	2b 35 78 0e 03 c0    	sub    esi,DWORD PTR ds:0xc0030e78
c001d2e5:	89 15 8c 0e 03 c0    	mov    DWORD PTR ds:0xc0030e8c,edx
c001d2eb:	1b 3d 7c 0e 03 c0    	sbb    edi,DWORD PTR ds:0xc0030e7c
c001d2f1:	89 35 80 0e 03 c0    	mov    DWORD PTR ds:0xc0030e80,esi
c001d2f7:	a3 78 0e 03 c0       	mov    ds:0xc0030e78,eax
c001d2fc:	89 3d 84 0e 03 c0    	mov    DWORD PTR ds:0xc0030e84,edi
c001d302:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d308:	89 15 7c 0e 03 c0    	mov    DWORD PTR ds:0xc0030e7c,edx
c001d30e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d311:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d314:	01 c6                	add    esi,eax
c001d316:	11 d7                	adc    edi,edx
c001d318:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d31b:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d31e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d322:	5b                   	pop    ebx
c001d323:	5e                   	pop    esi
c001d324:	5f                   	pop    edi
c001d325:	e9 38 30 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d32a:	31 c0                	xor    eax,eax
c001d32c:	eb 8f                	jmp    c001d2bd <switchToThread(ThreadControlBlock*)+0x2b>
c001d32e:	5b                   	pop    ebx
c001d32f:	c7 05 40 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x1
c001d339:	5e                   	pop    esi
c001d33a:	5f                   	pop    edi
c001d33b:	c3                   	ret    

c001d33c <Process::addArgs(char**)>:
c001d33c:	57                   	push   edi
c001d33d:	56                   	push   esi
c001d33e:	53                   	push   ebx
c001d33f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d343:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d347:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d351:	85 ff                	test   edi,edi
c001d353:	74 3d                	je     c001d392 <Process::addArgs(char**)+0x56>
c001d355:	8b 07                	mov    eax,DWORD PTR [edi]
c001d357:	85 c0                	test   eax,eax
c001d359:	74 37                	je     c001d392 <Process::addArgs(char**)+0x56>
c001d35b:	31 db                	xor    ebx,ebx
c001d35d:	83 ec 0c             	sub    esp,0xc
c001d360:	50                   	push   eax
c001d361:	e8 06 34 fe ff       	call   c000076c <strlen>
c001d366:	40                   	inc    eax
c001d367:	89 04 24             	mov    DWORD PTR [esp],eax
c001d36a:	e8 2a 22 ff ff       	call   c000f599 <malloc>
c001d36f:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d376:	5a                   	pop    edx
c001d377:	59                   	pop    ecx
c001d378:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d37b:	43                   	inc    ebx
c001d37c:	50                   	push   eax
c001d37d:	e8 8a 34 fe ff       	call   c000080c <strcpy>
c001d382:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d388:	83 c4 10             	add    esp,0x10
c001d38b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d38e:	85 c0                	test   eax,eax
c001d390:	75 cb                	jne    c001d35d <Process::addArgs(char**)+0x21>
c001d392:	5b                   	pop    ebx
c001d393:	5e                   	pop    esi
c001d394:	5f                   	pop    edi
c001d395:	c3                   	ret    

c001d396 <Process::Process(char const*, Process*, char**)>:
c001d396:	56                   	push   esi
c001d397:	53                   	push   ebx
c001d398:	83 ec 14             	sub    esp,0x14
c001d39b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d39f:	05 0c 02 00 00       	add    eax,0x20c
c001d3a4:	bb 07 00 00 00       	mov    ebx,0x7
c001d3a9:	89 c6                	mov    esi,eax
c001d3ab:	85 db                	test   ebx,ebx
c001d3ad:	78 12                	js     c001d3c1 <Process::Process(char const*, Process*, char**)+0x2b>
c001d3af:	83 ec 0c             	sub    esp,0xc
c001d3b2:	56                   	push   esi
c001d3b3:	e8 9e b6 00 00       	call   c0028a56 <ThreadControlBlock::ThreadControlBlock()>
c001d3b8:	83 c4 10             	add    esp,0x10
c001d3bb:	83 c6 63             	add    esi,0x63
c001d3be:	4b                   	dec    ebx
c001d3bf:	eb ea                	jmp    c001d3ab <Process::Process(char const*, Process*, char**)+0x15>
c001d3c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3c5:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d3cc:	83 ec 0c             	sub    esp,0xc
c001d3cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3d3:	e8 be c8 ff ff       	call   c0019c96 <Krnl::newProcessEnv(Process*)>
c001d3d8:	83 c4 10             	add    esp,0x10
c001d3db:	89 c2                	mov    edx,eax
c001d3dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3e1:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d3e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3eb:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d3f4:	a1 b0 ce 02 c0       	mov    eax,ds:0xc002ceb0
c001d3f9:	8d 50 01             	lea    edx,[eax+0x1]
c001d3fc:	89 15 b0 ce 02 c0    	mov    DWORD PTR ds:0xc002ceb0,edx
c001d402:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d406:	89 02                	mov    DWORD PTR [edx],eax
c001d408:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d410:	83 ec 0c             	sub    esp,0xc
c001d413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d417:	e8 7d 21 ff ff       	call   c000f599 <malloc>
c001d41c:	83 c4 10             	add    esp,0x10
c001d41f:	89 c3                	mov    ebx,eax
c001d421:	83 ec 08             	sub    esp,0x8
c001d424:	6a 00                	push   0x0
c001d426:	53                   	push   ebx
c001d427:	e8 30 4a ff ff       	call   c0011e5c <VAS::VAS(bool)>
c001d42c:	83 c4 10             	add    esp,0x10
c001d42f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d433:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d439:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d43d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d44b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d44f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d455:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d459:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d45f:	85 c0                	test   eax,eax
c001d461:	74 42                	je     c001d4a5 <Process::Process(char const*, Process*, char**)+0x10f>
c001d463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d467:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d46d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d477:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d47d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d481:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d487:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d48d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d491:	05 0c 01 00 00       	add    eax,0x10c
c001d496:	83 ec 08             	sub    esp,0x8
c001d499:	52                   	push   edx
c001d49a:	50                   	push   eax
c001d49b:	e8 6c 33 fe ff       	call   c000080c <strcpy>
c001d4a0:	83 c4 10             	add    esp,0x10
c001d4a3:	eb 63                	jmp    c001d508 <Process::Process(char const*, Process*, char**)+0x172>
c001d4a5:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d4ad:	83 ec 0c             	sub    esp,0xc
c001d4b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4b4:	e8 e0 20 ff ff       	call   c000f599 <malloc>
c001d4b9:	83 c4 10             	add    esp,0x10
c001d4bc:	89 c3                	mov    ebx,eax
c001d4be:	83 ec 08             	sub    esp,0x8
c001d4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4c5:	53                   	push   ebx
c001d4c6:	e8 93 33 ff ff       	call   c001085e <VgaText::VgaText(char const*)>
c001d4cb:	83 c4 10             	add    esp,0x10
c001d4ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4d2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d4d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4dc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d4e2:	83 ec 0c             	sub    esp,0xc
c001d4e5:	50                   	push   eax
c001d4e6:	e8 32 2b ff ff       	call   c001001d <addToTerminalCycle(VgaText*)>
c001d4eb:	83 c4 10             	add    esp,0x10
c001d4ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4f2:	05 0c 01 00 00       	add    eax,0x10c
c001d4f7:	83 ec 08             	sub    esp,0x8
c001d4fa:	68 28 bb 02 c0       	push   0xc002bb28
c001d4ff:	50                   	push   eax
c001d500:	e8 07 33 fe ff       	call   c000080c <strcpy>
c001d505:	83 c4 10             	add    esp,0x10
c001d508:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d50c:	83 c0 0c             	add    eax,0xc
c001d50f:	83 ec 08             	sub    esp,0x8
c001d512:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d516:	50                   	push   eax
c001d517:	e8 f0 32 fe ff       	call   c000080c <strcpy>
c001d51c:	83 c4 10             	add    esp,0x10
c001d51f:	83 ec 08             	sub    esp,0x8
c001d522:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d526:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d52a:	e8 0d fe ff ff       	call   c001d33c <Process::addArgs(char**)>
c001d52f:	83 c4 10             	add    esp,0x10
c001d532:	83 ec 08             	sub    esp,0x8
c001d535:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d539:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d53d:	e8 a6 ed ff ff       	call   c001c2e8 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d542:	83 c4 10             	add    esp,0x10
c001d545:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d549:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d54d:	83 f0 01             	xor    eax,0x1
c001d550:	88 c2                	mov    dl,al
c001d552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d556:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d55c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d561:	83 ec 08             	sub    esp,0x8
c001d564:	50                   	push   eax
c001d565:	68 80 bb 02 c0       	push   0xc002bb80
c001d56a:	e8 32 51 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001d56f:	83 c4 10             	add    esp,0x10
c001d572:	90                   	nop
c001d573:	83 c4 14             	add    esp,0x14
c001d576:	5b                   	pop    ebx
c001d577:	5e                   	pop    esi
c001d578:	c3                   	ret    
c001d579:	90                   	nop

c001d57a <Process::Process(bool, char const*, Process*, char**)>:
c001d57a:	56                   	push   esi
c001d57b:	53                   	push   ebx
c001d57c:	83 ec 24             	sub    esp,0x24
c001d57f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d583:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d587:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d58b:	05 0c 02 00 00       	add    eax,0x20c
c001d590:	bb 07 00 00 00       	mov    ebx,0x7
c001d595:	89 c6                	mov    esi,eax
c001d597:	85 db                	test   ebx,ebx
c001d599:	78 12                	js     c001d5ad <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d59b:	83 ec 0c             	sub    esp,0xc
c001d59e:	56                   	push   esi
c001d59f:	e8 b2 b4 00 00       	call   c0028a56 <ThreadControlBlock::ThreadControlBlock()>
c001d5a4:	83 c4 10             	add    esp,0x10
c001d5a7:	83 c6 63             	add    esi,0x63
c001d5aa:	4b                   	dec    ebx
c001d5ab:	eb ea                	jmp    c001d597 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d5ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5b1:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d5b8:	83 ec 0c             	sub    esp,0xc
c001d5bb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5bf:	e8 d2 c6 ff ff       	call   c0019c96 <Krnl::newProcessEnv(Process*)>
c001d5c4:	83 c4 10             	add    esp,0x10
c001d5c7:	89 c2                	mov    edx,eax
c001d5c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5cd:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d5d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5d7:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d5e0:	a1 b0 ce 02 c0       	mov    eax,ds:0xc002ceb0
c001d5e5:	8d 50 01             	lea    edx,[eax+0x1]
c001d5e8:	89 15 b0 ce 02 c0    	mov    DWORD PTR ds:0xc002ceb0,edx
c001d5ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5f2:	89 02                	mov    DWORD PTR [edx],eax
c001d5f4:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d5fc:	83 ec 0c             	sub    esp,0xc
c001d5ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d603:	e8 91 1f ff ff       	call   c000f599 <malloc>
c001d608:	83 c4 10             	add    esp,0x10
c001d60b:	89 c3                	mov    ebx,eax
c001d60d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d612:	83 ec 08             	sub    esp,0x8
c001d615:	50                   	push   eax
c001d616:	53                   	push   ebx
c001d617:	e8 40 48 ff ff       	call   c0011e5c <VAS::VAS(bool)>
c001d61c:	83 c4 10             	add    esp,0x10
c001d61f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d623:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d629:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d62d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d637:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d63b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d63f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d649:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d64f:	85 c0                	test   eax,eax
c001d651:	74 42                	je     c001d695 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d653:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d657:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d65d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d663:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d667:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d66d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d671:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d677:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d67d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d681:	05 0c 01 00 00       	add    eax,0x10c
c001d686:	83 ec 08             	sub    esp,0x8
c001d689:	52                   	push   edx
c001d68a:	50                   	push   eax
c001d68b:	e8 7c 31 fe ff       	call   c000080c <strcpy>
c001d690:	83 c4 10             	add    esp,0x10
c001d693:	eb 63                	jmp    c001d6f8 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d695:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d69d:	83 ec 0c             	sub    esp,0xc
c001d6a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d6a4:	e8 f0 1e ff ff       	call   c000f599 <malloc>
c001d6a9:	83 c4 10             	add    esp,0x10
c001d6ac:	89 c3                	mov    ebx,eax
c001d6ae:	83 ec 08             	sub    esp,0x8
c001d6b1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d6b5:	53                   	push   ebx
c001d6b6:	e8 a3 31 ff ff       	call   c001085e <VgaText::VgaText(char const*)>
c001d6bb:	83 c4 10             	add    esp,0x10
c001d6be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6c2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d6c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6cc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d6d2:	83 ec 0c             	sub    esp,0xc
c001d6d5:	50                   	push   eax
c001d6d6:	e8 42 29 ff ff       	call   c001001d <addToTerminalCycle(VgaText*)>
c001d6db:	83 c4 10             	add    esp,0x10
c001d6de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6e2:	05 0c 01 00 00       	add    eax,0x10c
c001d6e7:	83 ec 08             	sub    esp,0x8
c001d6ea:	68 28 bb 02 c0       	push   0xc002bb28
c001d6ef:	50                   	push   eax
c001d6f0:	e8 17 31 fe ff       	call   c000080c <strcpy>
c001d6f5:	83 c4 10             	add    esp,0x10
c001d6f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6fc:	83 c0 0c             	add    eax,0xc
c001d6ff:	83 ec 08             	sub    esp,0x8
c001d702:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d706:	50                   	push   eax
c001d707:	e8 00 31 fe ff       	call   c000080c <strcpy>
c001d70c:	83 c4 10             	add    esp,0x10
c001d70f:	83 ec 08             	sub    esp,0x8
c001d712:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d716:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d71a:	e8 1d fc ff ff       	call   c001d33c <Process::addArgs(char**)>
c001d71f:	83 c4 10             	add    esp,0x10
c001d722:	90                   	nop
c001d723:	83 c4 24             	add    esp,0x24
c001d726:	5b                   	pop    ebx
c001d727:	5e                   	pop    esi
c001d728:	c3                   	ret    

c001d729 <taskStartupFunction>:
c001d729:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d72e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d731:	c3                   	ret    

c001d732 <Semaphore::Semaphore(int)>:
c001d732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d736:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d73a:	89 10                	mov    DWORD PTR [eax],edx
c001d73c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d740:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d747:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d74b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d756:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d75d:	90                   	nop
c001d75e:	c3                   	ret    
c001d75f:	90                   	nop

c001d760 <Mutex::Mutex()>:
c001d760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d764:	6a 01                	push   0x1
c001d766:	50                   	push   eax
c001d767:	e8 c6 ff ff ff       	call   c001d732 <Semaphore::Semaphore(int)>
c001d76c:	83 c4 08             	add    esp,0x8
c001d76f:	90                   	nop
c001d770:	c3                   	ret    
c001d771:	90                   	nop

c001d772 <Process::createThread(void (*)(void*), void*, int)>:
c001d772:	55                   	push   ebp
c001d773:	31 c9                	xor    ecx,ecx
c001d775:	57                   	push   edi
c001d776:	56                   	push   esi
c001d777:	53                   	push   ebx
c001d778:	83 ec 1c             	sub    esp,0x1c
c001d77b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d77f:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d786:	89 f2                	mov    edx,esi
c001d788:	0f b7 c2             	movzx  eax,dx
c001d78b:	83 e2 01             	and    edx,0x1
c001d78e:	74 16                	je     c001d7a6 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d790:	d1 f8                	sar    eax,1
c001d792:	41                   	inc    ecx
c001d793:	89 c2                	mov    edx,eax
c001d795:	83 f9 10             	cmp    ecx,0x10
c001d798:	75 ee                	jne    c001d788 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d79a:	83 c4 1c             	add    esp,0x1c
c001d79d:	31 db                	xor    ebx,ebx
c001d79f:	89 d8                	mov    eax,ebx
c001d7a1:	5b                   	pop    ebx
c001d7a2:	5e                   	pop    esi
c001d7a3:	5f                   	pop    edi
c001d7a4:	5d                   	pop    ebp
c001d7a5:	c3                   	ret    
c001d7a6:	b8 01 00 00 00       	mov    eax,0x1
c001d7ab:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d7ae:	d3 e0                	shl    eax,cl
c001d7b0:	09 c6                	or     esi,eax
c001d7b2:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d7b5:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d7bc:	89 c6                	mov    esi,eax
c001d7be:	c1 e6 05             	shl    esi,0x5
c001d7c1:	01 f0                	add    eax,esi
c001d7c3:	01 d8                	add    eax,ebx
c001d7c5:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d7cc:	75 0a                	jne    c001d7d8 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d7ce:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d7d8:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d7de:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d7e2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d7e5:	01 ca                	add    edx,ecx
c001d7e7:	83 ec 08             	sub    esp,0x8
c001d7ea:	89 d0                	mov    eax,edx
c001d7ec:	c1 e0 05             	shl    eax,0x5
c001d7ef:	01 d0                	add    eax,edx
c001d7f1:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d7f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d7f9:	01 d8                	add    eax,ebx
c001d7fb:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d801:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d807:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d80d:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d813:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d819:	89 cd                	mov    ebp,ecx
c001d81b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d81f:	f7 dd                	neg    ebp
c001d821:	c1 e5 15             	shl    ebp,0x15
c001d824:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d82a:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d830:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d83a:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d840:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d84a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d854:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d858:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d85f:	53                   	push   ebx
c001d860:	68 64 0e 03 c0       	push   0xc0030e64
c001d865:	e8 a6 af 00 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d86a:	89 d8                	mov    eax,ebx
c001d86c:	83 c4 10             	add    esp,0x10
c001d86f:	83 c4 1c             	add    esp,0x1c
c001d872:	5b                   	pop    ebx
c001d873:	5e                   	pop    esi
c001d874:	5f                   	pop    edi
c001d875:	5d                   	pop    ebp
c001d876:	c3                   	ret    
c001d877:	90                   	nop

c001d878 <Process::createUserThread()>:
c001d878:	83 ec 0c             	sub    esp,0xc
c001d87b:	68 80 00 00 00       	push   0x80
c001d880:	6a 00                	push   0x0
c001d882:	68 3c d2 01 c0       	push   0xc001d23c
c001d887:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d88b:	e8 e2 fe ff ff       	call   c001d772 <Process::createThread(void (*)(void*), void*, int)>
c001d890:	83 c4 1c             	add    esp,0x1c
c001d893:	c3                   	ret    

c001d894 <setupMultitasking(void (*)())>:
c001d894:	56                   	push   esi
c001d895:	53                   	push   ebx
c001d896:	51                   	push   ecx
c001d897:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d89b:	eb 10                	jmp    c001d8ad <setupMultitasking(void (*)())+0x19>
c001d89d:	83 ec 0c             	sub    esp,0xc
c001d8a0:	68 64 0e 03 c0       	push   0xc0030e64
c001d8a5:	e8 b8 ae 00 00       	call   c0028762 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d8aa:	83 c4 10             	add    esp,0x10
c001d8ad:	83 ec 0c             	sub    esp,0xc
c001d8b0:	68 64 0e 03 c0       	push   0xc0030e64
c001d8b5:	e8 84 ae 00 00       	call   c002873e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d8ba:	83 c4 10             	add    esp,0x10
c001d8bd:	84 c0                	test   al,al
c001d8bf:	74 dc                	je     c001d89d <setupMultitasking(void (*)())+0x9>
c001d8c1:	83 ec 0c             	sub    esp,0xc
c001d8c4:	68 3f 07 00 00       	push   0x73f
c001d8c9:	e8 cb 1c ff ff       	call   c000f599 <malloc>
c001d8ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8d5:	89 c3                	mov    ebx,eax
c001d8d7:	6a 00                	push   0x0
c001d8d9:	68 2c bb 02 c0       	push   0xc002bb2c
c001d8de:	6a 01                	push   0x1
c001d8e0:	50                   	push   eax
c001d8e1:	e8 94 fc ff ff       	call   c001d57a <Process::Process(bool, char const*, Process*, char**)>
c001d8e6:	83 c4 14             	add    esp,0x14
c001d8e9:	89 1d 70 0e 03 c0    	mov    DWORD PTR ds:0xc0030e70,ebx
c001d8ef:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d8f5:	e8 31 2a ff ff       	call   c001032b <setActiveTerminal(VgaText*)>
c001d8fa:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d902:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d90c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d912:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d915:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d91f:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d925:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d92b:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d935:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d93f:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d949:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d94f:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d959:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d95f:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d969:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d96f:	58                   	pop    eax
c001d970:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d976:	5a                   	pop    edx
c001d977:	68 28 bb 02 c0       	push   0xc002bb28
c001d97c:	50                   	push   eax
c001d97d:	e8 8a 2e fe ff       	call   c000080c <strcpy>
c001d982:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d989:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d98d:	83 c4 14             	add    esp,0x14
c001d990:	5b                   	pop    ebx
c001d991:	5e                   	pop    esi
c001d992:	e9 bd 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d997 <schedule()>:
c001d997:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001d99c:	85 c0                	test   eax,eax
c001d99e:	74 0b                	je     c001d9ab <schedule()+0x14>
c001d9a0:	c7 05 40 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x1
c001d9aa:	c3                   	ret    
c001d9ab:	53                   	push   ebx
c001d9ac:	83 ec 14             	sub    esp,0x14
c001d9af:	68 64 0e 03 c0       	push   0xc0030e64
c001d9b4:	e8 85 ad 00 00       	call   c002873e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d9b9:	83 c4 10             	add    esp,0x10
c001d9bc:	84 c0                	test   al,al
c001d9be:	75 38                	jne    c001d9f8 <schedule()+0x61>
c001d9c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9c5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d9c8:	4a                   	dec    edx
c001d9c9:	74 32                	je     c001d9fd <schedule()+0x66>
c001d9cb:	83 ec 0c             	sub    esp,0xc
c001d9ce:	68 64 0e 03 c0       	push   0xc0030e64
c001d9d3:	e8 82 ad 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d9d8:	c7 04 24 64 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e64
c001d9df:	89 c3                	mov    ebx,eax
c001d9e1:	e8 7c ad 00 00       	call   c0028762 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d9e6:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d9ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d9f0:	e8 9d f8 ff ff       	call   c001d292 <switchToThread(ThreadControlBlock*)>
c001d9f5:	83 c4 10             	add    esp,0x10
c001d9f8:	83 c4 08             	add    esp,0x8
c001d9fb:	5b                   	pop    ebx
c001d9fc:	c3                   	ret    
c001d9fd:	83 ec 08             	sub    esp,0x8
c001da00:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001da07:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da0d:	68 64 0e 03 c0       	push   0xc0030e64
c001da12:	e8 f9 ad 00 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da17:	83 c4 10             	add    esp,0x10
c001da1a:	eb af                	jmp    c001d9cb <schedule()+0x34>

c001da1c <Semaphore::tryAcquire()>:
c001da1c:	53                   	push   ebx
c001da1d:	83 ec 08             	sub    esp,0x8
c001da20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da24:	fa                   	cli    
c001da25:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001da2a:	8d 50 01             	lea    edx,[eax+0x1]
c001da2d:	89 15 48 0e 03 c0    	mov    DWORD PTR ds:0xc0030e48,edx
c001da33:	8b 15 44 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e44
c001da39:	8d 5a 01             	lea    ebx,[edx+0x1]
c001da3c:	89 1d 44 0e 03 c0    	mov    DWORD PTR ds:0xc0030e44,ebx
c001da42:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001da45:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001da47:	7c 2a                	jl     c001da73 <Semaphore::tryAcquire()+0x57>
c001da49:	89 15 44 0e 03 c0    	mov    DWORD PTR ds:0xc0030e44,edx
c001da4f:	85 d2                	test   edx,edx
c001da51:	75 0a                	jne    c001da5d <Semaphore::tryAcquire()+0x41>
c001da53:	8b 15 40 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e40
c001da59:	85 d2                	test   edx,edx
c001da5b:	75 5b                	jne    c001dab8 <Semaphore::tryAcquire()+0x9c>
c001da5d:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001da62:	85 c0                	test   eax,eax
c001da64:	74 07                	je     c001da6d <Semaphore::tryAcquire()+0x51>
c001da66:	31 c0                	xor    eax,eax
c001da68:	83 c4 08             	add    esp,0x8
c001da6b:	5b                   	pop    ebx
c001da6c:	c3                   	ret    
c001da6d:	fb                   	sti    
c001da6e:	83 c4 08             	add    esp,0x8
c001da71:	5b                   	pop    ebx
c001da72:	c3                   	ret    
c001da73:	43                   	inc    ebx
c001da74:	89 15 44 0e 03 c0    	mov    DWORD PTR ds:0xc0030e44,edx
c001da7a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001da7d:	85 d2                	test   edx,edx
c001da7f:	75 1f                	jne    c001daa0 <Semaphore::tryAcquire()+0x84>
c001da81:	8b 0d 40 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030e40
c001da87:	85 c9                	test   ecx,ecx
c001da89:	74 15                	je     c001daa0 <Semaphore::tryAcquire()+0x84>
c001da8b:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001da95:	e8 fd fe ff ff       	call   c001d997 <schedule()>
c001da9a:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001da9f:	48                   	dec    eax
c001daa0:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001daa5:	85 c0                	test   eax,eax
c001daa7:	75 08                	jne    c001dab1 <Semaphore::tryAcquire()+0x95>
c001daa9:	fb                   	sti    
c001daaa:	b0 01                	mov    al,0x1
c001daac:	83 c4 08             	add    esp,0x8
c001daaf:	5b                   	pop    ebx
c001dab0:	c3                   	ret    
c001dab1:	b0 01                	mov    al,0x1
c001dab3:	83 c4 08             	add    esp,0x8
c001dab6:	5b                   	pop    ebx
c001dab7:	c3                   	ret    
c001dab8:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001dac2:	e8 d0 fe ff ff       	call   c001d997 <schedule()>
c001dac7:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001dacc:	48                   	dec    eax
c001dacd:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001dad2:	85 c0                	test   eax,eax
c001dad4:	75 90                	jne    c001da66 <Semaphore::tryAcquire()+0x4a>
c001dad6:	eb 95                	jmp    c001da6d <Semaphore::tryAcquire()+0x51>

c001dad8 <Semaphore::assertLocked(char const*)>:
c001dad8:	83 ec 0c             	sub    esp,0xc
c001dadb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dadf:	fa                   	cli    
c001dae0:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001dae6:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001daeb:	8d 48 01             	lea    ecx,[eax+0x1]
c001daee:	89 0d 44 0e 03 c0    	mov    DWORD PTR ds:0xc0030e44,ecx
c001daf4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001daf6:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001daf9:	7c 24                	jl     c001db1f <Semaphore::assertLocked(char const*)+0x47>
c001dafb:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c001db00:	85 c0                	test   eax,eax
c001db02:	75 09                	jne    c001db0d <Semaphore::assertLocked(char const*)+0x35>
c001db04:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c001db09:	85 c0                	test   eax,eax
c001db0b:	75 29                	jne    c001db36 <Semaphore::assertLocked(char const*)+0x5e>
c001db0d:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001db12:	48                   	dec    eax
c001db13:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001db18:	75 01                	jne    c001db1b <Semaphore::assertLocked(char const*)+0x43>
c001db1a:	fb                   	sti    
c001db1b:	83 c4 0c             	add    esp,0xc
c001db1e:	c3                   	ret    
c001db1f:	83 ec 0c             	sub    esp,0xc
c001db22:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001db26:	e8 e2 c2 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001db2b:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001db30:	83 c4 10             	add    esp,0x10
c001db33:	48                   	dec    eax
c001db34:	eb c5                	jmp    c001dafb <Semaphore::assertLocked(char const*)+0x23>
c001db36:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001db40:	e8 52 fe ff ff       	call   c001d997 <schedule()>
c001db45:	eb c6                	jmp    c001db0d <Semaphore::assertLocked(char const*)+0x35>

c001db47 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001db47:	83 ec 0c             	sub    esp,0xc
c001db4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db53:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db56:	e8 3c fe ff ff       	call   c001d997 <schedule()>
c001db5b:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001db60:	48                   	dec    eax
c001db61:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001db66:	75 01                	jne    c001db69 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001db68:	fb                   	sti    
c001db69:	83 c4 0c             	add    esp,0xc
c001db6c:	c3                   	ret    

c001db6d <blockTask(TaskState)>:
c001db6d:	83 ec 0c             	sub    esp,0xc
c001db70:	fa                   	cli    
c001db71:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001db77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db80:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db83:	e8 0f fe ff ff       	call   c001d997 <schedule()>
c001db88:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001db8d:	48                   	dec    eax
c001db8e:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001db93:	75 01                	jne    c001db96 <blockTask(TaskState)+0x29>
c001db95:	fb                   	sti    
c001db96:	83 c4 0c             	add    esp,0xc
c001db99:	c3                   	ret    

c001db9a <waitTask(int, int*, int)>:
c001db9a:	83 ec 18             	sub    esp,0x18
c001db9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dba2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dba6:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbb2:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dbb5:	6a 07                	push   0x7
c001dbb7:	e8 b1 ff ff ff       	call   c001db6d <blockTask(TaskState)>
c001dbbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbc1:	83 c4 10             	add    esp,0x10
c001dbc4:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dbc7:	85 d2                	test   edx,edx
c001dbc9:	74 0a                	je     c001dbd5 <waitTask(int, int*, int)+0x3b>
c001dbcb:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dbce:	89 02                	mov    DWORD PTR [edx],eax
c001dbd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbd5:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dbd8:	83 c4 0c             	add    esp,0xc
c001dbdb:	c3                   	ret    

c001dbdc <nanoSleepUntil(unsigned long long)>:
c001dbdc:	83 ec 0c             	sub    esp,0xc
c001dbdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbe3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dbe7:	3b 05 90 df 02 c0    	cmp    eax,DWORD PTR ds:0xc002df90
c001dbed:	89 d1                	mov    ecx,edx
c001dbef:	1b 0d 94 df 02 c0    	sbb    ecx,DWORD PTR ds:0xc002df94
c001dbf5:	73 04                	jae    c001dbfb <nanoSleepUntil(unsigned long long)+0x1f>
c001dbf7:	83 c4 0c             	add    esp,0xc
c001dbfa:	c3                   	ret    
c001dbfb:	fa                   	cli    
c001dbfc:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001dc02:	83 ec 08             	sub    esp,0x8
c001dc05:	ff 05 44 0e 03 c0    	inc    DWORD PTR ds:0xc0030e44
c001dc0b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc11:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dc14:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dc17:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dc1d:	68 58 0e 03 c0       	push   0xc0030e58
c001dc22:	e8 e9 ab 00 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc27:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dc2e:	e8 3a ff ff ff       	call   c001db6d <blockTask(TaskState)>
c001dc33:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001dc38:	83 c4 10             	add    esp,0x10
c001dc3b:	48                   	dec    eax
c001dc3c:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c001dc41:	85 c0                	test   eax,eax
c001dc43:	75 09                	jne    c001dc4e <nanoSleepUntil(unsigned long long)+0x72>
c001dc45:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c001dc4a:	85 c0                	test   eax,eax
c001dc4c:	75 12                	jne    c001dc60 <nanoSleepUntil(unsigned long long)+0x84>
c001dc4e:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001dc53:	48                   	dec    eax
c001dc54:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001dc59:	75 9c                	jne    c001dbf7 <nanoSleepUntil(unsigned long long)+0x1b>
c001dc5b:	fb                   	sti    
c001dc5c:	83 c4 0c             	add    esp,0xc
c001dc5f:	c3                   	ret    
c001dc60:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001dc6a:	e8 28 fd ff ff       	call   c001d997 <schedule()>
c001dc6f:	eb dd                	jmp    c001dc4e <nanoSleepUntil(unsigned long long)+0x72>

c001dc71 <nanoSleep(unsigned long long)>:
c001dc71:	a1 90 df 02 c0       	mov    eax,ds:0xc002df90
c001dc76:	8b 15 94 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df94
c001dc7c:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dc80:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dc84:	e9 53 ff ff ff       	jmp    c001dbdc <nanoSleepUntil(unsigned long long)>

c001dc89 <sleep(unsigned long long)>:
c001dc89:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dc91:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dc96:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dc9a:	01 ca                	add    edx,ecx
c001dc9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dca0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dca4:	eb cb                	jmp    c001dc71 <nanoSleep(unsigned long long)>

c001dca6 <Semaphore::acquire()>:
c001dca6:	83 ec 0c             	sub    esp,0xc
c001dca9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcad:	fa                   	cli    
c001dcae:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001dcb3:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001dcb9:	8d 48 01             	lea    ecx,[eax+0x1]
c001dcbc:	89 0d 44 0e 03 c0    	mov    DWORD PTR ds:0xc0030e44,ecx
c001dcc2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dcc5:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dcc7:	7d 28                	jge    c001dcf1 <Semaphore::acquire()+0x4b>
c001dcc9:	41                   	inc    ecx
c001dcca:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dccd:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c001dcd2:	85 c0                	test   eax,eax
c001dcd4:	75 09                	jne    c001dcdf <Semaphore::acquire()+0x39>
c001dcd6:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c001dcdb:	85 c0                	test   eax,eax
c001dcdd:	75 4e                	jne    c001dd2d <Semaphore::acquire()+0x87>
c001dcdf:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001dce4:	48                   	dec    eax
c001dce5:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001dcea:	75 01                	jne    c001dced <Semaphore::acquire()+0x47>
c001dcec:	fb                   	sti    
c001dced:	83 c4 0c             	add    esp,0xc
c001dcf0:	c3                   	ret    
c001dcf1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcf6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dcfd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dd00:	85 c9                	test   ecx,ecx
c001dd02:	74 3a                	je     c001dd3e <Semaphore::acquire()+0x98>
c001dd04:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dd07:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd0d:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dd10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd15:	83 ec 0c             	sub    esp,0xc
c001dd18:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dd1b:	6a 05                	push   0x5
c001dd1d:	e8 4b fe ff ff       	call   c001db6d <blockTask(TaskState)>
c001dd22:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001dd27:	83 c4 10             	add    esp,0x10
c001dd2a:	48                   	dec    eax
c001dd2b:	eb a0                	jmp    c001dccd <Semaphore::acquire()+0x27>
c001dd2d:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001dd37:	e8 5b fc ff ff       	call   c001d997 <schedule()>
c001dd3c:	eb a1                	jmp    c001dcdf <Semaphore::acquire()+0x39>
c001dd3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd43:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dd46:	eb c8                	jmp    c001dd10 <Semaphore::acquire()+0x6a>

c001dd48 <taskReturned>:
c001dd48:	83 ec 18             	sub    esp,0x18
c001dd4b:	68 a8 bb 02 c0       	push   0xc002bba8
c001dd50:	e8 b8 c0 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001dd55:	83 c4 10             	add    esp,0x10
c001dd58:	83 ec 0c             	sub    esp,0xc
c001dd5b:	6a 02                	push   0x2
c001dd5d:	e8 0b fe ff ff       	call   c001db6d <blockTask(TaskState)>
c001dd62:	fa                   	cli    
c001dd63:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001dd69:	e8 29 fc ff ff       	call   c001d997 <schedule()>
c001dd6e:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001dd73:	83 c4 10             	add    esp,0x10
c001dd76:	48                   	dec    eax
c001dd77:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001dd7c:	85 c0                	test   eax,eax
c001dd7e:	75 d8                	jne    c001dd58 <taskReturned+0x10>
c001dd80:	fb                   	sti    
c001dd81:	eb d5                	jmp    c001dd58 <taskReturned+0x10>

c001dd83 <Thr::processFromPID(int)>:
c001dd83:	57                   	push   edi
c001dd84:	56                   	push   esi
c001dd85:	53                   	push   ebx
c001dd86:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dd8a:	fa                   	cli    
c001dd8b:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001dd91:	83 ec 0c             	sub    esp,0xc
c001dd94:	68 64 0e 03 c0       	push   0xc0030e64
c001dd99:	e8 bc a9 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dd9e:	83 c4 10             	add    esp,0x10
c001dda1:	89 c7                	mov    edi,eax
c001dda3:	eb 14                	jmp    c001ddb9 <Thr::processFromPID(int)+0x36>
c001dda5:	83 ec 0c             	sub    esp,0xc
c001dda8:	68 64 0e 03 c0       	push   0xc0030e64
c001ddad:	e8 a8 a9 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddb2:	83 c4 10             	add    esp,0x10
c001ddb5:	39 f8                	cmp    eax,edi
c001ddb7:	74 49                	je     c001de02 <Thr::processFromPID(int)+0x7f>
c001ddb9:	83 ec 0c             	sub    esp,0xc
c001ddbc:	68 64 0e 03 c0       	push   0xc0030e64
c001ddc1:	e8 94 a9 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddc6:	c7 04 24 64 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e64
c001ddcd:	89 c3                	mov    ebx,eax
c001ddcf:	e8 8e a9 00 00       	call   c0028762 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ddd4:	58                   	pop    eax
c001ddd5:	5a                   	pop    edx
c001ddd6:	53                   	push   ebx
c001ddd7:	68 64 0e 03 c0       	push   0xc0030e64
c001dddc:	e8 2f aa 00 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dde1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dde4:	83 c4 10             	add    esp,0x10
c001dde7:	39 30                	cmp    DWORD PTR [eax],esi
c001dde9:	75 ba                	jne    c001dda5 <Thr::processFromPID(int)+0x22>
c001ddeb:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001ddf0:	48                   	dec    eax
c001ddf1:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001ddf6:	74 07                	je     c001ddff <Thr::processFromPID(int)+0x7c>
c001ddf8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ddfb:	5b                   	pop    ebx
c001ddfc:	5e                   	pop    esi
c001ddfd:	5f                   	pop    edi
c001ddfe:	c3                   	ret    
c001ddff:	fb                   	sti    
c001de00:	eb f6                	jmp    c001ddf8 <Thr::processFromPID(int)+0x75>
c001de02:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001de07:	48                   	dec    eax
c001de08:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001de0d:	75 05                	jne    c001de14 <Thr::processFromPID(int)+0x91>
c001de0f:	fb                   	sti    
c001de10:	5b                   	pop    ebx
c001de11:	5e                   	pop    esi
c001de12:	5f                   	pop    edi
c001de13:	c3                   	ret    
c001de14:	5b                   	pop    ebx
c001de15:	31 c0                	xor    eax,eax
c001de17:	5e                   	pop    esi
c001de18:	5f                   	pop    edi
c001de19:	c3                   	ret    

c001de1a <unblockTask(ThreadControlBlock*)>:
c001de1a:	53                   	push   ebx
c001de1b:	83 ec 08             	sub    esp,0x8
c001de1e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de22:	fa                   	cli    
c001de23:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001de29:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de2c:	85 c0                	test   eax,eax
c001de2e:	74 5a                	je     c001de8a <unblockTask(ThreadControlBlock*)+0x70>
c001de30:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de33:	48                   	dec    eax
c001de34:	74 31                	je     c001de67 <unblockTask(ThreadControlBlock*)+0x4d>
c001de36:	83 ec 0c             	sub    esp,0xc
c001de39:	68 64 0e 03 c0       	push   0xc0030e64
c001de3e:	e8 17 a9 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de43:	83 c4 10             	add    esp,0x10
c001de46:	85 c0                	test   eax,eax
c001de48:	75 17                	jne    c001de61 <unblockTask(ThreadControlBlock*)+0x47>
c001de4a:	eb 50                	jmp    c001de9c <unblockTask(ThreadControlBlock*)+0x82>
c001de4c:	83 ec 08             	sub    esp,0x8
c001de4f:	50                   	push   eax
c001de50:	68 64 0e 03 c0       	push   0xc0030e64
c001de55:	e8 88 ac 00 00       	call   c0028ae2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001de5a:	83 c4 10             	add    esp,0x10
c001de5d:	85 c0                	test   eax,eax
c001de5f:	74 3b                	je     c001de9c <unblockTask(ThreadControlBlock*)+0x82>
c001de61:	39 c3                	cmp    ebx,eax
c001de63:	75 e7                	jne    c001de4c <unblockTask(ThreadControlBlock*)+0x32>
c001de65:	eb 10                	jmp    c001de77 <unblockTask(ThreadControlBlock*)+0x5d>
c001de67:	83 ec 0c             	sub    esp,0xc
c001de6a:	68 4a bb 02 c0       	push   0xc002bb4a
c001de6f:	e8 2d 48 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001de74:	83 c4 10             	add    esp,0x10
c001de77:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001de7c:	48                   	dec    eax
c001de7d:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001de82:	75 01                	jne    c001de85 <unblockTask(ThreadControlBlock*)+0x6b>
c001de84:	fb                   	sti    
c001de85:	83 c4 08             	add    esp,0x8
c001de88:	5b                   	pop    ebx
c001de89:	c3                   	ret    
c001de8a:	83 ec 0c             	sub    esp,0xc
c001de8d:	68 33 bb 02 c0       	push   0xc002bb33
c001de92:	e8 0a 48 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001de97:	83 c4 10             	add    esp,0x10
c001de9a:	eb db                	jmp    c001de77 <unblockTask(ThreadControlBlock*)+0x5d>
c001de9c:	83 ec 08             	sub    esp,0x8
c001de9f:	53                   	push   ebx
c001dea0:	68 64 0e 03 c0       	push   0xc0030e64
c001dea5:	e8 66 a9 00 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001deaa:	83 c4 10             	add    esp,0x10
c001dead:	eb c8                	jmp    c001de77 <unblockTask(ThreadControlBlock*)+0x5d>

c001deaf <cleanupTerminatedTask(ThreadControlBlock*)>:
c001deaf:	55                   	push   ebp
c001deb0:	57                   	push   edi
c001deb1:	56                   	push   esi
c001deb2:	53                   	push   ebx
c001deb3:	83 ec 1c             	sub    esp,0x1c
c001deb6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001deba:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001debd:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dec3:	85 ff                	test   edi,edi
c001dec5:	7e 20                	jle    c001dee7 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001dec7:	31 f6                	xor    esi,esi
c001dec9:	83 ec 0c             	sub    esp,0xc
c001decc:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ded3:	46                   	inc    esi
c001ded4:	e8 d0 16 ff ff       	call   c000f5a9 <free>
c001ded9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dedc:	83 c4 10             	add    esp,0x10
c001dedf:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dee5:	7f e2                	jg     c001dec9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001dee7:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001def1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001def6:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001def9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001defc:	d3 c0                	rol    eax,cl
c001defe:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001df05:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df08:	89 f7                	mov    edi,esi
c001df0a:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001df12:	0f 85 64 01 00 00    	jne    c001e07c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df18:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001df1e:	85 ed                	test   ebp,ebp
c001df20:	74 1b                	je     c001df3d <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001df22:	83 ec 0c             	sub    esp,0xc
c001df25:	55                   	push   ebp
c001df26:	e8 87 bc ff ff       	call   c0019bb2 <EnvVarContainer::~EnvVarContainer()>
c001df2b:	59                   	pop    ecx
c001df2c:	5e                   	pop    esi
c001df2d:	6a 0c                	push   0xc
c001df2f:	55                   	push   ebp
c001df30:	e8 94 46 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c001df35:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df38:	83 c4 10             	add    esp,0x10
c001df3b:	89 f7                	mov    edi,esi
c001df3d:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df43:	85 c0                	test   eax,eax
c001df45:	0f 84 aa 00 00 00    	je     c001dff5 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df4b:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001df4e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001df52:	31 c9                	xor    ecx,ecx
c001df54:	eb 10                	jmp    c001df66 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001df56:	41                   	inc    ecx
c001df57:	83 f9 10             	cmp    ecx,0x10
c001df5a:	0f 84 95 00 00 00    	je     c001dff5 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df60:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df66:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001df6d:	d3 fa                	sar    edx,cl
c001df6f:	83 e2 01             	and    edx,0x1
c001df72:	74 e2                	je     c001df56 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df74:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001df77:	01 ca                	add    edx,ecx
c001df79:	89 d5                	mov    ebp,edx
c001df7b:	c1 e5 05             	shl    ebp,0x5
c001df7e:	01 ea                	add    edx,ebp
c001df80:	01 d0                	add    eax,edx
c001df82:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001df88:	83 fd 07             	cmp    ebp,0x7
c001df8b:	75 c9                	jne    c001df56 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df8d:	05 40 02 00 00       	add    eax,0x240
c001df92:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001df95:	83 fd ff             	cmp    ebp,0xffffffff
c001df98:	0f 8c e6 00 00 00    	jl     c001e084 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001df9e:	0f 84 97 01 00 00    	je     c001e13b <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001dfa4:	85 ed                	test   ebp,ebp
c001dfa6:	0f 84 7e 01 00 00    	je     c001e12a <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001dfac:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dfae:	75 a6                	jne    c001df56 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfb0:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfb6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfba:	01 d0                	add    eax,edx
c001dfbc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001dfc0:	83 ec 0c             	sub    esp,0xc
c001dfc3:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001dfc9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfcc:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dfd2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001dfd9:	50                   	push   eax
c001dfda:	e8 3b fe ff ff       	call   c001de1a <unblockTask(ThreadControlBlock*)>
c001dfdf:	83 c4 10             	add    esp,0x10
c001dfe2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dfe5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dfe9:	89 f7                	mov    edi,esi
c001dfeb:	41                   	inc    ecx
c001dfec:	83 f9 10             	cmp    ecx,0x10
c001dfef:	0f 85 6b ff ff ff    	jne    c001df60 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001dff5:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001dffb:	85 c0                	test   eax,eax
c001dffd:	74 5d                	je     c001e05c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001dfff:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e005:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e00b:	74 4f                	je     c001e05c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e00d:	83 ec 0c             	sub    esp,0xc
c001e010:	68 64 0e 03 c0       	push   0xc0030e64
c001e015:	e8 40 a7 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e01a:	c7 04 24 64 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e64
c001e021:	89 c7                	mov    edi,eax
c001e023:	e8 16 a7 00 00       	call   c002873e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e028:	83 c4 10             	add    esp,0x10
c001e02b:	84 c0                	test   al,al
c001e02d:	0f 84 c2 00 00 00    	je     c001e0f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e033:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e036:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e03c:	85 d2                	test   edx,edx
c001e03e:	74 0f                	je     c001e04f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e040:	83 ec 0c             	sub    esp,0xc
c001e043:	8b 02                	mov    eax,DWORD PTR [edx]
c001e045:	52                   	push   edx
c001e046:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e049:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e04c:	83 c4 10             	add    esp,0x10
c001e04f:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e059:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e05c:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e062:	85 db                	test   ebx,ebx
c001e064:	74 16                	je     c001e07c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e066:	83 ec 0c             	sub    esp,0xc
c001e069:	53                   	push   ebx
c001e06a:	e8 c7 37 ff ff       	call   c0011836 <VAS::~VAS()>
c001e06f:	58                   	pop    eax
c001e070:	5a                   	pop    edx
c001e071:	6a 14                	push   0x14
c001e073:	53                   	push   ebx
c001e074:	e8 50 45 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c001e079:	83 c4 10             	add    esp,0x10
c001e07c:	83 c4 1c             	add    esp,0x1c
c001e07f:	5b                   	pop    ebx
c001e080:	5e                   	pop    esi
c001e081:	5f                   	pop    edi
c001e082:	5d                   	pop    ebp
c001e083:	c3                   	ret    
c001e084:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e088:	83 ec 0c             	sub    esp,0xc
c001e08b:	68 dc bb 02 c0       	push   0xc002bbdc
c001e090:	e8 78 bd ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001e095:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e098:	83 c4 10             	add    esp,0x10
c001e09b:	89 f7                	mov    edi,esi
c001e09d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0a1:	e9 b0 fe ff ff       	jmp    c001df56 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e0a6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e0ac:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e0b2:	75 1c                	jne    c001e0d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e0b4:	83 ec 0c             	sub    esp,0xc
c001e0b7:	68 44 bc 02 c0       	push   0xc002bc44
c001e0bc:	e8 e0 45 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001e0c1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e0c8:	e8 a0 fa ff ff       	call   c001db6d <blockTask(TaskState)>
c001e0cd:	83 c4 10             	add    esp,0x10
c001e0d0:	83 ec 08             	sub    esp,0x8
c001e0d3:	56                   	push   esi
c001e0d4:	68 64 0e 03 c0       	push   0xc0030e64
c001e0d9:	e8 32 a7 00 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0de:	c7 04 24 64 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e64
c001e0e5:	e8 70 a6 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0ea:	83 c4 10             	add    esp,0x10
c001e0ed:	39 f8                	cmp    eax,edi
c001e0ef:	0f 84 3e ff ff ff    	je     c001e033 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e0f5:	83 ec 0c             	sub    esp,0xc
c001e0f8:	68 64 0e 03 c0       	push   0xc0030e64
c001e0fd:	e8 58 a6 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e102:	c7 04 24 64 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e64
c001e109:	89 c6                	mov    esi,eax
c001e10b:	e8 52 a6 00 00       	call   c0028762 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e110:	83 c4 10             	add    esp,0x10
c001e113:	39 f3                	cmp    ebx,esi
c001e115:	74 b9                	je     c001e0d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e117:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e11a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e11d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e123:	75 ab                	jne    c001e0d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e125:	e9 7c ff ff ff       	jmp    c001e0a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e12a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e12e:	83 ec 0c             	sub    esp,0xc
c001e131:	68 10 bc 02 c0       	push   0xc002bc10
c001e136:	e9 55 ff ff ff       	jmp    c001e090 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e13b:	8b 36                	mov    esi,DWORD PTR [esi]
c001e13d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e141:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e144:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e147:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e14d:	01 d7                	add    edi,edx
c001e14f:	89 f8                	mov    eax,edi
c001e151:	e9 66 fe ff ff       	jmp    c001dfbc <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e156 <cleanerTaskFunction(void*)>:
c001e156:	53                   	push   ebx
c001e157:	83 ec 08             	sub    esp,0x8
c001e15a:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e15f:	48                   	dec    eax
c001e160:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e165:	75 01                	jne    c001e168 <cleanerTaskFunction(void*)+0x12>
c001e167:	fb                   	sti    
c001e168:	fa                   	cli    
c001e169:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e16e:	80 3d 2c 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030e2c,0x0
c001e175:	8d 50 01             	lea    edx,[eax+0x1]
c001e178:	89 15 48 0e 03 c0    	mov    DWORD PTR ds:0xc0030e48,edx
c001e17e:	0f 84 a1 00 00 00    	je     c001e225 <cleanerTaskFunction(void*)+0xcf>
c001e184:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e189:	85 c0                	test   eax,eax
c001e18b:	75 01                	jne    c001e18e <cleanerTaskFunction(void*)+0x38>
c001e18d:	fb                   	sti    
c001e18e:	c6 05 2c 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e2c,0x0
c001e195:	fa                   	cli    
c001e196:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e19c:	ff 05 44 0e 03 c0    	inc    DWORD PTR ds:0xc0030e44
c001e1a2:	fa                   	cli    
c001e1a3:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e1a9:	eb 26                	jmp    c001e1d1 <cleanerTaskFunction(void*)+0x7b>
c001e1ab:	83 ec 0c             	sub    esp,0xc
c001e1ae:	68 4c 0e 03 c0       	push   0xc0030e4c
c001e1b3:	e8 a2 a5 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1b8:	c7 04 24 4c 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e4c
c001e1bf:	89 c3                	mov    ebx,eax
c001e1c1:	e8 9c a5 00 00       	call   c0028762 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1c9:	e8 e1 fc ff ff       	call   c001deaf <cleanupTerminatedTask(ThreadControlBlock*)>
c001e1ce:	83 c4 10             	add    esp,0x10
c001e1d1:	83 ec 0c             	sub    esp,0xc
c001e1d4:	68 4c 0e 03 c0       	push   0xc0030e4c
c001e1d9:	e8 60 a5 00 00       	call   c002873e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1de:	83 c4 10             	add    esp,0x10
c001e1e1:	84 c0                	test   al,al
c001e1e3:	74 c6                	je     c001e1ab <cleanerTaskFunction(void*)+0x55>
c001e1e5:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e1ea:	48                   	dec    eax
c001e1eb:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e1f0:	75 01                	jne    c001e1f3 <cleanerTaskFunction(void*)+0x9d>
c001e1f2:	fb                   	sti    
c001e1f3:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001e1f8:	48                   	dec    eax
c001e1f9:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c001e1fe:	0f 85 56 ff ff ff    	jne    c001e15a <cleanerTaskFunction(void*)+0x4>
c001e204:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c001e209:	85 c0                	test   eax,eax
c001e20b:	0f 84 49 ff ff ff    	je     c001e15a <cleanerTaskFunction(void*)+0x4>
c001e211:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001e21b:	e8 77 f7 ff ff       	call   c001d997 <schedule()>
c001e220:	e9 35 ff ff ff       	jmp    c001e15a <cleanerTaskFunction(void*)+0x4>
c001e225:	83 ec 0c             	sub    esp,0xc
c001e228:	6a 02                	push   0x2
c001e22a:	e8 18 f9 ff ff       	call   c001db47 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e22f:	83 c4 10             	add    esp,0x10
c001e232:	e9 57 ff ff ff       	jmp    c001e18e <cleanerTaskFunction(void*)+0x38>

c001e237 <terminateTask(int)>:
c001e237:	83 ec 14             	sub    esp,0x14
c001e23a:	fa                   	cli    
c001e23b:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e241:	ff 05 44 0e 03 c0    	inc    DWORD PTR ds:0xc0030e44
c001e247:	fa                   	cli    
c001e248:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e24e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e252:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e257:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e25a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e25f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e262:	50                   	push   eax
c001e263:	68 4c 0e 03 c0       	push   0xc0030e4c
c001e268:	e8 a3 a5 00 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e26d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e272:	83 c4 10             	add    esp,0x10
c001e275:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e27c:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001e281:	85 c0                	test   eax,eax
c001e283:	74 53                	je     c001e2d8 <terminateTask(int)+0xa1>
c001e285:	83 ec 0c             	sub    esp,0xc
c001e288:	c6 05 2c 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e2c,0x1
c001e28f:	50                   	push   eax
c001e290:	e8 85 fb ff ff       	call   c001de1a <unblockTask(ThreadControlBlock*)>
c001e295:	83 c4 10             	add    esp,0x10
c001e298:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e29d:	48                   	dec    eax
c001e29e:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e2a3:	75 01                	jne    c001e2a6 <terminateTask(int)+0x6f>
c001e2a5:	fb                   	sti    
c001e2a6:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001e2ab:	48                   	dec    eax
c001e2ac:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c001e2b1:	75 09                	jne    c001e2bc <terminateTask(int)+0x85>
c001e2b3:	83 3d 40 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e40,0x0
c001e2ba:	75 2e                	jne    c001e2ea <terminateTask(int)+0xb3>
c001e2bc:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e2c1:	48                   	dec    eax
c001e2c2:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e2c7:	75 01                	jne    c001e2ca <terminateTask(int)+0x93>
c001e2c9:	fb                   	sti    
c001e2ca:	fa                   	cli    
c001e2cb:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e2d1:	e8 c1 f6 ff ff       	call   c001d997 <schedule()>
c001e2d6:	eb e4                	jmp    c001e2bc <terminateTask(int)+0x85>
c001e2d8:	83 ec 0c             	sub    esp,0xc
c001e2db:	68 61 bb 02 c0       	push   0xc002bb61
c001e2e0:	e8 bc 43 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001e2e5:	83 c4 10             	add    esp,0x10
c001e2e8:	eb ae                	jmp    c001e298 <terminateTask(int)+0x61>
c001e2ea:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001e2f4:	eb db                	jmp    c001e2d1 <terminateTask(int)+0x9a>

c001e2f6 <Thr::terminateFromIRQ(int)>:
c001e2f6:	83 ec 18             	sub    esp,0x18
c001e2f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2fd:	e8 35 ff ff ff       	call   c001e237 <terminateTask(int)>

c001e302 <Semaphore::release()>:
c001e302:	83 ec 0c             	sub    esp,0xc
c001e305:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e309:	fa                   	cli    
c001e30a:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001e30f:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e315:	8d 48 01             	lea    ecx,[eax+0x1]
c001e318:	89 0d 44 0e 03 c0    	mov    DWORD PTR ds:0xc0030e44,ecx
c001e31e:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e321:	85 c9                	test   ecx,ecx
c001e323:	74 3c                	je     c001e361 <Semaphore::release()+0x5f>
c001e325:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e328:	83 ec 0c             	sub    esp,0xc
c001e32b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e32e:	51                   	push   ecx
c001e32f:	e8 e6 fa ff ff       	call   c001de1a <unblockTask(ThreadControlBlock*)>
c001e334:	a1 44 0e 03 c0       	mov    eax,ds:0xc0030e44
c001e339:	83 c4 10             	add    esp,0x10
c001e33c:	48                   	dec    eax
c001e33d:	a3 44 0e 03 c0       	mov    ds:0xc0030e44,eax
c001e342:	85 c0                	test   eax,eax
c001e344:	75 09                	jne    c001e34f <Semaphore::release()+0x4d>
c001e346:	a1 40 0e 03 c0       	mov    eax,ds:0xc0030e40
c001e34b:	85 c0                	test   eax,eax
c001e34d:	75 17                	jne    c001e366 <Semaphore::release()+0x64>
c001e34f:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e354:	48                   	dec    eax
c001e355:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e35a:	75 01                	jne    c001e35d <Semaphore::release()+0x5b>
c001e35c:	fb                   	sti    
c001e35d:	83 c4 0c             	add    esp,0xc
c001e360:	c3                   	ret    
c001e361:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e364:	eb d7                	jmp    c001e33d <Semaphore::release()+0x3b>
c001e366:	c7 05 40 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e40,0x0
c001e370:	e8 22 f6 ff ff       	call   c001d997 <schedule()>
c001e375:	eb d8                	jmp    c001e34f <Semaphore::release()+0x4d>

c001e377 <__static_initialization_and_destruction_0(int, int)>:
c001e377:	83 ec 0c             	sub    esp,0xc
c001e37a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e37f:	0f 85 88 00 00 00    	jne    c001e40d <__static_initialization_and_destruction_0(int, int)+0x96>
c001e385:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e38d:	75 7e                	jne    c001e40d <__static_initialization_and_destruction_0(int, int)+0x96>
c001e38f:	83 ec 0c             	sub    esp,0xc
c001e392:	68 64 0e 03 c0       	push   0xc0030e64
c001e397:	e8 04 a7 00 00       	call   c0028aa0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e39c:	83 c4 10             	add    esp,0x10
c001e39f:	83 ec 04             	sub    esp,0x4
c001e3a2:	68 f8 c6 02 c0       	push   0xc002c6f8
c001e3a7:	68 64 0e 03 c0       	push   0xc0030e64
c001e3ac:	68 54 8a 02 c0       	push   0xc0028a54
c001e3b1:	e8 8d 41 ff ff       	call   c0012543 <__cxa_atexit>
c001e3b6:	83 c4 10             	add    esp,0x10
c001e3b9:	83 ec 0c             	sub    esp,0xc
c001e3bc:	68 58 0e 03 c0       	push   0xc0030e58
c001e3c1:	e8 da a6 00 00       	call   c0028aa0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3c6:	83 c4 10             	add    esp,0x10
c001e3c9:	83 ec 04             	sub    esp,0x4
c001e3cc:	68 f8 c6 02 c0       	push   0xc002c6f8
c001e3d1:	68 58 0e 03 c0       	push   0xc0030e58
c001e3d6:	68 54 8a 02 c0       	push   0xc0028a54
c001e3db:	e8 63 41 ff ff       	call   c0012543 <__cxa_atexit>
c001e3e0:	83 c4 10             	add    esp,0x10
c001e3e3:	83 ec 0c             	sub    esp,0xc
c001e3e6:	68 4c 0e 03 c0       	push   0xc0030e4c
c001e3eb:	e8 b0 a6 00 00       	call   c0028aa0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3f0:	83 c4 10             	add    esp,0x10
c001e3f3:	83 ec 04             	sub    esp,0x4
c001e3f6:	68 f8 c6 02 c0       	push   0xc002c6f8
c001e3fb:	68 4c 0e 03 c0       	push   0xc0030e4c
c001e400:	68 54 8a 02 c0       	push   0xc0028a54
c001e405:	e8 39 41 ff ff       	call   c0012543 <__cxa_atexit>
c001e40a:	83 c4 10             	add    esp,0x10
c001e40d:	90                   	nop
c001e40e:	83 c4 0c             	add    esp,0xc
c001e411:	c3                   	ret    

c001e412 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e412:	83 ec 0c             	sub    esp,0xc
c001e415:	83 ec 08             	sub    esp,0x8
c001e418:	68 ff ff 00 00       	push   0xffff
c001e41d:	6a 01                	push   0x1
c001e41f:	e8 53 ff ff ff       	call   c001e377 <__static_initialization_and_destruction_0(int, int)>
c001e424:	83 c4 10             	add    esp,0x10
c001e427:	83 c4 0c             	add    esp,0xc
c001e42a:	c3                   	ret    

c001e42b <Vm::inbv(unsigned short)>:
c001e42b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e42f:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e434:	75 06                	jne    c001e43c <Vm::inbv(unsigned short)+0x11>
c001e436:	a0 ac 0e 03 c0       	mov    al,ds:0xc0030eac
c001e43b:	c3                   	ret    
c001e43c:	ec                   	in     al,dx
c001e43d:	c3                   	ret    

c001e43e <Vm::outbv(unsigned short, unsigned char)>:
c001e43e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e442:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e446:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e44b:	75 25                	jne    c001e472 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e44d:	8b 0d ac 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030eac
c001e453:	8d 51 01             	lea    edx,[ecx+0x1]
c001e456:	88 81 c0 0e 03 c0    	mov    BYTE PTR [ecx-0x3ffcf140],al
c001e45c:	89 15 ac 0e 03 c0    	mov    DWORD PTR ds:0xc0030eac,edx
c001e462:	83 fa 20             	cmp    edx,0x20
c001e465:	75 0c                	jne    c001e473 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e467:	c7 05 ac 0e 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030eac,0x1f
c001e471:	c3                   	ret    
c001e472:	ee                   	out    dx,al
c001e473:	c3                   	ret    

c001e474 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e474:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e479:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e47e:	c1 e0 04             	shl    eax,0x4
c001e481:	01 d0                	add    eax,edx
c001e483:	c3                   	ret    

c001e484 <Vm::getSegment(unsigned int)>:
c001e484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e488:	c1 e8 10             	shr    eax,0x10
c001e48b:	c3                   	ret    

c001e48c <Vm::getOffset(unsigned int)>:
c001e48c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e490:	c3                   	ret    

c001e491 <Vm::mainloop2()>:
c001e491:	83 ec 18             	sub    esp,0x18
c001e494:	fa                   	cli    
c001e495:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e49b:	6a 02                	push   0x2
c001e49d:	c6 05 a5 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ea5,0x1
c001e4a4:	e8 9e f6 ff ff       	call   c001db47 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e4a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4ae:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e4b2:	52                   	push   edx
c001e4b3:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e4b7:	52                   	push   edx
c001e4b8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e4bc:	52                   	push   edx
c001e4bd:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e4c1:	50                   	push   eax
c001e4c2:	e8 33 1e fe ff       	call   c00002fa <goToVM86>
c001e4c7:	83 c4 2c             	add    esp,0x2c
c001e4ca:	c3                   	ret    

c001e4cb <Vm::mainVm8086Loop(void*)>:
c001e4cb:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e4d0:	48                   	dec    eax
c001e4d1:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e4d6:	75 01                	jne    c001e4d9 <Vm::mainVm8086Loop(void*)+0xe>
c001e4d8:	fb                   	sti    
c001e4d9:	eb b6                	jmp    c001e491 <Vm::mainloop2()>

c001e4db <Vm::mainloop3(unsigned long)>:
c001e4db:	83 ec 18             	sub    esp,0x18
c001e4de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e4e2:	fa                   	cli    
c001e4e3:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e4e9:	6a 02                	push   0x2
c001e4eb:	c6 05 a4 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ea4,0x1
c001e4f2:	a3 a0 0e 03 c0       	mov    ds:0xc0030ea0,eax
c001e4f7:	e8 4b f6 ff ff       	call   c001db47 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e4fc:	83 c4 1c             	add    esp,0x1c
c001e4ff:	eb 90                	jmp    c001e491 <Vm::mainloop2()>

c001e501 <Vm::initialise8086()>:
c001e501:	83 ec 0c             	sub    esp,0xc
c001e504:	68 80 00 00 00       	push   0x80
c001e509:	6a 00                	push   0x0
c001e50b:	68 cb e4 01 c0       	push   0xc001e4cb
c001e510:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c001e516:	e8 57 f2 ff ff       	call   c001d772 <Process::createThread(void (*)(void*), void*, int)>
c001e51b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e522:	a3 a8 0e 03 c0       	mov    ds:0xc0030ea8,eax
c001e527:	68 00 01 00 00       	push   0x100
c001e52c:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001e531:	6a 00                	push   0x0
c001e533:	6a 00                	push   0x0
c001e535:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e53b:	e8 68 37 ff ff       	call   c0011ca8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e540:	83 c4 2c             	add    esp,0x2c
c001e543:	c3                   	ret    

c001e544 <Vm::finish8086()>:
c001e544:	53                   	push   ebx
c001e545:	83 ec 08             	sub    esp,0x8
c001e548:	fa                   	cli    
c001e549:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e54f:	80 3d a4 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030ea4,0x0
c001e556:	75 15                	jne    c001e56d <Vm::finish8086()+0x29>
c001e558:	e8 3a f4 ff ff       	call   c001d997 <schedule()>
c001e55d:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e562:	48                   	dec    eax
c001e563:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e568:	75 de                	jne    c001e548 <Vm::finish8086()+0x4>
c001e56a:	fb                   	sti    
c001e56b:	eb db                	jmp    c001e548 <Vm::finish8086()+0x4>
c001e56d:	83 ec 0c             	sub    esp,0xc
c001e570:	8b 1d a0 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030ea0
c001e576:	ff 35 a8 0e 03 c0    	push   DWORD PTR ds:0xc0030ea8
c001e57c:	c6 05 a4 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ea4,0x0
c001e583:	e8 92 f8 ff ff       	call   c001de1a <unblockTask(ThreadControlBlock*)>
c001e588:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e58d:	83 c4 10             	add    esp,0x10
c001e590:	8d 50 ff             	lea    edx,[eax-0x1]
c001e593:	89 15 48 0e 03 c0    	mov    DWORD PTR ds:0xc0030e48,edx
c001e599:	85 d2                	test   edx,edx
c001e59b:	75 01                	jne    c001e59e <Vm::finish8086()+0x5a>
c001e59d:	fb                   	sti    
c001e59e:	89 d8                	mov    eax,ebx
c001e5a0:	83 c4 08             	add    esp,0x8
c001e5a3:	5b                   	pop    ebx
c001e5a4:	c3                   	ret    

c001e5a5 <Vm::getOutput8086(unsigned char*)>:
c001e5a5:	57                   	push   edi
c001e5a6:	8b 0d ac 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030eac
c001e5ac:	56                   	push   esi
c001e5ad:	be c0 0e 03 c0       	mov    esi,0xc0030ec0
c001e5b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e5b8:	a1 ac 0e 03 c0       	mov    eax,ds:0xc0030eac
c001e5bd:	5e                   	pop    esi
c001e5be:	c7 05 ac 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030eac,0x0
c001e5c8:	5f                   	pop    edi
c001e5c9:	c3                   	ret    

c001e5ca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e5ca:	55                   	push   ebp
c001e5cb:	57                   	push   edi
c001e5cc:	56                   	push   esi
c001e5cd:	53                   	push   ebx
c001e5ce:	83 ec 2c             	sub    esp,0x2c
c001e5d1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e5d5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e5d9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e5dd:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e5e1:	fa                   	cli    
c001e5e2:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c001e5e8:	0f b6 35 a5 0e 03 c0 	movzx  esi,BYTE PTR ds:0xc0030ea5
c001e5ef:	89 f0                	mov    eax,esi
c001e5f1:	84 c0                	test   al,al
c001e5f3:	75 1d                	jne    c001e612 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e5f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e5f9:	e8 99 f3 ff ff       	call   c001d997 <schedule()>
c001e5fe:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e603:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e607:	48                   	dec    eax
c001e608:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e60d:	75 d2                	jne    c001e5e1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e60f:	fb                   	sti    
c001e610:	eb cf                	jmp    c001e5e1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e612:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c001e617:	c7 05 ac 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030eac,0x0
c001e621:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e625:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e629:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e62d:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e631:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e635:	50                   	push   eax
c001e636:	6a 20                	push   0x20
c001e638:	6a 00                	push   0x0
c001e63a:	68 c0 0e 03 c0       	push   0xc0030ec0
c001e63f:	e8 0c 21 fe ff       	call   c0000750 <memset>
c001e644:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e64b:	e8 49 0f ff ff       	call   c000f599 <malloc>
c001e650:	83 c4 0c             	add    esp,0xc
c001e653:	89 c3                	mov    ebx,eax
c001e655:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c001e65b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e65f:	50                   	push   eax
c001e660:	e8 9b 45 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c001e665:	83 c4 10             	add    esp,0x10
c001e668:	85 db                	test   ebx,ebx
c001e66a:	75 0a                	jne    c001e676 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e66c:	83 ec 0c             	sub    esp,0xc
c001e66f:	68 6c bc 02 c0       	push   0xc002bc6c
c001e674:	eb 3e                	jmp    c001e6b4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e676:	50                   	push   eax
c001e677:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e67b:	50                   	push   eax
c001e67c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e680:	50                   	push   eax
c001e681:	53                   	push   ebx
c001e682:	e8 89 48 ff ff       	call   c0012f10 <File::stat(unsigned long long*, bool*)>
c001e687:	83 c4 10             	add    esp,0x10
c001e68a:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e68f:	74 0a                	je     c001e69b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e691:	83 ec 0c             	sub    esp,0xc
c001e694:	68 80 bc 02 c0       	push   0xc002bc80
c001e699:	eb 19                	jmp    c001e6b4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e69b:	51                   	push   ecx
c001e69c:	51                   	push   ecx
c001e69d:	6a 01                	push   0x1
c001e69f:	53                   	push   ebx
c001e6a0:	e8 bf 45 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c001e6a5:	83 c4 10             	add    esp,0x10
c001e6a8:	85 c0                	test   eax,eax
c001e6aa:	74 24                	je     c001e6d0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e6ac:	83 ec 0c             	sub    esp,0xc
c001e6af:	68 99 bc 02 c0       	push   0xc002bc99
c001e6b4:	e8 54 b7 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001e6b9:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e6be:	83 c4 10             	add    esp,0x10
c001e6c1:	48                   	dec    eax
c001e6c2:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e6c7:	85 c0                	test   eax,eax
c001e6c9:	75 01                	jne    c001e6cc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e6cb:	fb                   	sti    
c001e6cc:	31 f6                	xor    esi,esi
c001e6ce:	eb 58                	jmp    c001e728 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e6d0:	0f b7 ed             	movzx  ebp,bp
c001e6d3:	50                   	push   eax
c001e6d4:	0f b7 ff             	movzx  edi,di
c001e6d7:	50                   	push   eax
c001e6d8:	55                   	push   ebp
c001e6d9:	57                   	push   edi
c001e6da:	e8 95 fd ff ff       	call   c001e474 <Vm::realToLinear(unsigned short, unsigned short)>
c001e6df:	5a                   	pop    edx
c001e6e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e6e2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e6e6:	51                   	push   ecx
c001e6e7:	50                   	push   eax
c001e6e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e6ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e6f0:	53                   	push   ebx
c001e6f1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e6f4:	83 c4 14             	add    esp,0x14
c001e6f7:	53                   	push   ebx
c001e6f8:	e8 c5 45 ff ff       	call   c0012cc2 <File::close()>
c001e6fd:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c001e702:	83 c4 10             	add    esp,0x10
c001e705:	48                   	dec    eax
c001e706:	c6 05 a5 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ea5,0x0
c001e70d:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001e712:	85 c0                	test   eax,eax
c001e714:	75 01                	jne    c001e717 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e716:	fb                   	sti    
c001e717:	83 ec 0c             	sub    esp,0xc
c001e71a:	ff 35 a8 0e 03 c0    	push   DWORD PTR ds:0xc0030ea8
c001e720:	e8 f5 f6 ff ff       	call   c001de1a <unblockTask(ThreadControlBlock*)>
c001e725:	83 c4 10             	add    esp,0x10
c001e728:	83 c4 2c             	add    esp,0x2c
c001e72b:	89 f0                	mov    eax,esi
c001e72d:	5b                   	pop    ebx
c001e72e:	5e                   	pop    esi
c001e72f:	5f                   	pop    edi
c001e730:	5d                   	pop    ebp
c001e731:	c3                   	ret    

c001e732 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e732:	57                   	push   edi
c001e733:	56                   	push   esi
c001e734:	53                   	push   ebx
c001e735:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e739:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e73d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e741:	83 e8 06             	sub    eax,0x6
c001e744:	0f b7 c0             	movzx  eax,ax
c001e747:	50                   	push   eax
c001e748:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e74d:	50                   	push   eax
c001e74e:	e8 21 fd ff ff       	call   c001e474 <Vm::realToLinear(unsigned short, unsigned short)>
c001e753:	5a                   	pop    edx
c001e754:	5e                   	pop    esi
c001e755:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e758:	8d 56 fa             	lea    edx,[esi-0x6]
c001e75b:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e761:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e764:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e767:	83 c2 02             	add    edx,0x2
c001e76a:	66 89 10             	mov    WORD PTR [eax],dx
c001e76d:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e770:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e774:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e777:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e77b:	89 d6                	mov    esi,edx
c001e77d:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e783:	66 81 e6 ff fd       	and    si,0xfdff
c001e788:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e78c:	74 07                	je     c001e795 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e78e:	89 d6                	mov    esi,edx
c001e790:	66 81 ce 00 02       	or     si,0x200
c001e795:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e799:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e79e:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e7a2:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e7aa:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e7ad:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e7b5:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e7b8:	5b                   	pop    ebx
c001e7b9:	5e                   	pop    esi
c001e7ba:	5f                   	pop    edi
c001e7bb:	c3                   	ret    

c001e7bc <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e7bc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7c1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7c6:	c1 e0 04             	shl    eax,0x4
c001e7c9:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e7cc:	c3                   	ret    

c001e7cd <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e7cd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7d2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7d7:	c1 e0 04             	shl    eax,0x4
c001e7da:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e7de:	c3                   	ret    

c001e7df <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e7df:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7e4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7e9:	c1 e0 04             	shl    eax,0x4
c001e7ec:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e7ef:	c3                   	ret    

c001e7f0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e7f0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7f5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7fa:	c1 e0 04             	shl    eax,0x4
c001e7fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e801:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e804:	c3                   	ret    

c001e805 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e805:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e80a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e80f:	c1 e0 04             	shl    eax,0x4
c001e812:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e816:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e81a:	c3                   	ret    

c001e81b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e81b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e820:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e825:	c1 e0 04             	shl    eax,0x4
c001e828:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e82c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e82f:	c3                   	ret    

c001e830 <Vm::faultHandler(regs*)>:
c001e830:	55                   	push   ebp
c001e831:	57                   	push   edi
c001e832:	56                   	push   esi
c001e833:	53                   	push   ebx
c001e834:	83 ec 1c             	sub    esp,0x1c
c001e837:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e83b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e83e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e842:	0f b7 f8             	movzx  edi,ax
c001e845:	52                   	push   edx
c001e846:	0f b7 c0             	movzx  eax,ax
c001e849:	50                   	push   eax
c001e84a:	e8 25 fc ff ff       	call   c001e474 <Vm::realToLinear(unsigned short, unsigned short)>
c001e84f:	5a                   	pop    edx
c001e850:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e853:	59                   	pop    ecx
c001e854:	89 c1                	mov    ecx,eax
c001e856:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e859:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e85d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e862:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e866:	0f b7 c5             	movzx  eax,bp
c001e869:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e86d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e871:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e875:	e8 fa fb ff ff       	call   c001e474 <Vm::realToLinear(unsigned short, unsigned short)>
c001e87a:	5e                   	pop    esi
c001e87b:	be 06 00 00 00       	mov    esi,0x6
c001e880:	5a                   	pop    edx
c001e881:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e886:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e88b:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e88e:	80 fa 9d             	cmp    dl,0x9d
c001e891:	0f 84 2c 02 00 00    	je     c001eac3 <Vm::faultHandler(regs*)+0x293>
c001e897:	0f 87 91 00 00 00    	ja     c001e92e <Vm::faultHandler(regs*)+0xfe>
c001e89d:	80 fa 66             	cmp    dl,0x66
c001e8a0:	0f 84 98 01 00 00    	je     c001ea3e <Vm::faultHandler(regs*)+0x20e>
c001e8a6:	77 47                	ja     c001e8ef <Vm::faultHandler(regs*)+0xbf>
c001e8a8:	80 fa 36             	cmp    dl,0x36
c001e8ab:	0f 84 80 01 00 00    	je     c001ea31 <Vm::faultHandler(regs*)+0x201>
c001e8b1:	77 1a                	ja     c001e8cd <Vm::faultHandler(regs*)+0x9d>
c001e8b3:	80 fa 26             	cmp    dl,0x26
c001e8b6:	0f 84 4e 01 00 00    	je     c001ea0a <Vm::faultHandler(regs*)+0x1da>
c001e8bc:	80 fa 2e             	cmp    dl,0x2e
c001e8bf:	0f 85 e2 05 00 00    	jne    c001eea7 <Vm::faultHandler(regs*)+0x677>
c001e8c5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8c8:	31 f6                	xor    esi,esi
c001e8ca:	41                   	inc    ecx
c001e8cb:	eb be                	jmp    c001e88b <Vm::faultHandler(regs*)+0x5b>
c001e8cd:	80 fa 64             	cmp    dl,0x64
c001e8d0:	0f 84 41 01 00 00    	je     c001ea17 <Vm::faultHandler(regs*)+0x1e7>
c001e8d6:	0f 87 48 01 00 00    	ja     c001ea24 <Vm::faultHandler(regs*)+0x1f4>
c001e8dc:	80 fa 3e             	cmp    dl,0x3e
c001e8df:	0f 85 c2 05 00 00    	jne    c001eea7 <Vm::faultHandler(regs*)+0x677>
c001e8e5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8e8:	be 01 00 00 00       	mov    esi,0x1
c001e8ed:	eb db                	jmp    c001e8ca <Vm::faultHandler(regs*)+0x9a>
c001e8ef:	80 fa 6d             	cmp    dl,0x6d
c001e8f2:	0f 84 ec 02 00 00    	je     c001ebe4 <Vm::faultHandler(regs*)+0x3b4>
c001e8f8:	77 17                	ja     c001e911 <Vm::faultHandler(regs*)+0xe1>
c001e8fa:	80 fa 67             	cmp    dl,0x67
c001e8fd:	0f 84 48 01 00 00    	je     c001ea4b <Vm::faultHandler(regs*)+0x21b>
c001e903:	80 fa 6c             	cmp    dl,0x6c
c001e906:	0f 84 69 02 00 00    	je     c001eb75 <Vm::faultHandler(regs*)+0x345>
c001e90c:	e9 96 05 00 00       	jmp    c001eea7 <Vm::faultHandler(regs*)+0x677>
c001e911:	80 fa 6f             	cmp    dl,0x6f
c001e914:	0f 84 f4 03 00 00    	je     c001ed0e <Vm::faultHandler(regs*)+0x4de>
c001e91a:	0f 82 59 03 00 00    	jb     c001ec79 <Vm::faultHandler(regs*)+0x449>
c001e920:	80 fa 9c             	cmp    dl,0x9c
c001e923:	0f 84 2f 01 00 00    	je     c001ea58 <Vm::faultHandler(regs*)+0x228>
c001e929:	e9 79 05 00 00       	jmp    c001eea7 <Vm::faultHandler(regs*)+0x677>
c001e92e:	80 fa ec             	cmp    dl,0xec
c001e931:	0f 84 14 05 00 00    	je     c001ee4b <Vm::faultHandler(regs*)+0x61b>
c001e937:	77 7b                	ja     c001e9b4 <Vm::faultHandler(regs*)+0x184>
c001e939:	80 fa e4             	cmp    dl,0xe4
c001e93c:	0f 84 93 04 00 00    	je     c001edd5 <Vm::faultHandler(regs*)+0x5a5>
c001e942:	77 53                	ja     c001e997 <Vm::faultHandler(regs*)+0x167>
c001e944:	80 fa cd             	cmp    dl,0xcd
c001e947:	0f 84 d9 01 00 00    	je     c001eb26 <Vm::faultHandler(regs*)+0x2f6>
c001e94d:	80 fa cf             	cmp    dl,0xcf
c001e950:	0f 85 51 05 00 00    	jne    c001eea7 <Vm::faultHandler(regs*)+0x677>
c001e956:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e959:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e95c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e960:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e963:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e967:	81 ca 00 02 02 00    	or     edx,0x20200
c001e96d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e970:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e974:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e97a:	66 c1 e8 09          	shr    ax,0x9
c001e97e:	83 e0 01             	and    eax,0x1
c001e981:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e984:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e987:	83 c0 06             	add    eax,0x6
c001e98a:	25 ff ff 00 00       	and    eax,0xffff
c001e98f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e992:	e9 0c 05 00 00       	jmp    c001eea3 <Vm::faultHandler(regs*)+0x673>
c001e997:	80 fa e6             	cmp    dl,0xe6
c001e99a:	0f 84 7f 04 00 00    	je     c001ee1f <Vm::faultHandler(regs*)+0x5ef>
c001e9a0:	0f 82 4b 04 00 00    	jb     c001edf1 <Vm::faultHandler(regs*)+0x5c1>
c001e9a6:	80 fa e7             	cmp    dl,0xe7
c001e9a9:	0f 84 87 04 00 00    	je     c001ee36 <Vm::faultHandler(regs*)+0x606>
c001e9af:	e9 f3 04 00 00       	jmp    c001eea7 <Vm::faultHandler(regs*)+0x677>
c001e9b4:	80 fa ef             	cmp    dl,0xef
c001e9b7:	0f 84 d1 04 00 00    	je     c001ee8e <Vm::faultHandler(regs*)+0x65e>
c001e9bd:	77 28                	ja     c001e9e7 <Vm::faultHandler(regs*)+0x1b7>
c001e9bf:	80 fa ed             	cmp    dl,0xed
c001e9c2:	0f 84 9f 04 00 00    	je     c001ee67 <Vm::faultHandler(regs*)+0x637>
c001e9c8:	80 fa ee             	cmp    dl,0xee
c001e9cb:	0f 85 d6 04 00 00    	jne    c001eea7 <Vm::faultHandler(regs*)+0x677>
c001e9d1:	50                   	push   eax
c001e9d2:	50                   	push   eax
c001e9d3:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001e9d7:	50                   	push   eax
c001e9d8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001e9dc:	50                   	push   eax
c001e9dd:	e8 5c fa ff ff       	call   c001e43e <Vm::outbv(unsigned short, unsigned char)>
c001e9e2:	e9 9f 04 00 00       	jmp    c001ee86 <Vm::faultHandler(regs*)+0x656>
c001e9e7:	80 fa fa             	cmp    dl,0xfa
c001e9ea:	0f 84 69 01 00 00    	je     c001eb59 <Vm::faultHandler(regs*)+0x329>
c001e9f0:	80 fa fb             	cmp    dl,0xfb
c001e9f3:	0f 84 6e 01 00 00    	je     c001eb67 <Vm::faultHandler(regs*)+0x337>
c001e9f9:	80 fa f3             	cmp    dl,0xf3
c001e9fc:	0f 85 a5 04 00 00    	jne    c001eea7 <Vm::faultHandler(regs*)+0x677>
c001ea02:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea05:	e9 c0 fe ff ff       	jmp    c001e8ca <Vm::faultHandler(regs*)+0x9a>
c001ea0a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea0d:	be 02 00 00 00       	mov    esi,0x2
c001ea12:	e9 b3 fe ff ff       	jmp    c001e8ca <Vm::faultHandler(regs*)+0x9a>
c001ea17:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea1a:	be 03 00 00 00       	mov    esi,0x3
c001ea1f:	e9 a6 fe ff ff       	jmp    c001e8ca <Vm::faultHandler(regs*)+0x9a>
c001ea24:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea27:	be 04 00 00 00       	mov    esi,0x4
c001ea2c:	e9 99 fe ff ff       	jmp    c001e8ca <Vm::faultHandler(regs*)+0x9a>
c001ea31:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea34:	be 05 00 00 00       	mov    esi,0x5
c001ea39:	e9 8c fe ff ff       	jmp    c001e8ca <Vm::faultHandler(regs*)+0x9a>
c001ea3e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea41:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ea46:	e9 7f fe ff ff       	jmp    c001e8ca <Vm::faultHandler(regs*)+0x9a>
c001ea4b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea4e:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ea53:	e9 72 fe ff ff       	jmp    c001e8ca <Vm::faultHandler(regs*)+0x9a>
c001ea58:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea5b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ea5f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ea64:	74 30                	je     c001ea96 <Vm::faultHandler(regs*)+0x266>
c001ea66:	83 e9 04             	sub    ecx,0x4
c001ea69:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ea6f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ea75:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ea78:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ea7b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ea81:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ea85:	0f 84 15 04 00 00    	je     c001eea0 <Vm::faultHandler(regs*)+0x670>
c001ea8b:	80 ce 02             	or     dh,0x2
c001ea8e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ea91:	e9 0a 04 00 00       	jmp    c001eea0 <Vm::faultHandler(regs*)+0x670>
c001ea96:	83 e9 02             	sub    ecx,0x2
c001ea99:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ea9f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eaa2:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eaa6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eaac:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eab0:	74 05                	je     c001eab7 <Vm::faultHandler(regs*)+0x287>
c001eab2:	80 ce 02             	or     dh,0x2
c001eab5:	eb 03                	jmp    c001eaba <Vm::faultHandler(regs*)+0x28a>
c001eab7:	80 e6 fd             	and    dh,0xfd
c001eaba:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eabe:	e9 dd 03 00 00       	jmp    c001eea0 <Vm::faultHandler(regs*)+0x670>
c001eac3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eac8:	74 2a                	je     c001eaf4 <Vm::faultHandler(regs*)+0x2c4>
c001eaca:	8b 10                	mov    edx,DWORD PTR [eax]
c001eacc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ead2:	81 ca 00 02 02 00    	or     edx,0x20200
c001ead8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eadb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eadd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eae3:	c1 e8 09             	shr    eax,0x9
c001eae6:	83 e0 01             	and    eax,0x1
c001eae9:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eaec:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eaef:	83 c0 04             	add    eax,0x4
c001eaf2:	eb 25                	jmp    c001eb19 <Vm::faultHandler(regs*)+0x2e9>
c001eaf4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eaf7:	81 ca 00 02 02 00    	or     edx,0x20200
c001eafd:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb00:	66 8b 00             	mov    ax,WORD PTR [eax]
c001eb03:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb09:	66 c1 e8 09          	shr    ax,0x9
c001eb0d:	83 e0 01             	and    eax,0x1
c001eb10:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb13:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb16:	83 c0 02             	add    eax,0x2
c001eb19:	25 ff ff 00 00       	and    eax,0xffff
c001eb1e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eb21:	e9 7a 03 00 00       	jmp    c001eea0 <Vm::faultHandler(regs*)+0x670>
c001eb26:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb2a:	3c ee                	cmp    al,0xee
c001eb2c:	75 10                	jne    c001eb3e <Vm::faultHandler(regs*)+0x30e>
c001eb2e:	83 ec 0c             	sub    esp,0xc
c001eb31:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001eb34:	e8 a2 f9 ff ff       	call   c001e4db <Vm::mainloop3(unsigned long)>
c001eb39:	e9 4b 03 00 00       	jmp    c001ee89 <Vm::faultHandler(regs*)+0x659>
c001eb3e:	83 ec 0c             	sub    esp,0xc
c001eb41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb49:	51                   	push   ecx
c001eb4a:	50                   	push   eax
c001eb4b:	53                   	push   ebx
c001eb4c:	e8 e1 fb ff ff       	call   c001e732 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001eb51:	83 c4 20             	add    esp,0x20
c001eb54:	e9 4a 03 00 00       	jmp    c001eea3 <Vm::faultHandler(regs*)+0x673>
c001eb59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb5e:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eb62:	e9 39 03 00 00       	jmp    c001eea0 <Vm::faultHandler(regs*)+0x670>
c001eb67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb6c:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001eb70:	e9 2b 03 00 00       	jmp    c001eea0 <Vm::faultHandler(regs*)+0x670>
c001eb75:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eb78:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eb7d:	74 2b                	je     c001ebaa <Vm::faultHandler(regs*)+0x37a>
c001eb7f:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001eb86:	76 22                	jbe    c001ebaa <Vm::faultHandler(regs*)+0x37a>
c001eb88:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eb8c:	50                   	push   eax
c001eb8d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eb91:	50                   	push   eax
c001eb92:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eb96:	50                   	push   eax
c001eb97:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eb9b:	50                   	push   eax
c001eb9c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eba0:	50                   	push   eax
c001eba1:	6a 6c                	push   0x6c
c001eba3:	6a 6c                	push   0x6c
c001eba5:	e9 b9 01 00 00       	jmp    c001ed63 <Vm::faultHandler(regs*)+0x533>
c001ebaa:	83 ec 0c             	sub    esp,0xc
c001ebad:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ebb1:	0f b7 f6             	movzx  esi,si
c001ebb4:	50                   	push   eax
c001ebb5:	e8 71 f8 ff ff       	call   c001e42b <Vm::inbv(unsigned short)>
c001ebba:	83 c4 0c             	add    esp,0xc
c001ebbd:	0f b6 c0             	movzx  eax,al
c001ebc0:	50                   	push   eax
c001ebc1:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ebc5:	50                   	push   eax
c001ebc6:	56                   	push   esi
c001ebc7:	e8 24 fc ff ff       	call   c001e7f0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ebcc:	83 c4 10             	add    esp,0x10
c001ebcf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ebd2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ebd6:	74 03                	je     c001ebdb <Vm::faultHandler(regs*)+0x3ab>
c001ebd8:	48                   	dec    eax
c001ebd9:	eb 01                	jmp    c001ebdc <Vm::faultHandler(regs*)+0x3ac>
c001ebdb:	40                   	inc    eax
c001ebdc:	0f b7 c0             	movzx  eax,ax
c001ebdf:	e9 8d 00 00 00       	jmp    c001ec71 <Vm::faultHandler(regs*)+0x441>
c001ebe4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ebe7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ebea:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ebef:	74 29                	je     c001ec1a <Vm::faultHandler(regs*)+0x3ea>
c001ebf1:	3d ff ff 00 00       	cmp    eax,0xffff
c001ebf6:	76 22                	jbe    c001ec1a <Vm::faultHandler(regs*)+0x3ea>
c001ebf8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ebfc:	50                   	push   eax
c001ebfd:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec01:	50                   	push   eax
c001ec02:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec06:	50                   	push   eax
c001ec07:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec0b:	50                   	push   eax
c001ec0c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec10:	50                   	push   eax
c001ec11:	6a 6d                	push   0x6d
c001ec13:	6a 6d                	push   0x6d
c001ec15:	e9 49 01 00 00       	jmp    c001ed63 <Vm::faultHandler(regs*)+0x533>
c001ec1a:	0f b7 c8             	movzx  ecx,ax
c001ec1d:	0f b7 f6             	movzx  esi,si
c001ec20:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ec23:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec28:	74 20                	je     c001ec4a <Vm::faultHandler(regs*)+0x41a>
c001ec2a:	ed                   	in     eax,dx
c001ec2b:	55                   	push   ebp
c001ec2c:	50                   	push   eax
c001ec2d:	51                   	push   ecx
c001ec2e:	56                   	push   esi
c001ec2f:	e8 e7 fb ff ff       	call   c001e81b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ec34:	83 c4 10             	add    esp,0x10
c001ec37:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec3a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec3e:	74 05                	je     c001ec45 <Vm::faultHandler(regs*)+0x415>
c001ec40:	83 e8 04             	sub    eax,0x4
c001ec43:	eb 27                	jmp    c001ec6c <Vm::faultHandler(regs*)+0x43c>
c001ec45:	83 c0 04             	add    eax,0x4
c001ec48:	eb 22                	jmp    c001ec6c <Vm::faultHandler(regs*)+0x43c>
c001ec4a:	66 ed                	in     ax,dx
c001ec4c:	0f b7 c0             	movzx  eax,ax
c001ec4f:	57                   	push   edi
c001ec50:	50                   	push   eax
c001ec51:	51                   	push   ecx
c001ec52:	56                   	push   esi
c001ec53:	e8 ad fb ff ff       	call   c001e805 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ec58:	83 c4 10             	add    esp,0x10
c001ec5b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec5e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec62:	74 05                	je     c001ec69 <Vm::faultHandler(regs*)+0x439>
c001ec64:	83 e8 02             	sub    eax,0x2
c001ec67:	eb 03                	jmp    c001ec6c <Vm::faultHandler(regs*)+0x43c>
c001ec69:	83 c0 02             	add    eax,0x2
c001ec6c:	25 ff ff 00 00       	and    eax,0xffff
c001ec71:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ec74:	e9 27 02 00 00       	jmp    c001eea0 <Vm::faultHandler(regs*)+0x670>
c001ec79:	8d 46 ff             	lea    eax,[esi-0x1]
c001ec7c:	3c 05                	cmp    al,0x5
c001ec7e:	77 24                	ja     c001eca4 <Vm::faultHandler(regs*)+0x474>
c001ec80:	0f b6 c0             	movzx  eax,al
c001ec83:	ff 24 85 0c bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd42f4]
c001ec8a:	0f b7 fd             	movzx  edi,bp
c001ec8d:	eb 15                	jmp    c001eca4 <Vm::faultHandler(regs*)+0x474>
c001ec8f:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ec93:	eb 0f                	jmp    c001eca4 <Vm::faultHandler(regs*)+0x474>
c001ec95:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ec99:	eb 09                	jmp    c001eca4 <Vm::faultHandler(regs*)+0x474>
c001ec9b:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ec9f:	eb 03                	jmp    c001eca4 <Vm::faultHandler(regs*)+0x474>
c001eca1:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001eca4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eca7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ecac:	74 29                	je     c001ecd7 <Vm::faultHandler(regs*)+0x4a7>
c001ecae:	3d ff ff 00 00       	cmp    eax,0xffff
c001ecb3:	76 22                	jbe    c001ecd7 <Vm::faultHandler(regs*)+0x4a7>
c001ecb5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ecb9:	50                   	push   eax
c001ecba:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ecbe:	50                   	push   eax
c001ecbf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ecc3:	50                   	push   eax
c001ecc4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ecc8:	50                   	push   eax
c001ecc9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eccd:	50                   	push   eax
c001ecce:	6a 6e                	push   0x6e
c001ecd0:	6a 6e                	push   0x6e
c001ecd2:	e9 8c 00 00 00       	jmp    c001ed63 <Vm::faultHandler(regs*)+0x533>
c001ecd7:	0f b7 c0             	movzx  eax,ax
c001ecda:	52                   	push   edx
c001ecdb:	52                   	push   edx
c001ecdc:	50                   	push   eax
c001ecdd:	57                   	push   edi
c001ecde:	e8 d9 fa ff ff       	call   c001e7bc <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ece3:	59                   	pop    ecx
c001ece4:	0f b6 c0             	movzx  eax,al
c001ece7:	5e                   	pop    esi
c001ece8:	50                   	push   eax
c001ece9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eced:	50                   	push   eax
c001ecee:	e8 4b f7 ff ff       	call   c001e43e <Vm::outbv(unsigned short, unsigned char)>
c001ecf3:	83 c4 10             	add    esp,0x10
c001ecf6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ecf9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ecfd:	74 03                	je     c001ed02 <Vm::faultHandler(regs*)+0x4d2>
c001ecff:	48                   	dec    eax
c001ed00:	eb 01                	jmp    c001ed03 <Vm::faultHandler(regs*)+0x4d3>
c001ed02:	40                   	inc    eax
c001ed03:	0f b7 c0             	movzx  eax,ax
c001ed06:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ed09:	e9 92 01 00 00       	jmp    c001eea0 <Vm::faultHandler(regs*)+0x670>
c001ed0e:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed11:	3c 05                	cmp    al,0x5
c001ed13:	77 1f                	ja     c001ed34 <Vm::faultHandler(regs*)+0x504>
c001ed15:	0f b6 c0             	movzx  eax,al
c001ed18:	ff 24 85 24 bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd42dc]
c001ed1f:	89 ef                	mov    edi,ebp
c001ed21:	eb 11                	jmp    c001ed34 <Vm::faultHandler(regs*)+0x504>
c001ed23:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ed26:	eb 0c                	jmp    c001ed34 <Vm::faultHandler(regs*)+0x504>
c001ed28:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ed2b:	eb 07                	jmp    c001ed34 <Vm::faultHandler(regs*)+0x504>
c001ed2d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ed30:	eb 02                	jmp    c001ed34 <Vm::faultHandler(regs*)+0x504>
c001ed32:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ed34:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ed37:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed3c:	74 37                	je     c001ed75 <Vm::faultHandler(regs*)+0x545>
c001ed3e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ed44:	76 2f                	jbe    c001ed75 <Vm::faultHandler(regs*)+0x545>
c001ed46:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed4a:	50                   	push   eax
c001ed4b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed4f:	50                   	push   eax
c001ed50:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed54:	50                   	push   eax
c001ed55:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed59:	50                   	push   eax
c001ed5a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed5e:	50                   	push   eax
c001ed5f:	6a 6f                	push   0x6f
c001ed61:	6a 6f                	push   0x6f
c001ed63:	68 b2 bc 02 c0       	push   0xc002bcb2
c001ed68:	e8 34 39 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001ed6d:	83 c4 20             	add    esp,0x20
c001ed70:	e9 86 01 00 00       	jmp    c001eefb <Vm::faultHandler(regs*)+0x6cb>
c001ed75:	0f b7 d7             	movzx  edx,di
c001ed78:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ed7b:	0f b7 c6             	movzx  eax,si
c001ed7e:	81 e1 00 04 00 00    	and    ecx,0x400
c001ed84:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ed87:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed8c:	74 1d                	je     c001edab <Vm::faultHandler(regs*)+0x57b>
c001ed8e:	55                   	push   ebp
c001ed8f:	55                   	push   ebp
c001ed90:	50                   	push   eax
c001ed91:	52                   	push   edx
c001ed92:	e8 48 fa ff ff       	call   c001e7df <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ed97:	83 c4 10             	add    esp,0x10
c001ed9a:	89 fa                	mov    edx,edi
c001ed9c:	ef                   	out    dx,eax
c001ed9d:	85 c9                	test   ecx,ecx
c001ed9f:	74 05                	je     c001eda6 <Vm::faultHandler(regs*)+0x576>
c001eda1:	83 ee 04             	sub    esi,0x4
c001eda4:	eb 21                	jmp    c001edc7 <Vm::faultHandler(regs*)+0x597>
c001eda6:	83 c6 04             	add    esi,0x4
c001eda9:	eb 1c                	jmp    c001edc7 <Vm::faultHandler(regs*)+0x597>
c001edab:	55                   	push   ebp
c001edac:	55                   	push   ebp
c001edad:	50                   	push   eax
c001edae:	52                   	push   edx
c001edaf:	e8 19 fa ff ff       	call   c001e7cd <Vm::readWordFromReal(unsigned short, unsigned short)>
c001edb4:	83 c4 10             	add    esp,0x10
c001edb7:	89 fa                	mov    edx,edi
c001edb9:	66 ef                	out    dx,ax
c001edbb:	85 c9                	test   ecx,ecx
c001edbd:	74 05                	je     c001edc4 <Vm::faultHandler(regs*)+0x594>
c001edbf:	83 ee 02             	sub    esi,0x2
c001edc2:	eb 03                	jmp    c001edc7 <Vm::faultHandler(regs*)+0x597>
c001edc4:	83 c6 02             	add    esi,0x2
c001edc7:	81 e6 ff ff 00 00    	and    esi,0xffff
c001edcd:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001edd0:	e9 cb 00 00 00       	jmp    c001eea0 <Vm::faultHandler(regs*)+0x670>
c001edd5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001eddc:	83 ec 0c             	sub    esp,0xc
c001eddf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ede3:	50                   	push   eax
c001ede4:	e8 42 f6 ff ff       	call   c001e42b <Vm::inbv(unsigned short)>
c001ede9:	0f b6 c0             	movzx  eax,al
c001edec:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001edef:	eb 3f                	jmp    c001ee30 <Vm::faultHandler(regs*)+0x600>
c001edf1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edf6:	74 07                	je     c001edff <Vm::faultHandler(regs*)+0x5cf>
c001edf8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001edfc:	ed                   	in     eax,dx
c001edfd:	eb 14                	jmp    c001ee13 <Vm::faultHandler(regs*)+0x5e3>
c001edff:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ee02:	66 31 f6             	xor    si,si
c001ee05:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ee08:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee0c:	66 ed                	in     ax,dx
c001ee0e:	0f b7 c0             	movzx  eax,ax
c001ee11:	09 f0                	or     eax,esi
c001ee13:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee16:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee1a:	e9 84 00 00 00       	jmp    c001eea3 <Vm::faultHandler(regs*)+0x673>
c001ee1f:	52                   	push   edx
c001ee20:	52                   	push   edx
c001ee21:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ee25:	50                   	push   eax
c001ee26:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee2a:	50                   	push   eax
c001ee2b:	e8 0e f6 ff ff       	call   c001e43e <Vm::outbv(unsigned short, unsigned char)>
c001ee30:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee34:	eb 53                	jmp    c001ee89 <Vm::faultHandler(regs*)+0x659>
c001ee36:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ee39:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee3d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee42:	74 03                	je     c001ee47 <Vm::faultHandler(regs*)+0x617>
c001ee44:	ef                   	out    dx,eax
c001ee45:	eb cf                	jmp    c001ee16 <Vm::faultHandler(regs*)+0x5e6>
c001ee47:	66 ef                	out    dx,ax
c001ee49:	eb cb                	jmp    c001ee16 <Vm::faultHandler(regs*)+0x5e6>
c001ee4b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee52:	83 ec 0c             	sub    esp,0xc
c001ee55:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ee59:	50                   	push   eax
c001ee5a:	e8 cc f5 ff ff       	call   c001e42b <Vm::inbv(unsigned short)>
c001ee5f:	0f b6 c0             	movzx  eax,al
c001ee62:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee65:	eb 1f                	jmp    c001ee86 <Vm::faultHandler(regs*)+0x656>
c001ee67:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ee6a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee6f:	74 03                	je     c001ee74 <Vm::faultHandler(regs*)+0x644>
c001ee71:	ed                   	in     eax,dx
c001ee72:	eb 0d                	jmp    c001ee81 <Vm::faultHandler(regs*)+0x651>
c001ee74:	66 ed                	in     ax,dx
c001ee76:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ee79:	0f b7 c0             	movzx  eax,ax
c001ee7c:	66 31 d2             	xor    dx,dx
c001ee7f:	09 d0                	or     eax,edx
c001ee81:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee84:	eb 1a                	jmp    c001eea0 <Vm::faultHandler(regs*)+0x670>
c001ee86:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee89:	83 c4 10             	add    esp,0x10
c001ee8c:	eb 15                	jmp    c001eea3 <Vm::faultHandler(regs*)+0x673>
c001ee8e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ee91:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ee94:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee99:	74 03                	je     c001ee9e <Vm::faultHandler(regs*)+0x66e>
c001ee9b:	ef                   	out    dx,eax
c001ee9c:	eb 02                	jmp    c001eea0 <Vm::faultHandler(regs*)+0x670>
c001ee9e:	66 ef                	out    dx,ax
c001eea0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eea3:	b0 01                	mov    al,0x1
c001eea5:	eb 56                	jmp    c001eefd <Vm::faultHandler(regs*)+0x6cd>
c001eea7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eeab:	50                   	push   eax
c001eeac:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eeb0:	50                   	push   eax
c001eeb1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eeb5:	50                   	push   eax
c001eeb6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eeba:	50                   	push   eax
c001eebb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eebf:	50                   	push   eax
c001eec0:	52                   	push   edx
c001eec1:	52                   	push   edx
c001eec2:	68 df bc 02 c0       	push   0xc002bcdf
c001eec7:	e8 d5 37 ff ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c001eecc:	83 c4 20             	add    esp,0x20
c001eecf:	83 ec 0c             	sub    esp,0xc
c001eed2:	6a 60                	push   0x60
c001eed4:	e8 52 f5 ff ff       	call   c001e42b <Vm::inbv(unsigned short)>
c001eed9:	83 c4 10             	add    esp,0x10
c001eedc:	3c 1c                	cmp    al,0x1c
c001eede:	74 04                	je     c001eee4 <Vm::faultHandler(regs*)+0x6b4>
c001eee0:	3c 5a                	cmp    al,0x5a
c001eee2:	75 eb                	jne    c001eecf <Vm::faultHandler(regs*)+0x69f>
c001eee4:	3c 5a                	cmp    al,0x5a
c001eee6:	74 04                	je     c001eeec <Vm::faultHandler(regs*)+0x6bc>
c001eee8:	3c 1c                	cmp    al,0x1c
c001eeea:	75 0f                	jne    c001eefb <Vm::faultHandler(regs*)+0x6cb>
c001eeec:	83 ec 0c             	sub    esp,0xc
c001eeef:	6a 60                	push   0x60
c001eef1:	e8 35 f5 ff ff       	call   c001e42b <Vm::inbv(unsigned short)>
c001eef6:	83 c4 10             	add    esp,0x10
c001eef9:	eb e9                	jmp    c001eee4 <Vm::faultHandler(regs*)+0x6b4>
c001eefb:	31 c0                	xor    eax,eax
c001eefd:	83 c4 1c             	add    esp,0x1c
c001ef00:	5b                   	pop    ebx
c001ef01:	5e                   	pop    esi
c001ef02:	5f                   	pop    edi
c001ef03:	5d                   	pop    ebp
c001ef04:	c3                   	ret    

c001ef05 <Vm::fpuInternalTo32(unsigned long long)>:
c001ef05:	57                   	push   edi
c001ef06:	56                   	push   esi
c001ef07:	53                   	push   ebx
c001ef08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef10:	89 d6                	mov    esi,edx
c001ef12:	89 d7                	mov    edi,edx
c001ef14:	89 c1                	mov    ecx,eax
c001ef16:	c1 ef 14             	shr    edi,0x14
c001ef19:	89 d3                	mov    ebx,edx
c001ef1b:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ef21:	31 d2                	xor    edx,edx
c001ef23:	89 f8                	mov    eax,edi
c001ef25:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ef2b:	bf ff 00 00 00       	mov    edi,0xff
c001ef30:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ef35:	83 d2 ff             	adc    edx,0xffffffff
c001ef38:	39 c7                	cmp    edi,eax
c001ef3a:	bf 00 00 00 00       	mov    edi,0x0
c001ef3f:	19 d7                	sbb    edi,edx
c001ef41:	72 15                	jb     c001ef58 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ef43:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ef47:	c1 e0 17             	shl    eax,0x17
c001ef4a:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ef50:	09 f1                	or     ecx,esi
c001ef52:	09 c1                	or     ecx,eax
c001ef54:	89 cf                	mov    edi,ecx
c001ef56:	eb 02                	jmp    c001ef5a <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ef58:	31 ff                	xor    edi,edi
c001ef5a:	89 f8                	mov    eax,edi
c001ef5c:	5b                   	pop    ebx
c001ef5d:	5e                   	pop    esi
c001ef5e:	5f                   	pop    edi
c001ef5f:	c3                   	ret    

c001ef60 <Vm::fpuInternalTo64(unsigned long long)>:
c001ef60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef68:	c3                   	ret    

c001ef69 <Vm::fpu32ToInternal(unsigned int)>:
c001ef69:	57                   	push   edi
c001ef6a:	31 ff                	xor    edi,edi
c001ef6c:	56                   	push   esi
c001ef6d:	53                   	push   ebx
c001ef6e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef72:	89 cb                	mov    ebx,ecx
c001ef74:	89 ce                	mov    esi,ecx
c001ef76:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ef7c:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ef82:	c1 e9 17             	shr    ecx,0x17
c001ef85:	89 f0                	mov    eax,esi
c001ef87:	0f b6 d1             	movzx  edx,cl
c001ef8a:	81 c2 80 03 00 00    	add    edx,0x380
c001ef90:	89 d1                	mov    ecx,edx
c001ef92:	89 fa                	mov    edx,edi
c001ef94:	c1 e1 14             	shl    ecx,0x14
c001ef97:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ef9b:	c1 e0 1d             	shl    eax,0x1d
c001ef9e:	89 d7                	mov    edi,edx
c001efa0:	89 c6                	mov    esi,eax
c001efa2:	89 ca                	mov    edx,ecx
c001efa4:	89 f0                	mov    eax,esi
c001efa6:	09 fa                	or     edx,edi
c001efa8:	09 da                	or     edx,ebx
c001efaa:	5b                   	pop    ebx
c001efab:	5e                   	pop    esi
c001efac:	5f                   	pop    edi
c001efad:	c3                   	ret    

c001efae <Vm::fpu64ToInternal(unsigned long long)>:
c001efae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efb6:	c3                   	ret    

c001efb7 <Vm::fpuFloatToLong(unsigned long long)>:
c001efb7:	57                   	push   edi
c001efb8:	31 c0                	xor    eax,eax
c001efba:	56                   	push   esi
c001efbb:	31 d2                	xor    edx,edx
c001efbd:	53                   	push   ebx
c001efbe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001efc2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001efc6:	89 d9                	mov    ecx,ebx
c001efc8:	c1 e9 14             	shr    ecx,0x14
c001efcb:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001efd1:	89 cf                	mov    edi,ecx
c001efd3:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001efd9:	78 33                	js     c001f00e <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001efdb:	89 d9                	mov    ecx,ebx
c001efdd:	89 f0                	mov    eax,esi
c001efdf:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001efe5:	81 c9 00 00 10 00    	or     ecx,0x100000
c001efeb:	89 ca                	mov    edx,ecx
c001efed:	b9 34 00 00 00       	mov    ecx,0x34
c001eff2:	29 f9                	sub    ecx,edi
c001eff4:	0f ad d0             	shrd   eax,edx,cl
c001eff7:	d3 fa                	sar    edx,cl
c001eff9:	f6 c1 20             	test   cl,0x20
c001effc:	74 05                	je     c001f003 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001effe:	89 d0                	mov    eax,edx
c001f000:	c1 fa 1f             	sar    edx,0x1f
c001f003:	85 db                	test   ebx,ebx
c001f005:	79 07                	jns    c001f00e <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f007:	f7 d8                	neg    eax
c001f009:	83 d2 00             	adc    edx,0x0
c001f00c:	f7 da                	neg    edx
c001f00e:	5b                   	pop    ebx
c001f00f:	5e                   	pop    esi
c001f010:	5f                   	pop    edi
c001f011:	c3                   	ret    

c001f012 <Vm::fpuULongToFloat(unsigned long long)>:
c001f012:	57                   	push   edi
c001f013:	31 c9                	xor    ecx,ecx
c001f015:	56                   	push   esi
c001f016:	53                   	push   ebx
c001f017:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f01b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f01f:	0f ba e7 14          	bt     edi,0x14
c001f023:	72 07                	jb     c001f02c <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f025:	01 f6                	add    esi,esi
c001f027:	11 ff                	adc    edi,edi
c001f029:	41                   	inc    ecx
c001f02a:	eb f3                	jmp    c001f01f <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f02c:	89 fa                	mov    edx,edi
c001f02e:	89 f0                	mov    eax,esi
c001f030:	bb 33 04 00 00       	mov    ebx,0x433
c001f035:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f03b:	29 cb                	sub    ebx,ecx
c001f03d:	89 d9                	mov    ecx,ebx
c001f03f:	5b                   	pop    ebx
c001f040:	c1 e1 14             	shl    ecx,0x14
c001f043:	5e                   	pop    esi
c001f044:	09 ca                	or     edx,ecx
c001f046:	5f                   	pop    edi
c001f047:	c3                   	ret    

c001f048 <Vm::fpuLongToFloat(long long)>:
c001f048:	56                   	push   esi
c001f049:	31 c0                	xor    eax,eax
c001f04b:	53                   	push   ebx
c001f04c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f050:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f054:	39 c8                	cmp    eax,ecx
c001f056:	19 d8                	sbb    eax,ebx
c001f058:	7d 04                	jge    c001f05e <Vm::fpuLongToFloat(long long)+0x16>
c001f05a:	31 f6                	xor    esi,esi
c001f05c:	eb 0c                	jmp    c001f06a <Vm::fpuLongToFloat(long long)+0x22>
c001f05e:	f7 d9                	neg    ecx
c001f060:	be 01 00 00 00       	mov    esi,0x1
c001f065:	83 d3 00             	adc    ebx,0x0
c001f068:	f7 db                	neg    ebx
c001f06a:	31 c0                	xor    eax,eax
c001f06c:	0f ba e3 14          	bt     ebx,0x14
c001f070:	72 07                	jb     c001f079 <Vm::fpuLongToFloat(long long)+0x31>
c001f072:	01 c9                	add    ecx,ecx
c001f074:	11 db                	adc    ebx,ebx
c001f076:	40                   	inc    eax
c001f077:	eb f3                	jmp    c001f06c <Vm::fpuLongToFloat(long long)+0x24>
c001f079:	ba 33 04 00 00       	mov    edx,0x433
c001f07e:	29 c2                	sub    edx,eax
c001f080:	89 c8                	mov    eax,ecx
c001f082:	c1 e2 14             	shl    edx,0x14
c001f085:	89 d9                	mov    ecx,ebx
c001f087:	89 f3                	mov    ebx,esi
c001f089:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f08f:	09 ca                	or     edx,ecx
c001f091:	84 db                	test   bl,bl
c001f093:	74 06                	je     c001f09b <Vm::fpuLongToFloat(long long)+0x53>
c001f095:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f09b:	5b                   	pop    ebx
c001f09c:	5e                   	pop    esi
c001f09d:	c3                   	ret    

c001f09e <Vm::fpuGet0()>:
c001f09e:	31 c0                	xor    eax,eax
c001f0a0:	31 d2                	xor    edx,edx
c001f0a2:	c3                   	ret    

c001f0a3 <Vm::fpuGet1()>:
c001f0a3:	b8 01 00 00 00       	mov    eax,0x1
c001f0a8:	31 d2                	xor    edx,edx
c001f0aa:	c3                   	ret    

c001f0ab <Vm::fpuGetPi()>:
c001f0ab:	b8 03 00 00 00       	mov    eax,0x3
c001f0b0:	31 d2                	xor    edx,edx
c001f0b2:	c3                   	ret    

c001f0b3 <Vm::fpuGetLog2E()>:
c001f0b3:	83 ec 18             	sub    esp,0x18
c001f0b6:	68 3c bd 02 c0       	push   0xc002bd3c
c001f0bb:	e8 4d ad ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001f0c0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0c5:	31 d2                	xor    edx,edx
c001f0c7:	83 c4 1c             	add    esp,0x1c
c001f0ca:	c3                   	ret    

c001f0cb <Vm::fpuGetLogE2()>:
c001f0cb:	83 ec 18             	sub    esp,0x18
c001f0ce:	68 48 bd 02 c0       	push   0xc002bd48
c001f0d3:	e8 35 ad ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001f0d8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0dd:	31 d2                	xor    edx,edx
c001f0df:	83 c4 1c             	add    esp,0x1c
c001f0e2:	c3                   	ret    

c001f0e3 <Vm::fpuGetLog210()>:
c001f0e3:	83 ec 18             	sub    esp,0x18
c001f0e6:	68 54 bd 02 c0       	push   0xc002bd54
c001f0eb:	e8 1d ad ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001f0f0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0f5:	31 d2                	xor    edx,edx
c001f0f7:	83 c4 1c             	add    esp,0x1c
c001f0fa:	c3                   	ret    

c001f0fb <Vm::fpuGetLog102()>:
c001f0fb:	83 ec 18             	sub    esp,0x18
c001f0fe:	68 61 bd 02 c0       	push   0xc002bd61
c001f103:	e8 05 ad ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001f108:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f10d:	31 d2                	xor    edx,edx
c001f10f:	83 c4 1c             	add    esp,0x1c
c001f112:	c3                   	ret    

c001f113 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f117:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f11b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f11f:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f123:	0f 92 c0             	setb   al
c001f126:	c3                   	ret    

c001f127 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f127:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12f:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f133:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f137:	09 c2                	or     edx,eax
c001f139:	0f 94 c0             	sete   al
c001f13c:	c3                   	ret    

c001f13d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f13d:	57                   	push   edi
c001f13e:	56                   	push   esi
c001f13f:	53                   	push   ebx
c001f140:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f144:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f148:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f14c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f150:	57                   	push   edi
c001f151:	56                   	push   esi
c001f152:	53                   	push   ebx
c001f153:	51                   	push   ecx
c001f154:	e8 ce ff ff ff       	call   c001f127 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f159:	83 c4 10             	add    esp,0x10
c001f15c:	88 c2                	mov    dl,al
c001f15e:	31 c0                	xor    eax,eax
c001f160:	84 d2                	test   dl,dl
c001f162:	75 0c                	jne    c001f170 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f164:	57                   	push   edi
c001f165:	56                   	push   esi
c001f166:	53                   	push   ebx
c001f167:	51                   	push   ecx
c001f168:	e8 a6 ff ff ff       	call   c001f113 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f16d:	83 c4 10             	add    esp,0x10
c001f170:	83 e0 01             	and    eax,0x1
c001f173:	5b                   	pop    ebx
c001f174:	88 c1                	mov    cl,al
c001f176:	83 e2 01             	and    edx,0x1
c001f179:	a0 e1 0e 03 c0       	mov    al,ds:0xc0030ee1
c001f17e:	c1 e2 06             	shl    edx,0x6
c001f181:	83 e0 ba             	and    eax,0xffffffba
c001f184:	5e                   	pop    esi
c001f185:	09 c8                	or     eax,ecx
c001f187:	5f                   	pop    edi
c001f188:	09 d0                	or     eax,edx
c001f18a:	a2 e1 0e 03 c0       	mov    ds:0xc0030ee1,al
c001f18f:	c3                   	ret    

c001f190 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f190:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f194:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f198:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f19c:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f1a0:	c3                   	ret    

c001f1a1 <Vm::fpuAbs(unsigned long long)>:
c001f1a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1a9:	c3                   	ret    

c001f1aa <Vm::fpuChs(unsigned long long)>:
c001f1aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1b2:	f7 d8                	neg    eax
c001f1b4:	83 d2 00             	adc    edx,0x0
c001f1b7:	f7 da                	neg    edx
c001f1b9:	c3                   	ret    

c001f1ba <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f1ba:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f1be:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f1c3:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f1c7:	eb c7                	jmp    c001f190 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f1c9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f1c9:	53                   	push   ebx
c001f1ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f1d6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f1da:	0f af ca             	imul   ecx,edx
c001f1dd:	0f af d8             	imul   ebx,eax
c001f1e0:	f7 e2                	mul    edx
c001f1e2:	01 d9                	add    ecx,ebx
c001f1e4:	5b                   	pop    ebx
c001f1e5:	01 ca                	add    edx,ecx
c001f1e7:	c3                   	ret    

c001f1e8 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f1e8:	83 ec 0c             	sub    esp,0xc
c001f1eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1fb:	e8 e4 74 00 00       	call   c00266e4 <__udivdi3>
c001f200:	83 c4 1c             	add    esp,0x1c
c001f203:	c3                   	ret    

c001f204 <Vm::fpuSquare(unsigned long long)>:
c001f204:	50                   	push   eax
c001f205:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f209:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f20d:	52                   	push   edx
c001f20e:	50                   	push   eax
c001f20f:	52                   	push   edx
c001f210:	50                   	push   eax
c001f211:	e8 b3 ff ff ff       	call   c001f1c9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f216:	83 c4 14             	add    esp,0x14
c001f219:	c3                   	ret    

c001f21a <Vm::fpuGetReg(int)>:
c001f21a:	83 ec 0c             	sub    esp,0xc
c001f21d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f222:	76 10                	jbe    c001f234 <Vm::fpuGetReg(int)+0x1a>
c001f224:	83 ec 0c             	sub    esp,0xc
c001f227:	68 6e bd 02 c0       	push   0xc002bd6e
c001f22c:	e8 dc ab ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001f231:	83 c4 10             	add    esp,0x10
c001f234:	a0 e1 0e 03 c0       	mov    al,ds:0xc0030ee1
c001f239:	b9 08 00 00 00       	mov    ecx,0x8
c001f23e:	c0 e8 03             	shr    al,0x3
c001f241:	83 e0 07             	and    eax,0x7
c001f244:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f248:	99                   	cdq    
c001f249:	f7 f9                	idiv   ecx
c001f24b:	8b 04 d5 e4 0e 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf11c]
c001f252:	8b 14 d5 e8 0e 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf118]
c001f259:	83 c4 0c             	add    esp,0xc
c001f25c:	c3                   	ret    

c001f25d <Vm::fpuSetReg(int, unsigned long long)>:
c001f25d:	57                   	push   edi
c001f25e:	56                   	push   esi
c001f25f:	52                   	push   edx
c001f260:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f264:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f268:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f26d:	76 10                	jbe    c001f27f <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f26f:	83 ec 0c             	sub    esp,0xc
c001f272:	68 81 bd 02 c0       	push   0xc002bd81
c001f277:	e8 91 ab ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c001f27c:	83 c4 10             	add    esp,0x10
c001f27f:	a0 e1 0e 03 c0       	mov    al,ds:0xc0030ee1
c001f284:	b9 08 00 00 00       	mov    ecx,0x8
c001f289:	c0 e8 03             	shr    al,0x3
c001f28c:	83 e0 07             	and    eax,0x7
c001f28f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f293:	99                   	cdq    
c001f294:	f7 f9                	idiv   ecx
c001f296:	89 34 d5 e4 0e 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf11c],esi
c001f29d:	89 3c d5 e8 0e 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf118],edi
c001f2a4:	58                   	pop    eax
c001f2a5:	5e                   	pop    esi
c001f2a6:	5f                   	pop    edi
c001f2a7:	c3                   	ret    

c001f2a8 <Vm::fpuPush(unsigned long long)>:
c001f2a8:	a0 e1 0e 03 c0       	mov    al,ds:0xc0030ee1
c001f2ad:	c0 e8 03             	shr    al,0x3
c001f2b0:	83 e0 07             	and    eax,0x7
c001f2b3:	83 c0 07             	add    eax,0x7
c001f2b6:	88 c2                	mov    dl,al
c001f2b8:	83 e0 07             	and    eax,0x7
c001f2bb:	83 e2 07             	and    edx,0x7
c001f2be:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f2c5:	8a 15 e1 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ee1
c001f2cb:	83 e2 c7             	and    edx,0xffffffc7
c001f2ce:	09 ca                	or     edx,ecx
c001f2d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2d4:	88 15 e1 0e 03 c0    	mov    BYTE PTR ds:0xc0030ee1,dl
c001f2da:	89 0c c5 e8 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf118],ecx
c001f2e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2e5:	89 14 c5 e4 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf11c],edx
c001f2ec:	a1 24 0f 03 c0       	mov    eax,ds:0xc0030f24
c001f2f1:	83 f8 08             	cmp    eax,0x8
c001f2f4:	75 08                	jne    c001f2fe <Vm::fpuPush(unsigned long long)+0x56>
c001f2f6:	80 0d e0 0e 03 c0 40 	or     BYTE PTR ds:0xc0030ee0,0x40
c001f2fd:	c3                   	ret    
c001f2fe:	40                   	inc    eax
c001f2ff:	a3 24 0f 03 c0       	mov    ds:0xc0030f24,eax
c001f304:	c3                   	ret    

c001f305 <Vm::fpuPop()>:
c001f305:	8a 0d e1 0e 03 c0    	mov    cl,BYTE PTR ds:0xc0030ee1
c001f30b:	53                   	push   ebx
c001f30c:	c0 e9 03             	shr    cl,0x3
c001f30f:	8a 1d e1 0e 03 c0    	mov    bl,BYTE PTR ds:0xc0030ee1
c001f315:	83 e1 07             	and    ecx,0x7
c001f318:	83 e3 c7             	and    ebx,0xffffffc7
c001f31b:	8b 04 cd e4 0e 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf11c]
c001f322:	8b 14 cd e8 0e 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf118]
c001f329:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f330:	83 e1 38             	and    ecx,0x38
c001f333:	09 d9                	or     ecx,ebx
c001f335:	88 0d e1 0e 03 c0    	mov    BYTE PTR ds:0xc0030ee1,cl
c001f33b:	8b 0d 24 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f24
c001f341:	85 c9                	test   ecx,ecx
c001f343:	74 09                	je     c001f34e <Vm::fpuPop()+0x49>
c001f345:	49                   	dec    ecx
c001f346:	89 0d 24 0f 03 c0    	mov    DWORD PTR ds:0xc0030f24,ecx
c001f34c:	eb 07                	jmp    c001f355 <Vm::fpuPop()+0x50>
c001f34e:	80 0d e0 0e 03 c0 40 	or     BYTE PTR ds:0xc0030ee0,0x40
c001f355:	5b                   	pop    ebx
c001f356:	c3                   	ret    

c001f357 <Vm::x87Handler(regs*)>:
c001f357:	55                   	push   ebp
c001f358:	57                   	push   edi
c001f359:	56                   	push   esi
c001f35a:	53                   	push   ebx
c001f35b:	83 ec 1c             	sub    esp,0x1c
c001f35e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f362:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f367:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f36a:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f372:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f376:	50                   	push   eax
c001f377:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f37b:	50                   	push   eax
c001f37c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f380:	50                   	push   eax
c001f381:	53                   	push   ebx
c001f382:	e8 9f a1 ff ff       	call   c0019526 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f387:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f38a:	83 c4 10             	add    esp,0x10
c001f38d:	89 c6                	mov    esi,eax
c001f38f:	80 fa d9             	cmp    dl,0xd9
c001f392:	0f 85 52 01 00 00    	jne    c001f4ea <Vm::x87Handler(regs*)+0x193>
c001f398:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f39c:	8d 50 20             	lea    edx,[eax+0x20]
c001f39f:	80 fa 0e             	cmp    dl,0xe
c001f3a2:	0f 87 86 00 00 00    	ja     c001f42e <Vm::x87Handler(regs*)+0xd7>
c001f3a8:	0f b6 d2             	movzx  edx,dl
c001f3ab:	ff 24 95 94 bd 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd426c]
c001f3b2:	e8 e7 fc ff ff       	call   c001f09e <Vm::fpuGet0()>
c001f3b7:	eb 05                	jmp    c001f3be <Vm::x87Handler(regs*)+0x67>
c001f3b9:	e8 e5 fc ff ff       	call   c001f0a3 <Vm::fpuGet1()>
c001f3be:	57                   	push   edi
c001f3bf:	57                   	push   edi
c001f3c0:	52                   	push   edx
c001f3c1:	50                   	push   eax
c001f3c2:	e8 e1 fe ff ff       	call   c001f2a8 <Vm::fpuPush(unsigned long long)>
c001f3c7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3cb:	83 c4 10             	add    esp,0x10
c001f3ce:	b0 01                	mov    al,0x1
c001f3d0:	e9 e3 09 00 00       	jmp    c001fdb8 <Vm::x87Handler(regs*)+0xa61>
c001f3d5:	83 ec 0c             	sub    esp,0xc
c001f3d8:	6a 00                	push   0x0
c001f3da:	e8 3b fe ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f3df:	59                   	pop    ecx
c001f3e0:	5e                   	pop    esi
c001f3e1:	52                   	push   edx
c001f3e2:	50                   	push   eax
c001f3e3:	e8 c2 fd ff ff       	call   c001f1aa <Vm::fpuChs(unsigned long long)>
c001f3e8:	eb 13                	jmp    c001f3fd <Vm::x87Handler(regs*)+0xa6>
c001f3ea:	83 ec 0c             	sub    esp,0xc
c001f3ed:	6a 00                	push   0x0
c001f3ef:	e8 26 fe ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f3f4:	5f                   	pop    edi
c001f3f5:	5d                   	pop    ebp
c001f3f6:	52                   	push   edx
c001f3f7:	50                   	push   eax
c001f3f8:	e8 a4 fd ff ff       	call   c001f1a1 <Vm::fpuAbs(unsigned long long)>
c001f3fd:	83 c4 0c             	add    esp,0xc
c001f400:	52                   	push   edx
c001f401:	50                   	push   eax
c001f402:	6a 00                	push   0x0
c001f404:	e8 54 fe ff ff       	call   c001f25d <Vm::fpuSetReg(int, unsigned long long)>
c001f409:	eb bc                	jmp    c001f3c7 <Vm::x87Handler(regs*)+0x70>
c001f40b:	e8 d3 fc ff ff       	call   c001f0e3 <Vm::fpuGetLog210()>
c001f410:	eb ac                	jmp    c001f3be <Vm::x87Handler(regs*)+0x67>
c001f412:	e8 9c fc ff ff       	call   c001f0b3 <Vm::fpuGetLog2E()>
c001f417:	eb a5                	jmp    c001f3be <Vm::x87Handler(regs*)+0x67>
c001f419:	e8 8d fc ff ff       	call   c001f0ab <Vm::fpuGetPi()>
c001f41e:	eb 9e                	jmp    c001f3be <Vm::x87Handler(regs*)+0x67>
c001f420:	e8 d6 fc ff ff       	call   c001f0fb <Vm::fpuGetLog102()>
c001f425:	eb 97                	jmp    c001f3be <Vm::x87Handler(regs*)+0x67>
c001f427:	e8 9f fc ff ff       	call   c001f0cb <Vm::fpuGetLogE2()>
c001f42c:	eb 90                	jmp    c001f3be <Vm::x87Handler(regs*)+0x67>
c001f42e:	8d 50 40             	lea    edx,[eax+0x40]
c001f431:	80 fa 07             	cmp    dl,0x7
c001f434:	77 15                	ja     c001f44b <Vm::x87Handler(regs*)+0xf4>
c001f436:	83 ec 0c             	sub    esp,0xc
c001f439:	2d c0 00 00 00       	sub    eax,0xc0
c001f43e:	50                   	push   eax
c001f43f:	e8 d6 fd ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f444:	59                   	pop    ecx
c001f445:	5e                   	pop    esi
c001f446:	e9 75 ff ff ff       	jmp    c001f3c0 <Vm::x87Handler(regs*)+0x69>
c001f44b:	8d 50 38             	lea    edx,[eax+0x38]
c001f44e:	80 fa 07             	cmp    dl,0x7
c001f451:	77 3c                	ja     c001f48f <Vm::x87Handler(regs*)+0x138>
c001f453:	83 ec 0c             	sub    esp,0xc
c001f456:	2d c8 00 00 00       	sub    eax,0xc8
c001f45b:	50                   	push   eax
c001f45c:	e8 b9 fd ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f461:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f468:	89 c6                	mov    esi,eax
c001f46a:	89 d7                	mov    edi,edx
c001f46c:	e8 a9 fd ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f471:	83 c4 0c             	add    esp,0xc
c001f474:	52                   	push   edx
c001f475:	50                   	push   eax
c001f476:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f47a:	2d c8 00 00 00       	sub    eax,0xc8
c001f47f:	50                   	push   eax
c001f480:	e8 d8 fd ff ff       	call   c001f25d <Vm::fpuSetReg(int, unsigned long long)>
c001f485:	83 c4 0c             	add    esp,0xc
c001f488:	57                   	push   edi
c001f489:	56                   	push   esi
c001f48a:	e9 73 ff ff ff       	jmp    c001f402 <Vm::x87Handler(regs*)+0xab>
c001f48f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f493:	84 d2                	test   dl,dl
c001f495:	75 0f                	jne    c001f4a6 <Vm::x87Handler(regs*)+0x14f>
c001f497:	83 ec 0c             	sub    esp,0xc
c001f49a:	ff 36                	push   DWORD PTR [esi]
c001f49c:	e8 c8 fa ff ff       	call   c001ef69 <Vm::fpu32ToInternal(unsigned int)>
c001f4a1:	e9 bf 00 00 00       	jmp    c001f565 <Vm::x87Handler(regs*)+0x20e>
c001f4a6:	80 fa 03             	cmp    dl,0x3
c001f4a9:	75 13                	jne    c001f4be <Vm::x87Handler(regs*)+0x167>
c001f4ab:	e8 55 fe ff ff       	call   c001f305 <Vm::fpuPop()>
c001f4b0:	55                   	push   ebp
c001f4b1:	55                   	push   ebp
c001f4b2:	52                   	push   edx
c001f4b3:	50                   	push   eax
c001f4b4:	e8 4c fa ff ff       	call   c001ef05 <Vm::fpuInternalTo32(unsigned long long)>
c001f4b9:	e9 88 00 00 00       	jmp    c001f546 <Vm::x87Handler(regs*)+0x1ef>
c001f4be:	80 fa 05             	cmp    dl,0x5
c001f4c1:	75 0e                	jne    c001f4d1 <Vm::x87Handler(regs*)+0x17a>
c001f4c3:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f4c6:	66 a3 e2 0e 03 c0    	mov    ds:0xc0030ee2,ax
c001f4cc:	e9 df 00 00 00       	jmp    c001f5b0 <Vm::x87Handler(regs*)+0x259>
c001f4d1:	31 c0                	xor    eax,eax
c001f4d3:	80 fa 07             	cmp    dl,0x7
c001f4d6:	0f 85 dc 08 00 00    	jne    c001fdb8 <Vm::x87Handler(regs*)+0xa61>
c001f4dc:	66 a1 e2 0e 03 c0    	mov    ax,ds:0xc0030ee2
c001f4e2:	66 89 06             	mov    WORD PTR [esi],ax
c001f4e5:	e9 c6 00 00 00       	jmp    c001f5b0 <Vm::x87Handler(regs*)+0x259>
c001f4ea:	80 fa d8             	cmp    dl,0xd8
c001f4ed:	0f 84 c9 00 00 00    	je     c001f5bc <Vm::x87Handler(regs*)+0x265>
c001f4f3:	80 fa dc             	cmp    dl,0xdc
c001f4f6:	0f 84 0d 02 00 00    	je     c001f709 <Vm::x87Handler(regs*)+0x3b2>
c001f4fc:	80 fa de             	cmp    dl,0xde
c001f4ff:	0f 84 cd 02 00 00    	je     c001f7d2 <Vm::x87Handler(regs*)+0x47b>
c001f505:	80 fa dd             	cmp    dl,0xdd
c001f508:	0f 84 5f 04 00 00    	je     c001f96d <Vm::x87Handler(regs*)+0x616>
c001f50e:	80 fa da             	cmp    dl,0xda
c001f511:	0f 84 24 05 00 00    	je     c001fa3b <Vm::x87Handler(regs*)+0x6e4>
c001f517:	80 fa df             	cmp    dl,0xdf
c001f51a:	0f 84 68 05 00 00    	je     c001fa88 <Vm::x87Handler(regs*)+0x731>
c001f520:	31 c0                	xor    eax,eax
c001f522:	80 fa db             	cmp    dl,0xdb
c001f525:	0f 85 8d 08 00 00    	jne    c001fdb8 <Vm::x87Handler(regs*)+0xa61>
c001f52b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f52f:	80 fa 03             	cmp    dl,0x3
c001f532:	0f 85 70 06 00 00    	jne    c001fba8 <Vm::x87Handler(regs*)+0x851>
c001f538:	e8 c8 fd ff ff       	call   c001f305 <Vm::fpuPop()>
c001f53d:	55                   	push   ebp
c001f53e:	55                   	push   ebp
c001f53f:	52                   	push   edx
c001f540:	50                   	push   eax
c001f541:	e8 71 fa ff ff       	call   c001efb7 <Vm::fpuFloatToLong(unsigned long long)>
c001f546:	83 c4 10             	add    esp,0x10
c001f549:	89 06                	mov    DWORD PTR [esi],eax
c001f54b:	eb 63                	jmp    c001f5b0 <Vm::x87Handler(regs*)+0x259>
c001f54d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f551:	84 d2                	test   dl,dl
c001f553:	0f 85 e6 05 00 00    	jne    c001fb3f <Vm::x87Handler(regs*)+0x7e8>
c001f559:	57                   	push   edi
c001f55a:	57                   	push   edi
c001f55b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f55e:	ff 36                	push   DWORD PTR [esi]
c001f560:	e8 49 fa ff ff       	call   c001efae <Vm::fpu64ToInternal(unsigned long long)>
c001f565:	5e                   	pop    esi
c001f566:	5f                   	pop    edi
c001f567:	52                   	push   edx
c001f568:	50                   	push   eax
c001f569:	e8 3a fd ff ff       	call   c001f2a8 <Vm::fpuPush(unsigned long long)>
c001f56e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f572:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f575:	e9 51 fe ff ff       	jmp    c001f3cb <Vm::x87Handler(regs*)+0x74>
c001f57a:	80 fa 03             	cmp    dl,0x3
c001f57d:	0f 85 d7 06 00 00    	jne    c001fc5a <Vm::x87Handler(regs*)+0x903>
c001f583:	57                   	push   edi
c001f584:	57                   	push   edi
c001f585:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f588:	ff 36                	push   DWORD PTR [esi]
c001f58a:	e8 1f fa ff ff       	call   c001efae <Vm::fpu64ToInternal(unsigned long long)>
c001f58f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f596:	89 c6                	mov    esi,eax
c001f598:	89 d7                	mov    edi,edx
c001f59a:	e8 7b fc ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f59f:	57                   	push   edi
c001f5a0:	56                   	push   esi
c001f5a1:	52                   	push   edx
c001f5a2:	50                   	push   eax
c001f5a3:	e8 95 fb ff ff       	call   c001f13d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5a8:	83 c4 20             	add    esp,0x20
c001f5ab:	e8 55 fd ff ff       	call   c001f305 <Vm::fpuPop()>
c001f5b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5b4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5b7:	e9 12 fe ff ff       	jmp    c001f3ce <Vm::x87Handler(regs*)+0x77>
c001f5bc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5c0:	8d 50 40             	lea    edx,[eax+0x40]
c001f5c3:	80 fa 07             	cmp    dl,0x7
c001f5c6:	77 29                	ja     c001f5f1 <Vm::x87Handler(regs*)+0x29a>
c001f5c8:	83 ec 0c             	sub    esp,0xc
c001f5cb:	2d c0 00 00 00       	sub    eax,0xc0
c001f5d0:	50                   	push   eax
c001f5d1:	e8 44 fc ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f5d6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5dd:	89 c6                	mov    esi,eax
c001f5df:	89 d7                	mov    edi,edx
c001f5e1:	e8 34 fc ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f5e6:	57                   	push   edi
c001f5e7:	56                   	push   esi
c001f5e8:	52                   	push   edx
c001f5e9:	50                   	push   eax
c001f5ea:	e8 a1 fb ff ff       	call   c001f190 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f5ef:	eb 2f                	jmp    c001f620 <Vm::x87Handler(regs*)+0x2c9>
c001f5f1:	8d 50 38             	lea    edx,[eax+0x38]
c001f5f4:	80 fa 07             	cmp    dl,0x7
c001f5f7:	77 2f                	ja     c001f628 <Vm::x87Handler(regs*)+0x2d1>
c001f5f9:	83 ec 0c             	sub    esp,0xc
c001f5fc:	2d c8 00 00 00       	sub    eax,0xc8
c001f601:	50                   	push   eax
c001f602:	e8 13 fc ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f607:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f60e:	89 c6                	mov    esi,eax
c001f610:	89 d7                	mov    edi,edx
c001f612:	e8 03 fc ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f617:	57                   	push   edi
c001f618:	56                   	push   esi
c001f619:	52                   	push   edx
c001f61a:	50                   	push   eax
c001f61b:	e8 a9 fb ff ff       	call   c001f1c9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f620:	83 c4 1c             	add    esp,0x1c
c001f623:	e9 d8 fd ff ff       	jmp    c001f400 <Vm::x87Handler(regs*)+0xa9>
c001f628:	8d 50 30             	lea    edx,[eax+0x30]
c001f62b:	80 fa 07             	cmp    dl,0x7
c001f62e:	77 0d                	ja     c001f63d <Vm::x87Handler(regs*)+0x2e6>
c001f630:	83 ec 0c             	sub    esp,0xc
c001f633:	2d d0 00 00 00       	sub    eax,0xd0
c001f638:	e9 99 03 00 00       	jmp    c001f9d6 <Vm::x87Handler(regs*)+0x67f>
c001f63d:	8d 50 28             	lea    edx,[eax+0x28]
c001f640:	80 fa 07             	cmp    dl,0x7
c001f643:	77 0d                	ja     c001f652 <Vm::x87Handler(regs*)+0x2fb>
c001f645:	83 ec 0c             	sub    esp,0xc
c001f648:	2d d8 00 00 00       	sub    eax,0xd8
c001f64d:	e9 c0 03 00 00       	jmp    c001fa12 <Vm::x87Handler(regs*)+0x6bb>
c001f652:	8d 50 20             	lea    edx,[eax+0x20]
c001f655:	80 fa 07             	cmp    dl,0x7
c001f658:	77 1b                	ja     c001f675 <Vm::x87Handler(regs*)+0x31e>
c001f65a:	83 ec 0c             	sub    esp,0xc
c001f65d:	2d e0 00 00 00       	sub    eax,0xe0
c001f662:	50                   	push   eax
c001f663:	e8 b2 fb ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f668:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f66f:	89 c6                	mov    esi,eax
c001f671:	89 d7                	mov    edi,edx
c001f673:	eb 22                	jmp    c001f697 <Vm::x87Handler(regs*)+0x340>
c001f675:	8d 50 18             	lea    edx,[eax+0x18]
c001f678:	80 fa 07             	cmp    dl,0x7
c001f67b:	77 2d                	ja     c001f6aa <Vm::x87Handler(regs*)+0x353>
c001f67d:	83 ec 0c             	sub    esp,0xc
c001f680:	6a 00                	push   0x0
c001f682:	e8 93 fb ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f687:	89 c6                	mov    esi,eax
c001f689:	89 d7                	mov    edi,edx
c001f68b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f68f:	2d e8 00 00 00       	sub    eax,0xe8
c001f694:	89 04 24             	mov    DWORD PTR [esp],eax
c001f697:	e8 7e fb ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f69c:	57                   	push   edi
c001f69d:	56                   	push   esi
c001f69e:	52                   	push   edx
c001f69f:	50                   	push   eax
c001f6a0:	e8 15 fb ff ff       	call   c001f1ba <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6a5:	e9 76 ff ff ff       	jmp    c001f620 <Vm::x87Handler(regs*)+0x2c9>
c001f6aa:	8d 50 10             	lea    edx,[eax+0x10]
c001f6ad:	80 fa 07             	cmp    dl,0x7
c001f6b0:	77 1b                	ja     c001f6cd <Vm::x87Handler(regs*)+0x376>
c001f6b2:	83 ec 0c             	sub    esp,0xc
c001f6b5:	2d f0 00 00 00       	sub    eax,0xf0
c001f6ba:	50                   	push   eax
c001f6bb:	e8 5a fb ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f6c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6c7:	89 c6                	mov    esi,eax
c001f6c9:	89 d7                	mov    edi,edx
c001f6cb:	eb 22                	jmp    c001f6ef <Vm::x87Handler(regs*)+0x398>
c001f6cd:	3c f7                	cmp    al,0xf7
c001f6cf:	0f 86 d1 03 00 00    	jbe    c001faa6 <Vm::x87Handler(regs*)+0x74f>
c001f6d5:	83 ec 0c             	sub    esp,0xc
c001f6d8:	6a 00                	push   0x0
c001f6da:	e8 3b fb ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f6df:	89 c6                	mov    esi,eax
c001f6e1:	89 d7                	mov    edi,edx
c001f6e3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6e7:	2d f8 00 00 00       	sub    eax,0xf8
c001f6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6ef:	e8 26 fb ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f6f4:	57                   	push   edi
c001f6f5:	56                   	push   esi
c001f6f6:	52                   	push   edx
c001f6f7:	50                   	push   eax
c001f6f8:	e8 eb fa ff ff       	call   c001f1e8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f6fd:	83 c4 1c             	add    esp,0x1c
c001f700:	52                   	push   edx
c001f701:	50                   	push   eax
c001f702:	6a 00                	push   0x0
c001f704:	e9 51 02 00 00       	jmp    c001f95a <Vm::x87Handler(regs*)+0x603>
c001f709:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f70d:	8d 50 40             	lea    edx,[eax+0x40]
c001f710:	80 fa 07             	cmp    dl,0x7
c001f713:	77 37                	ja     c001f74c <Vm::x87Handler(regs*)+0x3f5>
c001f715:	83 ec 0c             	sub    esp,0xc
c001f718:	2d c0 00 00 00       	sub    eax,0xc0
c001f71d:	50                   	push   eax
c001f71e:	e8 f7 fa ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f723:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f72a:	89 c6                	mov    esi,eax
c001f72c:	89 d7                	mov    edi,edx
c001f72e:	e8 e7 fa ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f733:	57                   	push   edi
c001f734:	56                   	push   esi
c001f735:	52                   	push   edx
c001f736:	50                   	push   eax
c001f737:	e8 54 fa ff ff       	call   c001f190 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f73c:	83 c4 1c             	add    esp,0x1c
c001f73f:	52                   	push   edx
c001f740:	50                   	push   eax
c001f741:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f745:	2d c0 00 00 00       	sub    eax,0xc0
c001f74a:	eb 3d                	jmp    c001f789 <Vm::x87Handler(regs*)+0x432>
c001f74c:	8d 50 38             	lea    edx,[eax+0x38]
c001f74f:	80 fa 07             	cmp    dl,0x7
c001f752:	77 3b                	ja     c001f78f <Vm::x87Handler(regs*)+0x438>
c001f754:	83 ec 0c             	sub    esp,0xc
c001f757:	2d c8 00 00 00       	sub    eax,0xc8
c001f75c:	50                   	push   eax
c001f75d:	e8 b8 fa ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f762:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f769:	89 c6                	mov    esi,eax
c001f76b:	89 d7                	mov    edi,edx
c001f76d:	e8 a8 fa ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f772:	57                   	push   edi
c001f773:	56                   	push   esi
c001f774:	52                   	push   edx
c001f775:	50                   	push   eax
c001f776:	e8 4e fa ff ff       	call   c001f1c9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f77b:	83 c4 1c             	add    esp,0x1c
c001f77e:	52                   	push   edx
c001f77f:	50                   	push   eax
c001f780:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f784:	2d c8 00 00 00       	sub    eax,0xc8
c001f789:	50                   	push   eax
c001f78a:	e9 75 fc ff ff       	jmp    c001f404 <Vm::x87Handler(regs*)+0xad>
c001f78f:	83 c0 18             	add    eax,0x18
c001f792:	3c 07                	cmp    al,0x7
c001f794:	0f 87 3b 04 00 00    	ja     c001fbd5 <Vm::x87Handler(regs*)+0x87e>
c001f79a:	83 ec 0c             	sub    esp,0xc
c001f79d:	6a 00                	push   0x0
c001f79f:	e8 76 fa ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f7a4:	89 c6                	mov    esi,eax
c001f7a6:	89 d7                	mov    edi,edx
c001f7a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7ac:	2d e8 00 00 00       	sub    eax,0xe8
c001f7b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7b4:	e8 61 fa ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f7b9:	57                   	push   edi
c001f7ba:	56                   	push   esi
c001f7bb:	52                   	push   edx
c001f7bc:	50                   	push   eax
c001f7bd:	e8 f8 f9 ff ff       	call   c001f1ba <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7c2:	83 c4 1c             	add    esp,0x1c
c001f7c5:	52                   	push   edx
c001f7c6:	50                   	push   eax
c001f7c7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7cb:	2d e8 00 00 00       	sub    eax,0xe8
c001f7d0:	eb b7                	jmp    c001f789 <Vm::x87Handler(regs*)+0x432>
c001f7d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7d6:	8d 50 40             	lea    edx,[eax+0x40]
c001f7d9:	80 fa 07             	cmp    dl,0x7
c001f7dc:	77 3a                	ja     c001f818 <Vm::x87Handler(regs*)+0x4c1>
c001f7de:	83 ec 0c             	sub    esp,0xc
c001f7e1:	2d c0 00 00 00       	sub    eax,0xc0
c001f7e6:	50                   	push   eax
c001f7e7:	e8 2e fa ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f7ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7f3:	89 c6                	mov    esi,eax
c001f7f5:	89 d7                	mov    edi,edx
c001f7f7:	e8 1e fa ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f7fc:	57                   	push   edi
c001f7fd:	56                   	push   esi
c001f7fe:	52                   	push   edx
c001f7ff:	50                   	push   eax
c001f800:	e8 8b f9 ff ff       	call   c001f190 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f805:	83 c4 1c             	add    esp,0x1c
c001f808:	52                   	push   edx
c001f809:	50                   	push   eax
c001f80a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f80e:	2d c0 00 00 00       	sub    eax,0xc0
c001f813:	e9 9e 01 00 00       	jmp    c001f9b6 <Vm::x87Handler(regs*)+0x65f>
c001f818:	8d 50 20             	lea    edx,[eax+0x20]
c001f81b:	80 fa 07             	cmp    dl,0x7
c001f81e:	77 3a                	ja     c001f85a <Vm::x87Handler(regs*)+0x503>
c001f820:	83 ec 0c             	sub    esp,0xc
c001f823:	2d e0 00 00 00       	sub    eax,0xe0
c001f828:	50                   	push   eax
c001f829:	e8 ec f9 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f82e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f835:	89 c6                	mov    esi,eax
c001f837:	89 d7                	mov    edi,edx
c001f839:	e8 dc f9 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f83e:	57                   	push   edi
c001f83f:	56                   	push   esi
c001f840:	52                   	push   edx
c001f841:	50                   	push   eax
c001f842:	e8 73 f9 ff ff       	call   c001f1ba <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f847:	83 c4 1c             	add    esp,0x1c
c001f84a:	52                   	push   edx
c001f84b:	50                   	push   eax
c001f84c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f850:	2d e0 00 00 00       	sub    eax,0xe0
c001f855:	e9 5c 01 00 00       	jmp    c001f9b6 <Vm::x87Handler(regs*)+0x65f>
c001f85a:	8d 50 18             	lea    edx,[eax+0x18]
c001f85d:	80 fa 07             	cmp    dl,0x7
c001f860:	77 3b                	ja     c001f89d <Vm::x87Handler(regs*)+0x546>
c001f862:	83 ec 0c             	sub    esp,0xc
c001f865:	6a 00                	push   0x0
c001f867:	e8 ae f9 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f86c:	89 c6                	mov    esi,eax
c001f86e:	89 d7                	mov    edi,edx
c001f870:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f874:	2d e8 00 00 00       	sub    eax,0xe8
c001f879:	89 04 24             	mov    DWORD PTR [esp],eax
c001f87c:	e8 99 f9 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f881:	57                   	push   edi
c001f882:	56                   	push   esi
c001f883:	52                   	push   edx
c001f884:	50                   	push   eax
c001f885:	e8 30 f9 ff ff       	call   c001f1ba <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f88a:	83 c4 1c             	add    esp,0x1c
c001f88d:	52                   	push   edx
c001f88e:	50                   	push   eax
c001f88f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f893:	2d e8 00 00 00       	sub    eax,0xe8
c001f898:	e9 19 01 00 00       	jmp    c001f9b6 <Vm::x87Handler(regs*)+0x65f>
c001f89d:	8d 50 38             	lea    edx,[eax+0x38]
c001f8a0:	80 fa 07             	cmp    dl,0x7
c001f8a3:	77 37                	ja     c001f8dc <Vm::x87Handler(regs*)+0x585>
c001f8a5:	83 ec 0c             	sub    esp,0xc
c001f8a8:	2d c8 00 00 00       	sub    eax,0xc8
c001f8ad:	50                   	push   eax
c001f8ae:	e8 67 f9 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f8b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8ba:	89 c6                	mov    esi,eax
c001f8bc:	89 d7                	mov    edi,edx
c001f8be:	e8 57 f9 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f8c3:	57                   	push   edi
c001f8c4:	56                   	push   esi
c001f8c5:	52                   	push   edx
c001f8c6:	50                   	push   eax
c001f8c7:	e8 fd f8 ff ff       	call   c001f1c9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8cc:	83 c4 1c             	add    esp,0x1c
c001f8cf:	52                   	push   edx
c001f8d0:	50                   	push   eax
c001f8d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8d5:	2d c8 00 00 00       	sub    eax,0xc8
c001f8da:	eb 7d                	jmp    c001f959 <Vm::x87Handler(regs*)+0x602>
c001f8dc:	3c f7                	cmp    al,0xf7
c001f8de:	76 38                	jbe    c001f918 <Vm::x87Handler(regs*)+0x5c1>
c001f8e0:	83 ec 0c             	sub    esp,0xc
c001f8e3:	6a 00                	push   0x0
c001f8e5:	e8 30 f9 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f8ea:	89 c6                	mov    esi,eax
c001f8ec:	89 d7                	mov    edi,edx
c001f8ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8f2:	2d f8 00 00 00       	sub    eax,0xf8
c001f8f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8fa:	e8 1b f9 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f8ff:	57                   	push   edi
c001f900:	56                   	push   esi
c001f901:	52                   	push   edx
c001f902:	50                   	push   eax
c001f903:	e8 e0 f8 ff ff       	call   c001f1e8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f908:	83 c4 1c             	add    esp,0x1c
c001f90b:	52                   	push   edx
c001f90c:	50                   	push   eax
c001f90d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f911:	2d f8 00 00 00       	sub    eax,0xf8
c001f916:	eb 41                	jmp    c001f959 <Vm::x87Handler(regs*)+0x602>
c001f918:	8d 50 10             	lea    edx,[eax+0x10]
c001f91b:	80 fa 07             	cmp    dl,0x7
c001f91e:	0f 87 5a 01 00 00    	ja     c001fa7e <Vm::x87Handler(regs*)+0x727>
c001f924:	83 ec 0c             	sub    esp,0xc
c001f927:	2d f0 00 00 00       	sub    eax,0xf0
c001f92c:	50                   	push   eax
c001f92d:	e8 e8 f8 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f932:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f939:	89 c6                	mov    esi,eax
c001f93b:	89 d7                	mov    edi,edx
c001f93d:	e8 d8 f8 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f942:	57                   	push   edi
c001f943:	56                   	push   esi
c001f944:	52                   	push   edx
c001f945:	50                   	push   eax
c001f946:	e8 9d f8 ff ff       	call   c001f1e8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f94b:	83 c4 1c             	add    esp,0x1c
c001f94e:	52                   	push   edx
c001f94f:	50                   	push   eax
c001f950:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f954:	2d f0 00 00 00       	sub    eax,0xf0
c001f959:	50                   	push   eax
c001f95a:	e8 fe f8 ff ff       	call   c001f25d <Vm::fpuSetReg(int, unsigned long long)>
c001f95f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f963:	e8 9d f9 ff ff       	call   c001f305 <Vm::fpuPop()>
c001f968:	e9 5e fa ff ff       	jmp    c001f3cb <Vm::x87Handler(regs*)+0x74>
c001f96d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f971:	8d 50 30             	lea    edx,[eax+0x30]
c001f974:	80 fa 07             	cmp    dl,0x7
c001f977:	77 1d                	ja     c001f996 <Vm::x87Handler(regs*)+0x63f>
c001f979:	83 ec 0c             	sub    esp,0xc
c001f97c:	6a 00                	push   0x0
c001f97e:	e8 97 f8 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f983:	83 c4 0c             	add    esp,0xc
c001f986:	52                   	push   edx
c001f987:	50                   	push   eax
c001f988:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f98c:	2d d0 00 00 00       	sub    eax,0xd0
c001f991:	e9 f3 fd ff ff       	jmp    c001f789 <Vm::x87Handler(regs*)+0x432>
c001f996:	8d 50 28             	lea    edx,[eax+0x28]
c001f999:	80 fa 07             	cmp    dl,0x7
c001f99c:	77 28                	ja     c001f9c6 <Vm::x87Handler(regs*)+0x66f>
c001f99e:	83 ec 0c             	sub    esp,0xc
c001f9a1:	6a 00                	push   0x0
c001f9a3:	e8 72 f8 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f9a8:	83 c4 0c             	add    esp,0xc
c001f9ab:	52                   	push   edx
c001f9ac:	50                   	push   eax
c001f9ad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9b1:	2d d8 00 00 00       	sub    eax,0xd8
c001f9b6:	50                   	push   eax
c001f9b7:	e8 a1 f8 ff ff       	call   c001f25d <Vm::fpuSetReg(int, unsigned long long)>
c001f9bc:	e8 44 f9 ff ff       	call   c001f305 <Vm::fpuPop()>
c001f9c1:	e9 01 fa ff ff       	jmp    c001f3c7 <Vm::x87Handler(regs*)+0x70>
c001f9c6:	8d 50 20             	lea    edx,[eax+0x20]
c001f9c9:	80 fa 07             	cmp    dl,0x7
c001f9cc:	77 30                	ja     c001f9fe <Vm::x87Handler(regs*)+0x6a7>
c001f9ce:	83 ec 0c             	sub    esp,0xc
c001f9d1:	2d e0 00 00 00       	sub    eax,0xe0
c001f9d6:	50                   	push   eax
c001f9d7:	e8 3e f8 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f9dc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9e3:	89 c6                	mov    esi,eax
c001f9e5:	89 d7                	mov    edi,edx
c001f9e7:	e8 2e f8 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001f9ec:	57                   	push   edi
c001f9ed:	56                   	push   esi
c001f9ee:	52                   	push   edx
c001f9ef:	50                   	push   eax
c001f9f0:	e8 48 f7 ff ff       	call   c001f13d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f9f5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9f9:	e9 54 02 00 00       	jmp    c001fc52 <Vm::x87Handler(regs*)+0x8fb>
c001f9fe:	8d 50 18             	lea    edx,[eax+0x18]
c001fa01:	80 fa 07             	cmp    dl,0x7
c001fa04:	0f 87 43 fb ff ff    	ja     c001f54d <Vm::x87Handler(regs*)+0x1f6>
c001fa0a:	83 ec 0c             	sub    esp,0xc
c001fa0d:	2d e8 00 00 00       	sub    eax,0xe8
c001fa12:	50                   	push   eax
c001fa13:	e8 02 f8 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fa18:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa1f:	89 c6                	mov    esi,eax
c001fa21:	89 d7                	mov    edi,edx
c001fa23:	e8 f2 f7 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fa28:	57                   	push   edi
c001fa29:	56                   	push   esi
c001fa2a:	52                   	push   edx
c001fa2b:	50                   	push   eax
c001fa2c:	e8 0c f7 ff ff       	call   c001f13d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa31:	83 c4 20             	add    esp,0x20
c001fa34:	e8 cc f8 ff ff       	call   c001f305 <Vm::fpuPop()>
c001fa39:	eb 62                	jmp    c001fa9d <Vm::x87Handler(regs*)+0x746>
c001fa3b:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fa3f:	0f 85 0f 01 00 00    	jne    c001fb54 <Vm::x87Handler(regs*)+0x7fd>
c001fa45:	83 ec 0c             	sub    esp,0xc
c001fa48:	6a 01                	push   0x1
c001fa4a:	e8 cb f7 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fa4f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa56:	89 c6                	mov    esi,eax
c001fa58:	89 d7                	mov    edi,edx
c001fa5a:	e8 bb f7 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fa5f:	57                   	push   edi
c001fa60:	56                   	push   esi
c001fa61:	52                   	push   edx
c001fa62:	50                   	push   eax
c001fa63:	e8 d5 f6 ff ff       	call   c001f13d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa68:	83 c4 20             	add    esp,0x20
c001fa6b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa6f:	e8 91 f8 ff ff       	call   c001f305 <Vm::fpuPop()>
c001fa74:	e8 8c f8 ff ff       	call   c001f305 <Vm::fpuPop()>
c001fa79:	e9 50 f9 ff ff       	jmp    c001f3ce <Vm::x87Handler(regs*)+0x77>
c001fa7e:	3c d9                	cmp    al,0xd9
c001fa80:	0f 85 b5 02 00 00    	jne    c001fd3b <Vm::x87Handler(regs*)+0x9e4>
c001fa86:	eb bd                	jmp    c001fa45 <Vm::x87Handler(regs*)+0x6ee>
c001fa88:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fa8c:	0f 85 ea 02 00 00    	jne    c001fd7c <Vm::x87Handler(regs*)+0xa25>
c001fa92:	0f b7 05 e0 0e 03 c0 	movzx  eax,WORD PTR ds:0xc0030ee0
c001fa99:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fa9d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001faa1:	e9 28 f9 ff ff       	jmp    c001f3ce <Vm::x87Handler(regs*)+0x77>
c001faa6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001faaa:	84 d2                	test   dl,dl
c001faac:	75 0f                	jne    c001fabd <Vm::x87Handler(regs*)+0x766>
c001faae:	83 ec 0c             	sub    esp,0xc
c001fab1:	ff 36                	push   DWORD PTR [esi]
c001fab3:	e8 b1 f4 ff ff       	call   c001ef69 <Vm::fpu32ToInternal(unsigned int)>
c001fab8:	e9 2c 01 00 00       	jmp    c001fbe9 <Vm::x87Handler(regs*)+0x892>
c001fabd:	80 fa 01             	cmp    dl,0x1
c001fac0:	75 0f                	jne    c001fad1 <Vm::x87Handler(regs*)+0x77a>
c001fac2:	83 ec 0c             	sub    esp,0xc
c001fac5:	ff 36                	push   DWORD PTR [esi]
c001fac7:	e8 9d f4 ff ff       	call   c001ef69 <Vm::fpu32ToInternal(unsigned int)>
c001facc:	e9 81 02 00 00       	jmp    c001fd52 <Vm::x87Handler(regs*)+0x9fb>
c001fad1:	80 fa 04             	cmp    dl,0x4
c001fad4:	75 0f                	jne    c001fae5 <Vm::x87Handler(regs*)+0x78e>
c001fad6:	83 ec 0c             	sub    esp,0xc
c001fad9:	ff 36                	push   DWORD PTR [esi]
c001fadb:	e8 89 f4 ff ff       	call   c001ef69 <Vm::fpu32ToInternal(unsigned int)>
c001fae0:	e9 86 01 00 00       	jmp    c001fc6b <Vm::x87Handler(regs*)+0x914>
c001fae5:	80 fa 05             	cmp    dl,0x5
c001fae8:	75 1b                	jne    c001fb05 <Vm::x87Handler(regs*)+0x7ae>
c001faea:	83 ec 0c             	sub    esp,0xc
c001faed:	6a 00                	push   0x0
c001faef:	e8 26 f7 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001faf4:	89 c7                	mov    edi,eax
c001faf6:	89 d5                	mov    ebp,edx
c001faf8:	58                   	pop    eax
c001faf9:	ff 36                	push   DWORD PTR [esi]
c001fafb:	e8 69 f4 ff ff       	call   c001ef69 <Vm::fpu32ToInternal(unsigned int)>
c001fb00:	e9 a3 01 00 00       	jmp    c001fca8 <Vm::x87Handler(regs*)+0x951>
c001fb05:	80 fa 06             	cmp    dl,0x6
c001fb08:	75 0f                	jne    c001fb19 <Vm::x87Handler(regs*)+0x7c2>
c001fb0a:	83 ec 0c             	sub    esp,0xc
c001fb0d:	ff 36                	push   DWORD PTR [esi]
c001fb0f:	e8 55 f4 ff ff       	call   c001ef69 <Vm::fpu32ToInternal(unsigned int)>
c001fb14:	e9 ae 01 00 00       	jmp    c001fcc7 <Vm::x87Handler(regs*)+0x970>
c001fb19:	31 c0                	xor    eax,eax
c001fb1b:	80 fa 07             	cmp    dl,0x7
c001fb1e:	0f 85 94 02 00 00    	jne    c001fdb8 <Vm::x87Handler(regs*)+0xa61>
c001fb24:	83 ec 0c             	sub    esp,0xc
c001fb27:	6a 00                	push   0x0
c001fb29:	e8 ec f6 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fb2e:	89 c7                	mov    edi,eax
c001fb30:	89 d5                	mov    ebp,edx
c001fb32:	58                   	pop    eax
c001fb33:	ff 36                	push   DWORD PTR [esi]
c001fb35:	e8 2f f4 ff ff       	call   c001ef69 <Vm::fpu32ToInternal(unsigned int)>
c001fb3a:	e9 cb 01 00 00       	jmp    c001fd0a <Vm::x87Handler(regs*)+0x9b3>
c001fb3f:	80 fa 03             	cmp    dl,0x3
c001fb42:	0f 85 d3 01 00 00    	jne    c001fd1b <Vm::x87Handler(regs*)+0x9c4>
c001fb48:	e8 b8 f7 ff ff       	call   c001f305 <Vm::fpuPop()>
c001fb4d:	51                   	push   ecx
c001fb4e:	51                   	push   ecx
c001fb4f:	e9 de 01 00 00       	jmp    c001fd32 <Vm::x87Handler(regs*)+0x9db>
c001fb54:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb58:	80 fa 01             	cmp    dl,0x1
c001fb5b:	75 09                	jne    c001fb66 <Vm::x87Handler(regs*)+0x80f>
c001fb5d:	57                   	push   edi
c001fb5e:	57                   	push   edi
c001fb5f:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb61:	e9 e3 01 00 00       	jmp    c001fd49 <Vm::x87Handler(regs*)+0x9f2>
c001fb66:	80 fa 04             	cmp    dl,0x4
c001fb69:	75 12                	jne    c001fb7d <Vm::x87Handler(regs*)+0x826>
c001fb6b:	31 d2                	xor    edx,edx
c001fb6d:	51                   	push   ecx
c001fb6e:	51                   	push   ecx
c001fb6f:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb71:	52                   	push   edx
c001fb72:	50                   	push   eax
c001fb73:	e8 d0 f4 ff ff       	call   c001f048 <Vm::fpuLongToFloat(long long)>
c001fb78:	e9 ee 00 00 00       	jmp    c001fc6b <Vm::x87Handler(regs*)+0x914>
c001fb7d:	31 c0                	xor    eax,eax
c001fb7f:	80 fa 07             	cmp    dl,0x7
c001fb82:	0f 85 30 02 00 00    	jne    c001fdb8 <Vm::x87Handler(regs*)+0xa61>
c001fb88:	83 ec 0c             	sub    esp,0xc
c001fb8b:	6a 00                	push   0x0
c001fb8d:	e8 88 f6 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fb92:	89 c7                	mov    edi,eax
c001fb94:	89 d5                	mov    ebp,edx
c001fb96:	58                   	pop    eax
c001fb97:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb99:	5a                   	pop    edx
c001fb9a:	31 d2                	xor    edx,edx
c001fb9c:	52                   	push   edx
c001fb9d:	50                   	push   eax
c001fb9e:	e8 a5 f4 ff ff       	call   c001f048 <Vm::fpuLongToFloat(long long)>
c001fba3:	e9 62 01 00 00       	jmp    c001fd0a <Vm::x87Handler(regs*)+0x9b3>
c001fba8:	84 d2                	test   dl,dl
c001fbaa:	75 0d                	jne    c001fbb9 <Vm::x87Handler(regs*)+0x862>
c001fbac:	31 d2                	xor    edx,edx
c001fbae:	55                   	push   ebp
c001fbaf:	55                   	push   ebp
c001fbb0:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbb2:	52                   	push   edx
c001fbb3:	50                   	push   eax
c001fbb4:	e9 d3 01 00 00       	jmp    c001fd8c <Vm::x87Handler(regs*)+0xa35>
c001fbb9:	31 c0                	xor    eax,eax
c001fbbb:	80 fa 02             	cmp    dl,0x2
c001fbbe:	0f 85 f4 01 00 00    	jne    c001fdb8 <Vm::x87Handler(regs*)+0xa61>
c001fbc4:	83 ec 0c             	sub    esp,0xc
c001fbc7:	6a 00                	push   0x0
c001fbc9:	e8 4c f6 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fbce:	59                   	pop    ecx
c001fbcf:	5f                   	pop    edi
c001fbd0:	e9 6a f9 ff ff       	jmp    c001f53f <Vm::x87Handler(regs*)+0x1e8>
c001fbd5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbd9:	84 d2                	test   dl,dl
c001fbdb:	75 2a                	jne    c001fc07 <Vm::x87Handler(regs*)+0x8b0>
c001fbdd:	50                   	push   eax
c001fbde:	50                   	push   eax
c001fbdf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbe2:	ff 36                	push   DWORD PTR [esi]
c001fbe4:	e8 c5 f3 ff ff       	call   c001efae <Vm::fpu64ToInternal(unsigned long long)>
c001fbe9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbf0:	89 c6                	mov    esi,eax
c001fbf2:	89 d7                	mov    edi,edx
c001fbf4:	e8 21 f6 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fbf9:	57                   	push   edi
c001fbfa:	56                   	push   esi
c001fbfb:	52                   	push   edx
c001fbfc:	50                   	push   eax
c001fbfd:	e8 8e f5 ff ff       	call   c001f190 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc02:	e9 64 01 00 00       	jmp    c001fd6b <Vm::x87Handler(regs*)+0xa14>
c001fc07:	80 fa 01             	cmp    dl,0x1
c001fc0a:	75 11                	jne    c001fc1d <Vm::x87Handler(regs*)+0x8c6>
c001fc0c:	50                   	push   eax
c001fc0d:	50                   	push   eax
c001fc0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc11:	ff 36                	push   DWORD PTR [esi]
c001fc13:	e8 96 f3 ff ff       	call   c001efae <Vm::fpu64ToInternal(unsigned long long)>
c001fc18:	e9 35 01 00 00       	jmp    c001fd52 <Vm::x87Handler(regs*)+0x9fb>
c001fc1d:	80 fa 02             	cmp    dl,0x2
c001fc20:	0f 85 54 f9 ff ff    	jne    c001f57a <Vm::x87Handler(regs*)+0x223>
c001fc26:	55                   	push   ebp
c001fc27:	55                   	push   ebp
c001fc28:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc2b:	ff 36                	push   DWORD PTR [esi]
c001fc2d:	e8 7c f3 ff ff       	call   c001efae <Vm::fpu64ToInternal(unsigned long long)>
c001fc32:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc39:	89 c6                	mov    esi,eax
c001fc3b:	89 d7                	mov    edi,edx
c001fc3d:	e8 d8 f5 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fc42:	57                   	push   edi
c001fc43:	56                   	push   esi
c001fc44:	52                   	push   edx
c001fc45:	50                   	push   eax
c001fc46:	e8 f2 f4 ff ff       	call   c001f13d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc4f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc52:	83 c4 20             	add    esp,0x20
c001fc55:	e9 74 f7 ff ff       	jmp    c001f3ce <Vm::x87Handler(regs*)+0x77>
c001fc5a:	80 fa 04             	cmp    dl,0x4
c001fc5d:	75 2a                	jne    c001fc89 <Vm::x87Handler(regs*)+0x932>
c001fc5f:	51                   	push   ecx
c001fc60:	51                   	push   ecx
c001fc61:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc64:	ff 36                	push   DWORD PTR [esi]
c001fc66:	e8 43 f3 ff ff       	call   c001efae <Vm::fpu64ToInternal(unsigned long long)>
c001fc6b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc72:	89 c6                	mov    esi,eax
c001fc74:	89 d7                	mov    edi,edx
c001fc76:	e8 9f f5 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fc7b:	57                   	push   edi
c001fc7c:	56                   	push   esi
c001fc7d:	52                   	push   edx
c001fc7e:	50                   	push   eax
c001fc7f:	e8 36 f5 ff ff       	call   c001f1ba <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc84:	e9 e2 00 00 00       	jmp    c001fd6b <Vm::x87Handler(regs*)+0xa14>
c001fc89:	80 fa 05             	cmp    dl,0x5
c001fc8c:	75 28                	jne    c001fcb6 <Vm::x87Handler(regs*)+0x95f>
c001fc8e:	83 ec 0c             	sub    esp,0xc
c001fc91:	6a 00                	push   0x0
c001fc93:	e8 82 f5 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fc98:	89 c7                	mov    edi,eax
c001fc9a:	89 d5                	mov    ebp,edx
c001fc9c:	58                   	pop    eax
c001fc9d:	5a                   	pop    edx
c001fc9e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fca1:	ff 36                	push   DWORD PTR [esi]
c001fca3:	e8 06 f3 ff ff       	call   c001efae <Vm::fpu64ToInternal(unsigned long long)>
c001fca8:	83 c4 10             	add    esp,0x10
c001fcab:	55                   	push   ebp
c001fcac:	57                   	push   edi
c001fcad:	52                   	push   edx
c001fcae:	50                   	push   eax
c001fcaf:	e8 06 f5 ff ff       	call   c001f1ba <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcb4:	eb 60                	jmp    c001fd16 <Vm::x87Handler(regs*)+0x9bf>
c001fcb6:	80 fa 06             	cmp    dl,0x6
c001fcb9:	75 2a                	jne    c001fce5 <Vm::x87Handler(regs*)+0x98e>
c001fcbb:	51                   	push   ecx
c001fcbc:	51                   	push   ecx
c001fcbd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcc0:	ff 36                	push   DWORD PTR [esi]
c001fcc2:	e8 e7 f2 ff ff       	call   c001efae <Vm::fpu64ToInternal(unsigned long long)>
c001fcc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcce:	89 c6                	mov    esi,eax
c001fcd0:	89 d7                	mov    edi,edx
c001fcd2:	e8 43 f5 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fcd7:	57                   	push   edi
c001fcd8:	56                   	push   esi
c001fcd9:	52                   	push   edx
c001fcda:	50                   	push   eax
c001fcdb:	e8 08 f5 ff ff       	call   c001f1e8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fce0:	e9 86 00 00 00       	jmp    c001fd6b <Vm::x87Handler(regs*)+0xa14>
c001fce5:	31 c0                	xor    eax,eax
c001fce7:	80 fa 07             	cmp    dl,0x7
c001fcea:	0f 85 c8 00 00 00    	jne    c001fdb8 <Vm::x87Handler(regs*)+0xa61>
c001fcf0:	83 ec 0c             	sub    esp,0xc
c001fcf3:	6a 00                	push   0x0
c001fcf5:	e8 20 f5 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fcfa:	89 c7                	mov    edi,eax
c001fcfc:	89 d5                	mov    ebp,edx
c001fcfe:	58                   	pop    eax
c001fcff:	5a                   	pop    edx
c001fd00:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd03:	ff 36                	push   DWORD PTR [esi]
c001fd05:	e8 a4 f2 ff ff       	call   c001efae <Vm::fpu64ToInternal(unsigned long long)>
c001fd0a:	83 c4 10             	add    esp,0x10
c001fd0d:	55                   	push   ebp
c001fd0e:	57                   	push   edi
c001fd0f:	52                   	push   edx
c001fd10:	50                   	push   eax
c001fd11:	e8 d2 f4 ff ff       	call   c001f1e8 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd16:	83 c4 0c             	add    esp,0xc
c001fd19:	eb 53                	jmp    c001fd6e <Vm::x87Handler(regs*)+0xa17>
c001fd1b:	31 c0                	xor    eax,eax
c001fd1d:	80 fa 02             	cmp    dl,0x2
c001fd20:	0f 85 92 00 00 00    	jne    c001fdb8 <Vm::x87Handler(regs*)+0xa61>
c001fd26:	83 ec 0c             	sub    esp,0xc
c001fd29:	6a 00                	push   0x0
c001fd2b:	e8 ea f4 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fd30:	59                   	pop    ecx
c001fd31:	5f                   	pop    edi
c001fd32:	52                   	push   edx
c001fd33:	50                   	push   eax
c001fd34:	e8 27 f2 ff ff       	call   c001ef60 <Vm::fpuInternalTo64(unsigned long long)>
c001fd39:	eb 70                	jmp    c001fdab <Vm::x87Handler(regs*)+0xa54>
c001fd3b:	31 c0                	xor    eax,eax
c001fd3d:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fd42:	75 74                	jne    c001fdb8 <Vm::x87Handler(regs*)+0xa61>
c001fd44:	50                   	push   eax
c001fd45:	50                   	push   eax
c001fd46:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fd49:	31 d2                	xor    edx,edx
c001fd4b:	52                   	push   edx
c001fd4c:	50                   	push   eax
c001fd4d:	e8 f6 f2 ff ff       	call   c001f048 <Vm::fpuLongToFloat(long long)>
c001fd52:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd59:	89 c6                	mov    esi,eax
c001fd5b:	89 d7                	mov    edi,edx
c001fd5d:	e8 b8 f4 ff ff       	call   c001f21a <Vm::fpuGetReg(int)>
c001fd62:	57                   	push   edi
c001fd63:	56                   	push   esi
c001fd64:	52                   	push   edx
c001fd65:	50                   	push   eax
c001fd66:	e8 5e f4 ff ff       	call   c001f1c9 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd6b:	83 c4 1c             	add    esp,0x1c
c001fd6e:	52                   	push   edx
c001fd6f:	50                   	push   eax
c001fd70:	6a 00                	push   0x0
c001fd72:	e8 e6 f4 ff ff       	call   c001f25d <Vm::fpuSetReg(int, unsigned long long)>
c001fd77:	e9 f2 f7 ff ff       	jmp    c001f56e <Vm::x87Handler(regs*)+0x217>
c001fd7c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd80:	80 fa 05             	cmp    dl,0x5
c001fd83:	75 11                	jne    c001fd96 <Vm::x87Handler(regs*)+0xa3f>
c001fd85:	55                   	push   ebp
c001fd86:	55                   	push   ebp
c001fd87:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd8a:	ff 36                	push   DWORD PTR [esi]
c001fd8c:	e8 81 f2 ff ff       	call   c001f012 <Vm::fpuULongToFloat(unsigned long long)>
c001fd91:	e9 cf f7 ff ff       	jmp    c001f565 <Vm::x87Handler(regs*)+0x20e>
c001fd96:	31 c0                	xor    eax,eax
c001fd98:	80 fa 07             	cmp    dl,0x7
c001fd9b:	75 1b                	jne    c001fdb8 <Vm::x87Handler(regs*)+0xa61>
c001fd9d:	e8 63 f5 ff ff       	call   c001f305 <Vm::fpuPop()>
c001fda2:	51                   	push   ecx
c001fda3:	51                   	push   ecx
c001fda4:	52                   	push   edx
c001fda5:	50                   	push   eax
c001fda6:	e8 0c f2 ff ff       	call   c001efb7 <Vm::fpuFloatToLong(unsigned long long)>
c001fdab:	83 c4 10             	add    esp,0x10
c001fdae:	89 06                	mov    DWORD PTR [esi],eax
c001fdb0:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fdb3:	e9 f8 f7 ff ff       	jmp    c001f5b0 <Vm::x87Handler(regs*)+0x259>
c001fdb8:	83 c4 1c             	add    esp,0x1c
c001fdbb:	5b                   	pop    ebx
c001fdbc:	5e                   	pop    esi
c001fdbd:	5f                   	pop    edi
c001fdbe:	5d                   	pop    ebp
c001fdbf:	c3                   	ret    

c001fdc0 <__static_initialization_and_destruction_0(int, int)>:
c001fdc0:	83 ec 0c             	sub    esp,0xc
c001fdc3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fdc8:	75 1a                	jne    c001fde4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fdca:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fdd2:	75 10                	jne    c001fde4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fdd4:	83 ec 0c             	sub    esp,0xc
c001fdd7:	68 e0 0e 03 c0       	push   0xc0030ee0
c001fddc:	e8 09 8d 00 00       	call   c0028aea <Vm::_FPUState::_FPUState()>
c001fde1:	83 c4 10             	add    esp,0x10
c001fde4:	90                   	nop
c001fde5:	83 c4 0c             	add    esp,0xc
c001fde8:	c3                   	ret    

c001fde9 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fde9:	83 ec 0c             	sub    esp,0xc
c001fdec:	83 ec 08             	sub    esp,0x8
c001fdef:	68 ff ff 00 00       	push   0xffff
c001fdf4:	6a 01                	push   0x1
c001fdf6:	e8 c5 ff ff ff       	call   c001fdc0 <__static_initialization_and_destruction_0(int, int)>
c001fdfb:	83 c4 10             	add    esp,0x10
c001fdfe:	83 c4 0c             	add    esp,0xc
c001fe01:	c3                   	ret    

c001fe02 <FAT::getName()>:
c001fe02:	b8 d0 bd 02 c0       	mov    eax,0xc002bdd0
c001fe07:	c3                   	ret    

c001fe08 <FAT::tell(void*, unsigned long long*)>:
c001fe08:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe0d:	75 06                	jne    c001fe15 <FAT::tell(void*, unsigned long long*)+0xd>
c001fe0f:	b8 04 00 00 00       	mov    eax,0x4
c001fe14:	c3                   	ret    
c001fe15:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe1a:	75 06                	jne    c001fe22 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fe1c:	b8 04 00 00 00       	mov    eax,0x4
c001fe21:	c3                   	ret    
c001fe22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe26:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fe29:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fe2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe30:	89 01                	mov    DWORD PTR [ecx],eax
c001fe32:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe35:	b8 00 00 00 00       	mov    eax,0x0
c001fe3a:	c3                   	ret    
c001fe3b:	90                   	nop

c001fe3c <FAT::stat(void*, unsigned long long*)>:
c001fe3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe41:	75 06                	jne    c001fe49 <FAT::stat(void*, unsigned long long*)+0xd>
c001fe43:	b8 04 00 00 00       	mov    eax,0x4
c001fe48:	c3                   	ret    
c001fe49:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe4e:	75 06                	jne    c001fe56 <FAT::stat(void*, unsigned long long*)+0x1a>
c001fe50:	b8 04 00 00 00       	mov    eax,0x4
c001fe55:	c3                   	ret    
c001fe56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe5a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fe5d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fe60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe64:	89 01                	mov    DWORD PTR [ecx],eax
c001fe66:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe69:	b8 00 00 00 00       	mov    eax,0x0
c001fe6e:	c3                   	ret    
c001fe6f:	90                   	nop

c001fe70 <FAT::~FAT()>:
c001fe70:	83 ec 0c             	sub    esp,0xc
c001fe73:	ba 1c be 02 c0       	mov    edx,0xc002be1c
c001fe78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7c:	89 10                	mov    DWORD PTR [eax],edx
c001fe7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe82:	83 ec 0c             	sub    esp,0xc
c001fe85:	50                   	push   eax
c001fe86:	e8 45 2b ff ff       	call   c00129d0 <Filesystem::~Filesystem()>
c001fe8b:	83 c4 10             	add    esp,0x10
c001fe8e:	90                   	nop
c001fe8f:	83 c4 0c             	add    esp,0xc
c001fe92:	c3                   	ret    
c001fe93:	90                   	nop

c001fe94 <FAT::~FAT()>:
c001fe94:	83 ec 0c             	sub    esp,0xc
c001fe97:	83 ec 0c             	sub    esp,0xc
c001fe9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe9e:	e8 cd ff ff ff       	call   c001fe70 <FAT::~FAT()>
c001fea3:	83 c4 10             	add    esp,0x10
c001fea6:	83 ec 08             	sub    esp,0x8
c001fea9:	6a 08                	push   0x8
c001feab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feaf:	e8 15 27 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c001feb4:	83 c4 10             	add    esp,0x10
c001feb7:	83 c4 0c             	add    esp,0xc
c001feba:	c3                   	ret    
c001febb:	90                   	nop

c001febc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001febc:	83 ec 1c             	sub    esp,0x1c
c001febf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fec6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fecb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fecf:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c001fed6:	83 f8 ff             	cmp    eax,0xffffffff
c001fed9:	75 34                	jne    c001ff0f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fedb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fedf:	88 c2                	mov    dl,al
c001fee1:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c001fee6:	01 d0                	add    eax,edx
c001fee8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001feec:	8b 15 40 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f40
c001fef2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fef6:	89 14 85 60 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0a0],edx
c001fefd:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c001ff02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ff06:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c001ff0d:	eb 17                	jmp    c001ff26 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ff0f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff13:	88 c2                	mov    dl,al
c001ff15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff19:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c001ff20:	01 d0                	add    eax,edx
c001ff22:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff26:	83 ec 04             	sub    esp,0x4
c001ff29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff31:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ff35:	50                   	push   eax
c001ff36:	e8 c3 6d fe ff       	call   c0006cfe <f_getlabel>
c001ff3b:	83 c4 10             	add    esp,0x10
c001ff3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff42:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff47:	75 07                	jne    c001ff50 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ff49:	b8 00 00 00 00       	mov    eax,0x0
c001ff4e:	eb 05                	jmp    c001ff55 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ff50:	b8 01 00 00 00       	mov    eax,0x1
c001ff55:	83 c4 1c             	add    esp,0x1c
c001ff58:	c3                   	ret    
c001ff59:	90                   	nop

c001ff5a <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ff5a:	57                   	push   edi
c001ff5b:	83 ec 58             	sub    esp,0x58
c001ff5e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ff66:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ff6a:	b9 0f 00 00 00       	mov    ecx,0xf
c001ff6f:	b8 00 00 00 00       	mov    eax,0x0
c001ff74:	fc                   	cld    
c001ff75:	89 d7                	mov    edi,edx
c001ff77:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff79:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ff7d:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c001ff84:	83 f8 ff             	cmp    eax,0xffffffff
c001ff87:	75 34                	jne    c001ffbd <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ff89:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ff8d:	88 c2                	mov    dl,al
c001ff8f:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c001ff94:	01 d0                	add    eax,edx
c001ff96:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ff9a:	8b 15 40 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f40
c001ffa0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffa4:	89 14 85 60 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0a0],edx
c001ffab:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c001ffb0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ffb4:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c001ffbb:	eb 17                	jmp    c001ffd4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001ffbd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffc1:	88 c2                	mov    dl,al
c001ffc3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffc7:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c001ffce:	01 d0                	add    eax,edx
c001ffd0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ffd4:	83 ec 08             	sub    esp,0x8
c001ffd7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ffdb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ffdf:	50                   	push   eax
c001ffe0:	e8 67 09 fe ff       	call   c000094c <strcat>
c001ffe5:	83 c4 10             	add    esp,0x10
c001ffe8:	83 ec 0c             	sub    esp,0xc
c001ffeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ffef:	50                   	push   eax
c001fff0:	e8 f7 6e fe ff       	call   c0006eec <f_setlabel>
c001fff5:	83 c4 10             	add    esp,0x10
c001fff8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fffc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020001:	75 07                	jne    c002000a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020003:	b8 00 00 00 00       	mov    eax,0x0
c0020008:	eb 05                	jmp    c002000f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002000a:	b8 01 00 00 00       	mov    eax,0x1
c002000f:	83 c4 58             	add    esp,0x58
c0020012:	5f                   	pop    edi
c0020013:	c3                   	ret    

c0020014 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020014:	83 ec 2c             	sub    esp,0x2c
c0020017:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002001f:	83 ec 08             	sub    esp,0x8
c0020022:	68 f4 bd 02 c0       	push   0xc002bdf4
c0020027:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002002b:	e8 68 08 fe ff       	call   c0000898 <strcmp>
c0020030:	83 c4 10             	add    esp,0x10
c0020033:	85 c0                	test   eax,eax
c0020035:	0f 94 c0             	sete   al
c0020038:	84 c0                	test   al,al
c002003a:	74 0d                	je     c0020049 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002003c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020044:	e9 a6 00 00 00       	jmp    c00200ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020049:	83 ec 08             	sub    esp,0x8
c002004c:	68 e6 bd 02 c0       	push   0xc002bde6
c0020051:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020055:	e8 3e 08 fe ff       	call   c0000898 <strcmp>
c002005a:	83 c4 10             	add    esp,0x10
c002005d:	85 c0                	test   eax,eax
c002005f:	0f 94 c0             	sete   al
c0020062:	84 c0                	test   al,al
c0020064:	74 0a                	je     c0020070 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020066:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002006e:	eb 7f                	jmp    c00200ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020070:	83 ec 08             	sub    esp,0x8
c0020073:	68 ec bd 02 c0       	push   0xc002bdec
c0020078:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002007c:	e8 17 08 fe ff       	call   c0000898 <strcmp>
c0020081:	83 c4 10             	add    esp,0x10
c0020084:	85 c0                	test   eax,eax
c0020086:	0f 94 c0             	sete   al
c0020089:	84 c0                	test   al,al
c002008b:	74 0a                	je     c0020097 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002008d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020095:	eb 58                	jmp    c00200ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020097:	83 ec 08             	sub    esp,0x8
c002009a:	68 4c 92 02 c0       	push   0xc002924c
c002009f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200a3:	e8 f0 07 fe ff       	call   c0000898 <strcmp>
c00200a8:	83 c4 10             	add    esp,0x10
c00200ab:	85 c0                	test   eax,eax
c00200ad:	0f 94 c0             	sete   al
c00200b0:	84 c0                	test   al,al
c00200b2:	74 0a                	je     c00200be <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00200b4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00200bc:	eb 31                	jmp    c00200ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200be:	83 ec 08             	sub    esp,0x8
c00200c1:	68 f2 bd 02 c0       	push   0xc002bdf2
c00200c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200ca:	e8 c9 07 fe ff       	call   c0000898 <strcmp>
c00200cf:	83 c4 10             	add    esp,0x10
c00200d2:	85 c0                	test   eax,eax
c00200d4:	0f 94 c0             	sete   al
c00200d7:	84 c0                	test   al,al
c00200d9:	74 0a                	je     c00200e5 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00200db:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00200e3:	eb 0a                	jmp    c00200ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200e5:	b8 08 00 00 00       	mov    eax,0x8
c00200ea:	e9 df 00 00 00       	jmp    c00201ce <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00200ef:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00200f6:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00200fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00200ff:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c0020106:	83 f8 ff             	cmp    eax,0xffffffff
c0020109:	75 34                	jne    c002013f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002010b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002010f:	88 c2                	mov    dl,al
c0020111:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c0020116:	01 d0                	add    eax,edx
c0020118:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002011c:	8b 15 40 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f40
c0020122:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020126:	89 14 85 60 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0a0],edx
c002012d:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c0020132:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020136:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c002013d:	eb 17                	jmp    c0020156 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002013f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020143:	88 c2                	mov    dl,al
c0020145:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020149:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c0020150:	01 d0                	add    eax,edx
c0020152:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020156:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002015a:	88 04 24             	mov    BYTE PTR [esp],al
c002015d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020165:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002016d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020172:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002017a:	83 ec 0c             	sub    esp,0xc
c002017d:	68 00 20 00 00       	push   0x2000
c0020182:	e8 12 f4 fe ff       	call   c000f599 <malloc>
c0020187:	83 c4 10             	add    esp,0x10
c002018a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002018e:	68 00 20 00 00       	push   0x2000
c0020193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020197:	8d 44 24 08          	lea    eax,[esp+0x8]
c002019b:	50                   	push   eax
c002019c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00201a0:	50                   	push   eax
c00201a1:	e8 91 71 fe ff       	call   c0007337 <f_mkfs>
c00201a6:	83 c4 10             	add    esp,0x10
c00201a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00201ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201b2:	75 07                	jne    c00201bb <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00201b4:	b8 00 00 00 00       	mov    eax,0x0
c00201b9:	eb 13                	jmp    c00201ce <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201bb:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00201c0:	75 07                	jne    c00201c9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00201c2:	b8 09 00 00 00       	mov    eax,0x9
c00201c7:	eb 05                	jmp    c00201ce <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201c9:	b8 01 00 00 00       	mov    eax,0x1
c00201ce:	83 c4 2c             	add    esp,0x2c
c00201d1:	c3                   	ret    

c00201d2 <FAT::tryMount(LogicalDisk*, int)>:
c00201d2:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00201d8:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c00201dd:	83 f8 14             	cmp    eax,0x14
c00201e0:	75 17                	jne    c00201f9 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00201e2:	83 ec 0c             	sub    esp,0xc
c00201e5:	68 f8 bd 02 c0       	push   0xc002bdf8
c00201ea:	e8 1e 9c ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c00201ef:	83 c4 10             	add    esp,0x10
c00201f2:	b0 00                	mov    al,0x0
c00201f4:	e9 d7 01 00 00       	jmp    c00203d0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00201f9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020200:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020206:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002020c:	3d 00 02 00 00       	cmp    eax,0x200
c0020211:	74 07                	je     c002021a <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020213:	b0 00                	mov    al,0x0
c0020215:	e9 b6 01 00 00       	jmp    c00203d0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002021a:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020222:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020229:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c0020230:	83 f8 ff             	cmp    eax,0xffffffff
c0020233:	74 07                	je     c002023c <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020235:	b0 01                	mov    al,0x1
c0020237:	e9 94 01 00 00       	jmp    c00203d0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002023c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020246:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002024e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020255:	88 c2                	mov    dl,al
c0020257:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c002025c:	01 d0                	add    eax,edx
c002025e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020265:	8b 15 40 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f40
c002026b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020272:	89 14 85 60 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0a0],edx
c0020279:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c002027e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020285:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c002028c:	83 ec 0c             	sub    esp,0xc
c002028f:	68 54 02 00 00       	push   0x254
c0020294:	e8 00 f3 fe ff       	call   c000f599 <malloc>
c0020299:	83 c4 10             	add    esp,0x10
c002029c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00202a3:	83 ec 04             	sub    esp,0x4
c00202a6:	6a 00                	push   0x0
c00202a8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202af:	50                   	push   eax
c00202b0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202b7:	e8 39 4c fe ff       	call   c0004ef5 <f_mount>
c00202bc:	83 c4 10             	add    esp,0x10
c00202bf:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00202c6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00202ce:	74 19                	je     c00202e9 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00202d0:	83 ec 0c             	sub    esp,0xc
c00202d3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202da:	e8 da f2 fe ff       	call   c000f5b9 <rfree>
c00202df:	83 c4 10             	add    esp,0x10
c00202e2:	b0 00                	mov    al,0x0
c00202e4:	e9 e7 00 00 00       	jmp    c00203d0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00202e9:	83 ec 04             	sub    esp,0x4
c00202ec:	68 00 01 00 00       	push   0x100
c00202f1:	6a 00                	push   0x0
c00202f3:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00202fa:	50                   	push   eax
c00202fb:	e8 50 04 fe ff       	call   c0000750 <memset>
c0020300:	83 c4 10             	add    esp,0x10
c0020303:	83 ec 08             	sub    esp,0x8
c0020306:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002030d:	50                   	push   eax
c002030e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020315:	50                   	push   eax
c0020316:	e8 31 06 fe ff       	call   c000094c <strcat>
c002031b:	83 c4 10             	add    esp,0x10
c002031e:	83 ec 08             	sub    esp,0x8
c0020321:	68 06 be 02 c0       	push   0xc002be06
c0020326:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002032d:	50                   	push   eax
c002032e:	e8 19 06 fe ff       	call   c000094c <strcat>
c0020333:	83 c4 10             	add    esp,0x10
c0020336:	83 ec 04             	sub    esp,0x4
c0020339:	6a 01                	push   0x1
c002033b:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020342:	50                   	push   eax
c0020343:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020347:	50                   	push   eax
c0020348:	e8 0a 4c fe ff       	call   c0004f57 <f_open>
c002034d:	83 c4 10             	add    esp,0x10
c0020350:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020357:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002035e:	85 c0                	test   eax,eax
c0020360:	74 0a                	je     c002036c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020362:	78 2d                	js     c0020391 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020364:	83 e8 04             	sub    eax,0x4
c0020367:	83 f8 01             	cmp    eax,0x1
c002036a:	77 25                	ja     c0020391 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002036c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020374:	83 ec 0c             	sub    esp,0xc
c0020377:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002037b:	50                   	push   eax
c002037c:	e8 28 57 fe ff       	call   c0005aa9 <f_close>
c0020381:	83 c4 10             	add    esp,0x10
c0020384:	90                   	nop
c0020385:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c002038d:	74 3a                	je     c00203c9 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c002038f:	eb 2d                	jmp    c00203be <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020391:	83 ec 0c             	sub    esp,0xc
c0020394:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002039b:	e8 19 f2 fe ff       	call   c000f5b9 <rfree>
c00203a0:	83 c4 10             	add    esp,0x10
c00203a3:	83 ec 04             	sub    esp,0x4
c00203a6:	6a 00                	push   0x0
c00203a8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00203af:	50                   	push   eax
c00203b0:	6a 00                	push   0x0
c00203b2:	e8 3e 4b fe ff       	call   c0004ef5 <f_mount>
c00203b7:	83 c4 10             	add    esp,0x10
c00203ba:	b0 00                	mov    al,0x0
c00203bc:	eb 12                	jmp    c00203d0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203be:	a1 40 0f 03 c0       	mov    eax,ds:0xc0030f40
c00203c3:	40                   	inc    eax
c00203c4:	a3 40 0f 03 c0       	mov    ds:0xc0030f40,eax
c00203c9:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00203d0:	81 c4 6c 03 00 00    	add    esp,0x36c
c00203d6:	c3                   	ret    
c00203d7:	90                   	nop

c00203d8 <FAT::getFileFirstSector(char const*)>:
c00203d8:	53                   	push   ebx
c00203d9:	83 ec 28             	sub    esp,0x28
c00203dc:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00203e4:	83 ec 0c             	sub    esp,0xc
c00203e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203eb:	e8 a9 f1 fe ff       	call   c000f599 <malloc>
c00203f0:	83 c4 10             	add    esp,0x10
c00203f3:	89 c3                	mov    ebx,eax
c00203f5:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c00203fa:	83 ec 04             	sub    esp,0x4
c00203fd:	50                   	push   eax
c00203fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020402:	53                   	push   ebx
c0020403:	e8 f8 27 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c0020408:	83 c4 10             	add    esp,0x10
c002040b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c002040f:	83 ec 08             	sub    esp,0x8
c0020412:	6a 01                	push   0x1
c0020414:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020418:	e8 47 28 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c002041d:	83 c4 10             	add    esp,0x10
c0020420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020424:	8b 00                	mov    eax,DWORD PTR [eax]
c0020426:	83 c0 0c             	add    eax,0xc
c0020429:	8b 00                	mov    eax,DWORD PTR [eax]
c002042b:	83 ec 0c             	sub    esp,0xc
c002042e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020432:	52                   	push   edx
c0020433:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020437:	52                   	push   edx
c0020438:	6a 00                	push   0x0
c002043a:	6a 04                	push   0x4
c002043c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020440:	ff d0                	call   eax
c0020442:	83 c4 20             	add    esp,0x20
c0020445:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020449:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002044f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020453:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020457:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002045a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002045d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020461:	83 ec 0c             	sub    esp,0xc
c0020464:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020468:	e8 55 28 ff ff       	call   c0012cc2 <File::close()>
c002046d:	83 c4 10             	add    esp,0x10
c0020470:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020474:	ba 00 00 00 00       	mov    edx,0x0
c0020479:	83 c4 28             	add    esp,0x28
c002047c:	5b                   	pop    ebx
c002047d:	c3                   	ret    

c002047e <FAT::readDir(void*, unsigned long, void*, int*)>:
c002047e:	57                   	push   edi
c002047f:	56                   	push   esi
c0020480:	53                   	push   ebx
c0020481:	81 ec 50 02 00 00    	sub    esp,0x250
c0020487:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002048f:	74 0a                	je     c002049b <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020491:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020499:	75 0a                	jne    c00204a5 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c002049b:	b8 04 00 00 00       	mov    eax,0x4
c00204a0:	e9 29 01 00 00       	jmp    c00205ce <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00204a5:	83 ec 08             	sub    esp,0x8
c00204a8:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00204af:	50                   	push   eax
c00204b0:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00204b7:	e8 f7 5b fe ff       	call   c00060b3 <f_readdir>
c00204bc:	83 c4 10             	add    esp,0x10
c00204bf:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00204c6:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00204cd:	83 ec 0c             	sub    esp,0xc
c00204d0:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00204d7:	83 c0 1a             	add    eax,0x1a
c00204da:	50                   	push   eax
c00204db:	e8 8c 02 fe ff       	call   c000076c <strlen>
c00204e0:	83 c4 10             	add    esp,0x10
c00204e3:	ba 00 00 00 00       	mov    edx,0x0
c00204e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00204ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00204f0:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00204f7:	0f b6 c0             	movzx  eax,al
c00204fa:	83 e0 10             	and    eax,0x10
c00204fd:	74 07                	je     c0020506 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c00204ff:	b8 02 00 00 00       	mov    eax,0x2
c0020504:	eb 05                	jmp    c002050b <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020506:	b8 01 00 00 00       	mov    eax,0x1
c002050b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002050f:	83 ec 08             	sub    esp,0x8
c0020512:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020519:	83 c0 1a             	add    eax,0x1a
c002051c:	50                   	push   eax
c002051d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020521:	83 c0 10             	add    eax,0x10
c0020524:	50                   	push   eax
c0020525:	e8 e2 02 fe ff       	call   c000080c <strcpy>
c002052a:	83 c4 10             	add    esp,0x10
c002052d:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020534:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c002053b:	8d 44 24 04          	lea    eax,[esp+0x4]
c002053f:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020546:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c002054d:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020554:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c002055b:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020562:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020569:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020570:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020577:	89 c6                	mov    esi,eax
c0020579:	89 d7                	mov    edi,edx
c002057b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002057d:	89 c8                	mov    eax,ecx
c002057f:	89 fa                	mov    edx,edi
c0020581:	89 f3                	mov    ebx,esi
c0020583:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002058a:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020591:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020598:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c002059f:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00205a5:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00205ac:	84 c0                	test   al,al
c00205ae:	75 07                	jne    c00205b7 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00205b0:	b8 07 00 00 00       	mov    eax,0x7
c00205b5:	eb 17                	jmp    c00205ce <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00205b7:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00205be:	85 c0                	test   eax,eax
c00205c0:	75 07                	jne    c00205c9 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00205c2:	b8 00 00 00 00       	mov    eax,0x0
c00205c7:	eb 05                	jmp    c00205ce <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00205c9:	b8 01 00 00 00       	mov    eax,0x1
c00205ce:	81 c4 50 02 00 00    	add    esp,0x250
c00205d4:	5b                   	pop    ebx
c00205d5:	5e                   	pop    esi
c00205d6:	5f                   	pop    edi
c00205d7:	c3                   	ret    

c00205d8 <FAT::read(void*, unsigned long, void*, int*)>:
c00205d8:	83 ec 1c             	sub    esp,0x1c
c00205db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00205e0:	74 07                	je     c00205e9 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00205e2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00205e7:	75 07                	jne    c00205f0 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00205e9:	b8 04 00 00 00       	mov    eax,0x4
c00205ee:	eb 3d                	jmp    c002062d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00205f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00205f4:	50                   	push   eax
c00205f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00205f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00205fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020601:	e8 8d 4d fe ff       	call   c0005393 <f_read>
c0020606:	83 c4 10             	add    esp,0x10
c0020609:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002060d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020611:	89 c2                	mov    edx,eax
c0020613:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020617:	89 10                	mov    DWORD PTR [eax],edx
c0020619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002061d:	85 c0                	test   eax,eax
c002061f:	75 07                	jne    c0020628 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020621:	b8 00 00 00 00       	mov    eax,0x0
c0020626:	eb 05                	jmp    c002062d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020628:	b8 01 00 00 00       	mov    eax,0x1
c002062d:	83 c4 1c             	add    esp,0x1c
c0020630:	c3                   	ret    
c0020631:	90                   	nop

c0020632 <FAT::write(void*, unsigned long, void*, int*)>:
c0020632:	83 ec 1c             	sub    esp,0x1c
c0020635:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002063a:	74 07                	je     c0020643 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002063c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020641:	75 07                	jne    c002064a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020643:	b8 04 00 00 00       	mov    eax,0x4
c0020648:	eb 3d                	jmp    c0020687 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002064a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002064e:	50                   	push   eax
c002064f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020657:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002065b:	e8 b3 4f fe ff       	call   c0005613 <f_write>
c0020660:	83 c4 10             	add    esp,0x10
c0020663:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020667:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002066b:	89 c2                	mov    edx,eax
c002066d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020671:	89 10                	mov    DWORD PTR [eax],edx
c0020673:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020677:	85 c0                	test   eax,eax
c0020679:	75 07                	jne    c0020682 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002067b:	b8 00 00 00 00       	mov    eax,0x0
c0020680:	eb 05                	jmp    c0020687 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020682:	b8 01 00 00 00       	mov    eax,0x1
c0020687:	83 c4 1c             	add    esp,0x1c
c002068a:	c3                   	ret    
c002068b:	90                   	nop

c002068c <FAT::close(void*)>:
c002068c:	83 ec 1c             	sub    esp,0x1c
c002068f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020694:	75 07                	jne    c002069d <FAT::close(void*)+0x11>
c0020696:	b8 04 00 00 00       	mov    eax,0x4
c002069b:	eb 36                	jmp    c00206d3 <FAT::close(void*)+0x47>
c002069d:	83 ec 0c             	sub    esp,0xc
c00206a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206a4:	e8 00 54 fe ff       	call   c0005aa9 <f_close>
c00206a9:	83 c4 10             	add    esp,0x10
c00206ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206b0:	83 ec 0c             	sub    esp,0xc
c00206b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206b7:	e8 ed ee fe ff       	call   c000f5a9 <free>
c00206bc:	83 c4 10             	add    esp,0x10
c00206bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206c3:	85 c0                	test   eax,eax
c00206c5:	75 07                	jne    c00206ce <FAT::close(void*)+0x42>
c00206c7:	b8 00 00 00 00       	mov    eax,0x0
c00206cc:	eb 05                	jmp    c00206d3 <FAT::close(void*)+0x47>
c00206ce:	b8 01 00 00 00       	mov    eax,0x1
c00206d3:	83 c4 1c             	add    esp,0x1c
c00206d6:	c3                   	ret    
c00206d7:	90                   	nop

c00206d8 <FAT::closeDir(void*)>:
c00206d8:	83 ec 1c             	sub    esp,0x1c
c00206db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206e0:	75 07                	jne    c00206e9 <FAT::closeDir(void*)+0x11>
c00206e2:	b8 04 00 00 00       	mov    eax,0x4
c00206e7:	eb 36                	jmp    c002071f <FAT::closeDir(void*)+0x47>
c00206e9:	83 ec 0c             	sub    esp,0xc
c00206ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206f0:	e8 9c 59 fe ff       	call   c0006091 <f_closedir>
c00206f5:	83 c4 10             	add    esp,0x10
c00206f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206fc:	83 ec 0c             	sub    esp,0xc
c00206ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020703:	e8 a1 ee fe ff       	call   c000f5a9 <free>
c0020708:	83 c4 10             	add    esp,0x10
c002070b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002070f:	85 c0                	test   eax,eax
c0020711:	75 07                	jne    c002071a <FAT::closeDir(void*)+0x42>
c0020713:	b8 00 00 00 00       	mov    eax,0x0
c0020718:	eb 05                	jmp    c002071f <FAT::closeDir(void*)+0x47>
c002071a:	b8 01 00 00 00       	mov    eax,0x1
c002071f:	83 c4 1c             	add    esp,0x1c
c0020722:	c3                   	ret    
c0020723:	90                   	nop

c0020724 <FAT::seek(void*, unsigned long long)>:
c0020724:	83 ec 2c             	sub    esp,0x2c
c0020727:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002072b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002072f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020733:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020737:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002073c:	75 07                	jne    c0020745 <FAT::seek(void*, unsigned long long)+0x21>
c002073e:	b8 04 00 00 00       	mov    eax,0x4
c0020743:	eb 2f                	jmp    c0020774 <FAT::seek(void*, unsigned long long)+0x50>
c0020745:	83 ec 04             	sub    esp,0x4
c0020748:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002074c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020750:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020754:	e8 7f 53 fe ff       	call   c0005ad8 <f_lseek>
c0020759:	83 c4 10             	add    esp,0x10
c002075c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020760:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020764:	85 c0                	test   eax,eax
c0020766:	75 07                	jne    c002076f <FAT::seek(void*, unsigned long long)+0x4b>
c0020768:	b8 00 00 00 00       	mov    eax,0x0
c002076d:	eb 05                	jmp    c0020774 <FAT::seek(void*, unsigned long long)+0x50>
c002076f:	b8 01 00 00 00       	mov    eax,0x1
c0020774:	83 c4 2c             	add    esp,0x2c
c0020777:	c3                   	ret    

c0020778 <fatWrapperReadDisk>:
c0020778:	83 ec 1c             	sub    esp,0x1c
c002077b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002077f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020783:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020787:	89 04 24             	mov    DWORD PTR [esp],eax
c002078a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002078e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020792:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020797:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c002079e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00207a2:	83 ec 0c             	sub    esp,0xc
c00207a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207a9:	52                   	push   edx
c00207aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207b2:	50                   	push   eax
c00207b3:	e8 3e 58 ff ff       	call   c0015ff6 <LogicalDisk::read(unsigned long long, int, void*)>
c00207b8:	83 c4 20             	add    esp,0x20
c00207bb:	83 c4 1c             	add    esp,0x1c
c00207be:	c3                   	ret    

c00207bf <fatWrapperWriteDisk>:
c00207bf:	83 ec 1c             	sub    esp,0x1c
c00207c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207c6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00207d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00207d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207d9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207de:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c00207e5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00207e9:	83 ec 0c             	sub    esp,0xc
c00207ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207f0:	52                   	push   edx
c00207f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207f9:	50                   	push   eax
c00207fa:	e8 63 58 ff ff       	call   c0016062 <LogicalDisk::write(unsigned long long, int, void*)>
c00207ff:	83 c4 20             	add    esp,0x20
c0020802:	83 c4 1c             	add    esp,0x1c
c0020805:	c3                   	ret    

c0020806 <fatWrapperIoctl>:
c0020806:	53                   	push   ebx
c0020807:	83 ec 28             	sub    esp,0x28
c002080a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002080e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020812:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020816:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002081a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002081f:	75 31                	jne    c0020852 <fatWrapperIoctl+0x4c>
c0020821:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020825:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020829:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002082e:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c0020835:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002083b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020841:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020845:	66 89 02             	mov    WORD PTR [edx],ax
c0020848:	b8 00 00 00 00       	mov    eax,0x0
c002084d:	e9 b2 00 00 00       	jmp    c0020904 <fatWrapperIoctl+0xfe>
c0020852:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020857:	75 6a                	jne    c00208c3 <fatWrapperIoctl+0xbd>
c0020859:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002085d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020861:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020866:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c002086d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020873:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020879:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002087f:	89 c8                	mov    eax,ecx
c0020881:	89 da                	mov    edx,ebx
c0020883:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020887:	c1 e0 0a             	shl    eax,0xa
c002088a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002088f:	8b 0c 8d 20 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20e0]
c0020896:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002089c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00208a2:	89 cb                	mov    ebx,ecx
c00208a4:	c1 fb 1f             	sar    ebx,0x1f
c00208a7:	53                   	push   ebx
c00208a8:	51                   	push   ecx
c00208a9:	52                   	push   edx
c00208aa:	50                   	push   eax
c00208ab:	e8 34 5e 00 00       	call   c00266e4 <__udivdi3>
c00208b0:	83 c4 10             	add    esp,0x10
c00208b3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00208b7:	89 01                	mov    DWORD PTR [ecx],eax
c00208b9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00208bc:	b8 00 00 00 00       	mov    eax,0x0
c00208c1:	eb 41                	jmp    c0020904 <fatWrapperIoctl+0xfe>
c00208c3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00208c8:	75 07                	jne    c00208d1 <fatWrapperIoctl+0xcb>
c00208ca:	b8 00 00 00 00       	mov    eax,0x0
c00208cf:	eb 33                	jmp    c0020904 <fatWrapperIoctl+0xfe>
c00208d1:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00208d6:	75 19                	jne    c00208f1 <fatWrapperIoctl+0xeb>
c00208d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208e4:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00208ea:	b8 00 00 00 00       	mov    eax,0x0
c00208ef:	eb 13                	jmp    c0020904 <fatWrapperIoctl+0xfe>
c00208f1:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00208f6:	75 07                	jne    c00208ff <fatWrapperIoctl+0xf9>
c00208f8:	b8 00 00 00 00       	mov    eax,0x0
c00208fd:	eb 05                	jmp    c0020904 <fatWrapperIoctl+0xfe>
c00208ff:	b8 04 00 00 00       	mov    eax,0x4
c0020904:	83 c4 28             	add    esp,0x28
c0020907:	5b                   	pop    ebx
c0020908:	c3                   	ret    
c0020909:	90                   	nop

c002090a <FAT::FAT()>:
c002090a:	83 ec 1c             	sub    esp,0x1c
c002090d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020911:	83 ec 0c             	sub    esp,0xc
c0020914:	50                   	push   eax
c0020915:	e8 92 20 ff ff       	call   c00129ac <Filesystem::Filesystem()>
c002091a:	83 c4 10             	add    esp,0x10
c002091d:	ba 1c be 02 c0       	mov    edx,0xc002be1c
c0020922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020926:	89 10                	mov    DWORD PTR [eax],edx
c0020928:	c7 05 40 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f40,0x0
c0020932:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002093a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002093f:	7f 15                	jg     c0020956 <FAT::FAT()+0x4c>
c0020941:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020945:	c7 04 85 60 0f 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf0a0],0xffffffff
c0020950:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020954:	eb e4                	jmp    c002093a <FAT::FAT()+0x30>
c0020956:	90                   	nop
c0020957:	83 c4 1c             	add    esp,0x1c
c002095a:	c3                   	ret    
c002095b:	90                   	nop

c002095c <FAT::fixFilepath(char*)>:
c002095c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020960:	8a 00                	mov    al,BYTE PTR [eax]
c0020962:	3c 40                	cmp    al,0x40
c0020964:	7e 2c                	jle    c0020992 <FAT::fixFilepath(char*)+0x36>
c0020966:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002096a:	8a 00                	mov    al,BYTE PTR [eax]
c002096c:	83 e8 41             	sub    eax,0x41
c002096f:	88 c2                	mov    dl,al
c0020971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020975:	88 10                	mov    BYTE PTR [eax],dl
c0020977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002097b:	8a 00                	mov    al,BYTE PTR [eax]
c002097d:	0f be c0             	movsx  eax,al
c0020980:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c0020987:	83 c0 30             	add    eax,0x30
c002098a:	88 c2                	mov    dl,al
c002098c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020990:	88 10                	mov    BYTE PTR [eax],dl
c0020992:	90                   	nop
c0020993:	c3                   	ret    

c0020994 <FAT::open(char const*, void**, FileOpenMode)>:
c0020994:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002099a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00209a2:	74 0a                	je     c00209ae <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00209a4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00209ac:	75 0a                	jne    c00209b8 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00209ae:	b8 04 00 00 00       	mov    eax,0x4
c00209b3:	e9 fd 00 00 00       	jmp    c0020ab5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00209b8:	83 ec 08             	sub    esp,0x8
c00209bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209c6:	50                   	push   eax
c00209c7:	e8 40 fe fd ff       	call   c000080c <strcpy>
c00209cc:	83 c4 10             	add    esp,0x10
c00209cf:	83 ec 08             	sub    esp,0x8
c00209d2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00209d6:	50                   	push   eax
c00209d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209de:	e8 79 ff ff ff       	call   c002095c <FAT::fixFilepath(char*)>
c00209e3:	83 c4 10             	add    esp,0x10
c00209e6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00209ee:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00209f5:	83 e0 01             	and    eax,0x1
c00209f8:	74 08                	je     c0020a02 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00209fa:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020a02:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a09:	83 e0 04             	and    eax,0x4
c0020a0c:	74 10                	je     c0020a1e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020a0e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020a16:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a1e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a25:	83 e0 02             	and    eax,0x2
c0020a28:	74 08                	je     c0020a32 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020a2a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a32:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a39:	83 e0 08             	and    eax,0x8
c0020a3c:	74 08                	je     c0020a46 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020a3e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020a46:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a4d:	83 e0 10             	and    eax,0x10
c0020a50:	74 08                	je     c0020a5a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020a52:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020a5a:	83 ec 0c             	sub    esp,0xc
c0020a5d:	68 50 02 00 00       	push   0x250
c0020a62:	e8 32 eb fe ff       	call   c000f599 <malloc>
c0020a67:	83 c4 10             	add    esp,0x10
c0020a6a:	89 c2                	mov    edx,eax
c0020a6c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a73:	89 10                	mov    DWORD PTR [eax],edx
c0020a75:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020a7d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a84:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a86:	83 ec 04             	sub    esp,0x4
c0020a89:	52                   	push   edx
c0020a8a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020a8e:	52                   	push   edx
c0020a8f:	50                   	push   eax
c0020a90:	e8 c2 44 fe ff       	call   c0004f57 <f_open>
c0020a95:	83 c4 10             	add    esp,0x10
c0020a98:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020a9f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020aa7:	74 07                	je     c0020ab0 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020aa9:	b8 01 00 00 00       	mov    eax,0x1
c0020aae:	eb 05                	jmp    c0020ab5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ab0:	b8 00 00 00 00       	mov    eax,0x0
c0020ab5:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020abb:	c3                   	ret    

c0020abc <FAT::openDir(char const*, void**)>:
c0020abc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ac2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020aca:	74 0a                	je     c0020ad6 <FAT::openDir(char const*, void**)+0x1a>
c0020acc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020ad4:	75 07                	jne    c0020add <FAT::openDir(char const*, void**)+0x21>
c0020ad6:	b8 04 00 00 00       	mov    eax,0x4
c0020adb:	eb 7d                	jmp    c0020b5a <FAT::openDir(char const*, void**)+0x9e>
c0020add:	83 ec 08             	sub    esp,0x8
c0020ae0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ae7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020aeb:	50                   	push   eax
c0020aec:	e8 1b fd fd ff       	call   c000080c <strcpy>
c0020af1:	83 c4 10             	add    esp,0x10
c0020af4:	83 ec 08             	sub    esp,0x8
c0020af7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020afb:	50                   	push   eax
c0020afc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b03:	e8 54 fe ff ff       	call   c002095c <FAT::fixFilepath(char*)>
c0020b08:	83 c4 10             	add    esp,0x10
c0020b0b:	83 ec 0c             	sub    esp,0xc
c0020b0e:	6a 4c                	push   0x4c
c0020b10:	e8 84 ea fe ff       	call   c000f599 <malloc>
c0020b15:	83 c4 10             	add    esp,0x10
c0020b18:	89 c2                	mov    edx,eax
c0020b1a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b21:	89 10                	mov    DWORD PTR [eax],edx
c0020b23:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b2c:	83 ec 08             	sub    esp,0x8
c0020b2f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020b33:	52                   	push   edx
c0020b34:	50                   	push   eax
c0020b35:	e8 55 54 fe ff       	call   c0005f8f <f_opendir>
c0020b3a:	83 c4 10             	add    esp,0x10
c0020b3d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020b44:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020b4c:	74 07                	je     c0020b55 <FAT::openDir(char const*, void**)+0x99>
c0020b4e:	b8 01 00 00 00       	mov    eax,0x1
c0020b53:	eb 05                	jmp    c0020b5a <FAT::openDir(char const*, void**)+0x9e>
c0020b55:	b8 00 00 00 00       	mov    eax,0x0
c0020b5a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b60:	c3                   	ret    
c0020b61:	90                   	nop

c0020b62 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020b62:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020b68:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020b70:	75 0a                	jne    c0020b7c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020b72:	b8 04 00 00 00       	mov    eax,0x4
c0020b77:	e9 c9 00 00 00       	jmp    c0020c45 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b7c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020b84:	75 0a                	jne    c0020b90 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020b86:	b8 04 00 00 00       	mov    eax,0x4
c0020b8b:	e9 b5 00 00 00       	jmp    c0020c45 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b90:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020b98:	75 0a                	jne    c0020ba4 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020b9a:	b8 04 00 00 00       	mov    eax,0x4
c0020b9f:	e9 a1 00 00 00       	jmp    c0020c45 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ba4:	83 ec 08             	sub    esp,0x8
c0020ba7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020bae:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020bb5:	50                   	push   eax
c0020bb6:	e8 51 fc fd ff       	call   c000080c <strcpy>
c0020bbb:	83 c4 10             	add    esp,0x10
c0020bbe:	83 ec 08             	sub    esp,0x8
c0020bc1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020bc8:	50                   	push   eax
c0020bc9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020bd0:	e8 87 fd ff ff       	call   c002095c <FAT::fixFilepath(char*)>
c0020bd5:	83 c4 10             	add    esp,0x10
c0020bd8:	83 ec 08             	sub    esp,0x8
c0020bdb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bdf:	50                   	push   eax
c0020be0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020be7:	50                   	push   eax
c0020be8:	e8 61 55 fe ff       	call   c000614e <f_stat>
c0020bed:	83 c4 10             	add    esp,0x10
c0020bf0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020bf7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020bfe:	85 c0                	test   eax,eax
c0020c00:	74 07                	je     c0020c09 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020c02:	83 f8 04             	cmp    eax,0x4
c0020c05:	74 32                	je     c0020c39 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020c07:	eb 37                	jmp    c0020c40 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020c09:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020c0d:	0f b6 c0             	movzx  eax,al
c0020c10:	83 e0 10             	and    eax,0x10
c0020c13:	0f 95 c2             	setne  dl
c0020c16:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020c1d:	88 10                	mov    BYTE PTR [eax],dl
c0020c1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020c26:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020c2d:	89 01                	mov    DWORD PTR [ecx],eax
c0020c2f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c32:	b8 00 00 00 00       	mov    eax,0x0
c0020c37:	eb 0c                	jmp    c0020c45 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c39:	b8 02 00 00 00       	mov    eax,0x2
c0020c3e:	eb 05                	jmp    c0020c45 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c40:	b8 01 00 00 00       	mov    eax,0x1
c0020c45:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020c4b:	c3                   	ret    

c0020c4c <FAT::unlink(char const*)>:
c0020c4c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c52:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c5a:	75 07                	jne    c0020c63 <FAT::unlink(char const*)+0x17>
c0020c5c:	b8 04 00 00 00       	mov    eax,0x4
c0020c61:	eb 5c                	jmp    c0020cbf <FAT::unlink(char const*)+0x73>
c0020c63:	83 ec 08             	sub    esp,0x8
c0020c66:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c71:	50                   	push   eax
c0020c72:	e8 95 fb fd ff       	call   c000080c <strcpy>
c0020c77:	83 c4 10             	add    esp,0x10
c0020c7a:	83 ec 08             	sub    esp,0x8
c0020c7d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c81:	50                   	push   eax
c0020c82:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c89:	e8 ce fc ff ff       	call   c002095c <FAT::fixFilepath(char*)>
c0020c8e:	83 c4 10             	add    esp,0x10
c0020c91:	83 ec 0c             	sub    esp,0xc
c0020c94:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c98:	50                   	push   eax
c0020c99:	e8 02 58 fe ff       	call   c00064a0 <f_unlink>
c0020c9e:	83 c4 10             	add    esp,0x10
c0020ca1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020ca8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020caf:	85 c0                	test   eax,eax
c0020cb1:	75 07                	jne    c0020cba <FAT::unlink(char const*)+0x6e>
c0020cb3:	b8 00 00 00 00       	mov    eax,0x0
c0020cb8:	eb 05                	jmp    c0020cbf <FAT::unlink(char const*)+0x73>
c0020cba:	b8 01 00 00 00       	mov    eax,0x1
c0020cbf:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020cc5:	c3                   	ret    

c0020cc6 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020cc6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020ccc:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020cd3:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020cda:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020cde:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ce2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020cea:	75 0a                	jne    c0020cf6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020cec:	b8 04 00 00 00       	mov    eax,0x4
c0020cf1:	e9 1c 01 00 00       	jmp    c0020e12 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020cf6:	83 ec 08             	sub    esp,0x8
c0020cf9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d00:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d04:	50                   	push   eax
c0020d05:	e8 02 fb fd ff       	call   c000080c <strcpy>
c0020d0a:	83 c4 10             	add    esp,0x10
c0020d0d:	83 ec 08             	sub    esp,0x8
c0020d10:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020d14:	50                   	push   eax
c0020d15:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d1c:	e8 3b fc ff ff       	call   c002095c <FAT::fixFilepath(char*)>
c0020d21:	83 c4 10             	add    esp,0x10
c0020d24:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020d2c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020d34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d39:	83 e0 01             	and    eax,0x1
c0020d3c:	74 08                	je     c0020d46 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020d3e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020d46:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d4b:	83 e0 02             	and    eax,0x2
c0020d4e:	74 08                	je     c0020d58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020d50:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020d58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d5d:	83 e0 04             	and    eax,0x4
c0020d60:	74 08                	je     c0020d6a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020d62:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020d6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d6f:	83 e0 08             	and    eax,0x8
c0020d72:	74 08                	je     c0020d7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020d74:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020d7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d81:	83 e0 01             	and    eax,0x1
c0020d84:	74 08                	je     c0020d8e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020d86:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020d8e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d93:	83 e0 02             	and    eax,0x2
c0020d96:	74 08                	je     c0020da0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020d98:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020da0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020da5:	83 e0 04             	and    eax,0x4
c0020da8:	74 08                	je     c0020db2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020daa:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020db2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020db7:	83 e0 08             	and    eax,0x8
c0020dba:	74 08                	je     c0020dc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020dbc:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020dc4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020dcb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020dd2:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020dda:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020de2:	83 ec 04             	sub    esp,0x4
c0020de5:	52                   	push   edx
c0020de6:	50                   	push   eax
c0020de7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020deb:	50                   	push   eax
c0020dec:	e8 51 5d fe ff       	call   c0006b42 <f_chmod>
c0020df1:	83 c4 10             	add    esp,0x10
c0020df4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020dfb:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020e02:	85 c0                	test   eax,eax
c0020e04:	75 07                	jne    c0020e0d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020e06:	b8 00 00 00 00       	mov    eax,0x0
c0020e0b:	eb 05                	jmp    c0020e12 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020e0d:	b8 01 00 00 00       	mov    eax,0x1
c0020e12:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020e18:	c3                   	ret    
c0020e19:	90                   	nop

c0020e1a <FAT::rename(char const*, char const*)>:
c0020e1a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020e20:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020e28:	74 0a                	je     c0020e34 <FAT::rename(char const*, char const*)+0x1a>
c0020e2a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020e32:	75 0a                	jne    c0020e3e <FAT::rename(char const*, char const*)+0x24>
c0020e34:	b8 04 00 00 00       	mov    eax,0x4
c0020e39:	e9 98 00 00 00       	jmp    c0020ed6 <FAT::rename(char const*, char const*)+0xbc>
c0020e3e:	83 ec 08             	sub    esp,0x8
c0020e41:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e48:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020e4f:	50                   	push   eax
c0020e50:	e8 b7 f9 fd ff       	call   c000080c <strcpy>
c0020e55:	83 c4 10             	add    esp,0x10
c0020e58:	83 ec 08             	sub    esp,0x8
c0020e5b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020e62:	50                   	push   eax
c0020e63:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e6a:	e8 ed fa ff ff       	call   c002095c <FAT::fixFilepath(char*)>
c0020e6f:	83 c4 10             	add    esp,0x10
c0020e72:	83 ec 08             	sub    esp,0x8
c0020e75:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020e7c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e80:	50                   	push   eax
c0020e81:	e8 86 f9 fd ff       	call   c000080c <strcpy>
c0020e86:	83 c4 10             	add    esp,0x10
c0020e89:	83 ec 08             	sub    esp,0x8
c0020e8c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e90:	50                   	push   eax
c0020e91:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e98:	e8 bf fa ff ff       	call   c002095c <FAT::fixFilepath(char*)>
c0020e9d:	83 c4 10             	add    esp,0x10
c0020ea0:	83 ec 08             	sub    esp,0x8
c0020ea3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ea7:	50                   	push   eax
c0020ea8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020eaf:	50                   	push   eax
c0020eb0:	e8 9a 59 fe ff       	call   c000684f <f_rename>
c0020eb5:	83 c4 10             	add    esp,0x10
c0020eb8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020ebf:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020ec6:	85 c0                	test   eax,eax
c0020ec8:	75 07                	jne    c0020ed1 <FAT::rename(char const*, char const*)+0xb7>
c0020eca:	b8 00 00 00 00       	mov    eax,0x0
c0020ecf:	eb 05                	jmp    c0020ed6 <FAT::rename(char const*, char const*)+0xbc>
c0020ed1:	b8 01 00 00 00       	mov    eax,0x1
c0020ed6:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020edc:	c3                   	ret    
c0020edd:	90                   	nop

c0020ede <FAT::mkdir(char const*)>:
c0020ede:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ee4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020eec:	75 07                	jne    c0020ef5 <FAT::mkdir(char const*)+0x17>
c0020eee:	b8 04 00 00 00       	mov    eax,0x4
c0020ef3:	eb 5c                	jmp    c0020f51 <FAT::mkdir(char const*)+0x73>
c0020ef5:	83 ec 08             	sub    esp,0x8
c0020ef8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020eff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f03:	50                   	push   eax
c0020f04:	e8 03 f9 fd ff       	call   c000080c <strcpy>
c0020f09:	83 c4 10             	add    esp,0x10
c0020f0c:	83 ec 08             	sub    esp,0x8
c0020f0f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f13:	50                   	push   eax
c0020f14:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f1b:	e8 3c fa ff ff       	call   c002095c <FAT::fixFilepath(char*)>
c0020f20:	83 c4 10             	add    esp,0x10
c0020f23:	83 ec 0c             	sub    esp,0xc
c0020f26:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f2a:	50                   	push   eax
c0020f2b:	e8 f3 56 fe ff       	call   c0006623 <f_mkdir>
c0020f30:	83 c4 10             	add    esp,0x10
c0020f33:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f3a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020f41:	85 c0                	test   eax,eax
c0020f43:	75 07                	jne    c0020f4c <FAT::mkdir(char const*)+0x6e>
c0020f45:	b8 00 00 00 00       	mov    eax,0x0
c0020f4a:	eb 05                	jmp    c0020f51 <FAT::mkdir(char const*)+0x73>
c0020f4c:	b8 01 00 00 00       	mov    eax,0x1
c0020f51:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f57:	c3                   	ret    

c0020f58 <FAT::exists(char const*)>:
c0020f58:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020f5e:	83 ec 08             	sub    esp,0x8
c0020f61:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020f68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020f6c:	50                   	push   eax
c0020f6d:	e8 9a f8 fd ff       	call   c000080c <strcpy>
c0020f72:	83 c4 10             	add    esp,0x10
c0020f75:	83 ec 08             	sub    esp,0x8
c0020f78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f7c:	50                   	push   eax
c0020f7d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020f84:	e8 d3 f9 ff ff       	call   c002095c <FAT::fixFilepath(char*)>
c0020f89:	83 c4 10             	add    esp,0x10
c0020f8c:	83 ec 08             	sub    esp,0x8
c0020f8f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020f96:	50                   	push   eax
c0020f97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020f9b:	50                   	push   eax
c0020f9c:	e8 ad 51 fe ff       	call   c000614e <f_stat>
c0020fa1:	83 c4 10             	add    esp,0x10
c0020fa4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020fab:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020fb2:	85 c0                	test   eax,eax
c0020fb4:	75 04                	jne    c0020fba <FAT::exists(char const*)+0x62>
c0020fb6:	b0 01                	mov    al,0x1
c0020fb8:	eb 02                	jmp    c0020fbc <FAT::exists(char const*)+0x64>
c0020fba:	b0 00                	mov    al,0x0
c0020fbc:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020fc2:	c3                   	ret    
c0020fc3:	90                   	nop

c0020fc4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020fc4:	b8 08 00 00 00       	mov    eax,0x8
c0020fc9:	c3                   	ret    

c0020fca <ISO9660::seek(void*, unsigned long long)>:
c0020fca:	53                   	push   ebx
c0020fcb:	b8 04 00 00 00       	mov    eax,0x4
c0020fd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020fd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020fd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020fdc:	85 d2                	test   edx,edx
c0020fde:	74 17                	je     c0020ff7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020fe0:	89 c8                	mov    eax,ecx
c0020fe2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020fe5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020fe8:	b8 01 00 00 00       	mov    eax,0x1
c0020fed:	73 08                	jae    c0020ff7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020fef:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020ff2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020ff5:	31 c0                	xor    eax,eax
c0020ff7:	5b                   	pop    ebx
c0020ff8:	c3                   	ret    
c0020ff9:	90                   	nop

c0020ffa <ISO9660::tell(void*, unsigned long long*)>:
c0020ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021002:	85 d2                	test   edx,edx
c0021004:	74 12                	je     c0021018 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021006:	85 c0                	test   eax,eax
c0021008:	74 0e                	je     c0021018 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002100a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002100d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021010:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021013:	89 10                	mov    DWORD PTR [eax],edx
c0021015:	31 c0                	xor    eax,eax
c0021017:	c3                   	ret    
c0021018:	b8 04 00 00 00       	mov    eax,0x4
c002101d:	c3                   	ret    

c002101e <ISO9660::getName()>:
c002101e:	b8 7c be 02 c0       	mov    eax,0xc002be7c
c0021023:	c3                   	ret    

c0021024 <ISO9660::stat(void*, unsigned long long*)>:
c0021024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021028:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002102c:	85 d2                	test   edx,edx
c002102e:	74 12                	je     c0021042 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021030:	85 c0                	test   eax,eax
c0021032:	74 0e                	je     c0021042 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021034:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021037:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002103a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002103d:	89 10                	mov    DWORD PTR [eax],edx
c002103f:	31 c0                	xor    eax,eax
c0021041:	c3                   	ret    
c0021042:	b8 04 00 00 00       	mov    eax,0x4
c0021047:	c3                   	ret    

c0021048 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021048:	b8 01 00 00 00       	mov    eax,0x1
c002104d:	c3                   	ret    

c002104e <ISO9660::unlink(char const*)>:
c002104e:	b8 01 00 00 00       	mov    eax,0x1
c0021053:	c3                   	ret    

c0021054 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021054:	b8 01 00 00 00       	mov    eax,0x1
c0021059:	c3                   	ret    

c002105a <ISO9660::rename(char const*, char const*)>:
c002105a:	b8 01 00 00 00       	mov    eax,0x1
c002105f:	c3                   	ret    

c0021060 <ISO9660::mkdir(char const*)>:
c0021060:	b8 01 00 00 00       	mov    eax,0x1
c0021065:	c3                   	ret    

c0021066 <ISO9660::close(void*)>:
c0021066:	83 ec 0c             	sub    esp,0xc
c0021069:	b8 04 00 00 00       	mov    eax,0x4
c002106e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021072:	85 d2                	test   edx,edx
c0021074:	74 0e                	je     c0021084 <ISO9660::close(void*)+0x1e>
c0021076:	83 ec 0c             	sub    esp,0xc
c0021079:	52                   	push   edx
c002107a:	e8 2a e5 fe ff       	call   c000f5a9 <free>
c002107f:	83 c4 10             	add    esp,0x10
c0021082:	31 c0                	xor    eax,eax
c0021084:	83 c4 0c             	add    esp,0xc
c0021087:	c3                   	ret    

c0021088 <ISO9660::closeDir(void*)>:
c0021088:	83 ec 0c             	sub    esp,0xc
c002108b:	b8 04 00 00 00       	mov    eax,0x4
c0021090:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021094:	85 d2                	test   edx,edx
c0021096:	74 0e                	je     c00210a6 <ISO9660::closeDir(void*)+0x1e>
c0021098:	83 ec 0c             	sub    esp,0xc
c002109b:	52                   	push   edx
c002109c:	e8 08 e5 fe ff       	call   c000f5a9 <free>
c00210a1:	83 c4 10             	add    esp,0x10
c00210a4:	31 c0                	xor    eax,eax
c00210a6:	83 c4 0c             	add    esp,0xc
c00210a9:	c3                   	ret    

c00210aa <ISO9660::~ISO9660()>:
c00210aa:	83 ec 0c             	sub    esp,0xc
c00210ad:	ba a0 be 02 c0       	mov    edx,0xc002bea0
c00210b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210b6:	89 10                	mov    DWORD PTR [eax],edx
c00210b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210bc:	83 ec 0c             	sub    esp,0xc
c00210bf:	50                   	push   eax
c00210c0:	e8 0b 19 ff ff       	call   c00129d0 <Filesystem::~Filesystem()>
c00210c5:	83 c4 10             	add    esp,0x10
c00210c8:	90                   	nop
c00210c9:	83 c4 0c             	add    esp,0xc
c00210cc:	c3                   	ret    
c00210cd:	90                   	nop

c00210ce <ISO9660::~ISO9660()>:
c00210ce:	83 ec 0c             	sub    esp,0xc
c00210d1:	83 ec 0c             	sub    esp,0xc
c00210d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210d8:	e8 cd ff ff ff       	call   c00210aa <ISO9660::~ISO9660()>
c00210dd:	83 c4 10             	add    esp,0x10
c00210e0:	83 ec 08             	sub    esp,0x8
c00210e3:	6a 08                	push   0x8
c00210e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210e9:	e8 db 14 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c00210ee:	83 c4 10             	add    esp,0x10
c00210f1:	83 c4 0c             	add    esp,0xc
c00210f4:	c3                   	ret    

c00210f5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00210f5:	55                   	push   ebp
c00210f6:	31 c9                	xor    ecx,ecx
c00210f8:	57                   	push   edi
c00210f9:	56                   	push   esi
c00210fa:	53                   	push   ebx
c00210fb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00210ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021103:	89 eb                	mov    ebx,ebp
c0021105:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021109:	39 ce                	cmp    esi,ecx
c002110b:	7e 17                	jle    c0021124 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002110d:	31 d2                	xor    edx,edx
c002110f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021113:	7d 13                	jge    c0021128 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021115:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021119:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002111c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002111f:	75 0d                	jne    c002112e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021121:	42                   	inc    edx
c0021122:	eb eb                	jmp    c002110f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021124:	31 c0                	xor    eax,eax
c0021126:	eb 0a                	jmp    c0021132 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021128:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002112c:	eb 04                	jmp    c0021132 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002112e:	41                   	inc    ecx
c002112f:	43                   	inc    ebx
c0021130:	eb d7                	jmp    c0021109 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021132:	5b                   	pop    ebx
c0021133:	5e                   	pop    esi
c0021134:	5f                   	pop    edi
c0021135:	5d                   	pop    ebp
c0021136:	c3                   	ret    

c0021137 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021137:	57                   	push   edi
c0021138:	56                   	push   esi
c0021139:	53                   	push   ebx
c002113a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002113e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021142:	39 0d 40 10 03 c0    	cmp    DWORD PTR ds:0xc0031040,ecx
c0021148:	75 08                	jne    c0021152 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c002114a:	38 05 b4 ce 02 c0    	cmp    BYTE PTR ds:0xc002ceb4,al
c0021150:	74 2b                	je     c002117d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021152:	83 ec 0c             	sub    esp,0xc
c0021155:	a2 b4 ce 02 c0       	mov    ds:0xc002ceb4,al
c002115a:	68 60 10 03 c0       	push   0xc0031060
c002115f:	0f be c0             	movsx  eax,al
c0021162:	6a 01                	push   0x1
c0021164:	89 0d 40 10 03 c0    	mov    DWORD PTR ds:0xc0031040,ecx
c002116a:	31 db                	xor    ebx,ebx
c002116c:	53                   	push   ebx
c002116d:	51                   	push   ecx
c002116e:	ff 34 85 1c de 02 c0 	push   DWORD PTR [eax*4-0x3ffd21e4]
c0021175:	e8 7c 4e ff ff       	call   c0015ff6 <LogicalDisk::read(unsigned long long, int, void*)>
c002117a:	83 c4 20             	add    esp,0x20
c002117d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021181:	be 60 10 03 c0       	mov    esi,0xc0031060
c0021186:	b9 00 08 00 00       	mov    ecx,0x800
c002118b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002118d:	5b                   	pop    ebx
c002118e:	5e                   	pop    esi
c002118f:	5f                   	pop    edi
c0021190:	c3                   	ret    
c0021191:	90                   	nop

c0021192 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021192:	81 ec 10 08 00 00    	sub    esp,0x810
c0021198:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002119f:	83 c0 41             	add    eax,0x41
c00211a2:	0f be c0             	movsx  eax,al
c00211a5:	50                   	push   eax
c00211a6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211aa:	50                   	push   eax
c00211ab:	6a 10                	push   0x10
c00211ad:	e8 85 ff ff ff       	call   c0021137 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211b2:	83 c4 10             	add    esp,0x10
c00211b5:	31 c0                	xor    eax,eax
c00211b7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00211bc:	75 1d                	jne    c00211db <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211be:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00211c3:	75 16                	jne    c00211db <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211c5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00211ca:	75 0f                	jne    c00211db <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211cc:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00211d1:	75 08                	jne    c00211db <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211d3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00211d8:	0f 94 c0             	sete   al
c00211db:	81 c4 0c 08 00 00    	add    esp,0x80c
c00211e1:	c3                   	ret    

c00211e2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00211e2:	55                   	push   ebp
c00211e3:	57                   	push   edi
c00211e4:	56                   	push   esi
c00211e5:	53                   	push   ebx
c00211e6:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00211ec:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00211f3:	85 ed                	test   ebp,ebp
c00211f5:	0f 84 da 01 00 00    	je     c00213d5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00211fb:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021203:	0f 84 cc 01 00 00    	je     c00213d5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021209:	b8 01 00 00 00       	mov    eax,0x1
c002120e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021212:	0f 85 c2 01 00 00    	jne    c00213da <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021218:	31 d2                	xor    edx,edx
c002121a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021221:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021224:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021227:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c002122a:	89 04 24             	mov    DWORD PTR [esp],eax
c002122d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021231:	01 c8                	add    eax,ecx
c0021233:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021236:	11 da                	adc    edx,ebx
c0021238:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002123c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021240:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021244:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021248:	19 d7                	sbb    edi,edx
c002124a:	72 11                	jb     c002125d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c002124c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002124f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021253:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021257:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002125b:	eb 0c                	jmp    c0021269 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002125d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021261:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021265:	29 ce                	sub    esi,ecx
c0021267:	19 df                	sbb    edi,ebx
c0021269:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002126c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002126f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021273:	c1 e0 0b             	shl    eax,0xb
c0021276:	01 c8                	add    eax,ecx
c0021278:	11 da                	adc    edx,ebx
c002127a:	89 04 24             	mov    DWORD PTR [esp],eax
c002127d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021281:	51                   	push   ecx
c0021282:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021286:	50                   	push   eax
c0021287:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002128b:	53                   	push   ebx
c002128c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021290:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021294:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021298:	50                   	push   eax
c0021299:	e8 99 fe ff ff       	call   c0021137 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002129e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00212a1:	b8 00 08 00 00       	mov    eax,0x800
c00212a6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00212ac:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00212b0:	29 d0                	sub    eax,edx
c00212b2:	83 c4 10             	add    esp,0x10
c00212b5:	89 f9                	mov    ecx,edi
c00212b7:	39 c6                	cmp    esi,eax
c00212b9:	83 d9 00             	sbb    ecx,0x0
c00212bc:	7d 1b                	jge    c00212d9 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00212be:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00212c3:	75 12                	jne    c00212d7 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00212c5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00212cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212d2:	e9 fa 00 00 00       	jmp    c00213d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00212d7:	89 f0                	mov    eax,esi
c00212d9:	01 d3                	add    ebx,edx
c00212db:	31 d2                	xor    edx,edx
c00212dd:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00212e1:	39 c2                	cmp    edx,eax
c00212e3:	7d 14                	jge    c00212f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00212e5:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00212ec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00212f0:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00212f3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00212f6:	42                   	inc    edx
c00212f7:	eb e8                	jmp    c00212e1 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00212f9:	89 c2                	mov    edx,eax
c00212fb:	85 c0                	test   eax,eax
c00212fd:	79 02                	jns    c0021301 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00212ff:	31 d2                	xor    edx,edx
c0021301:	01 c2                	add    edx,eax
c0021303:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021306:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c002130d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021311:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021315:	99                   	cdq    
c0021316:	01 c1                	add    ecx,eax
c0021318:	11 d3                	adc    ebx,edx
c002131a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002131e:	29 c6                	sub    esi,eax
c0021320:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021324:	19 d7                	sbb    edi,edx
c0021326:	89 34 24             	mov    DWORD PTR [esp],esi
c0021329:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002132d:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021332:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021335:	b8 00 00 00 00       	mov    eax,0x0
c002133a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002133e:	7d 43                	jge    c0021383 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021340:	52                   	push   edx
c0021341:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021345:	50                   	push   eax
c0021346:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002134a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002134e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021352:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021356:	50                   	push   eax
c0021357:	e8 db fd ff ff       	call   c0021137 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002135c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021364:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021369:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021371:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021379:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002137e:	83 c4 10             	add    esp,0x10
c0021381:	eb aa                	jmp    c002132d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021383:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021387:	0b 04 24             	or     eax,DWORD PTR [esp]
c002138a:	74 2a                	je     c00213b6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c002138c:	50                   	push   eax
c002138d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021391:	50                   	push   eax
c0021392:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021396:	56                   	push   esi
c0021397:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002139b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002139f:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00213a3:	51                   	push   ecx
c00213a4:	e8 8e fd ff ff       	call   c0021137 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213a9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00213ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00213b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00213b3:	83 c4 10             	add    esp,0x10
c00213b6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00213bd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00213c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00213c5:	89 18                	mov    DWORD PTR [eax],ebx
c00213c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213cb:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00213ce:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00213d1:	31 c0                	xor    eax,eax
c00213d3:	eb 05                	jmp    c00213da <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00213d5:	b8 04 00 00 00       	mov    eax,0x4
c00213da:	81 c4 2c 08 00 00    	add    esp,0x82c
c00213e0:	5b                   	pop    ebx
c00213e1:	5e                   	pop    esi
c00213e2:	5f                   	pop    edi
c00213e3:	5d                   	pop    ebp
c00213e4:	c3                   	ret    
c00213e5:	90                   	nop

c00213e6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00213e6:	55                   	push   ebp
c00213e7:	57                   	push   edi
c00213e8:	56                   	push   esi
c00213e9:	53                   	push   ebx
c00213ea:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00213f0:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00213f7:	85 ed                	test   ebp,ebp
c00213f9:	0f 84 51 02 00 00    	je     c0021650 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00213ff:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021407:	0f 84 43 02 00 00    	je     c0021650 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002140d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021410:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021413:	75 0a                	jne    c002141f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021415:	b8 07 00 00 00       	mov    eax,0x7
c002141a:	e9 36 02 00 00       	jmp    c0021655 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002141f:	50                   	push   eax
c0021420:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021424:	50                   	push   eax
c0021425:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002142c:	53                   	push   ebx
c002142d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021430:	c1 e0 0b             	shl    eax,0xb
c0021433:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021436:	c1 e8 0b             	shr    eax,0xb
c0021439:	50                   	push   eax
c002143a:	e8 f8 fc ff ff       	call   c0021137 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002143f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021442:	83 c4 10             	add    esp,0x10
c0021445:	89 c1                	mov    ecx,eax
c0021447:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002144a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021450:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021453:	84 db                	test   bl,bl
c0021455:	0f 85 8b 00 00 00    	jne    c00214e6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c002145b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021461:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021464:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002146a:	29 c6                	sub    esi,eax
c002146c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021470:	89 f3                	mov    ebx,esi
c0021472:	89 f1                	mov    ecx,esi
c0021474:	c1 fb 1f             	sar    ebx,0x1f
c0021477:	01 f0                	add    eax,esi
c0021479:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002147c:	11 da                	adc    edx,ebx
c002147e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021481:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021485:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021488:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002148b:	89 d8                	mov    eax,ebx
c002148d:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021491:	ba 00 00 00 00       	mov    edx,0x0
c0021496:	19 f8                	sbb    eax,edi
c0021498:	b8 00 00 00 00       	mov    eax,0x0
c002149d:	73 08                	jae    c00214a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c002149f:	89 f0                	mov    eax,esi
c00214a1:	89 fa                	mov    edx,edi
c00214a3:	29 c8                	sub    eax,ecx
c00214a5:	19 da                	sbb    edx,ebx
c00214a7:	89 d7                	mov    edi,edx
c00214a9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00214ac:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00214af:	09 c7                	or     edi,eax
c00214b1:	0f 84 5e ff ff ff    	je     c0021415 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00214b7:	57                   	push   edi
c00214b8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00214bc:	50                   	push   eax
c00214bd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00214c4:	53                   	push   ebx
c00214c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00214c8:	c1 e0 0b             	shl    eax,0xb
c00214cb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00214cf:	c1 e8 0b             	shr    eax,0xb
c00214d2:	50                   	push   eax
c00214d3:	e8 5f fc ff ff       	call   c0021137 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00214db:	83 c4 10             	add    esp,0x10
c00214de:	25 ff 07 00 00       	and    eax,0x7ff
c00214e3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00214e6:	31 ff                	xor    edi,edi
c00214e8:	56                   	push   esi
c00214e9:	6a 28                	push   0x28
c00214eb:	6a 00                	push   0x0
c00214ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00214f1:	50                   	push   eax
c00214f2:	e8 59 f2 fd ff       	call   c0000750 <memset>
c00214f7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00214fa:	25 ff 07 00 00       	and    eax,0x7ff
c00214ff:	89 c6                	mov    esi,eax
c0021501:	83 c6 21             	add    esi,0x21
c0021504:	83 d7 00             	adc    edi,0x0
c0021507:	83 c4 10             	add    esp,0x10
c002150a:	31 c9                	xor    ecx,ecx
c002150c:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021513:	83 f9 28             	cmp    ecx,0x28
c0021516:	88 04 24             	mov    BYTE PTR [esp],al
c0021519:	0f 94 c2             	sete   dl
c002151c:	88 d0                	mov    al,dl
c002151e:	ba ff 07 00 00       	mov    edx,0x7ff
c0021523:	39 f2                	cmp    edx,esi
c0021525:	ba 00 00 00 00       	mov    edx,0x0
c002152a:	19 fa                	sbb    edx,edi
c002152c:	0f 92 c2             	setb   dl
c002152f:	09 c2                	or     edx,eax
c0021531:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021535:	0f 94 c0             	sete   al
c0021538:	08 d0                	or     al,dl
c002153a:	75 16                	jne    c0021552 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002153c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021540:	74 10                	je     c0021552 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021542:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021545:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021549:	41                   	inc    ecx
c002154a:	83 c6 01             	add    esi,0x1
c002154d:	83 d7 00             	adc    edi,0x0
c0021550:	eb ba                	jmp    c002150c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021552:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021559:	83 ec 0c             	sub    esp,0xc
c002155c:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021560:	56                   	push   esi
c0021561:	e8 06 f2 fd ff       	call   c000076c <strlen>
c0021566:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c002156d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021571:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021579:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002157c:	5a                   	pop    edx
c002157d:	25 ff 07 00 00       	and    eax,0x7ff
c0021582:	59                   	pop    ecx
c0021583:	01 f8                	add    eax,edi
c0021585:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002158b:	83 e0 02             	and    eax,0x2
c002158e:	3c 01                	cmp    al,0x1
c0021590:	19 c0                	sbb    eax,eax
c0021592:	83 c0 02             	add    eax,0x2
c0021595:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021599:	56                   	push   esi
c002159a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002159e:	50                   	push   eax
c002159f:	e8 68 f2 fd ff       	call   c000080c <strcpy>
c00215a4:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00215a8:	83 c4 10             	add    esp,0x10
c00215ab:	84 c0                	test   al,al
c00215ad:	75 21                	jne    c00215d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00215af:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00215b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00215bf:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00215c7:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00215ce:	eb 28                	jmp    c00215f8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00215d0:	fe c8                	dec    al
c00215d2:	75 24                	jne    c00215f8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00215d4:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00215dc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00215e4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00215ec:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00215f3:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00215f8:	8d 74 24 40          	lea    esi,[esp+0x40]
c00215fc:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021603:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c002160a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002160c:	0f b6 f3             	movzx  esi,bl
c002160f:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021616:	31 db                	xor    ebx,ebx
c0021618:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002161e:	89 df                	mov    edi,ebx
c0021620:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021626:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021629:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002162c:	39 c6                	cmp    esi,eax
c002162e:	19 d7                	sbb    edi,edx
c0021630:	72 10                	jb     c0021642 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021632:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021639:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021640:	eb 0a                	jmp    c002164c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021642:	29 f0                	sub    eax,esi
c0021644:	19 da                	sbb    edx,ebx
c0021646:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021649:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002164c:	31 c0                	xor    eax,eax
c002164e:	eb 05                	jmp    c0021655 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021650:	b8 04 00 00 00       	mov    eax,0x4
c0021655:	81 c4 5c 09 00 00    	add    esp,0x95c
c002165b:	5b                   	pop    ebx
c002165c:	5e                   	pop    esi
c002165d:	5f                   	pop    edi
c002165e:	5d                   	pop    ebp
c002165f:	c3                   	ret    

c0021660 <readRoot(unsigned int*, unsigned int*, char)>:
c0021660:	57                   	push   edi
c0021661:	56                   	push   esi
c0021662:	81 ec 38 08 00 00    	sub    esp,0x838
c0021668:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021670:	50                   	push   eax
c0021671:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021675:	50                   	push   eax
c0021676:	6a 10                	push   0x10
c0021678:	e8 ba fa ff ff       	call   c0021137 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002167d:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021684:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021688:	b9 22 00 00 00       	mov    ecx,0x22
c002168d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002168f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021696:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002169a:	89 10                	mov    DWORD PTR [eax],edx
c002169c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00216a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00216a7:	89 10                	mov    DWORD PTR [eax],edx
c00216a9:	81 c4 44 08 00 00    	add    esp,0x844
c00216af:	b0 01                	mov    al,0x1
c00216b1:	5e                   	pop    esi
c00216b2:	5f                   	pop    edi
c00216b3:	c3                   	ret    

c00216b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00216b4:	55                   	push   ebp
c00216b5:	57                   	push   edi
c00216b6:	56                   	push   esi
c00216b7:	53                   	push   ebx
c00216b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00216be:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00216c5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00216cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00216d0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00216d4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00216d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00216dc:	75 03                	jne    c00216e1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00216de:	83 c3 02             	add    ebx,0x2
c00216e1:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00216e4:	75 03                	jne    c00216e9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00216e6:	43                   	inc    ebx
c00216e7:	eb f8                	jmp    c00216e1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00216e9:	51                   	push   ecx
c00216ea:	68 00 01 00 00       	push   0x100
c00216ef:	6a 00                	push   0x0
c00216f1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00216f5:	50                   	push   eax
c00216f6:	e8 55 f0 fd ff       	call   c0000750 <memset>
c00216fb:	83 c4 10             	add    esp,0x10
c00216fe:	31 d2                	xor    edx,edx
c0021700:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021703:	84 c0                	test   al,al
c0021705:	74 21                	je     c0021728 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021707:	3c 2f                	cmp    al,0x2f
c0021709:	75 0b                	jne    c0021716 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002170b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002170f:	bd 01 00 00 00       	mov    ebp,0x1
c0021714:	eb 14                	jmp    c002172a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021716:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021719:	80 f9 19             	cmp    cl,0x19
c002171c:	77 03                	ja     c0021721 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002171e:	83 e8 20             	sub    eax,0x20
c0021721:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021725:	42                   	inc    edx
c0021726:	eb d8                	jmp    c0021700 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021728:	31 ed                	xor    ebp,ebp
c002172a:	83 ec 0c             	sub    esp,0xc
c002172d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021734:	e8 60 de fe ff       	call   c000f599 <malloc>
c0021739:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021740:	89 c6                	mov    esi,eax
c0021742:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021748:	c1 ef 0b             	shr    edi,0xb
c002174b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021752:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021756:	83 c4 10             	add    esp,0x10
c0021759:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002175e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021762:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021769:	74 28                	je     c0021793 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c002176b:	52                   	push   edx
c002176c:	57                   	push   edi
c002176d:	50                   	push   eax
c002176e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021772:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021779:	e8 b9 f9 ff ff       	call   c0021137 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002177e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021782:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021789:	05 00 08 00 00       	add    eax,0x800
c002178e:	83 c4 10             	add    esp,0x10
c0021791:	eb cb                	jmp    c002175e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021793:	83 ec 0c             	sub    esp,0xc
c0021796:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002179a:	57                   	push   edi
c002179b:	e8 cc ef fd ff       	call   c000076c <strlen>
c00217a0:	50                   	push   eax
c00217a1:	57                   	push   edi
c00217a2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00217a9:	56                   	push   esi
c00217aa:	e8 46 f9 ff ff       	call   c00210f5 <__memmem(unsigned char*, int, unsigned char*, int)>
c00217af:	83 c4 20             	add    esp,0x20
c00217b2:	85 c0                	test   eax,eax
c00217b4:	75 13                	jne    c00217c9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00217b6:	83 ec 0c             	sub    esp,0xc
c00217b9:	56                   	push   esi
c00217ba:	e8 ea dd fe ff       	call   c000f5a9 <free>
c00217bf:	83 c4 10             	add    esp,0x10
c00217c2:	31 c0                	xor    eax,eax
c00217c4:	e9 b3 00 00 00       	jmp    c002187c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00217c9:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00217cd:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00217d1:	c1 e7 08             	shl    edi,0x8
c00217d4:	c1 e2 10             	shl    edx,0x10
c00217d7:	09 d7                	or     edi,edx
c00217d9:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00217dd:	09 d7                	or     edi,edx
c00217df:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00217e3:	c1 e2 18             	shl    edx,0x18
c00217e6:	09 d7                	or     edi,edx
c00217e8:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00217ec:	89 d1                	mov    ecx,edx
c00217ee:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00217f2:	c1 e1 08             	shl    ecx,0x8
c00217f5:	c1 e2 10             	shl    edx,0x10
c00217f8:	09 ca                	or     edx,ecx
c00217fa:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00217fe:	09 ca                	or     edx,ecx
c0021800:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021804:	c1 e1 18             	shl    ecx,0x18
c0021807:	09 ca                	or     edx,ecx
c0021809:	89 e9                	mov    ecx,ebp
c002180b:	84 c9                	test   cl,cl
c002180d:	74 3c                	je     c002184b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002180f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021813:	83 ec 0c             	sub    esp,0xc
c0021816:	56                   	push   esi
c0021817:	e8 8d dd fe ff       	call   c000f5a9 <free>
c002181c:	83 c4 0c             	add    esp,0xc
c002181f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021826:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002182b:	50                   	push   eax
c002182c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021833:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002183a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002183e:	52                   	push   edx
c002183f:	57                   	push   edi
c0021840:	53                   	push   ebx
c0021841:	e8 6e fe ff ff       	call   c00216b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021846:	83 c4 20             	add    esp,0x20
c0021849:	eb 31                	jmp    c002187c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002184b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002184e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021855:	d0 e8                	shr    al,1
c0021857:	89 3b                	mov    DWORD PTR [ebx],edi
c0021859:	83 e0 01             	and    eax,0x1
c002185c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021863:	83 ec 0c             	sub    esp,0xc
c0021866:	89 13                	mov    DWORD PTR [ebx],edx
c0021868:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002186f:	89 03                	mov    DWORD PTR [ebx],eax
c0021871:	56                   	push   esi
c0021872:	e8 32 dd fe ff       	call   c000f5a9 <free>
c0021877:	83 c4 10             	add    esp,0x10
c002187a:	b0 01                	mov    al,0x1
c002187c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021882:	5b                   	pop    ebx
c0021883:	5e                   	pop    esi
c0021884:	5f                   	pop    edi
c0021885:	5d                   	pop    ebp
c0021886:	c3                   	ret    

c0021887 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021887:	55                   	push   ebp
c0021888:	57                   	push   edi
c0021889:	56                   	push   esi
c002188a:	53                   	push   ebx
c002188b:	83 ec 20             	sub    esp,0x20
c002188e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021892:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021896:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002189a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218a2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00218aa:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00218af:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00218b5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00218bb:	57                   	push   edi
c00218bc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218c0:	50                   	push   eax
c00218c1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218c5:	50                   	push   eax
c00218c6:	e8 95 fd ff ff       	call   c0021660 <readRoot(unsigned int*, unsigned int*, char)>
c00218cb:	5a                   	pop    edx
c00218cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00218d0:	e8 97 ee fd ff       	call   c000076c <strlen>
c00218d5:	83 c4 10             	add    esp,0x10
c00218d8:	83 f8 03             	cmp    eax,0x3
c00218db:	77 17                	ja     c00218f4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00218dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218e1:	89 03                	mov    DWORD PTR [ebx],eax
c00218e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218e7:	89 06                	mov    DWORD PTR [esi],eax
c00218e9:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00218f0:	b0 01                	mov    al,0x1
c00218f2:	eb 19                	jmp    c002190d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00218f4:	50                   	push   eax
c00218f5:	55                   	push   ebp
c00218f6:	57                   	push   edi
c00218f7:	56                   	push   esi
c00218f8:	53                   	push   ebx
c00218f9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00218fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021901:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021905:	e8 aa fd ff ff       	call   c00216b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002190a:	83 c4 20             	add    esp,0x20
c002190d:	83 c4 1c             	add    esp,0x1c
c0021910:	5b                   	pop    ebx
c0021911:	5e                   	pop    esi
c0021912:	5f                   	pop    edi
c0021913:	5d                   	pop    ebp
c0021914:	c3                   	ret    
c0021915:	90                   	nop

c0021916 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021916:	57                   	push   edi
c0021917:	56                   	push   esi
c0021918:	53                   	push   ebx
c0021919:	83 ec 10             	sub    esp,0x10
c002191c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021920:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021924:	85 ff                	test   edi,edi
c0021926:	0f 84 8b 00 00 00    	je     c00219b7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c002192c:	85 f6                	test   esi,esi
c002192e:	0f 84 83 00 00 00    	je     c00219b7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021934:	b8 03 00 00 00       	mov    eax,0x3
c0021939:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002193e:	75 7c                	jne    c00219bc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021940:	83 ec 0c             	sub    esp,0xc
c0021943:	6a 1c                	push   0x1c
c0021945:	e8 4f dc fe ff       	call   c000f599 <malloc>
c002194a:	89 07                	mov    DWORD PTR [edi],eax
c002194c:	89 c3                	mov    ebx,eax
c002194e:	58                   	pop    eax
c002194f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021953:	50                   	push   eax
c0021954:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021957:	50                   	push   eax
c0021958:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002195c:	50                   	push   eax
c002195d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021961:	50                   	push   eax
c0021962:	56                   	push   esi
c0021963:	e8 1f ff ff ff       	call   c0021887 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021968:	83 c4 20             	add    esp,0x20
c002196b:	84 c0                	test   al,al
c002196d:	74 07                	je     c0021976 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c002196f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021974:	74 0b                	je     c0021981 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021976:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002197a:	b8 01 00 00 00       	mov    eax,0x1
c002197f:	eb 3b                	jmp    c00219bc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021981:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021985:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021989:	89 03                	mov    DWORD PTR [ebx],eax
c002198b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021992:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021996:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002199d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00219a7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00219ae:	8a 06                	mov    al,BYTE PTR [esi]
c00219b0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00219b3:	31 c0                	xor    eax,eax
c00219b5:	eb 05                	jmp    c00219bc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219b7:	b8 04 00 00 00       	mov    eax,0x4
c00219bc:	83 c4 10             	add    esp,0x10
c00219bf:	5b                   	pop    ebx
c00219c0:	5e                   	pop    esi
c00219c1:	5f                   	pop    edi
c00219c2:	c3                   	ret    
c00219c3:	90                   	nop

c00219c4 <ISO9660::exists(char const*)>:
c00219c4:	83 ec 28             	sub    esp,0x28
c00219c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00219cb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00219cf:	52                   	push   edx
c00219d0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00219d3:	52                   	push   edx
c00219d4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00219d8:	52                   	push   edx
c00219d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00219dd:	52                   	push   edx
c00219de:	50                   	push   eax
c00219df:	e8 a3 fe ff ff       	call   c0021887 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00219e4:	83 c4 3c             	add    esp,0x3c
c00219e7:	c3                   	ret    

c00219e8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00219e8:	56                   	push   esi
c00219e9:	53                   	push   ebx
c00219ea:	83 ec 14             	sub    esp,0x14
c00219ed:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00219f1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00219f5:	85 db                	test   ebx,ebx
c00219f7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00219fb:	0f 94 c2             	sete   dl
c00219fe:	85 f6                	test   esi,esi
c0021a00:	0f 94 c0             	sete   al
c0021a03:	08 c2                	or     dl,al
c0021a05:	75 68                	jne    c0021a6f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a07:	85 c9                	test   ecx,ecx
c0021a09:	74 64                	je     c0021a6f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a0b:	83 ec 0c             	sub    esp,0xc
c0021a0e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a11:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a15:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a1b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a22:	50                   	push   eax
c0021a23:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021a26:	50                   	push   eax
c0021a27:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a2b:	50                   	push   eax
c0021a2c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a30:	50                   	push   eax
c0021a31:	51                   	push   ecx
c0021a32:	e8 50 fe ff ff       	call   c0021887 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a37:	83 c4 20             	add    esp,0x20
c0021a3a:	ba 01 00 00 00       	mov    edx,0x1
c0021a3f:	84 c0                	test   al,al
c0021a41:	74 31                	je     c0021a74 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a47:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a4e:	89 03                	mov    DWORD PTR [ebx],eax
c0021a50:	ba 00 00 00 00       	mov    edx,0x0
c0021a55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a59:	85 c0                	test   eax,eax
c0021a5b:	0f 95 06             	setne  BYTE PTR [esi]
c0021a5e:	74 14                	je     c0021a74 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a60:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a66:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a6d:	eb 05                	jmp    c0021a74 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a6f:	ba 04 00 00 00       	mov    edx,0x4
c0021a74:	83 c4 14             	add    esp,0x14
c0021a77:	89 d0                	mov    eax,edx
c0021a79:	5b                   	pop    ebx
c0021a7a:	5e                   	pop    esi
c0021a7b:	c3                   	ret    

c0021a7c <ISO9660::openDir(char const*, void**)>:
c0021a7c:	57                   	push   edi
c0021a7d:	56                   	push   esi
c0021a7e:	53                   	push   ebx
c0021a7f:	83 ec 10             	sub    esp,0x10
c0021a82:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021a86:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021a8a:	85 ff                	test   edi,edi
c0021a8c:	74 7b                	je     c0021b09 <ISO9660::openDir(char const*, void**)+0x8d>
c0021a8e:	85 f6                	test   esi,esi
c0021a90:	74 77                	je     c0021b09 <ISO9660::openDir(char const*, void**)+0x8d>
c0021a92:	83 ec 0c             	sub    esp,0xc
c0021a95:	6a 1c                	push   0x1c
c0021a97:	e8 fd da fe ff       	call   c000f599 <malloc>
c0021a9c:	89 07                	mov    DWORD PTR [edi],eax
c0021a9e:	89 c3                	mov    ebx,eax
c0021aa0:	58                   	pop    eax
c0021aa1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021aa5:	50                   	push   eax
c0021aa6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021aa9:	50                   	push   eax
c0021aaa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021aae:	50                   	push   eax
c0021aaf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ab3:	50                   	push   eax
c0021ab4:	56                   	push   esi
c0021ab5:	e8 cd fd ff ff       	call   c0021887 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021aba:	83 c4 20             	add    esp,0x20
c0021abd:	84 c0                	test   al,al
c0021abf:	74 07                	je     c0021ac8 <ISO9660::openDir(char const*, void**)+0x4c>
c0021ac1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021ac6:	75 0b                	jne    c0021ad3 <ISO9660::openDir(char const*, void**)+0x57>
c0021ac8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021acc:	b8 01 00 00 00       	mov    eax,0x1
c0021ad1:	eb 3b                	jmp    c0021b0e <ISO9660::openDir(char const*, void**)+0x92>
c0021ad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ad7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021adb:	89 03                	mov    DWORD PTR [ebx],eax
c0021add:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021ae4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ae8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021aef:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021af6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021af9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b00:	8a 06                	mov    al,BYTE PTR [esi]
c0021b02:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b05:	31 c0                	xor    eax,eax
c0021b07:	eb 05                	jmp    c0021b0e <ISO9660::openDir(char const*, void**)+0x92>
c0021b09:	b8 04 00 00 00       	mov    eax,0x4
c0021b0e:	83 c4 10             	add    esp,0x10
c0021b11:	5b                   	pop    ebx
c0021b12:	5e                   	pop    esi
c0021b13:	5f                   	pop    edi
c0021b14:	c3                   	ret    
c0021b15:	90                   	nop

c0021b16 <ISO9660::ISO9660()>:
c0021b16:	83 ec 0c             	sub    esp,0xc
c0021b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b1d:	83 ec 0c             	sub    esp,0xc
c0021b20:	50                   	push   eax
c0021b21:	e8 86 0e ff ff       	call   c00129ac <Filesystem::Filesystem()>
c0021b26:	83 c4 10             	add    esp,0x10
c0021b29:	ba a0 be 02 c0       	mov    edx,0xc002bea0
c0021b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b32:	89 10                	mov    DWORD PTR [eax],edx
c0021b34:	90                   	nop
c0021b35:	83 c4 0c             	add    esp,0xc
c0021b38:	c3                   	ret    
c0021b39:	90                   	nop

c0021b3a <SoundChannel::SoundChannel(int, int, int, int)>:
c0021b3a:	83 ec 1c             	sub    esp,0x1c
c0021b3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b41:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021b45:	89 10                	mov    DWORD PTR [eax],edx
c0021b47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021b4f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b56:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b5a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b5d:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021b62:	75 23                	jne    c0021b87 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b68:	8b 10                	mov    edx,DWORD PTR [eax]
c0021b6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b71:	0f af c2             	imul   eax,edx
c0021b74:	85 c0                	test   eax,eax
c0021b76:	79 03                	jns    c0021b7b <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021b78:	83 c0 03             	add    eax,0x3
c0021b7b:	c1 f8 02             	sar    eax,0x2
c0021b7e:	05 a0 0f 00 00       	add    eax,0xfa0
c0021b83:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b8b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021b8f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021b92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b96:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021b9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ba1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021ba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021baf:	c1 e0 02             	shl    eax,0x2
c0021bb2:	83 ec 0c             	sub    esp,0xc
c0021bb5:	50                   	push   eax
c0021bb6:	e8 de d9 fe ff       	call   c000f599 <malloc>
c0021bbb:	83 c4 10             	add    esp,0x10
c0021bbe:	89 c2                	mov    edx,eax
c0021bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021bc7:	83 ec 04             	sub    esp,0x4
c0021bca:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021bce:	50                   	push   eax
c0021bcf:	6a 01                	push   0x1
c0021bd1:	6a 04                	push   0x4
c0021bd3:	e8 8d 6f fe ff       	call   c0008b65 <src_new>
c0021bd8:	83 c4 10             	add    esp,0x10
c0021bdb:	89 c2                	mov    edx,eax
c0021bdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021be1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021be8:	85 c0                	test   eax,eax
c0021bea:	74 10                	je     c0021bfc <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021bec:	83 ec 0c             	sub    esp,0xc
c0021bef:	68 00 bf 02 c0       	push   0xc002bf00
c0021bf4:	e8 14 82 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0021bf9:	83 c4 10             	add    esp,0x10
c0021bfc:	a0 60 1c 03 c0       	mov    al,ds:0xc0031c60
c0021c01:	83 f0 01             	xor    eax,0x1
c0021c04:	84 c0                	test   al,al
c0021c06:	74 57                	je     c0021c5f <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021c08:	a1 1c bf 02 c0       	mov    eax,ds:0xc002bf1c
c0021c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c19:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021c21:	7f 35                	jg     c0021c58 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021c23:	83 ec 0c             	sub    esp,0xc
c0021c26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021c2a:	e8 e0 53 00 00       	call   c002700f <__floatsisf>
c0021c2f:	83 c4 10             	add    esp,0x10
c0021c32:	8b 15 1c bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bf1c
c0021c38:	83 ec 08             	sub    esp,0x8
c0021c3b:	52                   	push   edx
c0021c3c:	50                   	push   eax
c0021c3d:	e8 df 4f 00 00       	call   c0026c21 <__mulsf3>
c0021c42:	83 c4 10             	add    esp,0x10
c0021c45:	89 c2                	mov    edx,eax
c0021c47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c4b:	89 14 85 60 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7a0],edx
c0021c52:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c56:	eb c1                	jmp    c0021c19 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021c58:	c6 05 60 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c60,0x1
c0021c5f:	90                   	nop
c0021c60:	83 c4 1c             	add    esp,0x1c
c0021c63:	c3                   	ret    

c0021c64 <SoundChannel::~SoundChannel()>:
c0021c64:	83 ec 0c             	sub    esp,0xc
c0021c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c6b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021c6e:	83 ec 0c             	sub    esp,0xc
c0021c71:	50                   	push   eax
c0021c72:	e8 32 d9 fe ff       	call   c000f5a9 <free>
c0021c77:	83 c4 10             	add    esp,0x10
c0021c7a:	90                   	nop
c0021c7b:	83 c4 0c             	add    esp,0xc
c0021c7e:	c3                   	ret    
c0021c7f:	90                   	nop

c0021c80 <SoundChannel::getSampleRate()>:
c0021c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c84:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c86:	c3                   	ret    
c0021c87:	90                   	nop

c0021c88 <SoundChannel::getBits()>:
c0021c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c8f:	c3                   	ret    

c0021c90 <SoundChannel::getBufferUsed()>:
c0021c90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c94:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021c97:	c3                   	ret    

c0021c98 <SoundChannel::getBufferSize()>:
c0021c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c9c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021c9f:	c3                   	ret    

c0021ca0 <SoundChannel::unbuffer(float*, int, int)>:
c0021ca0:	56                   	push   esi
c0021ca1:	53                   	push   ebx
c0021ca2:	83 ec 40             	sub    esp,0x40
c0021ca5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021ca9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cb0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021cb3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021cb7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021cbb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021cbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021cc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021cc7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021ccb:	e8 3f 53 00 00       	call   c002700f <__floatsisf>
c0021cd0:	5a                   	pop    edx
c0021cd1:	89 c6                	mov    esi,eax
c0021cd3:	ff 33                	push   DWORD PTR [ebx]
c0021cd5:	e8 35 53 00 00       	call   c002700f <__floatsisf>
c0021cda:	59                   	pop    ecx
c0021cdb:	5a                   	pop    edx
c0021cdc:	50                   	push   eax
c0021cdd:	56                   	push   esi
c0021cde:	e8 01 51 00 00       	call   c0026de4 <__divsf3>
c0021ce3:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ce6:	e8 f4 65 00 00       	call   c00282df <__extendsfdf2>
c0021ceb:	59                   	pop    ecx
c0021cec:	5e                   	pop    esi
c0021ced:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021cf1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021cf5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021cfd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d01:	50                   	push   eax
c0021d02:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021d05:	e8 50 6a fe ff       	call   c000875a <src_process>
c0021d0a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d0e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021d11:	83 c4 0c             	add    esp,0xc
c0021d14:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021d17:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021d1a:	29 d0                	sub    eax,edx
c0021d1c:	c1 e0 02             	shl    eax,0x2
c0021d1f:	50                   	push   eax
c0021d20:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021d23:	50                   	push   eax
c0021d24:	51                   	push   ecx
c0021d25:	e8 5e e9 fd ff       	call   c0000688 <memmove>
c0021d2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d2e:	83 c4 44             	add    esp,0x44
c0021d31:	5b                   	pop    ebx
c0021d32:	5e                   	pop    esi
c0021d33:	c3                   	ret    

c0021d34 <SoundChannel::buffer16(short*, int)>:
c0021d34:	55                   	push   ebp
c0021d35:	57                   	push   edi
c0021d36:	56                   	push   esi
c0021d37:	53                   	push   ebx
c0021d38:	83 ec 1c             	sub    esp,0x1c
c0021d3b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021d3f:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021d42:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021d45:	0f 84 d2 00 00 00    	je     c0021e1d <SoundChannel::buffer16(short*, int)+0xe9>
c0021d4b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021d4f:	85 ed                	test   ebp,ebp
c0021d51:	0f 8e c6 00 00 00    	jle    c0021e1d <SoundChannel::buffer16(short*, int)+0xe9>
c0021d57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d5b:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021d60:	83 ec 0c             	sub    esp,0xc
c0021d63:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021d66:	50                   	push   eax
c0021d67:	e8 a3 52 00 00       	call   c002700f <__floatsisf>
c0021d6c:	59                   	pop    ecx
c0021d6d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021d70:	5f                   	pop    edi
c0021d71:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021d74:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021d77:	55                   	push   ebp
c0021d78:	50                   	push   eax
c0021d79:	e8 a3 4e 00 00       	call   c0026c21 <__mulsf3>
c0021d7e:	83 c4 10             	add    esp,0x10
c0021d81:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021d84:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021d87:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021d8a:	0f 84 99 00 00 00    	je     c0021e29 <SoundChannel::buffer16(short*, int)+0xf5>
c0021d90:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021d95:	74 78                	je     c0021e0f <SoundChannel::buffer16(short*, int)+0xdb>
c0021d97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d9b:	83 ec 0c             	sub    esp,0xc
c0021d9e:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021da2:	50                   	push   eax
c0021da3:	e8 67 52 00 00       	call   c002700f <__floatsisf>
c0021da8:	5f                   	pop    edi
c0021da9:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021dac:	5a                   	pop    edx
c0021dad:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021db0:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021db3:	55                   	push   ebp
c0021db4:	50                   	push   eax
c0021db5:	e8 67 4e 00 00       	call   c0026c21 <__mulsf3>
c0021dba:	83 c4 10             	add    esp,0x10
c0021dbd:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021dc0:	be 02 00 00 00       	mov    esi,0x2
c0021dc5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021dc8:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021dcb:	74 46                	je     c0021e13 <SoundChannel::buffer16(short*, int)+0xdf>
c0021dcd:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021dd1:	eb 36                	jmp    c0021e09 <SoundChannel::buffer16(short*, int)+0xd5>
c0021dd3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021dd7:	83 ec 0c             	sub    esp,0xc
c0021dda:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021dde:	46                   	inc    esi
c0021ddf:	50                   	push   eax
c0021de0:	e8 2a 52 00 00       	call   c002700f <__floatsisf>
c0021de5:	5a                   	pop    edx
c0021de6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021de9:	59                   	pop    ecx
c0021dea:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021ded:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021df0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021df4:	50                   	push   eax
c0021df5:	e8 27 4e 00 00       	call   c0026c21 <__mulsf3>
c0021dfa:	83 c4 10             	add    esp,0x10
c0021dfd:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021e01:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e04:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e07:	74 0a                	je     c0021e13 <SoundChannel::buffer16(short*, int)+0xdf>
c0021e09:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021e0d:	75 c4                	jne    c0021dd3 <SoundChannel::buffer16(short*, int)+0x9f>
c0021e0f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021e13:	83 c4 1c             	add    esp,0x1c
c0021e16:	89 f0                	mov    eax,esi
c0021e18:	5b                   	pop    ebx
c0021e19:	5e                   	pop    esi
c0021e1a:	5f                   	pop    edi
c0021e1b:	5d                   	pop    ebp
c0021e1c:	c3                   	ret    
c0021e1d:	83 c4 1c             	add    esp,0x1c
c0021e20:	31 f6                	xor    esi,esi
c0021e22:	5b                   	pop    ebx
c0021e23:	89 f0                	mov    eax,esi
c0021e25:	5e                   	pop    esi
c0021e26:	5f                   	pop    edi
c0021e27:	5d                   	pop    ebp
c0021e28:	c3                   	ret    
c0021e29:	be 01 00 00 00       	mov    esi,0x1
c0021e2e:	eb e3                	jmp    c0021e13 <SoundChannel::buffer16(short*, int)+0xdf>

c0021e30 <SoundChannel::buffer8(unsigned char*, int)>:
c0021e30:	55                   	push   ebp
c0021e31:	57                   	push   edi
c0021e32:	56                   	push   esi
c0021e33:	53                   	push   ebx
c0021e34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e38:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021e3c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e3f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021e43:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e46:	74 7a                	je     c0021ec2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e48:	85 ff                	test   edi,edi
c0021e4a:	7e 76                	jle    c0021ec2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e4c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021e50:	8d 70 01             	lea    esi,[eax+0x1]
c0021e53:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021e56:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021e59:	8b 1c 9d 60 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce7a0]
c0021e60:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021e63:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e66:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e69:	74 5e                	je     c0021ec9 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021e6b:	83 ff 01             	cmp    edi,0x1
c0021e6e:	74 4b                	je     c0021ebb <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021e70:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021e74:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021e77:	8d 70 01             	lea    esi,[eax+0x1]
c0021e7a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021e7d:	8b 1c 9d 60 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce7a0]
c0021e84:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021e87:	b8 02 00 00 00       	mov    eax,0x2
c0021e8c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021e8f:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021e92:	75 23                	jne    c0021eb7 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021e94:	eb 27                	jmp    c0021ebd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021e96:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021e9b:	8d 71 01             	lea    esi,[ecx+0x1]
c0021e9e:	40                   	inc    eax
c0021e9f:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ea2:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021ea5:	8b 1c 9d 60 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce7a0]
c0021eac:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021eaf:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021eb2:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021eb5:	74 06                	je     c0021ebd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021eb7:	39 c7                	cmp    edi,eax
c0021eb9:	75 db                	jne    c0021e96 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021ebb:	89 f8                	mov    eax,edi
c0021ebd:	5b                   	pop    ebx
c0021ebe:	5e                   	pop    esi
c0021ebf:	5f                   	pop    edi
c0021ec0:	5d                   	pop    ebp
c0021ec1:	c3                   	ret    
c0021ec2:	5b                   	pop    ebx
c0021ec3:	31 c0                	xor    eax,eax
c0021ec5:	5e                   	pop    esi
c0021ec6:	5f                   	pop    edi
c0021ec7:	5d                   	pop    ebp
c0021ec8:	c3                   	ret    
c0021ec9:	b8 01 00 00 00       	mov    eax,0x1
c0021ece:	eb ed                	jmp    c0021ebd <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021ed0 <SoundDevice::SoundDevice(char const*)>:
c0021ed0:	83 ec 1c             	sub    esp,0x1c
c0021ed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ed7:	83 ec 08             	sub    esp,0x8
c0021eda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021ede:	50                   	push   eax
c0021edf:	e8 fa 1d ff ff       	call   c0013cde <Device::Device(char const*)>
c0021ee4:	83 c4 10             	add    esp,0x10
c0021ee7:	ba 28 bf 02 c0       	mov    edx,0xc002bf28
c0021eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ef0:	89 10                	mov    DWORD PTR [eax],edx
c0021ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ef6:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021f00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f04:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021f0e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f16:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f1b:	7f 19                	jg     c0021f36 <SoundDevice::SoundDevice(char const*)+0x66>
c0021f1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f25:	83 c2 54             	add    edx,0x54
c0021f28:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021f30:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021f34:	eb e0                	jmp    c0021f16 <SoundDevice::SoundDevice(char const*)+0x46>
c0021f36:	90                   	nop
c0021f37:	83 c4 1c             	add    esp,0x1c
c0021f3a:	c3                   	ret    
c0021f3b:	90                   	nop

c0021f3c <SoundDevice::~SoundDevice()>:
c0021f3c:	53                   	push   ebx
c0021f3d:	83 ec 18             	sub    esp,0x18
c0021f40:	ba 28 bf 02 c0       	mov    edx,0xc002bf28
c0021f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f49:	89 10                	mov    DWORD PTR [eax],edx
c0021f4b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f53:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f58:	7f 46                	jg     c0021fa0 <SoundDevice::~SoundDevice()+0x64>
c0021f5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f62:	83 c2 54             	add    edx,0x54
c0021f65:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021f69:	85 c0                	test   eax,eax
c0021f6b:	74 2d                	je     c0021f9a <SoundDevice::~SoundDevice()+0x5e>
c0021f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f75:	83 c2 54             	add    edx,0x54
c0021f78:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021f7c:	85 db                	test   ebx,ebx
c0021f7e:	74 1a                	je     c0021f9a <SoundDevice::~SoundDevice()+0x5e>
c0021f80:	83 ec 0c             	sub    esp,0xc
c0021f83:	53                   	push   ebx
c0021f84:	e8 db fc ff ff       	call   c0021c64 <SoundChannel::~SoundChannel()>
c0021f89:	83 c4 10             	add    esp,0x10
c0021f8c:	83 ec 08             	sub    esp,0x8
c0021f8f:	6a 2c                	push   0x2c
c0021f91:	53                   	push   ebx
c0021f92:	e8 32 06 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0021f97:	83 c4 10             	add    esp,0x10
c0021f9a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021f9e:	eb b3                	jmp    c0021f53 <SoundDevice::~SoundDevice()+0x17>
c0021fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fa4:	83 ec 0c             	sub    esp,0xc
c0021fa7:	50                   	push   eax
c0021fa8:	e8 fb 19 ff ff       	call   c00139a8 <Device::~Device()>
c0021fad:	83 c4 10             	add    esp,0x10
c0021fb0:	90                   	nop
c0021fb1:	83 c4 18             	add    esp,0x18
c0021fb4:	5b                   	pop    ebx
c0021fb5:	c3                   	ret    

c0021fb6 <SoundDevice::~SoundDevice()>:
c0021fb6:	83 ec 0c             	sub    esp,0xc
c0021fb9:	83 ec 0c             	sub    esp,0xc
c0021fbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fc0:	e8 77 ff ff ff       	call   c0021f3c <SoundDevice::~SoundDevice()>
c0021fc5:	83 c4 10             	add    esp,0x10
c0021fc8:	83 ec 08             	sub    esp,0x8
c0021fcb:	68 e4 01 00 00       	push   0x1e4
c0021fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fd4:	e8 f0 05 ff ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0021fd9:	83 c4 10             	add    esp,0x10
c0021fdc:	83 c4 0c             	add    esp,0xc
c0021fdf:	c3                   	ret    

c0021fe0 <SoundDevice::getFreeChannelNum()>:
c0021fe0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021fe4:	31 c0                	xor    eax,eax
c0021fe6:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021fee:	74 09                	je     c0021ff9 <SoundDevice::getFreeChannelNum()+0x19>
c0021ff0:	40                   	inc    eax
c0021ff1:	83 f8 20             	cmp    eax,0x20
c0021ff4:	75 f0                	jne    c0021fe6 <SoundDevice::getFreeChannelNum()+0x6>
c0021ff6:	83 c8 ff             	or     eax,0xffffffff
c0021ff9:	c3                   	ret    

c0021ffa <SoundDevice::addChannel(SoundChannel*)>:
c0021ffa:	56                   	push   esi
c0021ffb:	53                   	push   ebx
c0021ffc:	51                   	push   ecx
c0021ffd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022001:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022005:	53                   	push   ebx
c0022006:	e8 d5 ff ff ff       	call   c0021fe0 <SoundDevice::getFreeChannelNum()>
c002200b:	5a                   	pop    edx
c002200c:	83 f8 ff             	cmp    eax,0xffffffff
c002200f:	74 51                	je     c0022062 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022011:	85 f6                	test   esi,esi
c0022013:	74 4d                	je     c0022062 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022015:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002201c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022023:	75 30                	jne    c0022055 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022025:	83 ec 0c             	sub    esp,0xc
c0022028:	56                   	push   esi
c0022029:	e8 52 fc ff ff       	call   c0021c80 <SoundChannel::getSampleRate()>
c002202e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022034:	89 34 24             	mov    DWORD PTR [esp],esi
c0022037:	e8 4c fc ff ff       	call   c0021c88 <SoundChannel::getBits()>
c002203c:	83 c4 0c             	add    esp,0xc
c002203f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022045:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022047:	50                   	push   eax
c0022048:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002204e:	53                   	push   ebx
c002204f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022052:	83 c4 10             	add    esp,0x10
c0022055:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002205b:	b8 01 00 00 00       	mov    eax,0x1
c0022060:	eb 03                	jmp    c0022065 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022062:	83 c8 ff             	or     eax,0xffffffff
c0022065:	5a                   	pop    edx
c0022066:	5b                   	pop    ebx
c0022067:	5e                   	pop    esi
c0022068:	c3                   	ret    
c0022069:	90                   	nop

c002206a <SoundDevice::removeChannel(int)>:
c002206a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002206e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022072:	83 fa 1f             	cmp    edx,0x1f
c0022075:	77 23                	ja     c002209a <SoundDevice::removeChannel(int)+0x30>
c0022077:	8d 14 90             	lea    edx,[eax+edx*4]
c002207a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022081:	74 17                	je     c002209a <SoundDevice::removeChannel(int)+0x30>
c0022083:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002208d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022093:	75 05                	jne    c002209a <SoundDevice::removeChannel(int)+0x30>
c0022095:	8b 00                	mov    eax,DWORD PTR [eax]
c0022097:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c002209a:	c3                   	ret    
c002209b:	90                   	nop

c002209c <SoundDevice::floatTo16(float*, short*, int)>:
c002209c:	57                   	push   edi
c002209d:	56                   	push   esi
c002209e:	53                   	push   ebx
c002209f:	31 db                	xor    ebx,ebx
c00220a1:	83 ec 10             	sub    esp,0x10
c00220a4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00220a8:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00220ac:	0f 8d d0 00 00 00    	jge    c0022182 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00220b2:	83 ec 0c             	sub    esp,0xc
c00220b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220b9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00220bc:	e8 1e 62 00 00       	call   c00282df <__extendsfdf2>
c00220c1:	83 c4 10             	add    esp,0x10
c00220c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220cc:	68 00 00 f0 3f       	push   0x3ff00000
c00220d1:	6a 00                	push   0x0
c00220d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220db:	e8 8b 51 00 00       	call   c002726b <__adddf3>
c00220e0:	83 c4 10             	add    esp,0x10
c00220e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220eb:	68 00 00 e0 3f       	push   0x3fe00000
c00220f0:	6a 00                	push   0x0
c00220f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220fa:	e8 e9 57 00 00       	call   c00278e8 <__muldf3>
c00220ff:	83 c4 10             	add    esp,0x10
c0022102:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022106:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002210a:	68 c0 ff df 40       	push   0x40dfffc0
c002210f:	6a 00                	push   0x0
c0022111:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022115:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022119:	e8 ca 57 00 00       	call   c00278e8 <__muldf3>
c002211e:	59                   	pop    ecx
c002211f:	5f                   	pop    edi
c0022120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022124:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002212c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022130:	e8 86 60 00 00       	call   c00281bb <__truncdfsf2>
c0022135:	5a                   	pop    edx
c0022136:	89 c7                	mov    edi,eax
c0022138:	59                   	pop    ecx
c0022139:	68 00 fe ff 46       	push   0x46fffe00
c002213e:	50                   	push   eax
c002213f:	e8 21 51 00 00       	call   c0027265 <__gesf2>
c0022144:	83 c4 10             	add    esp,0x10
c0022147:	85 c0                	test   eax,eax
c0022149:	78 08                	js     c0022153 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c002214b:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022151:	eb 29                	jmp    c002217c <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022153:	50                   	push   eax
c0022154:	50                   	push   eax
c0022155:	6a 00                	push   0x0
c0022157:	57                   	push   edi
c0022158:	e8 0c 51 00 00       	call   c0027269 <__lesf2>
c002215d:	83 c4 10             	add    esp,0x10
c0022160:	85 c0                	test   eax,eax
c0022162:	7f 08                	jg     c002216c <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022164:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c002216a:	eb 10                	jmp    c002217c <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002216c:	83 ec 0c             	sub    esp,0xc
c002216f:	57                   	push   edi
c0022170:	e8 07 62 00 00       	call   c002837c <lrintf>
c0022175:	83 c4 10             	add    esp,0x10
c0022178:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c002217c:	43                   	inc    ebx
c002217d:	e9 26 ff ff ff       	jmp    c00220a8 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022182:	83 c4 10             	add    esp,0x10
c0022185:	5b                   	pop    ebx
c0022186:	5e                   	pop    esi
c0022187:	5f                   	pop    edi
c0022188:	c3                   	ret    
c0022189:	90                   	nop

c002218a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002218a:	57                   	push   edi
c002218b:	56                   	push   esi
c002218c:	53                   	push   ebx
c002218d:	31 db                	xor    ebx,ebx
c002218f:	83 ec 10             	sub    esp,0x10
c0022192:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022196:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002219a:	0f 8d cb 00 00 00    	jge    c002226b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00221a0:	83 ec 0c             	sub    esp,0xc
c00221a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00221a7:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00221aa:	e8 30 61 00 00       	call   c00282df <__extendsfdf2>
c00221af:	83 c4 10             	add    esp,0x10
c00221b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221ba:	68 00 00 f0 3f       	push   0x3ff00000
c00221bf:	6a 00                	push   0x0
c00221c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221c9:	e8 9d 50 00 00       	call   c002726b <__adddf3>
c00221ce:	83 c4 10             	add    esp,0x10
c00221d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221d9:	68 00 00 e0 3f       	push   0x3fe00000
c00221de:	6a 00                	push   0x0
c00221e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221e8:	e8 fb 56 00 00       	call   c00278e8 <__muldf3>
c00221ed:	83 c4 10             	add    esp,0x10
c00221f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221f8:	68 00 00 60 40       	push   0x40600000
c00221fd:	6a 00                	push   0x0
c00221ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022203:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022207:	e8 dc 56 00 00       	call   c00278e8 <__muldf3>
c002220c:	59                   	pop    ecx
c002220d:	5f                   	pop    edi
c002220e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022212:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022216:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002221a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002221e:	e8 98 5f 00 00       	call   c00281bb <__truncdfsf2>
c0022223:	5a                   	pop    edx
c0022224:	89 c7                	mov    edi,eax
c0022226:	59                   	pop    ecx
c0022227:	68 00 00 fe 42       	push   0x42fe0000
c002222c:	50                   	push   eax
c002222d:	e8 33 50 00 00       	call   c0027265 <__gesf2>
c0022232:	83 c4 10             	add    esp,0x10
c0022235:	85 c0                	test   eax,eax
c0022237:	78 06                	js     c002223f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022239:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002223d:	eb 26                	jmp    c0022265 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002223f:	50                   	push   eax
c0022240:	50                   	push   eax
c0022241:	6a 00                	push   0x0
c0022243:	57                   	push   edi
c0022244:	e8 20 50 00 00       	call   c0027269 <__lesf2>
c0022249:	83 c4 10             	add    esp,0x10
c002224c:	85 c0                	test   eax,eax
c002224e:	7f 06                	jg     c0022256 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022250:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022254:	eb 0f                	jmp    c0022265 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022256:	83 ec 0c             	sub    esp,0xc
c0022259:	57                   	push   edi
c002225a:	e8 1d 61 00 00       	call   c002837c <lrintf>
c002225f:	83 c4 10             	add    esp,0x10
c0022262:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022265:	43                   	inc    ebx
c0022266:	e9 2b ff ff ff       	jmp    c0022196 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002226b:	83 c4 10             	add    esp,0x10
c002226e:	5b                   	pop    ebx
c002226f:	5e                   	pop    esi
c0022270:	5f                   	pop    edi
c0022271:	c3                   	ret    

c0022272 <SoundDevice::getAudio(int, float*, float*)>:
c0022272:	55                   	push   ebp
c0022273:	31 ed                	xor    ebp,ebp
c0022275:	57                   	push   edi
c0022276:	56                   	push   esi
c0022277:	31 f6                	xor    esi,esi
c0022279:	53                   	push   ebx
c002227a:	83 ec 20             	sub    esp,0x20
c002227d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022281:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022285:	c1 e0 02             	shl    eax,0x2
c0022288:	50                   	push   eax
c0022289:	6a 00                	push   0x0
c002228b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002228f:	e8 bc e4 fd ff       	call   c0000750 <memset>
c0022294:	83 c4 10             	add    esp,0x10
c0022297:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002229f:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00222a6:	85 c9                	test   ecx,ecx
c00222a8:	74 52                	je     c00222fc <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00222aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00222ae:	99                   	cdq    
c00222af:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00222b5:	50                   	push   eax
c00222b6:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00222bc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00222c0:	51                   	push   ecx
c00222c1:	e8 da f9 ff ff       	call   c0021ca0 <SoundChannel::unbuffer(float*, int, int)>
c00222c6:	31 d2                	xor    edx,edx
c00222c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00222cc:	83 c4 10             	add    esp,0x10
c00222cf:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00222d3:	7d 1e                	jge    c00222f3 <SoundDevice::getAudio(int, float*, float*)+0x81>
c00222d5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00222d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00222dd:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c00222e0:	89 cf                	mov    edi,ecx
c00222e2:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c00222e8:	0f af ca             	imul   ecx,edx
c00222eb:	42                   	inc    edx
c00222ec:	01 e9                	add    ecx,ebp
c00222ee:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c00222f1:	eb dc                	jmp    c00222cf <SoundDevice::getAudio(int, float*, float*)+0x5d>
c00222f3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00222f7:	45                   	inc    ebp
c00222f8:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c00222fc:	46                   	inc    esi
c00222fd:	83 fe 20             	cmp    esi,0x20
c0022300:	75 9d                	jne    c002229f <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022306:	83 c4 1c             	add    esp,0x1c
c0022309:	5b                   	pop    ebx
c002230a:	5e                   	pop    esi
c002230b:	5f                   	pop    edi
c002230c:	5d                   	pop    ebp
c002230d:	c3                   	ret    

c002230e <PCI::open(int, int, void*)>:
c002230e:	83 ec 18             	sub    esp,0x18
c0022311:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022315:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022319:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002231f:	8b 10                	mov    edx,DWORD PTR [eax]
c0022321:	50                   	push   eax
c0022322:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022325:	31 c0                	xor    eax,eax
c0022327:	83 c4 1c             	add    esp,0x1c
c002232a:	c3                   	ret    
c002232b:	90                   	nop

c002232c <PCI::close(int, int, void*)>:
c002232c:	31 c0                	xor    eax,eax
c002232e:	c3                   	ret    
c002232f:	90                   	nop

c0022330 <PCI::PCI()>:
c0022330:	83 ec 0c             	sub    esp,0xc
c0022333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022337:	83 ec 08             	sub    esp,0x8
c002233a:	68 58 bf 02 c0       	push   0xc002bf58
c002233f:	50                   	push   eax
c0022340:	e8 fd 0f ff ff       	call   c0013342 <Bus::Bus(char const*)>
c0022345:	83 c4 10             	add    esp,0x10
c0022348:	ba 44 c0 02 c0       	mov    edx,0xc002c044
c002234d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022351:	89 10                	mov    DWORD PTR [eax],edx
c0022353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022357:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022365:	a3 64 1c 03 c0       	mov    ds:0xc0031c64,eax
c002236a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002236e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022374:	0f b6 d0             	movzx  edx,al
c0022377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022386:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002238c:	0f b6 d0             	movzx  edx,al
c002238f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022393:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223a2:	8d 50 01             	lea    edx,[eax+0x1]
c00223a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223a9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00223af:	0f b6 d0             	movzx  edx,al
c00223b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00223ba:	83 c9 c0             	or     ecx,0xffffffc0
c00223bd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00223c1:	90                   	nop
c00223c2:	83 c4 0c             	add    esp,0xc
c00223c5:	c3                   	ret    

c00223c6 <PCI::readBAR8(unsigned int, int)>:
c00223c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223ce:	f6 c2 01             	test   dl,0x1
c00223d1:	74 07                	je     c00223da <PCI::readBAR8(unsigned int, int)+0x14>
c00223d3:	83 e2 fc             	and    edx,0xfffffffc
c00223d6:	01 c2                	add    edx,eax
c00223d8:	ec                   	in     al,dx
c00223d9:	c3                   	ret    
c00223da:	83 e2 f0             	and    edx,0xfffffff0
c00223dd:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00223e0:	c3                   	ret    
c00223e1:	90                   	nop

c00223e2 <PCI::readBAR16(unsigned int, int)>:
c00223e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223ea:	f6 c2 01             	test   dl,0x1
c00223ed:	74 08                	je     c00223f7 <PCI::readBAR16(unsigned int, int)+0x15>
c00223ef:	83 e2 fc             	and    edx,0xfffffffc
c00223f2:	01 c2                	add    edx,eax
c00223f4:	66 ed                	in     ax,dx
c00223f6:	c3                   	ret    
c00223f7:	83 e2 f0             	and    edx,0xfffffff0
c00223fa:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00223fe:	c3                   	ret    
c00223ff:	90                   	nop

c0022400 <PCI::readBAR32(unsigned int, int)>:
c0022400:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022404:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022408:	f6 c2 01             	test   dl,0x1
c002240b:	74 07                	je     c0022414 <PCI::readBAR32(unsigned int, int)+0x14>
c002240d:	83 e2 fc             	and    edx,0xfffffffc
c0022410:	01 c2                	add    edx,eax
c0022412:	ed                   	in     eax,dx
c0022413:	c3                   	ret    
c0022414:	83 e2 f0             	and    edx,0xfffffff0
c0022417:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002241a:	c3                   	ret    
c002241b:	90                   	nop

c002241c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002241c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022424:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022428:	f6 c2 01             	test   dl,0x1
c002242b:	74 07                	je     c0022434 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002242d:	83 e2 fc             	and    edx,0xfffffffc
c0022430:	01 ca                	add    edx,ecx
c0022432:	ee                   	out    dx,al
c0022433:	c3                   	ret    
c0022434:	83 e2 f0             	and    edx,0xfffffff0
c0022437:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002243a:	c3                   	ret    
c002243b:	90                   	nop

c002243c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002243c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022440:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022444:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022448:	f6 c2 01             	test   dl,0x1
c002244b:	74 08                	je     c0022455 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002244d:	83 e2 fc             	and    edx,0xfffffffc
c0022450:	01 ca                	add    edx,ecx
c0022452:	66 ef                	out    dx,ax
c0022454:	c3                   	ret    
c0022455:	83 e2 f0             	and    edx,0xfffffff0
c0022458:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002245c:	c3                   	ret    
c002245d:	90                   	nop

c002245e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002245e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022462:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022466:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002246a:	f6 c2 01             	test   dl,0x1
c002246d:	74 07                	je     c0022476 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002246f:	83 e2 fc             	and    edx,0xfffffffc
c0022472:	01 ca                	add    edx,ecx
c0022474:	ef                   	out    dx,eax
c0022475:	c3                   	ret    
c0022476:	83 e2 f0             	and    edx,0xfffffff0
c0022479:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002247c:	c3                   	ret    
c002247d:	90                   	nop

c002247e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002247e:	55                   	push   ebp
c002247f:	57                   	push   edi
c0022480:	56                   	push   esi
c0022481:	53                   	push   ebx
c0022482:	83 ec 0c             	sub    esp,0xc
c0022485:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022489:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002248d:	89 f0                	mov    eax,esi
c002248f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022493:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022497:	3c 07                	cmp    al,0x7
c0022499:	76 10                	jbe    c00224ab <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002249b:	83 ec 0c             	sub    esp,0xc
c002249e:	68 60 bf 02 c0       	push   0xc002bf60
c00224a3:	e8 65 79 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c00224a8:	83 c4 10             	add    esp,0x10
c00224ab:	80 fb 0f             	cmp    bl,0xf
c00224ae:	76 10                	jbe    c00224c0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00224b0:	83 ec 0c             	sub    esp,0xc
c00224b3:	68 90 bf 02 c0       	push   0xc002bf90
c00224b8:	e8 50 79 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c00224bd:	83 c4 10             	add    esp,0x10
c00224c0:	8d 04 36             	lea    eax,[esi+esi*1]
c00224c3:	ba f8 0c 00 00       	mov    edx,0xcf8
c00224c8:	83 c8 f0             	or     eax,0xfffffff0
c00224cb:	ee                   	out    dx,al
c00224cc:	ba fa 0c 00 00       	mov    edx,0xcfa
c00224d1:	89 e8                	mov    eax,ebp
c00224d3:	ee                   	out    dx,al
c00224d4:	83 c4 0c             	add    esp,0xc
c00224d7:	89 d8                	mov    eax,ebx
c00224d9:	66 81 e7 fc 00       	and    di,0xfc
c00224de:	5b                   	pop    ebx
c00224df:	c1 e0 08             	shl    eax,0x8
c00224e2:	5e                   	pop    esi
c00224e3:	09 f8                	or     eax,edi
c00224e5:	5f                   	pop    edi
c00224e6:	66 0d 00 c0          	or     ax,0xc000
c00224ea:	5d                   	pop    ebp
c00224eb:	c3                   	ret    

c00224ec <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00224ec:	57                   	push   edi
c00224ed:	56                   	push   esi
c00224ee:	53                   	push   ebx
c00224ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00224f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00224f7:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00224fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022501:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022505:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022509:	83 ff 01             	cmp    edi,0x1
c002250c:	75 3e                	jne    c002254c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c002250e:	89 de                	mov    esi,ebx
c0022510:	0f b6 c0             	movzx  eax,al
c0022513:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022519:	c1 e0 10             	shl    eax,0x10
c002251c:	0f b6 c9             	movzx  ecx,cl
c002251f:	09 f0                	or     eax,esi
c0022521:	c1 e1 08             	shl    ecx,0x8
c0022524:	0f b6 d2             	movzx  edx,dl
c0022527:	09 c8                	or     eax,ecx
c0022529:	c1 e2 0b             	shl    edx,0xb
c002252c:	09 d0                	or     eax,edx
c002252e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022533:	0d 00 00 00 80       	or     eax,0x80000000
c0022538:	ef                   	out    dx,eax
c0022539:	ba fc 0c 00 00       	mov    edx,0xcfc
c002253e:	ed                   	in     eax,dx
c002253f:	83 e3 02             	and    ebx,0x2
c0022542:	0f b6 cb             	movzx  ecx,bl
c0022545:	c1 e1 03             	shl    ecx,0x3
c0022548:	d3 e8                	shr    eax,cl
c002254a:	eb 43                	jmp    c002258f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c002254c:	83 ff 02             	cmp    edi,0x2
c002254f:	75 2c                	jne    c002257d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022551:	83 ec 0c             	sub    esp,0xc
c0022554:	0f b6 c9             	movzx  ecx,cl
c0022557:	0f b6 d2             	movzx  edx,dl
c002255a:	0f b6 fb             	movzx  edi,bl
c002255d:	0f b6 c0             	movzx  eax,al
c0022560:	57                   	push   edi
c0022561:	51                   	push   ecx
c0022562:	52                   	push   edx
c0022563:	50                   	push   eax
c0022564:	56                   	push   esi
c0022565:	e8 14 ff ff ff       	call   c002247e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002256a:	89 c2                	mov    edx,eax
c002256c:	ed                   	in     eax,dx
c002256d:	83 e3 02             	and    ebx,0x2
c0022570:	83 c4 20             	add    esp,0x20
c0022573:	0f b6 cb             	movzx  ecx,bl
c0022576:	c1 e1 03             	shl    ecx,0x3
c0022579:	d3 e8                	shr    eax,cl
c002257b:	eb 12                	jmp    c002258f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c002257d:	83 ec 0c             	sub    esp,0xc
c0022580:	68 c0 bf 02 c0       	push   0xc002bfc0
c0022585:	e8 83 78 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c002258a:	83 c4 10             	add    esp,0x10
c002258d:	31 c0                	xor    eax,eax
c002258f:	5b                   	pop    ebx
c0022590:	5e                   	pop    esi
c0022591:	5f                   	pop    edi
c0022592:	c3                   	ret    
c0022593:	90                   	nop

c0022594 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022594:	83 ec 18             	sub    esp,0x18
c0022597:	6a 00                	push   0x0
c0022599:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002259e:	50                   	push   eax
c002259f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225a4:	50                   	push   eax
c00225a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225aa:	50                   	push   eax
c00225ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225af:	e8 38 ff ff ff       	call   c00224ec <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225b4:	83 c4 2c             	add    esp,0x2c
c00225b7:	c3                   	ret    

c00225b8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00225b8:	83 ec 18             	sub    esp,0x18
c00225bb:	6a 0e                	push   0xe
c00225bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225c2:	50                   	push   eax
c00225c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225c8:	50                   	push   eax
c00225c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225ce:	50                   	push   eax
c00225cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225d3:	e8 14 ff ff ff       	call   c00224ec <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225d8:	83 c4 2c             	add    esp,0x2c
c00225db:	0f b6 c0             	movzx  eax,al
c00225de:	c3                   	ret    
c00225df:	90                   	nop

c00225e0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00225e0:	55                   	push   ebp
c00225e1:	57                   	push   edi
c00225e2:	56                   	push   esi
c00225e3:	53                   	push   ebx
c00225e4:	83 ec 18             	sub    esp,0x18
c00225e7:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00225ec:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00225f1:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00225f6:	6a 0a                	push   0xa
c00225f8:	56                   	push   esi
c00225f9:	55                   	push   ebp
c00225fa:	57                   	push   edi
c00225fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00225ff:	e8 e8 fe ff ff       	call   c00224ec <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022604:	83 c4 14             	add    esp,0x14
c0022607:	89 c3                	mov    ebx,eax
c0022609:	6a 0a                	push   0xa
c002260b:	0f b6 db             	movzx  ebx,bl
c002260e:	56                   	push   esi
c002260f:	55                   	push   ebp
c0022610:	57                   	push   edi
c0022611:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022615:	e8 d2 fe ff ff       	call   c00224ec <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002261a:	83 c4 2c             	add    esp,0x2c
c002261d:	25 00 ff 00 00       	and    eax,0xff00
c0022622:	09 d8                	or     eax,ebx
c0022624:	5b                   	pop    ebx
c0022625:	5e                   	pop    esi
c0022626:	5f                   	pop    edi
c0022627:	5d                   	pop    ebp
c0022628:	c3                   	ret    
c0022629:	90                   	nop

c002262a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002262a:	83 ec 18             	sub    esp,0x18
c002262d:	6a 08                	push   0x8
c002262f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022634:	50                   	push   eax
c0022635:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002263a:	50                   	push   eax
c002263b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022640:	50                   	push   eax
c0022641:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022645:	e8 a2 fe ff ff       	call   c00224ec <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002264a:	83 c4 2c             	add    esp,0x2c
c002264d:	0f b6 c4             	movzx  eax,ah
c0022650:	c3                   	ret    
c0022651:	90                   	nop

c0022652 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022652:	83 ec 18             	sub    esp,0x18
c0022655:	6a 08                	push   0x8
c0022657:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002265c:	50                   	push   eax
c002265d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022662:	50                   	push   eax
c0022663:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022668:	50                   	push   eax
c0022669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002266d:	e8 7a fe ff ff       	call   c00224ec <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022672:	83 c4 2c             	add    esp,0x2c
c0022675:	c3                   	ret    

c0022676 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022676:	83 ec 18             	sub    esp,0x18
c0022679:	6a 3c                	push   0x3c
c002267b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022680:	50                   	push   eax
c0022681:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022686:	50                   	push   eax
c0022687:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002268c:	50                   	push   eax
c002268d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022691:	e8 56 fe ff ff       	call   c00224ec <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022696:	83 c4 2c             	add    esp,0x2c
c0022699:	c3                   	ret    

c002269a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002269a:	83 ec 18             	sub    esp,0x18
c002269d:	6a 18                	push   0x18
c002269f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226a4:	50                   	push   eax
c00226a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226aa:	50                   	push   eax
c00226ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226b0:	50                   	push   eax
c00226b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226b5:	e8 32 fe ff ff       	call   c00224ec <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226ba:	83 c4 2c             	add    esp,0x2c
c00226bd:	0f b6 c4             	movzx  eax,ah
c00226c0:	c3                   	ret    
c00226c1:	90                   	nop

c00226c2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00226c2:	55                   	push   ebp
c00226c3:	57                   	push   edi
c00226c4:	56                   	push   esi
c00226c5:	53                   	push   ebx
c00226c6:	83 ec 28             	sub    esp,0x28
c00226c9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00226cd:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00226d2:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00226d7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00226dc:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00226e3:	8d 43 12             	lea    eax,[ebx+0x12]
c00226e6:	83 c3 10             	add    ebx,0x10
c00226e9:	0f b6 c0             	movzx  eax,al
c00226ec:	0f b6 db             	movzx  ebx,bl
c00226ef:	50                   	push   eax
c00226f0:	51                   	push   ecx
c00226f1:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00226f5:	57                   	push   edi
c00226f6:	55                   	push   ebp
c00226f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00226fb:	e8 ec fd ff ff       	call   c00224ec <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022700:	83 c4 14             	add    esp,0x14
c0022703:	89 c6                	mov    esi,eax
c0022705:	53                   	push   ebx
c0022706:	c1 e6 10             	shl    esi,0x10
c0022709:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002270d:	51                   	push   ecx
c002270e:	57                   	push   edi
c002270f:	55                   	push   ebp
c0022710:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022714:	e8 d3 fd ff ff       	call   c00224ec <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022719:	83 c4 3c             	add    esp,0x3c
c002271c:	0f b7 c0             	movzx  eax,ax
c002271f:	5b                   	pop    ebx
c0022720:	09 f0                	or     eax,esi
c0022722:	5e                   	pop    esi
c0022723:	5f                   	pop    edi
c0022724:	5d                   	pop    ebp
c0022725:	c3                   	ret    

c0022726 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022726:	55                   	push   ebp
c0022727:	57                   	push   edi
c0022728:	56                   	push   esi
c0022729:	53                   	push   ebx
c002272a:	83 ec 0c             	sub    esp,0xc
c002272d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022731:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022735:	89 f5                	mov    ebp,esi
c0022737:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002273d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022741:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022745:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022749:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002274d:	83 f9 01             	cmp    ecx,0x1
c0022750:	75 5d                	jne    c00227af <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022752:	0f b6 c8             	movzx  ecx,al
c0022755:	0f b6 d2             	movzx  edx,dl
c0022758:	c1 e1 10             	shl    ecx,0x10
c002275b:	c1 e2 0b             	shl    edx,0xb
c002275e:	89 f0                	mov    eax,esi
c0022760:	25 fc 00 00 00       	and    eax,0xfc
c0022765:	09 c1                	or     ecx,eax
c0022767:	89 e8                	mov    eax,ebp
c0022769:	0f b6 c0             	movzx  eax,al
c002276c:	c1 e0 08             	shl    eax,0x8
c002276f:	09 c1                	or     ecx,eax
c0022771:	09 d1                	or     ecx,edx
c0022773:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022778:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002277e:	89 c8                	mov    eax,ecx
c0022780:	ef                   	out    dx,eax
c0022781:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022786:	ed                   	in     eax,dx
c0022787:	0f b7 db             	movzx  ebx,bx
c002278a:	83 e6 02             	and    esi,0x2
c002278d:	74 0a                	je     c0022799 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002278f:	0f b7 d0             	movzx  edx,ax
c0022792:	c1 e3 10             	shl    ebx,0x10
c0022795:	09 d3                	or     ebx,edx
c0022797:	eb 05                	jmp    c002279e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022799:	66 31 c0             	xor    ax,ax
c002279c:	09 c3                	or     ebx,eax
c002279e:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227a3:	89 c8                	mov    eax,ecx
c00227a5:	ef                   	out    dx,eax
c00227a6:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227ab:	89 d8                	mov    eax,ebx
c00227ad:	eb 41                	jmp    c00227f0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00227af:	83 f9 02             	cmp    ecx,0x2
c00227b2:	75 45                	jne    c00227f9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00227b4:	83 ec 0c             	sub    esp,0xc
c00227b7:	0f b6 d2             	movzx  edx,dl
c00227ba:	89 f1                	mov    ecx,esi
c00227bc:	0f b6 c0             	movzx  eax,al
c00227bf:	0f b6 f1             	movzx  esi,cl
c00227c2:	89 e9                	mov    ecx,ebp
c00227c4:	56                   	push   esi
c00227c5:	0f b6 c9             	movzx  ecx,cl
c00227c8:	51                   	push   ecx
c00227c9:	52                   	push   edx
c00227ca:	50                   	push   eax
c00227cb:	57                   	push   edi
c00227cc:	e8 ad fc ff ff       	call   c002247e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227d1:	89 c2                	mov    edx,eax
c00227d3:	ed                   	in     eax,dx
c00227d4:	83 c4 20             	add    esp,0x20
c00227d7:	0f b7 db             	movzx  ebx,bx
c00227da:	f6 c2 02             	test   dl,0x2
c00227dd:	74 0c                	je     c00227eb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00227df:	0f b7 c8             	movzx  ecx,ax
c00227e2:	89 d8                	mov    eax,ebx
c00227e4:	c1 e0 10             	shl    eax,0x10
c00227e7:	09 c8                	or     eax,ecx
c00227e9:	eb 05                	jmp    c00227f0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00227eb:	66 31 c0             	xor    ax,ax
c00227ee:	09 d8                	or     eax,ebx
c00227f0:	ef                   	out    dx,eax
c00227f1:	83 c4 0c             	add    esp,0xc
c00227f4:	5b                   	pop    ebx
c00227f5:	5e                   	pop    esi
c00227f6:	5f                   	pop    edi
c00227f7:	5d                   	pop    ebp
c00227f8:	c3                   	ret    
c00227f9:	c7 44 24 20 c0 bf 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bfc0
c0022801:	83 c4 0c             	add    esp,0xc
c0022804:	5b                   	pop    ebx
c0022805:	5e                   	pop    esi
c0022806:	5f                   	pop    edi
c0022807:	5d                   	pop    ebp
c0022808:	e9 00 76 ff ff       	jmp    c0019e0d <Krnl::panic(char const*)>
c002280d:	90                   	nop

c002280e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002280e:	55                   	push   ebp
c002280f:	57                   	push   edi
c0022810:	56                   	push   esi
c0022811:	53                   	push   ebx
c0022812:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022818:	80 3d 70 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c70,0x0
c002281f:	0f 85 84 00 00 00    	jne    c00228a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022825:	83 ec 0c             	sub    esp,0xc
c0022828:	68 14 01 00 00       	push   0x114
c002282d:	e8 67 cd fe ff       	call   c000f599 <malloc>
c0022832:	83 c4 0c             	add    esp,0xc
c0022835:	89 c3                	mov    ebx,eax
c0022837:	ff 35 70 0e 03 c0    	push   DWORD PTR ds:0xc0030e70
c002283d:	68 c6 bf 02 c0       	push   0xc002bfc6
c0022842:	50                   	push   eax
c0022843:	e8 b8 03 ff ff       	call   c0012c00 <File::File(char const*, Process*)>
c0022848:	5a                   	pop    edx
c0022849:	59                   	pop    ecx
c002284a:	6a 01                	push   0x1
c002284c:	53                   	push   ebx
c002284d:	e8 12 04 ff ff       	call   c0012c64 <File::open(FileOpenMode)>
c0022852:	83 c4 0c             	add    esp,0xc
c0022855:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022859:	50                   	push   eax
c002285a:	8d 44 24 28          	lea    eax,[esp+0x28]
c002285e:	50                   	push   eax
c002285f:	53                   	push   ebx
c0022860:	e8 ab 06 ff ff       	call   c0012f10 <File::stat(unsigned long long*, bool*)>
c0022865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022869:	40                   	inc    eax
c002286a:	89 04 24             	mov    DWORD PTR [esp],eax
c002286d:	e8 27 cd fe ff       	call   c000f599 <malloc>
c0022872:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022876:	a3 6c 1c 03 c0       	mov    ds:0xc0031c6c,eax
c002287b:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002287f:	5e                   	pop    esi
c0022880:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022882:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022886:	51                   	push   ecx
c0022887:	50                   	push   eax
c0022888:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002288c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022890:	53                   	push   ebx
c0022891:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022894:	83 c4 14             	add    esp,0x14
c0022897:	53                   	push   ebx
c0022898:	e8 25 04 ff ff       	call   c0012cc2 <File::close()>
c002289d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00228a1:	83 c4 10             	add    esp,0x10
c00228a4:	a3 68 1c 03 c0       	mov    ds:0xc0031c68,eax
c00228a9:	a1 68 1c 03 c0       	mov    eax,ds:0xc0031c68
c00228ae:	8b 15 6c 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c6c
c00228b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00228b7:	31 ff                	xor    edi,edi
c00228b9:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00228c1:	31 f6                	xor    esi,esi
c00228c3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00228c8:	31 db                	xor    ebx,ebx
c00228ca:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00228d2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00228d7:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00228de:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00228e2:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00228e9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00228ed:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00228f0:	0f 8e 6b 01 00 00    	jle    c0022a61 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c00228f6:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00228f9:	d4 40                	aam    0x40
c00228fb:	d5 39                	aad    0x39
c00228fd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022901:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022905:	d4 40                	aam    0x40
c0022907:	d5 39                	aad    0x39
c0022909:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002290d:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022911:	d4 40                	aam    0x40
c0022913:	d5 39                	aad    0x39
c0022915:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022919:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c002291d:	d4 40                	aam    0x40
c002291f:	d5 39                	aad    0x39
c0022921:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022925:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022929:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002292d:	3c 56                	cmp    al,0x56
c002292f:	74 45                	je     c0022976 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022931:	d4 40                	aam    0x40
c0022933:	d5 39                	aad    0x39
c0022935:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022938:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c002293c:	0f b6 c9             	movzx  ecx,cl
c002293f:	c1 e1 04             	shl    ecx,0x4
c0022942:	d4 40                	aam    0x40
c0022944:	d5 39                	aad    0x39
c0022946:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022949:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c002294d:	0f b6 db             	movzx  ebx,bl
c0022950:	09 cb                	or     ebx,ecx
c0022952:	c1 e3 04             	shl    ebx,0x4
c0022955:	d4 40                	aam    0x40
c0022957:	d5 39                	aad    0x39
c0022959:	8d 48 d0             	lea    ecx,[eax-0x30]
c002295c:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022960:	0f b6 c9             	movzx  ecx,cl
c0022963:	09 cb                	or     ebx,ecx
c0022965:	c1 e3 04             	shl    ebx,0x4
c0022968:	89 d9                	mov    ecx,ebx
c002296a:	d4 40                	aam    0x40
c002296c:	d5 39                	aad    0x39
c002296e:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022971:	0f b6 db             	movzx  ebx,bl
c0022974:	09 cb                	or     ebx,ecx
c0022976:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c002297a:	80 f9 44             	cmp    cl,0x44
c002297d:	74 47                	je     c00229c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c002297f:	88 c8                	mov    al,cl
c0022981:	d4 40                	aam    0x40
c0022983:	d5 39                	aad    0x39
c0022985:	83 e8 30             	sub    eax,0x30
c0022988:	0f b6 e8             	movzx  ebp,al
c002298b:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c002298f:	c1 e5 04             	shl    ebp,0x4
c0022992:	d4 40                	aam    0x40
c0022994:	d5 39                	aad    0x39
c0022996:	83 e8 30             	sub    eax,0x30
c0022999:	0f b6 f0             	movzx  esi,al
c002299c:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00229a0:	09 ee                	or     esi,ebp
c00229a2:	c1 e6 04             	shl    esi,0x4
c00229a5:	d4 40                	aam    0x40
c00229a7:	d5 39                	aad    0x39
c00229a9:	83 e8 30             	sub    eax,0x30
c00229ac:	0f b6 e8             	movzx  ebp,al
c00229af:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00229b3:	09 ee                	or     esi,ebp
c00229b5:	c1 e6 04             	shl    esi,0x4
c00229b8:	89 f5                	mov    ebp,esi
c00229ba:	d4 40                	aam    0x40
c00229bc:	d5 39                	aad    0x39
c00229be:	83 e8 30             	sub    eax,0x30
c00229c1:	0f b6 f0             	movzx  esi,al
c00229c4:	09 ee                	or     esi,ebp
c00229c6:	83 c7 10             	add    edi,0x10
c00229c9:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00229cd:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00229d0:	3c 0a                	cmp    al,0xa
c00229d2:	74 09                	je     c00229dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c00229d4:	45                   	inc    ebp
c00229d5:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00229d8:	75 16                	jne    c00229f0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c00229da:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00229dd:	3c 0a                	cmp    al,0xa
c00229df:	0f 94 c0             	sete   al
c00229e2:	0f b6 c0             	movzx  eax,al
c00229e5:	01 c7                	add    edi,eax
c00229e7:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00229ec:	75 0c                	jne    c00229fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c00229ee:	eb 15                	jmp    c0022a05 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c00229f0:	47                   	inc    edi
c00229f1:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c00229f4:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00229f8:	eb d3                	jmp    c00229cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c00229fa:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00229ff:	0f 85 e8 fe ff ff    	jne    c00228ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a05:	80 f9 44             	cmp    cl,0x44
c0022a08:	74 0b                	je     c0022a15 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022a0a:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022a0f:	0f 85 d8 fe ff ff    	jne    c00228ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a15:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022a19:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022a1d:	c1 e1 04             	shl    ecx,0x4
c0022a20:	83 e8 30             	sub    eax,0x30
c0022a23:	09 c8                	or     eax,ecx
c0022a25:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022a29:	0f 85 be fe ff ff    	jne    c00228ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a2f:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022a33:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022a37:	c1 e1 04             	shl    ecx,0x4
c0022a3a:	83 e8 30             	sub    eax,0x30
c0022a3d:	09 c8                	or     eax,ecx
c0022a3f:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022a43:	0f 85 a4 fe ff ff    	jne    c00228ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a49:	50                   	push   eax
c0022a4a:	50                   	push   eax
c0022a4b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022a4f:	50                   	push   eax
c0022a50:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022a57:	e8 b0 dd fd ff       	call   c000080c <strcpy>
c0022a5c:	83 c4 10             	add    esp,0x10
c0022a5f:	eb 15                	jmp    c0022a76 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022a61:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022a68:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022a73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022a76:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022a7d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022a83:	5b                   	pop    ebx
c0022a84:	5e                   	pop    esi
c0022a85:	5f                   	pop    edi
c0022a86:	5d                   	pop    ebp
c0022a87:	c3                   	ret    

c0022a88 <PCI::checkBus(unsigned char)>:
c0022a88:	56                   	push   esi
c0022a89:	53                   	push   ebx
c0022a8a:	31 db                	xor    ebx,ebx
c0022a8c:	51                   	push   ecx
c0022a8d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022a92:	52                   	push   edx
c0022a93:	53                   	push   ebx
c0022a94:	43                   	inc    ebx
c0022a95:	56                   	push   esi
c0022a96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a9a:	e8 37 03 00 00       	call   c0022dd6 <PCI::checkDevice(unsigned char, unsigned char)>
c0022a9f:	83 c4 10             	add    esp,0x10
c0022aa2:	83 fb 20             	cmp    ebx,0x20
c0022aa5:	75 eb                	jne    c0022a92 <PCI::checkBus(unsigned char)+0xa>
c0022aa7:	58                   	pop    eax
c0022aa8:	5b                   	pop    ebx
c0022aa9:	5e                   	pop    esi
c0022aaa:	c3                   	ret    
c0022aab:	90                   	nop

c0022aac <PCI::foundDevice(PCIDeviceInfo)>:
c0022aac:	55                   	push   ebp
c0022aad:	57                   	push   edi
c0022aae:	56                   	push   esi
c0022aaf:	53                   	push   ebx
c0022ab0:	83 ec 1c             	sub    esp,0x1c
c0022ab3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ab7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022abd:	0f 84 52 01 00 00    	je     c0022c15 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022ac3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022ac7:	66 81 f9 06 04       	cmp    cx,0x406
c0022acc:	75 2c                	jne    c0022afa <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022ace:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022ad3:	50                   	push   eax
c0022ad4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022ad9:	50                   	push   eax
c0022ada:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022adf:	50                   	push   eax
c0022ae0:	56                   	push   esi
c0022ae1:	e8 b4 fb ff ff       	call   c002269a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022ae6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022aea:	0f b6 c0             	movzx  eax,al
c0022aed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022af1:	83 c4 2c             	add    esp,0x2c
c0022af4:	5b                   	pop    ebx
c0022af5:	5e                   	pop    esi
c0022af6:	5f                   	pop    edi
c0022af7:	5d                   	pop    ebp
c0022af8:	eb 8e                	jmp    c0022a88 <PCI::checkBus(unsigned char)>
c0022afa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022afe:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022b04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b08:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022b0c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022b10:	88 d3                	mov    bl,dl
c0022b12:	85 c0                	test   eax,eax
c0022b14:	74 33                	je     c0022b49 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022b16:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022b19:	85 d2                	test   edx,edx
c0022b1b:	74 28                	je     c0022b45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b1d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022b23:	31 ef                	xor    edi,ebp
c0022b25:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022b2b:	75 18                	jne    c0022b45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b2d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022b31:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022b37:	75 0c                	jne    c0022b45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b39:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b3f:	0f 84 d0 00 00 00    	je     c0022c15 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b45:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b47:	eb c9                	jmp    c0022b12 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b49:	66 81 f9 01 06       	cmp    cx,0x601
c0022b4e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b52:	75 19                	jne    c0022b6d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b54:	83 ec 0c             	sub    esp,0xc
c0022b57:	68 64 01 00 00       	push   0x164
c0022b5c:	e8 38 ca fe ff       	call   c000f599 <malloc>
c0022b61:	89 c5                	mov    ebp,eax
c0022b63:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b66:	e8 85 0e 00 00       	call   c00239f0 <SATABus::SATABus()>
c0022b6b:	eb 1e                	jmp    c0022b8b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022b6d:	66 81 f9 01 01       	cmp    cx,0x101
c0022b72:	75 60                	jne    c0022bd4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022b74:	83 ec 0c             	sub    esp,0xc
c0022b77:	68 70 02 00 00       	push   0x270
c0022b7c:	e8 18 ca fe ff       	call   c000f599 <malloc>
c0022b81:	89 c5                	mov    ebp,eax
c0022b83:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b86:	e8 0f 03 00 00       	call   c0022e9a <IDE::IDE()>
c0022b8b:	58                   	pop    eax
c0022b8c:	5a                   	pop    edx
c0022b8d:	55                   	push   ebp
c0022b8e:	56                   	push   esi
c0022b8f:	e8 46 0f ff ff       	call   c0013ada <Device::addChild(Device*)>
c0022b94:	83 ec 1c             	sub    esp,0x1c
c0022b97:	b9 09 00 00 00       	mov    ecx,0x9
c0022b9c:	fc                   	cld    
c0022b9d:	89 e7                	mov    edi,esp
c0022b9f:	89 de                	mov    esi,ebx
c0022ba1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ba3:	55                   	push   ebp
c0022ba4:	e8 43 0e ff ff       	call   c00139ec <Device::preOpenPCI(PCIDeviceInfo)>
c0022ba9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022bac:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022bb0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022bb8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022bc0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022bc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bcb:	83 c4 4c             	add    esp,0x4c
c0022bce:	5b                   	pop    ebx
c0022bcf:	5e                   	pop    esi
c0022bd0:	5f                   	pop    edi
c0022bd1:	5d                   	pop    ebp
c0022bd2:	ff e0                	jmp    eax
c0022bd4:	83 ec 0c             	sub    esp,0xc
c0022bd7:	68 58 01 00 00       	push   0x158
c0022bdc:	e8 b8 c9 fe ff       	call   c000f599 <malloc>
c0022be1:	89 c5                	mov    ebp,eax
c0022be3:	58                   	pop    eax
c0022be4:	5a                   	pop    edx
c0022be5:	68 df bf 02 c0       	push   0xc002bfdf
c0022bea:	55                   	push   ebp
c0022beb:	e8 f4 11 ff ff       	call   c0013de4 <DriverlessDevice::DriverlessDevice(char const*)>
c0022bf0:	59                   	pop    ecx
c0022bf1:	5f                   	pop    edi
c0022bf2:	55                   	push   ebp
c0022bf3:	56                   	push   esi
c0022bf4:	e8 e1 0e ff ff       	call   c0013ada <Device::addChild(Device*)>
c0022bf9:	b9 09 00 00 00       	mov    ecx,0x9
c0022bfe:	fc                   	cld    
c0022bff:	89 df                	mov    edi,ebx
c0022c01:	89 de                	mov    esi,ebx
c0022c03:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c05:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022c09:	83 c4 2c             	add    esp,0x2c
c0022c0c:	5b                   	pop    ebx
c0022c0d:	5e                   	pop    esi
c0022c0e:	5f                   	pop    edi
c0022c0f:	5d                   	pop    ebp
c0022c10:	e9 d7 0d ff ff       	jmp    c00139ec <Device::preOpenPCI(PCIDeviceInfo)>
c0022c15:	83 c4 1c             	add    esp,0x1c
c0022c18:	5b                   	pop    ebx
c0022c19:	5e                   	pop    esi
c0022c1a:	5f                   	pop    edi
c0022c1b:	5d                   	pop    ebp
c0022c1c:	c3                   	ret    
c0022c1d:	90                   	nop

c0022c1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022c1e:	55                   	push   ebp
c0022c1f:	57                   	push   edi
c0022c20:	56                   	push   esi
c0022c21:	53                   	push   ebx
c0022c22:	83 ec 68             	sub    esp,0x68
c0022c25:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022c29:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022c30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c34:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022c3b:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022c40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c44:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022c4b:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022c50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022c54:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022c59:	6a 0c                	push   0xc
c0022c5b:	57                   	push   edi
c0022c5c:	53                   	push   ebx
c0022c5d:	56                   	push   esi
c0022c5e:	55                   	push   ebp
c0022c5f:	e8 88 f8 ff ff       	call   c00224ec <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c64:	83 c4 20             	add    esp,0x20
c0022c67:	57                   	push   edi
c0022c68:	53                   	push   ebx
c0022c69:	56                   	push   esi
c0022c6a:	55                   	push   ebp
c0022c6b:	e8 70 f9 ff ff       	call   c00225e0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022c70:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022c75:	57                   	push   edi
c0022c76:	53                   	push   ebx
c0022c77:	56                   	push   esi
c0022c78:	55                   	push   ebp
c0022c79:	e8 f8 f9 ff ff       	call   c0022676 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022c7e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022c82:	83 c4 14             	add    esp,0x14
c0022c85:	6a 3c                	push   0x3c
c0022c87:	57                   	push   edi
c0022c88:	53                   	push   ebx
c0022c89:	56                   	push   esi
c0022c8a:	55                   	push   ebp
c0022c8b:	e8 5c f8 ff ff       	call   c00224ec <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c90:	0f b6 c4             	movzx  eax,ah
c0022c93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022c97:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022c9b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022c9f:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0022ca4:	83 c4 20             	add    esp,0x20
c0022ca7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022cad:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022cb4:	74 7c                	je     c0022d32 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022cb6:	31 c0                	xor    eax,eax
c0022cb8:	8b 15 28 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d928
c0022cbe:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022cc4:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022cca:	7e 66                	jle    c0022d32 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022ccc:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022ccf:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022cd6:	39 cb                	cmp    ebx,ecx
c0022cd8:	75 55                	jne    c0022d2f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022cda:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ce1:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022ce5:	75 48                	jne    c0022d2f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022ce7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022ceb:	83 ec 0c             	sub    esp,0xc
c0022cee:	68 f9 bf 02 c0       	push   0xc002bff9
c0022cf3:	e8 a9 f9 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0022cf8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022cfc:	8b 15 28 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d928
c0022d02:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022d06:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d0c:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022d14:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022d18:	52                   	push   edx
c0022d19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d1d:	53                   	push   ebx
c0022d1e:	68 1e c0 02 c0       	push   0xc002c01e
c0022d23:	e8 79 f9 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0022d28:	83 c4 20             	add    esp,0x20
c0022d2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d2f:	40                   	inc    eax
c0022d30:	eb 86                	jmp    c0022cb8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022d32:	31 d2                	xor    edx,edx
c0022d34:	83 ec 0c             	sub    esp,0xc
c0022d37:	57                   	push   edi
c0022d38:	53                   	push   ebx
c0022d39:	56                   	push   esi
c0022d3a:	52                   	push   edx
c0022d3b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022d3f:	55                   	push   ebp
c0022d40:	e8 7d f9 ff ff       	call   c00226c2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d45:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022d49:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d4d:	42                   	inc    edx
c0022d4e:	83 c4 20             	add    esp,0x20
c0022d51:	83 fa 06             	cmp    edx,0x6
c0022d54:	75 de                	jne    c0022d34 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022d56:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022d5b:	83 ec 0c             	sub    esp,0xc
c0022d5e:	86 e0                	xchg   al,ah
c0022d60:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022d65:	6a 02                	push   0x2
c0022d67:	57                   	push   edi
c0022d68:	53                   	push   ebx
c0022d69:	56                   	push   esi
c0022d6a:	55                   	push   ebp
c0022d6b:	e8 7c f7 ff ff       	call   c00224ec <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d70:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022d75:	83 c4 20             	add    esp,0x20
c0022d78:	57                   	push   edi
c0022d79:	53                   	push   ebx
c0022d7a:	56                   	push   esi
c0022d7b:	55                   	push   ebp
c0022d7c:	e8 a9 f8 ff ff       	call   c002262a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022d81:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022d85:	57                   	push   edi
c0022d86:	53                   	push   ebx
c0022d87:	56                   	push   esi
c0022d88:	55                   	push   ebp
c0022d89:	e8 06 f8 ff ff       	call   c0022594 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d8e:	b9 09 00 00 00       	mov    ecx,0x9
c0022d93:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022d98:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022d9c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022da0:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022da4:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022da8:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022dac:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022db0:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022db4:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022db8:	83 ec 0c             	sub    esp,0xc
c0022dbb:	fc                   	cld    
c0022dbc:	89 e7                	mov    edi,esp
c0022dbe:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022dc2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022dc4:	55                   	push   ebp
c0022dc5:	e8 e2 fc ff ff       	call   c0022aac <PCI::foundDevice(PCIDeviceInfo)>
c0022dca:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022dd0:	5b                   	pop    ebx
c0022dd1:	5e                   	pop    esi
c0022dd2:	5f                   	pop    edi
c0022dd3:	5d                   	pop    ebp
c0022dd4:	c3                   	ret    
c0022dd5:	90                   	nop

c0022dd6 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022dd6:	55                   	push   ebp
c0022dd7:	57                   	push   edi
c0022dd8:	56                   	push   esi
c0022dd9:	53                   	push   ebx
c0022dda:	83 ec 0c             	sub    esp,0xc
c0022ddd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022de1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022de6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022deb:	6a 00                	push   0x0
c0022ded:	56                   	push   esi
c0022dee:	57                   	push   edi
c0022def:	55                   	push   ebp
c0022df0:	e8 9f f7 ff ff       	call   c0022594 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022df5:	6a 00                	push   0x0
c0022df7:	56                   	push   esi
c0022df8:	57                   	push   edi
c0022df9:	55                   	push   ebp
c0022dfa:	e8 1f fe ff ff       	call   c0022c1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022dff:	83 c4 20             	add    esp,0x20
c0022e02:	6a 00                	push   0x0
c0022e04:	56                   	push   esi
c0022e05:	57                   	push   edi
c0022e06:	55                   	push   ebp
c0022e07:	e8 ac f7 ff ff       	call   c00225b8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e0c:	83 c4 10             	add    esp,0x10
c0022e0f:	84 c0                	test   al,al
c0022e11:	79 27                	jns    c0022e3a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022e13:	bb 01 00 00 00       	mov    ebx,0x1
c0022e18:	53                   	push   ebx
c0022e19:	56                   	push   esi
c0022e1a:	57                   	push   edi
c0022e1b:	55                   	push   ebp
c0022e1c:	e8 73 f7 ff ff       	call   c0022594 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e21:	83 c4 10             	add    esp,0x10
c0022e24:	66 40                	inc    ax
c0022e26:	74 0c                	je     c0022e34 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022e28:	53                   	push   ebx
c0022e29:	56                   	push   esi
c0022e2a:	57                   	push   edi
c0022e2b:	55                   	push   ebp
c0022e2c:	e8 ed fd ff ff       	call   c0022c1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e31:	83 c4 10             	add    esp,0x10
c0022e34:	43                   	inc    ebx
c0022e35:	83 fb 08             	cmp    ebx,0x8
c0022e38:	75 de                	jne    c0022e18 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022e3a:	83 c4 0c             	add    esp,0xc
c0022e3d:	5b                   	pop    ebx
c0022e3e:	5e                   	pop    esi
c0022e3f:	5f                   	pop    edi
c0022e40:	5d                   	pop    ebp
c0022e41:	c3                   	ret    

c0022e42 <PCI::detect()>:
c0022e42:	56                   	push   esi
c0022e43:	53                   	push   ebx
c0022e44:	53                   	push   ebx
c0022e45:	31 db                	xor    ebx,ebx
c0022e47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e4b:	6a 00                	push   0x0
c0022e4d:	6a 00                	push   0x0
c0022e4f:	6a 00                	push   0x0
c0022e51:	56                   	push   esi
c0022e52:	e8 61 f7 ff ff       	call   c00225b8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e57:	83 c4 10             	add    esp,0x10
c0022e5a:	a8 80                	test   al,0x80
c0022e5c:	75 21                	jne    c0022e7f <PCI::detect()+0x3d>
c0022e5e:	51                   	push   ecx
c0022e5f:	51                   	push   ecx
c0022e60:	6a 00                	push   0x0
c0022e62:	56                   	push   esi
c0022e63:	e8 20 fc ff ff       	call   c0022a88 <PCI::checkBus(unsigned char)>
c0022e68:	83 c4 10             	add    esp,0x10
c0022e6b:	eb 24                	jmp    c0022e91 <PCI::detect()+0x4f>
c0022e6d:	52                   	push   edx
c0022e6e:	52                   	push   edx
c0022e6f:	53                   	push   ebx
c0022e70:	43                   	inc    ebx
c0022e71:	56                   	push   esi
c0022e72:	e8 11 fc ff ff       	call   c0022a88 <PCI::checkBus(unsigned char)>
c0022e77:	83 c4 10             	add    esp,0x10
c0022e7a:	83 fb 08             	cmp    ebx,0x8
c0022e7d:	74 12                	je     c0022e91 <PCI::detect()+0x4f>
c0022e7f:	53                   	push   ebx
c0022e80:	6a 00                	push   0x0
c0022e82:	6a 00                	push   0x0
c0022e84:	56                   	push   esi
c0022e85:	e8 0a f7 ff ff       	call   c0022594 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e8a:	83 c4 10             	add    esp,0x10
c0022e8d:	66 40                	inc    ax
c0022e8f:	74 dc                	je     c0022e6d <PCI::detect()+0x2b>
c0022e91:	58                   	pop    eax
c0022e92:	5b                   	pop    ebx
c0022e93:	5e                   	pop    esi
c0022e94:	c3                   	ret    
c0022e95:	90                   	nop

c0022e96 <IDE::close(int, int, void*)>:
c0022e96:	83 c8 ff             	or     eax,0xffffffff
c0022e99:	c3                   	ret    

c0022e9a <IDE::IDE()>:
c0022e9a:	83 ec 0c             	sub    esp,0xc
c0022e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ea1:	83 ec 08             	sub    esp,0x8
c0022ea4:	68 68 c0 02 c0       	push   0xc002c068
c0022ea9:	50                   	push   eax
c0022eaa:	e8 d9 0f ff ff       	call   c0013e88 <HardDiskController::HardDiskController(char const*)>
c0022eaf:	83 c4 10             	add    esp,0x10
c0022eb2:	ba f8 c0 02 c0       	mov    edx,0xc002c0f8
c0022eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ebb:	89 10                	mov    DWORD PTR [eax],edx
c0022ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022ec8:	90                   	nop
c0022ec9:	83 c4 0c             	add    esp,0xc
c0022ecc:	c3                   	ret    
c0022ecd:	90                   	nop

c0022ece <IDE::prepareInterrupt(unsigned char)>:
c0022ece:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022ed3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022ed7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022edf:	c3                   	ret    

c0022ee0 <selectDrive(unsigned char, unsigned char)>:
c0022ee0:	c3                   	ret    
c0022ee1:	90                   	nop

c0022ee2 <IDE::getBase(unsigned char)>:
c0022ee2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022ee7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022eeb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022ef3:	c3                   	ret    

c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022ef4:	55                   	push   ebp
c0022ef5:	57                   	push   edi
c0022ef6:	56                   	push   esi
c0022ef7:	53                   	push   ebx
c0022ef8:	83 ec 1c             	sub    esp,0x1c
c0022efb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022eff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f03:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022f06:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f0a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f0e:	80 f9 03             	cmp    cl,0x3
c0022f11:	77 51                	ja     c0022f64 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022f13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f17:	0f b6 f2             	movzx  esi,dl
c0022f1a:	0f b6 db             	movzx  ebx,bl
c0022f1d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f20:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022f24:	83 ca 80             	or     edx,0xffffff80
c0022f27:	0f b6 d2             	movzx  edx,dl
c0022f2a:	52                   	push   edx
c0022f2b:	6a 0c                	push   0xc
c0022f2d:	56                   	push   esi
c0022f2e:	57                   	push   edi
c0022f2f:	e8 c0 ff ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f34:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022f39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f3d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022f41:	ee                   	out    dx,al
c0022f42:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022f47:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022f4b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f4f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f53:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f5b:	83 c4 2c             	add    esp,0x2c
c0022f5e:	5b                   	pop    ebx
c0022f5f:	5e                   	pop    esi
c0022f60:	5f                   	pop    edi
c0022f61:	5d                   	pop    ebp
c0022f62:	eb 90                	jmp    c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f64:	80 fb 07             	cmp    bl,0x7
c0022f67:	77 12                	ja     c0022f7b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022f69:	0f b6 d2             	movzx  edx,dl
c0022f6c:	0f b6 db             	movzx  ebx,bl
c0022f6f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022f77:	89 da                	mov    edx,ebx
c0022f79:	eb 2f                	jmp    c0022faa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f7b:	80 fb 0d             	cmp    bl,0xd
c0022f7e:	77 13                	ja     c0022f93 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f80:	0f b6 d2             	movzx  edx,dl
c0022f83:	0f b6 db             	movzx  ebx,bl
c0022f86:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022f8d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022f91:	eb 17                	jmp    c0022faa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f93:	80 fb 15             	cmp    bl,0x15
c0022f96:	77 13                	ja     c0022fab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022f98:	0f b6 d2             	movzx  edx,dl
c0022f9b:	0f b6 db             	movzx  ebx,bl
c0022f9e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022fa6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022faa:	ee                   	out    dx,al
c0022fab:	83 c4 1c             	add    esp,0x1c
c0022fae:	5b                   	pop    ebx
c0022faf:	5e                   	pop    esi
c0022fb0:	5f                   	pop    edi
c0022fb1:	5d                   	pop    ebp
c0022fb2:	c3                   	ret    
c0022fb3:	90                   	nop

c0022fb4 <IDE::read(unsigned char, unsigned char)>:
c0022fb4:	55                   	push   ebp
c0022fb5:	57                   	push   edi
c0022fb6:	56                   	push   esi
c0022fb7:	53                   	push   ebx
c0022fb8:	83 ec 1c             	sub    esp,0x1c
c0022fbb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022fbf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fc3:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022fc6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022fca:	3c 03                	cmp    al,0x3
c0022fcc:	77 43                	ja     c0023011 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022fce:	0f b6 f2             	movzx  esi,dl
c0022fd1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022fd4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022fd8:	83 c8 80             	or     eax,0xffffff80
c0022fdb:	0f b6 c0             	movzx  eax,al
c0022fde:	50                   	push   eax
c0022fdf:	6a 0c                	push   0xc
c0022fe1:	56                   	push   esi
c0022fe2:	57                   	push   edi
c0022fe3:	e8 0c ff ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fe8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022fed:	0f b6 c3             	movzx  eax,bl
c0022ff0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022ff4:	ec                   	in     al,dx
c0022ff5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022ff9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022ffe:	52                   	push   edx
c0022fff:	6a 0c                	push   0xc
c0023001:	56                   	push   esi
c0023002:	57                   	push   edi
c0023003:	e8 ec fe ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023008:	83 c4 20             	add    esp,0x20
c002300b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002300f:	eb 49                	jmp    c002305a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023011:	80 fb 07             	cmp    bl,0x7
c0023014:	77 12                	ja     c0023028 <IDE::read(unsigned char, unsigned char)+0x74>
c0023016:	0f b6 d2             	movzx  edx,dl
c0023019:	0f b6 c3             	movzx  eax,bl
c002301c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023024:	89 c2                	mov    edx,eax
c0023026:	eb 31                	jmp    c0023059 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023028:	80 fb 0d             	cmp    bl,0xd
c002302b:	77 13                	ja     c0023040 <IDE::read(unsigned char, unsigned char)+0x8c>
c002302d:	0f b6 d2             	movzx  edx,dl
c0023030:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023037:	0f b6 d3             	movzx  edx,bl
c002303a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002303e:	eb 19                	jmp    c0023059 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023040:	31 c0                	xor    eax,eax
c0023042:	80 fb 15             	cmp    bl,0x15
c0023045:	77 13                	ja     c002305a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023047:	0f b6 d2             	movzx  edx,dl
c002304a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023052:	0f b6 d3             	movzx  edx,bl
c0023055:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023059:	ec                   	in     al,dx
c002305a:	83 c4 1c             	add    esp,0x1c
c002305d:	5b                   	pop    ebx
c002305e:	5e                   	pop    esi
c002305f:	5f                   	pop    edi
c0023060:	5d                   	pop    ebp
c0023061:	c3                   	ret    

c0023062 <IDE::waitInterrupt(unsigned char)>:
c0023062:	55                   	push   ebp
c0023063:	57                   	push   edi
c0023064:	56                   	push   esi
c0023065:	53                   	push   ebx
c0023066:	31 db                	xor    ebx,ebx
c0023068:	83 ec 0c             	sub    esp,0xc
c002306b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002306f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023074:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002307c:	89 e8                	mov    eax,ebp
c002307e:	84 c0                	test   al,al
c0023080:	75 34                	jne    c00230b6 <IDE::waitInterrupt(unsigned char)+0x54>
c0023082:	52                   	push   edx
c0023083:	6a 0c                	push   0xc
c0023085:	56                   	push   esi
c0023086:	57                   	push   edi
c0023087:	e8 28 ff ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c002308c:	83 c4 10             	add    esp,0x10
c002308f:	a8 01                	test   al,0x1
c0023091:	75 2b                	jne    c00230be <IDE::waitInterrupt(unsigned char)+0x5c>
c0023093:	f6 c3 04             	test   bl,0x4
c0023096:	75 16                	jne    c00230ae <IDE::waitInterrupt(unsigned char)+0x4c>
c0023098:	83 fb 32             	cmp    ebx,0x32
c002309b:	7e 11                	jle    c00230ae <IDE::waitInterrupt(unsigned char)+0x4c>
c002309d:	50                   	push   eax
c002309e:	50                   	push   eax
c002309f:	6a 00                	push   0x0
c00230a1:	68 80 96 98 00       	push   0x989680
c00230a6:	e8 c6 ab ff ff       	call   c001dc71 <nanoSleep(unsigned long long)>
c00230ab:	83 c4 10             	add    esp,0x10
c00230ae:	83 fb 3c             	cmp    ebx,0x3c
c00230b1:	74 0b                	je     c00230be <IDE::waitInterrupt(unsigned char)+0x5c>
c00230b3:	43                   	inc    ebx
c00230b4:	eb be                	jmp    c0023074 <IDE::waitInterrupt(unsigned char)+0x12>
c00230b6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00230be:	83 c4 0c             	add    esp,0xc
c00230c1:	89 e8                	mov    eax,ebp
c00230c3:	5b                   	pop    ebx
c00230c4:	5e                   	pop    esi
c00230c5:	5f                   	pop    edi
c00230c6:	5d                   	pop    ebp
c00230c7:	c3                   	ret    

c00230c8 <ideChannel0IRQHandler(regs*, void*)>:
c00230c8:	83 ec 10             	sub    esp,0x10
c00230cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230cf:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00230d6:	6a 07                	push   0x7
c00230d8:	6a 00                	push   0x0
c00230da:	50                   	push   eax
c00230db:	e8 d4 fe ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c00230e0:	83 c4 1c             	add    esp,0x1c
c00230e3:	c3                   	ret    

c00230e4 <ideChannel1IRQHandler(regs*, void*)>:
c00230e4:	83 ec 10             	sub    esp,0x10
c00230e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230eb:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00230f2:	6a 07                	push   0x7
c00230f4:	6a 01                	push   0x1
c00230f6:	50                   	push   eax
c00230f7:	e8 b8 fe ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c00230fc:	83 c4 1c             	add    esp,0x1c
c00230ff:	c3                   	ret    

c0023100 <IDE::enableIRQs(unsigned char, bool)>:
c0023100:	57                   	push   edi
c0023101:	56                   	push   esi
c0023102:	be 04 00 00 00       	mov    esi,0x4
c0023107:	53                   	push   ebx
c0023108:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002310d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023111:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023116:	0f 94 c0             	sete   al
c0023119:	d1 e0                	shl    eax,1
c002311b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023122:	0f b6 c0             	movzx  eax,al
c0023125:	50                   	push   eax
c0023126:	6a 0c                	push   0xc
c0023128:	57                   	push   edi
c0023129:	53                   	push   ebx
c002312a:	e8 c5 fd ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002312f:	83 c4 10             	add    esp,0x10
c0023132:	50                   	push   eax
c0023133:	6a 0c                	push   0xc
c0023135:	57                   	push   edi
c0023136:	53                   	push   ebx
c0023137:	e8 78 fe ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c002313c:	83 c4 10             	add    esp,0x10
c002313f:	4e                   	dec    esi
c0023140:	75 f0                	jne    c0023132 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023142:	5b                   	pop    ebx
c0023143:	5e                   	pop    esi
c0023144:	5f                   	pop    edi
c0023145:	c3                   	ret    

c0023146 <IDE::open(int, int, void*)>:
c0023146:	55                   	push   ebp
c0023147:	57                   	push   edi
c0023148:	56                   	push   esi
c0023149:	53                   	push   ebx
c002314a:	83 ec 1c             	sub    esp,0x1c
c002314d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023151:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002315a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023163:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002316a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023171:	0f 85 b0 02 00 00    	jne    c0023427 <IDE::open(int, int, void*)+0x2e1>
c0023177:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002317d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023181:	83 e0 7f             	and    eax,0x7f
c0023184:	3c 05                	cmp    al,0x5
c0023186:	74 04                	je     c002318c <IDE::open(int, int, void*)+0x46>
c0023188:	3c 0f                	cmp    al,0xf
c002318a:	75 32                	jne    c00231be <IDE::open(int, int, void*)+0x78>
c002318c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023192:	83 e0 fc             	and    eax,0xfffffffc
c0023195:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002319c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00231a2:	83 e0 fc             	and    eax,0xfffffffc
c00231a5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00231ac:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00231b2:	83 e0 fc             	and    eax,0xfffffffc
c00231b5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00231bc:	eb 14                	jmp    c00231d2 <IDE::open(int, int, void*)+0x8c>
c00231be:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00231c8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00231d2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00231d9:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00231e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00231e4:	89 c6                	mov    esi,eax
c00231e6:	bf f8 0c 00 00       	mov    edi,0xcf8
c00231eb:	c1 e6 10             	shl    esi,0x10
c00231ee:	89 e8                	mov    eax,ebp
c00231f0:	89 fa                	mov    edx,edi
c00231f2:	c1 e0 0b             	shl    eax,0xb
c00231f5:	09 f0                	or     eax,esi
c00231f7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00231fe:	c1 e6 08             	shl    esi,0x8
c0023201:	09 c6                	or     esi,eax
c0023203:	89 f0                	mov    eax,esi
c0023205:	0d 08 00 00 80       	or     eax,0x80000008
c002320a:	ef                   	out    dx,eax
c002320b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023210:	89 ca                	mov    edx,ecx
c0023212:	ed                   	in     eax,dx
c0023213:	c1 e8 10             	shr    eax,0x10
c0023216:	3d ff ff 00 00       	cmp    eax,0xffff
c002321b:	0f 84 f5 00 00 00    	je     c0023316 <IDE::open(int, int, void*)+0x1d0>
c0023221:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023227:	89 fa                	mov    edx,edi
c0023229:	89 f0                	mov    eax,esi
c002322b:	ef                   	out    dx,eax
c002322c:	b0 fe                	mov    al,0xfe
c002322e:	89 ca                	mov    edx,ecx
c0023230:	ee                   	out    dx,al
c0023231:	89 f0                	mov    eax,esi
c0023233:	89 fa                	mov    edx,edi
c0023235:	ef                   	out    dx,eax
c0023236:	89 ca                	mov    edx,ecx
c0023238:	ed                   	in     eax,dx
c0023239:	3c fe                	cmp    al,0xfe
c002323b:	0f 85 a9 00 00 00    	jne    c00232ea <IDE::open(int, int, void*)+0x1a4>
c0023241:	8b 15 28 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d928
c0023247:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002324e:	74 33                	je     c0023283 <IDE::open(int, int, void*)+0x13d>
c0023250:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023256:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002325a:	40                   	inc    eax
c002325b:	83 ec 0c             	sub    esp,0xc
c002325e:	0f b6 c0             	movzx  eax,al
c0023261:	50                   	push   eax
c0023262:	55                   	push   ebp
c0023263:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023267:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002326d:	51                   	push   ecx
c002326e:	e8 53 48 ff ff       	call   c0017ac6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023273:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023278:	83 c4 1c             	add    esp,0x1c
c002327b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023281:	eb 0a                	jmp    c002328d <IDE::open(int, int, void*)+0x147>
c0023283:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002328d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023294:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002329b:	c1 e1 10             	shl    ecx,0x10
c002329e:	c1 e0 08             	shl    eax,0x8
c00232a1:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232a6:	09 c1                	or     ecx,eax
c00232a8:	89 fa                	mov    edx,edi
c00232aa:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00232b1:	c1 e0 0b             	shl    eax,0xb
c00232b4:	09 c1                	or     ecx,eax
c00232b6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00232bc:	89 c8                	mov    eax,ecx
c00232be:	ef                   	out    dx,eax
c00232bf:	be fc 0c 00 00       	mov    esi,0xcfc
c00232c4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00232ca:	89 f2                	mov    edx,esi
c00232cc:	ee                   	out    dx,al
c00232cd:	89 c8                	mov    eax,ecx
c00232cf:	89 fa                	mov    edx,edi
c00232d1:	ef                   	out    dx,eax
c00232d2:	89 f2                	mov    edx,esi
c00232d4:	ed                   	in     eax,dx
c00232d5:	0f b6 c0             	movzx  eax,al
c00232d8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00232de:	74 46                	je     c0023326 <IDE::open(int, int, void*)+0x1e0>
c00232e0:	83 ec 0c             	sub    esp,0xc
c00232e3:	68 80 c0 02 c0       	push   0xc002c080
c00232e8:	eb 34                	jmp    c002331e <IDE::open(int, int, void*)+0x1d8>
c00232ea:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00232f3:	75 17                	jne    c002330c <IDE::open(int, int, void*)+0x1c6>
c00232f5:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00232fa:	74 07                	je     c0023303 <IDE::open(int, int, void*)+0x1bd>
c00232fc:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023301:	75 09                	jne    c002330c <IDE::open(int, int, void*)+0x1c6>
c0023303:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002330a:	eb 1a                	jmp    c0023326 <IDE::open(int, int, void*)+0x1e0>
c002330c:	83 ec 0c             	sub    esp,0xc
c002330f:	68 88 c0 02 c0       	push   0xc002c088
c0023314:	eb 08                	jmp    c002331e <IDE::open(int, int, void*)+0x1d8>
c0023316:	83 ec 0c             	sub    esp,0xc
c0023319:	68 b9 c0 02 c0       	push   0xc002c0b9
c002331e:	e8 ea 6a ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0023323:	83 c4 10             	add    esp,0x10
c0023326:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002332d:	79 1a                	jns    c0023349 <IDE::open(int, int, void*)+0x203>
c002332f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023335:	83 e0 fc             	and    eax,0xfffffffc
c0023338:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002333f:	83 c0 08             	add    eax,0x8
c0023342:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023349:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002334f:	89 c2                	mov    edx,eax
c0023351:	83 e2 0f             	and    edx,0xf
c0023354:	66 83 fa 08          	cmp    dx,0x8
c0023358:	75 0a                	jne    c0023364 <IDE::open(int, int, void*)+0x21e>
c002335a:	83 e8 02             	sub    eax,0x2
c002335d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023364:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002336a:	89 c2                	mov    edx,eax
c002336c:	83 e2 0f             	and    edx,0xf
c002336f:	66 83 fa 08          	cmp    dx,0x8
c0023373:	75 0a                	jne    c002337f <IDE::open(int, int, void*)+0x239>
c0023375:	83 e8 02             	sub    eax,0x2
c0023378:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002337f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023386:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002338d:	89 d0                	mov    eax,edx
c002338f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023392:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023396:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002339a:	8d 4a 01             	lea    ecx,[edx+0x1]
c002339d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233a2:	0f b6 c9             	movzx  ecx,cl
c00233a5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00233ac:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233af:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233b3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00233b7:	8d 50 02             	lea    edx,[eax+0x2]
c00233ba:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233bf:	0f b6 d2             	movzx  edx,dl
c00233c2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00233c8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233cb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233cf:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00233d3:	8d 48 03             	lea    ecx,[eax+0x3]
c00233d6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233db:	0f b6 c9             	movzx  ecx,cl
c00233de:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00233e4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233e7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233eb:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00233ef:	8d 50 04             	lea    edx,[eax+0x4]
c00233f2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00233f8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233fd:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023404:	66 85 f6             	test   si,si
c0023407:	74 5b                	je     c0023464 <IDE::open(int, int, void*)+0x31e>
c0023409:	0f b6 d2             	movzx  edx,dl
c002340c:	83 c0 05             	add    eax,0x5
c002340f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023412:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023416:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002341a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023420:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023425:	eb 3d                	jmp    c0023464 <IDE::open(int, int, void*)+0x31e>
c0023427:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002342d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023434:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002343b:	66 05 06 02          	add    ax,0x206
c002343f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023446:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002344d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023454:	66 05 06 02          	add    ax,0x206
c0023458:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002345f:	e9 e5 fe ff ff       	jmp    c0023349 <IDE::open(int, int, void*)+0x203>
c0023464:	50                   	push   eax
c0023465:	50                   	push   eax
c0023466:	6a 00                	push   0x0
c0023468:	53                   	push   ebx
c0023469:	e8 60 fa ff ff       	call   c0022ece <IDE::prepareInterrupt(unsigned char)>
c002346e:	5a                   	pop    edx
c002346f:	59                   	pop    ecx
c0023470:	6a 01                	push   0x1
c0023472:	53                   	push   ebx
c0023473:	e8 56 fa ff ff       	call   c0022ece <IDE::prepareInterrupt(unsigned char)>
c0023478:	83 c4 0c             	add    esp,0xc
c002347b:	6a 00                	push   0x0
c002347d:	6a 00                	push   0x0
c002347f:	53                   	push   ebx
c0023480:	e8 7b fc ff ff       	call   c0023100 <IDE::enableIRQs(unsigned char, bool)>
c0023485:	83 c4 0c             	add    esp,0xc
c0023488:	6a 00                	push   0x0
c002348a:	6a 01                	push   0x1
c002348c:	53                   	push   ebx
c002348d:	e8 6e fc ff ff       	call   c0023100 <IDE::enableIRQs(unsigned char, bool)>
c0023492:	83 c4 10             	add    esp,0x10
c0023495:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002349c:	74 34                	je     c00234d2 <IDE::open(int, int, void*)+0x38c>
c002349e:	83 ec 0c             	sub    esp,0xc
c00234a1:	53                   	push   ebx
c00234a2:	6a 01                	push   0x1
c00234a4:	68 c8 30 02 c0       	push   0xc00230c8
c00234a9:	6a 0e                	push   0xe
c00234ab:	53                   	push   ebx
c00234ac:	e8 a1 05 ff ff       	call   c0013a52 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234b1:	83 c4 14             	add    esp,0x14
c00234b4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00234ba:	53                   	push   ebx
c00234bb:	6a 01                	push   0x1
c00234bd:	68 e4 30 02 c0       	push   0xc00230e4
c00234c2:	6a 0f                	push   0xf
c00234c4:	53                   	push   ebx
c00234c5:	e8 88 05 ff ff       	call   c0013a52 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234ca:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00234d0:	eb 38                	jmp    c002350a <IDE::open(int, int, void*)+0x3c4>
c00234d2:	83 ec 0c             	sub    esp,0xc
c00234d5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00234df:	53                   	push   ebx
c00234e0:	6a 00                	push   0x0
c00234e2:	68 c8 30 02 c0       	push   0xc00230c8
c00234e7:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00234ed:	53                   	push   ebx
c00234ee:	e8 5f 05 ff ff       	call   c0013a52 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234f3:	83 c4 14             	add    esp,0x14
c00234f6:	53                   	push   ebx
c00234f7:	6a 00                	push   0x0
c00234f9:	68 e4 30 02 c0       	push   0xc00230e4
c00234fe:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023504:	53                   	push   ebx
c0023505:	e8 48 05 ff ff       	call   c0013a52 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002350a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002350c:	83 c4 20             	add    esp,0x20
c002350f:	83 ec 0c             	sub    esp,0xc
c0023512:	53                   	push   ebx
c0023513:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023516:	83 c4 0c             	add    esp,0xc
c0023519:	6a 07                	push   0x7
c002351b:	6a 00                	push   0x0
c002351d:	53                   	push   ebx
c002351e:	e8 91 fa ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c0023523:	83 c4 0c             	add    esp,0xc
c0023526:	6a 07                	push   0x7
c0023528:	6a 01                	push   0x1
c002352a:	53                   	push   ebx
c002352b:	e8 84 fa ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c0023530:	83 c4 0c             	add    esp,0xc
c0023533:	6a 01                	push   0x1
c0023535:	6a 00                	push   0x0
c0023537:	53                   	push   ebx
c0023538:	e8 c3 fb ff ff       	call   c0023100 <IDE::enableIRQs(unsigned char, bool)>
c002353d:	83 c4 0c             	add    esp,0xc
c0023540:	6a 01                	push   0x1
c0023542:	6a 01                	push   0x1
c0023544:	53                   	push   ebx
c0023545:	e8 b6 fb ff ff       	call   c0023100 <IDE::enableIRQs(unsigned char, bool)>
c002354a:	83 c4 2c             	add    esp,0x2c
c002354d:	31 c0                	xor    eax,eax
c002354f:	5b                   	pop    ebx
c0023550:	5e                   	pop    esi
c0023551:	5f                   	pop    edi
c0023552:	5d                   	pop    ebp
c0023553:	c3                   	ret    

c0023554 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023554:	55                   	push   ebp
c0023555:	57                   	push   edi
c0023556:	56                   	push   esi
c0023557:	53                   	push   ebx
c0023558:	83 ec 1c             	sub    esp,0x1c
c002355b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002355f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023563:	8d 50 f8             	lea    edx,[eax-0x8]
c0023566:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002356a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002356e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023572:	80 fa 03             	cmp    dl,0x3
c0023575:	77 5d                	ja     c00235d4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023577:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002357b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002357f:	0f b6 db             	movzx  ebx,bl
c0023582:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023585:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023589:	83 ca 80             	or     edx,0xffffff80
c002358c:	0f b6 d2             	movzx  edx,dl
c002358f:	52                   	push   edx
c0023590:	6a 0c                	push   0xc
c0023592:	53                   	push   ebx
c0023593:	56                   	push   esi
c0023594:	e8 5b f9 ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023599:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002359e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235a2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00235a6:	0f b6 c0             	movzx  eax,al
c00235a9:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00235ad:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235af:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00235b4:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00235b8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00235bc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00235c0:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00235c8:	83 c4 2c             	add    esp,0x2c
c00235cb:	5b                   	pop    ebx
c00235cc:	5e                   	pop    esi
c00235cd:	5f                   	pop    edi
c00235ce:	5d                   	pop    ebp
c00235cf:	e9 20 f9 ff ff       	jmp    c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235d4:	3c 07                	cmp    al,0x7
c00235d6:	77 10                	ja     c00235e8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00235d8:	0f b6 db             	movzx  ebx,bl
c00235db:	0f b6 d0             	movzx  edx,al
c00235de:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00235e6:	eb 2d                	jmp    c0023615 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235e8:	3c 0d                	cmp    al,0xd
c00235ea:	77 13                	ja     c00235ff <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00235ec:	0f b6 db             	movzx  ebx,bl
c00235ef:	0f b6 c0             	movzx  eax,al
c00235f2:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00235f9:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00235fd:	eb 16                	jmp    c0023615 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235ff:	3c 15                	cmp    al,0x15
c0023601:	77 14                	ja     c0023617 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023603:	0f b6 db             	movzx  ebx,bl
c0023606:	0f b6 c0             	movzx  eax,al
c0023609:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023611:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023615:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023617:	83 c4 1c             	add    esp,0x1c
c002361a:	5b                   	pop    ebx
c002361b:	5e                   	pop    esi
c002361c:	5f                   	pop    edi
c002361d:	5d                   	pop    ebp
c002361e:	c3                   	ret    
c002361f:	90                   	nop

c0023620 <IDE::detect()>:
c0023620:	55                   	push   ebp
c0023621:	57                   	push   edi
c0023622:	56                   	push   esi
c0023623:	53                   	push   ebx
c0023624:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002362a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023631:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023638:	0f 85 9d 02 00 00    	jne    c00238db <IDE::detect()+0x2bb>
c002363e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023645:	31 f6                	xor    esi,esi
c0023647:	31 ed                	xor    ebp,ebp
c0023649:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023651:	89 e8                	mov    eax,ebp
c0023653:	c1 e0 06             	shl    eax,0x6
c0023656:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002365e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023662:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023666:	c1 e0 04             	shl    eax,0x4
c0023669:	83 c8 a0             	or     eax,0xffffffa0
c002366c:	0f b6 c0             	movzx  eax,al
c002366f:	50                   	push   eax
c0023670:	6a 06                	push   0x6
c0023672:	56                   	push   esi
c0023673:	53                   	push   ebx
c0023674:	e8 7b f8 ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023679:	83 c4 0c             	add    esp,0xc
c002367c:	6a 0c                	push   0xc
c002367e:	56                   	push   esi
c002367f:	53                   	push   ebx
c0023680:	e8 2f f9 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c0023685:	83 c4 0c             	add    esp,0xc
c0023688:	6a 0c                	push   0xc
c002368a:	56                   	push   esi
c002368b:	53                   	push   ebx
c002368c:	e8 23 f9 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c0023691:	83 c4 0c             	add    esp,0xc
c0023694:	6a 0c                	push   0xc
c0023696:	56                   	push   esi
c0023697:	53                   	push   ebx
c0023698:	e8 17 f9 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c002369d:	83 c4 0c             	add    esp,0xc
c00236a0:	6a 0c                	push   0xc
c00236a2:	56                   	push   esi
c00236a3:	53                   	push   ebx
c00236a4:	e8 0b f9 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c00236a9:	68 ec 00 00 00       	push   0xec
c00236ae:	6a 07                	push   0x7
c00236b0:	56                   	push   esi
c00236b1:	53                   	push   ebx
c00236b2:	e8 3d f8 ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236b7:	83 c4 1c             	add    esp,0x1c
c00236ba:	6a 0c                	push   0xc
c00236bc:	56                   	push   esi
c00236bd:	53                   	push   ebx
c00236be:	e8 f1 f8 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c00236c3:	83 c4 0c             	add    esp,0xc
c00236c6:	6a 0c                	push   0xc
c00236c8:	56                   	push   esi
c00236c9:	53                   	push   ebx
c00236ca:	e8 e5 f8 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c00236cf:	83 c4 0c             	add    esp,0xc
c00236d2:	6a 0c                	push   0xc
c00236d4:	56                   	push   esi
c00236d5:	53                   	push   ebx
c00236d6:	e8 d9 f8 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c00236db:	83 c4 0c             	add    esp,0xc
c00236de:	6a 0c                	push   0xc
c00236e0:	56                   	push   esi
c00236e1:	53                   	push   ebx
c00236e2:	e8 cd f8 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c00236e7:	83 c4 0c             	add    esp,0xc
c00236ea:	6a 0c                	push   0xc
c00236ec:	56                   	push   esi
c00236ed:	53                   	push   ebx
c00236ee:	e8 c1 f8 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c00236f3:	83 c4 10             	add    esp,0x10
c00236f6:	84 c0                	test   al,al
c00236f8:	0f 84 63 01 00 00    	je     c0023861 <IDE::detect()+0x241>
c00236fe:	31 ff                	xor    edi,edi
c0023700:	50                   	push   eax
c0023701:	6a 0c                	push   0xc
c0023703:	56                   	push   esi
c0023704:	53                   	push   ebx
c0023705:	e8 aa f8 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c002370a:	83 c4 10             	add    esp,0x10
c002370d:	a8 01                	test   al,0x1
c002370f:	0f 85 6d 01 00 00    	jne    c0023882 <IDE::detect()+0x262>
c0023715:	84 c0                	test   al,al
c0023717:	78 04                	js     c002371d <IDE::detect()+0xfd>
c0023719:	a8 08                	test   al,0x8
c002371b:	75 27                	jne    c0023744 <IDE::detect()+0x124>
c002371d:	47                   	inc    edi
c002371e:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023724:	7e da                	jle    c0023700 <IDE::detect()+0xe0>
c0023726:	50                   	push   eax
c0023727:	50                   	push   eax
c0023728:	6a 00                	push   0x0
c002372a:	68 40 4b 4c 00       	push   0x4c4b40
c002372f:	e8 3d a5 ff ff       	call   c001dc71 <nanoSleep(unsigned long long)>
c0023734:	83 c4 10             	add    esp,0x10
c0023737:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002373d:	75 c1                	jne    c0023700 <IDE::detect()+0xe0>
c002373f:	e9 3e 01 00 00       	jmp    c0023882 <IDE::detect()+0x262>
c0023744:	31 c9                	xor    ecx,ecx
c0023746:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002374a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002374e:	83 ec 0c             	sub    esp,0xc
c0023751:	68 80 00 00 00       	push   0x80
c0023756:	57                   	push   edi
c0023757:	6a 00                	push   0x0
c0023759:	56                   	push   esi
c002375a:	53                   	push   ebx
c002375b:	e8 f4 fd ff ff       	call   c0023554 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023760:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023765:	89 e8                	mov    eax,ebp
c0023767:	89 d1                	mov    ecx,edx
c0023769:	c1 e0 06             	shl    eax,0x6
c002376c:	01 d8                	add    eax,ebx
c002376e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023775:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002377c:	89 f2                	mov    edx,esi
c002377e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023784:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023788:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002378e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023792:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023799:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00237a1:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00237a8:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00237b0:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00237b6:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00237bd:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00237c3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00237c7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00237cb:	83 c4 20             	add    esp,0x20
c00237ce:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00237d1:	83 c0 02             	add    eax,0x2
c00237d4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00237da:	83 c7 02             	add    edi,0x2
c00237dd:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00237e0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00237e6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00237ea:	75 e2                	jne    c00237ce <IDE::detect()+0x1ae>
c00237ec:	89 e8                	mov    eax,ebp
c00237ee:	c1 e0 06             	shl    eax,0x6
c00237f1:	01 d8                	add    eax,ebx
c00237f3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00237f9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023800:	66 c1 ea 09          	shr    dx,0x9
c0023804:	83 e2 01             	and    edx,0x1
c0023807:	84 c9                	test   cl,cl
c0023809:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002380f:	75 22                	jne    c0023833 <IDE::detect()+0x213>
c0023811:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023818:	74 46                	je     c0023860 <IDE::detect()+0x240>
c002381a:	83 ec 0c             	sub    esp,0xc
c002381d:	68 7c 01 00 00       	push   0x17c
c0023822:	e8 72 bd fe ff       	call   c000f599 <malloc>
c0023827:	89 c7                	mov    edi,eax
c0023829:	89 04 24             	mov    DWORD PTR [esp],eax
c002382c:	e8 15 05 00 00       	call   c0023d46 <ATA::ATA()>
c0023831:	eb 17                	jmp    c002384a <IDE::detect()+0x22a>
c0023833:	83 ec 0c             	sub    esp,0xc
c0023836:	68 80 01 00 00       	push   0x180
c002383b:	e8 59 bd fe ff       	call   c000f599 <malloc>
c0023840:	89 c7                	mov    edi,eax
c0023842:	89 04 24             	mov    DWORD PTR [esp],eax
c0023845:	e8 04 0b 00 00       	call   c002434e <ATAPI::ATAPI()>
c002384a:	5a                   	pop    edx
c002384b:	59                   	pop    ecx
c002384c:	57                   	push   edi
c002384d:	53                   	push   ebx
c002384e:	e8 87 02 ff ff       	call   c0013ada <Device::addChild(Device*)>
c0023853:	8b 07                	mov    eax,DWORD PTR [edi]
c0023855:	53                   	push   ebx
c0023856:	55                   	push   ebp
c0023857:	6a 00                	push   0x0
c0023859:	57                   	push   edi
c002385a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002385d:	83 c4 20             	add    esp,0x20
c0023860:	45                   	inc    ebp
c0023861:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023866:	74 0d                	je     c0023875 <IDE::detect()+0x255>
c0023868:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023870:	e9 dc fd ff ff       	jmp    c0023651 <IDE::detect()+0x31>
c0023875:	4e                   	dec    esi
c0023876:	74 63                	je     c00238db <IDE::detect()+0x2bb>
c0023878:	be 01 00 00 00       	mov    esi,0x1
c002387d:	e9 c7 fd ff ff       	jmp    c0023649 <IDE::detect()+0x29>
c0023882:	50                   	push   eax
c0023883:	6a 04                	push   0x4
c0023885:	56                   	push   esi
c0023886:	53                   	push   ebx
c0023887:	e8 28 f7 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c002388c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023890:	83 c4 0c             	add    esp,0xc
c0023893:	6a 05                	push   0x5
c0023895:	56                   	push   esi
c0023896:	53                   	push   ebx
c0023897:	e8 18 f7 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c002389c:	83 c4 10             	add    esp,0x10
c002389f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00238a3:	80 fa 14             	cmp    dl,0x14
c00238a6:	75 04                	jne    c00238ac <IDE::detect()+0x28c>
c00238a8:	3c eb                	cmp    al,0xeb
c00238aa:	eb 07                	jmp    c00238b3 <IDE::detect()+0x293>
c00238ac:	3c 96                	cmp    al,0x96
c00238ae:	75 b1                	jne    c0023861 <IDE::detect()+0x241>
c00238b0:	80 fa 69             	cmp    dl,0x69
c00238b3:	75 ac                	jne    c0023861 <IDE::detect()+0x241>
c00238b5:	68 a1 00 00 00       	push   0xa1
c00238ba:	6a 07                	push   0x7
c00238bc:	56                   	push   esi
c00238bd:	53                   	push   ebx
c00238be:	e8 31 f6 ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238c3:	5f                   	pop    edi
c00238c4:	58                   	pop    eax
c00238c5:	6a 00                	push   0x0
c00238c7:	68 40 42 0f 00       	push   0xf4240
c00238cc:	e8 a0 a3 ff ff       	call   c001dc71 <nanoSleep(unsigned long long)>
c00238d1:	83 c4 10             	add    esp,0x10
c00238d4:	b1 01                	mov    cl,0x1
c00238d6:	e9 6b fe ff ff       	jmp    c0023746 <IDE::detect()+0x126>
c00238db:	81 c4 1c 02 00 00    	add    esp,0x21c
c00238e1:	5b                   	pop    ebx
c00238e2:	5e                   	pop    esi
c00238e3:	5f                   	pop    edi
c00238e4:	5d                   	pop    ebp
c00238e5:	c3                   	ret    

c00238e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00238e6:	55                   	push   ebp
c00238e7:	57                   	push   edi
c00238e8:	56                   	push   esi
c00238e9:	53                   	push   ebx
c00238ea:	83 ec 1c             	sub    esp,0x1c
c00238ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00238f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238f5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00238f9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00238fd:	88 c3                	mov    bl,al
c00238ff:	84 c0                	test   al,al
c0023901:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023905:	0f 84 81 00 00 00    	je     c002398c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002390b:	83 ec 0c             	sub    esp,0xc
c002390e:	68 e3 c0 02 c0       	push   0xc002c0e3
c0023913:	e8 89 ed fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0023918:	83 c4 10             	add    esp,0x10
c002391b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002391f:	3c 01                	cmp    al,0x1
c0023921:	74 63                	je     c0023986 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023923:	3c 02                	cmp    al,0x2
c0023925:	75 53                	jne    c002397a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023927:	d1 e6                	shl    esi,1
c0023929:	09 ee                	or     esi,ebp
c002392b:	50                   	push   eax
c002392c:	89 f0                	mov    eax,esi
c002392e:	6a 01                	push   0x1
c0023930:	0f b6 f0             	movzx  esi,al
c0023933:	c1 e6 06             	shl    esi,0x6
c0023936:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002393e:	50                   	push   eax
c002393f:	57                   	push   edi
c0023940:	e8 6f f6 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c0023945:	83 c4 10             	add    esp,0x10
c0023948:	a8 01                	test   al,0x1
c002394a:	74 02                	je     c002394e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c002394c:	b3 07                	mov    bl,0x7
c002394e:	a8 02                	test   al,0x2
c0023950:	74 02                	je     c0023954 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023952:	b3 03                	mov    bl,0x3
c0023954:	a8 04                	test   al,0x4
c0023956:	74 02                	je     c002395a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023958:	b3 14                	mov    bl,0x14
c002395a:	a8 08                	test   al,0x8
c002395c:	74 02                	je     c0023960 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c002395e:	b3 03                	mov    bl,0x3
c0023960:	a8 10                	test   al,0x10
c0023962:	74 02                	je     c0023966 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023964:	b3 15                	mov    bl,0x15
c0023966:	a8 20                	test   al,0x20
c0023968:	74 02                	je     c002396c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c002396a:	b3 03                	mov    bl,0x3
c002396c:	a8 40                	test   al,0x40
c002396e:	74 02                	je     c0023972 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023970:	b3 16                	mov    bl,0x16
c0023972:	84 c0                	test   al,al
c0023974:	79 16                	jns    c002398c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023976:	b3 0d                	mov    bl,0xd
c0023978:	eb 12                	jmp    c002398c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002397a:	3c 03                	cmp    al,0x3
c002397c:	74 0c                	je     c002398a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c002397e:	3c 04                	cmp    al,0x4
c0023980:	75 0a                	jne    c002398c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023982:	b3 08                	mov    bl,0x8
c0023984:	eb 06                	jmp    c002398c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023986:	b3 13                	mov    bl,0x13
c0023988:	eb 02                	jmp    c002398c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002398a:	b3 17                	mov    bl,0x17
c002398c:	83 c4 1c             	add    esp,0x1c
c002398f:	88 d8                	mov    al,bl
c0023991:	5b                   	pop    ebx
c0023992:	5e                   	pop    esi
c0023993:	5f                   	pop    edi
c0023994:	5d                   	pop    ebp
c0023995:	c3                   	ret    

c0023996 <IDE::polling(unsigned char, unsigned int)>:
c0023996:	57                   	push   edi
c0023997:	56                   	push   esi
c0023998:	53                   	push   ebx
c0023999:	bb 04 00 00 00       	mov    ebx,0x4
c002399e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00239a2:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00239a7:	52                   	push   edx
c00239a8:	6a 0c                	push   0xc
c00239aa:	56                   	push   esi
c00239ab:	57                   	push   edi
c00239ac:	e8 03 f6 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c00239b1:	83 c4 10             	add    esp,0x10
c00239b4:	4b                   	dec    ebx
c00239b5:	75 f0                	jne    c00239a7 <IDE::polling(unsigned char, unsigned int)+0x11>
c00239b7:	bb a0 86 01 00       	mov    ebx,0x186a0
c00239bc:	50                   	push   eax
c00239bd:	6a 0c                	push   0xc
c00239bf:	56                   	push   esi
c00239c0:	57                   	push   edi
c00239c1:	e8 ee f5 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c00239c6:	83 c4 10             	add    esp,0x10
c00239c9:	a8 01                	test   al,0x1
c00239cb:	75 17                	jne    c00239e4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c00239cd:	a8 20                	test   al,0x20
c00239cf:	75 0f                	jne    c00239e0 <IDE::polling(unsigned char, unsigned int)+0x4a>
c00239d1:	4b                   	dec    ebx
c00239d2:	74 10                	je     c00239e4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c00239d4:	84 c0                	test   al,al
c00239d6:	78 e4                	js     c00239bc <IDE::polling(unsigned char, unsigned int)+0x26>
c00239d8:	a8 08                	test   al,0x8
c00239da:	74 e0                	je     c00239bc <IDE::polling(unsigned char, unsigned int)+0x26>
c00239dc:	31 c0                	xor    eax,eax
c00239de:	eb 06                	jmp    c00239e6 <IDE::polling(unsigned char, unsigned int)+0x50>
c00239e0:	b0 01                	mov    al,0x1
c00239e2:	eb 02                	jmp    c00239e6 <IDE::polling(unsigned char, unsigned int)+0x50>
c00239e4:	b0 02                	mov    al,0x2
c00239e6:	5b                   	pop    ebx
c00239e7:	5e                   	pop    esi
c00239e8:	5f                   	pop    edi
c00239e9:	c3                   	ret    

c00239ea <SATABus::close(int, int, void*)>:
c00239ea:	31 c0                	xor    eax,eax
c00239ec:	c3                   	ret    
c00239ed:	90                   	nop

c00239ee <SATABus::detect()>:
c00239ee:	c3                   	ret    
c00239ef:	90                   	nop

c00239f0 <SATABus::SATABus()>:
c00239f0:	83 ec 0c             	sub    esp,0xc
c00239f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239f7:	83 ec 08             	sub    esp,0x8
c00239fa:	68 1c c1 02 c0       	push   0xc002c11c
c00239ff:	50                   	push   eax
c0023a00:	e8 83 04 ff ff       	call   c0013e88 <HardDiskController::HardDiskController(char const*)>
c0023a05:	83 c4 10             	add    esp,0x10
c0023a08:	ba 70 c1 02 c0       	mov    edx,0xc002c170
c0023a0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a11:	89 10                	mov    DWORD PTR [eax],edx
c0023a13:	83 ec 0c             	sub    esp,0xc
c0023a16:	6a 50                	push   0x50
c0023a18:	e8 4c c0 fe ff       	call   c000fa69 <Phys::allocateContiguousPages(int)>
c0023a1d:	83 c4 10             	add    esp,0x10
c0023a20:	89 c2                	mov    edx,eax
c0023a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a26:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023a2c:	83 ec 0c             	sub    esp,0xc
c0023a2f:	6a 50                	push   0x50
c0023a31:	e8 bf d7 fe ff       	call   c00111f5 <Virt::allocateKernelVirtualPages(int)>
c0023a36:	83 c4 10             	add    esp,0x10
c0023a39:	89 c2                	mov    edx,eax
c0023a3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a3f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023a45:	a1 90 da 02 c0       	mov    eax,ds:0xc002da90
c0023a4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a4e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023a54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a58:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023a5e:	83 ec 0c             	sub    esp,0xc
c0023a61:	6a 03                	push   0x3
c0023a63:	6a 50                	push   0x50
c0023a65:	51                   	push   ecx
c0023a66:	52                   	push   edx
c0023a67:	50                   	push   eax
c0023a68:	e8 3b e2 fe ff       	call   c0011ca8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023a6d:	83 c4 20             	add    esp,0x20
c0023a70:	90                   	nop
c0023a71:	83 c4 0c             	add    esp,0xc
c0023a74:	c3                   	ret    
c0023a75:	90                   	nop

c0023a76 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023a76:	83 ec 0c             	sub    esp,0xc
c0023a79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023a7d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023a80:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023a83:	09 c2                	or     edx,eax
c0023a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a89:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023a8f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023a91:	31 c0                	xor    eax,eax
c0023a93:	c1 e9 08             	shr    ecx,0x8
c0023a96:	83 e1 0f             	and    ecx,0xf
c0023a99:	39 c8                	cmp    eax,ecx
c0023a9b:	74 0a                	je     c0023aa7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023a9d:	f6 c2 01             	test   dl,0x1
c0023aa0:	74 18                	je     c0023aba <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023aa2:	d1 ea                	shr    edx,1
c0023aa4:	40                   	inc    eax
c0023aa5:	eb f2                	jmp    c0023a99 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023aa7:	83 ec 0c             	sub    esp,0xc
c0023aaa:	68 40 c1 02 c0       	push   0xc002c140
c0023aaf:	e8 59 63 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0023ab4:	83 c4 10             	add    esp,0x10
c0023ab7:	83 c8 ff             	or     eax,0xffffffff
c0023aba:	83 c4 0c             	add    esp,0xc
c0023abd:	c3                   	ret    

c0023abe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023abe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023ac2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023ac5:	89 c2                	mov    edx,eax
c0023ac7:	c1 ea 08             	shr    edx,0x8
c0023aca:	83 e2 0f             	and    edx,0xf
c0023acd:	fe ca                	dec    dl
c0023acf:	75 31                	jne    c0023b02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ad1:	83 e0 0f             	and    eax,0xf
c0023ad4:	3c 03                	cmp    al,0x3
c0023ad6:	75 2a                	jne    c0023b02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ad8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023adb:	b8 02 00 00 00       	mov    eax,0x2
c0023ae0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023ae6:	74 1c                	je     c0023b04 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023ae8:	b8 04 00 00 00       	mov    eax,0x4
c0023aed:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023af3:	74 0f                	je     c0023b04 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023af5:	31 c0                	xor    eax,eax
c0023af7:	83 fa 03             	cmp    edx,0x3
c0023afa:	0f 94 c0             	sete   al
c0023afd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023b01:	c3                   	ret    
c0023b02:	31 c0                	xor    eax,eax
c0023b04:	c3                   	ret    
c0023b05:	90                   	nop

c0023b06 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b0a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b0d:	0f ba e2 0f          	bt     edx,0xf
c0023b11:	72 f7                	jb     c0023b0a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023b13:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b16:	83 ca 10             	or     edx,0x10
c0023b19:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b1c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b1f:	83 ca 01             	or     edx,0x1
c0023b22:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b25:	c3                   	ret    

c0023b26 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b2d:	83 e2 fe             	and    edx,0xfffffffe
c0023b30:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b33:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b36:	83 e2 ef             	and    edx,0xffffffef
c0023b39:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b3c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b3f:	0f ba e2 0e          	bt     edx,0xe
c0023b43:	72 f7                	jb     c0023b3c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b45:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b48:	0f ba e2 0f          	bt     edx,0xf
c0023b4c:	72 ee                	jb     c0023b3c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b4e:	c3                   	ret    
c0023b4f:	90                   	nop

c0023b50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023b50:	55                   	push   ebp
c0023b51:	57                   	push   edi
c0023b52:	56                   	push   esi
c0023b53:	53                   	push   ebx
c0023b54:	83 ec 1c             	sub    esp,0x1c
c0023b57:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023b5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023b5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023b63:	53                   	push   ebx
c0023b64:	89 fd                	mov    ebp,edi
c0023b66:	56                   	push   esi
c0023b67:	c1 e5 0a             	shl    ebp,0xa
c0023b6a:	e8 b7 ff ff ff       	call   c0023b26 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023b6f:	83 ec 0c             	sub    esp,0xc
c0023b72:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023b78:	01 e8                	add    eax,ebp
c0023b7a:	89 03                	mov    DWORD PTR [ebx],eax
c0023b7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023b7e:	68 00 04 00 00       	push   0x400
c0023b83:	6a 00                	push   0x0
c0023b85:	50                   	push   eax
c0023b86:	e8 c5 cb fd ff       	call   c0000750 <memset>
c0023b8b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023b91:	89 fa                	mov    edx,edi
c0023b93:	01 e8                	add    eax,ebp
c0023b95:	c1 e7 0d             	shl    edi,0xd
c0023b98:	89 03                	mov    DWORD PTR [ebx],eax
c0023b9a:	c1 e2 08             	shl    edx,0x8
c0023b9d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023ba4:	81 c2 00 80 00 00    	add    edx,0x8000
c0023baa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023bae:	89 d0                	mov    eax,edx
c0023bb0:	83 c4 1c             	add    esp,0x1c
c0023bb3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023bb9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023bbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023bbf:	68 00 01 00 00       	push   0x100
c0023bc4:	6a 00                	push   0x0
c0023bc6:	50                   	push   eax
c0023bc7:	e8 84 cb fd ff       	call   c0000750 <memset>
c0023bcc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023bd0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023bd6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023bdc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023be0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023be3:	83 c4 10             	add    esp,0x10
c0023be6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023bed:	31 ff                	xor    edi,edi
c0023bef:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023bf5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023bfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023bff:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c05:	83 c5 20             	add    ebp,0x20
c0023c08:	01 f8                	add    eax,edi
c0023c0a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c0d:	52                   	push   edx
c0023c0e:	68 00 01 00 00       	push   0x100
c0023c13:	6a 00                	push   0x0
c0023c15:	50                   	push   eax
c0023c16:	e8 35 cb fd ff       	call   c0000750 <memset>
c0023c1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023c1f:	83 c4 10             	add    esp,0x10
c0023c22:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023c28:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023c2f:	01 f8                	add    eax,edi
c0023c31:	81 c7 00 01 00 00    	add    edi,0x100
c0023c37:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c3a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023c40:	75 b3                	jne    c0023bf5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023c42:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023c46:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023c4a:	83 c4 1c             	add    esp,0x1c
c0023c4d:	5b                   	pop    ebx
c0023c4e:	5e                   	pop    esi
c0023c4f:	5f                   	pop    edi
c0023c50:	5d                   	pop    ebp
c0023c51:	e9 b0 fe ff ff       	jmp    c0023b06 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023c56 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023c56:	55                   	push   ebp
c0023c57:	57                   	push   edi
c0023c58:	56                   	push   esi
c0023c59:	53                   	push   ebx
c0023c5a:	31 db                	xor    ebx,ebx
c0023c5c:	83 ec 0c             	sub    esp,0xc
c0023c5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023c63:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023c67:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023c6a:	f7 c7 01 00 00 00    	test   edi,0x1
c0023c70:	74 7a                	je     c0023cec <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023c72:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023c76:	89 d8                	mov    eax,ebx
c0023c78:	c1 e0 07             	shl    eax,0x7
c0023c7b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023c82:	55                   	push   ebp
c0023c83:	56                   	push   esi
c0023c84:	e8 35 fe ff ff       	call   c0023abe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023c89:	5a                   	pop    edx
c0023c8a:	83 f8 01             	cmp    eax,0x1
c0023c8d:	59                   	pop    ecx
c0023c8e:	75 21                	jne    c0023cb1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023c90:	50                   	push   eax
c0023c91:	53                   	push   ebx
c0023c92:	55                   	push   ebp
c0023c93:	56                   	push   esi
c0023c94:	e8 b7 fe ff ff       	call   c0023b50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023c99:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ca0:	e8 f4 b8 fe ff       	call   c000f599 <malloc>
c0023ca5:	89 c5                	mov    ebp,eax
c0023ca7:	89 04 24             	mov    DWORD PTR [esp],eax
c0023caa:	e8 03 0d 00 00       	call   c00249b2 <SATA::SATA()>
c0023caf:	eb 24                	jmp    c0023cd5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023cb1:	83 f8 04             	cmp    eax,0x4
c0023cb4:	75 36                	jne    c0023cec <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023cb6:	51                   	push   ecx
c0023cb7:	53                   	push   ebx
c0023cb8:	55                   	push   ebp
c0023cb9:	56                   	push   esi
c0023cba:	e8 91 fe ff ff       	call   c0023b50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023cbf:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023cc6:	e8 ce b8 fe ff       	call   c000f599 <malloc>
c0023ccb:	89 c5                	mov    ebp,eax
c0023ccd:	89 04 24             	mov    DWORD PTR [esp],eax
c0023cd0:	e8 53 10 00 00       	call   c0024d28 <SATAPI::SATAPI()>
c0023cd5:	58                   	pop    eax
c0023cd6:	5a                   	pop    edx
c0023cd7:	55                   	push   ebp
c0023cd8:	56                   	push   esi
c0023cd9:	e8 fc fd fe ff       	call   c0013ada <Device::addChild(Device*)>
c0023cde:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023ce1:	56                   	push   esi
c0023ce2:	6a 00                	push   0x0
c0023ce4:	53                   	push   ebx
c0023ce5:	55                   	push   ebp
c0023ce6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023ce9:	83 c4 20             	add    esp,0x20
c0023cec:	d1 ef                	shr    edi,1
c0023cee:	43                   	inc    ebx
c0023cef:	83 fb 20             	cmp    ebx,0x20
c0023cf2:	0f 85 72 ff ff ff    	jne    c0023c6a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023cf8:	83 c4 0c             	add    esp,0xc
c0023cfb:	5b                   	pop    ebx
c0023cfc:	5e                   	pop    esi
c0023cfd:	5f                   	pop    edi
c0023cfe:	5d                   	pop    ebp
c0023cff:	c3                   	ret    

c0023d00 <SATABus::open(int, int, void*)>:
c0023d00:	83 ec 14             	sub    esp,0x14
c0023d03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d07:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023d0d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023d13:	52                   	push   edx
c0023d14:	50                   	push   eax
c0023d15:	e8 3c ff ff ff       	call   c0023c56 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023d1a:	31 c0                	xor    eax,eax
c0023d1c:	83 c4 1c             	add    esp,0x1c
c0023d1f:	c3                   	ret    

c0023d20 <ATA::close(int, int, void*)>:
c0023d20:	83 ec 0c             	sub    esp,0xc
c0023d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d27:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d2d:	85 c0                	test   eax,eax
c0023d2f:	74 0c                	je     c0023d3d <ATA::close(int, int, void*)+0x1d>
c0023d31:	83 ec 0c             	sub    esp,0xc
c0023d34:	8b 10                	mov    edx,DWORD PTR [eax]
c0023d36:	50                   	push   eax
c0023d37:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d3a:	83 c4 10             	add    esp,0x10
c0023d3d:	31 c0                	xor    eax,eax
c0023d3f:	83 c4 0c             	add    esp,0xc
c0023d42:	c3                   	ret    
c0023d43:	90                   	nop

c0023d44 <ATA::powerSaving(PowerSavingLevel)>:
c0023d44:	c3                   	ret    
c0023d45:	90                   	nop

c0023d46 <ATA::ATA()>:
c0023d46:	83 ec 0c             	sub    esp,0xc
c0023d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d4d:	83 ec 04             	sub    esp,0x4
c0023d50:	68 00 02 00 00       	push   0x200
c0023d55:	68 39 c2 02 c0       	push   0xc002c239
c0023d5a:	50                   	push   eax
c0023d5b:	e8 b0 01 ff ff       	call   c0013f10 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023d60:	83 c4 10             	add    esp,0x10
c0023d63:	ba bc c1 02 c0       	mov    edx,0xc002c1bc
c0023d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d6c:	89 10                	mov    DWORD PTR [eax],edx
c0023d6e:	90                   	nop
c0023d6f:	83 c4 0c             	add    esp,0xc
c0023d72:	c3                   	ret    
c0023d73:	90                   	nop

c0023d74 <ATA::flush(bool)>:
c0023d74:	53                   	push   ebx
c0023d75:	83 ec 08             	sub    esp,0x8
c0023d78:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023d7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023d81:	19 c0                	sbb    eax,eax
c0023d83:	83 e0 fd             	and    eax,0xfffffffd
c0023d86:	05 ea 00 00 00       	add    eax,0xea
c0023d8b:	50                   	push   eax
c0023d8c:	6a 07                	push   0x7
c0023d8e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d95:	50                   	push   eax
c0023d96:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d9c:	e8 53 f1 ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023da1:	83 c4 0c             	add    esp,0xc
c0023da4:	6a 00                	push   0x0
c0023da6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dad:	50                   	push   eax
c0023dae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023db4:	e8 dd fb ff ff       	call   c0023996 <IDE::polling(unsigned char, unsigned int)>
c0023db9:	83 c4 18             	add    esp,0x18
c0023dbc:	5b                   	pop    ebx
c0023dbd:	c3                   	ret    

c0023dbe <ATA::readyForCommand()>:
c0023dbe:	56                   	push   esi
c0023dbf:	53                   	push   ebx
c0023dc0:	31 db                	xor    ebx,ebx
c0023dc2:	50                   	push   eax
c0023dc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023dc7:	50                   	push   eax
c0023dc8:	6a 0c                	push   0xc
c0023dca:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023dd1:	50                   	push   eax
c0023dd2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023dd8:	e8 d7 f1 ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c0023ddd:	83 c4 10             	add    esp,0x10
c0023de0:	a8 88                	test   al,0x88
c0023de2:	74 23                	je     c0023e07 <ATA::readyForCommand()+0x49>
c0023de4:	43                   	inc    ebx
c0023de5:	83 fb 63             	cmp    ebx,0x63
c0023de8:	7e dd                	jle    c0023dc7 <ATA::readyForCommand()+0x9>
c0023dea:	51                   	push   ecx
c0023deb:	51                   	push   ecx
c0023dec:	6a 00                	push   0x0
c0023dee:	68 40 42 0f 00       	push   0xf4240
c0023df3:	e8 79 9e ff ff       	call   c001dc71 <nanoSleep(unsigned long long)>
c0023df8:	83 c4 10             	add    esp,0x10
c0023dfb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023e01:	75 c4                	jne    c0023dc7 <ATA::readyForCommand()+0x9>
c0023e03:	31 c0                	xor    eax,eax
c0023e05:	eb 02                	jmp    c0023e09 <ATA::readyForCommand()+0x4b>
c0023e07:	b0 01                	mov    al,0x1
c0023e09:	5a                   	pop    edx
c0023e0a:	5b                   	pop    ebx
c0023e0b:	5e                   	pop    esi
c0023e0c:	c3                   	ret    
c0023e0d:	90                   	nop

c0023e0e <ATA::access(unsigned long long, int, void*, bool)>:
c0023e0e:	55                   	push   ebp
c0023e0f:	57                   	push   edi
c0023e10:	56                   	push   esi
c0023e11:	53                   	push   ebx
c0023e12:	83 ec 2c             	sub    esp,0x2c
c0023e15:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023e19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023e1d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023e21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023e25:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023e29:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023e2d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023e31:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023e37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e3b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023e41:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023e45:	c1 e0 06             	shl    eax,0x6
c0023e48:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023e50:	74 5d                	je     c0023eaf <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023e52:	89 fa                	mov    edx,edi
c0023e54:	89 f0                	mov    eax,esi
c0023e56:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023e5a:	c1 ea 1c             	shr    edx,0x1c
c0023e5d:	89 d1                	mov    ecx,edx
c0023e5f:	09 c1                	or     ecx,eax
c0023e61:	74 25                	je     c0023e88 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023e63:	31 ed                	xor    ebp,ebp
c0023e65:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023e6c:	89 fa                	mov    edx,edi
c0023e6e:	89 f0                	mov    eax,esi
c0023e70:	0f ad d0             	shrd   eax,edx,cl
c0023e73:	d3 ea                	shr    edx,cl
c0023e75:	f6 c1 20             	test   cl,0x20
c0023e78:	74 02                	je     c0023e7c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023e7a:	89 d0                	mov    eax,edx
c0023e7c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023e80:	45                   	inc    ebp
c0023e81:	83 fd 06             	cmp    ebp,0x6
c0023e84:	75 df                	jne    c0023e65 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023e86:	eb 76                	jmp    c0023efe <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023e88:	89 f0                	mov    eax,esi
c0023e8a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023e8f:	89 fa                	mov    edx,edi
c0023e91:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023e98:	0f ac d0 10          	shrd   eax,edx,0x10
c0023e9c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023ea1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023ea5:	c1 ee 18             	shr    esi,0x18
c0023ea8:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023ead:	eb 56                	jmp    c0023f05 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023eaf:	6a 00                	push   0x0
c0023eb1:	6a 3f                	push   0x3f
c0023eb3:	57                   	push   edi
c0023eb4:	56                   	push   esi
c0023eb5:	e8 2a 29 00 00       	call   c00267e4 <__umoddi3>
c0023eba:	83 c4 10             	add    esp,0x10
c0023ebd:	40                   	inc    eax
c0023ebe:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023ec2:	6a 00                	push   0x0
c0023ec4:	68 f0 03 00 00       	push   0x3f0
c0023ec9:	57                   	push   edi
c0023eca:	56                   	push   esi
c0023ecb:	e8 14 28 00 00       	call   c00266e4 <__udivdi3>
c0023ed0:	83 c4 10             	add    esp,0x10
c0023ed3:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023ed8:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023edf:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023ee4:	6a 00                	push   0x0
c0023ee6:	6a 3f                	push   0x3f
c0023ee8:	57                   	push   edi
c0023ee9:	56                   	push   esi
c0023eea:	e8 f5 27 00 00       	call   c00266e4 <__udivdi3>
c0023eef:	83 c4 10             	add    esp,0x10
c0023ef2:	89 c6                	mov    esi,eax
c0023ef4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023ef9:	83 e6 0f             	and    esi,0xf
c0023efc:	eb 07                	jmp    c0023f05 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023efe:	31 f6                	xor    esi,esi
c0023f00:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023f05:	bf 01 00 00 00       	mov    edi,0x1
c0023f0a:	50                   	push   eax
c0023f0b:	6a 00                	push   0x0
c0023f0d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f14:	50                   	push   eax
c0023f15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023f19:	e8 e2 f1 ff ff       	call   c0023100 <IDE::enableIRQs(unsigned char, bool)>
c0023f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f21:	e8 98 fe ff ff       	call   c0023dbe <ATA::readyForCommand()>
c0023f26:	83 c4 10             	add    esp,0x10
c0023f29:	84 c0                	test   al,al
c0023f2b:	0f 84 5a 02 00 00    	je     c002418b <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023f31:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023f37:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023f3d:	c1 e0 04             	shl    eax,0x4
c0023f40:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023f47:	09 c6                	or     esi,eax
c0023f49:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023f4e:	75 05                	jne    c0023f55 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023f50:	83 ce a0             	or     esi,0xffffffa0
c0023f53:	eb 03                	jmp    c0023f58 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023f55:	83 ce e0             	or     esi,0xffffffe0
c0023f58:	89 f0                	mov    eax,esi
c0023f5a:	0f b6 f0             	movzx  esi,al
c0023f5d:	56                   	push   esi
c0023f5e:	6a 06                	push   0x6
c0023f60:	51                   	push   ecx
c0023f61:	52                   	push   edx
c0023f62:	e8 8d ef ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f67:	83 c4 10             	add    esp,0x10
c0023f6a:	6a 00                	push   0x0
c0023f6c:	6a 01                	push   0x1
c0023f6e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f75:	50                   	push   eax
c0023f76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f7c:	e8 73 ef ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f81:	83 c4 10             	add    esp,0x10
c0023f84:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023f89:	75 6e                	jne    c0023ff9 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023f8b:	6a 00                	push   0x0
c0023f8d:	6a 08                	push   0x8
c0023f8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f96:	50                   	push   eax
c0023f97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f9d:	e8 52 ef ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fa2:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023fa7:	50                   	push   eax
c0023fa8:	6a 09                	push   0x9
c0023faa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fb1:	50                   	push   eax
c0023fb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fb8:	e8 37 ef ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fbd:	83 c4 20             	add    esp,0x20
c0023fc0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023fc5:	50                   	push   eax
c0023fc6:	6a 0a                	push   0xa
c0023fc8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fcf:	50                   	push   eax
c0023fd0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fd6:	e8 19 ef ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fdb:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023fe0:	50                   	push   eax
c0023fe1:	6a 0b                	push   0xb
c0023fe3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fea:	50                   	push   eax
c0023feb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ff1:	e8 fe ee ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ff6:	83 c4 20             	add    esp,0x20
c0023ff9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023ffe:	50                   	push   eax
c0023fff:	6a 02                	push   0x2
c0024001:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024008:	50                   	push   eax
c0024009:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002400f:	e8 e0 ee ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024014:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024019:	50                   	push   eax
c002401a:	6a 03                	push   0x3
c002401c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024023:	50                   	push   eax
c0024024:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002402a:	e8 c5 ee ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002402f:	83 c4 20             	add    esp,0x20
c0024032:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024037:	50                   	push   eax
c0024038:	6a 04                	push   0x4
c002403a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024041:	50                   	push   eax
c0024042:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024048:	e8 a7 ee ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002404d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024052:	50                   	push   eax
c0024053:	6a 05                	push   0x5
c0024055:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002405c:	50                   	push   eax
c002405d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024063:	e8 8c ee ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024068:	83 c4 20             	add    esp,0x20
c002406b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024070:	0f 94 c0             	sete   al
c0024073:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024078:	74 09                	je     c0024083 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002407a:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024081:	eb 07                	jmp    c002408a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024083:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002408a:	0f b6 c0             	movzx  eax,al
c002408d:	50                   	push   eax
c002408e:	6a 07                	push   0x7
c0024090:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024097:	50                   	push   eax
c0024098:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002409e:	e8 51 ee ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240a3:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00240a7:	83 c4 10             	add    esp,0x10
c00240aa:	85 f6                	test   esi,esi
c00240ac:	0f 84 ba 00 00 00    	je     c002416c <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00240b2:	50                   	push   eax
c00240b3:	6a 01                	push   0x1
c00240b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240bc:	50                   	push   eax
c00240bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240c3:	e8 ce f8 ff ff       	call   c0023996 <IDE::polling(unsigned char, unsigned int)>
c00240c8:	83 c4 10             	add    esp,0x10
c00240cb:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00240d1:	84 c0                	test   al,al
c00240d3:	74 2c                	je     c0024101 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00240d5:	0f b6 f8             	movzx  edi,al
c00240d8:	0f b6 d2             	movzx  edx,dl
c00240db:	57                   	push   edi
c00240dc:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00240e3:	50                   	push   eax
c00240e4:	52                   	push   edx
c00240e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240eb:	e8 f6 f7 ff ff       	call   c00238e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00240f0:	c7 04 24 94 c1 02 c0 	mov    DWORD PTR [esp],0xc002c194
c00240f7:	e8 a5 e5 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00240fc:	e9 87 00 00 00       	jmp    c0024188 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024101:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024106:	74 33                	je     c002413b <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024108:	31 ed                	xor    ebp,ebp
c002410a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002410e:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024112:	50                   	push   eax
c0024113:	50                   	push   eax
c0024114:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002411b:	50                   	push   eax
c002411c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024122:	e8 bb ed ff ff       	call   c0022ee2 <IDE::getBase(unsigned char)>
c0024127:	89 c2                	mov    edx,eax
c0024129:	89 f8                	mov    eax,edi
c002412b:	66 ef                	out    dx,ax
c002412d:	45                   	inc    ebp
c002412e:	83 c4 10             	add    esp,0x10
c0024131:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024137:	75 d1                	jne    c002410a <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024139:	eb 23                	jmp    c002415e <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002413b:	0f b6 d2             	movzx  edx,dl
c002413e:	51                   	push   ecx
c002413f:	51                   	push   ecx
c0024140:	52                   	push   edx
c0024141:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024147:	e8 96 ed ff ff       	call   c0022ee2 <IDE::getBase(unsigned char)>
c002414c:	b9 00 01 00 00       	mov    ecx,0x100
c0024151:	89 c2                	mov    edx,eax
c0024153:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024157:	fc                   	cld    
c0024158:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002415b:	83 c4 10             	add    esp,0x10
c002415e:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024166:	4e                   	dec    esi
c0024167:	e9 3e ff ff ff       	jmp    c00240aa <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c002416c:	31 ff                	xor    edi,edi
c002416e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024173:	74 16                	je     c002418b <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024175:	50                   	push   eax
c0024176:	50                   	push   eax
c0024177:	31 c0                	xor    eax,eax
c0024179:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002417e:	0f 94 c0             	sete   al
c0024181:	50                   	push   eax
c0024182:	53                   	push   ebx
c0024183:	e8 ec fb ff ff       	call   c0023d74 <ATA::flush(bool)>
c0024188:	83 c4 10             	add    esp,0x10
c002418b:	83 c4 2c             	add    esp,0x2c
c002418e:	89 f8                	mov    eax,edi
c0024190:	5b                   	pop    ebx
c0024191:	5e                   	pop    esi
c0024192:	5f                   	pop    edi
c0024193:	5d                   	pop    ebp
c0024194:	c3                   	ret    
c0024195:	90                   	nop

c0024196 <ATA::read(unsigned long long, int, void*)>:
c0024196:	57                   	push   edi
c0024197:	b8 04 00 00 00       	mov    eax,0x4
c002419c:	56                   	push   esi
c002419d:	53                   	push   ebx
c002419e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00241a6:	8d 7a ff             	lea    edi,[edx-0x1]
c00241a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00241ad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00241b1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00241b7:	77 25                	ja     c00241de <ATA::read(unsigned long long, int, void*)+0x48>
c00241b9:	b8 06 00 00 00       	mov    eax,0x6
c00241be:	85 f6                	test   esi,esi
c00241c0:	74 1c                	je     c00241de <ATA::read(unsigned long long, int, void*)+0x48>
c00241c2:	50                   	push   eax
c00241c3:	50                   	push   eax
c00241c4:	6a 00                	push   0x0
c00241c6:	56                   	push   esi
c00241c7:	52                   	push   edx
c00241c8:	53                   	push   ebx
c00241c9:	51                   	push   ecx
c00241ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00241ce:	e8 3b fc ff ff       	call   c0023e0e <ATA::access(unsigned long long, int, void*, bool)>
c00241d3:	83 c4 20             	add    esp,0x20
c00241d6:	85 c0                	test   eax,eax
c00241d8:	0f 95 c0             	setne  al
c00241db:	0f b6 c0             	movzx  eax,al
c00241de:	5b                   	pop    ebx
c00241df:	5e                   	pop    esi
c00241e0:	5f                   	pop    edi
c00241e1:	c3                   	ret    

c00241e2 <ATA::write(unsigned long long, int, void*)>:
c00241e2:	57                   	push   edi
c00241e3:	b8 04 00 00 00       	mov    eax,0x4
c00241e8:	56                   	push   esi
c00241e9:	53                   	push   ebx
c00241ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00241f2:	8d 7a ff             	lea    edi,[edx-0x1]
c00241f5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00241f9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00241fd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024203:	77 25                	ja     c002422a <ATA::write(unsigned long long, int, void*)+0x48>
c0024205:	b8 06 00 00 00       	mov    eax,0x6
c002420a:	85 f6                	test   esi,esi
c002420c:	74 1c                	je     c002422a <ATA::write(unsigned long long, int, void*)+0x48>
c002420e:	50                   	push   eax
c002420f:	50                   	push   eax
c0024210:	6a 01                	push   0x1
c0024212:	56                   	push   esi
c0024213:	52                   	push   edx
c0024214:	53                   	push   ebx
c0024215:	51                   	push   ecx
c0024216:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002421a:	e8 ef fb ff ff       	call   c0023e0e <ATA::access(unsigned long long, int, void*, bool)>
c002421f:	83 c4 20             	add    esp,0x20
c0024222:	85 c0                	test   eax,eax
c0024224:	0f 95 c0             	setne  al
c0024227:	0f b6 c0             	movzx  eax,al
c002422a:	5b                   	pop    ebx
c002422b:	5e                   	pop    esi
c002422c:	5f                   	pop    edi
c002422d:	c3                   	ret    

c002422e <ATA::detectCHS()>:
c002422e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024232:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024238:	c1 e0 06             	shl    eax,0x6
c002423b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024241:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002424b:	c7 44 24 04 9f c1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c19f
c0024253:	e9 b5 5b ff ff       	jmp    c0019e0d <Krnl::panic(char const*)>

c0024258 <ATA::open(int, int, void*)>:
c0024258:	53                   	push   ebx
c0024259:	83 ec 08             	sub    esp,0x8
c002425c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024260:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024264:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024268:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002426e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024274:	c1 e0 06             	shl    eax,0x6
c0024277:	01 d0                	add    eax,edx
c0024279:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024280:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024286:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002428d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024297:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002429d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00242a4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00242ab:	75 0c                	jne    c00242b9 <ATA::open(int, int, void*)+0x61>
c00242ad:	83 ec 0c             	sub    esp,0xc
c00242b0:	53                   	push   ebx
c00242b1:	e8 78 ff ff ff       	call   c002422e <ATA::detectCHS()>
c00242b6:	83 c4 10             	add    esp,0x10
c00242b9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00242bf:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00242c5:	c1 e0 06             	shl    eax,0x6
c00242c8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00242cf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00242d9:	d1 e8                	shr    eax,1
c00242db:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00242e1:	6a 04                	push   0x4
c00242e3:	6a 0c                	push   0xc
c00242e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ec:	50                   	push   eax
c00242ed:	52                   	push   edx
c00242ee:	e8 01 ec ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242f3:	90                   	nop
c00242f4:	90                   	nop
c00242f5:	6a 00                	push   0x0
c00242f7:	6a 0c                	push   0xc
c00242f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024300:	50                   	push   eax
c0024301:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024307:	e8 e8 eb ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002430c:	83 c4 14             	add    esp,0x14
c002430f:	53                   	push   ebx
c0024310:	e8 63 fc fe ff       	call   c0013f78 <PhysicalDisk::startCache()>
c0024315:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024318:	e8 dd 1e ff ff       	call   c00161fa <createPartitionsForDisk(PhysicalDisk*)>
c002431d:	31 c0                	xor    eax,eax
c002431f:	83 c4 18             	add    esp,0x18
c0024322:	5b                   	pop    ebx
c0024323:	c3                   	ret    

c0024324 <ATAPI::write(unsigned long long, int, void*)>:
c0024324:	b8 03 00 00 00       	mov    eax,0x3
c0024329:	c3                   	ret    

c002432a <ATAPI::close(int, int, void*)>:
c002432a:	83 ec 0c             	sub    esp,0xc
c002432d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024331:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024337:	85 c0                	test   eax,eax
c0024339:	74 0c                	je     c0024347 <ATAPI::close(int, int, void*)+0x1d>
c002433b:	83 ec 0c             	sub    esp,0xc
c002433e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024340:	50                   	push   eax
c0024341:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024344:	83 c4 10             	add    esp,0x10
c0024347:	31 c0                	xor    eax,eax
c0024349:	83 c4 0c             	add    esp,0xc
c002434c:	c3                   	ret    
c002434d:	90                   	nop

c002434e <ATAPI::ATAPI()>:
c002434e:	83 ec 0c             	sub    esp,0xc
c0024351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024355:	83 ec 04             	sub    esp,0x4
c0024358:	68 00 08 00 00       	push   0x800
c002435d:	68 d9 c2 02 c0       	push   0xc002c2d9
c0024362:	50                   	push   eax
c0024363:	e8 a8 fb fe ff       	call   c0013f10 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024368:	83 c4 10             	add    esp,0x10
c002436b:	ba f4 c1 02 c0       	mov    edx,0xc002c1f4
c0024370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024374:	89 10                	mov    DWORD PTR [eax],edx
c0024376:	90                   	nop
c0024377:	83 c4 0c             	add    esp,0xc
c002437a:	c3                   	ret    
c002437b:	90                   	nop

c002437c <ATAPI::readyForCommand()>:
c002437c:	56                   	push   esi
c002437d:	53                   	push   ebx
c002437e:	31 db                	xor    ebx,ebx
c0024380:	50                   	push   eax
c0024381:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024385:	50                   	push   eax
c0024386:	6a 0c                	push   0xc
c0024388:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002438f:	50                   	push   eax
c0024390:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024396:	e8 19 ec ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c002439b:	83 c4 10             	add    esp,0x10
c002439e:	a8 88                	test   al,0x88
c00243a0:	74 23                	je     c00243c5 <ATAPI::readyForCommand()+0x49>
c00243a2:	43                   	inc    ebx
c00243a3:	83 fb 63             	cmp    ebx,0x63
c00243a6:	7e dd                	jle    c0024385 <ATAPI::readyForCommand()+0x9>
c00243a8:	51                   	push   ecx
c00243a9:	51                   	push   ecx
c00243aa:	6a 00                	push   0x0
c00243ac:	68 40 42 0f 00       	push   0xf4240
c00243b1:	e8 bb 98 ff ff       	call   c001dc71 <nanoSleep(unsigned long long)>
c00243b6:	83 c4 10             	add    esp,0x10
c00243b9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00243bf:	75 c4                	jne    c0024385 <ATAPI::readyForCommand()+0x9>
c00243c1:	31 c0                	xor    eax,eax
c00243c3:	eb 02                	jmp    c00243c7 <ATAPI::readyForCommand()+0x4b>
c00243c5:	b0 01                	mov    al,0x1
c00243c7:	5a                   	pop    edx
c00243c8:	5b                   	pop    ebx
c00243c9:	5e                   	pop    esi
c00243ca:	c3                   	ret    
c00243cb:	90                   	nop

c00243cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00243cc:	55                   	push   ebp
c00243cd:	57                   	push   edi
c00243ce:	56                   	push   esi
c00243cf:	53                   	push   ebx
c00243d0:	83 ec 20             	sub    esp,0x20
c00243d3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00243d7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00243db:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00243df:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00243e3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00243e7:	6a 01                	push   0x1
c00243e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243f0:	50                   	push   eax
c00243f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243f7:	e8 04 ed ff ff       	call   c0023100 <IDE::enableIRQs(unsigned char, bool)>
c00243fc:	5e                   	pop    esi
c00243fd:	58                   	pop    eax
c00243fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024405:	50                   	push   eax
c0024406:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002440c:	e8 bd ea ff ff       	call   c0022ece <IDE::prepareInterrupt(unsigned char)>
c0024411:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024414:	e8 63 ff ff ff       	call   c002437c <ATAPI::readyForCommand()>
c0024419:	83 c4 10             	add    esp,0x10
c002441c:	84 c0                	test   al,al
c002441e:	75 0a                	jne    c002442a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024420:	bb 01 00 00 00       	mov    ebx,0x1
c0024425:	e9 57 02 00 00       	jmp    c0024681 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002442a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024430:	c1 e0 04             	shl    eax,0x4
c0024433:	0f b6 c0             	movzx  eax,al
c0024436:	50                   	push   eax
c0024437:	6a 06                	push   0x6
c0024439:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024440:	50                   	push   eax
c0024441:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024447:	e8 a8 ea ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002444c:	6a 00                	push   0x0
c002444e:	6a 01                	push   0x1
c0024450:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024457:	50                   	push   eax
c0024458:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002445e:	e8 91 ea ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024463:	83 c4 20             	add    esp,0x20
c0024466:	0f b6 c3             	movzx  eax,bl
c0024469:	0f b6 df             	movzx  ebx,bh
c002446c:	50                   	push   eax
c002446d:	6a 04                	push   0x4
c002446f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024476:	50                   	push   eax
c0024477:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002447d:	e8 72 ea ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024482:	53                   	push   ebx
c0024483:	6a 05                	push   0x5
c0024485:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002448c:	50                   	push   eax
c002448d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024493:	e8 5c ea ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024498:	83 c4 20             	add    esp,0x20
c002449b:	68 a0 00 00 00       	push   0xa0
c00244a0:	6a 07                	push   0x7
c00244a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244a9:	50                   	push   eax
c00244aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244b0:	e8 3f ea ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244b5:	83 c4 0c             	add    esp,0xc
c00244b8:	6a 01                	push   0x1
c00244ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244c1:	50                   	push   eax
c00244c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244c8:	e8 c9 f4 ff ff       	call   c0023996 <IDE::polling(unsigned char, unsigned int)>
c00244cd:	83 c4 10             	add    esp,0x10
c00244d0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00244d6:	84 c0                	test   al,al
c00244d8:	74 23                	je     c00244fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00244da:	0f b6 d8             	movzx  ebx,al
c00244dd:	0f b6 d2             	movzx  edx,dl
c00244e0:	53                   	push   ebx
c00244e1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00244e8:	50                   	push   eax
c00244e9:	52                   	push   edx
c00244ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244f0:	e8 f1 f3 ff ff       	call   c00238e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00244f5:	83 c4 10             	add    esp,0x10
c00244f8:	e9 84 01 00 00       	jmp    c0024681 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00244fd:	0f b6 d2             	movzx  edx,dl
c0024500:	53                   	push   ebx
c0024501:	53                   	push   ebx
c0024502:	52                   	push   edx
c0024503:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024509:	e8 d4 e9 ff ff       	call   c0022ee2 <IDE::getBase(unsigned char)>
c002450e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024512:	b9 06 00 00 00       	mov    ecx,0x6
c0024517:	89 c2                	mov    edx,eax
c0024519:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002451c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024520:	83 c4 10             	add    esp,0x10
c0024523:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024529:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024530:	85 db                	test   ebx,ebx
c0024532:	0f 84 ec 00 00 00    	je     c0024624 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024538:	51                   	push   ecx
c0024539:	51                   	push   ecx
c002453a:	52                   	push   edx
c002453b:	50                   	push   eax
c002453c:	e8 21 eb ff ff       	call   c0023062 <IDE::waitInterrupt(unsigned char)>
c0024541:	83 c4 10             	add    esp,0x10
c0024544:	84 c0                	test   al,al
c0024546:	0f 84 d4 fe ff ff    	je     c0024420 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002454c:	56                   	push   esi
c002454d:	56                   	push   esi
c002454e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024555:	50                   	push   eax
c0024556:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002455c:	e8 6d e9 ff ff       	call   c0022ece <IDE::prepareInterrupt(unsigned char)>
c0024561:	83 c4 0c             	add    esp,0xc
c0024564:	6a 04                	push   0x4
c0024566:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002456d:	50                   	push   eax
c002456e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024574:	e8 3b ea ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c0024579:	83 c4 0c             	add    esp,0xc
c002457c:	89 c6                	mov    esi,eax
c002457e:	6a 05                	push   0x5
c0024580:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024587:	50                   	push   eax
c0024588:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002458e:	e8 21 ea ff ff       	call   c0022fb4 <IDE::read(unsigned char, unsigned char)>
c0024593:	89 f1                	mov    ecx,esi
c0024595:	0f b6 c0             	movzx  eax,al
c0024598:	0f b6 f1             	movzx  esi,cl
c002459b:	c1 e0 08             	shl    eax,0x8
c002459e:	09 c6                	or     esi,eax
c00245a0:	d1 fe                	sar    esi,1
c00245a2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00245a6:	83 c4 10             	add    esp,0x10
c00245a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00245ae:	74 41                	je     c00245f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00245b0:	31 c9                	xor    ecx,ecx
c00245b2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00245b8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00245bf:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00245c3:	75 0a                	jne    c00245cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00245c5:	01 c9                	add    ecx,ecx
c00245c7:	01 cd                	add    ebp,ecx
c00245c9:	4b                   	dec    ebx
c00245ca:	e9 54 ff ff ff       	jmp    c0024523 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00245cf:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00245d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00245d8:	51                   	push   ecx
c00245d9:	51                   	push   ecx
c00245da:	52                   	push   edx
c00245db:	50                   	push   eax
c00245dc:	e8 01 e9 ff ff       	call   c0022ee2 <IDE::getBase(unsigned char)>
c00245e1:	89 c2                	mov    edx,eax
c00245e3:	89 f0                	mov    eax,esi
c00245e5:	66 ef                	out    dx,ax
c00245e7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00245eb:	83 c4 10             	add    esp,0x10
c00245ee:	41                   	inc    ecx
c00245ef:	eb c1                	jmp    c00245b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00245f1:	31 f6                	xor    esi,esi
c00245f3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00245f9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024600:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024604:	75 06                	jne    c002460c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024606:	01 f6                	add    esi,esi
c0024608:	01 f5                	add    ebp,esi
c002460a:	eb bd                	jmp    c00245c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002460c:	51                   	push   ecx
c002460d:	51                   	push   ecx
c002460e:	52                   	push   edx
c002460f:	50                   	push   eax
c0024610:	e8 cd e8 ff ff       	call   c0022ee2 <IDE::getBase(unsigned char)>
c0024615:	89 c2                	mov    edx,eax
c0024617:	66 ed                	in     ax,dx
c0024619:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002461e:	83 c4 10             	add    esp,0x10
c0024621:	46                   	inc    esi
c0024622:	eb cf                	jmp    c00245f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024624:	51                   	push   ecx
c0024625:	51                   	push   ecx
c0024626:	52                   	push   edx
c0024627:	50                   	push   eax
c0024628:	e8 35 ea ff ff       	call   c0023062 <IDE::waitInterrupt(unsigned char)>
c002462d:	83 c4 10             	add    esp,0x10
c0024630:	84 c0                	test   al,al
c0024632:	0f 84 e8 fd ff ff    	je     c0024420 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024638:	bb a0 86 01 00       	mov    ebx,0x186a0
c002463d:	52                   	push   edx
c002463e:	52                   	push   edx
c002463f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024646:	50                   	push   eax
c0024647:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002464d:	e8 7c e8 ff ff       	call   c0022ece <IDE::prepareInterrupt(unsigned char)>
c0024652:	83 c4 10             	add    esp,0x10
c0024655:	50                   	push   eax
c0024656:	50                   	push   eax
c0024657:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002465e:	50                   	push   eax
c002465f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024665:	e8 78 e8 ff ff       	call   c0022ee2 <IDE::getBase(unsigned char)>
c002466a:	8d 50 07             	lea    edx,[eax+0x7]
c002466d:	ec                   	in     al,dx
c002466e:	83 c4 10             	add    esp,0x10
c0024671:	a8 88                	test   al,0x88
c0024673:	74 0a                	je     c002467f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024675:	4b                   	dec    ebx
c0024676:	75 dd                	jne    c0024655 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024678:	bb 02 00 00 00       	mov    ebx,0x2
c002467d:	eb 02                	jmp    c0024681 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002467f:	31 db                	xor    ebx,ebx
c0024681:	83 c4 1c             	add    esp,0x1c
c0024684:	89 d8                	mov    eax,ebx
c0024686:	5b                   	pop    ebx
c0024687:	5e                   	pop    esi
c0024688:	5f                   	pop    edi
c0024689:	5d                   	pop    ebp
c002468a:	c3                   	ret    
c002468b:	90                   	nop

c002468c <ATAPI::diskRemoved()>:
c002468c:	83 ec 18             	sub    esp,0x18
c002468f:	68 e5 c2 02 c0       	push   0xc002c2e5
c0024694:	e8 08 e0 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0024699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002469d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00246a4:	83 c4 1c             	add    esp,0x1c
c00246a7:	c3                   	ret    

c00246a8 <ATAPI::eject()>:
c00246a8:	57                   	push   edi
c00246a9:	b9 03 00 00 00       	mov    ecx,0x3
c00246ae:	53                   	push   ebx
c00246af:	83 ec 14             	sub    esp,0x14
c00246b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00246b6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00246ba:	fc                   	cld    
c00246bb:	31 c0                	xor    eax,eax
c00246bd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00246bf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00246c4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00246c9:	50                   	push   eax
c00246ca:	50                   	push   eax
c00246cb:	6a 00                	push   0x0
c00246cd:	6a 00                	push   0x0
c00246cf:	6a 00                	push   0x0
c00246d1:	6a 02                	push   0x2
c00246d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00246d7:	50                   	push   eax
c00246d8:	53                   	push   ebx
c00246d9:	e8 ee fc ff ff       	call   c00243cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00246de:	83 c4 14             	add    esp,0x14
c00246e1:	53                   	push   ebx
c00246e2:	e8 a5 ff ff ff       	call   c002468c <ATAPI::diskRemoved()>
c00246e7:	83 c4 24             	add    esp,0x24
c00246ea:	31 c0                	xor    eax,eax
c00246ec:	5b                   	pop    ebx
c00246ed:	5f                   	pop    edi
c00246ee:	c3                   	ret    
c00246ef:	90                   	nop

c00246f0 <ATAPI::diskInserted()>:
c00246f0:	53                   	push   ebx
c00246f1:	83 ec 14             	sub    esp,0x14
c00246f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00246f8:	68 fc c2 02 c0       	push   0xc002c2fc
c00246fd:	e8 9f df fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0024702:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024709:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002470c:	e8 67 f8 fe ff       	call   c0013f78 <PhysicalDisk::startCache()>
c0024711:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024715:	83 c4 18             	add    esp,0x18
c0024718:	5b                   	pop    ebx
c0024719:	e9 dc 1a ff ff       	jmp    c00161fa <createPartitionsForDisk(PhysicalDisk*)>

c002471e <ATAPI::detectMedia()>:
c002471e:	56                   	push   esi
c002471f:	53                   	push   ebx
c0024720:	83 ec 28             	sub    esp,0x28
c0024723:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024727:	6a 0c                	push   0xc
c0024729:	6a 00                	push   0x0
c002472b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002472f:	56                   	push   esi
c0024730:	e8 1b c0 fd ff       	call   c0000750 <memset>
c0024735:	58                   	pop    eax
c0024736:	5a                   	pop    edx
c0024737:	6a 00                	push   0x0
c0024739:	6a 00                	push   0x0
c002473b:	6a 00                	push   0x0
c002473d:	6a 00                	push   0x0
c002473f:	56                   	push   esi
c0024740:	53                   	push   ebx
c0024741:	e8 86 fc ff ff       	call   c00243cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024746:	83 c4 1c             	add    esp,0x1c
c0024749:	6a 0c                	push   0xc
c002474b:	6a 00                	push   0x0
c002474d:	56                   	push   esi
c002474e:	e8 fd bf fd ff       	call   c0000750 <memset>
c0024753:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024758:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002475d:	59                   	pop    ecx
c002475e:	58                   	pop    eax
c002475f:	6a 01                	push   0x1
c0024761:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024765:	50                   	push   eax
c0024766:	6a 00                	push   0x0
c0024768:	6a 12                	push   0x12
c002476a:	56                   	push   esi
c002476b:	53                   	push   ebx
c002476c:	e8 5b fc ff ff       	call   c00243cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024771:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024775:	83 c4 20             	add    esp,0x20
c0024778:	83 e0 7f             	and    eax,0x7f
c002477b:	3c 70                	cmp    al,0x70
c002477d:	74 15                	je     c0024794 <ATAPI::detectMedia()+0x76>
c002477f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024786:	75 0c                	jne    c0024794 <ATAPI::detectMedia()+0x76>
c0024788:	83 ec 0c             	sub    esp,0xc
c002478b:	53                   	push   ebx
c002478c:	e8 5f ff ff ff       	call   c00246f0 <ATAPI::diskInserted()>
c0024791:	83 c4 10             	add    esp,0x10
c0024794:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024798:	83 e0 0f             	and    eax,0xf
c002479b:	3c 02                	cmp    al,0x2
c002479d:	75 1b                	jne    c00247ba <ATAPI::detectMedia()+0x9c>
c002479f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00247a4:	75 2d                	jne    c00247d3 <ATAPI::detectMedia()+0xb5>
c00247a6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247ad:	74 24                	je     c00247d3 <ATAPI::detectMedia()+0xb5>
c00247af:	83 ec 0c             	sub    esp,0xc
c00247b2:	53                   	push   ebx
c00247b3:	e8 d4 fe ff ff       	call   c002468c <ATAPI::diskRemoved()>
c00247b8:	eb 16                	jmp    c00247d0 <ATAPI::detectMedia()+0xb2>
c00247ba:	84 c0                	test   al,al
c00247bc:	75 15                	jne    c00247d3 <ATAPI::detectMedia()+0xb5>
c00247be:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247c5:	75 0c                	jne    c00247d3 <ATAPI::detectMedia()+0xb5>
c00247c7:	83 ec 0c             	sub    esp,0xc
c00247ca:	53                   	push   ebx
c00247cb:	e8 20 ff ff ff       	call   c00246f0 <ATAPI::diskInserted()>
c00247d0:	83 c4 10             	add    esp,0x10
c00247d3:	83 c4 24             	add    esp,0x24
c00247d6:	5b                   	pop    ebx
c00247d7:	5e                   	pop    esi
c00247d8:	c3                   	ret    
c00247d9:	90                   	nop

c00247da <ATAPI::open(int, int, void*)>:
c00247da:	53                   	push   ebx
c00247db:	83 ec 08             	sub    esp,0x8
c00247de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00247e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00247e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00247ea:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00247f0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00247f6:	c1 e0 06             	shl    eax,0x6
c00247f9:	01 d0                	add    eax,edx
c00247fb:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024802:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024808:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002480f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024819:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002481f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024826:	6a 04                	push   0x4
c0024828:	6a 0c                	push   0xc
c002482a:	51                   	push   ecx
c002482b:	52                   	push   edx
c002482c:	e8 c3 e6 ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024831:	90                   	nop
c0024832:	90                   	nop
c0024833:	6a 00                	push   0x0
c0024835:	6a 0c                	push   0xc
c0024837:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002483e:	50                   	push   eax
c002483f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024845:	e8 aa e6 ff ff       	call   c0022ef4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002484a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024851:	83 c4 14             	add    esp,0x14
c0024854:	53                   	push   ebx
c0024855:	e8 c4 fe ff ff       	call   c002471e <ATAPI::detectMedia()>
c002485a:	31 c0                	xor    eax,eax
c002485c:	83 c4 18             	add    esp,0x18
c002485f:	5b                   	pop    ebx
c0024860:	c3                   	ret    
c0024861:	90                   	nop

c0024862 <ATAPI::read(unsigned long long, int, void*)>:
c0024862:	55                   	push   ebp
c0024863:	57                   	push   edi
c0024864:	56                   	push   esi
c0024865:	53                   	push   ebx
c0024866:	83 ec 1c             	sub    esp,0x1c
c0024869:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002486d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024871:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024875:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002487c:	74 41                	je     c00248bf <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002487e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024882:	b9 03 00 00 00       	mov    ecx,0x3
c0024887:	fc                   	cld    
c0024888:	31 c0                	xor    eax,eax
c002488a:	86 fb                	xchg   bl,bh
c002488c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002488e:	c1 c3 10             	rol    ebx,0x10
c0024891:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024896:	89 e8                	mov    eax,ebp
c0024898:	86 fb                	xchg   bl,bh
c002489a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002489e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00248a2:	50                   	push   eax
c00248a3:	50                   	push   eax
c00248a4:	55                   	push   ebp
c00248a5:	c1 e5 0b             	shl    ebp,0xb
c00248a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00248ac:	6a 00                	push   0x0
c00248ae:	55                   	push   ebp
c00248af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00248b3:	50                   	push   eax
c00248b4:	56                   	push   esi
c00248b5:	e8 12 fb ff ff       	call   c00243cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248ba:	83 c4 20             	add    esp,0x20
c00248bd:	eb 1a                	jmp    c00248d9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00248bf:	83 ec 0c             	sub    esp,0xc
c00248c2:	56                   	push   esi
c00248c3:	e8 56 fe ff ff       	call   c002471e <ATAPI::detectMedia()>
c00248c8:	83 c4 10             	add    esp,0x10
c00248cb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00248d2:	75 aa                	jne    c002487e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00248d4:	b8 02 00 00 00       	mov    eax,0x2
c00248d9:	83 c4 1c             	add    esp,0x1c
c00248dc:	5b                   	pop    ebx
c00248dd:	5e                   	pop    esi
c00248de:	5f                   	pop    edi
c00248df:	5d                   	pop    ebp
c00248e0:	c3                   	ret    
c00248e1:	90                   	nop

c00248e2 <SATA::close(int, int, void*)>:
c00248e2:	83 ec 0c             	sub    esp,0xc
c00248e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248e9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00248ef:	85 c0                	test   eax,eax
c00248f1:	74 0c                	je     c00248ff <SATA::close(int, int, void*)+0x1d>
c00248f3:	83 ec 0c             	sub    esp,0xc
c00248f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00248f8:	50                   	push   eax
c00248f9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00248fc:	83 c4 10             	add    esp,0x10
c00248ff:	31 c0                	xor    eax,eax
c0024901:	83 c4 0c             	add    esp,0xc
c0024904:	c3                   	ret    
c0024905:	90                   	nop

c0024906 <SATA::powerSaving(PowerSavingLevel)>:
c0024906:	c3                   	ret    
c0024907:	90                   	nop

c0024908 <SATA::open(int, int, void*)>:
c0024908:	56                   	push   esi
c0024909:	53                   	push   ebx
c002490a:	50                   	push   eax
c002490b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002490f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024913:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002491d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024923:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002492d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024931:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002493b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024941:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024948:	e8 24 b0 fe ff       	call   c000f971 <Phys::allocatePage()>
c002494d:	89 c6                	mov    esi,eax
c002494f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024955:	81 c6 00 10 00 00    	add    esi,0x1000
c002495b:	e8 11 b0 fe ff       	call   c000f971 <Phys::allocatePage()>
c0024960:	39 c6                	cmp    esi,eax
c0024962:	74 10                	je     c0024974 <SATA::open(int, int, void*)+0x6c>
c0024964:	83 ec 0c             	sub    esp,0xc
c0024967:	68 24 c2 02 c0       	push   0xc002c224
c002496c:	e8 9c 54 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0024971:	83 c4 10             	add    esp,0x10
c0024974:	83 ec 0c             	sub    esp,0xc
c0024977:	6a 02                	push   0x2
c0024979:	e8 77 c8 fe ff       	call   c00111f5 <Virt::allocateKernelVirtualPages(int)>
c002497e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024984:	6a 03                	push   0x3
c0024986:	50                   	push   eax
c0024987:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002498d:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c0024993:	e8 1a d0 fe ff       	call   c00119b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024998:	83 c4 14             	add    esp,0x14
c002499b:	53                   	push   ebx
c002499c:	e8 d7 f5 fe ff       	call   c0013f78 <PhysicalDisk::startCache()>
c00249a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249a4:	e8 51 18 ff ff       	call   c00161fa <createPartitionsForDisk(PhysicalDisk*)>
c00249a9:	83 c4 14             	add    esp,0x14
c00249ac:	31 c0                	xor    eax,eax
c00249ae:	5b                   	pop    ebx
c00249af:	5e                   	pop    esi
c00249b0:	c3                   	ret    
c00249b1:	90                   	nop

c00249b2 <SATA::SATA()>:
c00249b2:	83 ec 0c             	sub    esp,0xc
c00249b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249b9:	83 ec 04             	sub    esp,0x4
c00249bc:	68 00 02 00 00       	push   0x200
c00249c1:	68 38 c2 02 c0       	push   0xc002c238
c00249c6:	50                   	push   eax
c00249c7:	e8 44 f5 fe ff       	call   c0013f10 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00249cc:	83 c4 10             	add    esp,0x10
c00249cf:	ba a8 c2 02 c0       	mov    edx,0xc002c2a8
c00249d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249d8:	89 10                	mov    DWORD PTR [eax],edx
c00249da:	90                   	nop
c00249db:	83 c4 0c             	add    esp,0xc
c00249de:	c3                   	ret    
c00249df:	90                   	nop

c00249e0 <SATA::access(unsigned long long, int, void*, bool)>:
c00249e0:	55                   	push   ebp
c00249e1:	57                   	push   edi
c00249e2:	56                   	push   esi
c00249e3:	53                   	push   ebx
c00249e4:	83 ec 2c             	sub    esp,0x2c
c00249e7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00249eb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00249ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00249f3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00249f7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00249fb:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024a00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024a04:	7e 10                	jle    c0024a16 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024a06:	83 ec 0c             	sub    esp,0xc
c0024a09:	68 48 c2 02 c0       	push   0xc002c248
c0024a0e:	e8 fa 53 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0024a13:	83 c4 10             	add    esp,0x10
c0024a16:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a1c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024a22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024a28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a2c:	89 d0                	mov    eax,edx
c0024a2e:	c1 e0 07             	shl    eax,0x7
c0024a31:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024a35:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024a3f:	51                   	push   ecx
c0024a40:	8d 42 02             	lea    eax,[edx+0x2]
c0024a43:	51                   	push   ecx
c0024a44:	c1 e0 07             	shl    eax,0x7
c0024a47:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024a4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024a4f:	50                   	push   eax
c0024a50:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024a56:	e8 1b f0 ff ff       	call   c0023a76 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024a5b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024a5f:	83 c4 10             	add    esp,0x10
c0024a62:	b8 01 00 00 00       	mov    eax,0x1
c0024a67:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024a6c:	0f 84 cb 01 00 00    	je     c0024c3d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a72:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024a76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a7a:	c1 e0 09             	shl    eax,0x9
c0024a7d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024a82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024a86:	74 0e                	je     c0024a96 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024a88:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024a8e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024a92:	89 c1                	mov    ecx,eax
c0024a94:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024a96:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024a9a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024aa0:	8d 42 02             	lea    eax,[edx+0x2]
c0024aa3:	c1 e0 07             	shl    eax,0x7
c0024aa6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024aaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0024aac:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024ab2:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024ab8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024abc:	c1 e1 05             	shl    ecx,0x5
c0024abf:	01 c8                	add    eax,ecx
c0024ac1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024ac5:	83 e1 01             	and    ecx,0x1
c0024ac8:	89 ce                	mov    esi,ecx
c0024aca:	8a 08                	mov    cl,BYTE PTR [eax]
c0024acc:	c1 e6 06             	shl    esi,0x6
c0024acf:	83 e1 bf             	and    ecx,0xffffffbf
c0024ad2:	09 f1                	or     ecx,esi
c0024ad4:	88 08                	mov    BYTE PTR [eax],cl
c0024ad6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024ad8:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024ade:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024ae4:	89 08                	mov    DWORD PTR [eax],ecx
c0024ae6:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024aec:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024af2:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024af8:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024afb:	50                   	push   eax
c0024afc:	68 90 00 00 00       	push   0x90
c0024b01:	6a 00                	push   0x0
c0024b03:	56                   	push   esi
c0024b04:	e8 47 bc fd ff       	call   c0000750 <memset>
c0024b09:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b0f:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024b13:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024b19:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024b1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024b21:	83 c4 10             	add    esp,0x10
c0024b24:	48                   	dec    eax
c0024b25:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024b2a:	89 c1                	mov    ecx,eax
c0024b2c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024b32:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024b37:	09 c8                	or     eax,ecx
c0024b39:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024b3f:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024b42:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024b49:	66 25 00 7f          	and    ax,0x7f00
c0024b4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b51:	66 0d 27 80          	or     ax,0x8027
c0024b55:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024b5a:	66 89 06             	mov    WORD PTR [esi],ax
c0024b5d:	19 c0                	sbb    eax,eax
c0024b5f:	83 e0 f0             	and    eax,0xfffffff0
c0024b62:	83 c0 35             	add    eax,0x35
c0024b65:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024b68:	89 e8                	mov    eax,ebp
c0024b6a:	c1 e8 10             	shr    eax,0x10
c0024b6d:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024b70:	89 e8                	mov    eax,ebp
c0024b72:	c1 e8 18             	shr    eax,0x18
c0024b75:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024b78:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024b7c:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024b7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b83:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024b86:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024b8a:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024b8e:	89 d6                	mov    esi,edx
c0024b90:	31 c0                	xor    eax,eax
c0024b92:	c1 e6 07             	shl    esi,0x7
c0024b95:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024b99:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024b9f:	80 e1 88             	and    cl,0x88
c0024ba2:	74 0a                	je     c0024bae <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024ba4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ba9:	74 0a                	je     c0024bb5 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024bab:	40                   	inc    eax
c0024bac:	eb eb                	jmp    c0024b99 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024bae:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024bb3:	75 0a                	jne    c0024bbf <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024bb5:	83 ec 0c             	sub    esp,0xc
c0024bb8:	68 81 c2 02 c0       	push   0xc002c281
c0024bbd:	eb 56                	jmp    c0024c15 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024bbf:	b8 01 00 00 00       	mov    eax,0x1
c0024bc4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024bc8:	c1 e2 07             	shl    edx,0x7
c0024bcb:	d3 e0                	shl    eax,cl
c0024bcd:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024bd1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024bd7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024bdd:	85 c8                	test   eax,ecx
c0024bdf:	74 20                	je     c0024c01 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024be1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024be7:	0f ba e1 1e          	bt     ecx,0x1e
c0024beb:	73 ea                	jae    c0024bd7 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024bed:	83 ec 0c             	sub    esp,0xc
c0024bf0:	68 8f c2 02 c0       	push   0xc002c28f
c0024bf5:	e8 13 52 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0024bfa:	83 c4 10             	add    esp,0x10
c0024bfd:	31 c0                	xor    eax,eax
c0024bff:	eb 3c                	jmp    c0024c3d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c01:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024c07:	0f ba e0 1e          	bt     eax,0x1e
c0024c0b:	73 17                	jae    c0024c24 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024c0d:	83 ec 0c             	sub    esp,0xc
c0024c10:	68 8f c2 02 c0       	push   0xc002c28f
c0024c15:	e8 f3 51 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0024c1a:	83 c4 10             	add    esp,0x10
c0024c1d:	b8 01 00 00 00       	mov    eax,0x1
c0024c22:	eb 19                	jmp    c0024c3d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c24:	31 c0                	xor    eax,eax
c0024c26:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024c2b:	75 10                	jne    c0024c3d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c2d:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024c33:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024c37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024c3d:	83 c4 2c             	add    esp,0x2c
c0024c40:	5b                   	pop    ebx
c0024c41:	5e                   	pop    esi
c0024c42:	5f                   	pop    edi
c0024c43:	5d                   	pop    ebp
c0024c44:	c3                   	ret    
c0024c45:	90                   	nop

c0024c46 <SATA::read(unsigned long long, int, void*)>:
c0024c46:	57                   	push   edi
c0024c47:	b8 04 00 00 00       	mov    eax,0x4
c0024c4c:	56                   	push   esi
c0024c4d:	53                   	push   ebx
c0024c4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c52:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c56:	8d 7a ff             	lea    edi,[edx-0x1]
c0024c59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024c5d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024c61:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024c67:	77 25                	ja     c0024c8e <SATA::read(unsigned long long, int, void*)+0x48>
c0024c69:	b8 06 00 00 00       	mov    eax,0x6
c0024c6e:	85 f6                	test   esi,esi
c0024c70:	74 1c                	je     c0024c8e <SATA::read(unsigned long long, int, void*)+0x48>
c0024c72:	50                   	push   eax
c0024c73:	50                   	push   eax
c0024c74:	6a 00                	push   0x0
c0024c76:	56                   	push   esi
c0024c77:	52                   	push   edx
c0024c78:	53                   	push   ebx
c0024c79:	51                   	push   ecx
c0024c7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c7e:	e8 5d fd ff ff       	call   c00249e0 <SATA::access(unsigned long long, int, void*, bool)>
c0024c83:	83 c4 20             	add    esp,0x20
c0024c86:	85 c0                	test   eax,eax
c0024c88:	0f 95 c0             	setne  al
c0024c8b:	0f b6 c0             	movzx  eax,al
c0024c8e:	5b                   	pop    ebx
c0024c8f:	5e                   	pop    esi
c0024c90:	5f                   	pop    edi
c0024c91:	c3                   	ret    

c0024c92 <SATA::write(unsigned long long, int, void*)>:
c0024c92:	55                   	push   ebp
c0024c93:	b8 04 00 00 00       	mov    eax,0x4
c0024c98:	57                   	push   edi
c0024c99:	56                   	push   esi
c0024c9a:	53                   	push   ebx
c0024c9b:	83 ec 0c             	sub    esp,0xc
c0024c9e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ca2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024ca6:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024ca9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024cad:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024cb1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024cb7:	77 3d                	ja     c0024cf6 <SATA::write(unsigned long long, int, void*)+0x64>
c0024cb9:	b8 06 00 00 00       	mov    eax,0x6
c0024cbe:	85 ed                	test   ebp,ebp
c0024cc0:	74 34                	je     c0024cf6 <SATA::write(unsigned long long, int, void*)+0x64>
c0024cc2:	c1 e3 09             	shl    ebx,0x9
c0024cc5:	01 eb                	add    ebx,ebp
c0024cc7:	89 d6                	mov    esi,edx
c0024cc9:	89 cf                	mov    edi,ecx
c0024ccb:	83 c6 01             	add    esi,0x1
c0024cce:	83 d7 00             	adc    edi,0x0
c0024cd1:	50                   	push   eax
c0024cd2:	50                   	push   eax
c0024cd3:	6a 01                	push   0x1
c0024cd5:	55                   	push   ebp
c0024cd6:	81 c5 00 02 00 00    	add    ebp,0x200
c0024cdc:	6a 01                	push   0x1
c0024cde:	51                   	push   ecx
c0024cdf:	52                   	push   edx
c0024ce0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ce4:	e8 f7 fc ff ff       	call   c00249e0 <SATA::access(unsigned long long, int, void*, bool)>
c0024ce9:	83 c4 20             	add    esp,0x20
c0024cec:	89 f2                	mov    edx,esi
c0024cee:	89 f9                	mov    ecx,edi
c0024cf0:	39 dd                	cmp    ebp,ebx
c0024cf2:	75 d3                	jne    c0024cc7 <SATA::write(unsigned long long, int, void*)+0x35>
c0024cf4:	31 c0                	xor    eax,eax
c0024cf6:	83 c4 0c             	add    esp,0xc
c0024cf9:	5b                   	pop    ebx
c0024cfa:	5e                   	pop    esi
c0024cfb:	5f                   	pop    edi
c0024cfc:	5d                   	pop    ebp
c0024cfd:	c3                   	ret    

c0024cfe <SATAPI::write(unsigned long long, int, void*)>:
c0024cfe:	b8 03 00 00 00       	mov    eax,0x3
c0024d03:	c3                   	ret    

c0024d04 <SATAPI::close(int, int, void*)>:
c0024d04:	83 ec 0c             	sub    esp,0xc
c0024d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d0b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d11:	85 c0                	test   eax,eax
c0024d13:	74 0c                	je     c0024d21 <SATAPI::close(int, int, void*)+0x1d>
c0024d15:	83 ec 0c             	sub    esp,0xc
c0024d18:	8b 10                	mov    edx,DWORD PTR [eax]
c0024d1a:	50                   	push   eax
c0024d1b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024d1e:	83 c4 10             	add    esp,0x10
c0024d21:	31 c0                	xor    eax,eax
c0024d23:	83 c4 0c             	add    esp,0xc
c0024d26:	c3                   	ret    
c0024d27:	90                   	nop

c0024d28 <SATAPI::SATAPI()>:
c0024d28:	83 ec 0c             	sub    esp,0xc
c0024d2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d2f:	83 ec 04             	sub    esp,0x4
c0024d32:	68 00 08 00 00       	push   0x800
c0024d37:	68 d8 c2 02 c0       	push   0xc002c2d8
c0024d3c:	50                   	push   eax
c0024d3d:	e8 ce f1 fe ff       	call   c0013f10 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d42:	83 c4 10             	add    esp,0x10
c0024d45:	ba 84 c3 02 c0       	mov    edx,0xc002c384
c0024d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d4e:	89 10                	mov    DWORD PTR [eax],edx
c0024d50:	90                   	nop
c0024d51:	83 c4 0c             	add    esp,0xc
c0024d54:	c3                   	ret    
c0024d55:	90                   	nop

c0024d56 <SATAPI::diskRemoved()>:
c0024d56:	83 ec 18             	sub    esp,0x18
c0024d59:	68 e4 c2 02 c0       	push   0xc002c2e4
c0024d5e:	e8 3e d9 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0024d63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d67:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024d6e:	83 c4 1c             	add    esp,0x1c
c0024d71:	c3                   	ret    

c0024d72 <SATAPI::diskInserted()>:
c0024d72:	53                   	push   ebx
c0024d73:	83 ec 14             	sub    esp,0x14
c0024d76:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024d7a:	68 fb c2 02 c0       	push   0xc002c2fb
c0024d7f:	e8 1d d9 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0024d84:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024d8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d8e:	e8 e5 f1 fe ff       	call   c0013f78 <PhysicalDisk::startCache()>
c0024d93:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024d97:	83 c4 18             	add    esp,0x18
c0024d9a:	5b                   	pop    ebx
c0024d9b:	e9 5a 14 ff ff       	jmp    c00161fa <createPartitionsForDisk(PhysicalDisk*)>

c0024da0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024da0:	55                   	push   ebp
c0024da1:	57                   	push   edi
c0024da2:	56                   	push   esi
c0024da3:	53                   	push   ebx
c0024da4:	83 ec 34             	sub    esp,0x34
c0024da7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024dab:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024daf:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024db3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024db7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024dbb:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024dc1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024dcb:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024dd1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024dd5:	c1 e0 07             	shl    eax,0x7
c0024dd8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024ddc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024de0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024dea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024dee:	8d 58 02             	lea    ebx,[eax+0x2]
c0024df1:	c1 e3 07             	shl    ebx,0x7
c0024df4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024df8:	53                   	push   ebx
c0024df9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024dff:	e8 72 ec ff ff       	call   c0023a76 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e08:	83 c4 10             	add    esp,0x10
c0024e0b:	b8 01 00 00 00       	mov    eax,0x1
c0024e10:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024e15:	0f 84 85 01 00 00    	je     c0024fa0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024e1b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024e23:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e29:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e33:	c1 e1 05             	shl    ecx,0x5
c0024e36:	01 c8                	add    eax,ecx
c0024e38:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e3a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024e40:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024e46:	89 08                	mov    DWORD PTR [eax],ecx
c0024e48:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e4e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e54:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e5a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e5d:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024e60:	50                   	push   eax
c0024e61:	68 90 00 00 00       	push   0x90
c0024e66:	6a 00                	push   0x0
c0024e68:	53                   	push   ebx
c0024e69:	e8 e2 b8 fd ff       	call   c0000750 <memset>
c0024e6e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024e72:	b9 0c 00 00 00       	mov    ecx,0xc
c0024e77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024e79:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024e7f:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024e83:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e89:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e8d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024e91:	48                   	dec    eax
c0024e92:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024e97:	89 c1                	mov    ecx,eax
c0024e99:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e9f:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024ea4:	09 c8                	or     eax,ecx
c0024ea6:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024eac:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024eaf:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024eb6:	66 25 00 7f          	and    ax,0x7f00
c0024eba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024ebe:	66 0d 27 80          	or     ax,0x8027
c0024ec2:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024ec6:	66 89 03             	mov    WORD PTR [ebx],ax
c0024ec9:	89 d0                	mov    eax,edx
c0024ecb:	c1 ea 18             	shr    edx,0x18
c0024ece:	c1 e8 10             	shr    eax,0x10
c0024ed1:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024ed4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024ed7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024edb:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024ede:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024ee2:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024ee5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024ee9:	83 c4 10             	add    esp,0x10
c0024eec:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024ef0:	31 c0                	xor    eax,eax
c0024ef2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024ef6:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024efc:	80 e2 88             	and    dl,0x88
c0024eff:	74 0a                	je     c0024f0b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024f01:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f06:	74 0a                	je     c0024f12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024f08:	40                   	inc    eax
c0024f09:	eb eb                	jmp    c0024ef6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024f0b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f10:	75 0f                	jne    c0024f21 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024f12:	83 ec 0c             	sub    esp,0xc
c0024f15:	68 81 c2 02 c0       	push   0xc002c281
c0024f1a:	e8 ee 4e ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0024f1f:	eb 3f                	jmp    c0024f60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024f21:	ba 01 00 00 00       	mov    edx,0x1
c0024f26:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024f2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f2e:	d3 e2                	shl    edx,cl
c0024f30:	c1 e0 07             	shl    eax,0x7
c0024f33:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024f39:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f3d:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024f43:	85 ca                	test   edx,ecx
c0024f45:	74 23                	je     c0024f6a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024f47:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024f4d:	0f ba e1 1e          	bt     ecx,0x1e
c0024f51:	73 ea                	jae    c0024f3d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024f53:	83 ec 0c             	sub    esp,0xc
c0024f56:	68 13 c3 02 c0       	push   0xc002c313
c0024f5b:	e8 41 d7 fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0024f60:	83 c4 10             	add    esp,0x10
c0024f63:	b8 01 00 00 00       	mov    eax,0x1
c0024f68:	eb 36                	jmp    c0024fa0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024f6a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024f70:	0f ba e0 1e          	bt     eax,0x1e
c0024f74:	73 0a                	jae    c0024f80 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024f76:	83 ec 0c             	sub    esp,0xc
c0024f79:	68 26 c3 02 c0       	push   0xc002c326
c0024f7e:	eb db                	jmp    c0024f5b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024f80:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024f85:	74 17                	je     c0024f9e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024f87:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024f8c:	74 10                	je     c0024f9e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024f8e:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024f94:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024f98:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024f9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024f9e:	31 c0                	xor    eax,eax
c0024fa0:	83 c4 2c             	add    esp,0x2c
c0024fa3:	5b                   	pop    ebx
c0024fa4:	5e                   	pop    esi
c0024fa5:	5f                   	pop    edi
c0024fa6:	5d                   	pop    ebp
c0024fa7:	c3                   	ret    

c0024fa8 <SATAPI::eject()>:
c0024fa8:	57                   	push   edi
c0024fa9:	b9 03 00 00 00       	mov    ecx,0x3
c0024fae:	53                   	push   ebx
c0024faf:	83 ec 14             	sub    esp,0x14
c0024fb2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024fb6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024fba:	fc                   	cld    
c0024fbb:	31 c0                	xor    eax,eax
c0024fbd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024fbf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024fc4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024fc9:	50                   	push   eax
c0024fca:	6a 00                	push   0x0
c0024fcc:	6a 00                	push   0x0
c0024fce:	6a 00                	push   0x0
c0024fd0:	6a 00                	push   0x0
c0024fd2:	6a 02                	push   0x2
c0024fd4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024fd8:	50                   	push   eax
c0024fd9:	53                   	push   ebx
c0024fda:	e8 c1 fd ff ff       	call   c0024da0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024fdf:	83 c4 14             	add    esp,0x14
c0024fe2:	53                   	push   ebx
c0024fe3:	e8 6e fd ff ff       	call   c0024d56 <SATAPI::diskRemoved()>
c0024fe8:	83 c4 24             	add    esp,0x24
c0024feb:	31 c0                	xor    eax,eax
c0024fed:	5b                   	pop    ebx
c0024fee:	5f                   	pop    edi
c0024fef:	c3                   	ret    

c0024ff0 <SATAPI::detectMedia()>:
c0024ff0:	56                   	push   esi
c0024ff1:	53                   	push   ebx
c0024ff2:	83 ec 28             	sub    esp,0x28
c0024ff5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024ff9:	6a 0c                	push   0xc
c0024ffb:	6a 00                	push   0x0
c0024ffd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025001:	56                   	push   esi
c0025002:	e8 49 b7 fd ff       	call   c0000750 <memset>
c0025007:	83 c4 0c             	add    esp,0xc
c002500a:	6a 00                	push   0x0
c002500c:	6a 00                	push   0x0
c002500e:	6a 00                	push   0x0
c0025010:	6a 00                	push   0x0
c0025012:	6a 00                	push   0x0
c0025014:	56                   	push   esi
c0025015:	53                   	push   ebx
c0025016:	e8 85 fd ff ff       	call   c0024da0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002501b:	83 c4 1c             	add    esp,0x1c
c002501e:	6a 0c                	push   0xc
c0025020:	6a 00                	push   0x0
c0025022:	56                   	push   esi
c0025023:	e8 28 b7 fd ff       	call   c0000750 <memset>
c0025028:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002502d:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025032:	83 c4 0c             	add    esp,0xc
c0025035:	6a 01                	push   0x1
c0025037:	8d 44 24 16          	lea    eax,[esp+0x16]
c002503b:	50                   	push   eax
c002503c:	6a 00                	push   0x0
c002503e:	6a 00                	push   0x0
c0025040:	6a 12                	push   0x12
c0025042:	56                   	push   esi
c0025043:	53                   	push   ebx
c0025044:	e8 57 fd ff ff       	call   c0024da0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025049:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002504d:	83 c4 20             	add    esp,0x20
c0025050:	83 e0 7f             	and    eax,0x7f
c0025053:	3c 70                	cmp    al,0x70
c0025055:	74 15                	je     c002506c <SATAPI::detectMedia()+0x7c>
c0025057:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002505e:	75 0c                	jne    c002506c <SATAPI::detectMedia()+0x7c>
c0025060:	83 ec 0c             	sub    esp,0xc
c0025063:	53                   	push   ebx
c0025064:	e8 09 fd ff ff       	call   c0024d72 <SATAPI::diskInserted()>
c0025069:	83 c4 10             	add    esp,0x10
c002506c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025070:	83 e0 0f             	and    eax,0xf
c0025073:	3c 02                	cmp    al,0x2
c0025075:	75 1b                	jne    c0025092 <SATAPI::detectMedia()+0xa2>
c0025077:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002507c:	75 2d                	jne    c00250ab <SATAPI::detectMedia()+0xbb>
c002507e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025085:	74 24                	je     c00250ab <SATAPI::detectMedia()+0xbb>
c0025087:	83 ec 0c             	sub    esp,0xc
c002508a:	53                   	push   ebx
c002508b:	e8 c6 fc ff ff       	call   c0024d56 <SATAPI::diskRemoved()>
c0025090:	eb 16                	jmp    c00250a8 <SATAPI::detectMedia()+0xb8>
c0025092:	84 c0                	test   al,al
c0025094:	75 15                	jne    c00250ab <SATAPI::detectMedia()+0xbb>
c0025096:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002509d:	75 0c                	jne    c00250ab <SATAPI::detectMedia()+0xbb>
c002509f:	83 ec 0c             	sub    esp,0xc
c00250a2:	53                   	push   ebx
c00250a3:	e8 ca fc ff ff       	call   c0024d72 <SATAPI::diskInserted()>
c00250a8:	83 c4 10             	add    esp,0x10
c00250ab:	83 c4 24             	add    esp,0x24
c00250ae:	5b                   	pop    ebx
c00250af:	5e                   	pop    esi
c00250b0:	c3                   	ret    
c00250b1:	90                   	nop

c00250b2 <SATAPI::open(int, int, void*)>:
c00250b2:	56                   	push   esi
c00250b3:	53                   	push   ebx
c00250b4:	50                   	push   eax
c00250b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00250b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250bd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00250c7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00250cd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00250d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250db:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00250e5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00250eb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00250f2:	e8 7a a8 fe ff       	call   c000f971 <Phys::allocatePage()>
c00250f7:	89 c6                	mov    esi,eax
c00250f9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00250ff:	81 c6 00 10 00 00    	add    esi,0x1000
c0025105:	e8 67 a8 fe ff       	call   c000f971 <Phys::allocatePage()>
c002510a:	39 c6                	cmp    esi,eax
c002510c:	74 10                	je     c002511e <SATAPI::open(int, int, void*)+0x6c>
c002510e:	83 ec 0c             	sub    esp,0xc
c0025111:	68 3b c3 02 c0       	push   0xc002c33b
c0025116:	e8 f2 4c ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c002511b:	83 c4 10             	add    esp,0x10
c002511e:	83 ec 0c             	sub    esp,0xc
c0025121:	6a 02                	push   0x2
c0025123:	e8 cd c0 fe ff       	call   c00111f5 <Virt::allocateKernelVirtualPages(int)>
c0025128:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002512e:	6a 03                	push   0x3
c0025130:	50                   	push   eax
c0025131:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025137:	ff 35 90 da 02 c0    	push   DWORD PTR ds:0xc002da90
c002513d:	e8 70 c8 fe ff       	call   c00119b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025142:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025149:	83 c4 14             	add    esp,0x14
c002514c:	53                   	push   ebx
c002514d:	e8 9e fe ff ff       	call   c0024ff0 <SATAPI::detectMedia()>
c0025152:	83 c4 14             	add    esp,0x14
c0025155:	31 c0                	xor    eax,eax
c0025157:	5b                   	pop    ebx
c0025158:	5e                   	pop    esi
c0025159:	c3                   	ret    

c002515a <SATAPI::read(unsigned long long, int, void*)>:
c002515a:	55                   	push   ebp
c002515b:	57                   	push   edi
c002515c:	56                   	push   esi
c002515d:	53                   	push   ebx
c002515e:	83 ec 1c             	sub    esp,0x1c
c0025161:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025165:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025169:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002516d:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025174:	74 19                	je     c002518f <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025176:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002517b:	7e 2e                	jle    c00251ab <SATAPI::read(unsigned long long, int, void*)+0x51>
c002517d:	83 ec 0c             	sub    esp,0xc
c0025180:	68 51 c3 02 c0       	push   0xc002c351
c0025185:	e8 83 4c ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c002518a:	83 c4 10             	add    esp,0x10
c002518d:	eb 1c                	jmp    c00251ab <SATAPI::read(unsigned long long, int, void*)+0x51>
c002518f:	83 ec 0c             	sub    esp,0xc
c0025192:	55                   	push   ebp
c0025193:	e8 58 fe ff ff       	call   c0024ff0 <SATAPI::detectMedia()>
c0025198:	83 c4 10             	add    esp,0x10
c002519b:	b8 02 00 00 00       	mov    eax,0x2
c00251a0:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251a7:	75 cd                	jne    c0025176 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00251a9:	eb 49                	jmp    c00251f4 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00251ab:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251af:	b9 03 00 00 00       	mov    ecx,0x3
c00251b4:	fc                   	cld    
c00251b5:	31 c0                	xor    eax,eax
c00251b7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251b9:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00251be:	89 d8                	mov    eax,ebx
c00251c0:	86 e0                	xchg   al,ah
c00251c2:	c1 c0 10             	rol    eax,0x10
c00251c5:	86 e0                	xchg   al,ah
c00251c7:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00251cb:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00251cf:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00251d3:	50                   	push   eax
c00251d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00251d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00251dc:	56                   	push   esi
c00251dd:	53                   	push   ebx
c00251de:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00251e2:	c1 e0 0b             	shl    eax,0xb
c00251e5:	50                   	push   eax
c00251e6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00251ea:	50                   	push   eax
c00251eb:	55                   	push   ebp
c00251ec:	e8 af fb ff ff       	call   c0024da0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251f1:	83 c4 20             	add    esp,0x20
c00251f4:	83 c4 1c             	add    esp,0x1c
c00251f7:	5b                   	pop    ebx
c00251f8:	5e                   	pop    esi
c00251f9:	5f                   	pop    edi
c00251fa:	5d                   	pop    ebp
c00251fb:	c3                   	ret    

c00251fc <AVX::open(int, int, void*)>:
c00251fc:	83 ec 0c             	sub    esp,0xc
c00251ff:	e8 44 11 00 00       	call   c0026348 <avxInit>
c0025204:	b8 00 00 00 00       	mov    eax,0x0
c0025209:	83 c4 0c             	add    esp,0xc
c002520c:	c3                   	ret    
c002520d:	90                   	nop

c002520e <AVX::close(int, int, void*)>:
c002520e:	83 ec 0c             	sub    esp,0xc
c0025211:	e8 33 11 00 00       	call   c0026349 <avxClose>
c0025216:	b8 00 00 00 00       	mov    eax,0x0
c002521b:	83 c4 0c             	add    esp,0xc
c002521e:	c3                   	ret    
c002521f:	90                   	nop

c0025220 <AVX::available()>:
c0025220:	83 ec 0c             	sub    esp,0xc
c0025223:	e8 18 11 00 00       	call   c0026340 <avxDetect>
c0025228:	85 c0                	test   eax,eax
c002522a:	0f 95 c0             	setne  al
c002522d:	83 c4 0c             	add    esp,0xc
c0025230:	c3                   	ret    
c0025231:	90                   	nop

c0025232 <AVX::save(void*)>:
c0025232:	83 ec 0c             	sub    esp,0xc
c0025235:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025239:	83 ec 0c             	sub    esp,0xc
c002523c:	50                   	push   eax
c002523d:	e8 04 11 00 00       	call   c0026346 <avxSave>
c0025242:	83 c4 10             	add    esp,0x10
c0025245:	90                   	nop
c0025246:	83 c4 0c             	add    esp,0xc
c0025249:	c3                   	ret    

c002524a <AVX::load(void*)>:
c002524a:	83 ec 0c             	sub    esp,0xc
c002524d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025251:	83 ec 0c             	sub    esp,0xc
c0025254:	50                   	push   eax
c0025255:	e8 ed 10 00 00       	call   c0026347 <avxLoad>
c002525a:	83 c4 10             	add    esp,0x10
c002525d:	90                   	nop
c002525e:	83 c4 0c             	add    esp,0xc
c0025261:	c3                   	ret    

c0025262 <AVX::AVX()>:
c0025262:	83 ec 0c             	sub    esp,0xc
c0025265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025269:	83 ec 08             	sub    esp,0x8
c002526c:	68 b4 c3 02 c0       	push   0xc002c3b4
c0025271:	50                   	push   eax
c0025272:	e8 77 ed fe ff       	call   c0013fee <FPU::FPU(char const*)>
c0025277:	83 c4 10             	add    esp,0x10
c002527a:	ba c4 c3 02 c0       	mov    edx,0xc002c3c4
c002527f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025283:	89 10                	mov    DWORD PTR [eax],edx
c0025285:	90                   	nop
c0025286:	83 c4 0c             	add    esp,0xc
c0025289:	c3                   	ret    

c002528a <MMX::available()>:
c002528a:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c002528f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025295:	83 e0 20             	and    eax,0x20
c0025298:	84 c0                	test   al,al
c002529a:	0f 95 c0             	setne  al
c002529d:	c3                   	ret    

c002529e <MMX::open(int, int, void*)>:
c002529e:	83 ec 0c             	sub    esp,0xc
c00252a1:	e8 2c 11 00 00       	call   c00263d2 <x87Init>
c00252a6:	b8 00 00 00 00       	mov    eax,0x0
c00252ab:	83 c4 0c             	add    esp,0xc
c00252ae:	c3                   	ret    
c00252af:	90                   	nop

c00252b0 <MMX::close(int, int, void*)>:
c00252b0:	83 ec 0c             	sub    esp,0xc
c00252b3:	e8 34 11 00 00       	call   c00263ec <x87Close>
c00252b8:	b8 00 00 00 00       	mov    eax,0x0
c00252bd:	83 c4 0c             	add    esp,0xc
c00252c0:	c3                   	ret    
c00252c1:	90                   	nop

c00252c2 <MMX::save(void*)>:
c00252c2:	83 ec 0c             	sub    esp,0xc
c00252c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252c9:	83 ec 0c             	sub    esp,0xc
c00252cc:	50                   	push   eax
c00252cd:	e8 ef 10 00 00       	call   c00263c1 <x87Save>
c00252d2:	83 c4 10             	add    esp,0x10
c00252d5:	90                   	nop
c00252d6:	83 c4 0c             	add    esp,0xc
c00252d9:	c3                   	ret    

c00252da <MMX::load(void*)>:
c00252da:	83 ec 0c             	sub    esp,0xc
c00252dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252e1:	83 ec 0c             	sub    esp,0xc
c00252e4:	50                   	push   eax
c00252e5:	e8 e0 10 00 00       	call   c00263ca <x87Load>
c00252ea:	83 c4 10             	add    esp,0x10
c00252ed:	90                   	nop
c00252ee:	83 c4 0c             	add    esp,0xc
c00252f1:	c3                   	ret    

c00252f2 <MMX::MMX()>:
c00252f2:	83 ec 0c             	sub    esp,0xc
c00252f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252f9:	83 ec 08             	sub    esp,0x8
c00252fc:	68 f4 c3 02 c0       	push   0xc002c3f4
c0025301:	50                   	push   eax
c0025302:	e8 e7 ec fe ff       	call   c0013fee <FPU::FPU(char const*)>
c0025307:	83 c4 10             	add    esp,0x10
c002530a:	ba 04 c4 02 c0       	mov    edx,0xc002c404
c002530f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025313:	89 10                	mov    DWORD PTR [eax],edx
c0025315:	90                   	nop
c0025316:	83 c4 0c             	add    esp,0xc
c0025319:	c3                   	ret    

c002531a <SSE::open(int, int, void*)>:
c002531a:	83 ec 0c             	sub    esp,0xc
c002531d:	e8 62 10 00 00       	call   c0026384 <sseInit>
c0025322:	b8 00 00 00 00       	mov    eax,0x0
c0025327:	83 c4 0c             	add    esp,0xc
c002532a:	c3                   	ret    
c002532b:	90                   	nop

c002532c <SSE::close(int, int, void*)>:
c002532c:	83 ec 0c             	sub    esp,0xc
c002532f:	e8 60 10 00 00       	call   c0026394 <sseClose>
c0025334:	b8 00 00 00 00       	mov    eax,0x0
c0025339:	83 c4 0c             	add    esp,0xc
c002533c:	c3                   	ret    
c002533d:	90                   	nop

c002533e <SSE::available()>:
c002533e:	83 ec 1c             	sub    esp,0x1c
c0025341:	e8 1a 10 00 00       	call   c0026360 <absolutelyNoChanceInHell>
c0025346:	85 c0                	test   eax,eax
c0025348:	0f 95 c0             	setne  al
c002534b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002534f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025353:	83 c4 1c             	add    esp,0x1c
c0025356:	c3                   	ret    
c0025357:	90                   	nop

c0025358 <SSE::save(void*)>:
c0025358:	83 ec 0c             	sub    esp,0xc
c002535b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002535f:	83 ec 0c             	sub    esp,0xc
c0025362:	50                   	push   eax
c0025363:	e8 10 10 00 00       	call   c0026378 <sseSave>
c0025368:	83 c4 10             	add    esp,0x10
c002536b:	90                   	nop
c002536c:	83 c4 0c             	add    esp,0xc
c002536f:	c3                   	ret    

c0025370 <SSE::load(void*)>:
c0025370:	83 ec 0c             	sub    esp,0xc
c0025373:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025377:	83 ec 0c             	sub    esp,0xc
c002537a:	50                   	push   eax
c002537b:	e8 fe 0f 00 00       	call   c002637e <sseLoad>
c0025380:	83 c4 10             	add    esp,0x10
c0025383:	90                   	nop
c0025384:	83 c4 0c             	add    esp,0xc
c0025387:	c3                   	ret    

c0025388 <SSE::SSE()>:
c0025388:	83 ec 0c             	sub    esp,0xc
c002538b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002538f:	83 ec 08             	sub    esp,0x8
c0025392:	68 34 c4 02 c0       	push   0xc002c434
c0025397:	50                   	push   eax
c0025398:	e8 51 ec fe ff       	call   c0013fee <FPU::FPU(char const*)>
c002539d:	83 c4 10             	add    esp,0x10
c00253a0:	ba 44 c4 02 c0       	mov    edx,0xc002c444
c00253a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253a9:	89 10                	mov    DWORD PTR [eax],edx
c00253ab:	90                   	nop
c00253ac:	83 c4 0c             	add    esp,0xc
c00253af:	c3                   	ret    

c00253b0 <x87::open(int, int, void*)>:
c00253b0:	83 ec 0c             	sub    esp,0xc
c00253b3:	e8 1a 10 00 00       	call   c00263d2 <x87Init>
c00253b8:	b8 00 00 00 00       	mov    eax,0x0
c00253bd:	83 c4 0c             	add    esp,0xc
c00253c0:	c3                   	ret    
c00253c1:	90                   	nop

c00253c2 <x87::close(int, int, void*)>:
c00253c2:	83 ec 0c             	sub    esp,0xc
c00253c5:	e8 22 10 00 00       	call   c00263ec <x87Close>
c00253ca:	b8 00 00 00 00       	mov    eax,0x0
c00253cf:	83 c4 0c             	add    esp,0xc
c00253d2:	c3                   	ret    
c00253d3:	90                   	nop

c00253d4 <x87::available()>:
c00253d4:	83 ec 0c             	sub    esp,0xc
c00253d7:	e8 ca 0f 00 00       	call   c00263a6 <x87Detect>
c00253dc:	85 c0                	test   eax,eax
c00253de:	0f 95 c0             	setne  al
c00253e1:	83 c4 0c             	add    esp,0xc
c00253e4:	c3                   	ret    
c00253e5:	90                   	nop

c00253e6 <x87::save(void*)>:
c00253e6:	83 ec 0c             	sub    esp,0xc
c00253e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253ed:	83 ec 0c             	sub    esp,0xc
c00253f0:	50                   	push   eax
c00253f1:	e8 cb 0f 00 00       	call   c00263c1 <x87Save>
c00253f6:	83 c4 10             	add    esp,0x10
c00253f9:	90                   	nop
c00253fa:	83 c4 0c             	add    esp,0xc
c00253fd:	c3                   	ret    

c00253fe <x87::load(void*)>:
c00253fe:	83 ec 0c             	sub    esp,0xc
c0025401:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025405:	83 ec 0c             	sub    esp,0xc
c0025408:	50                   	push   eax
c0025409:	e8 bc 0f 00 00       	call   c00263ca <x87Load>
c002540e:	83 c4 10             	add    esp,0x10
c0025411:	90                   	nop
c0025412:	83 c4 0c             	add    esp,0xc
c0025415:	c3                   	ret    

c0025416 <x87::x87()>:
c0025416:	83 ec 0c             	sub    esp,0xc
c0025419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002541d:	83 ec 08             	sub    esp,0x8
c0025420:	68 74 c4 02 c0       	push   0xc002c474
c0025425:	50                   	push   eax
c0025426:	e8 c3 eb fe ff       	call   c0013fee <FPU::FPU(char const*)>
c002542b:	83 c4 10             	add    esp,0x10
c002542e:	ba 84 c4 02 c0       	mov    edx,0xc002c484
c0025433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025437:	89 10                	mov    DWORD PTR [eax],edx
c0025439:	90                   	nop
c002543a:	83 c4 0c             	add    esp,0xc
c002543d:	c3                   	ret    

c002543e <APIC::disable()>:
c002543e:	90                   	nop
c002543f:	c3                   	ret    

c0025440 <APIC::close(int, int, void*)>:
c0025440:	55                   	push   ebp
c0025441:	89 e5                	mov    ebp,esp
c0025443:	83 ec 08             	sub    esp,0x8
c0025446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025449:	8b 00                	mov    eax,DWORD PTR [eax]
c002544b:	83 c0 3c             	add    eax,0x3c
c002544e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025450:	83 ec 0c             	sub    esp,0xc
c0025453:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025456:	ff d0                	call   eax
c0025458:	83 c4 10             	add    esp,0x10
c002545b:	b8 00 00 00 00       	mov    eax,0x0
c0025460:	c9                   	leave  
c0025461:	c3                   	ret    

c0025462 <IOAPIC::close(int, int, void*)>:
c0025462:	b8 00 00 00 00       	mov    eax,0x0
c0025467:	c3                   	ret    

c0025468 <APIC::io_wait()>:
c0025468:	eb 00                	jmp    c002546a <APIC::io_wait()+0x2>
c002546a:	eb 00                	jmp    c002546c <APIC::io_wait()+0x4>
c002546c:	90                   	nop
c002546d:	c3                   	ret    

c002546e <APIC::getBase()>:
c002546e:	55                   	push   ebp
c002546f:	89 e5                	mov    ebp,esp
c0025471:	83 ec 18             	sub    esp,0x18
c0025474:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0025479:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002547f:	83 e0 08             	and    eax,0x8
c0025482:	84 c0                	test   al,al
c0025484:	75 07                	jne    c002548d <APIC::getBase()+0x1f>
c0025486:	b8 00 00 00 00       	mov    eax,0x0
c002548b:	eb 21                	jmp    c00254ae <APIC::getBase()+0x40>
c002548d:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0025492:	83 ec 08             	sub    esp,0x8
c0025495:	6a 1b                	push   0x1b
c0025497:	50                   	push   eax
c0025498:	e8 a3 96 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c002549d:	83 c4 10             	add    esp,0x10
c00254a0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00254a3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00254a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00254a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00254ae:	c9                   	leave  
c00254af:	c3                   	ret    

c00254b0 <APIC::eoi(unsigned char)>:
c00254b0:	55                   	push   ebp
c00254b1:	89 e5                	mov    ebp,esp
c00254b3:	83 ec 28             	sub    esp,0x28
c00254b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00254b9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00254bc:	83 ec 0c             	sub    esp,0xc
c00254bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254c2:	e8 a7 ff ff ff       	call   c002546e <APIC::getBase()>
c00254c7:	83 c4 10             	add    esp,0x10
c00254ca:	05 b0 00 00 00       	add    eax,0xb0
c00254cf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00254d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00254d5:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00254db:	90                   	nop
c00254dc:	c9                   	leave  
c00254dd:	c3                   	ret    

c00254de <APIC::open(int, int, void*)>:
c00254de:	55                   	push   ebp
c00254df:	89 e5                	mov    ebp,esp
c00254e1:	57                   	push   edi
c00254e2:	56                   	push   esi
c00254e3:	53                   	push   ebx
c00254e4:	83 ec 2c             	sub    esp,0x2c
c00254e7:	83 ec 0c             	sub    esp,0xc
c00254ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254ed:	e8 7c ff ff ff       	call   c002546e <APIC::getBase()>
c00254f2:	83 c4 10             	add    esp,0x10
c00254f5:	89 c2                	mov    edx,eax
c00254f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00254fa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025500:	0f b6 f8             	movzx  edi,al
c0025503:	89 d0                	mov    eax,edx
c0025505:	ba 00 00 00 00       	mov    edx,0x0
c002550a:	89 c1                	mov    ecx,eax
c002550c:	80 e5 ff             	and    ch,0xff
c002550f:	89 cb                	mov    ebx,ecx
c0025511:	0f b6 f2             	movzx  esi,dl
c0025514:	89 d8                	mov    eax,ebx
c0025516:	89 f2                	mov    edx,esi
c0025518:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002551b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002551e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025522:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025526:	83 e0 00             	and    eax,0x0
c0025529:	09 d0                	or     eax,edx
c002552b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002552f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025532:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025538:	8d 50 01             	lea    edx,[eax+0x1]
c002553b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002553e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025544:	0f b6 d0             	movzx  edx,al
c0025547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002554a:	83 c2 08             	add    edx,0x8
c002554d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025551:	0f b6 c9             	movzx  ecx,cl
c0025554:	81 c9 00 00 01 00    	or     ecx,0x10000
c002555a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002555e:	83 ec 0c             	sub    esp,0xc
c0025561:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025564:	e8 05 ff ff ff       	call   c002546e <APIC::getBase()>
c0025569:	83 c4 10             	add    esp,0x10
c002556c:	05 f0 00 00 00       	add    eax,0xf0
c0025571:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025574:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025577:	8b 00                	mov    eax,DWORD PTR [eax]
c0025579:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002557c:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025583:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002558a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002558d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025590:	89 10                	mov    DWORD PTR [eax],edx
c0025592:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025599:	a1 f0 01 03 c0       	mov    eax,ds:0xc00301f0
c002559e:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00255a1:	7d 7c                	jge    c002561f <APIC::open(int, int, void*)+0x141>
c00255a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255a6:	8b 04 85 00 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfe00]
c00255ad:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00255b0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255b3:	8b 04 85 00 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfe00]
c00255ba:	c1 e8 08             	shr    eax,0x8
c00255bd:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00255c1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255c4:	8b 04 85 00 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfe00]
c00255cb:	c1 e8 18             	shr    eax,0x18
c00255ce:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00255d1:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00255d5:	75 40                	jne    c0025617 <APIC::open(int, int, void*)+0x139>
c00255d7:	83 ec 0c             	sub    esp,0xc
c00255da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255dd:	e8 8c fe ff ff       	call   c002546e <APIC::getBase()>
c00255e2:	83 c4 10             	add    esp,0x10
c00255e5:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00255e9:	75 07                	jne    c00255f2 <APIC::open(int, int, void*)+0x114>
c00255eb:	ba 60 03 00 00       	mov    edx,0x360
c00255f0:	eb 05                	jmp    c00255f7 <APIC::open(int, int, void*)+0x119>
c00255f2:	ba 50 03 00 00       	mov    edx,0x350
c00255f7:	01 d0                	add    eax,edx
c00255f9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00255fc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00255ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0025601:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025604:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002560b:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002560f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025612:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025615:	89 10                	mov    DWORD PTR [eax],edx
c0025617:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002561a:	e9 7a ff ff ff       	jmp    c0025599 <APIC::open(int, int, void*)+0xbb>
c002561f:	b8 00 00 00 00       	mov    eax,0x0
c0025624:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025627:	5b                   	pop    ebx
c0025628:	5e                   	pop    esi
c0025629:	5f                   	pop    edi
c002562a:	5d                   	pop    ebp
c002562b:	c3                   	ret    

c002562c <IOAPIC::IOAPIC()>:
c002562c:	83 ec 0c             	sub    esp,0xc
c002562f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025633:	83 ec 08             	sub    esp,0x8
c0025636:	68 b4 c4 02 c0       	push   0xc002c4b4
c002563b:	50                   	push   eax
c002563c:	e8 9d e6 fe ff       	call   c0013cde <Device::Device(char const*)>
c0025641:	83 c4 10             	add    esp,0x10
c0025644:	ba dc c5 02 c0       	mov    edx,0xc002c5dc
c0025649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002564d:	89 10                	mov    DWORD PTR [eax],edx
c002564f:	90                   	nop
c0025650:	83 c4 0c             	add    esp,0xc
c0025653:	c3                   	ret    

c0025654 <APIC::APIC()>:
c0025654:	53                   	push   ebx
c0025655:	83 ec 18             	sub    esp,0x18
c0025658:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002565c:	83 ec 08             	sub    esp,0x8
c002565f:	68 bc c4 02 c0       	push   0xc002c4bc
c0025664:	50                   	push   eax
c0025665:	e8 de ed fe ff       	call   c0014448 <InterruptController::InterruptController(char const*)>
c002566a:	83 c4 10             	add    esp,0x10
c002566d:	ba 94 c5 02 c0       	mov    edx,0xc002c594
c0025672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025676:	89 10                	mov    DWORD PTR [eax],edx
c0025678:	a0 c0 1c 03 c0       	mov    al,ds:0xc0031cc0
c002567d:	83 f0 01             	xor    eax,0x1
c0025680:	84 c0                	test   al,al
c0025682:	0f 84 a1 00 00 00    	je     c0025729 <APIC::APIC()+0xd5>
c0025688:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002568d:	a0 a0 02 03 c0       	mov    al,ds:0xc00302a0
c0025692:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025696:	0f 83 86 00 00 00    	jae    c0025722 <APIC::APIC()+0xce>
c002569c:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00256a4:	83 ec 0c             	sub    esp,0xc
c00256a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00256ab:	e8 e9 9e fe ff       	call   c000f599 <malloc>
c00256b0:	83 c4 10             	add    esp,0x10
c00256b3:	89 c3                	mov    ebx,eax
c00256b5:	83 ec 0c             	sub    esp,0xc
c00256b8:	53                   	push   ebx
c00256b9:	e8 6e ff ff ff       	call   c002562c <IOAPIC::IOAPIC()>
c00256be:	83 c4 10             	add    esp,0x10
c00256c1:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00256c5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00256ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00256ce:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c00256d5:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c00256da:	40                   	inc    eax
c00256db:	a3 80 1c 03 c0       	mov    ds:0xc0031c80,eax
c00256e0:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c00256e5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00256eb:	83 ec 08             	sub    esp,0x8
c00256ee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00256f2:	50                   	push   eax
c00256f3:	e8 e2 e3 fe ff       	call   c0013ada <Device::addChild(Device*)>
c00256f8:	83 c4 10             	add    esp,0x10
c00256fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00256ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0025701:	83 c0 08             	add    eax,0x8
c0025704:	8b 00                	mov    eax,DWORD PTR [eax]
c0025706:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002570b:	6a 00                	push   0x0
c002570d:	6a 00                	push   0x0
c002570f:	52                   	push   edx
c0025710:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025714:	ff d0                	call   eax
c0025716:	83 c4 10             	add    esp,0x10
c0025719:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002571d:	e9 6b ff ff ff       	jmp    c002568d <APIC::APIC()+0x39>
c0025722:	c6 05 c0 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031cc0,0x1
c0025729:	90                   	nop
c002572a:	83 c4 18             	add    esp,0x18
c002572d:	5b                   	pop    ebx
c002572e:	c3                   	ret    
c002572f:	90                   	nop

c0025730 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025730:	55                   	push   ebp
c0025731:	89 e5                	mov    ebp,esp
c0025733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025736:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002573c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002573f:	72 1d                	jb     c002575e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025744:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002574a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002574d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025753:	01 d0                	add    eax,edx
c0025755:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025758:	73 04                	jae    c002575e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002575a:	b0 01                	mov    al,0x1
c002575c:	eb 02                	jmp    c0025760 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002575e:	b0 00                	mov    al,0x0
c0025760:	5d                   	pop    ebp
c0025761:	c3                   	ret    

c0025762 <IOAPIC::read(int)>:
c0025762:	55                   	push   ebp
c0025763:	89 e5                	mov    ebp,esp
c0025765:	83 ec 10             	sub    esp,0x10
c0025768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002576b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025771:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025774:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025777:	0f b6 d0             	movzx  edx,al
c002577a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002577d:	89 10                	mov    DWORD PTR [eax],edx
c002577f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025782:	83 c0 10             	add    eax,0x10
c0025785:	8b 00                	mov    eax,DWORD PTR [eax]
c0025787:	c9                   	leave  
c0025788:	c3                   	ret    
c0025789:	90                   	nop

c002578a <IOAPIC::open(int, int, void*)>:
c002578a:	55                   	push   ebp
c002578b:	89 e5                	mov    ebp,esp
c002578d:	57                   	push   edi
c002578e:	56                   	push   esi
c002578f:	53                   	push   ebx
c0025790:	83 ec 0c             	sub    esp,0xc
c0025793:	83 ec 0c             	sub    esp,0xc
c0025796:	68 e7 c4 02 c0       	push   0xc002c4e7
c002579b:	e8 01 cf fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c00257a0:	83 c4 10             	add    esp,0x10
c00257a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257a6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00257a9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00257af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257b8:	8b 14 85 e0 02 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfd20]
c00257bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00257c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257cb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257d1:	8b 14 85 60 03 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfca0]
c00257d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257db:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00257e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257e4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00257ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257ed:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257f3:	0f b6 f8             	movzx  edi,al
c00257f6:	89 d0                	mov    eax,edx
c00257f8:	ba 00 00 00 00       	mov    edx,0x0
c00257fd:	89 c1                	mov    ecx,eax
c00257ff:	80 e5 ff             	and    ch,0xff
c0025802:	89 cb                	mov    ebx,ecx
c0025804:	0f b6 f2             	movzx  esi,dl
c0025807:	89 d8                	mov    eax,ebx
c0025809:	89 f2                	mov    edx,esi
c002580b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002580e:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025811:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025815:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025819:	83 e0 00             	and    eax,0x0
c002581c:	09 d0                	or     eax,edx
c002581e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025825:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002582b:	8d 50 01             	lea    edx,[eax+0x1]
c002582e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025831:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025837:	0f b6 d0             	movzx  edx,al
c002583a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002583d:	83 c2 08             	add    edx,0x8
c0025840:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025844:	0f b6 c9             	movzx  ecx,cl
c0025847:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002584d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025851:	83 ec 08             	sub    esp,0x8
c0025854:	6a 01                	push   0x1
c0025856:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025859:	e8 04 ff ff ff       	call   c0025762 <IOAPIC::read(int)>
c002585e:	83 c4 10             	add    esp,0x10
c0025861:	c1 f8 10             	sar    eax,0x10
c0025864:	0f b6 c0             	movzx  eax,al
c0025867:	8d 50 01             	lea    edx,[eax+0x1]
c002586a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002586d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025873:	b8 00 00 00 00       	mov    eax,0x0
c0025878:	8d 65 f4             	lea    esp,[ebp-0xc]
c002587b:	5b                   	pop    ebx
c002587c:	5e                   	pop    esi
c002587d:	5f                   	pop    edi
c002587e:	5d                   	pop    ebp
c002587f:	c3                   	ret    

c0025880 <IOAPIC::write(int, int)>:
c0025880:	55                   	push   ebp
c0025881:	89 e5                	mov    ebp,esp
c0025883:	83 ec 10             	sub    esp,0x10
c0025886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025889:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002588f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025892:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025895:	0f b6 d0             	movzx  edx,al
c0025898:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002589b:	89 10                	mov    DWORD PTR [eax],edx
c002589d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258a0:	8d 50 10             	lea    edx,[eax+0x10]
c00258a3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258a6:	89 02                	mov    DWORD PTR [edx],eax
c00258a8:	90                   	nop
c00258a9:	c9                   	leave  
c00258aa:	c3                   	ret    
c00258ab:	90                   	nop

c00258ac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00258ac:	55                   	push   ebp
c00258ad:	89 e5                	mov    ebp,esp
c00258af:	53                   	push   ebx
c00258b0:	83 ec 2c             	sub    esp,0x2c
c00258b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258b6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00258b9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00258bc:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00258bf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00258c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258c5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00258c8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00258cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258ce:	88 d8                	mov    al,bl
c00258d0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00258d3:	88 c8                	mov    al,cl
c00258d5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00258d8:	88 d0                	mov    al,dl
c00258da:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00258dd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00258e1:	83 c0 08             	add    eax,0x8
c00258e4:	01 c0                	add    eax,eax
c00258e6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00258e9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00258ed:	83 c0 08             	add    eax,0x8
c00258f0:	01 c0                	add    eax,eax
c00258f2:	40                   	inc    eax
c00258f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00258f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00258f9:	50                   	push   eax
c00258fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258fd:	e8 60 fe ff ff       	call   c0025762 <IOAPIC::read(int)>
c0025902:	83 c4 08             	add    esp,0x8
c0025905:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025908:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002590f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025912:	c1 e0 18             	shl    eax,0x18
c0025915:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025918:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002591b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002591e:	52                   	push   edx
c002591f:	50                   	push   eax
c0025920:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025923:	e8 58 ff ff ff       	call   c0025880 <IOAPIC::write(int, int)>
c0025928:	83 c4 0c             	add    esp,0xc
c002592b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002592e:	50                   	push   eax
c002592f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025932:	e8 2b fe ff ff       	call   c0025762 <IOAPIC::read(int)>
c0025937:	83 c4 08             	add    esp,0x8
c002593a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002593d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025944:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002594b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025952:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025956:	74 09                	je     c0025961 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025958:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002595f:	eb 07                	jmp    c0025968 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025961:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025968:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002596c:	74 09                	je     c0025977 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002596e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025975:	eb 07                	jmp    c002597e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025977:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002597e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025985:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025989:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002598c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002598f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025992:	52                   	push   edx
c0025993:	50                   	push   eax
c0025994:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025997:	e8 e4 fe ff ff       	call   c0025880 <IOAPIC::write(int, int)>
c002599c:	83 c4 0c             	add    esp,0xc
c002599f:	90                   	nop
c00259a0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00259a3:	c9                   	leave  
c00259a4:	c3                   	ret    
c00259a5:	90                   	nop

c00259a6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00259a6:	55                   	push   ebp
c00259a7:	89 e5                	mov    ebp,esp
c00259a9:	57                   	push   edi
c00259aa:	56                   	push   esi
c00259ab:	53                   	push   ebx
c00259ac:	83 ec 2c             	sub    esp,0x2c
c00259af:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00259b2:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00259b5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00259b9:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00259bd:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00259c1:	74 5a                	je     c0025a1d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00259c3:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00259c7:	7f 44                	jg     c0025a0d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00259c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259cc:	05 80 cb 02 c0       	add    eax,0xc002cb80
c00259d1:	8a 00                	mov    al,BYTE PTR [eax]
c00259d3:	0f b6 c0             	movzx  eax,al
c00259d6:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00259d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259dc:	66 8b 84 00 80 02 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfd80]
c00259e4:	0f b7 c0             	movzx  eax,ax
c00259e7:	83 e0 02             	and    eax,0x2
c00259ea:	85 c0                	test   eax,eax
c00259ec:	74 04                	je     c00259f2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00259ee:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00259f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259f5:	66 8b 84 00 80 02 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfd80]
c00259fd:	0f b7 c0             	movzx  eax,ax
c0025a00:	83 e0 08             	and    eax,0x8
c0025a03:	85 c0                	test   eax,eax
c0025a05:	74 16                	je     c0025a1d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a07:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a0b:	eb 10                	jmp    c0025a1d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a0d:	83 ec 0c             	sub    esp,0xc
c0025a10:	68 f8 c4 02 c0       	push   0xc002c4f8
c0025a15:	e8 f3 43 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0025a1a:	83 c4 10             	add    esp,0x10
c0025a1d:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025a21:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0025a26:	83 ec 08             	sub    esp,0x8
c0025a29:	50                   	push   eax
c0025a2a:	68 30 c5 02 c0       	push   0xc002c530
c0025a2f:	e8 6d cc fe ff       	call   c00126a1 <Dbg::kprintf(char const*, ...)>
c0025a34:	83 c4 10             	add    esp,0x10
c0025a37:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025a3e:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0025a43:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025a46:	7d 67                	jge    c0025aaf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025a48:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a4b:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c0025a52:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a55:	83 ec 08             	sub    esp,0x8
c0025a58:	52                   	push   edx
c0025a59:	50                   	push   eax
c0025a5a:	e8 d1 fc ff ff       	call   c0025730 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025a5f:	83 c4 10             	add    esp,0x10
c0025a62:	84 c0                	test   al,al
c0025a64:	74 44                	je     c0025aaa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025a66:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a69:	8b 1c 85 a0 1c 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce360]
c0025a70:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025a74:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025a77:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025a7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a7e:	83 c0 20             	add    eax,0x20
c0025a81:	0f b6 f0             	movzx  esi,al
c0025a84:	b8 00 00 00 00       	mov    eax,0x0
c0025a89:	99                   	cdq    
c0025a8a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025a8d:	0f b6 c9             	movzx  ecx,cl
c0025a90:	83 ec 04             	sub    esp,0x4
c0025a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025a96:	57                   	push   edi
c0025a97:	56                   	push   esi
c0025a98:	52                   	push   edx
c0025a99:	50                   	push   eax
c0025a9a:	51                   	push   ecx
c0025a9b:	53                   	push   ebx
c0025a9c:	e8 0b fe ff ff       	call   c00258ac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025aa1:	83 c4 20             	add    esp,0x20
c0025aa4:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025aa8:	eb 05                	jmp    c0025aaf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025aaa:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025aad:	eb 8f                	jmp    c0025a3e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025aaf:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025ab2:	83 f0 01             	xor    eax,0x1
c0025ab5:	84 c0                	test   al,al
c0025ab7:	74 10                	je     c0025ac9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025ab9:	83 ec 0c             	sub    esp,0xc
c0025abc:	68 47 c5 02 c0       	push   0xc002c547
c0025ac1:	e8 47 43 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0025ac6:	83 c4 10             	add    esp,0x10
c0025ac9:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025acd:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025ad4:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025ad8:	7f 65                	jg     c0025b3f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025add:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ae0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ae7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025aea:	01 ca                	add    edx,ecx
c0025aec:	83 c2 54             	add    edx,0x54
c0025aef:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025af3:	85 c0                	test   eax,eax
c0025af5:	75 43                	jne    c0025b3a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025afa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025afd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b04:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b07:	01 ca                	add    edx,ecx
c0025b09:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025b0c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025b0f:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b16:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b19:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b20:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b23:	01 ca                	add    edx,ecx
c0025b25:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025b2b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025b2e:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b35:	83 e8 20             	sub    eax,0x20
c0025b38:	eb 1a                	jmp    c0025b54 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025b3a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025b3d:	eb 95                	jmp    c0025ad4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025b3f:	83 ec 0c             	sub    esp,0xc
c0025b42:	68 54 c5 02 c0       	push   0xc002c554
c0025b47:	e8 c1 42 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0025b4c:	83 c4 10             	add    esp,0x10
c0025b4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025b54:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b57:	5b                   	pop    ebx
c0025b58:	5e                   	pop    esi
c0025b59:	5f                   	pop    edi
c0025b5a:	5d                   	pop    ebp
c0025b5b:	c3                   	ret    

c0025b5c <PIC::disable()>:
c0025b5c:	55                   	push   ebp
c0025b5d:	89 e5                	mov    ebp,esp
c0025b5f:	83 ec 10             	sub    esp,0x10
c0025b62:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025b68:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025b6c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025b6f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025b73:	ee                   	out    dx,al
c0025b74:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025b7a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025b7e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025b81:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025b85:	ee                   	out    dx,al
c0025b86:	90                   	nop
c0025b87:	c9                   	leave  
c0025b88:	c3                   	ret    
c0025b89:	90                   	nop

c0025b8a <PIC::close(int, int, void*)>:
c0025b8a:	55                   	push   ebp
c0025b8b:	89 e5                	mov    ebp,esp
c0025b8d:	83 ec 08             	sub    esp,0x8
c0025b90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b93:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b95:	83 c0 3c             	add    eax,0x3c
c0025b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b9a:	83 ec 0c             	sub    esp,0xc
c0025b9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ba0:	ff d0                	call   eax
c0025ba2:	83 c4 10             	add    esp,0x10
c0025ba5:	b8 00 00 00 00       	mov    eax,0x0
c0025baa:	c9                   	leave  
c0025bab:	c3                   	ret    

c0025bac <PIC::PIC()>:
c0025bac:	83 ec 0c             	sub    esp,0xc
c0025baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bb3:	83 ec 08             	sub    esp,0x8
c0025bb6:	68 00 c6 02 c0       	push   0xc002c600
c0025bbb:	50                   	push   eax
c0025bbc:	e8 87 e8 fe ff       	call   c0014448 <InterruptController::InterruptController(char const*)>
c0025bc1:	83 c4 10             	add    esp,0x10
c0025bc4:	ba 2c c6 02 c0       	mov    edx,0xc002c62c
c0025bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bcd:	89 10                	mov    DWORD PTR [eax],edx
c0025bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bd3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025bd9:	0f b6 d0             	movzx  edx,al
c0025bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025be0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025beb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025bf1:	0f b6 d0             	movzx  edx,al
c0025bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bf8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c01:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c07:	8d 50 01             	lea    edx,[eax+0x1]
c0025c0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c0e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c14:	0f b6 d0             	movzx  edx,al
c0025c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c1b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c1f:	83 e1 3f             	and    ecx,0x3f
c0025c22:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c2a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c30:	0f b6 d0             	movzx  edx,al
c0025c33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c37:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c42:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c48:	0f b6 d0             	movzx  edx,al
c0025c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c4f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c58:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c5e:	8d 50 01             	lea    edx,[eax+0x1]
c0025c61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c65:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c6b:	0f b6 d0             	movzx  edx,al
c0025c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c72:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c76:	83 e1 3f             	and    ecx,0x3f
c0025c79:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025c7d:	90                   	nop
c0025c7e:	83 c4 0c             	add    esp,0xc
c0025c81:	c3                   	ret    

c0025c82 <PIC::ioWait()>:
c0025c82:	eb 00                	jmp    c0025c84 <PIC::ioWait()+0x2>
c0025c84:	eb 00                	jmp    c0025c86 <PIC::ioWait()+0x4>
c0025c86:	90                   	nop
c0025c87:	c3                   	ret    

c0025c88 <PIC::getIRQReg(int)>:
c0025c88:	55                   	push   ebp
c0025c89:	89 e5                	mov    ebp,esp
c0025c8b:	83 ec 10             	sub    esp,0x10
c0025c8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c91:	0f b6 c0             	movzx  eax,al
c0025c94:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025c9a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025c9d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ca0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025ca4:	ee                   	out    dx,al
c0025ca5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ca8:	0f b6 c0             	movzx  eax,al
c0025cab:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025cb1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025cb4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025cb7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025cbb:	ee                   	out    dx,al
c0025cbc:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025cc2:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025cc6:	89 c2                	mov    edx,eax
c0025cc8:	ec                   	in     al,dx
c0025cc9:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025ccc:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ccf:	0f b6 c0             	movzx  eax,al
c0025cd2:	c1 e0 08             	shl    eax,0x8
c0025cd5:	89 c1                	mov    ecx,eax
c0025cd7:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025cdd:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025ce1:	89 c2                	mov    edx,eax
c0025ce3:	ec                   	in     al,dx
c0025ce4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025ce7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025cea:	0f b6 c0             	movzx  eax,al
c0025ced:	09 c8                	or     eax,ecx
c0025cef:	c9                   	leave  
c0025cf0:	c3                   	ret    
c0025cf1:	90                   	nop

c0025cf2 <PIC::eoi(unsigned char)>:
c0025cf2:	55                   	push   ebp
c0025cf3:	89 e5                	mov    ebp,esp
c0025cf5:	83 ec 14             	sub    esp,0x14
c0025cf8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cfb:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025cfe:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d02:	75 1e                	jne    c0025d22 <PIC::eoi(unsigned char)+0x30>
c0025d04:	6a 0b                	push   0xb
c0025d06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d09:	e8 7a ff ff ff       	call   c0025c88 <PIC::getIRQReg(int)>
c0025d0e:	83 c4 08             	add    esp,0x8
c0025d11:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025d15:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025d19:	25 80 00 00 00       	and    eax,0x80
c0025d1e:	85 c0                	test   eax,eax
c0025d20:	74 5f                	je     c0025d81 <PIC::eoi(unsigned char)+0x8f>
c0025d22:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025d26:	75 2d                	jne    c0025d55 <PIC::eoi(unsigned char)+0x63>
c0025d28:	6a 0b                	push   0xb
c0025d2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d2d:	e8 56 ff ff ff       	call   c0025c88 <PIC::getIRQReg(int)>
c0025d32:	83 c4 08             	add    esp,0x8
c0025d35:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025d39:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d3c:	66 85 c0             	test   ax,ax
c0025d3f:	78 14                	js     c0025d55 <PIC::eoi(unsigned char)+0x63>
c0025d41:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025d47:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025d4b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d4e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d52:	ee                   	out    dx,al
c0025d53:	eb 2d                	jmp    c0025d82 <PIC::eoi(unsigned char)+0x90>
c0025d55:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d59:	76 12                	jbe    c0025d6d <PIC::eoi(unsigned char)+0x7b>
c0025d5b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025d61:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025d65:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d68:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d6c:	ee                   	out    dx,al
c0025d6d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025d73:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025d77:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025d7a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025d7e:	ee                   	out    dx,al
c0025d7f:	eb 01                	jmp    c0025d82 <PIC::eoi(unsigned char)+0x90>
c0025d81:	90                   	nop
c0025d82:	c9                   	leave  
c0025d83:	c3                   	ret    

c0025d84 <PIC::remap()>:
c0025d84:	55                   	push   ebp
c0025d85:	89 e5                	mov    ebp,esp
c0025d87:	83 ec 48             	sub    esp,0x48
c0025d8a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025d91:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025d98:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025d9e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025da1:	89 c2                	mov    edx,eax
c0025da3:	ec                   	in     al,dx
c0025da4:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025da7:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025daa:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025dad:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025db3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025db6:	89 c2                	mov    edx,eax
c0025db8:	ec                   	in     al,dx
c0025db9:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025dbc:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025dbf:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025dc2:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025dc8:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025dcc:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025dcf:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025dd2:	ee                   	out    dx,al
c0025dd3:	83 ec 0c             	sub    esp,0xc
c0025dd6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dd9:	e8 a4 fe ff ff       	call   c0025c82 <PIC::ioWait()>
c0025dde:	83 c4 10             	add    esp,0x10
c0025de1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025de7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025deb:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025dee:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025df1:	ee                   	out    dx,al
c0025df2:	83 ec 0c             	sub    esp,0xc
c0025df5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025df8:	e8 85 fe ff ff       	call   c0025c82 <PIC::ioWait()>
c0025dfd:	83 c4 10             	add    esp,0x10
c0025e00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025e03:	0f b6 c0             	movzx  eax,al
c0025e06:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025e0c:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025e0f:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025e12:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025e15:	ee                   	out    dx,al
c0025e16:	83 ec 0c             	sub    esp,0xc
c0025e19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e1c:	e8 61 fe ff ff       	call   c0025c82 <PIC::ioWait()>
c0025e21:	83 c4 10             	add    esp,0x10
c0025e24:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025e27:	0f b6 c0             	movzx  eax,al
c0025e2a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025e30:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025e33:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025e36:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025e39:	ee                   	out    dx,al
c0025e3a:	83 ec 0c             	sub    esp,0xc
c0025e3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e40:	e8 3d fe ff ff       	call   c0025c82 <PIC::ioWait()>
c0025e45:	83 c4 10             	add    esp,0x10
c0025e48:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025e4e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025e52:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025e55:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025e58:	ee                   	out    dx,al
c0025e59:	83 ec 0c             	sub    esp,0xc
c0025e5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e5f:	e8 1e fe ff ff       	call   c0025c82 <PIC::ioWait()>
c0025e64:	83 c4 10             	add    esp,0x10
c0025e67:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025e6d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025e71:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025e74:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e77:	ee                   	out    dx,al
c0025e78:	83 ec 0c             	sub    esp,0xc
c0025e7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e7e:	e8 ff fd ff ff       	call   c0025c82 <PIC::ioWait()>
c0025e83:	83 c4 10             	add    esp,0x10
c0025e86:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025e8c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025e90:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025e93:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025e96:	ee                   	out    dx,al
c0025e97:	83 ec 0c             	sub    esp,0xc
c0025e9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e9d:	e8 e0 fd ff ff       	call   c0025c82 <PIC::ioWait()>
c0025ea2:	83 c4 10             	add    esp,0x10
c0025ea5:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025eab:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025eaf:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025eb2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025eb5:	ee                   	out    dx,al
c0025eb6:	83 ec 0c             	sub    esp,0xc
c0025eb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ebc:	e8 c1 fd ff ff       	call   c0025c82 <PIC::ioWait()>
c0025ec1:	83 c4 10             	add    esp,0x10
c0025ec4:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025ec8:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025ece:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025ed1:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025ed4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025ed7:	ee                   	out    dx,al
c0025ed8:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025edc:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025ee2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025ee5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025ee8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025eeb:	ee                   	out    dx,al
c0025eec:	90                   	nop
c0025eed:	c9                   	leave  
c0025eee:	c3                   	ret    
c0025eef:	90                   	nop

c0025ef0 <PIC::open(int, int, void*)>:
c0025ef0:	55                   	push   ebp
c0025ef1:	89 e5                	mov    ebp,esp
c0025ef3:	83 ec 18             	sub    esp,0x18
c0025ef6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025efc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025f00:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f03:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f07:	ee                   	out    dx,al
c0025f08:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025f0e:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025f12:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f15:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f19:	ee                   	out    dx,al
c0025f1a:	83 ec 0c             	sub    esp,0xc
c0025f1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f20:	e8 5f fe ff ff       	call   c0025d84 <PIC::remap()>
c0025f25:	83 c4 10             	add    esp,0x10
c0025f28:	b8 00 00 00 00       	mov    eax,0x0
c0025f2d:	c9                   	leave  
c0025f2e:	c3                   	ret    
c0025f2f:	90                   	nop

c0025f30 <APICTimer::close(int, int, void*)>:
c0025f30:	b8 00 00 00 00       	mov    eax,0x0
c0025f35:	c3                   	ret    

c0025f36 <apicTimerHandler(regs*, void*)>:
c0025f36:	83 ec 0c             	sub    esp,0xc
c0025f39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f3f:	99                   	cdq    
c0025f40:	52                   	push   edx
c0025f41:	50                   	push   eax
c0025f42:	6a 00                	push   0x0
c0025f44:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025f49:	e8 96 07 00 00       	call   c00266e4 <__udivdi3>
c0025f4e:	83 c4 10             	add    esp,0x10
c0025f51:	83 ec 08             	sub    esp,0x8
c0025f54:	52                   	push   edx
c0025f55:	50                   	push   eax
c0025f56:	e8 44 06 ff ff       	call   c001659f <timerHandler(unsigned long long)>
c0025f5b:	83 c4 10             	add    esp,0x10
c0025f5e:	90                   	nop
c0025f5f:	83 c4 0c             	add    esp,0xc
c0025f62:	c3                   	ret    
c0025f63:	90                   	nop

c0025f64 <APICTimer::write(int)>:
c0025f64:	53                   	push   ebx
c0025f65:	83 ec 28             	sub    esp,0x28
c0025f68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025f6c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025f70:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025f76:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0025f7b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025f81:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025f87:	83 ec 0c             	sub    esp,0xc
c0025f8a:	50                   	push   eax
c0025f8b:	e8 de f4 ff ff       	call   c002546e <APIC::getBase()>
c0025f90:	83 c4 10             	add    esp,0x10
c0025f93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025f97:	a1 90 df 02 c0       	mov    eax,ds:0xc002df90
c0025f9c:	8b 15 94 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df94
c0025fa2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025fa6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025faa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fae:	05 e0 03 00 00       	add    eax,0x3e0
c0025fb3:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025fb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fbd:	05 80 03 00 00       	add    eax,0x380
c0025fc2:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025fc8:	fb                   	sti    
c0025fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fcd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025fd1:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025fd6:	83 d2 00             	adc    edx,0x0
c0025fd9:	89 c1                	mov    ecx,eax
c0025fdb:	89 d3                	mov    ebx,edx
c0025fdd:	a1 90 df 02 c0       	mov    eax,ds:0xc002df90
c0025fe2:	8b 15 94 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df94
c0025fe8:	39 c8                	cmp    eax,ecx
c0025fea:	89 d0                	mov    eax,edx
c0025fec:	19 d8                	sbb    eax,ebx
c0025fee:	73 02                	jae    c0025ff2 <APICTimer::write(int)+0x8e>
c0025ff0:	eb d7                	jmp    c0025fc9 <APICTimer::write(int)+0x65>
c0025ff2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ff6:	05 20 03 00 00       	add    eax,0x320
c0025ffb:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026001:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026005:	05 90 03 00 00       	add    eax,0x390
c002600a:	8b 00                	mov    eax,DWORD PTR [eax]
c002600c:	f7 d0                	not    eax
c002600e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026012:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026016:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002601a:	ba 00 00 00 00       	mov    edx,0x0
c002601f:	f7 f3                	div    ebx
c0026021:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026025:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026029:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002602f:	0d 00 00 02 00       	or     eax,0x20000
c0026034:	89 c2                	mov    edx,eax
c0026036:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002603a:	05 20 03 00 00       	add    eax,0x320
c002603f:	89 10                	mov    DWORD PTR [eax],edx
c0026041:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026045:	05 e0 03 00 00       	add    eax,0x3e0
c002604a:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026054:	05 80 03 00 00       	add    eax,0x380
c0026059:	89 c2                	mov    edx,eax
c002605b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002605f:	89 02                	mov    DWORD PTR [edx],eax
c0026061:	90                   	nop
c0026062:	83 c4 28             	add    esp,0x28
c0026065:	5b                   	pop    ebx
c0026066:	c3                   	ret    
c0026067:	90                   	nop

c0026068 <APICTimer::open(int, int, void*)>:
c0026068:	57                   	push   edi
c0026069:	56                   	push   esi
c002606a:	53                   	push   ebx
c002606b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002606f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026071:	83 c0 24             	add    eax,0x24
c0026074:	8b 00                	mov    eax,DWORD PTR [eax]
c0026076:	83 ec 08             	sub    esp,0x8
c0026079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002607d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026081:	ff d0                	call   eax
c0026083:	83 c4 10             	add    esp,0x10
c0026086:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c002608b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026091:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026097:	83 ec 0c             	sub    esp,0xc
c002609a:	50                   	push   eax
c002609b:	e8 ce f3 ff ff       	call   c002546e <APIC::getBase()>
c00260a0:	83 c4 10             	add    esp,0x10
c00260a3:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00260a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ad:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260b3:	0f b6 f8             	movzx  edi,al
c00260b6:	89 d0                	mov    eax,edx
c00260b8:	ba 00 00 00 00       	mov    edx,0x0
c00260bd:	89 c1                	mov    ecx,eax
c00260bf:	80 e5 ff             	and    ch,0xff
c00260c2:	89 cb                	mov    ebx,ecx
c00260c4:	0f b6 f2             	movzx  esi,dl
c00260c7:	89 d8                	mov    eax,ebx
c00260c9:	89 f2                	mov    edx,esi
c00260cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00260cf:	8d 5f 08             	lea    ebx,[edi+0x8]
c00260d2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00260d6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00260da:	83 e0 00             	and    eax,0x0
c00260dd:	09 d0                	or     eax,edx
c00260df:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00260e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260e7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260ed:	8d 50 01             	lea    edx,[eax+0x1]
c00260f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00260f4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00260fa:	0f b6 d0             	movzx  edx,al
c00260fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026101:	83 c2 08             	add    edx,0x8
c0026104:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026108:	0f b6 c9             	movzx  ecx,cl
c002610b:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026111:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026119:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002611d:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026127:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002612b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026131:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026135:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002613b:	83 ec 0c             	sub    esp,0xc
c002613e:	51                   	push   ecx
c002613f:	6a 01                	push   0x1
c0026141:	68 36 5f 02 c0       	push   0xc0025f36
c0026146:	52                   	push   edx
c0026147:	50                   	push   eax
c0026148:	e8 05 d9 fe ff       	call   c0013a52 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002614d:	83 c4 20             	add    esp,0x20
c0026150:	89 c2                	mov    edx,eax
c0026152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026156:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002615c:	b8 00 00 00 00       	mov    eax,0x0
c0026161:	5b                   	pop    ebx
c0026162:	5e                   	pop    esi
c0026163:	5f                   	pop    edi
c0026164:	c3                   	ret    
c0026165:	90                   	nop

c0026166 <APICTimer::APICTimer()>:
c0026166:	83 ec 0c             	sub    esp,0xc
c0026169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002616d:	83 ec 08             	sub    esp,0x8
c0026170:	68 6c c6 02 c0       	push   0xc002c66c
c0026175:	50                   	push   eax
c0026176:	e8 95 03 ff ff       	call   c0016510 <Timer::Timer(char const*)>
c002617b:	83 c4 10             	add    esp,0x10
c002617e:	ba 80 c6 02 c0       	mov    edx,0xc002c680
c0026183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026187:	89 10                	mov    DWORD PTR [eax],edx
c0026189:	90                   	nop
c002618a:	83 c4 0c             	add    esp,0xc
c002618d:	c3                   	ret    

c002618e <PIT::write(int)>:
c002618e:	83 ec 10             	sub    esp,0x10
c0026191:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026195:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026199:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002619f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00261a3:	a3 c4 1c 03 c0       	mov    ds:0xc0031cc4,eax
c00261a8:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00261ad:	99                   	cdq    
c00261ae:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00261b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00261b6:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00261bd:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00261c2:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00261c6:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00261cb:	ee                   	out    dx,al
c00261cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261d0:	0f b6 c0             	movzx  eax,al
c00261d3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00261da:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00261de:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00261e2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00261e7:	ee                   	out    dx,al
c00261e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261ec:	c1 f8 08             	sar    eax,0x8
c00261ef:	0f b6 c0             	movzx  eax,al
c00261f2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00261f9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00261fd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026201:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026206:	ee                   	out    dx,al
c0026207:	90                   	nop
c0026208:	83 c4 10             	add    esp,0x10
c002620b:	c3                   	ret    

c002620c <pitHandler(regs*, void*)>:
c002620c:	83 ec 0c             	sub    esp,0xc
c002620f:	a1 c4 1c 03 c0       	mov    eax,ds:0xc0031cc4
c0026214:	99                   	cdq    
c0026215:	52                   	push   edx
c0026216:	50                   	push   eax
c0026217:	6a 00                	push   0x0
c0026219:	68 00 ca 9a 3b       	push   0x3b9aca00
c002621e:	e8 c1 04 00 00       	call   c00266e4 <__udivdi3>
c0026223:	83 c4 10             	add    esp,0x10
c0026226:	83 ec 08             	sub    esp,0x8
c0026229:	52                   	push   edx
c002622a:	50                   	push   eax
c002622b:	e8 6f 03 ff ff       	call   c001659f <timerHandler(unsigned long long)>
c0026230:	83 c4 10             	add    esp,0x10
c0026233:	90                   	nop
c0026234:	83 c4 0c             	add    esp,0xc
c0026237:	c3                   	ret    

c0026238 <PIT::open(int, int, void*)>:
c0026238:	83 ec 0c             	sub    esp,0xc
c002623b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002623f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026241:	83 c0 24             	add    eax,0x24
c0026244:	8b 00                	mov    eax,DWORD PTR [eax]
c0026246:	83 ec 08             	sub    esp,0x8
c0026249:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002624d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026251:	ff d0                	call   eax
c0026253:	83 c4 10             	add    esp,0x10
c0026256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002625a:	83 ec 0c             	sub    esp,0xc
c002625d:	6a 00                	push   0x0
c002625f:	6a 01                	push   0x1
c0026261:	68 0c 62 02 c0       	push   0xc002620c
c0026266:	6a 00                	push   0x0
c0026268:	50                   	push   eax
c0026269:	e8 e4 d7 fe ff       	call   c0013a52 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002626e:	83 c4 20             	add    esp,0x20
c0026271:	89 c2                	mov    edx,eax
c0026273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026277:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002627d:	b8 00 00 00 00       	mov    eax,0x0
c0026282:	83 c4 0c             	add    esp,0xc
c0026285:	c3                   	ret    

c0026286 <PIT::close(int, int, void*)>:
c0026286:	83 ec 0c             	sub    esp,0xc
c0026289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002628d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002629b:	6a 01                	push   0x1
c002629d:	68 0c 62 02 c0       	push   0xc002620c
c00262a2:	6a 00                	push   0x0
c00262a4:	50                   	push   eax
c00262a5:	e8 f2 d7 fe ff       	call   c0013a9c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00262aa:	83 c4 10             	add    esp,0x10
c00262ad:	b8 00 00 00 00       	mov    eax,0x0
c00262b2:	83 c4 0c             	add    esp,0xc
c00262b5:	c3                   	ret    

c00262b6 <PIT::PIT()>:
c00262b6:	83 ec 0c             	sub    esp,0xc
c00262b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262bd:	83 ec 08             	sub    esp,0x8
c00262c0:	68 a8 c6 02 c0       	push   0xc002c6a8
c00262c5:	50                   	push   eax
c00262c6:	e8 45 02 ff ff       	call   c0016510 <Timer::Timer(char const*)>
c00262cb:	83 c4 10             	add    esp,0x10
c00262ce:	ba d0 c6 02 c0       	mov    edx,0xc002c6d0
c00262d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d7:	89 10                	mov    DWORD PTR [eax],edx
c00262d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262dd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262e3:	0f b6 d0             	movzx  edx,al
c00262e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ea:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00262f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262fb:	0f b6 d0             	movzx  edx,al
c00262fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026302:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002630b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026311:	8d 50 01             	lea    edx,[eax+0x1]
c0026314:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026318:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002631e:	0f b6 d0             	movzx  edx,al
c0026321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026325:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026329:	83 e1 3f             	and    ecx,0x3f
c002632c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026330:	90                   	nop
c0026331:	83 c4 0c             	add    esp,0xc
c0026334:	c3                   	ret    
c0026335:	66 90                	xchg   ax,ax
c0026337:	66 90                	xchg   ax,ax
c0026339:	66 90                	xchg   ax,ax
c002633b:	66 90                	xchg   ax,ax
c002633d:	66 90                	xchg   ax,ax
c002633f:	90                   	nop

c0026340 <avxDetect>:
c0026340:	b8 00 00 00 00       	mov    eax,0x0
c0026345:	c3                   	ret    

c0026346 <avxSave>:
c0026346:	c3                   	ret    

c0026347 <avxLoad>:
c0026347:	c3                   	ret    

c0026348 <avxInit>:
c0026348:	c3                   	ret    

c0026349 <avxClose>:
c0026349:	c3                   	ret    

c002634a <wouldSheSayYes>:
c002634a:	c3                   	ret    
c002634b:	49                   	dec    ecx
c002634c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026350:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026354:	75 20                	jne    c0026376 <sseDetect.noSSE+0x1>
c0026356:	4e                   	dec    esi
c0026357:	79 61                	jns    c00263ba <x87Detect+0x14>
c0026359:	68 2e 2e 2e 00       	push   0x2e2e2e
c002635e:	66 90                	xchg   ax,ax

c0026360 <absolutelyNoChanceInHell>:
c0026360:	b8 01 00 00 00       	mov    eax,0x1
c0026365:	0f a2                	cpuid  
c0026367:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002636d:	74 06                	je     c0026375 <sseDetect.noSSE>
c002636f:	b8 01 00 00 00       	mov    eax,0x1
c0026374:	c3                   	ret    

c0026375 <sseDetect.noSSE>:
c0026375:	31 c0                	xor    eax,eax
c0026377:	c3                   	ret    

c0026378 <sseSave>:
c0026378:	0f ae 44 24 04       	fxsave [esp+0x4]
c002637d:	c3                   	ret    

c002637e <sseLoad>:
c002637e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026383:	c3                   	ret    

c0026384 <sseInit>:
c0026384:	e8 49 00 00 00       	call   c00263d2 <x87Init>
c0026389:	0f 20 e0             	mov    eax,cr4
c002638c:	66 0d 00 06          	or     ax,0x600
c0026390:	0f 22 e0             	mov    cr4,eax
c0026393:	c3                   	ret    

c0026394 <sseClose>:
c0026394:	c3                   	ret    
c0026395:	66 90                	xchg   ax,ax
c0026397:	66 90                	xchg   ax,ax
c0026399:	66 90                	xchg   ax,ax
c002639b:	66 90                	xchg   ax,ax
c002639d:	66 90                	xchg   ax,ax
c002639f:	90                   	nop

c00263a0 <value_37F>:
c00263a0:	7f 03                	jg     c00263a5 <value_37A+0x1>

c00263a2 <value_37E>:
c00263a2:	7e 03                	jle    c00263a7 <x87Detect+0x1>

c00263a4 <value_37A>:
c00263a4:	7a 03                	jp     c00263a9 <x87Detect+0x3>

c00263a6 <x87Detect>:
c00263a6:	b8 01 00 00 00       	mov    eax,0x1
c00263ab:	0f a2                	cpuid  
c00263ad:	f7 c2 01 00 00 00    	test   edx,0x1
c00263b3:	74 06                	je     c00263bb <x87Detect.nox87>
c00263b5:	b8 01 00 00 00       	mov    eax,0x1
c00263ba:	c3                   	ret    

c00263bb <x87Detect.nox87>:
c00263bb:	b8 00 00 00 00       	mov    eax,0x0
c00263c0:	c3                   	ret    

c00263c1 <x87Save>:
c00263c1:	55                   	push   ebp
c00263c2:	89 e5                	mov    ebp,esp
c00263c4:	9b dd 75 08          	fsave  [ebp+0x8]
c00263c8:	c9                   	leave  
c00263c9:	c3                   	ret    

c00263ca <x87Load>:
c00263ca:	55                   	push   ebp
c00263cb:	89 e5                	mov    ebp,esp
c00263cd:	dd 65 08             	frstor [ebp+0x8]
c00263d0:	c9                   	leave  
c00263d1:	c3                   	ret    

c00263d2 <x87Init>:
c00263d2:	9b db e3             	finit  
c00263d5:	0f 20 c0             	mov    eax,cr0
c00263d8:	66 25 fb ff          	and    ax,0xfffb
c00263dc:	66 0d 22 00          	or     ax,0x22
c00263e0:	0f 22 c0             	mov    cr0,eax
c00263e3:	0f 06                	clts   
c00263e5:	d9 2d a4 63 02 c0    	fldcw  WORD PTR ds:0xc00263a4
c00263eb:	c3                   	ret    

c00263ec <x87Close>:
c00263ec:	c3                   	ret    
c00263ed:	66 90                	xchg   ax,ax
c00263ef:	90                   	nop

c00263f0 <__do_global_ctors_aux>:
c00263f0:	a1 e4 8f 02 c0       	mov    eax,ds:0xc0028fe4
c00263f5:	83 f8 ff             	cmp    eax,0xffffffff
c00263f8:	74 1a                	je     c0026414 <__do_global_ctors_aux+0x24>
c00263fa:	55                   	push   ebp
c00263fb:	89 e5                	mov    ebp,esp
c00263fd:	53                   	push   ebx
c00263fe:	52                   	push   edx
c00263ff:	bb e4 8f 02 c0       	mov    ebx,0xc0028fe4
c0026404:	ff d0                	call   eax
c0026406:	83 eb 04             	sub    ebx,0x4
c0026409:	8b 03                	mov    eax,DWORD PTR [ebx]
c002640b:	83 f8 ff             	cmp    eax,0xffffffff
c002640e:	75 f4                	jne    c0026404 <__do_global_ctors_aux+0x14>
c0026410:	58                   	pop    eax
c0026411:	5b                   	pop    ebx
c0026412:	5d                   	pop    ebp
c0026413:	c3                   	ret    
c0026414:	c3                   	ret    
c0026415:	66 90                	xchg   ax,ax
c0026417:	90                   	nop

c0026418 <__divdi3>:
c0026418:	55                   	push   ebp
c0026419:	57                   	push   edi
c002641a:	56                   	push   esi
c002641b:	53                   	push   ebx
c002641c:	83 ec 1c             	sub    esp,0x1c
c002641f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026423:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026427:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002642a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002642e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026432:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026436:	85 db                	test   ebx,ebx
c0026438:	0f 88 8e 00 00 00    	js     c00264cc <__divdi3+0xb4>
c002643e:	89 dd                	mov    ebp,ebx
c0026440:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026448:	89 d3                	mov    ebx,edx
c002644a:	85 d2                	test   edx,edx
c002644c:	79 0d                	jns    c002645b <__divdi3+0x43>
c002644e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026452:	f7 d8                	neg    eax
c0026454:	83 d2 00             	adc    edx,0x0
c0026457:	f7 da                	neg    edx
c0026459:	89 d3                	mov    ebx,edx
c002645b:	89 c7                	mov    edi,eax
c002645d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026460:	85 db                	test   ebx,ebx
c0026462:	75 48                	jne    c00264ac <__divdi3+0x94>
c0026464:	39 ef                	cmp    edi,ebp
c0026466:	76 24                	jbe    c002648c <__divdi3+0x74>
c0026468:	89 ea                	mov    edx,ebp
c002646a:	f7 f7                	div    edi
c002646c:	89 c1                	mov    ecx,eax
c002646e:	31 f6                	xor    esi,esi
c0026470:	89 c8                	mov    eax,ecx
c0026472:	89 f2                	mov    edx,esi
c0026474:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026478:	85 c9                	test   ecx,ecx
c002647a:	74 07                	je     c0026483 <__divdi3+0x6b>
c002647c:	f7 d8                	neg    eax
c002647e:	83 d2 00             	adc    edx,0x0
c0026481:	f7 da                	neg    edx
c0026483:	83 c4 1c             	add    esp,0x1c
c0026486:	5b                   	pop    ebx
c0026487:	5e                   	pop    esi
c0026488:	5f                   	pop    edi
c0026489:	5d                   	pop    ebp
c002648a:	c3                   	ret    
c002648b:	90                   	nop
c002648c:	85 ff                	test   edi,edi
c002648e:	75 0b                	jne    c002649b <__divdi3+0x83>
c0026490:	b8 01 00 00 00       	mov    eax,0x1
c0026495:	31 d2                	xor    edx,edx
c0026497:	f7 f3                	div    ebx
c0026499:	89 c7                	mov    edi,eax
c002649b:	31 d2                	xor    edx,edx
c002649d:	89 e8                	mov    eax,ebp
c002649f:	f7 f7                	div    edi
c00264a1:	89 c6                	mov    esi,eax
c00264a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00264a6:	f7 f7                	div    edi
c00264a8:	89 c1                	mov    ecx,eax
c00264aa:	eb c4                	jmp    c0026470 <__divdi3+0x58>
c00264ac:	39 eb                	cmp    ebx,ebp
c00264ae:	77 3c                	ja     c00264ec <__divdi3+0xd4>
c00264b0:	0f bd f3             	bsr    esi,ebx
c00264b3:	83 f6 1f             	xor    esi,0x1f
c00264b6:	75 40                	jne    c00264f8 <__divdi3+0xe0>
c00264b8:	39 eb                	cmp    ebx,ebp
c00264ba:	72 09                	jb     c00264c5 <__divdi3+0xad>
c00264bc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00264bf:	0f 87 97 00 00 00    	ja     c002655c <__divdi3+0x144>
c00264c5:	b9 01 00 00 00       	mov    ecx,0x1
c00264ca:	eb a4                	jmp    c0026470 <__divdi3+0x58>
c00264cc:	f7 d9                	neg    ecx
c00264ce:	83 d3 00             	adc    ebx,0x0
c00264d1:	f7 db                	neg    ebx
c00264d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00264d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00264da:	89 dd                	mov    ebp,ebx
c00264dc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00264e4:	e9 5f ff ff ff       	jmp    c0026448 <__divdi3+0x30>
c00264e9:	8d 76 00             	lea    esi,[esi+0x0]
c00264ec:	31 f6                	xor    esi,esi
c00264ee:	31 c9                	xor    ecx,ecx
c00264f0:	e9 7b ff ff ff       	jmp    c0026470 <__divdi3+0x58>
c00264f5:	8d 76 00             	lea    esi,[esi+0x0]
c00264f8:	b8 20 00 00 00       	mov    eax,0x20
c00264fd:	29 f0                	sub    eax,esi
c00264ff:	89 f1                	mov    ecx,esi
c0026501:	d3 e3                	shl    ebx,cl
c0026503:	89 fa                	mov    edx,edi
c0026505:	88 c1                	mov    cl,al
c0026507:	d3 ea                	shr    edx,cl
c0026509:	09 da                	or     edx,ebx
c002650b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002650f:	89 f1                	mov    ecx,esi
c0026511:	d3 e7                	shl    edi,cl
c0026513:	89 eb                	mov    ebx,ebp
c0026515:	88 c1                	mov    cl,al
c0026517:	d3 eb                	shr    ebx,cl
c0026519:	89 f1                	mov    ecx,esi
c002651b:	d3 e5                	shl    ebp,cl
c002651d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026520:	88 c1                	mov    cl,al
c0026522:	d3 ea                	shr    edx,cl
c0026524:	09 d5                	or     ebp,edx
c0026526:	89 e8                	mov    eax,ebp
c0026528:	89 da                	mov    edx,ebx
c002652a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002652e:	89 d3                	mov    ebx,edx
c0026530:	89 c5                	mov    ebp,eax
c0026532:	f7 e7                	mul    edi
c0026534:	39 d3                	cmp    ebx,edx
c0026536:	72 18                	jb     c0026550 <__divdi3+0x138>
c0026538:	74 0a                	je     c0026544 <__divdi3+0x12c>
c002653a:	89 e9                	mov    ecx,ebp
c002653c:	31 f6                	xor    esi,esi
c002653e:	e9 2d ff ff ff       	jmp    c0026470 <__divdi3+0x58>
c0026543:	90                   	nop
c0026544:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026547:	89 f1                	mov    ecx,esi
c0026549:	d3 e7                	shl    edi,cl
c002654b:	39 c7                	cmp    edi,eax
c002654d:	73 eb                	jae    c002653a <__divdi3+0x122>
c002654f:	90                   	nop
c0026550:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026553:	31 f6                	xor    esi,esi
c0026555:	e9 16 ff ff ff       	jmp    c0026470 <__divdi3+0x58>
c002655a:	66 90                	xchg   ax,ax
c002655c:	31 c9                	xor    ecx,ecx
c002655e:	e9 0d ff ff ff       	jmp    c0026470 <__divdi3+0x58>
c0026563:	90                   	nop

c0026564 <__moddi3>:
c0026564:	55                   	push   ebp
c0026565:	57                   	push   edi
c0026566:	56                   	push   esi
c0026567:	53                   	push   ebx
c0026568:	83 ec 2c             	sub    esp,0x2c
c002656b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002656f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026573:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026577:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002657b:	85 db                	test   ebx,ebx
c002657d:	0f 88 85 00 00 00    	js     c0026608 <__moddi3+0xa4>
c0026583:	89 de                	mov    esi,ebx
c0026585:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002658d:	89 d7                	mov    edi,edx
c002658f:	85 d2                	test   edx,edx
c0026591:	79 09                	jns    c002659c <__moddi3+0x38>
c0026593:	f7 d8                	neg    eax
c0026595:	83 d2 00             	adc    edx,0x0
c0026598:	f7 da                	neg    edx
c002659a:	89 d7                	mov    edi,edx
c002659c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265a0:	89 cd                	mov    ebp,ecx
c00265a2:	85 ff                	test   edi,edi
c00265a4:	75 52                	jne    c00265f8 <__moddi3+0x94>
c00265a6:	89 c3                	mov    ebx,eax
c00265a8:	39 f0                	cmp    eax,esi
c00265aa:	76 24                	jbe    c00265d0 <__moddi3+0x6c>
c00265ac:	89 c8                	mov    eax,ecx
c00265ae:	89 f2                	mov    edx,esi
c00265b0:	f7 f3                	div    ebx
c00265b2:	89 d6                	mov    esi,edx
c00265b4:	89 f0                	mov    eax,esi
c00265b6:	31 d2                	xor    edx,edx
c00265b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265bc:	85 c9                	test   ecx,ecx
c00265be:	74 07                	je     c00265c7 <__moddi3+0x63>
c00265c0:	f7 d8                	neg    eax
c00265c2:	83 d2 00             	adc    edx,0x0
c00265c5:	f7 da                	neg    edx
c00265c7:	83 c4 2c             	add    esp,0x2c
c00265ca:	5b                   	pop    ebx
c00265cb:	5e                   	pop    esi
c00265cc:	5f                   	pop    edi
c00265cd:	5d                   	pop    ebp
c00265ce:	c3                   	ret    
c00265cf:	90                   	nop
c00265d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00265d4:	85 db                	test   ebx,ebx
c00265d6:	75 0d                	jne    c00265e5 <__moddi3+0x81>
c00265d8:	b8 01 00 00 00       	mov    eax,0x1
c00265dd:	31 d2                	xor    edx,edx
c00265df:	f7 f7                	div    edi
c00265e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265e5:	89 f0                	mov    eax,esi
c00265e7:	31 d2                	xor    edx,edx
c00265e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00265ed:	f7 f7                	div    edi
c00265ef:	89 e8                	mov    eax,ebp
c00265f1:	f7 f7                	div    edi
c00265f3:	89 d6                	mov    esi,edx
c00265f5:	eb bd                	jmp    c00265b4 <__moddi3+0x50>
c00265f7:	90                   	nop
c00265f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00265fc:	39 f7                	cmp    edi,esi
c00265fe:	76 20                	jbe    c0026620 <__moddi3+0xbc>
c0026600:	89 c8                	mov    eax,ecx
c0026602:	89 f2                	mov    edx,esi
c0026604:	eb b2                	jmp    c00265b8 <__moddi3+0x54>
c0026606:	66 90                	xchg   ax,ax
c0026608:	f7 d9                	neg    ecx
c002660a:	83 d3 00             	adc    ebx,0x0
c002660d:	f7 db                	neg    ebx
c002660f:	89 de                	mov    esi,ebx
c0026611:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026619:	e9 6f ff ff ff       	jmp    c002658d <__moddi3+0x29>
c002661e:	66 90                	xchg   ax,ax
c0026620:	0f bd c7             	bsr    eax,edi
c0026623:	83 f0 1f             	xor    eax,0x1f
c0026626:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002662a:	75 24                	jne    c0026650 <__moddi3+0xec>
c002662c:	39 f7                	cmp    edi,esi
c002662e:	72 06                	jb     c0026636 <__moddi3+0xd2>
c0026630:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026634:	77 0c                	ja     c0026642 <__moddi3+0xde>
c0026636:	89 e9                	mov    ecx,ebp
c0026638:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002663c:	19 fe                	sbb    esi,edi
c002663e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026642:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026646:	89 f2                	mov    edx,esi
c0026648:	e9 6b ff ff ff       	jmp    c00265b8 <__moddi3+0x54>
c002664d:	8d 76 00             	lea    esi,[esi+0x0]
c0026650:	b8 20 00 00 00       	mov    eax,0x20
c0026655:	89 c2                	mov    edx,eax
c0026657:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002665b:	29 da                	sub    edx,ebx
c002665d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026661:	88 d9                	mov    cl,bl
c0026663:	d3 e7                	shl    edi,cl
c0026665:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026669:	88 d1                	mov    cl,dl
c002666b:	d3 e8                	shr    eax,cl
c002666d:	09 c7                	or     edi,eax
c002666f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026673:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026677:	89 d8                	mov    eax,ebx
c0026679:	88 d9                	mov    cl,bl
c002667b:	d3 e7                	shl    edi,cl
c002667d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026681:	89 f3                	mov    ebx,esi
c0026683:	88 d1                	mov    cl,dl
c0026685:	d3 eb                	shr    ebx,cl
c0026687:	89 c7                	mov    edi,eax
c0026689:	88 c1                	mov    cl,al
c002668b:	d3 e6                	shl    esi,cl
c002668d:	89 e8                	mov    eax,ebp
c002668f:	88 d1                	mov    cl,dl
c0026691:	d3 e8                	shr    eax,cl
c0026693:	09 f0                	or     eax,esi
c0026695:	89 f9                	mov    ecx,edi
c0026697:	d3 e5                	shl    ebp,cl
c0026699:	89 da                	mov    edx,ebx
c002669b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002669f:	89 d3                	mov    ebx,edx
c00266a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266a5:	89 c6                	mov    esi,eax
c00266a7:	89 d1                	mov    ecx,edx
c00266a9:	39 d3                	cmp    ebx,edx
c00266ab:	72 27                	jb     c00266d4 <__moddi3+0x170>
c00266ad:	74 21                	je     c00266d0 <__moddi3+0x16c>
c00266af:	29 f5                	sub    ebp,esi
c00266b1:	19 cb                	sbb    ebx,ecx
c00266b3:	89 de                	mov    esi,ebx
c00266b5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00266b9:	d3 e6                	shl    esi,cl
c00266bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00266bf:	89 f9                	mov    ecx,edi
c00266c1:	d3 ed                	shr    ebp,cl
c00266c3:	09 ee                	or     esi,ebp
c00266c5:	89 f0                	mov    eax,esi
c00266c7:	d3 eb                	shr    ebx,cl
c00266c9:	89 da                	mov    edx,ebx
c00266cb:	e9 e8 fe ff ff       	jmp    c00265b8 <__moddi3+0x54>
c00266d0:	39 c5                	cmp    ebp,eax
c00266d2:	73 db                	jae    c00266af <__moddi3+0x14b>
c00266d4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00266d8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00266dc:	89 d1                	mov    ecx,edx
c00266de:	89 c6                	mov    esi,eax
c00266e0:	eb cd                	jmp    c00266af <__moddi3+0x14b>
c00266e2:	66 90                	xchg   ax,ax

c00266e4 <__udivdi3>:
c00266e4:	55                   	push   ebp
c00266e5:	57                   	push   edi
c00266e6:	56                   	push   esi
c00266e7:	53                   	push   ebx
c00266e8:	83 ec 1c             	sub    esp,0x1c
c00266eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00266ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00266f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00266f7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00266fb:	85 d2                	test   edx,edx
c00266fd:	75 41                	jne    c0026740 <__udivdi3+0x5c>
c00266ff:	39 f7                	cmp    edi,esi
c0026701:	76 15                	jbe    c0026718 <__udivdi3+0x34>
c0026703:	89 e8                	mov    eax,ebp
c0026705:	89 f2                	mov    edx,esi
c0026707:	f7 f7                	div    edi
c0026709:	31 db                	xor    ebx,ebx
c002670b:	89 da                	mov    edx,ebx
c002670d:	83 c4 1c             	add    esp,0x1c
c0026710:	5b                   	pop    ebx
c0026711:	5e                   	pop    esi
c0026712:	5f                   	pop    edi
c0026713:	5d                   	pop    ebp
c0026714:	c3                   	ret    
c0026715:	8d 76 00             	lea    esi,[esi+0x0]
c0026718:	89 f9                	mov    ecx,edi
c002671a:	85 ff                	test   edi,edi
c002671c:	75 0b                	jne    c0026729 <__udivdi3+0x45>
c002671e:	b8 01 00 00 00       	mov    eax,0x1
c0026723:	31 d2                	xor    edx,edx
c0026725:	f7 f7                	div    edi
c0026727:	89 c1                	mov    ecx,eax
c0026729:	31 d2                	xor    edx,edx
c002672b:	89 f0                	mov    eax,esi
c002672d:	f7 f1                	div    ecx
c002672f:	89 c3                	mov    ebx,eax
c0026731:	89 e8                	mov    eax,ebp
c0026733:	f7 f1                	div    ecx
c0026735:	89 da                	mov    edx,ebx
c0026737:	83 c4 1c             	add    esp,0x1c
c002673a:	5b                   	pop    ebx
c002673b:	5e                   	pop    esi
c002673c:	5f                   	pop    edi
c002673d:	5d                   	pop    ebp
c002673e:	c3                   	ret    
c002673f:	90                   	nop
c0026740:	39 f2                	cmp    edx,esi
c0026742:	77 1c                	ja     c0026760 <__udivdi3+0x7c>
c0026744:	0f bd da             	bsr    ebx,edx
c0026747:	83 f3 1f             	xor    ebx,0x1f
c002674a:	75 24                	jne    c0026770 <__udivdi3+0x8c>
c002674c:	39 f2                	cmp    edx,esi
c002674e:	72 08                	jb     c0026758 <__udivdi3+0x74>
c0026750:	39 ef                	cmp    edi,ebp
c0026752:	0f 87 84 00 00 00    	ja     c00267dc <__udivdi3+0xf8>
c0026758:	b8 01 00 00 00       	mov    eax,0x1
c002675d:	eb ac                	jmp    c002670b <__udivdi3+0x27>
c002675f:	90                   	nop
c0026760:	31 db                	xor    ebx,ebx
c0026762:	31 c0                	xor    eax,eax
c0026764:	89 da                	mov    edx,ebx
c0026766:	83 c4 1c             	add    esp,0x1c
c0026769:	5b                   	pop    ebx
c002676a:	5e                   	pop    esi
c002676b:	5f                   	pop    edi
c002676c:	5d                   	pop    ebp
c002676d:	c3                   	ret    
c002676e:	66 90                	xchg   ax,ax
c0026770:	b8 20 00 00 00       	mov    eax,0x20
c0026775:	29 d8                	sub    eax,ebx
c0026777:	88 d9                	mov    cl,bl
c0026779:	d3 e2                	shl    edx,cl
c002677b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002677f:	89 fa                	mov    edx,edi
c0026781:	88 c1                	mov    cl,al
c0026783:	d3 ea                	shr    edx,cl
c0026785:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026789:	09 d1                	or     ecx,edx
c002678b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002678f:	88 d9                	mov    cl,bl
c0026791:	d3 e7                	shl    edi,cl
c0026793:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026797:	89 f7                	mov    edi,esi
c0026799:	88 c1                	mov    cl,al
c002679b:	d3 ef                	shr    edi,cl
c002679d:	88 d9                	mov    cl,bl
c002679f:	d3 e6                	shl    esi,cl
c00267a1:	89 ea                	mov    edx,ebp
c00267a3:	88 c1                	mov    cl,al
c00267a5:	d3 ea                	shr    edx,cl
c00267a7:	09 d6                	or     esi,edx
c00267a9:	89 f0                	mov    eax,esi
c00267ab:	89 fa                	mov    edx,edi
c00267ad:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00267b1:	89 d7                	mov    edi,edx
c00267b3:	89 c6                	mov    esi,eax
c00267b5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00267b9:	39 d7                	cmp    edi,edx
c00267bb:	72 13                	jb     c00267d0 <__udivdi3+0xec>
c00267bd:	74 09                	je     c00267c8 <__udivdi3+0xe4>
c00267bf:	89 f0                	mov    eax,esi
c00267c1:	31 db                	xor    ebx,ebx
c00267c3:	e9 43 ff ff ff       	jmp    c002670b <__udivdi3+0x27>
c00267c8:	88 d9                	mov    cl,bl
c00267ca:	d3 e5                	shl    ebp,cl
c00267cc:	39 c5                	cmp    ebp,eax
c00267ce:	73 ef                	jae    c00267bf <__udivdi3+0xdb>
c00267d0:	8d 46 ff             	lea    eax,[esi-0x1]
c00267d3:	31 db                	xor    ebx,ebx
c00267d5:	e9 31 ff ff ff       	jmp    c002670b <__udivdi3+0x27>
c00267da:	66 90                	xchg   ax,ax
c00267dc:	31 c0                	xor    eax,eax
c00267de:	e9 28 ff ff ff       	jmp    c002670b <__udivdi3+0x27>
c00267e3:	90                   	nop

c00267e4 <__umoddi3>:
c00267e4:	55                   	push   ebp
c00267e5:	57                   	push   edi
c00267e6:	56                   	push   esi
c00267e7:	53                   	push   ebx
c00267e8:	83 ec 1c             	sub    esp,0x1c
c00267eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00267ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00267f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00267f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00267fb:	89 da                	mov    edx,ebx
c00267fd:	85 c0                	test   eax,eax
c00267ff:	75 37                	jne    c0026838 <__umoddi3+0x54>
c0026801:	39 df                	cmp    edi,ebx
c0026803:	76 13                	jbe    c0026818 <__umoddi3+0x34>
c0026805:	89 f0                	mov    eax,esi
c0026807:	f7 f7                	div    edi
c0026809:	89 d0                	mov    eax,edx
c002680b:	31 d2                	xor    edx,edx
c002680d:	83 c4 1c             	add    esp,0x1c
c0026810:	5b                   	pop    ebx
c0026811:	5e                   	pop    esi
c0026812:	5f                   	pop    edi
c0026813:	5d                   	pop    ebp
c0026814:	c3                   	ret    
c0026815:	8d 76 00             	lea    esi,[esi+0x0]
c0026818:	89 fd                	mov    ebp,edi
c002681a:	85 ff                	test   edi,edi
c002681c:	75 0b                	jne    c0026829 <__umoddi3+0x45>
c002681e:	b8 01 00 00 00       	mov    eax,0x1
c0026823:	31 d2                	xor    edx,edx
c0026825:	f7 f7                	div    edi
c0026827:	89 c5                	mov    ebp,eax
c0026829:	89 d8                	mov    eax,ebx
c002682b:	31 d2                	xor    edx,edx
c002682d:	f7 f5                	div    ebp
c002682f:	89 f0                	mov    eax,esi
c0026831:	f7 f5                	div    ebp
c0026833:	89 d0                	mov    eax,edx
c0026835:	eb d4                	jmp    c002680b <__umoddi3+0x27>
c0026837:	90                   	nop
c0026838:	89 f1                	mov    ecx,esi
c002683a:	39 d8                	cmp    eax,ebx
c002683c:	76 0a                	jbe    c0026848 <__umoddi3+0x64>
c002683e:	89 f0                	mov    eax,esi
c0026840:	83 c4 1c             	add    esp,0x1c
c0026843:	5b                   	pop    ebx
c0026844:	5e                   	pop    esi
c0026845:	5f                   	pop    edi
c0026846:	5d                   	pop    ebp
c0026847:	c3                   	ret    
c0026848:	0f bd e8             	bsr    ebp,eax
c002684b:	83 f5 1f             	xor    ebp,0x1f
c002684e:	75 1c                	jne    c002686c <__umoddi3+0x88>
c0026850:	39 d8                	cmp    eax,ebx
c0026852:	72 04                	jb     c0026858 <__umoddi3+0x74>
c0026854:	39 f7                	cmp    edi,esi
c0026856:	77 08                	ja     c0026860 <__umoddi3+0x7c>
c0026858:	89 da                	mov    edx,ebx
c002685a:	29 fe                	sub    esi,edi
c002685c:	19 c2                	sbb    edx,eax
c002685e:	89 f1                	mov    ecx,esi
c0026860:	89 c8                	mov    eax,ecx
c0026862:	83 c4 1c             	add    esp,0x1c
c0026865:	5b                   	pop    ebx
c0026866:	5e                   	pop    esi
c0026867:	5f                   	pop    edi
c0026868:	5d                   	pop    ebp
c0026869:	c3                   	ret    
c002686a:	66 90                	xchg   ax,ax
c002686c:	ba 20 00 00 00       	mov    edx,0x20
c0026871:	29 ea                	sub    edx,ebp
c0026873:	89 e9                	mov    ecx,ebp
c0026875:	d3 e0                	shl    eax,cl
c0026877:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002687b:	89 f8                	mov    eax,edi
c002687d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026881:	88 d1                	mov    cl,dl
c0026883:	d3 e8                	shr    eax,cl
c0026885:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026889:	09 c1                	or     ecx,eax
c002688b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002688f:	89 e9                	mov    ecx,ebp
c0026891:	d3 e7                	shl    edi,cl
c0026893:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026897:	89 d8                	mov    eax,ebx
c0026899:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002689d:	88 d1                	mov    cl,dl
c002689f:	d3 e8                	shr    eax,cl
c00268a1:	89 c7                	mov    edi,eax
c00268a3:	89 e9                	mov    ecx,ebp
c00268a5:	d3 e3                	shl    ebx,cl
c00268a7:	89 f0                	mov    eax,esi
c00268a9:	88 d1                	mov    cl,dl
c00268ab:	d3 e8                	shr    eax,cl
c00268ad:	09 d8                	or     eax,ebx
c00268af:	89 e9                	mov    ecx,ebp
c00268b1:	d3 e6                	shl    esi,cl
c00268b3:	89 f3                	mov    ebx,esi
c00268b5:	89 fa                	mov    edx,edi
c00268b7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00268bb:	89 d1                	mov    ecx,edx
c00268bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00268c1:	89 c6                	mov    esi,eax
c00268c3:	89 d7                	mov    edi,edx
c00268c5:	39 d1                	cmp    ecx,edx
c00268c7:	72 27                	jb     c00268f0 <__umoddi3+0x10c>
c00268c9:	74 21                	je     c00268ec <__umoddi3+0x108>
c00268cb:	89 ca                	mov    edx,ecx
c00268cd:	29 f3                	sub    ebx,esi
c00268cf:	19 fa                	sbb    edx,edi
c00268d1:	89 d0                	mov    eax,edx
c00268d3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00268d7:	d3 e0                	shl    eax,cl
c00268d9:	89 e9                	mov    ecx,ebp
c00268db:	d3 eb                	shr    ebx,cl
c00268dd:	09 d8                	or     eax,ebx
c00268df:	d3 ea                	shr    edx,cl
c00268e1:	83 c4 1c             	add    esp,0x1c
c00268e4:	5b                   	pop    ebx
c00268e5:	5e                   	pop    esi
c00268e6:	5f                   	pop    edi
c00268e7:	5d                   	pop    ebp
c00268e8:	c3                   	ret    
c00268e9:	8d 76 00             	lea    esi,[esi+0x0]
c00268ec:	39 c3                	cmp    ebx,eax
c00268ee:	73 db                	jae    c00268cb <__umoddi3+0xe7>
c00268f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00268f4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00268f8:	89 d7                	mov    edi,edx
c00268fa:	89 c6                	mov    esi,eax
c00268fc:	eb cd                	jmp    c00268cb <__umoddi3+0xe7>

c00268fe <__addsf3>:
c00268fe:	55                   	push   ebp
c00268ff:	89 e5                	mov    ebp,esp
c0026901:	57                   	push   edi
c0026902:	56                   	push   esi
c0026903:	53                   	push   ebx
c0026904:	83 ec 08             	sub    esp,0x8
c0026907:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002690a:	89 fa                	mov    edx,edi
c002690c:	89 f8                	mov    eax,edi
c002690e:	c1 f8 17             	sar    eax,0x17
c0026911:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026914:	c1 e2 08             	shl    edx,0x8
c0026917:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002691d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026920:	89 de                	mov    esi,ebx
c0026922:	c1 fe 17             	sar    esi,0x17
c0026925:	c1 e3 08             	shl    ebx,0x8
c0026928:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002692e:	31 f0                	xor    eax,esi
c0026930:	0f 88 3b 01 00 00    	js     c0026a71 <__addsf3+0x173>
c0026936:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026939:	29 f1                	sub    ecx,esi
c002693b:	85 c9                	test   ecx,ecx
c002693d:	7e 54                	jle    c0026993 <__addsf3+0x95>
c002693f:	89 f0                	mov    eax,esi
c0026941:	84 c0                	test   al,al
c0026943:	75 10                	jne    c0026955 <__addsf3+0x57>
c0026945:	85 db                	test   ebx,ebx
c0026947:	0f 84 aa 02 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c002694d:	49                   	dec    ecx
c002694e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026951:	74 38                	je     c002698b <__addsf3+0x8d>
c0026953:	eb 13                	jmp    c0026968 <__addsf3+0x6a>
c0026955:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026958:	f7 d0                	not    eax
c002695a:	84 c0                	test   al,al
c002695c:	0f 84 95 02 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c0026962:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026968:	83 f9 1f             	cmp    ecx,0x1f
c002696b:	0f 8f 86 02 00 00    	jg     c0026bf7 <__addsf3+0x2f9>
c0026971:	89 de                	mov    esi,ebx
c0026973:	d3 ee                	shr    esi,cl
c0026975:	b8 20 00 00 00       	mov    eax,0x20
c002697a:	29 c8                	sub    eax,ecx
c002697c:	89 c1                	mov    ecx,eax
c002697e:	d3 e3                	shl    ebx,cl
c0026980:	31 c0                	xor    eax,eax
c0026982:	85 db                	test   ebx,ebx
c0026984:	0f 95 c0             	setne  al
c0026987:	09 f0                	or     eax,esi
c0026989:	01 d0                	add    eax,edx
c002698b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002698e:	e9 b6 00 00 00       	jmp    c0026a49 <__addsf3+0x14b>
c0026993:	74 5c                	je     c00269f1 <__addsf3+0xf3>
c0026995:	89 f1                	mov    ecx,esi
c0026997:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002699a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002699d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00269a1:	75 14                	jne    c00269b7 <__addsf3+0xb9>
c00269a3:	85 d2                	test   edx,edx
c00269a5:	0f 84 4c 02 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c00269ab:	49                   	dec    ecx
c00269ac:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00269af:	0f 84 94 00 00 00    	je     c0026a49 <__addsf3+0x14b>
c00269b5:	eb 12                	jmp    c00269c9 <__addsf3+0xcb>
c00269b7:	89 f0                	mov    eax,esi
c00269b9:	f7 d0                	not    eax
c00269bb:	84 c0                	test   al,al
c00269bd:	0f 84 34 02 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c00269c3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00269c9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269cc:	83 f9 1f             	cmp    ecx,0x1f
c00269cf:	0f 8f 22 02 00 00    	jg     c0026bf7 <__addsf3+0x2f9>
c00269d5:	89 d7                	mov    edi,edx
c00269d7:	d3 ef                	shr    edi,cl
c00269d9:	b8 20 00 00 00       	mov    eax,0x20
c00269de:	29 c8                	sub    eax,ecx
c00269e0:	89 c1                	mov    ecx,eax
c00269e2:	d3 e2                	shl    edx,cl
c00269e4:	31 c0                	xor    eax,eax
c00269e6:	85 d2                	test   edx,edx
c00269e8:	0f 95 c0             	setne  al
c00269eb:	09 f8                	or     eax,edi
c00269ed:	01 d8                	add    eax,ebx
c00269ef:	eb 58                	jmp    c0026a49 <__addsf3+0x14b>
c00269f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269f4:	8d 70 01             	lea    esi,[eax+0x1]
c00269f7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00269fd:	75 32                	jne    c0026a31 <__addsf3+0x133>
c00269ff:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a03:	75 1f                	jne    c0026a24 <__addsf3+0x126>
c0026a05:	85 d2                	test   edx,edx
c0026a07:	0f 84 e0 01 00 00    	je     c0026bed <__addsf3+0x2ef>
c0026a0d:	85 db                	test   ebx,ebx
c0026a0f:	0f 84 e2 01 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c0026a15:	89 d0                	mov    eax,edx
c0026a17:	01 d8                	add    eax,ebx
c0026a19:	0f 89 a9 01 00 00    	jns    c0026bc8 <__addsf3+0x2ca>
c0026a1f:	e9 9d 01 00 00       	jmp    c0026bc1 <__addsf3+0x2c3>
c0026a24:	85 d2                	test   edx,edx
c0026a26:	0f 85 cb 01 00 00    	jne    c0026bf7 <__addsf3+0x2f9>
c0026a2c:	e9 bc 01 00 00       	jmp    c0026bed <__addsf3+0x2ef>
c0026a31:	31 c0                	xor    eax,eax
c0026a33:	89 f1                	mov    ecx,esi
c0026a35:	f7 d1                	not    ecx
c0026a37:	84 c9                	test   cl,cl
c0026a39:	0f 84 90 01 00 00    	je     c0026bcf <__addsf3+0x2d1>
c0026a3f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a42:	d1 e8                	shr    eax,1
c0026a44:	e9 86 01 00 00       	jmp    c0026bcf <__addsf3+0x2d1>
c0026a49:	85 c0                	test   eax,eax
c0026a4b:	0f 89 7e 01 00 00    	jns    c0026bcf <__addsf3+0x2d1>
c0026a51:	46                   	inc    esi
c0026a52:	89 f2                	mov    edx,esi
c0026a54:	f7 d2                	not    edx
c0026a56:	84 d2                	test   dl,dl
c0026a58:	0f 84 6f 01 00 00    	je     c0026bcd <__addsf3+0x2cf>
c0026a5e:	89 c2                	mov    edx,eax
c0026a60:	83 e2 01             	and    edx,0x1
c0026a63:	d1 e8                	shr    eax,1
c0026a65:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026a6a:	09 d0                	or     eax,edx
c0026a6c:	e9 5e 01 00 00       	jmp    c0026bcf <__addsf3+0x2d1>
c0026a71:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026a75:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026a78:	89 f0                	mov    eax,esi
c0026a7a:	0f b6 c0             	movzx  eax,al
c0026a7d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026a80:	29 c1                	sub    ecx,eax
c0026a82:	85 c9                	test   ecx,ecx
c0026a84:	7e 55                	jle    c0026adb <__addsf3+0x1dd>
c0026a86:	85 c0                	test   eax,eax
c0026a88:	75 11                	jne    c0026a9b <__addsf3+0x19d>
c0026a8a:	85 db                	test   ebx,ebx
c0026a8c:	0f 84 65 01 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c0026a92:	49                   	dec    ecx
c0026a93:	75 19                	jne    c0026aae <__addsf3+0x1b0>
c0026a95:	89 d0                	mov    eax,edx
c0026a97:	29 d8                	sub    eax,ebx
c0026a99:	eb 38                	jmp    c0026ad3 <__addsf3+0x1d5>
c0026a9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a9e:	f7 d0                	not    eax
c0026aa0:	84 c0                	test   al,al
c0026aa2:	0f 84 4f 01 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c0026aa8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026aae:	83 f9 1f             	cmp    ecx,0x1f
c0026ab1:	0f 8f 40 01 00 00    	jg     c0026bf7 <__addsf3+0x2f9>
c0026ab7:	89 de                	mov    esi,ebx
c0026ab9:	d3 ee                	shr    esi,cl
c0026abb:	b8 20 00 00 00       	mov    eax,0x20
c0026ac0:	29 c8                	sub    eax,ecx
c0026ac2:	89 c1                	mov    ecx,eax
c0026ac4:	d3 e3                	shl    ebx,cl
c0026ac6:	31 c0                	xor    eax,eax
c0026ac8:	85 db                	test   ebx,ebx
c0026aca:	0f 95 c0             	setne  al
c0026acd:	09 f0                	or     eax,esi
c0026acf:	29 c2                	sub    edx,eax
c0026ad1:	89 d0                	mov    eax,edx
c0026ad3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ad6:	e9 af 00 00 00       	jmp    c0026b8a <__addsf3+0x28c>
c0026adb:	74 5c                	je     c0026b39 <__addsf3+0x23b>
c0026add:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026ae0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ae3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ae7:	75 14                	jne    c0026afd <__addsf3+0x1ff>
c0026ae9:	85 d2                	test   edx,edx
c0026aeb:	0f 84 06 01 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c0026af1:	48                   	dec    eax
c0026af2:	75 1b                	jne    c0026b0f <__addsf3+0x211>
c0026af4:	89 d8                	mov    eax,ebx
c0026af6:	29 d0                	sub    eax,edx
c0026af8:	e9 8d 00 00 00       	jmp    c0026b8a <__addsf3+0x28c>
c0026afd:	89 f1                	mov    ecx,esi
c0026aff:	f7 d1                	not    ecx
c0026b01:	84 c9                	test   cl,cl
c0026b03:	0f 84 ee 00 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c0026b09:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b0f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b12:	83 f8 1f             	cmp    eax,0x1f
c0026b15:	0f 8f dc 00 00 00    	jg     c0026bf7 <__addsf3+0x2f9>
c0026b1b:	89 d7                	mov    edi,edx
c0026b1d:	88 c1                	mov    cl,al
c0026b1f:	d3 ef                	shr    edi,cl
c0026b21:	b9 20 00 00 00       	mov    ecx,0x20
c0026b26:	29 c1                	sub    ecx,eax
c0026b28:	d3 e2                	shl    edx,cl
c0026b2a:	31 c0                	xor    eax,eax
c0026b2c:	85 d2                	test   edx,edx
c0026b2e:	0f 95 c0             	setne  al
c0026b31:	09 f8                	or     eax,edi
c0026b33:	29 c3                	sub    ebx,eax
c0026b35:	89 d8                	mov    eax,ebx
c0026b37:	eb 51                	jmp    c0026b8a <__addsf3+0x28c>
c0026b39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b3c:	40                   	inc    eax
c0026b3d:	a8 fe                	test   al,0xfe
c0026b3f:	75 3d                	jne    c0026b7e <__addsf3+0x280>
c0026b41:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b45:	0f 85 a7 00 00 00    	jne    c0026bf2 <__addsf3+0x2f4>
c0026b4b:	85 d2                	test   edx,edx
c0026b4d:	75 12                	jne    c0026b61 <__addsf3+0x263>
c0026b4f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b52:	85 db                	test   ebx,ebx
c0026b54:	0f 85 9d 00 00 00    	jne    c0026bf7 <__addsf3+0x2f9>
c0026b5a:	31 ff                	xor    edi,edi
c0026b5c:	e9 96 00 00 00       	jmp    c0026bf7 <__addsf3+0x2f9>
c0026b61:	85 db                	test   ebx,ebx
c0026b63:	0f 84 8e 00 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c0026b69:	89 d0                	mov    eax,edx
c0026b6b:	29 d8                	sub    eax,ebx
c0026b6d:	79 06                	jns    c0026b75 <__addsf3+0x277>
c0026b6f:	89 d8                	mov    eax,ebx
c0026b71:	29 d0                	sub    eax,edx
c0026b73:	eb 5a                	jmp    c0026bcf <__addsf3+0x2d1>
c0026b75:	bf 00 00 00 00       	mov    edi,0x0
c0026b7a:	74 7b                	je     c0026bf7 <__addsf3+0x2f9>
c0026b7c:	eb 4a                	jmp    c0026bc8 <__addsf3+0x2ca>
c0026b7e:	89 d0                	mov    eax,edx
c0026b80:	29 d8                	sub    eax,ebx
c0026b82:	79 12                	jns    c0026b96 <__addsf3+0x298>
c0026b84:	89 d8                	mov    eax,ebx
c0026b86:	29 d0                	sub    eax,edx
c0026b88:	eb 09                	jmp    c0026b93 <__addsf3+0x295>
c0026b8a:	85 c0                	test   eax,eax
c0026b8c:	79 41                	jns    c0026bcf <__addsf3+0x2d1>
c0026b8e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026b93:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026b96:	31 f6                	xor    esi,esi
c0026b98:	85 c0                	test   eax,eax
c0026b9a:	74 33                	je     c0026bcf <__addsf3+0x2d1>
c0026b9c:	0f bd c8             	bsr    ecx,eax
c0026b9f:	83 f1 1f             	xor    ecx,0x1f
c0026ba2:	d3 e0                	shl    eax,cl
c0026ba4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ba8:	39 ca                	cmp    edx,ecx
c0026baa:	7f 10                	jg     c0026bbc <__addsf3+0x2be>
c0026bac:	29 d1                	sub    ecx,edx
c0026bae:	41                   	inc    ecx
c0026baf:	d3 e8                	shr    eax,cl
c0026bb1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bb4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026bba:	eb 13                	jmp    c0026bcf <__addsf3+0x2d1>
c0026bbc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bbf:	29 ce                	sub    esi,ecx
c0026bc1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026bc6:	eb 07                	jmp    c0026bcf <__addsf3+0x2d1>
c0026bc8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bcb:	eb 02                	jmp    c0026bcf <__addsf3+0x2d1>
c0026bcd:	31 c0                	xor    eax,eax
c0026bcf:	89 c2                	mov    edx,eax
c0026bd1:	c1 ea 08             	shr    edx,0x8
c0026bd4:	a8 7f                	test   al,0x7f
c0026bd6:	0f 95 c1             	setne  cl
c0026bd9:	09 d1                	or     ecx,edx
c0026bdb:	83 e1 01             	and    ecx,0x1
c0026bde:	c1 e8 07             	shr    eax,0x7
c0026be1:	21 c8                	and    eax,ecx
c0026be3:	c1 e6 17             	shl    esi,0x17
c0026be6:	09 d6                	or     esi,edx
c0026be8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026beb:	eb 0a                	jmp    c0026bf7 <__addsf3+0x2f9>
c0026bed:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026bf0:	eb 05                	jmp    c0026bf7 <__addsf3+0x2f9>
c0026bf2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026bf7:	89 f8                	mov    eax,edi
c0026bf9:	5a                   	pop    edx
c0026bfa:	59                   	pop    ecx
c0026bfb:	5b                   	pop    ebx
c0026bfc:	5e                   	pop    esi
c0026bfd:	5f                   	pop    edi
c0026bfe:	5d                   	pop    ebp
c0026bff:	c3                   	ret    

c0026c00 <__subsf3>:
c0026c00:	55                   	push   ebp
c0026c01:	89 e5                	mov    ebp,esp
c0026c03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c06:	05 00 00 00 80       	add    eax,0x80000000
c0026c0b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026c0e:	5d                   	pop    ebp
c0026c0f:	e9 ea fc ff ff       	jmp    c00268fe <__addsf3>

c0026c14 <__negsf2>:
c0026c14:	55                   	push   ebp
c0026c15:	89 e5                	mov    ebp,esp
c0026c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c1a:	05 00 00 00 80       	add    eax,0x80000000
c0026c1f:	5d                   	pop    ebp
c0026c20:	c3                   	ret    

c0026c21 <__mulsf3>:
c0026c21:	55                   	push   ebp
c0026c22:	89 e5                	mov    ebp,esp
c0026c24:	57                   	push   edi
c0026c25:	56                   	push   esi
c0026c26:	53                   	push   ebx
c0026c27:	83 ec 1c             	sub    esp,0x1c
c0026c2a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026c2d:	89 f0                	mov    eax,esi
c0026c2f:	89 f1                	mov    ecx,esi
c0026c31:	c1 f9 17             	sar    ecx,0x17
c0026c34:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c37:	c1 e0 08             	shl    eax,0x8
c0026c3a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c3f:	89 c1                	mov    ecx,eax
c0026c41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c44:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c47:	89 c7                	mov    edi,eax
c0026c49:	c1 ff 17             	sar    edi,0x17
c0026c4c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026c50:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026c53:	89 f8                	mov    eax,edi
c0026c55:	0f b6 c0             	movzx  eax,al
c0026c58:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026c5b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026c5f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c62:	42                   	inc    edx
c0026c63:	80 e2 fe             	and    dl,0xfe
c0026c66:	75 7b                	jne    c0026ce3 <__mulsf3+0xc2>
c0026c68:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026c6c:	74 54                	je     c0026cc2 <__mulsf3+0xa1>
c0026c6e:	85 c9                	test   ecx,ecx
c0026c70:	0f 85 64 01 00 00    	jne    c0026dda <__mulsf3+0x1b9>
c0026c76:	8d 57 01             	lea    edx,[edi+0x1]
c0026c79:	80 e2 fe             	and    dl,0xfe
c0026c7c:	75 1f                	jne    c0026c9d <__mulsf3+0x7c>
c0026c7e:	85 c0                	test   eax,eax
c0026c80:	b8 00 00 00 00       	mov    eax,0x0
c0026c85:	74 29                	je     c0026cb0 <__mulsf3+0x8f>
c0026c87:	53                   	push   ebx
c0026c88:	53                   	push   ebx
c0026c89:	50                   	push   eax
c0026c8a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c8d:	e8 96 05 00 00       	call   c0027228 <__nesf2>
c0026c92:	83 c4 10             	add    esp,0x10
c0026c95:	85 c0                	test   eax,eax
c0026c97:	0f 85 3a 01 00 00    	jne    c0026dd7 <__mulsf3+0x1b6>
c0026c9d:	85 ff                	test   edi,edi
c0026c9f:	0f 89 35 01 00 00    	jns    c0026dda <__mulsf3+0x1b9>
c0026ca5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026cab:	e9 2a 01 00 00       	jmp    c0026dda <__mulsf3+0x1b9>
c0026cb0:	51                   	push   ecx
c0026cb1:	51                   	push   ecx
c0026cb2:	50                   	push   eax
c0026cb3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cb6:	e8 6d 05 00 00       	call   c0027228 <__nesf2>
c0026cbb:	83 c4 10             	add    esp,0x10
c0026cbe:	85 c0                	test   eax,eax
c0026cc0:	eb 15                	jmp    c0026cd7 <__mulsf3+0xb6>
c0026cc2:	85 c9                	test   ecx,ecx
c0026cc4:	74 0b                	je     c0026cd1 <__mulsf3+0xb0>
c0026cc6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026cc9:	01 c9                	add    ecx,ecx
c0026ccb:	78 16                	js     c0026ce3 <__mulsf3+0xc2>
c0026ccd:	89 d3                	mov    ebx,edx
c0026ccf:	eb f5                	jmp    c0026cc6 <__mulsf3+0xa5>
c0026cd1:	89 f8                	mov    eax,edi
c0026cd3:	f7 d0                	not    eax
c0026cd5:	84 c0                	test   al,al
c0026cd7:	75 c4                	jne    c0026c9d <__mulsf3+0x7c>
c0026cd9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026cde:	e9 f7 00 00 00       	jmp    c0026dda <__mulsf3+0x1b9>
c0026ce3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026ce6:	c1 e6 08             	shl    esi,0x8
c0026ce9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026cef:	8d 57 01             	lea    edx,[edi+0x1]
c0026cf2:	80 e2 fe             	and    dl,0xfe
c0026cf5:	75 63                	jne    c0026d5a <__mulsf3+0x139>
c0026cf7:	85 c0                	test   eax,eax
c0026cf9:	74 2f                	je     c0026d2a <__mulsf3+0x109>
c0026cfb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026cff:	0f 89 d2 00 00 00    	jns    c0026dd7 <__mulsf3+0x1b6>
c0026d05:	52                   	push   edx
c0026d06:	52                   	push   edx
c0026d07:	6a 00                	push   0x0
c0026d09:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d0c:	e8 dc 04 00 00       	call   c00271ed <__eqsf2>
c0026d11:	83 c4 10             	add    esp,0x10
c0026d14:	85 c0                	test   eax,eax
c0026d16:	0f 85 bb 00 00 00    	jne    c0026dd7 <__mulsf3+0x1b6>
c0026d1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d1f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026d25:	e9 b0 00 00 00       	jmp    c0026dda <__mulsf3+0x1b9>
c0026d2a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d2d:	50                   	push   eax
c0026d2e:	50                   	push   eax
c0026d2f:	6a 00                	push   0x0
c0026d31:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d34:	e8 b4 04 00 00       	call   c00271ed <__eqsf2>
c0026d39:	83 c4 10             	add    esp,0x10
c0026d3c:	85 c0                	test   eax,eax
c0026d3e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026d41:	75 0c                	jne    c0026d4f <__mulsf3+0x12e>
c0026d43:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d47:	0f 89 8a 00 00 00    	jns    c0026dd7 <__mulsf3+0x1b6>
c0026d4d:	eb cd                	jmp    c0026d1c <__mulsf3+0xfb>
c0026d4f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026d52:	01 f6                	add    esi,esi
c0026d54:	78 04                	js     c0026d5a <__mulsf3+0x139>
c0026d56:	89 c3                	mov    ebx,eax
c0026d58:	eb f5                	jmp    c0026d4f <__mulsf3+0x12e>
c0026d5a:	89 c8                	mov    eax,ecx
c0026d5c:	0d 00 00 00 80       	or     eax,0x80000000
c0026d61:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026d67:	f7 e6                	mul    esi
c0026d69:	85 c0                	test   eax,eax
c0026d6b:	0f 95 c0             	setne  al
c0026d6e:	0f b6 c0             	movzx  eax,al
c0026d71:	09 c2                	or     edx,eax
c0026d73:	78 03                	js     c0026d78 <__mulsf3+0x157>
c0026d75:	01 d2                	add    edx,edx
c0026d77:	4b                   	dec    ebx
c0026d78:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026d7e:	7f 22                	jg     c0026da2 <__mulsf3+0x181>
c0026d80:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026d86:	85 db                	test   ebx,ebx
c0026d88:	7f 23                	jg     c0026dad <__mulsf3+0x18c>
c0026d8a:	83 fb e9             	cmp    ebx,0xffffffe9
c0026d8d:	7c 1a                	jl     c0026da9 <__mulsf3+0x188>
c0026d8f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d95:	b9 01 00 00 00       	mov    ecx,0x1
c0026d9a:	29 d9                	sub    ecx,ebx
c0026d9c:	d3 ea                	shr    edx,cl
c0026d9e:	31 db                	xor    ebx,ebx
c0026da0:	eb 0b                	jmp    c0026dad <__mulsf3+0x18c>
c0026da2:	bb ff 00 00 00       	mov    ebx,0xff
c0026da7:	eb 02                	jmp    c0026dab <__mulsf3+0x18a>
c0026da9:	31 db                	xor    ebx,ebx
c0026dab:	31 d2                	xor    edx,edx
c0026dad:	89 d0                	mov    eax,edx
c0026daf:	c1 e8 08             	shr    eax,0x8
c0026db2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026db5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026dbb:	09 fb                	or     ebx,edi
c0026dbd:	c1 e3 17             	shl    ebx,0x17
c0026dc0:	09 c3                	or     ebx,eax
c0026dc2:	f6 c2 7f             	test   dl,0x7f
c0026dc5:	0f 95 c1             	setne  cl
c0026dc8:	09 c8                	or     eax,ecx
c0026dca:	83 e0 01             	and    eax,0x1
c0026dcd:	c1 ea 07             	shr    edx,0x7
c0026dd0:	21 c2                	and    edx,eax
c0026dd2:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026dd5:	eb 03                	jmp    c0026dda <__mulsf3+0x1b9>
c0026dd7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026dda:	89 f0                	mov    eax,esi
c0026ddc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026ddf:	5b                   	pop    ebx
c0026de0:	5e                   	pop    esi
c0026de1:	5f                   	pop    edi
c0026de2:	5d                   	pop    ebp
c0026de3:	c3                   	ret    

c0026de4 <__divsf3>:
c0026de4:	55                   	push   ebp
c0026de5:	89 e5                	mov    ebp,esp
c0026de7:	57                   	push   edi
c0026de8:	56                   	push   esi
c0026de9:	53                   	push   ebx
c0026dea:	83 ec 1c             	sub    esp,0x1c
c0026ded:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026df0:	89 d8                	mov    eax,ebx
c0026df2:	89 d9                	mov    ecx,ebx
c0026df4:	c1 f9 17             	sar    ecx,0x17
c0026df7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026dfa:	c1 e0 08             	shl    eax,0x8
c0026dfd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e02:	89 c1                	mov    ecx,eax
c0026e04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e07:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e0a:	89 c7                	mov    edi,eax
c0026e0c:	c1 ff 17             	sar    edi,0x17
c0026e0f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e13:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e16:	89 f8                	mov    eax,edi
c0026e18:	0f b6 c0             	movzx  eax,al
c0026e1b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e1e:	29 c6                	sub    esi,eax
c0026e20:	83 c6 7f             	add    esi,0x7f
c0026e23:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e26:	42                   	inc    edx
c0026e27:	80 e2 fe             	and    dl,0xfe
c0026e2a:	0f 85 9c 00 00 00    	jne    c0026ecc <__divsf3+0xe8>
c0026e30:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e34:	74 33                	je     c0026e69 <__divsf3+0x85>
c0026e36:	85 c9                	test   ecx,ecx
c0026e38:	0f 85 c7 01 00 00    	jne    c0027005 <__divsf3+0x221>
c0026e3e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e41:	80 e2 fe             	and    dl,0xfe
c0026e44:	75 2f                	jne    c0026e75 <__divsf3+0x91>
c0026e46:	85 c0                	test   eax,eax
c0026e48:	74 2b                	je     c0026e75 <__divsf3+0x91>
c0026e4a:	51                   	push   ecx
c0026e4b:	51                   	push   ecx
c0026e4c:	6a 00                	push   0x0
c0026e4e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e51:	e8 d2 03 00 00       	call   c0027228 <__nesf2>
c0026e56:	83 c4 10             	add    esp,0x10
c0026e59:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e5c:	85 c0                	test   eax,eax
c0026e5e:	0f 85 a1 01 00 00    	jne    c0027005 <__divsf3+0x221>
c0026e64:	e9 92 01 00 00       	jmp    c0026ffb <__divsf3+0x217>
c0026e69:	85 c9                	test   ecx,ecx
c0026e6b:	75 1b                	jne    c0026e88 <__divsf3+0xa4>
c0026e6d:	8d 57 01             	lea    edx,[edi+0x1]
c0026e70:	80 e2 fe             	and    dl,0xfe
c0026e73:	74 1e                	je     c0026e93 <__divsf3+0xaf>
c0026e75:	85 ff                	test   edi,edi
c0026e77:	0f 89 88 01 00 00    	jns    c0027005 <__divsf3+0x221>
c0026e7d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026e83:	e9 7d 01 00 00       	jmp    c0027005 <__divsf3+0x221>
c0026e88:	8d 56 ff             	lea    edx,[esi-0x1]
c0026e8b:	01 c9                	add    ecx,ecx
c0026e8d:	78 3d                	js     c0026ecc <__divsf3+0xe8>
c0026e8f:	89 d6                	mov    esi,edx
c0026e91:	eb f5                	jmp    c0026e88 <__divsf3+0xa4>
c0026e93:	85 c0                	test   eax,eax
c0026e95:	b8 00 00 00 00       	mov    eax,0x0
c0026e9a:	74 18                	je     c0026eb4 <__divsf3+0xd0>
c0026e9c:	52                   	push   edx
c0026e9d:	52                   	push   edx
c0026e9e:	50                   	push   eax
c0026e9f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ea2:	e8 81 03 00 00       	call   c0027228 <__nesf2>
c0026ea7:	83 c4 10             	add    esp,0x10
c0026eaa:	85 c0                	test   eax,eax
c0026eac:	0f 85 50 01 00 00    	jne    c0027002 <__divsf3+0x21e>
c0026eb2:	eb c1                	jmp    c0026e75 <__divsf3+0x91>
c0026eb4:	56                   	push   esi
c0026eb5:	56                   	push   esi
c0026eb6:	50                   	push   eax
c0026eb7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eba:	e8 69 03 00 00       	call   c0027228 <__nesf2>
c0026ebf:	83 c4 10             	add    esp,0x10
c0026ec2:	85 c0                	test   eax,eax
c0026ec4:	0f 84 31 01 00 00    	je     c0026ffb <__divsf3+0x217>
c0026eca:	eb a9                	jmp    c0026e75 <__divsf3+0x91>
c0026ecc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026ecf:	c1 e3 08             	shl    ebx,0x8
c0026ed2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026ed8:	8d 57 01             	lea    edx,[edi+0x1]
c0026edb:	80 e2 fe             	and    dl,0xfe
c0026ede:	75 71                	jne    c0026f51 <__divsf3+0x16d>
c0026ee0:	85 c0                	test   eax,eax
c0026ee2:	ba 00 00 00 00       	mov    edx,0x0
c0026ee7:	74 2f                	je     c0026f18 <__divsf3+0x134>
c0026ee9:	51                   	push   ecx
c0026eea:	51                   	push   ecx
c0026eeb:	52                   	push   edx
c0026eec:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eef:	e8 f9 02 00 00       	call   c00271ed <__eqsf2>
c0026ef4:	83 c4 10             	add    esp,0x10
c0026ef7:	85 c0                	test   eax,eax
c0026ef9:	0f 85 03 01 00 00    	jne    c0027002 <__divsf3+0x21e>
c0026eff:	31 d2                	xor    edx,edx
c0026f01:	89 d3                	mov    ebx,edx
c0026f03:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026f06:	31 f8                	xor    eax,edi
c0026f08:	0f 89 f7 00 00 00    	jns    c0027005 <__divsf3+0x221>
c0026f0e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026f13:	e9 ed 00 00 00       	jmp    c0027005 <__divsf3+0x221>
c0026f18:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f1b:	50                   	push   eax
c0026f1c:	50                   	push   eax
c0026f1d:	52                   	push   edx
c0026f1e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f21:	e8 c7 02 00 00       	call   c00271ed <__eqsf2>
c0026f26:	83 c4 10             	add    esp,0x10
c0026f29:	85 c0                	test   eax,eax
c0026f2b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f2e:	75 16                	jne    c0026f46 <__divsf3+0x162>
c0026f30:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026f33:	31 fb                	xor    ebx,edi
c0026f35:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026f3b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026f41:	e9 bf 00 00 00       	jmp    c0027005 <__divsf3+0x221>
c0026f46:	8d 46 01             	lea    eax,[esi+0x1]
c0026f49:	01 db                	add    ebx,ebx
c0026f4b:	78 04                	js     c0026f51 <__divsf3+0x16d>
c0026f4d:	89 c6                	mov    esi,eax
c0026f4f:	eb f5                	jmp    c0026f46 <__divsf3+0x162>
c0026f51:	89 c8                	mov    eax,ecx
c0026f53:	0d 00 00 00 80       	or     eax,0x80000000
c0026f58:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026f5e:	31 d2                	xor    edx,edx
c0026f60:	39 d8                	cmp    eax,ebx
c0026f62:	72 07                	jb     c0026f6b <__divsf3+0x187>
c0026f64:	29 d8                	sub    eax,ebx
c0026f66:	ba 01 00 00 00       	mov    edx,0x1
c0026f6b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026f72:	01 d2                	add    edx,edx
c0026f74:	89 c1                	mov    ecx,eax
c0026f76:	01 c0                	add    eax,eax
c0026f78:	85 c9                	test   ecx,ecx
c0026f7a:	78 04                	js     c0026f80 <__divsf3+0x19c>
c0026f7c:	39 c3                	cmp    ebx,eax
c0026f7e:	77 05                	ja     c0026f85 <__divsf3+0x1a1>
c0026f80:	29 d8                	sub    eax,ebx
c0026f82:	83 ca 01             	or     edx,0x1
c0026f85:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026f88:	75 e8                	jne    c0026f72 <__divsf3+0x18e>
c0026f8a:	85 c0                	test   eax,eax
c0026f8c:	0f 95 c0             	setne  al
c0026f8f:	0f b6 c0             	movzx  eax,al
c0026f92:	c1 e2 06             	shl    edx,0x6
c0026f95:	09 c2                	or     edx,eax
c0026f97:	78 03                	js     c0026f9c <__divsf3+0x1b8>
c0026f99:	01 d2                	add    edx,edx
c0026f9b:	4e                   	dec    esi
c0026f9c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026fa2:	7f 22                	jg     c0026fc6 <__divsf3+0x1e2>
c0026fa4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026faa:	85 f6                	test   esi,esi
c0026fac:	7f 23                	jg     c0026fd1 <__divsf3+0x1ed>
c0026fae:	83 fe e9             	cmp    esi,0xffffffe9
c0026fb1:	7c 1a                	jl     c0026fcd <__divsf3+0x1e9>
c0026fb3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026fb9:	b9 01 00 00 00       	mov    ecx,0x1
c0026fbe:	29 f1                	sub    ecx,esi
c0026fc0:	d3 ea                	shr    edx,cl
c0026fc2:	31 f6                	xor    esi,esi
c0026fc4:	eb 0b                	jmp    c0026fd1 <__divsf3+0x1ed>
c0026fc6:	be ff 00 00 00       	mov    esi,0xff
c0026fcb:	eb 02                	jmp    c0026fcf <__divsf3+0x1eb>
c0026fcd:	31 f6                	xor    esi,esi
c0026fcf:	31 d2                	xor    edx,edx
c0026fd1:	89 d0                	mov    eax,edx
c0026fd3:	c1 e8 08             	shr    eax,0x8
c0026fd6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026fd9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026fdf:	09 fe                	or     esi,edi
c0026fe1:	c1 e6 17             	shl    esi,0x17
c0026fe4:	09 c6                	or     esi,eax
c0026fe6:	f6 c2 7f             	test   dl,0x7f
c0026fe9:	0f 95 c1             	setne  cl
c0026fec:	09 c8                	or     eax,ecx
c0026fee:	83 e0 01             	and    eax,0x1
c0026ff1:	c1 ea 07             	shr    edx,0x7
c0026ff4:	21 c2                	and    edx,eax
c0026ff6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026ff9:	eb 0a                	jmp    c0027005 <__divsf3+0x221>
c0026ffb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027000:	eb 03                	jmp    c0027005 <__divsf3+0x221>
c0027002:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027005:	89 d8                	mov    eax,ebx
c0027007:	8d 65 f4             	lea    esp,[ebp-0xc]
c002700a:	5b                   	pop    ebx
c002700b:	5e                   	pop    esi
c002700c:	5f                   	pop    edi
c002700d:	5d                   	pop    ebp
c002700e:	c3                   	ret    

c002700f <__floatsisf>:
c002700f:	55                   	push   ebp
c0027010:	89 e5                	mov    ebp,esp
c0027012:	53                   	push   ebx
c0027013:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027016:	85 d2                	test   edx,edx
c0027018:	7e 2b                	jle    c0027045 <__floatsisf+0x36>
c002701a:	0f bd ca             	bsr    ecx,edx
c002701d:	83 f1 1f             	xor    ecx,0x1f
c0027020:	d3 e2                	shl    edx,cl
c0027022:	89 d0                	mov    eax,edx
c0027024:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027029:	89 c3                	mov    ebx,eax
c002702b:	c1 eb 08             	shr    ebx,0x8
c002702e:	80 e2 7f             	and    dl,0x7f
c0027031:	0f 95 c2             	setne  dl
c0027034:	09 da                	or     edx,ebx
c0027036:	83 e2 01             	and    edx,0x1
c0027039:	c1 e8 07             	shr    eax,0x7
c002703c:	21 c2                	and    edx,eax
c002703e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027043:	eb 32                	jmp    c0027077 <__floatsisf+0x68>
c0027045:	b8 00 00 00 00       	mov    eax,0x0
c002704a:	74 34                	je     c0027080 <__floatsisf+0x71>
c002704c:	f7 da                	neg    edx
c002704e:	0f bd ca             	bsr    ecx,edx
c0027051:	83 f1 1f             	xor    ecx,0x1f
c0027054:	d3 e2                	shl    edx,cl
c0027056:	89 d0                	mov    eax,edx
c0027058:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002705d:	89 c3                	mov    ebx,eax
c002705f:	c1 eb 08             	shr    ebx,0x8
c0027062:	80 e2 7f             	and    dl,0x7f
c0027065:	0f 95 c2             	setne  dl
c0027068:	09 da                	or     edx,ebx
c002706a:	83 e2 01             	and    edx,0x1
c002706d:	c1 e8 07             	shr    eax,0x7
c0027070:	21 c2                	and    edx,eax
c0027072:	b8 9e 01 00 00       	mov    eax,0x19e
c0027077:	29 c8                	sub    eax,ecx
c0027079:	c1 e0 17             	shl    eax,0x17
c002707c:	09 d8                	or     eax,ebx
c002707e:	01 d0                	add    eax,edx
c0027080:	5b                   	pop    ebx
c0027081:	5d                   	pop    ebp
c0027082:	c3                   	ret    

c0027083 <__floatunsisf>:
c0027083:	55                   	push   ebp
c0027084:	89 e5                	mov    ebp,esp
c0027086:	53                   	push   ebx
c0027087:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002708a:	31 c0                	xor    eax,eax
c002708c:	85 d2                	test   edx,edx
c002708e:	74 32                	je     c00270c2 <__floatunsisf+0x3f>
c0027090:	0f bd ca             	bsr    ecx,edx
c0027093:	83 f1 1f             	xor    ecx,0x1f
c0027096:	d3 e2                	shl    edx,cl
c0027098:	89 d0                	mov    eax,edx
c002709a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002709f:	89 c3                	mov    ebx,eax
c00270a1:	c1 eb 08             	shr    ebx,0x8
c00270a4:	80 e2 7f             	and    dl,0x7f
c00270a7:	0f 95 c2             	setne  dl
c00270aa:	09 da                	or     edx,ebx
c00270ac:	83 e2 01             	and    edx,0x1
c00270af:	c1 e8 07             	shr    eax,0x7
c00270b2:	21 c2                	and    edx,eax
c00270b4:	b8 9e 00 00 00       	mov    eax,0x9e
c00270b9:	29 c8                	sub    eax,ecx
c00270bb:	c1 e0 17             	shl    eax,0x17
c00270be:	09 d8                	or     eax,ebx
c00270c0:	01 d0                	add    eax,edx
c00270c2:	5b                   	pop    ebx
c00270c3:	5d                   	pop    ebp
c00270c4:	c3                   	ret    

c00270c5 <__fixsfsi>:
c00270c5:	55                   	push   ebp
c00270c6:	89 e5                	mov    ebp,esp
c00270c8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270cb:	89 d1                	mov    ecx,edx
c00270cd:	c1 e1 08             	shl    ecx,0x8
c00270d0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00270d6:	c1 fa 17             	sar    edx,0x17
c00270d9:	78 1c                	js     c00270f7 <__fixsfsi+0x32>
c00270db:	83 ea 7f             	sub    edx,0x7f
c00270de:	31 c0                	xor    eax,eax
c00270e0:	83 fa 1e             	cmp    edx,0x1e
c00270e3:	77 40                	ja     c0027125 <__fixsfsi+0x60>
c00270e5:	89 c8                	mov    eax,ecx
c00270e7:	0d 00 00 00 80       	or     eax,0x80000000
c00270ec:	b9 1f 00 00 00       	mov    ecx,0x1f
c00270f1:	29 d1                	sub    ecx,edx
c00270f3:	d3 e8                	shr    eax,cl
c00270f5:	eb 2e                	jmp    c0027125 <__fixsfsi+0x60>
c00270f7:	31 c0                	xor    eax,eax
c00270f9:	81 c2 81 00 00 00    	add    edx,0x81
c00270ff:	78 24                	js     c0027125 <__fixsfsi+0x60>
c0027101:	83 fa 1e             	cmp    edx,0x1e
c0027104:	7e 09                	jle    c002710f <__fixsfsi+0x4a>
c0027106:	83 fa 1f             	cmp    edx,0x1f
c0027109:	75 18                	jne    c0027123 <__fixsfsi+0x5e>
c002710b:	85 c9                	test   ecx,ecx
c002710d:	75 14                	jne    c0027123 <__fixsfsi+0x5e>
c002710f:	89 c8                	mov    eax,ecx
c0027111:	0d 00 00 00 80       	or     eax,0x80000000
c0027116:	b9 1f 00 00 00       	mov    ecx,0x1f
c002711b:	29 d1                	sub    ecx,edx
c002711d:	d3 e8                	shr    eax,cl
c002711f:	f7 d8                	neg    eax
c0027121:	eb 02                	jmp    c0027125 <__fixsfsi+0x60>
c0027123:	31 c0                	xor    eax,eax
c0027125:	5d                   	pop    ebp
c0027126:	c3                   	ret    

c0027127 <__fixunssfsi>:
c0027127:	55                   	push   ebp
c0027128:	89 e5                	mov    ebp,esp
c002712a:	53                   	push   ebx
c002712b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002712e:	89 d3                	mov    ebx,edx
c0027130:	c1 fb 17             	sar    ebx,0x17
c0027133:	83 eb 7f             	sub    ebx,0x7f
c0027136:	31 c0                	xor    eax,eax
c0027138:	83 fb 1f             	cmp    ebx,0x1f
c002713b:	77 18                	ja     c0027155 <__fixunssfsi+0x2e>
c002713d:	89 d0                	mov    eax,edx
c002713f:	c1 e0 08             	shl    eax,0x8
c0027142:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027147:	0d 00 00 00 80       	or     eax,0x80000000
c002714c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027151:	29 d9                	sub    ecx,ebx
c0027153:	d3 e8                	shr    eax,cl
c0027155:	5b                   	pop    ebx
c0027156:	5d                   	pop    ebp
c0027157:	c3                   	ret    

c0027158 <__cmpsf2>:
c0027158:	55                   	push   ebp
c0027159:	89 e5                	mov    ebp,esp
c002715b:	57                   	push   edi
c002715c:	56                   	push   esi
c002715d:	53                   	push   ebx
c002715e:	83 ec 24             	sub    esp,0x24
c0027161:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027164:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027167:	e8 4f 10 00 00       	call   c00281bb <__truncdfsf2>
c002716c:	5a                   	pop    edx
c002716d:	59                   	pop    ecx
c002716e:	89 c3                	mov    ebx,eax
c0027170:	c1 e8 17             	shr    eax,0x17
c0027173:	0f b6 f0             	movzx  esi,al
c0027176:	89 d8                	mov    eax,ebx
c0027178:	c1 e8 1f             	shr    eax,0x1f
c002717b:	31 c6                	xor    esi,eax
c002717d:	c1 e3 08             	shl    ebx,0x8
c0027180:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027183:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027186:	e8 30 10 00 00       	call   c00281bb <__truncdfsf2>
c002718b:	83 c4 10             	add    esp,0x10
c002718e:	89 c1                	mov    ecx,eax
c0027190:	c1 e9 17             	shr    ecx,0x17
c0027193:	0f b6 c9             	movzx  ecx,cl
c0027196:	89 c7                	mov    edi,eax
c0027198:	c1 ef 1f             	shr    edi,0x1f
c002719b:	89 ca                	mov    edx,ecx
c002719d:	31 fa                	xor    edx,edi
c002719f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00271a2:	c1 e0 08             	shl    eax,0x8
c00271a5:	89 c2                	mov    edx,eax
c00271a7:	89 d8                	mov    eax,ebx
c00271a9:	09 d0                	or     eax,edx
c00271ab:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271b0:	09 f0                	or     eax,esi
c00271b2:	75 08                	jne    c00271bc <__cmpsf2+0x64>
c00271b4:	31 c0                	xor    eax,eax
c00271b6:	39 f9                	cmp    ecx,edi
c00271b8:	75 0c                	jne    c00271c6 <__cmpsf2+0x6e>
c00271ba:	eb 29                	jmp    c00271e5 <__cmpsf2+0x8d>
c00271bc:	b8 01 00 00 00       	mov    eax,0x1
c00271c1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00271c4:	7f 1f                	jg     c00271e5 <__cmpsf2+0x8d>
c00271c6:	83 c8 ff             	or     eax,0xffffffff
c00271c9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00271cc:	7c 17                	jl     c00271e5 <__cmpsf2+0x8d>
c00271ce:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271d4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00271da:	b8 01 00 00 00       	mov    eax,0x1
c00271df:	39 d3                	cmp    ebx,edx
c00271e1:	77 02                	ja     c00271e5 <__cmpsf2+0x8d>
c00271e3:	19 c0                	sbb    eax,eax
c00271e5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00271e8:	5b                   	pop    ebx
c00271e9:	5e                   	pop    esi
c00271ea:	5f                   	pop    edi
c00271eb:	5d                   	pop    ebp
c00271ec:	c3                   	ret    

c00271ed <__eqsf2>:
c00271ed:	55                   	push   ebp
c00271ee:	89 e5                	mov    ebp,esp
c00271f0:	83 ec 24             	sub    esp,0x24
c00271f3:	6a 01                	push   0x1
c00271f5:	83 ec 0c             	sub    esp,0xc
c00271f8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271fb:	e8 df 10 00 00       	call   c00282df <__extendsfdf2>
c0027200:	83 c4 10             	add    esp,0x10
c0027203:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027206:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027209:	52                   	push   edx
c002720a:	50                   	push   eax
c002720b:	50                   	push   eax
c002720c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002720f:	e8 cb 10 00 00       	call   c00282df <__extendsfdf2>
c0027214:	59                   	pop    ecx
c0027215:	59                   	pop    ecx
c0027216:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027219:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002721c:	52                   	push   edx
c002721d:	50                   	push   eax
c002721e:	e8 35 ff ff ff       	call   c0027158 <__cmpsf2>
c0027223:	83 c4 20             	add    esp,0x20
c0027226:	c9                   	leave  
c0027227:	c3                   	ret    

c0027228 <__nesf2>:
c0027228:	eb c3                	jmp    c00271ed <__eqsf2>

c002722a <__gtsf2>:
c002722a:	55                   	push   ebp
c002722b:	89 e5                	mov    ebp,esp
c002722d:	83 ec 24             	sub    esp,0x24
c0027230:	6a ff                	push   0xffffffff
c0027232:	83 ec 0c             	sub    esp,0xc
c0027235:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027238:	e8 a2 10 00 00       	call   c00282df <__extendsfdf2>
c002723d:	83 c4 10             	add    esp,0x10
c0027240:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027243:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027246:	52                   	push   edx
c0027247:	50                   	push   eax
c0027248:	50                   	push   eax
c0027249:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002724c:	e8 8e 10 00 00       	call   c00282df <__extendsfdf2>
c0027251:	59                   	pop    ecx
c0027252:	59                   	pop    ecx
c0027253:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027256:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027259:	52                   	push   edx
c002725a:	50                   	push   eax
c002725b:	e8 f8 fe ff ff       	call   c0027158 <__cmpsf2>
c0027260:	83 c4 20             	add    esp,0x20
c0027263:	c9                   	leave  
c0027264:	c3                   	ret    

c0027265 <__gesf2>:
c0027265:	eb c3                	jmp    c002722a <__gtsf2>

c0027267 <__ltsf2>:
c0027267:	eb 84                	jmp    c00271ed <__eqsf2>

c0027269 <__lesf2>:
c0027269:	eb 82                	jmp    c00271ed <__eqsf2>

c002726b <__adddf3>:
c002726b:	55                   	push   ebp
c002726c:	89 e5                	mov    ebp,esp
c002726e:	57                   	push   edi
c002726f:	56                   	push   esi
c0027270:	53                   	push   ebx
c0027271:	83 ec 24             	sub    esp,0x24
c0027274:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027277:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002727a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002727d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027280:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027283:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027286:	89 c8                	mov    eax,ecx
c0027288:	89 ce                	mov    esi,ecx
c002728a:	c1 fe 14             	sar    esi,0x14
c002728d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027290:	89 fb                	mov    ebx,edi
c0027292:	89 fa                	mov    edx,edi
c0027294:	c1 e2 0b             	shl    edx,0xb
c0027297:	c1 e0 0b             	shl    eax,0xb
c002729a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002729f:	c1 eb 15             	shr    ebx,0x15
c00272a2:	09 d8                	or     eax,ebx
c00272a4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00272a7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00272aa:	c1 fe 14             	sar    esi,0x14
c00272ad:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00272b0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00272b3:	89 f3                	mov    ebx,esi
c00272b5:	c1 e3 0b             	shl    ebx,0xb
c00272b8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00272bb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00272be:	c1 e3 0b             	shl    ebx,0xb
c00272c1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00272c7:	c1 ee 15             	shr    esi,0x15
c00272ca:	09 f3                	or     ebx,esi
c00272cc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00272cf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00272d2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00272d5:	0f 88 5f 02 00 00    	js     c002753a <__adddf3+0x2cf>
c00272db:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00272de:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00272e1:	85 db                	test   ebx,ebx
c00272e3:	0f 8e c7 00 00 00    	jle    c00273b0 <__adddf3+0x145>
c00272e9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00272f0:	75 1a                	jne    c002730c <__adddf3+0xa1>
c00272f2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00272f5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00272f8:	0f 84 b2 05 00 00    	je     c00278b0 <__adddf3+0x645>
c00272fe:	4b                   	dec    ebx
c00272ff:	75 23                	jne    c0027324 <__adddf3+0xb9>
c0027301:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027304:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027307:	e9 99 00 00 00       	jmp    c00273a5 <__adddf3+0x13a>
c002730c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002730f:	f7 d6                	not    esi
c0027311:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027317:	0f 84 93 05 00 00    	je     c00278b0 <__adddf3+0x645>
c002731d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027324:	83 fb 1f             	cmp    ebx,0x1f
c0027327:	7e 42                	jle    c002736b <__adddf3+0x100>
c0027329:	83 fb 3f             	cmp    ebx,0x3f
c002732c:	0f 8f 7e 05 00 00    	jg     c00278b0 <__adddf3+0x645>
c0027332:	83 e3 1f             	and    ebx,0x1f
c0027335:	89 d9                	mov    ecx,ebx
c0027337:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002733a:	d3 ef                	shr    edi,cl
c002733c:	31 db                	xor    ebx,ebx
c002733e:	85 c9                	test   ecx,ecx
c0027340:	74 15                	je     c0027357 <__adddf3+0xec>
c0027342:	be 20 00 00 00       	mov    esi,0x20
c0027347:	29 ce                	sub    esi,ecx
c0027349:	89 f1                	mov    ecx,esi
c002734b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002734e:	d3 e6                	shl    esi,cl
c0027350:	31 db                	xor    ebx,ebx
c0027352:	85 f6                	test   esi,esi
c0027354:	0f 95 c3             	setne  bl
c0027357:	31 c9                	xor    ecx,ecx
c0027359:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002735d:	0f 95 c1             	setne  cl
c0027360:	09 cf                	or     edi,ecx
c0027362:	09 fb                	or     ebx,edi
c0027364:	01 da                	add    edx,ebx
c0027366:	83 d0 00             	adc    eax,0x0
c0027369:	eb 3a                	jmp    c00273a5 <__adddf3+0x13a>
c002736b:	bf 20 00 00 00       	mov    edi,0x20
c0027370:	29 df                	sub    edi,ebx
c0027372:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027375:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027378:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002737b:	d3 e6                	shl    esi,cl
c002737d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027380:	88 d9                	mov    cl,bl
c0027382:	d3 ef                	shr    edi,cl
c0027384:	09 fe                	or     esi,edi
c0027386:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027389:	88 d9                	mov    cl,bl
c002738b:	d3 ef                	shr    edi,cl
c002738d:	89 fb                	mov    ebx,edi
c002738f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027392:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027395:	d3 e7                	shl    edi,cl
c0027397:	85 ff                	test   edi,edi
c0027399:	0f 95 c1             	setne  cl
c002739c:	0f b6 c9             	movzx  ecx,cl
c002739f:	09 ce                	or     esi,ecx
c00273a1:	01 f2                	add    edx,esi
c00273a3:	11 d8                	adc    eax,ebx
c00273a5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273a8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273ab:	e9 52 01 00 00       	jmp    c0027502 <__adddf3+0x297>
c00273b0:	0f 84 d5 00 00 00    	je     c002748b <__adddf3+0x220>
c00273b6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00273b9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00273bc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00273bf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00273c2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00273c9:	75 20                	jne    c00273eb <__adddf3+0x180>
c00273cb:	89 d6                	mov    esi,edx
c00273cd:	09 c6                	or     esi,eax
c00273cf:	0f 84 db 04 00 00    	je     c00278b0 <__adddf3+0x645>
c00273d5:	4b                   	dec    ebx
c00273d6:	75 29                	jne    c0027401 <__adddf3+0x196>
c00273d8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273db:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00273de:	01 d1                	add    ecx,edx
c00273e0:	11 c6                	adc    esi,eax
c00273e2:	89 f0                	mov    eax,esi
c00273e4:	89 ca                	mov    edx,ecx
c00273e6:	e9 17 01 00 00       	jmp    c0027502 <__adddf3+0x297>
c00273eb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00273ee:	f7 d6                	not    esi
c00273f0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00273f6:	0f 84 b4 04 00 00    	je     c00278b0 <__adddf3+0x645>
c00273fc:	0d 00 00 00 80       	or     eax,0x80000000
c0027401:	83 fb 1f             	cmp    ebx,0x1f
c0027404:	7e 48                	jle    c002744e <__adddf3+0x1e3>
c0027406:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027409:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002740c:	83 fb 3f             	cmp    ebx,0x3f
c002740f:	0f 8f 9b 04 00 00    	jg     c00278b0 <__adddf3+0x645>
c0027415:	83 e3 1f             	and    ebx,0x1f
c0027418:	89 d9                	mov    ecx,ebx
c002741a:	89 c7                	mov    edi,eax
c002741c:	d3 ef                	shr    edi,cl
c002741e:	31 db                	xor    ebx,ebx
c0027420:	85 c9                	test   ecx,ecx
c0027422:	74 12                	je     c0027436 <__adddf3+0x1cb>
c0027424:	be 20 00 00 00       	mov    esi,0x20
c0027429:	29 ce                	sub    esi,ecx
c002742b:	89 f1                	mov    ecx,esi
c002742d:	d3 e0                	shl    eax,cl
c002742f:	31 db                	xor    ebx,ebx
c0027431:	85 c0                	test   eax,eax
c0027433:	0f 95 c3             	setne  bl
c0027436:	31 c0                	xor    eax,eax
c0027438:	85 d2                	test   edx,edx
c002743a:	0f 95 c0             	setne  al
c002743d:	09 c7                	or     edi,eax
c002743f:	09 fb                	or     ebx,edi
c0027441:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027444:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027447:	01 da                	add    edx,ebx
c0027449:	83 d6 00             	adc    esi,0x0
c002744c:	eb 39                	jmp    c0027487 <__adddf3+0x21c>
c002744e:	be 20 00 00 00       	mov    esi,0x20
c0027453:	29 de                	sub    esi,ebx
c0027455:	89 c7                	mov    edi,eax
c0027457:	89 f1                	mov    ecx,esi
c0027459:	d3 e7                	shl    edi,cl
c002745b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002745e:	89 d7                	mov    edi,edx
c0027460:	88 d9                	mov    cl,bl
c0027462:	d3 ef                	shr    edi,cl
c0027464:	89 f9                	mov    ecx,edi
c0027466:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027469:	09 cf                	or     edi,ecx
c002746b:	88 d9                	mov    cl,bl
c002746d:	d3 e8                	shr    eax,cl
c002746f:	89 f1                	mov    ecx,esi
c0027471:	d3 e2                	shl    edx,cl
c0027473:	85 d2                	test   edx,edx
c0027475:	0f 95 c2             	setne  dl
c0027478:	0f b6 d2             	movzx  edx,dl
c002747b:	09 d7                	or     edi,edx
c002747d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027480:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027483:	01 fa                	add    edx,edi
c0027485:	11 c6                	adc    esi,eax
c0027487:	89 f0                	mov    eax,esi
c0027489:	eb 77                	jmp    c0027502 <__adddf3+0x297>
c002748b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002748e:	46                   	inc    esi
c002748f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027492:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027498:	75 41                	jne    c00274db <__adddf3+0x270>
c002749a:	89 d3                	mov    ebx,edx
c002749c:	09 c3                	or     ebx,eax
c002749e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00274a5:	75 27                	jne    c00274ce <__adddf3+0x263>
c00274a7:	85 db                	test   ebx,ebx
c00274a9:	0f 84 fb 03 00 00    	je     c00278aa <__adddf3+0x63f>
c00274af:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00274b2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00274b5:	0f 84 f5 03 00 00    	je     c00278b0 <__adddf3+0x645>
c00274bb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00274be:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00274c1:	85 c0                	test   eax,eax
c00274c3:	0f 89 91 03 00 00    	jns    c002785a <__adddf3+0x5ef>
c00274c9:	e9 85 03 00 00       	jmp    c0027853 <__adddf3+0x5e8>
c00274ce:	85 db                	test   ebx,ebx
c00274d0:	0f 85 da 03 00 00    	jne    c00278b0 <__adddf3+0x645>
c00274d6:	e9 cf 03 00 00       	jmp    c00278aa <__adddf3+0x63f>
c00274db:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00274de:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00274e1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00274e4:	f7 d1                	not    ecx
c00274e6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00274ec:	0f 84 70 03 00 00    	je     c0027862 <__adddf3+0x5f7>
c00274f2:	d1 ea                	shr    edx,1
c00274f4:	89 c1                	mov    ecx,eax
c00274f6:	c1 e1 1f             	shl    ecx,0x1f
c00274f9:	09 ca                	or     edx,ecx
c00274fb:	d1 e8                	shr    eax,1
c00274fd:	e9 6f 03 00 00       	jmp    c0027871 <__adddf3+0x606>
c0027502:	85 c0                	test   eax,eax
c0027504:	0f 89 67 03 00 00    	jns    c0027871 <__adddf3+0x606>
c002750a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002750d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027510:	f7 d1                	not    ecx
c0027512:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027518:	0f 84 44 03 00 00    	je     c0027862 <__adddf3+0x5f7>
c002751e:	89 d1                	mov    ecx,edx
c0027520:	d1 e9                	shr    ecx,1
c0027522:	83 e2 01             	and    edx,0x1
c0027525:	09 ca                	or     edx,ecx
c0027527:	89 c1                	mov    ecx,eax
c0027529:	c1 e1 1f             	shl    ecx,0x1f
c002752c:	09 ca                	or     edx,ecx
c002752e:	d1 e8                	shr    eax,1
c0027530:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027535:	e9 37 03 00 00       	jmp    c0027871 <__adddf3+0x606>
c002753a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002753d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027543:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027546:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027549:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002754f:	29 de                	sub    esi,ebx
c0027551:	85 f6                	test   esi,esi
c0027553:	0f 8e bd 00 00 00    	jle    c0027616 <__adddf3+0x3ab>
c0027559:	85 db                	test   ebx,ebx
c002755b:	75 17                	jne    c0027574 <__adddf3+0x309>
c002755d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027560:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027563:	0f 84 47 03 00 00    	je     c00278b0 <__adddf3+0x645>
c0027569:	4e                   	dec    esi
c002756a:	75 20                	jne    c002758c <__adddf3+0x321>
c002756c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002756f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027572:	eb 5b                	jmp    c00275cf <__adddf3+0x364>
c0027574:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027577:	f7 d3                	not    ebx
c0027579:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002757f:	0f 84 2b 03 00 00    	je     c00278b0 <__adddf3+0x645>
c0027585:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002758c:	83 fe 1f             	cmp    esi,0x1f
c002758f:	7e 49                	jle    c00275da <__adddf3+0x36f>
c0027591:	83 fe 3f             	cmp    esi,0x3f
c0027594:	0f 8f 16 03 00 00    	jg     c00278b0 <__adddf3+0x645>
c002759a:	83 e6 1f             	and    esi,0x1f
c002759d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275a0:	89 f1                	mov    ecx,esi
c00275a2:	d3 ef                	shr    edi,cl
c00275a4:	31 db                	xor    ebx,ebx
c00275a6:	85 f6                	test   esi,esi
c00275a8:	74 13                	je     c00275bd <__adddf3+0x352>
c00275aa:	b9 20 00 00 00       	mov    ecx,0x20
c00275af:	29 f1                	sub    ecx,esi
c00275b1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275b4:	d3 e6                	shl    esi,cl
c00275b6:	31 db                	xor    ebx,ebx
c00275b8:	85 f6                	test   esi,esi
c00275ba:	0f 95 c3             	setne  bl
c00275bd:	31 c9                	xor    ecx,ecx
c00275bf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00275c3:	0f 95 c1             	setne  cl
c00275c6:	09 cf                	or     edi,ecx
c00275c8:	09 fb                	or     ebx,edi
c00275ca:	29 da                	sub    edx,ebx
c00275cc:	83 d8 00             	sbb    eax,0x0
c00275cf:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00275d2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275d5:	e9 aa 01 00 00       	jmp    c0027784 <__adddf3+0x519>
c00275da:	bf 20 00 00 00       	mov    edi,0x20
c00275df:	29 f7                	sub    edi,esi
c00275e1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275e4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00275e7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00275ea:	d3 e3                	shl    ebx,cl
c00275ec:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00275ef:	89 f1                	mov    ecx,esi
c00275f1:	d3 ef                	shr    edi,cl
c00275f3:	09 fb                	or     ebx,edi
c00275f5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275f8:	89 f1                	mov    ecx,esi
c00275fa:	d3 ef                	shr    edi,cl
c00275fc:	89 fe                	mov    esi,edi
c00275fe:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027601:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027604:	d3 e7                	shl    edi,cl
c0027606:	85 ff                	test   edi,edi
c0027608:	0f 95 c1             	setne  cl
c002760b:	0f b6 c9             	movzx  ecx,cl
c002760e:	09 cb                	or     ebx,ecx
c0027610:	29 da                	sub    edx,ebx
c0027612:	19 f0                	sbb    eax,esi
c0027614:	eb b9                	jmp    c00275cf <__adddf3+0x364>
c0027616:	0f 84 cd 00 00 00    	je     c00276e9 <__adddf3+0x47e>
c002761c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002761f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027622:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027625:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027629:	75 1b                	jne    c0027646 <__adddf3+0x3db>
c002762b:	89 d6                	mov    esi,edx
c002762d:	09 c6                	or     esi,eax
c002762f:	0f 84 7b 02 00 00    	je     c00278b0 <__adddf3+0x645>
c0027635:	4b                   	dec    ebx
c0027636:	75 24                	jne    c002765c <__adddf3+0x3f1>
c0027638:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002763b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002763e:	29 d1                	sub    ecx,edx
c0027640:	19 c6                	sbb    esi,eax
c0027642:	89 ca                	mov    edx,ecx
c0027644:	eb 61                	jmp    c00276a7 <__adddf3+0x43c>
c0027646:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027649:	f7 d6                	not    esi
c002764b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027651:	0f 84 59 02 00 00    	je     c00278b0 <__adddf3+0x645>
c0027657:	0d 00 00 00 80       	or     eax,0x80000000
c002765c:	83 fb 1f             	cmp    ebx,0x1f
c002765f:	7e 4d                	jle    c00276ae <__adddf3+0x443>
c0027661:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027664:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027667:	83 fb 3f             	cmp    ebx,0x3f
c002766a:	0f 8f 40 02 00 00    	jg     c00278b0 <__adddf3+0x645>
c0027670:	83 e3 1f             	and    ebx,0x1f
c0027673:	89 d9                	mov    ecx,ebx
c0027675:	89 c7                	mov    edi,eax
c0027677:	d3 ef                	shr    edi,cl
c0027679:	31 db                	xor    ebx,ebx
c002767b:	85 c9                	test   ecx,ecx
c002767d:	74 12                	je     c0027691 <__adddf3+0x426>
c002767f:	be 20 00 00 00       	mov    esi,0x20
c0027684:	29 ce                	sub    esi,ecx
c0027686:	89 f1                	mov    ecx,esi
c0027688:	d3 e0                	shl    eax,cl
c002768a:	31 db                	xor    ebx,ebx
c002768c:	85 c0                	test   eax,eax
c002768e:	0f 95 c3             	setne  bl
c0027691:	31 c0                	xor    eax,eax
c0027693:	85 d2                	test   edx,edx
c0027695:	0f 95 c0             	setne  al
c0027698:	09 c7                	or     edi,eax
c002769a:	09 fb                	or     ebx,edi
c002769c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002769f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276a2:	29 da                	sub    edx,ebx
c00276a4:	83 de 00             	sbb    esi,0x0
c00276a7:	89 f0                	mov    eax,esi
c00276a9:	e9 d6 00 00 00       	jmp    c0027784 <__adddf3+0x519>
c00276ae:	be 20 00 00 00       	mov    esi,0x20
c00276b3:	29 de                	sub    esi,ebx
c00276b5:	89 c7                	mov    edi,eax
c00276b7:	89 f1                	mov    ecx,esi
c00276b9:	d3 e7                	shl    edi,cl
c00276bb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276be:	89 d7                	mov    edi,edx
c00276c0:	88 d9                	mov    cl,bl
c00276c2:	d3 ef                	shr    edi,cl
c00276c4:	89 f9                	mov    ecx,edi
c00276c6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276c9:	09 cf                	or     edi,ecx
c00276cb:	88 d9                	mov    cl,bl
c00276cd:	d3 e8                	shr    eax,cl
c00276cf:	89 f1                	mov    ecx,esi
c00276d1:	d3 e2                	shl    edx,cl
c00276d3:	85 d2                	test   edx,edx
c00276d5:	0f 95 c2             	setne  dl
c00276d8:	0f b6 d2             	movzx  edx,dl
c00276db:	09 d7                	or     edi,edx
c00276dd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276e0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276e3:	29 fa                	sub    edx,edi
c00276e5:	19 c6                	sbb    esi,eax
c00276e7:	eb be                	jmp    c00276a7 <__adddf3+0x43c>
c00276e9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276ec:	8d 5e 01             	lea    ebx,[esi+0x1]
c00276ef:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00276f5:	75 6a                	jne    c0027761 <__adddf3+0x4f6>
c00276f7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00276fb:	75 58                	jne    c0027755 <__adddf3+0x4ea>
c00276fd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027700:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027703:	89 d6                	mov    esi,edx
c0027705:	09 c6                	or     esi,eax
c0027707:	75 17                	jne    c0027720 <__adddf3+0x4b5>
c0027709:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002770c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002770f:	85 db                	test   ebx,ebx
c0027711:	0f 85 99 01 00 00    	jne    c00278b0 <__adddf3+0x645>
c0027717:	31 ff                	xor    edi,edi
c0027719:	31 c9                	xor    ecx,ecx
c002771b:	e9 90 01 00 00       	jmp    c00278b0 <__adddf3+0x645>
c0027720:	85 db                	test   ebx,ebx
c0027722:	0f 84 88 01 00 00    	je     c00278b0 <__adddf3+0x645>
c0027728:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002772b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002772e:	85 c0                	test   eax,eax
c0027730:	79 10                	jns    c0027742 <__adddf3+0x4d7>
c0027732:	31 c9                	xor    ecx,ecx
c0027734:	f7 da                	neg    edx
c0027736:	0f 95 c1             	setne  cl
c0027739:	01 c8                	add    eax,ecx
c002773b:	f7 d8                	neg    eax
c002773d:	e9 2f 01 00 00       	jmp    c0027871 <__adddf3+0x606>
c0027742:	31 ff                	xor    edi,edi
c0027744:	31 c9                	xor    ecx,ecx
c0027746:	89 c3                	mov    ebx,eax
c0027748:	09 d3                	or     ebx,edx
c002774a:	0f 84 60 01 00 00    	je     c00278b0 <__adddf3+0x645>
c0027750:	e9 05 01 00 00       	jmp    c002785a <__adddf3+0x5ef>
c0027755:	31 ff                	xor    edi,edi
c0027757:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002775c:	e9 4f 01 00 00       	jmp    c00278b0 <__adddf3+0x645>
c0027761:	89 c1                	mov    ecx,eax
c0027763:	89 d0                	mov    eax,edx
c0027765:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027768:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002776b:	89 ca                	mov    edx,ecx
c002776d:	85 c9                	test   ecx,ecx
c002776f:	79 2c                	jns    c002779d <__adddf3+0x532>
c0027771:	31 c9                	xor    ecx,ecx
c0027773:	f7 d8                	neg    eax
c0027775:	0f 95 c1             	setne  cl
c0027778:	01 ca                	add    edx,ecx
c002777a:	f7 da                	neg    edx
c002777c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002777f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027782:	eb 19                	jmp    c002779d <__adddf3+0x532>
c0027784:	85 c0                	test   eax,eax
c0027786:	0f 89 e5 00 00 00    	jns    c0027871 <__adddf3+0x606>
c002778c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027791:	89 c1                	mov    ecx,eax
c0027793:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027796:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027799:	89 d0                	mov    eax,edx
c002779b:	89 ca                	mov    edx,ecx
c002779d:	85 d2                	test   edx,edx
c002779f:	74 59                	je     c00277fa <__adddf3+0x58f>
c00277a1:	0f bd da             	bsr    ebx,edx
c00277a4:	83 f3 1f             	xor    ebx,0x1f
c00277a7:	88 d9                	mov    cl,bl
c00277a9:	d3 e2                	shl    edx,cl
c00277ab:	bf 20 00 00 00       	mov    edi,0x20
c00277b0:	89 f9                	mov    ecx,edi
c00277b2:	29 d9                	sub    ecx,ebx
c00277b4:	89 c6                	mov    esi,eax
c00277b6:	d3 ee                	shr    esi,cl
c00277b8:	09 d6                	or     esi,edx
c00277ba:	88 d9                	mov    cl,bl
c00277bc:	d3 e0                	shl    eax,cl
c00277be:	89 c2                	mov    edx,eax
c00277c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277c3:	25 ff 07 00 00       	and    eax,0x7ff
c00277c8:	39 d8                	cmp    eax,ebx
c00277ca:	7f 22                	jg     c00277ee <__adddf3+0x583>
c00277cc:	29 c3                	sub    ebx,eax
c00277ce:	43                   	inc    ebx
c00277cf:	88 d9                	mov    cl,bl
c00277d1:	d3 ea                	shr    edx,cl
c00277d3:	29 df                	sub    edi,ebx
c00277d5:	89 f9                	mov    ecx,edi
c00277d7:	89 f0                	mov    eax,esi
c00277d9:	d3 e0                	shl    eax,cl
c00277db:	09 c2                	or     edx,eax
c00277dd:	89 f0                	mov    eax,esi
c00277df:	88 d9                	mov    cl,bl
c00277e1:	d3 e8                	shr    eax,cl
c00277e3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277e6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00277ec:	eb 6f                	jmp    c002785d <__adddf3+0x5f2>
c00277ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277f1:	29 d8                	sub    eax,ebx
c00277f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00277f6:	89 f0                	mov    eax,esi
c00277f8:	eb 59                	jmp    c0027853 <__adddf3+0x5e8>
c00277fa:	85 c0                	test   eax,eax
c00277fc:	74 6a                	je     c0027868 <__adddf3+0x5fd>
c00277fe:	0f bd c8             	bsr    ecx,eax
c0027801:	83 f1 1f             	xor    ecx,0x1f
c0027804:	d3 e0                	shl    eax,cl
c0027806:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027809:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002780f:	83 c1 20             	add    ecx,0x20
c0027812:	39 cb                	cmp    ebx,ecx
c0027814:	7f 35                	jg     c002784b <__adddf3+0x5e0>
c0027816:	29 d9                	sub    ecx,ebx
c0027818:	8d 71 01             	lea    esi,[ecx+0x1]
c002781b:	83 fe 1f             	cmp    esi,0x1f
c002781e:	7e 09                	jle    c0027829 <__adddf3+0x5be>
c0027820:	83 e9 1f             	sub    ecx,0x1f
c0027823:	d3 e8                	shr    eax,cl
c0027825:	89 c3                	mov    ebx,eax
c0027827:	eb 11                	jmp    c002783a <__adddf3+0x5cf>
c0027829:	b9 20 00 00 00       	mov    ecx,0x20
c002782e:	29 f1                	sub    ecx,esi
c0027830:	89 c3                	mov    ebx,eax
c0027832:	d3 e3                	shl    ebx,cl
c0027834:	89 f1                	mov    ecx,esi
c0027836:	d3 e8                	shr    eax,cl
c0027838:	89 c2                	mov    edx,eax
c002783a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002783d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027842:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027845:	89 d0                	mov    eax,edx
c0027847:	89 da                	mov    edx,ebx
c0027849:	eb 26                	jmp    c0027871 <__adddf3+0x606>
c002784b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002784e:	29 cf                	sub    edi,ecx
c0027850:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027853:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027858:	eb 17                	jmp    c0027871 <__adddf3+0x606>
c002785a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002785d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027860:	eb 0f                	jmp    c0027871 <__adddf3+0x606>
c0027862:	31 d2                	xor    edx,edx
c0027864:	31 c0                	xor    eax,eax
c0027866:	eb 09                	jmp    c0027871 <__adddf3+0x606>
c0027868:	89 c2                	mov    edx,eax
c002786a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027871:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027874:	c1 e1 14             	shl    ecx,0x14
c0027877:	89 c3                	mov    ebx,eax
c0027879:	c1 eb 0b             	shr    ebx,0xb
c002787c:	09 d9                	or     ecx,ebx
c002787e:	89 d3                	mov    ebx,edx
c0027880:	c1 eb 0b             	shr    ebx,0xb
c0027883:	c1 e0 15             	shl    eax,0x15
c0027886:	09 d8                	or     eax,ebx
c0027888:	89 c7                	mov    edi,eax
c002788a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027890:	0f 95 c0             	setne  al
c0027893:	89 c6                	mov    esi,eax
c0027895:	09 f3                	or     ebx,esi
c0027897:	83 e3 01             	and    ebx,0x1
c002789a:	c1 ea 0a             	shr    edx,0xa
c002789d:	21 da                	and    edx,ebx
c002789f:	89 f8                	mov    eax,edi
c00278a1:	01 d0                	add    eax,edx
c00278a3:	83 d1 00             	adc    ecx,0x0
c00278a6:	89 c7                	mov    edi,eax
c00278a8:	eb 06                	jmp    c00278b0 <__adddf3+0x645>
c00278aa:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278ad:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278b0:	89 f8                	mov    eax,edi
c00278b2:	89 ca                	mov    edx,ecx
c00278b4:	83 c4 24             	add    esp,0x24
c00278b7:	5b                   	pop    ebx
c00278b8:	5e                   	pop    esi
c00278b9:	5f                   	pop    edi
c00278ba:	5d                   	pop    ebp
c00278bb:	c3                   	ret    

c00278bc <__subdf3>:
c00278bc:	55                   	push   ebp
c00278bd:	89 e5                	mov    ebp,esp
c00278bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00278c2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00278c5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00278cb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00278ce:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00278d1:	5d                   	pop    ebp
c00278d2:	e9 94 f9 ff ff       	jmp    c002726b <__adddf3>

c00278d7 <__negdf2>:
c00278d7:	55                   	push   ebp
c00278d8:	89 e5                	mov    ebp,esp
c00278da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00278dd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00278e0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00278e6:	5d                   	pop    ebp
c00278e7:	c3                   	ret    

c00278e8 <__muldf3>:
c00278e8:	55                   	push   ebp
c00278e9:	89 e5                	mov    ebp,esp
c00278eb:	57                   	push   edi
c00278ec:	56                   	push   esi
c00278ed:	53                   	push   ebx
c00278ee:	83 ec 24             	sub    esp,0x24
c00278f1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00278f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00278f7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00278fd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027900:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027903:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027906:	89 c8                	mov    eax,ecx
c0027908:	c1 f8 14             	sar    eax,0x14
c002790b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002790e:	89 f8                	mov    eax,edi
c0027910:	89 fb                	mov    ebx,edi
c0027912:	c1 e3 0b             	shl    ebx,0xb
c0027915:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027918:	c1 e1 0b             	shl    ecx,0xb
c002791b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027921:	c1 e8 15             	shr    eax,0x15
c0027924:	09 c1                	or     ecx,eax
c0027926:	89 d6                	mov    esi,edx
c0027928:	89 d0                	mov    eax,edx
c002792a:	c1 f8 14             	sar    eax,0x14
c002792d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027930:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027933:	89 c3                	mov    ebx,eax
c0027935:	c1 e3 0b             	shl    ebx,0xb
c0027938:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002793b:	c1 e6 0b             	shl    esi,0xb
c002793e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027944:	c1 e8 15             	shr    eax,0x15
c0027947:	09 c6                	or     esi,eax
c0027949:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002794c:	25 ff 07 00 00       	and    eax,0x7ff
c0027951:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027954:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027957:	25 ff 07 00 00       	and    eax,0x7ff
c002795c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002795f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027962:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027965:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002796c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002796f:	40                   	inc    eax
c0027970:	a9 fe 07 00 00       	test   eax,0x7fe
c0027975:	0f 85 8d 00 00 00    	jne    c0027a08 <__muldf3+0x120>
c002797b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002797e:	09 c8                	or     eax,ecx
c0027980:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027984:	74 44                	je     c00279ca <__muldf3+0xe2>
c0027986:	85 c0                	test   eax,eax
c0027988:	0f 85 31 02 00 00    	jne    c0027bbf <__muldf3+0x2d7>
c002798e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027991:	40                   	inc    eax
c0027992:	a9 fe 07 00 00       	test   eax,0x7fe
c0027997:	75 13                	jne    c00279ac <__muldf3+0xc4>
c0027999:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002799c:	09 f1                	or     ecx,esi
c002799e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279a2:	74 22                	je     c00279c6 <__muldf3+0xde>
c00279a4:	85 c9                	test   ecx,ecx
c00279a6:	0f 85 0d 02 00 00    	jne    c0027bb9 <__muldf3+0x2d1>
c00279ac:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00279b0:	0f 89 09 02 00 00    	jns    c0027bbf <__muldf3+0x2d7>
c00279b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279b9:	05 00 00 00 80       	add    eax,0x80000000
c00279be:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279c1:	e9 f9 01 00 00       	jmp    c0027bbf <__muldf3+0x2d7>
c00279c6:	85 c9                	test   ecx,ecx
c00279c8:	eb 2e                	jmp    c00279f8 <__muldf3+0x110>
c00279ca:	85 c0                	test   eax,eax
c00279cc:	74 20                	je     c00279ee <__muldf3+0x106>
c00279ce:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00279d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279d4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279d7:	c1 ef 1f             	shr    edi,0x1f
c00279da:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00279dd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00279e0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00279e3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279e6:	09 f9                	or     ecx,edi
c00279e8:	78 1e                	js     c0027a08 <__muldf3+0x120>
c00279ea:	89 c3                	mov    ebx,eax
c00279ec:	eb e0                	jmp    c00279ce <__muldf3+0xe6>
c00279ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279f1:	f7 d0                	not    eax
c00279f3:	a9 ff 07 00 00       	test   eax,0x7ff
c00279f8:	75 b2                	jne    c00279ac <__muldf3+0xc4>
c00279fa:	31 ff                	xor    edi,edi
c00279fc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027a03:	e9 b7 01 00 00       	jmp    c0027bbf <__muldf3+0x2d7>
c0027a08:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a0b:	40                   	inc    eax
c0027a0c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a11:	75 57                	jne    c0027a6a <__muldf3+0x182>
c0027a13:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027a16:	09 f0                	or     eax,esi
c0027a18:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a1c:	74 23                	je     c0027a41 <__muldf3+0x159>
c0027a1e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a22:	0f 89 91 01 00 00    	jns    c0027bb9 <__muldf3+0x2d1>
c0027a28:	85 c0                	test   eax,eax
c0027a2a:	0f 85 89 01 00 00    	jne    c0027bb9 <__muldf3+0x2d1>
c0027a30:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027a33:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027a39:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a3c:	e9 7e 01 00 00       	jmp    c0027bbf <__muldf3+0x2d7>
c0027a41:	85 c0                	test   eax,eax
c0027a43:	75 0c                	jne    c0027a51 <__muldf3+0x169>
c0027a45:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a49:	0f 89 6a 01 00 00    	jns    c0027bb9 <__muldf3+0x2d1>
c0027a4f:	eb df                	jmp    c0027a30 <__muldf3+0x148>
c0027a51:	01 f6                	add    esi,esi
c0027a53:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a56:	c1 ea 1f             	shr    edx,0x1f
c0027a59:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a5c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027a5f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a62:	09 d6                	or     esi,edx
c0027a64:	78 04                	js     c0027a6a <__muldf3+0x182>
c0027a66:	89 c3                	mov    ebx,eax
c0027a68:	eb e7                	jmp    c0027a51 <__muldf3+0x169>
c0027a6a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027a70:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027a76:	89 c8                	mov    eax,ecx
c0027a78:	f7 e6                	mul    esi
c0027a7a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027a7d:	89 c7                	mov    edi,eax
c0027a7f:	89 c8                	mov    eax,ecx
c0027a81:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027a84:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027a87:	89 c1                	mov    ecx,eax
c0027a89:	89 f0                	mov    eax,esi
c0027a8b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027a8e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027a91:	89 c6                	mov    esi,eax
c0027a93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a96:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027a99:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a9c:	31 c0                	xor    eax,eax
c0027a9e:	01 f1                	add    ecx,esi
c0027aa0:	0f 92 c0             	setb   al
c0027aa3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027aa6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027aa9:	83 d6 00             	adc    esi,0x0
c0027aac:	01 c7                	add    edi,eax
c0027aae:	83 d6 00             	adc    esi,0x0
c0027ab1:	01 ca                	add    edx,ecx
c0027ab3:	0f 92 c1             	setb   cl
c0027ab6:	0f b6 c9             	movzx  ecx,cl
c0027ab9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027abc:	83 d6 00             	adc    esi,0x0
c0027abf:	01 cf                	add    edi,ecx
c0027ac1:	83 d6 00             	adc    esi,0x0
c0027ac4:	31 c9                	xor    ecx,ecx
c0027ac6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027ac9:	0f 95 c1             	setne  cl
c0027acc:	09 cf                	or     edi,ecx
c0027ace:	85 f6                	test   esi,esi
c0027ad0:	78 0c                	js     c0027ade <__muldf3+0x1f6>
c0027ad2:	01 f6                	add    esi,esi
c0027ad4:	89 f8                	mov    eax,edi
c0027ad6:	c1 e8 1f             	shr    eax,0x1f
c0027ad9:	09 c6                	or     esi,eax
c0027adb:	01 ff                	add    edi,edi
c0027add:	4b                   	dec    ebx
c0027ade:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027ae4:	0f 8f 85 00 00 00    	jg     c0027b6f <__muldf3+0x287>
c0027aea:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027af0:	85 db                	test   ebx,ebx
c0027af2:	0f 8f 84 00 00 00    	jg     c0027b7c <__muldf3+0x294>
c0027af8:	83 fb cc             	cmp    ebx,0xffffffcc
c0027afb:	7c 79                	jl     c0027b76 <__muldf3+0x28e>
c0027afd:	ba 01 00 00 00       	mov    edx,0x1
c0027b02:	29 da                	sub    edx,ebx
c0027b04:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b0a:	83 fa 1f             	cmp    edx,0x1f
c0027b0d:	7e 30                	jle    c0027b3f <__muldf3+0x257>
c0027b0f:	83 fa 20             	cmp    edx,0x20
c0027b12:	75 0b                	jne    c0027b1f <__muldf3+0x237>
c0027b14:	31 c0                	xor    eax,eax
c0027b16:	85 ff                	test   edi,edi
c0027b18:	0f 95 c0             	setne  al
c0027b1b:	89 c7                	mov    edi,eax
c0027b1d:	eb 1a                	jmp    c0027b39 <__muldf3+0x251>
c0027b1f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027b22:	89 f0                	mov    eax,esi
c0027b24:	d3 e0                	shl    eax,cl
c0027b26:	09 f8                	or     eax,edi
c0027b28:	0f 95 c0             	setne  al
c0027b2b:	0f b6 c0             	movzx  eax,al
c0027b2e:	89 c7                	mov    edi,eax
c0027b30:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027b35:	29 d9                	sub    ecx,ebx
c0027b37:	d3 ee                	shr    esi,cl
c0027b39:	09 f7                	or     edi,esi
c0027b3b:	31 db                	xor    ebx,ebx
c0027b3d:	eb 3b                	jmp    c0027b7a <__muldf3+0x292>
c0027b3f:	83 c3 1f             	add    ebx,0x1f
c0027b42:	89 f0                	mov    eax,esi
c0027b44:	88 d9                	mov    cl,bl
c0027b46:	d3 e0                	shl    eax,cl
c0027b48:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b4b:	89 f8                	mov    eax,edi
c0027b4d:	88 d1                	mov    cl,dl
c0027b4f:	d3 e8                	shr    eax,cl
c0027b51:	89 c1                	mov    ecx,eax
c0027b53:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b56:	09 c8                	or     eax,ecx
c0027b58:	88 d9                	mov    cl,bl
c0027b5a:	d3 e7                	shl    edi,cl
c0027b5c:	31 db                	xor    ebx,ebx
c0027b5e:	85 ff                	test   edi,edi
c0027b60:	0f 95 c3             	setne  bl
c0027b63:	89 df                	mov    edi,ebx
c0027b65:	09 c7                	or     edi,eax
c0027b67:	88 d1                	mov    cl,dl
c0027b69:	d3 ee                	shr    esi,cl
c0027b6b:	31 db                	xor    ebx,ebx
c0027b6d:	eb 0d                	jmp    c0027b7c <__muldf3+0x294>
c0027b6f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027b74:	eb 02                	jmp    c0027b78 <__muldf3+0x290>
c0027b76:	31 db                	xor    ebx,ebx
c0027b78:	31 ff                	xor    edi,edi
c0027b7a:	31 f6                	xor    esi,esi
c0027b7c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b7f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027b82:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b87:	09 c3                	or     ebx,eax
c0027b89:	c1 e3 14             	shl    ebx,0x14
c0027b8c:	89 f0                	mov    eax,esi
c0027b8e:	c1 e8 0b             	shr    eax,0xb
c0027b91:	09 c3                	or     ebx,eax
c0027b93:	89 f8                	mov    eax,edi
c0027b95:	c1 e8 0b             	shr    eax,0xb
c0027b98:	c1 e6 15             	shl    esi,0x15
c0027b9b:	09 c6                	or     esi,eax
c0027b9d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027ba3:	0f 95 c1             	setne  cl
c0027ba6:	09 c8                	or     eax,ecx
c0027ba8:	83 e0 01             	and    eax,0x1
c0027bab:	c1 ef 0a             	shr    edi,0xa
c0027bae:	21 c7                	and    edi,eax
c0027bb0:	01 f7                	add    edi,esi
c0027bb2:	83 d3 00             	adc    ebx,0x0
c0027bb5:	89 da                	mov    edx,ebx
c0027bb7:	eb 03                	jmp    c0027bbc <__muldf3+0x2d4>
c0027bb9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027bbc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027bbf:	89 f8                	mov    eax,edi
c0027bc1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027bc4:	83 c4 24             	add    esp,0x24
c0027bc7:	5b                   	pop    ebx
c0027bc8:	5e                   	pop    esi
c0027bc9:	5f                   	pop    edi
c0027bca:	5d                   	pop    ebp
c0027bcb:	c3                   	ret    

c0027bcc <__divdf3>:
c0027bcc:	55                   	push   ebp
c0027bcd:	89 e5                	mov    ebp,esp
c0027bcf:	57                   	push   edi
c0027bd0:	56                   	push   esi
c0027bd1:	53                   	push   ebx
c0027bd2:	83 ec 2c             	sub    esp,0x2c
c0027bd5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bd8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027bdb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bde:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027be1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027be4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027be7:	89 ce                	mov    esi,ecx
c0027be9:	89 c8                	mov    eax,ecx
c0027beb:	c1 f8 14             	sar    eax,0x14
c0027bee:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027bf1:	89 f8                	mov    eax,edi
c0027bf3:	89 fb                	mov    ebx,edi
c0027bf5:	c1 e3 0b             	shl    ebx,0xb
c0027bf8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027bfb:	c1 e6 0b             	shl    esi,0xb
c0027bfe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c04:	c1 e8 15             	shr    eax,0x15
c0027c07:	09 c6                	or     esi,eax
c0027c09:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027c0c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c0f:	89 c2                	mov    edx,eax
c0027c11:	c1 fa 14             	sar    edx,0x14
c0027c14:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c17:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c1a:	89 de                	mov    esi,ebx
c0027c1c:	c1 e6 0b             	shl    esi,0xb
c0027c1f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027c22:	c1 e0 0b             	shl    eax,0xb
c0027c25:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c2a:	c1 eb 15             	shr    ebx,0x15
c0027c2d:	09 d8                	or     eax,ebx
c0027c2f:	89 c2                	mov    edx,eax
c0027c31:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c34:	25 ff 07 00 00       	and    eax,0x7ff
c0027c39:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027c3c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c3f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c45:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027c48:	29 d8                	sub    eax,ebx
c0027c4a:	05 ff 03 00 00       	add    eax,0x3ff
c0027c4f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027c52:	46                   	inc    esi
c0027c53:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027c59:	0f 85 a5 00 00 00    	jne    c0027d04 <__divdf3+0x138>
c0027c5f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027c62:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027c65:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027c69:	74 2a                	je     c0027c95 <__divdf3+0xc9>
c0027c6b:	85 f6                	test   esi,esi
c0027c6d:	0f 85 cc 02 00 00    	jne    c0027f3f <__divdf3+0x373>
c0027c73:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c76:	40                   	inc    eax
c0027c77:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c7c:	75 26                	jne    c0027ca4 <__divdf3+0xd8>
c0027c7e:	85 db                	test   ebx,ebx
c0027c80:	74 22                	je     c0027ca4 <__divdf3+0xd8>
c0027c82:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c85:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c88:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c8b:	09 d0                	or     eax,edx
c0027c8d:	0f 85 ac 02 00 00    	jne    c0027f3f <__divdf3+0x373>
c0027c93:	eb 63                	jmp    c0027cf8 <__divdf3+0x12c>
c0027c95:	85 f6                	test   esi,esi
c0027c97:	75 22                	jne    c0027cbb <__divdf3+0xef>
c0027c99:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c9c:	40                   	inc    eax
c0027c9d:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ca2:	74 36                	je     c0027cda <__divdf3+0x10e>
c0027ca4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027ca8:	0f 89 91 02 00 00    	jns    c0027f3f <__divdf3+0x373>
c0027cae:	89 f8                	mov    eax,edi
c0027cb0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027cb6:	e9 80 02 00 00       	jmp    c0027f3b <__divdf3+0x36f>
c0027cbb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027cbe:	01 f6                	add    esi,esi
c0027cc0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027cc3:	c1 ef 1f             	shr    edi,0x1f
c0027cc6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027cc9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027ccc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027ccf:	09 f7                	or     edi,esi
c0027cd1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027cd4:	78 2e                	js     c0027d04 <__divdf3+0x138>
c0027cd6:	89 c8                	mov    eax,ecx
c0027cd8:	eb e1                	jmp    c0027cbb <__divdf3+0xef>
c0027cda:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cdd:	09 d0                	or     eax,edx
c0027cdf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ce3:	74 0f                	je     c0027cf4 <__divdf3+0x128>
c0027ce5:	85 c0                	test   eax,eax
c0027ce7:	74 bb                	je     c0027ca4 <__divdf3+0xd8>
c0027ce9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027cec:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027cef:	e9 4b 02 00 00       	jmp    c0027f3f <__divdf3+0x373>
c0027cf4:	85 c0                	test   eax,eax
c0027cf6:	75 ac                	jne    c0027ca4 <__divdf3+0xd8>
c0027cf8:	31 ff                	xor    edi,edi
c0027cfa:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027cff:	e9 3b 02 00 00       	jmp    c0027f3f <__divdf3+0x373>
c0027d04:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d07:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027d0a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027d10:	75 6b                	jne    c0027d7d <__divdf3+0x1b1>
c0027d12:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d15:	09 d6                	or     esi,edx
c0027d17:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d1b:	74 28                	je     c0027d45 <__divdf3+0x179>
c0027d1d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d20:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d23:	85 f6                	test   esi,esi
c0027d25:	0f 85 14 02 00 00    	jne    c0027f3f <__divdf3+0x373>
c0027d2b:	31 ff                	xor    edi,edi
c0027d2d:	31 c9                	xor    ecx,ecx
c0027d2f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d32:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d35:	0f 89 04 02 00 00    	jns    c0027f3f <__divdf3+0x373>
c0027d3b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027d40:	e9 fa 01 00 00       	jmp    c0027f3f <__divdf3+0x373>
c0027d45:	85 f6                	test   esi,esi
c0027d47:	75 1b                	jne    c0027d64 <__divdf3+0x198>
c0027d49:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d4c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d4f:	25 00 00 00 80       	and    eax,0x80000000
c0027d54:	31 c9                	xor    ecx,ecx
c0027d56:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027d5b:	89 cf                	mov    edi,ecx
c0027d5d:	89 c1                	mov    ecx,eax
c0027d5f:	e9 db 01 00 00       	jmp    c0027f3f <__divdf3+0x373>
c0027d64:	01 d2                	add    edx,edx
c0027d66:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d69:	c1 eb 1f             	shr    ebx,0x1f
c0027d6c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d6f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027d72:	8d 48 01             	lea    ecx,[eax+0x1]
c0027d75:	09 da                	or     edx,ebx
c0027d77:	78 04                	js     c0027d7d <__divdf3+0x1b1>
c0027d79:	89 c8                	mov    eax,ecx
c0027d7b:	eb e7                	jmp    c0027d64 <__divdf3+0x198>
c0027d7d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027d80:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d86:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027d8c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027d8f:	39 d6                	cmp    esi,edx
c0027d91:	77 0d                	ja     c0027da0 <__divdf3+0x1d4>
c0027d93:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027d96:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027d99:	72 1b                	jb     c0027db6 <__divdf3+0x1ea>
c0027d9b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027d9e:	75 16                	jne    c0027db6 <__divdf3+0x1ea>
c0027da0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027da3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027da6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027da9:	83 de 00             	sbb    esi,0x0
c0027dac:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027daf:	ba 01 00 00 00       	mov    edx,0x1
c0027db4:	eb 02                	jmp    c0027db8 <__divdf3+0x1ec>
c0027db6:	31 d2                	xor    edx,edx
c0027db8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027dbf:	31 ff                	xor    edi,edi
c0027dc1:	01 ff                	add    edi,edi
c0027dc3:	89 d1                	mov    ecx,edx
c0027dc5:	c1 e9 1f             	shr    ecx,0x1f
c0027dc8:	09 cf                	or     edi,ecx
c0027dca:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027dcd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027dd0:	89 da                	mov    edx,ebx
c0027dd2:	89 f3                	mov    ebx,esi
c0027dd4:	8d 34 36             	lea    esi,[esi+esi*1]
c0027dd7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027dda:	c1 e9 1f             	shr    ecx,0x1f
c0027ddd:	09 ce                	or     esi,ecx
c0027ddf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027de2:	01 c9                	add    ecx,ecx
c0027de4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027de7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027dea:	85 db                	test   ebx,ebx
c0027dec:	78 29                	js     c0027e17 <__divdf3+0x24b>
c0027dee:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027df1:	72 07                	jb     c0027dfa <__divdf3+0x22e>
c0027df3:	75 3c                	jne    c0027e31 <__divdf3+0x265>
c0027df5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027df8:	77 37                	ja     c0027e31 <__divdf3+0x265>
c0027dfa:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027dfd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027e00:	31 d2                	xor    edx,edx
c0027e02:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027e05:	0f 97 c2             	seta   dl
c0027e08:	29 d6                	sub    esi,edx
c0027e0a:	89 d9                	mov    ecx,ebx
c0027e0c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027e0f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e12:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027e15:	eb 17                	jmp    c0027e2e <__divdf3+0x262>
c0027e17:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e1a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e1d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e20:	0f 97 c1             	seta   cl
c0027e23:	0f b6 c9             	movzx  ecx,cl
c0027e26:	29 ce                	sub    esi,ecx
c0027e28:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027e2b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027e2e:	83 ca 01             	or     edx,0x1
c0027e31:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027e34:	75 8b                	jne    c0027dc1 <__divdf3+0x1f5>
c0027e36:	c1 e7 09             	shl    edi,0x9
c0027e39:	89 d1                	mov    ecx,edx
c0027e3b:	c1 e9 17             	shr    ecx,0x17
c0027e3e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e41:	09 f3                	or     ebx,esi
c0027e43:	0f 95 c3             	setne  bl
c0027e46:	0f b6 db             	movzx  ebx,bl
c0027e49:	c1 e2 09             	shl    edx,0x9
c0027e4c:	09 d3                	or     ebx,edx
c0027e4e:	89 ca                	mov    edx,ecx
c0027e50:	09 fa                	or     edx,edi
c0027e52:	78 0c                	js     c0027e60 <__divdf3+0x294>
c0027e54:	01 d2                	add    edx,edx
c0027e56:	89 d9                	mov    ecx,ebx
c0027e58:	c1 e9 1f             	shr    ecx,0x1f
c0027e5b:	09 ca                	or     edx,ecx
c0027e5d:	01 db                	add    ebx,ebx
c0027e5f:	48                   	dec    eax
c0027e60:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027e65:	0f 8f 83 00 00 00    	jg     c0027eee <__divdf3+0x322>
c0027e6b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027e71:	85 c0                	test   eax,eax
c0027e73:	0f 8f 82 00 00 00    	jg     c0027efb <__divdf3+0x32f>
c0027e79:	83 f8 cc             	cmp    eax,0xffffffcc
c0027e7c:	7c 77                	jl     c0027ef5 <__divdf3+0x329>
c0027e7e:	be 01 00 00 00       	mov    esi,0x1
c0027e83:	29 c6                	sub    esi,eax
c0027e85:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027e8b:	83 fe 1f             	cmp    esi,0x1f
c0027e8e:	7e 2f                	jle    c0027ebf <__divdf3+0x2f3>
c0027e90:	83 fe 20             	cmp    esi,0x20
c0027e93:	75 0a                	jne    c0027e9f <__divdf3+0x2d3>
c0027e95:	85 db                	test   ebx,ebx
c0027e97:	0f 95 c3             	setne  bl
c0027e9a:	0f b6 db             	movzx  ebx,bl
c0027e9d:	eb 1a                	jmp    c0027eb9 <__divdf3+0x2ed>
c0027e9f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027ea2:	89 d7                	mov    edi,edx
c0027ea4:	d3 e7                	shl    edi,cl
c0027ea6:	89 f9                	mov    ecx,edi
c0027ea8:	09 d9                	or     ecx,ebx
c0027eaa:	0f 95 c3             	setne  bl
c0027ead:	0f b6 db             	movzx  ebx,bl
c0027eb0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027eb5:	29 c1                	sub    ecx,eax
c0027eb7:	d3 ea                	shr    edx,cl
c0027eb9:	09 d3                	or     ebx,edx
c0027ebb:	31 c0                	xor    eax,eax
c0027ebd:	eb 3a                	jmp    c0027ef9 <__divdf3+0x32d>
c0027ebf:	83 c0 1f             	add    eax,0x1f
c0027ec2:	89 d7                	mov    edi,edx
c0027ec4:	88 c1                	mov    cl,al
c0027ec6:	d3 e7                	shl    edi,cl
c0027ec8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ecb:	89 df                	mov    edi,ebx
c0027ecd:	89 f1                	mov    ecx,esi
c0027ecf:	d3 ef                	shr    edi,cl
c0027ed1:	89 f9                	mov    ecx,edi
c0027ed3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027ed6:	09 cf                	or     edi,ecx
c0027ed8:	88 c1                	mov    cl,al
c0027eda:	d3 e3                	shl    ebx,cl
c0027edc:	85 db                	test   ebx,ebx
c0027ede:	0f 95 c3             	setne  bl
c0027ee1:	0f b6 db             	movzx  ebx,bl
c0027ee4:	09 fb                	or     ebx,edi
c0027ee6:	89 f1                	mov    ecx,esi
c0027ee8:	d3 ea                	shr    edx,cl
c0027eea:	31 c0                	xor    eax,eax
c0027eec:	eb 0d                	jmp    c0027efb <__divdf3+0x32f>
c0027eee:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027ef3:	eb 02                	jmp    c0027ef7 <__divdf3+0x32b>
c0027ef5:	31 c0                	xor    eax,eax
c0027ef7:	31 db                	xor    ebx,ebx
c0027ef9:	31 d2                	xor    edx,edx
c0027efb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027efe:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027f01:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027f07:	09 c8                	or     eax,ecx
c0027f09:	c1 e0 14             	shl    eax,0x14
c0027f0c:	89 d1                	mov    ecx,edx
c0027f0e:	c1 e9 0b             	shr    ecx,0xb
c0027f11:	09 c8                	or     eax,ecx
c0027f13:	89 c6                	mov    esi,eax
c0027f15:	89 d9                	mov    ecx,ebx
c0027f17:	c1 e9 0b             	shr    ecx,0xb
c0027f1a:	c1 e2 15             	shl    edx,0x15
c0027f1d:	09 ca                	or     edx,ecx
c0027f1f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027f25:	0f 95 c0             	setne  al
c0027f28:	09 c1                	or     ecx,eax
c0027f2a:	83 e1 01             	and    ecx,0x1
c0027f2d:	c1 eb 0a             	shr    ebx,0xa
c0027f30:	21 cb                	and    ebx,ecx
c0027f32:	01 d3                	add    ebx,edx
c0027f34:	89 d8                	mov    eax,ebx
c0027f36:	83 d6 00             	adc    esi,0x0
c0027f39:	89 f2                	mov    edx,esi
c0027f3b:	89 c7                	mov    edi,eax
c0027f3d:	89 d1                	mov    ecx,edx
c0027f3f:	89 f8                	mov    eax,edi
c0027f41:	89 ca                	mov    edx,ecx
c0027f43:	83 c4 2c             	add    esp,0x2c
c0027f46:	5b                   	pop    ebx
c0027f47:	5e                   	pop    esi
c0027f48:	5f                   	pop    edi
c0027f49:	5d                   	pop    ebp
c0027f4a:	c3                   	ret    

c0027f4b <__floatsidf>:
c0027f4b:	55                   	push   ebp
c0027f4c:	89 e5                	mov    ebp,esp
c0027f4e:	56                   	push   esi
c0027f4f:	53                   	push   ebx
c0027f50:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f53:	85 db                	test   ebx,ebx
c0027f55:	7e 15                	jle    c0027f6c <__floatsidf+0x21>
c0027f57:	0f bd cb             	bsr    ecx,ebx
c0027f5a:	83 f1 1f             	xor    ecx,0x1f
c0027f5d:	d3 e3                	shl    ebx,cl
c0027f5f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f65:	b8 1e 04 00 00       	mov    eax,0x41e
c0027f6a:	eb 21                	jmp    c0027f8d <__floatsidf+0x42>
c0027f6c:	b8 00 00 00 00       	mov    eax,0x0
c0027f71:	ba 00 00 00 00       	mov    edx,0x0
c0027f76:	74 2a                	je     c0027fa2 <__floatsidf+0x57>
c0027f78:	f7 db                	neg    ebx
c0027f7a:	0f bd cb             	bsr    ecx,ebx
c0027f7d:	83 f1 1f             	xor    ecx,0x1f
c0027f80:	d3 e3                	shl    ebx,cl
c0027f82:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f88:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027f8d:	29 c8                	sub    eax,ecx
c0027f8f:	c1 e0 14             	shl    eax,0x14
c0027f92:	89 c1                	mov    ecx,eax
c0027f94:	89 de                	mov    esi,ebx
c0027f96:	c1 ee 0b             	shr    esi,0xb
c0027f99:	09 f1                	or     ecx,esi
c0027f9b:	89 ca                	mov    edx,ecx
c0027f9d:	c1 e3 15             	shl    ebx,0x15
c0027fa0:	89 d8                	mov    eax,ebx
c0027fa2:	5b                   	pop    ebx
c0027fa3:	5e                   	pop    esi
c0027fa4:	5d                   	pop    ebp
c0027fa5:	c3                   	ret    

c0027fa6 <__floatunsidf>:
c0027fa6:	55                   	push   ebp
c0027fa7:	89 e5                	mov    ebp,esp
c0027fa9:	56                   	push   esi
c0027faa:	53                   	push   ebx
c0027fab:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fae:	85 db                	test   ebx,ebx
c0027fb0:	74 2a                	je     c0027fdc <__floatunsidf+0x36>
c0027fb2:	0f bd cb             	bsr    ecx,ebx
c0027fb5:	83 f1 1f             	xor    ecx,0x1f
c0027fb8:	d3 e3                	shl    ebx,cl
c0027fba:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fc0:	b8 1e 04 00 00       	mov    eax,0x41e
c0027fc5:	29 c8                	sub    eax,ecx
c0027fc7:	c1 e0 14             	shl    eax,0x14
c0027fca:	89 c1                	mov    ecx,eax
c0027fcc:	89 de                	mov    esi,ebx
c0027fce:	c1 ee 0b             	shr    esi,0xb
c0027fd1:	09 f1                	or     ecx,esi
c0027fd3:	89 ca                	mov    edx,ecx
c0027fd5:	c1 e3 15             	shl    ebx,0x15
c0027fd8:	89 d8                	mov    eax,ebx
c0027fda:	eb 04                	jmp    c0027fe0 <__floatunsidf+0x3a>
c0027fdc:	31 c0                	xor    eax,eax
c0027fde:	31 d2                	xor    edx,edx
c0027fe0:	5b                   	pop    ebx
c0027fe1:	5e                   	pop    esi
c0027fe2:	5d                   	pop    ebp
c0027fe3:	c3                   	ret    

c0027fe4 <__fixdfsi>:
c0027fe4:	55                   	push   ebp
c0027fe5:	89 e5                	mov    ebp,esp
c0027fe7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027fea:	89 d1                	mov    ecx,edx
c0027fec:	c1 e1 0b             	shl    ecx,0xb
c0027fef:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027ff8:	c1 e8 15             	shr    eax,0x15
c0027ffb:	09 c1                	or     ecx,eax
c0027ffd:	c1 fa 14             	sar    edx,0x14
c0028000:	78 1f                	js     c0028021 <__fixdfsi+0x3d>
c0028002:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028008:	31 c0                	xor    eax,eax
c002800a:	83 fa 1e             	cmp    edx,0x1e
c002800d:	77 40                	ja     c002804f <__fixdfsi+0x6b>
c002800f:	89 c8                	mov    eax,ecx
c0028011:	0d 00 00 00 80       	or     eax,0x80000000
c0028016:	b9 1f 00 00 00       	mov    ecx,0x1f
c002801b:	29 d1                	sub    ecx,edx
c002801d:	d3 e8                	shr    eax,cl
c002801f:	eb 2e                	jmp    c002804f <__fixdfsi+0x6b>
c0028021:	31 c0                	xor    eax,eax
c0028023:	81 c2 01 04 00 00    	add    edx,0x401
c0028029:	78 24                	js     c002804f <__fixdfsi+0x6b>
c002802b:	83 fa 1e             	cmp    edx,0x1e
c002802e:	7e 09                	jle    c0028039 <__fixdfsi+0x55>
c0028030:	83 fa 1f             	cmp    edx,0x1f
c0028033:	75 18                	jne    c002804d <__fixdfsi+0x69>
c0028035:	85 c9                	test   ecx,ecx
c0028037:	75 14                	jne    c002804d <__fixdfsi+0x69>
c0028039:	89 c8                	mov    eax,ecx
c002803b:	0d 00 00 00 80       	or     eax,0x80000000
c0028040:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028045:	29 d1                	sub    ecx,edx
c0028047:	d3 e8                	shr    eax,cl
c0028049:	f7 d8                	neg    eax
c002804b:	eb 02                	jmp    c002804f <__fixdfsi+0x6b>
c002804d:	31 c0                	xor    eax,eax
c002804f:	5d                   	pop    ebp
c0028050:	c3                   	ret    

c0028051 <__fixunsdfsi>:
c0028051:	55                   	push   ebp
c0028052:	89 e5                	mov    ebp,esp
c0028054:	53                   	push   ebx
c0028055:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028058:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002805b:	89 d3                	mov    ebx,edx
c002805d:	c1 fb 14             	sar    ebx,0x14
c0028060:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028066:	31 c0                	xor    eax,eax
c0028068:	83 fb 1f             	cmp    ebx,0x1f
c002806b:	77 1d                	ja     c002808a <__fixunsdfsi+0x39>
c002806d:	89 d0                	mov    eax,edx
c002806f:	c1 e0 0b             	shl    eax,0xb
c0028072:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028077:	c1 e9 15             	shr    ecx,0x15
c002807a:	09 c8                	or     eax,ecx
c002807c:	0d 00 00 00 80       	or     eax,0x80000000
c0028081:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028086:	29 d9                	sub    ecx,ebx
c0028088:	d3 e8                	shr    eax,cl
c002808a:	5b                   	pop    ebx
c002808b:	5d                   	pop    ebp
c002808c:	c3                   	ret    

c002808d <__cmpdf2>:
c002808d:	55                   	push   ebp
c002808e:	89 e5                	mov    ebp,esp
c0028090:	57                   	push   edi
c0028091:	56                   	push   esi
c0028092:	53                   	push   ebx
c0028093:	83 ec 0c             	sub    esp,0xc
c0028096:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028099:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002809c:	89 ca                	mov    edx,ecx
c002809e:	c1 ea 14             	shr    edx,0x14
c00280a1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00280a7:	89 cb                	mov    ebx,ecx
c00280a9:	c1 fb 1f             	sar    ebx,0x1f
c00280ac:	31 da                	xor    edx,ebx
c00280ae:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280b1:	89 df                	mov    edi,ebx
c00280b3:	c1 e7 0b             	shl    edi,0xb
c00280b6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280b9:	c1 e1 0b             	shl    ecx,0xb
c00280bc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00280c2:	c1 eb 15             	shr    ebx,0x15
c00280c5:	09 d9                	or     ecx,ebx
c00280c7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00280ca:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00280cd:	89 ce                	mov    esi,ecx
c00280cf:	c1 ee 14             	shr    esi,0x14
c00280d2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00280d8:	89 cb                	mov    ebx,ecx
c00280da:	c1 fb 1f             	sar    ebx,0x1f
c00280dd:	31 de                	xor    esi,ebx
c00280df:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00280e2:	89 df                	mov    edi,ebx
c00280e4:	c1 e7 0b             	shl    edi,0xb
c00280e7:	c1 e1 0b             	shl    ecx,0xb
c00280ea:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00280f0:	c1 eb 15             	shr    ebx,0x15
c00280f3:	09 d9                	or     ecx,ebx
c00280f5:	89 d3                	mov    ebx,edx
c00280f7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00280fd:	43                   	inc    ebx
c00280fe:	83 fb 01             	cmp    ebx,0x1
c0028101:	77 08                	ja     c002810b <__cmpdf2+0x7e>
c0028103:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028106:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028109:	75 68                	jne    c0028173 <__cmpdf2+0xe6>
c002810b:	89 f3                	mov    ebx,esi
c002810d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028113:	43                   	inc    ebx
c0028114:	83 fb 01             	cmp    ebx,0x1
c0028117:	77 06                	ja     c002811f <__cmpdf2+0x92>
c0028119:	89 fb                	mov    ebx,edi
c002811b:	09 cb                	or     ebx,ecx
c002811d:	75 54                	jne    c0028173 <__cmpdf2+0xe6>
c002811f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028122:	09 f8                	or     eax,edi
c0028124:	09 c8                	or     eax,ecx
c0028126:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028129:	75 12                	jne    c002813d <__cmpdf2+0xb0>
c002812b:	8d 42 01             	lea    eax,[edx+0x1]
c002812e:	83 f8 01             	cmp    eax,0x1
c0028131:	77 0a                	ja     c002813d <__cmpdf2+0xb0>
c0028133:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028136:	31 c0                	xor    eax,eax
c0028138:	83 fb 01             	cmp    ebx,0x1
c002813b:	76 36                	jbe    c0028173 <__cmpdf2+0xe6>
c002813d:	b8 01 00 00 00       	mov    eax,0x1
c0028142:	39 f2                	cmp    edx,esi
c0028144:	7f 2d                	jg     c0028173 <__cmpdf2+0xe6>
c0028146:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002814b:	7c 26                	jl     c0028173 <__cmpdf2+0xe6>
c002814d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028150:	77 07                	ja     c0028159 <__cmpdf2+0xcc>
c0028152:	72 16                	jb     c002816a <__cmpdf2+0xdd>
c0028154:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028157:	76 0a                	jbe    c0028163 <__cmpdf2+0xd6>
c0028159:	89 d0                	mov    eax,edx
c002815b:	c1 f8 1f             	sar    eax,0x1f
c002815e:	83 c8 01             	or     eax,0x1
c0028161:	eb 10                	jmp    c0028173 <__cmpdf2+0xe6>
c0028163:	b8 00 00 00 00       	mov    eax,0x0
c0028168:	73 09                	jae    c0028173 <__cmpdf2+0xe6>
c002816a:	89 d0                	mov    eax,edx
c002816c:	c1 f8 1f             	sar    eax,0x1f
c002816f:	83 e0 02             	and    eax,0x2
c0028172:	48                   	dec    eax
c0028173:	83 c4 0c             	add    esp,0xc
c0028176:	5b                   	pop    ebx
c0028177:	5e                   	pop    esi
c0028178:	5f                   	pop    edi
c0028179:	5d                   	pop    ebp
c002817a:	c3                   	ret    

c002817b <__eqdf2>:
c002817b:	55                   	push   ebp
c002817c:	89 e5                	mov    ebp,esp
c002817e:	50                   	push   eax
c002817f:	6a 01                	push   0x1
c0028181:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028184:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028187:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002818a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002818d:	e8 fb fe ff ff       	call   c002808d <__cmpdf2>
c0028192:	83 c4 18             	add    esp,0x18
c0028195:	c9                   	leave  
c0028196:	c3                   	ret    

c0028197 <__nedf2>:
c0028197:	eb e2                	jmp    c002817b <__eqdf2>

c0028199 <__gtdf2>:
c0028199:	55                   	push   ebp
c002819a:	89 e5                	mov    ebp,esp
c002819c:	50                   	push   eax
c002819d:	6a ff                	push   0xffffffff
c002819f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281a2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281a5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281ab:	e8 dd fe ff ff       	call   c002808d <__cmpdf2>
c00281b0:	83 c4 18             	add    esp,0x18
c00281b3:	c9                   	leave  
c00281b4:	c3                   	ret    

c00281b5 <__gedf2>:
c00281b5:	eb e2                	jmp    c0028199 <__gtdf2>

c00281b7 <__ltdf2>:
c00281b7:	eb c2                	jmp    c002817b <__eqdf2>

c00281b9 <__ledf2>:
c00281b9:	eb c0                	jmp    c002817b <__eqdf2>

c00281bb <__truncdfsf2>:
c00281bb:	55                   	push   ebp
c00281bc:	89 e5                	mov    ebp,esp
c00281be:	57                   	push   edi
c00281bf:	56                   	push   esi
c00281c0:	53                   	push   ebx
c00281c1:	83 ec 0c             	sub    esp,0xc
c00281c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281c7:	89 d1                	mov    ecx,edx
c00281c9:	c1 f9 14             	sar    ecx,0x14
c00281cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281cf:	89 df                	mov    edi,ebx
c00281d1:	c1 e7 0b             	shl    edi,0xb
c00281d4:	89 d0                	mov    eax,edx
c00281d6:	c1 e0 0b             	shl    eax,0xb
c00281d9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00281de:	c1 eb 15             	shr    ebx,0x15
c00281e1:	09 d8                	or     eax,ebx
c00281e3:	89 cb                	mov    ebx,ecx
c00281e5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00281eb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00281f1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00281f7:	0f 86 9e 00 00 00    	jbe    c002829b <__truncdfsf2+0xe0>
c00281fd:	85 db                	test   ebx,ebx
c00281ff:	75 0a                	jne    c002820b <__truncdfsf2+0x50>
c0028201:	c1 fa 17             	sar    edx,0x17
c0028204:	30 d2                	xor    dl,dl
c0028206:	e9 84 00 00 00       	jmp    c002828f <__truncdfsf2+0xd4>
c002820b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028211:	83 fe 83             	cmp    esi,0xffffff83
c0028214:	7d 4b                	jge    c0028261 <__truncdfsf2+0xa6>
c0028216:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002821b:	29 f1                	sub    ecx,esi
c002821d:	83 f9 1f             	cmp    ecx,0x1f
c0028220:	7f 6b                	jg     c002828d <__truncdfsf2+0xd2>
c0028222:	0d 00 00 00 80       	or     eax,0x80000000
c0028227:	89 c3                	mov    ebx,eax
c0028229:	d3 eb                	shr    ebx,cl
c002822b:	be 01 00 00 00       	mov    esi,0x1
c0028230:	d3 e6                	shl    esi,cl
c0028232:	4e                   	dec    esi
c0028233:	21 f0                	and    eax,esi
c0028235:	09 f8                	or     eax,edi
c0028237:	0f 95 c0             	setne  al
c002823a:	0f b6 c0             	movzx  eax,al
c002823d:	09 c3                	or     ebx,eax
c002823f:	89 d9                	mov    ecx,ebx
c0028241:	c1 e9 08             	shr    ecx,0x8
c0028244:	f6 c3 7f             	test   bl,0x7f
c0028247:	0f 95 c0             	setne  al
c002824a:	09 c8                	or     eax,ecx
c002824c:	83 e0 01             	and    eax,0x1
c002824f:	c1 eb 07             	shr    ebx,0x7
c0028252:	21 c3                	and    ebx,eax
c0028254:	81 e2 00 00 00 80    	and    edx,0x80000000
c002825a:	09 d1                	or     ecx,edx
c002825c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002825f:	eb 76                	jmp    c00282d7 <__truncdfsf2+0x11c>
c0028261:	83 c6 80             	add    esi,0xffffff80
c0028264:	7e 1d                	jle    c0028283 <__truncdfsf2+0xc8>
c0028266:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002826c:	75 0b                	jne    c0028279 <__truncdfsf2+0xbe>
c002826e:	09 f8                	or     eax,edi
c0028270:	74 09                	je     c002827b <__truncdfsf2+0xc0>
c0028272:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028277:	eb 02                	jmp    c002827b <__truncdfsf2+0xc0>
c0028279:	31 c0                	xor    eax,eax
c002827b:	c1 fa 17             	sar    edx,0x17
c002827e:	80 ca ff             	or     dl,0xff
c0028281:	eb 0e                	jmp    c0028291 <__truncdfsf2+0xd6>
c0028283:	c1 fa 1f             	sar    edx,0x1f
c0028286:	c1 e2 08             	shl    edx,0x8
c0028289:	09 ca                	or     edx,ecx
c002828b:	eb 04                	jmp    c0028291 <__truncdfsf2+0xd6>
c002828d:	31 d2                	xor    edx,edx
c002828f:	31 c0                	xor    eax,eax
c0028291:	c1 e2 17             	shl    edx,0x17
c0028294:	c1 e8 08             	shr    eax,0x8
c0028297:	09 d0                	or     eax,edx
c0028299:	eb 3c                	jmp    c00282d7 <__truncdfsf2+0x11c>
c002829b:	81 e9 80 03 00 00    	sub    ecx,0x380
c00282a1:	89 ca                	mov    edx,ecx
c00282a3:	c1 fa 0b             	sar    edx,0xb
c00282a6:	c1 e2 08             	shl    edx,0x8
c00282a9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00282ac:	31 db                	xor    ebx,ebx
c00282ae:	85 ff                	test   edi,edi
c00282b0:	0f 95 c3             	setne  bl
c00282b3:	09 d8                	or     eax,ebx
c00282b5:	89 c3                	mov    ebx,eax
c00282b7:	c1 eb 08             	shr    ebx,0x8
c00282ba:	a8 7f                	test   al,0x7f
c00282bc:	0f 95 c2             	setne  dl
c00282bf:	89 d6                	mov    esi,edx
c00282c1:	09 de                	or     esi,ebx
c00282c3:	83 e6 01             	and    esi,0x1
c00282c6:	c1 e8 07             	shr    eax,0x7
c00282c9:	21 f0                	and    eax,esi
c00282cb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00282ce:	09 ca                	or     edx,ecx
c00282d0:	c1 e2 17             	shl    edx,0x17
c00282d3:	09 da                	or     edx,ebx
c00282d5:	01 d0                	add    eax,edx
c00282d7:	83 c4 0c             	add    esp,0xc
c00282da:	5b                   	pop    ebx
c00282db:	5e                   	pop    esi
c00282dc:	5f                   	pop    edi
c00282dd:	5d                   	pop    ebp
c00282de:	c3                   	ret    

c00282df <__extendsfdf2>:
c00282df:	55                   	push   ebp
c00282e0:	89 e5                	mov    ebp,esp
c00282e2:	57                   	push   edi
c00282e3:	56                   	push   esi
c00282e4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00282e7:	89 d1                	mov    ecx,edx
c00282e9:	c1 f9 17             	sar    ecx,0x17
c00282ec:	c1 e2 08             	shl    edx,0x8
c00282ef:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00282f5:	89 c8                	mov    eax,ecx
c00282f7:	80 e4 f8             	and    ah,0xf8
c00282fa:	8d 71 01             	lea    esi,[ecx+0x1]
c00282fd:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028303:	75 27                	jne    c002832c <__extendsfdf2+0x4d>
c0028305:	81 e1 ff 00 00 00    	and    ecx,0xff
c002830b:	75 18                	jne    c0028325 <__extendsfdf2+0x46>
c002830d:	85 d2                	test   edx,edx
c002830f:	74 20                	je     c0028331 <__extendsfdf2+0x52>
c0028311:	41                   	inc    ecx
c0028312:	01 d2                	add    edx,edx
c0028314:	79 fb                	jns    c0028311 <__extendsfdf2+0x32>
c0028316:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002831c:	29 c8                	sub    eax,ecx
c002831e:	05 81 03 00 00       	add    eax,0x381
c0028323:	eb 0c                	jmp    c0028331 <__extendsfdf2+0x52>
c0028325:	05 00 07 00 00       	add    eax,0x700
c002832a:	eb 05                	jmp    c0028331 <__extendsfdf2+0x52>
c002832c:	05 80 03 00 00       	add    eax,0x380
c0028331:	c1 e0 14             	shl    eax,0x14
c0028334:	89 c1                	mov    ecx,eax
c0028336:	89 d0                	mov    eax,edx
c0028338:	c1 e8 0b             	shr    eax,0xb
c002833b:	09 c1                	or     ecx,eax
c002833d:	c1 e2 15             	shl    edx,0x15
c0028340:	89 d0                	mov    eax,edx
c0028342:	89 ca                	mov    edx,ecx
c0028344:	5e                   	pop    esi
c0028345:	5f                   	pop    edi
c0028346:	5d                   	pop    ebp
c0028347:	c3                   	ret    
c0028348:	66 90                	xchg   ax,ax
c002834a:	66 90                	xchg   ax,ax
c002834c:	66 90                	xchg   ax,ax
c002834e:	66 90                	xchg   ax,ax

c0028350 <fabs>:
c0028350:	83 ec 0c             	sub    esp,0xc
c0028353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028357:	89 04 24             	mov    DWORD PTR [esp],eax
c002835a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002835e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028363:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028367:	dd 04 24             	fld    QWORD PTR [esp]
c002836a:	83 c4 0c             	add    esp,0xc
c002836d:	c3                   	ret    
c002836e:	66 90                	xchg   ax,ax

c0028370 <lrint>:
c0028370:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028374:	83 ec 04             	sub    esp,0x4
c0028377:	db 1c 24             	fistp  DWORD PTR [esp]
c002837a:	58                   	pop    eax
c002837b:	c3                   	ret    

c002837c <lrintf>:
c002837c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028380:	83 ec 04             	sub    esp,0x4
c0028383:	db 1c 24             	fistp  DWORD PTR [esp]
c0028386:	58                   	pop    eax
c0028387:	c3                   	ret    

Disassembly of section .init:

c0028388 <_init>:
c0028388:	55                   	push   ebp
c0028389:	89 e5                	mov    ebp,esp
c002838b:	e8 88 7d fd ff       	call   c0000118 <frame_dummy>
c0028390:	e8 5b e0 ff ff       	call   c00263f0 <__do_global_ctors_aux>
c0028395:	5d                   	pop    ebp
c0028396:	c3                   	ret    

Disassembly of section .fini:

c0028397 <_fini>:
c0028397:	55                   	push   ebp
c0028398:	89 e5                	mov    ebp,esp
c002839a:	e8 09 7d fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002839f:	5d                   	pop    ebp
c00283a0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00283a2 <Computer::~Computer()>:
c00283a2:	83 ec 0c             	sub    esp,0xc
c00283a5:	ba 1c 9f 02 c0       	mov    edx,0xc0029f1c
c00283aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ae:	89 10                	mov    DWORD PTR [eax],edx
c00283b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283b4:	83 ec 0c             	sub    esp,0xc
c00283b7:	50                   	push   eax
c00283b8:	e8 eb b5 fe ff       	call   c00139a8 <Device::~Device()>
c00283bd:	83 c4 10             	add    esp,0x10
c00283c0:	90                   	nop
c00283c1:	83 c4 0c             	add    esp,0xc
c00283c4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00283c6 <Computer::~Computer()>:
c00283c6:	83 ec 0c             	sub    esp,0xc
c00283c9:	83 ec 0c             	sub    esp,0xc
c00283cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283d0:	e8 cd ff ff ff       	call   c00283a2 <Computer::~Computer()>
c00283d5:	83 c4 10             	add    esp,0x10
c00283d8:	83 ec 08             	sub    esp,0x8
c00283db:	68 ec 01 00 00       	push   0x1ec
c00283e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283e4:	e8 e0 a1 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c00283e9:	83 c4 10             	add    esp,0x10
c00283ec:	83 c4 0c             	add    esp,0xc
c00283ef:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00283f0 <idleCommon()>:
c00283f0:	83 ec 0c             	sub    esp,0xc
c00283f3:	fa                   	cli    
c00283f4:	ff 05 48 0e 03 c0    	inc    DWORD PTR ds:0xc0030e48
c00283fa:	e8 98 55 ff ff       	call   c001d997 <schedule()>
c00283ff:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0028404:	48                   	dec    eax
c0028405:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c002840a:	75 01                	jne    c002840d <idleCommon()+0x1d>
c002840c:	fb                   	sti    
c002840d:	83 c4 0c             	add    esp,0xc
c0028410:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028412 <LinkedList<UnixFile>::~LinkedList()>:
c0028412:	90                   	nop
c0028413:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028414 <LinkedList<UnixFile>::LinkedList()>:
c0028414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028418:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002841e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028422:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028429:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002842d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028434:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028438:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002843e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028442:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028449:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002844d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028454:	90                   	nop
c0028455:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028456 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028456:	83 ec 0c             	sub    esp,0xc
c0028459:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002845e:	75 10                	jne    c0028470 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028460:	83 ec 0c             	sub    esp,0xc
c0028463:	68 98 a1 02 c0       	push   0xc002a198
c0028468:	e8 a0 19 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c002846d:	83 c4 10             	add    esp,0x10
c0028470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028474:	8b 00                	mov    eax,DWORD PTR [eax]
c0028476:	85 c0                	test   eax,eax
c0028478:	74 34                	je     c00284ae <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002847a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002847e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028481:	85 c0                	test   eax,eax
c0028483:	74 29                	je     c00284ae <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028489:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002848c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028490:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028497:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002849b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002849e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284ac:	eb 65                	jmp    c0028513 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00284ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00284b4:	85 c0                	test   eax,eax
c00284b6:	75 4b                	jne    c0028503 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284bf:	85 c0                	test   eax,eax
c00284c1:	75 40                	jne    c0028503 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284cb:	89 10                	mov    DWORD PTR [eax],edx
c00284cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284ed:	85 c0                	test   eax,eax
c00284ef:	74 22                	je     c0028513 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00284f1:	83 ec 0c             	sub    esp,0xc
c00284f4:	68 ba a1 02 c0       	push   0xc002a1ba
c00284f9:	e8 0f 19 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c00284fe:	83 c4 10             	add    esp,0x10
c0028501:	eb 10                	jmp    c0028513 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028503:	83 ec 0c             	sub    esp,0xc
c0028506:	68 c4 a1 02 c0       	push   0xc002a1c4
c002850b:	e8 fd 18 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0028510:	83 c4 10             	add    esp,0x10
c0028513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028517:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002851a:	8d 50 01             	lea    edx,[eax+0x1]
c002851d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028521:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028524:	90                   	nop
c0028525:	83 c4 0c             	add    esp,0xc
c0028528:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002852a <LinkedList<UnixFile>::getFirstElement()>:
c002852a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002852e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028530:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028532 <LinkedList<UnixFile>::removeFirst()>:
c0028532:	83 ec 0c             	sub    esp,0xc
c0028535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028539:	8b 00                	mov    eax,DWORD PTR [eax]
c002853b:	85 c0                	test   eax,eax
c002853d:	75 12                	jne    c0028551 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002853f:	83 ec 0c             	sub    esp,0xc
c0028542:	68 d0 a1 02 c0       	push   0xc002a1d0
c0028547:	e8 c1 18 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c002854c:	83 c4 10             	add    esp,0x10
c002854f:	eb 7e                	jmp    c00285cf <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028555:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028558:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002855b:	85 c0                	test   eax,eax
c002855d:	74 10                	je     c002856f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002855f:	83 ec 0c             	sub    esp,0xc
c0028562:	68 1b a2 02 c0       	push   0xc002a21b
c0028567:	e8 a1 18 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c002856c:	83 c4 10             	add    esp,0x10
c002856f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028573:	8b 00                	mov    eax,DWORD PTR [eax]
c0028575:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028578:	85 c0                	test   eax,eax
c002857a:	75 33                	jne    c00285af <LinkedList<UnixFile>::removeFirst()+0x7d>
c002857c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028580:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002858a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028595:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028598:	83 f8 01             	cmp    eax,0x1
c002859b:	74 21                	je     c00285be <LinkedList<UnixFile>::removeFirst()+0x8c>
c002859d:	83 ec 0c             	sub    esp,0xc
c00285a0:	68 f4 a1 02 c0       	push   0xc002a1f4
c00285a5:	e8 63 18 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c00285aa:	83 c4 10             	add    esp,0x10
c00285ad:	eb 0f                	jmp    c00285be <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285b5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00285b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285bc:	89 10                	mov    DWORD PTR [eax],edx
c00285be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285c5:	8d 50 ff             	lea    edx,[eax-0x1]
c00285c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285cc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00285cf:	83 c4 0c             	add    esp,0xc
c00285d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00285d4 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00285d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00285d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285db:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00285dc <DriverlessDevice::~DriverlessDevice()>:
c00285dc:	ba 5c aa 02 c0       	mov    edx,0xc002aa5c
c00285e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285e5:	89 10                	mov    DWORD PTR [eax],edx
c00285e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285eb:	50                   	push   eax
c00285ec:	e8 b7 b3 fe ff       	call   c00139a8 <Device::~Device()>
c00285f1:	83 c4 04             	add    esp,0x4
c00285f4:	90                   	nop
c00285f5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00285f6 <DriverlessDevice::~DriverlessDevice()>:
c00285f6:	83 ec 0c             	sub    esp,0xc
c00285f9:	83 ec 0c             	sub    esp,0xc
c00285fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028600:	e8 d7 ff ff ff       	call   c00285dc <DriverlessDevice::~DriverlessDevice()>
c0028605:	83 c4 10             	add    esp,0x10
c0028608:	83 ec 08             	sub    esp,0x8
c002860b:	68 58 01 00 00       	push   0x158
c0028610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028614:	e8 b0 9f fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028619:	83 c4 10             	add    esp,0x10
c002861c:	83 c4 0c             	add    esp,0xc
c002861f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028620 <LinkedList<Device>::addElement(Device*)>:
c0028620:	83 ec 0c             	sub    esp,0xc
c0028623:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028628:	75 10                	jne    c002863a <LinkedList<Device>::addElement(Device*)+0x1a>
c002862a:	83 ec 0c             	sub    esp,0xc
c002862d:	68 98 a1 02 c0       	push   0xc002a198
c0028632:	e8 d6 17 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0028637:	83 c4 10             	add    esp,0x10
c002863a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002863e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028640:	85 c0                	test   eax,eax
c0028642:	74 3a                	je     c002867e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002864b:	85 c0                	test   eax,eax
c002864d:	74 2f                	je     c002867e <LinkedList<Device>::addElement(Device*)+0x5e>
c002864f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028653:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028656:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002865a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028664:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028668:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002866b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028672:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002867c:	eb 68                	jmp    c00286e6 <LinkedList<Device>::addElement(Device*)+0xc6>
c002867e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028682:	8b 00                	mov    eax,DWORD PTR [eax]
c0028684:	85 c0                	test   eax,eax
c0028686:	75 4e                	jne    c00286d6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002868f:	85 c0                	test   eax,eax
c0028691:	75 43                	jne    c00286d6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028697:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002869b:	89 10                	mov    DWORD PTR [eax],edx
c002869d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286af:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286c0:	85 c0                	test   eax,eax
c00286c2:	74 22                	je     c00286e6 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286c4:	83 ec 0c             	sub    esp,0xc
c00286c7:	68 ba a1 02 c0       	push   0xc002a1ba
c00286cc:	e8 3c 17 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c00286d1:	83 c4 10             	add    esp,0x10
c00286d4:	eb 10                	jmp    c00286e6 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286d6:	83 ec 0c             	sub    esp,0xc
c00286d9:	68 c4 a1 02 c0       	push   0xc002a1c4
c00286de:	e8 2a 17 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c00286e3:	83 c4 10             	add    esp,0x10
c00286e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286ed:	8d 50 01             	lea    edx,[eax+0x1]
c00286f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286f7:	90                   	nop
c00286f8:	83 c4 0c             	add    esp,0xc
c00286fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00286fc <LinkedList<Device>::LinkedList()>:
c00286fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028700:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002870a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028715:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002871c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028720:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002872a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028731:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028735:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002873c:	90                   	nop
c002873d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002873e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002873e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028742:	8b 00                	mov    eax,DWORD PTR [eax]
c0028744:	85 c0                	test   eax,eax
c0028746:	75 0e                	jne    c0028756 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002874c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002874f:	85 c0                	test   eax,eax
c0028751:	75 03                	jne    c0028756 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028753:	b0 01                	mov    al,0x1
c0028755:	c3                   	ret    
c0028756:	b0 00                	mov    al,0x0
c0028758:	90                   	nop
c0028759:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002875a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002875e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028760:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028762 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028762:	83 ec 0c             	sub    esp,0xc
c0028765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028769:	8b 00                	mov    eax,DWORD PTR [eax]
c002876b:	85 c0                	test   eax,eax
c002876d:	75 15                	jne    c0028784 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002876f:	83 ec 0c             	sub    esp,0xc
c0028772:	68 d0 a1 02 c0       	push   0xc002a1d0
c0028777:	e8 91 16 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c002877c:	83 c4 10             	add    esp,0x10
c002877f:	e9 88 00 00 00       	jmp    c002880c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028788:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002878b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002878e:	85 c0                	test   eax,eax
c0028790:	0f 95 c0             	setne  al
c0028793:	84 c0                	test   al,al
c0028795:	74 10                	je     c00287a7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028797:	83 ec 0c             	sub    esp,0xc
c002879a:	68 1b a2 02 c0       	push   0xc002a21b
c002879f:	e8 69 16 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c00287a4:	83 c4 10             	add    esp,0x10
c00287a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287b0:	85 c0                	test   eax,eax
c00287b2:	0f 94 c0             	sete   al
c00287b5:	84 c0                	test   al,al
c00287b7:	74 33                	je     c00287ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00287b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287d5:	83 f8 01             	cmp    eax,0x1
c00287d8:	74 21                	je     c00287fb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00287da:	83 ec 0c             	sub    esp,0xc
c00287dd:	68 f4 a1 02 c0       	push   0xc002a1f4
c00287e2:	e8 26 16 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c00287e7:	83 c4 10             	add    esp,0x10
c00287ea:	eb 0f                	jmp    c00287fb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00287ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00287f2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00287f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f9:	89 10                	mov    DWORD PTR [eax],edx
c00287fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028802:	8d 50 ff             	lea    edx,[eax-0x1]
c0028805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028809:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002880c:	83 c4 0c             	add    esp,0xc
c002880f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028810:	83 ec 0c             	sub    esp,0xc
c0028813:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028818:	75 10                	jne    c002882a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002881a:	83 ec 0c             	sub    esp,0xc
c002881d:	68 98 a1 02 c0       	push   0xc002a198
c0028822:	e8 e6 15 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0028827:	83 c4 10             	add    esp,0x10
c002882a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028830:	85 c0                	test   eax,eax
c0028832:	74 34                	je     c0028868 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028838:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002883b:	85 c0                	test   eax,eax
c002883d:	74 29                	je     c0028868 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002883f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028843:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028846:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002884a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002884d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028851:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028855:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002885f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028866:	eb 65                	jmp    c00288cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886c:	8b 00                	mov    eax,DWORD PTR [eax]
c002886e:	85 c0                	test   eax,eax
c0028870:	75 4b                	jne    c00288bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028879:	85 c0                	test   eax,eax
c002887b:	75 40                	jne    c00288bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002887d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028881:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028885:	89 10                	mov    DWORD PTR [eax],edx
c0028887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002888f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028899:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a7:	85 c0                	test   eax,eax
c00288a9:	74 22                	je     c00288cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288ab:	83 ec 0c             	sub    esp,0xc
c00288ae:	68 ba a1 02 c0       	push   0xc002a1ba
c00288b3:	e8 55 15 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c00288b8:	83 c4 10             	add    esp,0x10
c00288bb:	eb 10                	jmp    c00288cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288bd:	83 ec 0c             	sub    esp,0xc
c00288c0:	68 c4 a1 02 c0       	push   0xc002a1c4
c00288c5:	e8 43 15 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c00288ca:	83 c4 10             	add    esp,0x10
c00288cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288d4:	8d 50 01             	lea    edx,[eax+0x1]
c00288d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288de:	90                   	nop
c00288df:	83 c4 0c             	add    esp,0xc
c00288e2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00288e4 <ACPI::~ACPI()>:
c00288e4:	83 ec 0c             	sub    esp,0xc
c00288e7:	ba c8 b2 02 c0       	mov    edx,0xc002b2c8
c00288ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f0:	89 10                	mov    DWORD PTR [eax],edx
c00288f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f6:	83 ec 0c             	sub    esp,0xc
c00288f9:	50                   	push   eax
c00288fa:	e8 a9 b0 fe ff       	call   c00139a8 <Device::~Device()>
c00288ff:	83 c4 10             	add    esp,0x10
c0028902:	90                   	nop
c0028903:	83 c4 0c             	add    esp,0xc
c0028906:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028908 <ACPI::~ACPI()>:
c0028908:	83 ec 0c             	sub    esp,0xc
c002890b:	83 ec 0c             	sub    esp,0xc
c002890e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028912:	e8 cd ff ff ff       	call   c00288e4 <ACPI::~ACPI()>
c0028917:	83 c4 10             	add    esp,0x10
c002891a:	83 ec 08             	sub    esp,0x8
c002891d:	68 64 12 00 00       	push   0x1264
c0028922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028926:	e8 9e 9c fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c002892b:	83 c4 10             	add    esp,0x10
c002892e:	83 c4 0c             	add    esp,0xc
c0028931:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028932 <LinkedList<Device>::~LinkedList()>:
c0028932:	90                   	nop
c0028933:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028934 <LinkedList<Device>::isEmpty()>:
c0028934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028938:	8b 00                	mov    eax,DWORD PTR [eax]
c002893a:	85 c0                	test   eax,eax
c002893c:	75 0e                	jne    c002894c <LinkedList<Device>::isEmpty()+0x18>
c002893e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028942:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028945:	85 c0                	test   eax,eax
c0028947:	75 03                	jne    c002894c <LinkedList<Device>::isEmpty()+0x18>
c0028949:	b0 01                	mov    al,0x1
c002894b:	c3                   	ret    
c002894c:	b0 00                	mov    al,0x0
c002894e:	90                   	nop
c002894f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028950 <LinkedList<Device>::getFirstElement()>:
c0028950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028954:	8b 00                	mov    eax,DWORD PTR [eax]
c0028956:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028958 <LinkedList<Device>::removeFirst()>:
c0028958:	83 ec 0c             	sub    esp,0xc
c002895b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028961:	85 c0                	test   eax,eax
c0028963:	75 15                	jne    c002897a <LinkedList<Device>::removeFirst()+0x22>
c0028965:	83 ec 0c             	sub    esp,0xc
c0028968:	68 d0 a1 02 c0       	push   0xc002a1d0
c002896d:	e8 9b 14 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0028972:	83 c4 10             	add    esp,0x10
c0028975:	e9 87 00 00 00       	jmp    c0028a01 <LinkedList<Device>::removeFirst()+0xa9>
c002897a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028981:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028987:	85 c0                	test   eax,eax
c0028989:	74 10                	je     c002899b <LinkedList<Device>::removeFirst()+0x43>
c002898b:	83 ec 0c             	sub    esp,0xc
c002898e:	68 1b a2 02 c0       	push   0xc002a21b
c0028993:	e8 75 14 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c0028998:	83 c4 10             	add    esp,0x10
c002899b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899f:	8b 00                	mov    eax,DWORD PTR [eax]
c00289a1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289a7:	85 c0                	test   eax,eax
c00289a9:	75 33                	jne    c00289de <LinkedList<Device>::removeFirst()+0x86>
c00289ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289c7:	83 f8 01             	cmp    eax,0x1
c00289ca:	74 24                	je     c00289f0 <LinkedList<Device>::removeFirst()+0x98>
c00289cc:	83 ec 0c             	sub    esp,0xc
c00289cf:	68 f4 a1 02 c0       	push   0xc002a1f4
c00289d4:	e8 34 14 ff ff       	call   c0019e0d <Krnl::panic(char const*)>
c00289d9:	83 c4 10             	add    esp,0x10
c00289dc:	eb 12                	jmp    c00289f0 <LinkedList<Device>::removeFirst()+0x98>
c00289de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00289e4:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00289ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ee:	89 10                	mov    DWORD PTR [eax],edx
c00289f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289f7:	8d 50 ff             	lea    edx,[eax-0x1]
c00289fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a01:	83 c4 0c             	add    esp,0xc
c0028a04:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028a06 <CPU::~CPU()>:
c0028a06:	83 ec 0c             	sub    esp,0xc
c0028a09:	ba 18 b5 02 c0       	mov    edx,0xc002b518
c0028a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a12:	89 10                	mov    DWORD PTR [eax],edx
c0028a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a18:	83 ec 0c             	sub    esp,0xc
c0028a1b:	50                   	push   eax
c0028a1c:	e8 87 af fe ff       	call   c00139a8 <Device::~Device()>
c0028a21:	83 c4 10             	add    esp,0x10
c0028a24:	90                   	nop
c0028a25:	83 c4 0c             	add    esp,0xc
c0028a28:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028a2a <CPU::~CPU()>:
c0028a2a:	83 ec 0c             	sub    esp,0xc
c0028a2d:	83 ec 0c             	sub    esp,0xc
c0028a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a34:	e8 cd ff ff ff       	call   c0028a06 <CPU::~CPU()>
c0028a39:	83 c4 10             	add    esp,0x10
c0028a3c:	83 ec 08             	sub    esp,0x8
c0028a3f:	68 98 11 00 00       	push   0x1198
c0028a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a48:	e8 7c 9b fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028a4d:	83 c4 10             	add    esp,0x10
c0028a50:	83 c4 0c             	add    esp,0xc
c0028a53:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028a54 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028a54:	90                   	nop
c0028a55:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028a56 <ThreadControlBlock::ThreadControlBlock()>:
c0028a56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a5a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a65:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028a6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a70:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028a77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a7b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028a82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a86:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028a8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a91:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028a95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a99:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028a9d:	90                   	nop
c0028a9e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028aa0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028aa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aa4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ab5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ace:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ad5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ae0:	90                   	nop
c0028ae1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028ae2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028ae2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ae6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ae9:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028aea <Vm::_FPUState::_FPUState()>:
c0028aea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aee:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028af5:	90                   	nop
c0028af6:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028af8 <PCI::~PCI()>:
c0028af8:	83 ec 0c             	sub    esp,0xc
c0028afb:	ba 44 c0 02 c0       	mov    edx,0xc002c044
c0028b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b04:	89 10                	mov    DWORD PTR [eax],edx
c0028b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0a:	83 ec 0c             	sub    esp,0xc
c0028b0d:	50                   	push   eax
c0028b0e:	e8 65 a8 fe ff       	call   c0013378 <Bus::~Bus()>
c0028b13:	83 c4 10             	add    esp,0x10
c0028b16:	90                   	nop
c0028b17:	83 c4 0c             	add    esp,0xc
c0028b1a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028b1c <PCI::~PCI()>:
c0028b1c:	83 ec 0c             	sub    esp,0xc
c0028b1f:	83 ec 0c             	sub    esp,0xc
c0028b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b26:	e8 cd ff ff ff       	call   c0028af8 <PCI::~PCI()>
c0028b2b:	83 c4 10             	add    esp,0x10
c0028b2e:	83 ec 08             	sub    esp,0x8
c0028b31:	68 5c 01 00 00       	push   0x15c
c0028b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b3a:	e8 8a 9a fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028b3f:	83 c4 10             	add    esp,0x10
c0028b42:	83 c4 0c             	add    esp,0xc
c0028b45:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028b46 <IDE::~IDE()>:
c0028b46:	83 ec 0c             	sub    esp,0xc
c0028b49:	ba f8 c0 02 c0       	mov    edx,0xc002c0f8
c0028b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b52:	89 10                	mov    DWORD PTR [eax],edx
c0028b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b58:	83 ec 0c             	sub    esp,0xc
c0028b5b:	50                   	push   eax
c0028b5c:	e8 5d b3 fe ff       	call   c0013ebe <HardDiskController::~HardDiskController()>
c0028b61:	83 c4 10             	add    esp,0x10
c0028b64:	90                   	nop
c0028b65:	83 c4 0c             	add    esp,0xc
c0028b68:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028b6a <IDE::~IDE()>:
c0028b6a:	83 ec 0c             	sub    esp,0xc
c0028b6d:	83 ec 0c             	sub    esp,0xc
c0028b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b74:	e8 cd ff ff ff       	call   c0028b46 <IDE::~IDE()>
c0028b79:	83 c4 10             	add    esp,0x10
c0028b7c:	83 ec 08             	sub    esp,0x8
c0028b7f:	68 70 02 00 00       	push   0x270
c0028b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b88:	e8 3c 9a fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028b8d:	83 c4 10             	add    esp,0x10
c0028b90:	83 c4 0c             	add    esp,0xc
c0028b93:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028b94 <SATABus::~SATABus()>:
c0028b94:	83 ec 0c             	sub    esp,0xc
c0028b97:	ba 70 c1 02 c0       	mov    edx,0xc002c170
c0028b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba0:	89 10                	mov    DWORD PTR [eax],edx
c0028ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba6:	83 ec 0c             	sub    esp,0xc
c0028ba9:	50                   	push   eax
c0028baa:	e8 0f b3 fe ff       	call   c0013ebe <HardDiskController::~HardDiskController()>
c0028baf:	83 c4 10             	add    esp,0x10
c0028bb2:	90                   	nop
c0028bb3:	83 c4 0c             	add    esp,0xc
c0028bb6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028bb8 <SATABus::~SATABus()>:
c0028bb8:	83 ec 0c             	sub    esp,0xc
c0028bbb:	83 ec 0c             	sub    esp,0xc
c0028bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bc2:	e8 cd ff ff ff       	call   c0028b94 <SATABus::~SATABus()>
c0028bc7:	83 c4 10             	add    esp,0x10
c0028bca:	83 ec 08             	sub    esp,0x8
c0028bcd:	68 64 01 00 00       	push   0x164
c0028bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bd6:	e8 ee 99 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028bdb:	83 c4 10             	add    esp,0x10
c0028bde:	83 c4 0c             	add    esp,0xc
c0028be1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028be2 <ATA::~ATA()>:
c0028be2:	83 ec 0c             	sub    esp,0xc
c0028be5:	ba bc c1 02 c0       	mov    edx,0xc002c1bc
c0028bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bee:	89 10                	mov    DWORD PTR [eax],edx
c0028bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf4:	83 ec 0c             	sub    esp,0xc
c0028bf7:	50                   	push   eax
c0028bf8:	e8 a3 b3 fe ff       	call   c0013fa0 <PhysicalDisk::~PhysicalDisk()>
c0028bfd:	83 c4 10             	add    esp,0x10
c0028c00:	90                   	nop
c0028c01:	83 c4 0c             	add    esp,0xc
c0028c04:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028c06 <ATA::~ATA()>:
c0028c06:	83 ec 0c             	sub    esp,0xc
c0028c09:	83 ec 0c             	sub    esp,0xc
c0028c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c10:	e8 cd ff ff ff       	call   c0028be2 <ATA::~ATA()>
c0028c15:	83 c4 10             	add    esp,0x10
c0028c18:	83 ec 08             	sub    esp,0x8
c0028c1b:	68 7c 01 00 00       	push   0x17c
c0028c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c24:	e8 a0 99 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028c29:	83 c4 10             	add    esp,0x10
c0028c2c:	83 c4 0c             	add    esp,0xc
c0028c2f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028c30 <ATAPI::~ATAPI()>:
c0028c30:	83 ec 0c             	sub    esp,0xc
c0028c33:	ba f4 c1 02 c0       	mov    edx,0xc002c1f4
c0028c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3c:	89 10                	mov    DWORD PTR [eax],edx
c0028c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c42:	83 ec 0c             	sub    esp,0xc
c0028c45:	50                   	push   eax
c0028c46:	e8 55 b3 fe ff       	call   c0013fa0 <PhysicalDisk::~PhysicalDisk()>
c0028c4b:	83 c4 10             	add    esp,0x10
c0028c4e:	90                   	nop
c0028c4f:	83 c4 0c             	add    esp,0xc
c0028c52:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028c54 <ATAPI::~ATAPI()>:
c0028c54:	83 ec 0c             	sub    esp,0xc
c0028c57:	83 ec 0c             	sub    esp,0xc
c0028c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c5e:	e8 cd ff ff ff       	call   c0028c30 <ATAPI::~ATAPI()>
c0028c63:	83 c4 10             	add    esp,0x10
c0028c66:	83 ec 08             	sub    esp,0x8
c0028c69:	68 80 01 00 00       	push   0x180
c0028c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c72:	e8 52 99 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028c77:	83 c4 10             	add    esp,0x10
c0028c7a:	83 c4 0c             	add    esp,0xc
c0028c7d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028c7e <SATA::~SATA()>:
c0028c7e:	83 ec 0c             	sub    esp,0xc
c0028c81:	ba a8 c2 02 c0       	mov    edx,0xc002c2a8
c0028c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8a:	89 10                	mov    DWORD PTR [eax],edx
c0028c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c90:	83 ec 0c             	sub    esp,0xc
c0028c93:	50                   	push   eax
c0028c94:	e8 07 b3 fe ff       	call   c0013fa0 <PhysicalDisk::~PhysicalDisk()>
c0028c99:	83 c4 10             	add    esp,0x10
c0028c9c:	90                   	nop
c0028c9d:	83 c4 0c             	add    esp,0xc
c0028ca0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ca2 <SATA::~SATA()>:
c0028ca2:	83 ec 0c             	sub    esp,0xc
c0028ca5:	83 ec 0c             	sub    esp,0xc
c0028ca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cac:	e8 cd ff ff ff       	call   c0028c7e <SATA::~SATA()>
c0028cb1:	83 c4 10             	add    esp,0x10
c0028cb4:	83 ec 08             	sub    esp,0x8
c0028cb7:	68 7c 01 00 00       	push   0x17c
c0028cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc0:	e8 04 99 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028cc5:	83 c4 10             	add    esp,0x10
c0028cc8:	83 c4 0c             	add    esp,0xc
c0028ccb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028ccc <SATAPI::~SATAPI()>:
c0028ccc:	83 ec 0c             	sub    esp,0xc
c0028ccf:	ba 84 c3 02 c0       	mov    edx,0xc002c384
c0028cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd8:	89 10                	mov    DWORD PTR [eax],edx
c0028cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cde:	83 ec 0c             	sub    esp,0xc
c0028ce1:	50                   	push   eax
c0028ce2:	e8 b9 b2 fe ff       	call   c0013fa0 <PhysicalDisk::~PhysicalDisk()>
c0028ce7:	83 c4 10             	add    esp,0x10
c0028cea:	90                   	nop
c0028ceb:	83 c4 0c             	add    esp,0xc
c0028cee:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028cf0 <SATAPI::~SATAPI()>:
c0028cf0:	83 ec 0c             	sub    esp,0xc
c0028cf3:	83 ec 0c             	sub    esp,0xc
c0028cf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cfa:	e8 cd ff ff ff       	call   c0028ccc <SATAPI::~SATAPI()>
c0028cff:	83 c4 10             	add    esp,0x10
c0028d02:	83 ec 08             	sub    esp,0x8
c0028d05:	68 80 01 00 00       	push   0x180
c0028d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d0e:	e8 b6 98 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028d13:	83 c4 10             	add    esp,0x10
c0028d16:	83 c4 0c             	add    esp,0xc
c0028d19:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028d1a <AVX::~AVX()>:
c0028d1a:	83 ec 0c             	sub    esp,0xc
c0028d1d:	ba c4 c3 02 c0       	mov    edx,0xc002c3c4
c0028d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d26:	89 10                	mov    DWORD PTR [eax],edx
c0028d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2c:	83 ec 0c             	sub    esp,0xc
c0028d2f:	50                   	push   eax
c0028d30:	e8 ef b2 fe ff       	call   c0014024 <FPU::~FPU()>
c0028d35:	83 c4 10             	add    esp,0x10
c0028d38:	90                   	nop
c0028d39:	83 c4 0c             	add    esp,0xc
c0028d3c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028d3e <AVX::~AVX()>:
c0028d3e:	83 ec 0c             	sub    esp,0xc
c0028d41:	83 ec 0c             	sub    esp,0xc
c0028d44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d48:	e8 cd ff ff ff       	call   c0028d1a <AVX::~AVX()>
c0028d4d:	83 c4 10             	add    esp,0x10
c0028d50:	83 ec 08             	sub    esp,0x8
c0028d53:	68 58 01 00 00       	push   0x158
c0028d58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d5c:	e8 68 98 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028d61:	83 c4 10             	add    esp,0x10
c0028d64:	83 c4 0c             	add    esp,0xc
c0028d67:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028d68 <MMX::~MMX()>:
c0028d68:	83 ec 0c             	sub    esp,0xc
c0028d6b:	ba 04 c4 02 c0       	mov    edx,0xc002c404
c0028d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d74:	89 10                	mov    DWORD PTR [eax],edx
c0028d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7a:	83 ec 0c             	sub    esp,0xc
c0028d7d:	50                   	push   eax
c0028d7e:	e8 a1 b2 fe ff       	call   c0014024 <FPU::~FPU()>
c0028d83:	83 c4 10             	add    esp,0x10
c0028d86:	90                   	nop
c0028d87:	83 c4 0c             	add    esp,0xc
c0028d8a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028d8c <MMX::~MMX()>:
c0028d8c:	83 ec 0c             	sub    esp,0xc
c0028d8f:	83 ec 0c             	sub    esp,0xc
c0028d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d96:	e8 cd ff ff ff       	call   c0028d68 <MMX::~MMX()>
c0028d9b:	83 c4 10             	add    esp,0x10
c0028d9e:	83 ec 08             	sub    esp,0x8
c0028da1:	68 58 01 00 00       	push   0x158
c0028da6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028daa:	e8 1a 98 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028daf:	83 c4 10             	add    esp,0x10
c0028db2:	83 c4 0c             	add    esp,0xc
c0028db5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028db6 <SSE::~SSE()>:
c0028db6:	83 ec 0c             	sub    esp,0xc
c0028db9:	ba 44 c4 02 c0       	mov    edx,0xc002c444
c0028dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc2:	89 10                	mov    DWORD PTR [eax],edx
c0028dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc8:	83 ec 0c             	sub    esp,0xc
c0028dcb:	50                   	push   eax
c0028dcc:	e8 53 b2 fe ff       	call   c0014024 <FPU::~FPU()>
c0028dd1:	83 c4 10             	add    esp,0x10
c0028dd4:	90                   	nop
c0028dd5:	83 c4 0c             	add    esp,0xc
c0028dd8:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028dda <SSE::~SSE()>:
c0028dda:	83 ec 0c             	sub    esp,0xc
c0028ddd:	83 ec 0c             	sub    esp,0xc
c0028de0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de4:	e8 cd ff ff ff       	call   c0028db6 <SSE::~SSE()>
c0028de9:	83 c4 10             	add    esp,0x10
c0028dec:	83 ec 08             	sub    esp,0x8
c0028def:	68 58 01 00 00       	push   0x158
c0028df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df8:	e8 cc 97 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028dfd:	83 c4 10             	add    esp,0x10
c0028e00:	83 c4 0c             	add    esp,0xc
c0028e03:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028e04 <x87::~x87()>:
c0028e04:	83 ec 0c             	sub    esp,0xc
c0028e07:	ba 84 c4 02 c0       	mov    edx,0xc002c484
c0028e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e10:	89 10                	mov    DWORD PTR [eax],edx
c0028e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e16:	83 ec 0c             	sub    esp,0xc
c0028e19:	50                   	push   eax
c0028e1a:	e8 05 b2 fe ff       	call   c0014024 <FPU::~FPU()>
c0028e1f:	83 c4 10             	add    esp,0x10
c0028e22:	90                   	nop
c0028e23:	83 c4 0c             	add    esp,0xc
c0028e26:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028e28 <x87::~x87()>:
c0028e28:	83 ec 0c             	sub    esp,0xc
c0028e2b:	83 ec 0c             	sub    esp,0xc
c0028e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e32:	e8 cd ff ff ff       	call   c0028e04 <x87::~x87()>
c0028e37:	83 c4 10             	add    esp,0x10
c0028e3a:	83 ec 08             	sub    esp,0x8
c0028e3d:	68 58 01 00 00       	push   0x158
c0028e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e46:	e8 7e 97 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028e4b:	83 c4 10             	add    esp,0x10
c0028e4e:	83 c4 0c             	add    esp,0xc
c0028e51:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028e52 <IOAPIC::~IOAPIC()>:
c0028e52:	83 ec 0c             	sub    esp,0xc
c0028e55:	ba dc c5 02 c0       	mov    edx,0xc002c5dc
c0028e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5e:	89 10                	mov    DWORD PTR [eax],edx
c0028e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e64:	83 ec 0c             	sub    esp,0xc
c0028e67:	50                   	push   eax
c0028e68:	e8 3b ab fe ff       	call   c00139a8 <Device::~Device()>
c0028e6d:	83 c4 10             	add    esp,0x10
c0028e70:	90                   	nop
c0028e71:	83 c4 0c             	add    esp,0xc
c0028e74:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028e76 <IOAPIC::~IOAPIC()>:
c0028e76:	83 ec 0c             	sub    esp,0xc
c0028e79:	83 ec 0c             	sub    esp,0xc
c0028e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e80:	e8 cd ff ff ff       	call   c0028e52 <IOAPIC::~IOAPIC()>
c0028e85:	83 c4 10             	add    esp,0x10
c0028e88:	83 ec 08             	sub    esp,0x8
c0028e8b:	68 68 01 00 00       	push   0x168
c0028e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e94:	e8 30 97 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028e99:	83 c4 10             	add    esp,0x10
c0028e9c:	83 c4 0c             	add    esp,0xc
c0028e9f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028ea0 <APIC::~APIC()>:
c0028ea0:	83 ec 0c             	sub    esp,0xc
c0028ea3:	ba 94 c5 02 c0       	mov    edx,0xc002c594
c0028ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eac:	89 10                	mov    DWORD PTR [eax],edx
c0028eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb2:	83 ec 0c             	sub    esp,0xc
c0028eb5:	50                   	push   eax
c0028eb6:	e8 33 b6 fe ff       	call   c00144ee <InterruptController::~InterruptController()>
c0028ebb:	83 c4 10             	add    esp,0x10
c0028ebe:	90                   	nop
c0028ebf:	83 c4 0c             	add    esp,0xc
c0028ec2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028ec4 <APIC::~APIC()>:
c0028ec4:	83 ec 0c             	sub    esp,0xc
c0028ec7:	83 ec 0c             	sub    esp,0xc
c0028eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ece:	e8 cd ff ff ff       	call   c0028ea0 <APIC::~APIC()>
c0028ed3:	83 c4 10             	add    esp,0x10
c0028ed6:	83 ec 08             	sub    esp,0x8
c0028ed9:	68 58 21 00 00       	push   0x2158
c0028ede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee2:	e8 e2 96 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028ee7:	83 c4 10             	add    esp,0x10
c0028eea:	83 c4 0c             	add    esp,0xc
c0028eed:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028eee <PIC::~PIC()>:
c0028eee:	83 ec 0c             	sub    esp,0xc
c0028ef1:	ba 2c c6 02 c0       	mov    edx,0xc002c62c
c0028ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efa:	89 10                	mov    DWORD PTR [eax],edx
c0028efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f00:	83 ec 0c             	sub    esp,0xc
c0028f03:	50                   	push   eax
c0028f04:	e8 e5 b5 fe ff       	call   c00144ee <InterruptController::~InterruptController()>
c0028f09:	83 c4 10             	add    esp,0x10
c0028f0c:	90                   	nop
c0028f0d:	83 c4 0c             	add    esp,0xc
c0028f10:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028f12 <PIC::~PIC()>:
c0028f12:	83 ec 0c             	sub    esp,0xc
c0028f15:	83 ec 0c             	sub    esp,0xc
c0028f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f1c:	e8 cd ff ff ff       	call   c0028eee <PIC::~PIC()>
c0028f21:	83 c4 10             	add    esp,0x10
c0028f24:	83 ec 08             	sub    esp,0x8
c0028f27:	68 58 21 00 00       	push   0x2158
c0028f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f30:	e8 94 96 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028f35:	83 c4 10             	add    esp,0x10
c0028f38:	83 c4 0c             	add    esp,0xc
c0028f3b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028f3c <APICTimer::~APICTimer()>:
c0028f3c:	83 ec 0c             	sub    esp,0xc
c0028f3f:	ba 80 c6 02 c0       	mov    edx,0xc002c680
c0028f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f48:	89 10                	mov    DWORD PTR [eax],edx
c0028f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4e:	83 ec 0c             	sub    esp,0xc
c0028f51:	50                   	push   eax
c0028f52:	e8 ef d5 fe ff       	call   c0016546 <Timer::~Timer()>
c0028f57:	83 c4 10             	add    esp,0x10
c0028f5a:	90                   	nop
c0028f5b:	83 c4 0c             	add    esp,0xc
c0028f5e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028f60 <APICTimer::~APICTimer()>:
c0028f60:	83 ec 0c             	sub    esp,0xc
c0028f63:	83 ec 0c             	sub    esp,0xc
c0028f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f6a:	e8 cd ff ff ff       	call   c0028f3c <APICTimer::~APICTimer()>
c0028f6f:	83 c4 10             	add    esp,0x10
c0028f72:	83 ec 08             	sub    esp,0x8
c0028f75:	68 60 01 00 00       	push   0x160
c0028f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f7e:	e8 46 96 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028f83:	83 c4 10             	add    esp,0x10
c0028f86:	83 c4 0c             	add    esp,0xc
c0028f89:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028f8a <PIT::~PIT()>:
c0028f8a:	83 ec 0c             	sub    esp,0xc
c0028f8d:	ba d0 c6 02 c0       	mov    edx,0xc002c6d0
c0028f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f96:	89 10                	mov    DWORD PTR [eax],edx
c0028f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9c:	83 ec 0c             	sub    esp,0xc
c0028f9f:	50                   	push   eax
c0028fa0:	e8 a1 d5 fe ff       	call   c0016546 <Timer::~Timer()>
c0028fa5:	83 c4 10             	add    esp,0x10
c0028fa8:	90                   	nop
c0028fa9:	83 c4 0c             	add    esp,0xc
c0028fac:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028fae <PIT::~PIT()>:
c0028fae:	83 ec 0c             	sub    esp,0xc
c0028fb1:	83 ec 0c             	sub    esp,0xc
c0028fb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb8:	e8 cd ff ff ff       	call   c0028f8a <PIT::~PIT()>
c0028fbd:	83 c4 10             	add    esp,0x10
c0028fc0:	83 ec 08             	sub    esp,0x8
c0028fc3:	68 5c 01 00 00       	push   0x15c
c0028fc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fcc:	e8 f8 95 fe ff       	call   c00125c9 <operator delete(void*, unsigned long)>
c0028fd1:	83 c4 10             	add    esp,0x10
c0028fd4:	83 c4 0c             	add    esp,0xc
c0028fd7:	c3                   	ret    
